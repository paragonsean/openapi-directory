/*
 * NBA Stats API
 * The destination for current and historic NBA statistics.
 *
 * The version of the OpenAPI document: version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for allstarballotpredictorGet
     * @param westPlayer1  (required)
     * @param westPlayer2  (required)
     * @param westPlayer3  (required)
     * @param westPlayer4  (required)
     * @param westPlayer5  (required)
     * @param eastPlayer1  (required)
     * @param eastPlayer2  (required)
     * @param eastPlayer3  (required)
     * @param eastPlayer4  (required)
     * @param eastPlayer5  (required)
     * @param pointCap  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allstarballotpredictorGetCall(String westPlayer1, String westPlayer2, String westPlayer3, String westPlayer4, String westPlayer5, String eastPlayer1, String eastPlayer2, String eastPlayer3, String eastPlayer4, String eastPlayer5, String pointCap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/allstarballotpredictor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pointCap != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PointCap", pointCap));
        }

        if (westPlayer1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WestPlayer1", westPlayer1));
        }

        if (westPlayer2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WestPlayer2", westPlayer2));
        }

        if (westPlayer3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WestPlayer3", westPlayer3));
        }

        if (westPlayer4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WestPlayer4", westPlayer4));
        }

        if (westPlayer5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WestPlayer5", westPlayer5));
        }

        if (eastPlayer1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EastPlayer1", eastPlayer1));
        }

        if (eastPlayer2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EastPlayer2", eastPlayer2));
        }

        if (eastPlayer3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EastPlayer3", eastPlayer3));
        }

        if (eastPlayer4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EastPlayer4", eastPlayer4));
        }

        if (eastPlayer5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EastPlayer5", eastPlayer5));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allstarballotpredictorGetValidateBeforeCall(String westPlayer1, String westPlayer2, String westPlayer3, String westPlayer4, String westPlayer5, String eastPlayer1, String eastPlayer2, String eastPlayer3, String eastPlayer4, String eastPlayer5, String pointCap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'westPlayer1' is set
        if (westPlayer1 == null) {
            throw new ApiException("Missing the required parameter 'westPlayer1' when calling allstarballotpredictorGet(Async)");
        }

        // verify the required parameter 'westPlayer2' is set
        if (westPlayer2 == null) {
            throw new ApiException("Missing the required parameter 'westPlayer2' when calling allstarballotpredictorGet(Async)");
        }

        // verify the required parameter 'westPlayer3' is set
        if (westPlayer3 == null) {
            throw new ApiException("Missing the required parameter 'westPlayer3' when calling allstarballotpredictorGet(Async)");
        }

        // verify the required parameter 'westPlayer4' is set
        if (westPlayer4 == null) {
            throw new ApiException("Missing the required parameter 'westPlayer4' when calling allstarballotpredictorGet(Async)");
        }

        // verify the required parameter 'westPlayer5' is set
        if (westPlayer5 == null) {
            throw new ApiException("Missing the required parameter 'westPlayer5' when calling allstarballotpredictorGet(Async)");
        }

        // verify the required parameter 'eastPlayer1' is set
        if (eastPlayer1 == null) {
            throw new ApiException("Missing the required parameter 'eastPlayer1' when calling allstarballotpredictorGet(Async)");
        }

        // verify the required parameter 'eastPlayer2' is set
        if (eastPlayer2 == null) {
            throw new ApiException("Missing the required parameter 'eastPlayer2' when calling allstarballotpredictorGet(Async)");
        }

        // verify the required parameter 'eastPlayer3' is set
        if (eastPlayer3 == null) {
            throw new ApiException("Missing the required parameter 'eastPlayer3' when calling allstarballotpredictorGet(Async)");
        }

        // verify the required parameter 'eastPlayer4' is set
        if (eastPlayer4 == null) {
            throw new ApiException("Missing the required parameter 'eastPlayer4' when calling allstarballotpredictorGet(Async)");
        }

        // verify the required parameter 'eastPlayer5' is set
        if (eastPlayer5 == null) {
            throw new ApiException("Missing the required parameter 'eastPlayer5' when calling allstarballotpredictorGet(Async)");
        }

        return allstarballotpredictorGetCall(westPlayer1, westPlayer2, westPlayer3, westPlayer4, westPlayer5, eastPlayer1, eastPlayer2, eastPlayer3, eastPlayer4, eastPlayer5, pointCap, _callback);

    }

    /**
     * 
     * 
     * @param westPlayer1  (required)
     * @param westPlayer2  (required)
     * @param westPlayer3  (required)
     * @param westPlayer4  (required)
     * @param westPlayer5  (required)
     * @param eastPlayer1  (required)
     * @param eastPlayer2  (required)
     * @param eastPlayer3  (required)
     * @param eastPlayer4  (required)
     * @param eastPlayer5  (required)
     * @param pointCap  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void allstarballotpredictorGet(String westPlayer1, String westPlayer2, String westPlayer3, String westPlayer4, String westPlayer5, String eastPlayer1, String eastPlayer2, String eastPlayer3, String eastPlayer4, String eastPlayer5, String pointCap) throws ApiException {
        allstarballotpredictorGetWithHttpInfo(westPlayer1, westPlayer2, westPlayer3, westPlayer4, westPlayer5, eastPlayer1, eastPlayer2, eastPlayer3, eastPlayer4, eastPlayer5, pointCap);
    }

    /**
     * 
     * 
     * @param westPlayer1  (required)
     * @param westPlayer2  (required)
     * @param westPlayer3  (required)
     * @param westPlayer4  (required)
     * @param westPlayer5  (required)
     * @param eastPlayer1  (required)
     * @param eastPlayer2  (required)
     * @param eastPlayer3  (required)
     * @param eastPlayer4  (required)
     * @param eastPlayer5  (required)
     * @param pointCap  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> allstarballotpredictorGetWithHttpInfo(String westPlayer1, String westPlayer2, String westPlayer3, String westPlayer4, String westPlayer5, String eastPlayer1, String eastPlayer2, String eastPlayer3, String eastPlayer4, String eastPlayer5, String pointCap) throws ApiException {
        okhttp3.Call localVarCall = allstarballotpredictorGetValidateBeforeCall(westPlayer1, westPlayer2, westPlayer3, westPlayer4, westPlayer5, eastPlayer1, eastPlayer2, eastPlayer3, eastPlayer4, eastPlayer5, pointCap, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param westPlayer1  (required)
     * @param westPlayer2  (required)
     * @param westPlayer3  (required)
     * @param westPlayer4  (required)
     * @param westPlayer5  (required)
     * @param eastPlayer1  (required)
     * @param eastPlayer2  (required)
     * @param eastPlayer3  (required)
     * @param eastPlayer4  (required)
     * @param eastPlayer5  (required)
     * @param pointCap  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allstarballotpredictorGetAsync(String westPlayer1, String westPlayer2, String westPlayer3, String westPlayer4, String westPlayer5, String eastPlayer1, String eastPlayer2, String eastPlayer3, String eastPlayer4, String eastPlayer5, String pointCap, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = allstarballotpredictorGetValidateBeforeCall(westPlayer1, westPlayer2, westPlayer3, westPlayer4, westPlayer5, eastPlayer1, eastPlayer2, eastPlayer3, eastPlayer4, eastPlayer5, pointCap, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscoreGet
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call boxscoreGetCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        if (startRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRange", startRange));
        }

        if (endRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndRange", endRange));
        }

        if (rangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RangeType", rangeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscoreGetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        return boxscoreGetCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void boxscoreGet(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        boxscoreGetWithHttpInfo(gameID, startPeriod, endPeriod, startRange, endRange, rangeType);
    }

    /**
     * 
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> boxscoreGetWithHttpInfo(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        okhttp3.Call localVarCall = boxscoreGetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call boxscoreGetAsync(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscoreGetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscoreadvancedGet
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call boxscoreadvancedGetCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscoreadvanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        if (startRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRange", startRange));
        }

        if (endRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndRange", endRange));
        }

        if (rangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RangeType", rangeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscoreadvancedGetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        return boxscoreadvancedGetCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void boxscoreadvancedGet(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        boxscoreadvancedGetWithHttpInfo(gameID, startPeriod, endPeriod, startRange, endRange, rangeType);
    }

    /**
     * 
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> boxscoreadvancedGetWithHttpInfo(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        okhttp3.Call localVarCall = boxscoreadvancedGetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call boxscoreadvancedGetAsync(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscoreadvancedGetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscoreadvancedv2Get
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscoreadvancedv2GetCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscoreadvancedv2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        if (startRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRange", startRange));
        }

        if (endRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndRange", endRange));
        }

        if (rangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RangeType", rangeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscoreadvancedv2GetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling boxscoreadvancedv2Get(Async)");
        }

        // verify the required parameter 'startPeriod' is set
        if (startPeriod == null) {
            throw new ApiException("Missing the required parameter 'startPeriod' when calling boxscoreadvancedv2Get(Async)");
        }

        // verify the required parameter 'endPeriod' is set
        if (endPeriod == null) {
            throw new ApiException("Missing the required parameter 'endPeriod' when calling boxscoreadvancedv2Get(Async)");
        }

        // verify the required parameter 'startRange' is set
        if (startRange == null) {
            throw new ApiException("Missing the required parameter 'startRange' when calling boxscoreadvancedv2Get(Async)");
        }

        // verify the required parameter 'endRange' is set
        if (endRange == null) {
            throw new ApiException("Missing the required parameter 'endRange' when calling boxscoreadvancedv2Get(Async)");
        }

        // verify the required parameter 'rangeType' is set
        if (rangeType == null) {
            throw new ApiException("Missing the required parameter 'rangeType' when calling boxscoreadvancedv2Get(Async)");
        }

        return boxscoreadvancedv2GetCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void boxscoreadvancedv2Get(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        boxscoreadvancedv2GetWithHttpInfo(gameID, startPeriod, endPeriod, startRange, endRange, rangeType);
    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boxscoreadvancedv2GetWithHttpInfo(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        okhttp3.Call localVarCall = boxscoreadvancedv2GetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscoreadvancedv2GetAsync(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscoreadvancedv2GetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscorefourfactorsGet
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call boxscorefourfactorsGetCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscorefourfactors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        if (startRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRange", startRange));
        }

        if (endRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndRange", endRange));
        }

        if (rangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RangeType", rangeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscorefourfactorsGetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        return boxscorefourfactorsGetCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void boxscorefourfactorsGet(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        boxscorefourfactorsGetWithHttpInfo(gameID, startPeriod, endPeriod, startRange, endRange, rangeType);
    }

    /**
     * 
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> boxscorefourfactorsGetWithHttpInfo(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        okhttp3.Call localVarCall = boxscorefourfactorsGetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call boxscorefourfactorsGetAsync(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscorefourfactorsGetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscorefourfactorsv2Get
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscorefourfactorsv2GetCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscorefourfactorsv2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        if (startRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRange", startRange));
        }

        if (endRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndRange", endRange));
        }

        if (rangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RangeType", rangeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscorefourfactorsv2GetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling boxscorefourfactorsv2Get(Async)");
        }

        // verify the required parameter 'startPeriod' is set
        if (startPeriod == null) {
            throw new ApiException("Missing the required parameter 'startPeriod' when calling boxscorefourfactorsv2Get(Async)");
        }

        // verify the required parameter 'endPeriod' is set
        if (endPeriod == null) {
            throw new ApiException("Missing the required parameter 'endPeriod' when calling boxscorefourfactorsv2Get(Async)");
        }

        // verify the required parameter 'startRange' is set
        if (startRange == null) {
            throw new ApiException("Missing the required parameter 'startRange' when calling boxscorefourfactorsv2Get(Async)");
        }

        // verify the required parameter 'endRange' is set
        if (endRange == null) {
            throw new ApiException("Missing the required parameter 'endRange' when calling boxscorefourfactorsv2Get(Async)");
        }

        // verify the required parameter 'rangeType' is set
        if (rangeType == null) {
            throw new ApiException("Missing the required parameter 'rangeType' when calling boxscorefourfactorsv2Get(Async)");
        }

        return boxscorefourfactorsv2GetCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void boxscorefourfactorsv2Get(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        boxscorefourfactorsv2GetWithHttpInfo(gameID, startPeriod, endPeriod, startRange, endRange, rangeType);
    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boxscorefourfactorsv2GetWithHttpInfo(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        okhttp3.Call localVarCall = boxscorefourfactorsv2GetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscorefourfactorsv2GetAsync(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscorefourfactorsv2GetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscoremiscGet
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call boxscoremiscGetCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscoremisc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        if (startRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRange", startRange));
        }

        if (endRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndRange", endRange));
        }

        if (rangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RangeType", rangeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscoremiscGetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        return boxscoremiscGetCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void boxscoremiscGet(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        boxscoremiscGetWithHttpInfo(gameID, startPeriod, endPeriod, startRange, endRange, rangeType);
    }

    /**
     * 
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> boxscoremiscGetWithHttpInfo(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        okhttp3.Call localVarCall = boxscoremiscGetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call boxscoremiscGetAsync(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscoremiscGetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscoremiscv2Get
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscoremiscv2GetCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscoremiscv2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        if (startRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRange", startRange));
        }

        if (endRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndRange", endRange));
        }

        if (rangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RangeType", rangeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscoremiscv2GetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling boxscoremiscv2Get(Async)");
        }

        // verify the required parameter 'startPeriod' is set
        if (startPeriod == null) {
            throw new ApiException("Missing the required parameter 'startPeriod' when calling boxscoremiscv2Get(Async)");
        }

        // verify the required parameter 'endPeriod' is set
        if (endPeriod == null) {
            throw new ApiException("Missing the required parameter 'endPeriod' when calling boxscoremiscv2Get(Async)");
        }

        // verify the required parameter 'startRange' is set
        if (startRange == null) {
            throw new ApiException("Missing the required parameter 'startRange' when calling boxscoremiscv2Get(Async)");
        }

        // verify the required parameter 'endRange' is set
        if (endRange == null) {
            throw new ApiException("Missing the required parameter 'endRange' when calling boxscoremiscv2Get(Async)");
        }

        // verify the required parameter 'rangeType' is set
        if (rangeType == null) {
            throw new ApiException("Missing the required parameter 'rangeType' when calling boxscoremiscv2Get(Async)");
        }

        return boxscoremiscv2GetCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void boxscoremiscv2Get(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        boxscoremiscv2GetWithHttpInfo(gameID, startPeriod, endPeriod, startRange, endRange, rangeType);
    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boxscoremiscv2GetWithHttpInfo(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        okhttp3.Call localVarCall = boxscoremiscv2GetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscoremiscv2GetAsync(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscoremiscv2GetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscoreplayertrackv2Get
     * @param gameID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscoreplayertrackv2GetCall(String gameID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscoreplayertrackv2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscoreplayertrackv2GetValidateBeforeCall(String gameID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling boxscoreplayertrackv2Get(Async)");
        }

        return boxscoreplayertrackv2GetCall(gameID, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void boxscoreplayertrackv2Get(String gameID) throws ApiException {
        boxscoreplayertrackv2GetWithHttpInfo(gameID);
    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boxscoreplayertrackv2GetWithHttpInfo(String gameID) throws ApiException {
        okhttp3.Call localVarCall = boxscoreplayertrackv2GetValidateBeforeCall(gameID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscoreplayertrackv2GetAsync(String gameID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscoreplayertrackv2GetValidateBeforeCall(gameID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscorescoringGet
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call boxscorescoringGetCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscorescoring";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        if (startRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRange", startRange));
        }

        if (endRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndRange", endRange));
        }

        if (rangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RangeType", rangeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscorescoringGetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        return boxscorescoringGetCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void boxscorescoringGet(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        boxscorescoringGetWithHttpInfo(gameID, startPeriod, endPeriod, startRange, endRange, rangeType);
    }

    /**
     * 
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> boxscorescoringGetWithHttpInfo(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        okhttp3.Call localVarCall = boxscorescoringGetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call boxscorescoringGetAsync(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscorescoringGetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscorescoringv2Get
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscorescoringv2GetCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscorescoringv2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        if (startRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRange", startRange));
        }

        if (endRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndRange", endRange));
        }

        if (rangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RangeType", rangeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscorescoringv2GetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling boxscorescoringv2Get(Async)");
        }

        // verify the required parameter 'startPeriod' is set
        if (startPeriod == null) {
            throw new ApiException("Missing the required parameter 'startPeriod' when calling boxscorescoringv2Get(Async)");
        }

        // verify the required parameter 'endPeriod' is set
        if (endPeriod == null) {
            throw new ApiException("Missing the required parameter 'endPeriod' when calling boxscorescoringv2Get(Async)");
        }

        // verify the required parameter 'startRange' is set
        if (startRange == null) {
            throw new ApiException("Missing the required parameter 'startRange' when calling boxscorescoringv2Get(Async)");
        }

        // verify the required parameter 'endRange' is set
        if (endRange == null) {
            throw new ApiException("Missing the required parameter 'endRange' when calling boxscorescoringv2Get(Async)");
        }

        // verify the required parameter 'rangeType' is set
        if (rangeType == null) {
            throw new ApiException("Missing the required parameter 'rangeType' when calling boxscorescoringv2Get(Async)");
        }

        return boxscorescoringv2GetCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void boxscorescoringv2Get(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        boxscorescoringv2GetWithHttpInfo(gameID, startPeriod, endPeriod, startRange, endRange, rangeType);
    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boxscorescoringv2GetWithHttpInfo(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        okhttp3.Call localVarCall = boxscorescoringv2GetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscorescoringv2GetAsync(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscorescoringv2GetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscoresummaryv2Get
     * @param gameID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscoresummaryv2GetCall(String gameID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscoresummaryv2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscoresummaryv2GetValidateBeforeCall(String gameID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling boxscoresummaryv2Get(Async)");
        }

        return boxscoresummaryv2GetCall(gameID, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void boxscoresummaryv2Get(String gameID) throws ApiException {
        boxscoresummaryv2GetWithHttpInfo(gameID);
    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boxscoresummaryv2GetWithHttpInfo(String gameID) throws ApiException {
        okhttp3.Call localVarCall = boxscoresummaryv2GetValidateBeforeCall(gameID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscoresummaryv2GetAsync(String gameID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscoresummaryv2GetValidateBeforeCall(gameID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscoretraditionalv2Get
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscoretraditionalv2GetCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscoretraditionalv2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        if (startRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRange", startRange));
        }

        if (endRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndRange", endRange));
        }

        if (rangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RangeType", rangeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscoretraditionalv2GetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling boxscoretraditionalv2Get(Async)");
        }

        // verify the required parameter 'startPeriod' is set
        if (startPeriod == null) {
            throw new ApiException("Missing the required parameter 'startPeriod' when calling boxscoretraditionalv2Get(Async)");
        }

        // verify the required parameter 'endPeriod' is set
        if (endPeriod == null) {
            throw new ApiException("Missing the required parameter 'endPeriod' when calling boxscoretraditionalv2Get(Async)");
        }

        // verify the required parameter 'startRange' is set
        if (startRange == null) {
            throw new ApiException("Missing the required parameter 'startRange' when calling boxscoretraditionalv2Get(Async)");
        }

        // verify the required parameter 'endRange' is set
        if (endRange == null) {
            throw new ApiException("Missing the required parameter 'endRange' when calling boxscoretraditionalv2Get(Async)");
        }

        // verify the required parameter 'rangeType' is set
        if (rangeType == null) {
            throw new ApiException("Missing the required parameter 'rangeType' when calling boxscoretraditionalv2Get(Async)");
        }

        return boxscoretraditionalv2GetCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void boxscoretraditionalv2Get(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        boxscoretraditionalv2GetWithHttpInfo(gameID, startPeriod, endPeriod, startRange, endRange, rangeType);
    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boxscoretraditionalv2GetWithHttpInfo(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        okhttp3.Call localVarCall = boxscoretraditionalv2GetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscoretraditionalv2GetAsync(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscoretraditionalv2GetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscoreusageGet
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call boxscoreusageGetCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscoreusage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        if (startRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRange", startRange));
        }

        if (endRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndRange", endRange));
        }

        if (rangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RangeType", rangeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscoreusageGetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        return boxscoreusageGetCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void boxscoreusageGet(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        boxscoreusageGetWithHttpInfo(gameID, startPeriod, endPeriod, startRange, endRange, rangeType);
    }

    /**
     * 
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> boxscoreusageGetWithHttpInfo(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        okhttp3.Call localVarCall = boxscoreusageGetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (optional)
     * @param startPeriod  (optional)
     * @param endPeriod  (optional)
     * @param startRange  (optional)
     * @param endRange  (optional)
     * @param rangeType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call boxscoreusageGetAsync(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscoreusageGetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxscoreusagev2Get
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscoreusagev2GetCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxscoreusagev2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        if (startRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRange", startRange));
        }

        if (endRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndRange", endRange));
        }

        if (rangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RangeType", rangeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxscoreusagev2GetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling boxscoreusagev2Get(Async)");
        }

        // verify the required parameter 'startPeriod' is set
        if (startPeriod == null) {
            throw new ApiException("Missing the required parameter 'startPeriod' when calling boxscoreusagev2Get(Async)");
        }

        // verify the required parameter 'endPeriod' is set
        if (endPeriod == null) {
            throw new ApiException("Missing the required parameter 'endPeriod' when calling boxscoreusagev2Get(Async)");
        }

        // verify the required parameter 'startRange' is set
        if (startRange == null) {
            throw new ApiException("Missing the required parameter 'startRange' when calling boxscoreusagev2Get(Async)");
        }

        // verify the required parameter 'endRange' is set
        if (endRange == null) {
            throw new ApiException("Missing the required parameter 'endRange' when calling boxscoreusagev2Get(Async)");
        }

        // verify the required parameter 'rangeType' is set
        if (rangeType == null) {
            throw new ApiException("Missing the required parameter 'rangeType' when calling boxscoreusagev2Get(Async)");
        }

        return boxscoreusagev2GetCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void boxscoreusagev2Get(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        boxscoreusagev2GetWithHttpInfo(gameID, startPeriod, endPeriod, startRange, endRange, rangeType);
    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boxscoreusagev2GetWithHttpInfo(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType) throws ApiException {
        okhttp3.Call localVarCall = boxscoreusagev2GetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param startRange  (required)
     * @param endRange  (required)
     * @param rangeType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxscoreusagev2GetAsync(String gameID, String startPeriod, String endPeriod, String startRange, String endRange, String rangeType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxscoreusagev2GetValidateBeforeCall(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for commonTeamYearsGet
     * @param leagueID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonTeamYearsGetCall(String leagueID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commonTeamYears";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commonTeamYearsGetValidateBeforeCall(String leagueID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling commonTeamYearsGet(Async)");
        }

        return commonTeamYearsGetCall(leagueID, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void commonTeamYearsGet(String leagueID) throws ApiException {
        commonTeamYearsGetWithHttpInfo(leagueID);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> commonTeamYearsGetWithHttpInfo(String leagueID) throws ApiException {
        okhttp3.Call localVarCall = commonTeamYearsGetValidateBeforeCall(leagueID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonTeamYearsGetAsync(String leagueID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = commonTeamYearsGetValidateBeforeCall(leagueID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for commonallplayersGet
     * @param leagueID  (required)
     * @param season  (required)
     * @param isOnlyCurrentSeason  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonallplayersGetCall(String leagueID, String season, String isOnlyCurrentSeason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commonallplayers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (isOnlyCurrentSeason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsOnlyCurrentSeason", isOnlyCurrentSeason));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commonallplayersGetValidateBeforeCall(String leagueID, String season, String isOnlyCurrentSeason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling commonallplayersGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling commonallplayersGet(Async)");
        }

        // verify the required parameter 'isOnlyCurrentSeason' is set
        if (isOnlyCurrentSeason == null) {
            throw new ApiException("Missing the required parameter 'isOnlyCurrentSeason' when calling commonallplayersGet(Async)");
        }

        return commonallplayersGetCall(leagueID, season, isOnlyCurrentSeason, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param season  (required)
     * @param isOnlyCurrentSeason  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void commonallplayersGet(String leagueID, String season, String isOnlyCurrentSeason) throws ApiException {
        commonallplayersGetWithHttpInfo(leagueID, season, isOnlyCurrentSeason);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param season  (required)
     * @param isOnlyCurrentSeason  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> commonallplayersGetWithHttpInfo(String leagueID, String season, String isOnlyCurrentSeason) throws ApiException {
        okhttp3.Call localVarCall = commonallplayersGetValidateBeforeCall(leagueID, season, isOnlyCurrentSeason, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param season  (required)
     * @param isOnlyCurrentSeason  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonallplayersGetAsync(String leagueID, String season, String isOnlyCurrentSeason, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = commonallplayersGetValidateBeforeCall(leagueID, season, isOnlyCurrentSeason, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for commonplayerinfoGet
     * @param playerID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonplayerinfoGetCall(String playerID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commonplayerinfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commonplayerinfoGetValidateBeforeCall(String playerID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling commonplayerinfoGet(Async)");
        }

        return commonplayerinfoGetCall(playerID, _callback);

    }

    /**
     * 
     * 
     * @param playerID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void commonplayerinfoGet(String playerID) throws ApiException {
        commonplayerinfoGetWithHttpInfo(playerID);
    }

    /**
     * 
     * 
     * @param playerID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> commonplayerinfoGetWithHttpInfo(String playerID) throws ApiException {
        okhttp3.Call localVarCall = commonplayerinfoGetValidateBeforeCall(playerID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param playerID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonplayerinfoGetAsync(String playerID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = commonplayerinfoGetValidateBeforeCall(playerID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for commonplayoffseriesGet
     * @param leagueID  (required)
     * @param season  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonplayoffseriesGetCall(String leagueID, String season, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commonplayoffseries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commonplayoffseriesGetValidateBeforeCall(String leagueID, String season, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling commonplayoffseriesGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling commonplayoffseriesGet(Async)");
        }

        return commonplayoffseriesGetCall(leagueID, season, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param season  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void commonplayoffseriesGet(String leagueID, String season) throws ApiException {
        commonplayoffseriesGetWithHttpInfo(leagueID, season);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param season  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> commonplayoffseriesGetWithHttpInfo(String leagueID, String season) throws ApiException {
        okhttp3.Call localVarCall = commonplayoffseriesGetValidateBeforeCall(leagueID, season, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param season  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonplayoffseriesGetAsync(String leagueID, String season, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = commonplayoffseriesGetValidateBeforeCall(leagueID, season, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for commonteamrosterGet
     * @param season  (required)
     * @param teamID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonteamrosterGetCall(String season, String teamID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commonteamroster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commonteamrosterGetValidateBeforeCall(String season, String teamID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling commonteamrosterGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling commonteamrosterGet(Async)");
        }

        return commonteamrosterGetCall(season, teamID, _callback);

    }

    /**
     * 
     * 
     * @param season  (required)
     * @param teamID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void commonteamrosterGet(String season, String teamID) throws ApiException {
        commonteamrosterGetWithHttpInfo(season, teamID);
    }

    /**
     * 
     * 
     * @param season  (required)
     * @param teamID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> commonteamrosterGetWithHttpInfo(String season, String teamID) throws ApiException {
        okhttp3.Call localVarCall = commonteamrosterGetValidateBeforeCall(season, teamID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param season  (required)
     * @param teamID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonteamrosterGetAsync(String season, String teamID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = commonteamrosterGetValidateBeforeCall(season, teamID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for draftcombinedrillresultsGet
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call draftcombinedrillresultsGetCall(String leagueID, String seasonYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/draftcombinedrillresults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (seasonYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonYear", seasonYear));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call draftcombinedrillresultsGetValidateBeforeCall(String leagueID, String seasonYear, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling draftcombinedrillresultsGet(Async)");
        }

        // verify the required parameter 'seasonYear' is set
        if (seasonYear == null) {
            throw new ApiException("Missing the required parameter 'seasonYear' when calling draftcombinedrillresultsGet(Async)");
        }

        return draftcombinedrillresultsGetCall(leagueID, seasonYear, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void draftcombinedrillresultsGet(String leagueID, String seasonYear) throws ApiException {
        draftcombinedrillresultsGetWithHttpInfo(leagueID, seasonYear);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> draftcombinedrillresultsGetWithHttpInfo(String leagueID, String seasonYear) throws ApiException {
        okhttp3.Call localVarCall = draftcombinedrillresultsGetValidateBeforeCall(leagueID, seasonYear, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call draftcombinedrillresultsGetAsync(String leagueID, String seasonYear, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = draftcombinedrillresultsGetValidateBeforeCall(leagueID, seasonYear, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for draftcombinenonstationaryshootingGet
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call draftcombinenonstationaryshootingGetCall(String leagueID, String seasonYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/draftcombinenonstationaryshooting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (seasonYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonYear", seasonYear));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call draftcombinenonstationaryshootingGetValidateBeforeCall(String leagueID, String seasonYear, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling draftcombinenonstationaryshootingGet(Async)");
        }

        // verify the required parameter 'seasonYear' is set
        if (seasonYear == null) {
            throw new ApiException("Missing the required parameter 'seasonYear' when calling draftcombinenonstationaryshootingGet(Async)");
        }

        return draftcombinenonstationaryshootingGetCall(leagueID, seasonYear, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void draftcombinenonstationaryshootingGet(String leagueID, String seasonYear) throws ApiException {
        draftcombinenonstationaryshootingGetWithHttpInfo(leagueID, seasonYear);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> draftcombinenonstationaryshootingGetWithHttpInfo(String leagueID, String seasonYear) throws ApiException {
        okhttp3.Call localVarCall = draftcombinenonstationaryshootingGetValidateBeforeCall(leagueID, seasonYear, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call draftcombinenonstationaryshootingGetAsync(String leagueID, String seasonYear, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = draftcombinenonstationaryshootingGetValidateBeforeCall(leagueID, seasonYear, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for draftcombineplayeranthroGet
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call draftcombineplayeranthroGetCall(String leagueID, String seasonYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/draftcombineplayeranthro";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (seasonYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonYear", seasonYear));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call draftcombineplayeranthroGetValidateBeforeCall(String leagueID, String seasonYear, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling draftcombineplayeranthroGet(Async)");
        }

        // verify the required parameter 'seasonYear' is set
        if (seasonYear == null) {
            throw new ApiException("Missing the required parameter 'seasonYear' when calling draftcombineplayeranthroGet(Async)");
        }

        return draftcombineplayeranthroGetCall(leagueID, seasonYear, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void draftcombineplayeranthroGet(String leagueID, String seasonYear) throws ApiException {
        draftcombineplayeranthroGetWithHttpInfo(leagueID, seasonYear);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> draftcombineplayeranthroGetWithHttpInfo(String leagueID, String seasonYear) throws ApiException {
        okhttp3.Call localVarCall = draftcombineplayeranthroGetValidateBeforeCall(leagueID, seasonYear, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call draftcombineplayeranthroGetAsync(String leagueID, String seasonYear, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = draftcombineplayeranthroGetValidateBeforeCall(leagueID, seasonYear, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for draftcombinespotshootingGet
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call draftcombinespotshootingGetCall(String leagueID, String seasonYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/draftcombinespotshooting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (seasonYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonYear", seasonYear));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call draftcombinespotshootingGetValidateBeforeCall(String leagueID, String seasonYear, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling draftcombinespotshootingGet(Async)");
        }

        // verify the required parameter 'seasonYear' is set
        if (seasonYear == null) {
            throw new ApiException("Missing the required parameter 'seasonYear' when calling draftcombinespotshootingGet(Async)");
        }

        return draftcombinespotshootingGetCall(leagueID, seasonYear, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void draftcombinespotshootingGet(String leagueID, String seasonYear) throws ApiException {
        draftcombinespotshootingGetWithHttpInfo(leagueID, seasonYear);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> draftcombinespotshootingGetWithHttpInfo(String leagueID, String seasonYear) throws ApiException {
        okhttp3.Call localVarCall = draftcombinespotshootingGetValidateBeforeCall(leagueID, seasonYear, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call draftcombinespotshootingGetAsync(String leagueID, String seasonYear, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = draftcombinespotshootingGetValidateBeforeCall(leagueID, seasonYear, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for draftcombinestatsGet
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call draftcombinestatsGetCall(String leagueID, String seasonYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/draftcombinestats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (seasonYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonYear", seasonYear));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call draftcombinestatsGetValidateBeforeCall(String leagueID, String seasonYear, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling draftcombinestatsGet(Async)");
        }

        // verify the required parameter 'seasonYear' is set
        if (seasonYear == null) {
            throw new ApiException("Missing the required parameter 'seasonYear' when calling draftcombinestatsGet(Async)");
        }

        return draftcombinestatsGetCall(leagueID, seasonYear, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void draftcombinestatsGet(String leagueID, String seasonYear) throws ApiException {
        draftcombinestatsGetWithHttpInfo(leagueID, seasonYear);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> draftcombinestatsGetWithHttpInfo(String leagueID, String seasonYear) throws ApiException {
        okhttp3.Call localVarCall = draftcombinestatsGetValidateBeforeCall(leagueID, seasonYear, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param seasonYear  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call draftcombinestatsGetAsync(String leagueID, String seasonYear, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = draftcombinestatsGetValidateBeforeCall(leagueID, seasonYear, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for drafthistoryGet
     * @param leagueID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drafthistoryGetCall(String leagueID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafthistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call drafthistoryGetValidateBeforeCall(String leagueID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling drafthistoryGet(Async)");
        }

        return drafthistoryGetCall(leagueID, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void drafthistoryGet(String leagueID) throws ApiException {
        drafthistoryGetWithHttpInfo(leagueID);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> drafthistoryGetWithHttpInfo(String leagueID) throws ApiException {
        okhttp3.Call localVarCall = drafthistoryGetValidateBeforeCall(leagueID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drafthistoryGetAsync(String leagueID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = drafthistoryGetValidateBeforeCall(leagueID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for franchisehistoryGet
     * @param leagueID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call franchisehistoryGetCall(String leagueID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/franchisehistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call franchisehistoryGetValidateBeforeCall(String leagueID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling franchisehistoryGet(Async)");
        }

        return franchisehistoryGetCall(leagueID, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void franchisehistoryGet(String leagueID) throws ApiException {
        franchisehistoryGetWithHttpInfo(leagueID);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> franchisehistoryGetWithHttpInfo(String leagueID) throws ApiException {
        okhttp3.Call localVarCall = franchisehistoryGetValidateBeforeCall(leagueID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call franchisehistoryGetAsync(String leagueID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = franchisehistoryGetValidateBeforeCall(leagueID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for homepageleadersGet
     * @param statCategory  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerOrTeam  (required)
     * @param playerScope  (required)
     * @param gameScope  (required)
     * @param game  (optional)
     * @param player  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call homepageleadersGetCall(String statCategory, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homepageleaders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StatCategory", statCategory));
        }

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerOrTeam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerOrTeam", playerOrTeam));
        }

        if (game != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Game", game));
        }

        if (player != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Player", player));
        }

        if (playerScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerScope", playerScope));
        }

        if (gameScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameScope", gameScope));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call homepageleadersGetValidateBeforeCall(String statCategory, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statCategory' is set
        if (statCategory == null) {
            throw new ApiException("Missing the required parameter 'statCategory' when calling homepageleadersGet(Async)");
        }

        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling homepageleadersGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling homepageleadersGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling homepageleadersGet(Async)");
        }

        // verify the required parameter 'playerOrTeam' is set
        if (playerOrTeam == null) {
            throw new ApiException("Missing the required parameter 'playerOrTeam' when calling homepageleadersGet(Async)");
        }

        // verify the required parameter 'playerScope' is set
        if (playerScope == null) {
            throw new ApiException("Missing the required parameter 'playerScope' when calling homepageleadersGet(Async)");
        }

        // verify the required parameter 'gameScope' is set
        if (gameScope == null) {
            throw new ApiException("Missing the required parameter 'gameScope' when calling homepageleadersGet(Async)");
        }

        return homepageleadersGetCall(statCategory, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, game, player, _callback);

    }

    /**
     * 
     * 
     * @param statCategory  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerOrTeam  (required)
     * @param playerScope  (required)
     * @param gameScope  (required)
     * @param game  (optional)
     * @param player  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void homepageleadersGet(String statCategory, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player) throws ApiException {
        homepageleadersGetWithHttpInfo(statCategory, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, game, player);
    }

    /**
     * 
     * 
     * @param statCategory  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerOrTeam  (required)
     * @param playerScope  (required)
     * @param gameScope  (required)
     * @param game  (optional)
     * @param player  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> homepageleadersGetWithHttpInfo(String statCategory, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player) throws ApiException {
        okhttp3.Call localVarCall = homepageleadersGetValidateBeforeCall(statCategory, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, game, player, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param statCategory  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerOrTeam  (required)
     * @param playerScope  (required)
     * @param gameScope  (required)
     * @param game  (optional)
     * @param player  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call homepageleadersGetAsync(String statCategory, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = homepageleadersGetValidateBeforeCall(statCategory, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, game, player, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for homepagev2Get
     * @param statType  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerOrTeam  (required)
     * @param playerScope  (required)
     * @param gameScope  (required)
     * @param game  (optional)
     * @param player  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call homepagev2GetCall(String statType, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homepagev2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StatType", statType));
        }

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerOrTeam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerOrTeam", playerOrTeam));
        }

        if (game != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Game", game));
        }

        if (player != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Player", player));
        }

        if (playerScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerScope", playerScope));
        }

        if (gameScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameScope", gameScope));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call homepagev2GetValidateBeforeCall(String statType, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statType' is set
        if (statType == null) {
            throw new ApiException("Missing the required parameter 'statType' when calling homepagev2Get(Async)");
        }

        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling homepagev2Get(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling homepagev2Get(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling homepagev2Get(Async)");
        }

        // verify the required parameter 'playerOrTeam' is set
        if (playerOrTeam == null) {
            throw new ApiException("Missing the required parameter 'playerOrTeam' when calling homepagev2Get(Async)");
        }

        // verify the required parameter 'playerScope' is set
        if (playerScope == null) {
            throw new ApiException("Missing the required parameter 'playerScope' when calling homepagev2Get(Async)");
        }

        // verify the required parameter 'gameScope' is set
        if (gameScope == null) {
            throw new ApiException("Missing the required parameter 'gameScope' when calling homepagev2Get(Async)");
        }

        return homepagev2GetCall(statType, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, game, player, _callback);

    }

    /**
     * 
     * 
     * @param statType  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerOrTeam  (required)
     * @param playerScope  (required)
     * @param gameScope  (required)
     * @param game  (optional)
     * @param player  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void homepagev2Get(String statType, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player) throws ApiException {
        homepagev2GetWithHttpInfo(statType, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, game, player);
    }

    /**
     * 
     * 
     * @param statType  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerOrTeam  (required)
     * @param playerScope  (required)
     * @param gameScope  (required)
     * @param game  (optional)
     * @param player  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> homepagev2GetWithHttpInfo(String statType, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player) throws ApiException {
        okhttp3.Call localVarCall = homepagev2GetValidateBeforeCall(statType, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, game, player, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param statType  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerOrTeam  (required)
     * @param playerScope  (required)
     * @param gameScope  (required)
     * @param game  (optional)
     * @param player  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call homepagev2GetAsync(String statType, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = homepagev2GetValidateBeforeCall(statType, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, game, player, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaderstilesGet
     * @param stat  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerOrTeam  (required)
     * @param playerScope  (required)
     * @param gameScope  (required)
     * @param game  (optional)
     * @param player  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaderstilesGetCall(String stat, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaderstiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Stat", stat));
        }

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerOrTeam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerOrTeam", playerOrTeam));
        }

        if (game != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Game", game));
        }

        if (player != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Player", player));
        }

        if (playerScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerScope", playerScope));
        }

        if (gameScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameScope", gameScope));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaderstilesGetValidateBeforeCall(String stat, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stat' is set
        if (stat == null) {
            throw new ApiException("Missing the required parameter 'stat' when calling leaderstilesGet(Async)");
        }

        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling leaderstilesGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaderstilesGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaderstilesGet(Async)");
        }

        // verify the required parameter 'playerOrTeam' is set
        if (playerOrTeam == null) {
            throw new ApiException("Missing the required parameter 'playerOrTeam' when calling leaderstilesGet(Async)");
        }

        // verify the required parameter 'playerScope' is set
        if (playerScope == null) {
            throw new ApiException("Missing the required parameter 'playerScope' when calling leaderstilesGet(Async)");
        }

        // verify the required parameter 'gameScope' is set
        if (gameScope == null) {
            throw new ApiException("Missing the required parameter 'gameScope' when calling leaderstilesGet(Async)");
        }

        return leaderstilesGetCall(stat, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, game, player, _callback);

    }

    /**
     * 
     * 
     * @param stat  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerOrTeam  (required)
     * @param playerScope  (required)
     * @param gameScope  (required)
     * @param game  (optional)
     * @param player  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaderstilesGet(String stat, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player) throws ApiException {
        leaderstilesGetWithHttpInfo(stat, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, game, player);
    }

    /**
     * 
     * 
     * @param stat  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerOrTeam  (required)
     * @param playerScope  (required)
     * @param gameScope  (required)
     * @param game  (optional)
     * @param player  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaderstilesGetWithHttpInfo(String stat, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player) throws ApiException {
        okhttp3.Call localVarCall = leaderstilesGetValidateBeforeCall(stat, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, game, player, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param stat  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerOrTeam  (required)
     * @param playerScope  (required)
     * @param gameScope  (required)
     * @param game  (optional)
     * @param player  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaderstilesGetAsync(String stat, String leagueID, String season, String seasonType, String playerOrTeam, String playerScope, String gameScope, String game, String player, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaderstilesGetValidateBeforeCall(stat, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, game, player, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaguedashlineupsGet
     * @param groupQuantity  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashlineupsGetCall(String groupQuantity, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaguedashlineups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupQuantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GroupQuantity", groupQuantity));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaguedashlineupsGetValidateBeforeCall(String groupQuantity, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupQuantity' is set
        if (groupQuantity == null) {
            throw new ApiException("Missing the required parameter 'groupQuantity' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling leaguedashlineupsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling leaguedashlineupsGet(Async)");
        }

        return leaguedashlineupsGetCall(groupQuantity, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param groupQuantity  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaguedashlineupsGet(String groupQuantity, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        leaguedashlineupsGetWithHttpInfo(groupQuantity, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param groupQuantity  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaguedashlineupsGetWithHttpInfo(String groupQuantity, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = leaguedashlineupsGetValidateBeforeCall(groupQuantity, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param groupQuantity  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashlineupsGetAsync(String groupQuantity, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaguedashlineupsGetValidateBeforeCall(groupQuantity, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaguedashplayerbiostatsGet
     * @param perMode  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashplayerbiostatsGetCall(String perMode, String leagueID, String season, String seasonType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaguedashplayerbiostats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaguedashplayerbiostatsGetValidateBeforeCall(String perMode, String leagueID, String season, String seasonType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leaguedashplayerbiostatsGet(Async)");
        }

        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling leaguedashplayerbiostatsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaguedashplayerbiostatsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaguedashplayerbiostatsGet(Async)");
        }

        return leaguedashplayerbiostatsGetCall(perMode, leagueID, season, seasonType, _callback);

    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaguedashplayerbiostatsGet(String perMode, String leagueID, String season, String seasonType) throws ApiException {
        leaguedashplayerbiostatsGetWithHttpInfo(perMode, leagueID, season, seasonType);
    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaguedashplayerbiostatsGetWithHttpInfo(String perMode, String leagueID, String season, String seasonType) throws ApiException {
        okhttp3.Call localVarCall = leaguedashplayerbiostatsGetValidateBeforeCall(perMode, leagueID, season, seasonType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param perMode  (required)
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashplayerbiostatsGetAsync(String perMode, String leagueID, String season, String seasonType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaguedashplayerbiostatsGetValidateBeforeCall(perMode, leagueID, season, seasonType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaguedashplayerclutchGet
     * @param clutchTime  (required)
     * @param aheadBehind  (required)
     * @param pointDiff  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashplayerclutchGetCall(String clutchTime, String aheadBehind, String pointDiff, String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaguedashplayerclutch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clutchTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClutchTime", clutchTime));
        }

        if (aheadBehind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AheadBehind", aheadBehind));
        }

        if (pointDiff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PointDiff", pointDiff));
        }

        if (gameScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameScope", gameScope));
        }

        if (playerExperience != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerExperience", playerExperience));
        }

        if (playerPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerPosition", playerPosition));
        }

        if (starterBench != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StarterBench", starterBench));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaguedashplayerclutchGetValidateBeforeCall(String clutchTime, String aheadBehind, String pointDiff, String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clutchTime' is set
        if (clutchTime == null) {
            throw new ApiException("Missing the required parameter 'clutchTime' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'aheadBehind' is set
        if (aheadBehind == null) {
            throw new ApiException("Missing the required parameter 'aheadBehind' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'pointDiff' is set
        if (pointDiff == null) {
            throw new ApiException("Missing the required parameter 'pointDiff' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'gameScope' is set
        if (gameScope == null) {
            throw new ApiException("Missing the required parameter 'gameScope' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'playerExperience' is set
        if (playerExperience == null) {
            throw new ApiException("Missing the required parameter 'playerExperience' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'playerPosition' is set
        if (playerPosition == null) {
            throw new ApiException("Missing the required parameter 'playerPosition' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'starterBench' is set
        if (starterBench == null) {
            throw new ApiException("Missing the required parameter 'starterBench' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling leaguedashplayerclutchGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling leaguedashplayerclutchGet(Async)");
        }

        return leaguedashplayerclutchGetCall(clutchTime, aheadBehind, pointDiff, gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param clutchTime  (required)
     * @param aheadBehind  (required)
     * @param pointDiff  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaguedashplayerclutchGet(String clutchTime, String aheadBehind, String pointDiff, String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        leaguedashplayerclutchGetWithHttpInfo(clutchTime, aheadBehind, pointDiff, gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param clutchTime  (required)
     * @param aheadBehind  (required)
     * @param pointDiff  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaguedashplayerclutchGetWithHttpInfo(String clutchTime, String aheadBehind, String pointDiff, String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = leaguedashplayerclutchGetValidateBeforeCall(clutchTime, aheadBehind, pointDiff, gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param clutchTime  (required)
     * @param aheadBehind  (required)
     * @param pointDiff  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashplayerclutchGetAsync(String clutchTime, String aheadBehind, String pointDiff, String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaguedashplayerclutchGetValidateBeforeCall(clutchTime, aheadBehind, pointDiff, gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaguedashplayerptshotGet
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashplayerptshotGetCall(String leagueID, String perMode, String season, String seasonType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaguedashplayerptshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaguedashplayerptshotGetValidateBeforeCall(String leagueID, String perMode, String season, String seasonType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling leaguedashplayerptshotGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leaguedashplayerptshotGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaguedashplayerptshotGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaguedashplayerptshotGet(Async)");
        }

        return leaguedashplayerptshotGetCall(leagueID, perMode, season, seasonType, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaguedashplayerptshotGet(String leagueID, String perMode, String season, String seasonType) throws ApiException {
        leaguedashplayerptshotGetWithHttpInfo(leagueID, perMode, season, seasonType);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaguedashplayerptshotGetWithHttpInfo(String leagueID, String perMode, String season, String seasonType) throws ApiException {
        okhttp3.Call localVarCall = leaguedashplayerptshotGetValidateBeforeCall(leagueID, perMode, season, seasonType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashplayerptshotGetAsync(String leagueID, String perMode, String season, String seasonType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaguedashplayerptshotGetValidateBeforeCall(leagueID, perMode, season, seasonType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaguedashplayershotlocationsGet
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param distanceRange  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashplayershotlocationsGetCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String distanceRange, String gameScope, String playerExperience, String playerPosition, String starterBench, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaguedashplayershotlocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        if (distanceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DistanceRange", distanceRange));
        }

        if (gameScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameScope", gameScope));
        }

        if (playerExperience != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerExperience", playerExperience));
        }

        if (playerPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerPosition", playerPosition));
        }

        if (starterBench != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StarterBench", starterBench));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaguedashplayershotlocationsGetValidateBeforeCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String distanceRange, String gameScope, String playerExperience, String playerPosition, String starterBench, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'distanceRange' is set
        if (distanceRange == null) {
            throw new ApiException("Missing the required parameter 'distanceRange' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'gameScope' is set
        if (gameScope == null) {
            throw new ApiException("Missing the required parameter 'gameScope' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'playerExperience' is set
        if (playerExperience == null) {
            throw new ApiException("Missing the required parameter 'playerExperience' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'playerPosition' is set
        if (playerPosition == null) {
            throw new ApiException("Missing the required parameter 'playerPosition' when calling leaguedashplayershotlocationsGet(Async)");
        }

        // verify the required parameter 'starterBench' is set
        if (starterBench == null) {
            throw new ApiException("Missing the required parameter 'starterBench' when calling leaguedashplayershotlocationsGet(Async)");
        }

        return leaguedashplayershotlocationsGetCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, distanceRange, gameScope, playerExperience, playerPosition, starterBench, _callback);

    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param distanceRange  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaguedashplayershotlocationsGet(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String distanceRange, String gameScope, String playerExperience, String playerPosition, String starterBench) throws ApiException {
        leaguedashplayershotlocationsGetWithHttpInfo(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, distanceRange, gameScope, playerExperience, playerPosition, starterBench);
    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param distanceRange  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaguedashplayershotlocationsGetWithHttpInfo(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String distanceRange, String gameScope, String playerExperience, String playerPosition, String starterBench) throws ApiException {
        okhttp3.Call localVarCall = leaguedashplayershotlocationsGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, distanceRange, gameScope, playerExperience, playerPosition, starterBench, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param distanceRange  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashplayershotlocationsGetAsync(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String distanceRange, String gameScope, String playerExperience, String playerPosition, String starterBench, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaguedashplayershotlocationsGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, distanceRange, gameScope, playerExperience, playerPosition, starterBench, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaguedashplayerstatsGet
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashplayerstatsGetCall(String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaguedashplayerstats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameScope", gameScope));
        }

        if (playerExperience != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerExperience", playerExperience));
        }

        if (playerPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerPosition", playerPosition));
        }

        if (starterBench != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StarterBench", starterBench));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaguedashplayerstatsGetValidateBeforeCall(String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameScope' is set
        if (gameScope == null) {
            throw new ApiException("Missing the required parameter 'gameScope' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'playerExperience' is set
        if (playerExperience == null) {
            throw new ApiException("Missing the required parameter 'playerExperience' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'playerPosition' is set
        if (playerPosition == null) {
            throw new ApiException("Missing the required parameter 'playerPosition' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'starterBench' is set
        if (starterBench == null) {
            throw new ApiException("Missing the required parameter 'starterBench' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling leaguedashplayerstatsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling leaguedashplayerstatsGet(Async)");
        }

        return leaguedashplayerstatsGetCall(gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaguedashplayerstatsGet(String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        leaguedashplayerstatsGetWithHttpInfo(gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaguedashplayerstatsGetWithHttpInfo(String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = leaguedashplayerstatsGetValidateBeforeCall(gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashplayerstatsGetAsync(String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaguedashplayerstatsGetValidateBeforeCall(gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaguedashptdefendGet
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param defenseCategory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashptdefendGetCall(String leagueID, String perMode, String season, String seasonType, String defenseCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaguedashptdefend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (defenseCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DefenseCategory", defenseCategory));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaguedashptdefendGetValidateBeforeCall(String leagueID, String perMode, String season, String seasonType, String defenseCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling leaguedashptdefendGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leaguedashptdefendGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaguedashptdefendGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaguedashptdefendGet(Async)");
        }

        // verify the required parameter 'defenseCategory' is set
        if (defenseCategory == null) {
            throw new ApiException("Missing the required parameter 'defenseCategory' when calling leaguedashptdefendGet(Async)");
        }

        return leaguedashptdefendGetCall(leagueID, perMode, season, seasonType, defenseCategory, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param defenseCategory  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaguedashptdefendGet(String leagueID, String perMode, String season, String seasonType, String defenseCategory) throws ApiException {
        leaguedashptdefendGetWithHttpInfo(leagueID, perMode, season, seasonType, defenseCategory);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param defenseCategory  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaguedashptdefendGetWithHttpInfo(String leagueID, String perMode, String season, String seasonType, String defenseCategory) throws ApiException {
        okhttp3.Call localVarCall = leaguedashptdefendGetValidateBeforeCall(leagueID, perMode, season, seasonType, defenseCategory, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param defenseCategory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashptdefendGetAsync(String leagueID, String perMode, String season, String seasonType, String defenseCategory, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaguedashptdefendGetValidateBeforeCall(leagueID, perMode, season, seasonType, defenseCategory, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaguedashptteamdefendGet
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param defenseCategory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashptteamdefendGetCall(String leagueID, String perMode, String season, String seasonType, String defenseCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaguedashptteamdefend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (defenseCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DefenseCategory", defenseCategory));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaguedashptteamdefendGetValidateBeforeCall(String leagueID, String perMode, String season, String seasonType, String defenseCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling leaguedashptteamdefendGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leaguedashptteamdefendGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaguedashptteamdefendGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaguedashptteamdefendGet(Async)");
        }

        // verify the required parameter 'defenseCategory' is set
        if (defenseCategory == null) {
            throw new ApiException("Missing the required parameter 'defenseCategory' when calling leaguedashptteamdefendGet(Async)");
        }

        return leaguedashptteamdefendGetCall(leagueID, perMode, season, seasonType, defenseCategory, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param defenseCategory  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaguedashptteamdefendGet(String leagueID, String perMode, String season, String seasonType, String defenseCategory) throws ApiException {
        leaguedashptteamdefendGetWithHttpInfo(leagueID, perMode, season, seasonType, defenseCategory);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param defenseCategory  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaguedashptteamdefendGetWithHttpInfo(String leagueID, String perMode, String season, String seasonType, String defenseCategory) throws ApiException {
        okhttp3.Call localVarCall = leaguedashptteamdefendGetValidateBeforeCall(leagueID, perMode, season, seasonType, defenseCategory, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param defenseCategory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashptteamdefendGetAsync(String leagueID, String perMode, String season, String seasonType, String defenseCategory, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaguedashptteamdefendGetValidateBeforeCall(leagueID, perMode, season, seasonType, defenseCategory, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaguedashteamclutchGet
     * @param clutchTime  (required)
     * @param aheadBehind  (required)
     * @param pointDiff  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashteamclutchGetCall(String clutchTime, String aheadBehind, String pointDiff, String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaguedashteamclutch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clutchTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClutchTime", clutchTime));
        }

        if (aheadBehind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AheadBehind", aheadBehind));
        }

        if (pointDiff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PointDiff", pointDiff));
        }

        if (gameScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameScope", gameScope));
        }

        if (playerExperience != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerExperience", playerExperience));
        }

        if (playerPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerPosition", playerPosition));
        }

        if (starterBench != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StarterBench", starterBench));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaguedashteamclutchGetValidateBeforeCall(String clutchTime, String aheadBehind, String pointDiff, String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clutchTime' is set
        if (clutchTime == null) {
            throw new ApiException("Missing the required parameter 'clutchTime' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'aheadBehind' is set
        if (aheadBehind == null) {
            throw new ApiException("Missing the required parameter 'aheadBehind' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'pointDiff' is set
        if (pointDiff == null) {
            throw new ApiException("Missing the required parameter 'pointDiff' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'gameScope' is set
        if (gameScope == null) {
            throw new ApiException("Missing the required parameter 'gameScope' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'playerExperience' is set
        if (playerExperience == null) {
            throw new ApiException("Missing the required parameter 'playerExperience' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'playerPosition' is set
        if (playerPosition == null) {
            throw new ApiException("Missing the required parameter 'playerPosition' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'starterBench' is set
        if (starterBench == null) {
            throw new ApiException("Missing the required parameter 'starterBench' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling leaguedashteamclutchGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling leaguedashteamclutchGet(Async)");
        }

        return leaguedashteamclutchGetCall(clutchTime, aheadBehind, pointDiff, gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param clutchTime  (required)
     * @param aheadBehind  (required)
     * @param pointDiff  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaguedashteamclutchGet(String clutchTime, String aheadBehind, String pointDiff, String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        leaguedashteamclutchGetWithHttpInfo(clutchTime, aheadBehind, pointDiff, gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param clutchTime  (required)
     * @param aheadBehind  (required)
     * @param pointDiff  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaguedashteamclutchGetWithHttpInfo(String clutchTime, String aheadBehind, String pointDiff, String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = leaguedashteamclutchGetValidateBeforeCall(clutchTime, aheadBehind, pointDiff, gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param clutchTime  (required)
     * @param aheadBehind  (required)
     * @param pointDiff  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashteamclutchGetAsync(String clutchTime, String aheadBehind, String pointDiff, String gameScope, String playerExperience, String playerPosition, String starterBench, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaguedashteamclutchGetValidateBeforeCall(clutchTime, aheadBehind, pointDiff, gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaguedashteamptshotGet
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashteamptshotGetCall(String leagueID, String perMode, String season, String seasonType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaguedashteamptshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaguedashteamptshotGetValidateBeforeCall(String leagueID, String perMode, String season, String seasonType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling leaguedashteamptshotGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leaguedashteamptshotGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaguedashteamptshotGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaguedashteamptshotGet(Async)");
        }

        return leaguedashteamptshotGetCall(leagueID, perMode, season, seasonType, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaguedashteamptshotGet(String leagueID, String perMode, String season, String seasonType) throws ApiException {
        leaguedashteamptshotGetWithHttpInfo(leagueID, perMode, season, seasonType);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaguedashteamptshotGetWithHttpInfo(String leagueID, String perMode, String season, String seasonType) throws ApiException {
        okhttp3.Call localVarCall = leaguedashteamptshotGetValidateBeforeCall(leagueID, perMode, season, seasonType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashteamptshotGetAsync(String leagueID, String perMode, String season, String seasonType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaguedashteamptshotGetValidateBeforeCall(leagueID, perMode, season, seasonType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaguedashteamshotlocationsGet
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param distanceRange  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashteamshotlocationsGetCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String distanceRange, String gameScope, String playerExperience, String playerPosition, String starterBench, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaguedashteamshotlocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        if (distanceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DistanceRange", distanceRange));
        }

        if (gameScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameScope", gameScope));
        }

        if (playerExperience != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerExperience", playerExperience));
        }

        if (playerPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerPosition", playerPosition));
        }

        if (starterBench != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StarterBench", starterBench));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaguedashteamshotlocationsGetValidateBeforeCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String distanceRange, String gameScope, String playerExperience, String playerPosition, String starterBench, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'distanceRange' is set
        if (distanceRange == null) {
            throw new ApiException("Missing the required parameter 'distanceRange' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'gameScope' is set
        if (gameScope == null) {
            throw new ApiException("Missing the required parameter 'gameScope' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'playerExperience' is set
        if (playerExperience == null) {
            throw new ApiException("Missing the required parameter 'playerExperience' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'playerPosition' is set
        if (playerPosition == null) {
            throw new ApiException("Missing the required parameter 'playerPosition' when calling leaguedashteamshotlocationsGet(Async)");
        }

        // verify the required parameter 'starterBench' is set
        if (starterBench == null) {
            throw new ApiException("Missing the required parameter 'starterBench' when calling leaguedashteamshotlocationsGet(Async)");
        }

        return leaguedashteamshotlocationsGetCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, distanceRange, gameScope, playerExperience, playerPosition, starterBench, _callback);

    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param distanceRange  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaguedashteamshotlocationsGet(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String distanceRange, String gameScope, String playerExperience, String playerPosition, String starterBench) throws ApiException {
        leaguedashteamshotlocationsGetWithHttpInfo(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, distanceRange, gameScope, playerExperience, playerPosition, starterBench);
    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param distanceRange  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaguedashteamshotlocationsGetWithHttpInfo(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String distanceRange, String gameScope, String playerExperience, String playerPosition, String starterBench) throws ApiException {
        okhttp3.Call localVarCall = leaguedashteamshotlocationsGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, distanceRange, gameScope, playerExperience, playerPosition, starterBench, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param distanceRange  (required)
     * @param gameScope  (required)
     * @param playerExperience  (required)
     * @param playerPosition  (required)
     * @param starterBench  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashteamshotlocationsGetAsync(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String distanceRange, String gameScope, String playerExperience, String playerPosition, String starterBench, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaguedashteamshotlocationsGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, distanceRange, gameScope, playerExperience, playerPosition, starterBench, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaguedashteamstatsGet
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashteamstatsGetCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaguedashteamstats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaguedashteamstatsGetValidateBeforeCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling leaguedashteamstatsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling leaguedashteamstatsGet(Async)");
        }

        return leaguedashteamstatsGetCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leaguedashteamstatsGet(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        leaguedashteamstatsGetWithHttpInfo(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaguedashteamstatsGetWithHttpInfo(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = leaguedashteamstatsGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaguedashteamstatsGetAsync(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaguedashteamstatsGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leagueleadersGet
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param scope  (required)
     * @param statCategory  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leagueleadersGetCall(String leagueID, String perMode, String season, String seasonType, String scope, String statCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leagueleaders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (statCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StatCategory", statCategory));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Scope", scope));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leagueleadersGetValidateBeforeCall(String leagueID, String perMode, String season, String seasonType, String scope, String statCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling leagueleadersGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling leagueleadersGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling leagueleadersGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling leagueleadersGet(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling leagueleadersGet(Async)");
        }

        return leagueleadersGetCall(leagueID, perMode, season, seasonType, scope, statCategory, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param scope  (required)
     * @param statCategory  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void leagueleadersGet(String leagueID, String perMode, String season, String seasonType, String scope, String statCategory) throws ApiException {
        leagueleadersGetWithHttpInfo(leagueID, perMode, season, seasonType, scope, statCategory);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param scope  (required)
     * @param statCategory  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leagueleadersGetWithHttpInfo(String leagueID, String perMode, String season, String seasonType, String scope, String statCategory) throws ApiException {
        okhttp3.Call localVarCall = leagueleadersGetValidateBeforeCall(leagueID, perMode, season, seasonType, scope, statCategory, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param scope  (required)
     * @param statCategory  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leagueleadersGetAsync(String leagueID, String perMode, String season, String seasonType, String scope, String statCategory, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leagueleadersGetValidateBeforeCall(leagueID, perMode, season, seasonType, scope, statCategory, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playbyplayGet
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playbyplayGetCall(String gameID, String startPeriod, String endPeriod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playbyplay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playbyplayGetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling playbyplayGet(Async)");
        }

        // verify the required parameter 'startPeriod' is set
        if (startPeriod == null) {
            throw new ApiException("Missing the required parameter 'startPeriod' when calling playbyplayGet(Async)");
        }

        // verify the required parameter 'endPeriod' is set
        if (endPeriod == null) {
            throw new ApiException("Missing the required parameter 'endPeriod' when calling playbyplayGet(Async)");
        }

        return playbyplayGetCall(gameID, startPeriod, endPeriod, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playbyplayGet(String gameID, String startPeriod, String endPeriod) throws ApiException {
        playbyplayGetWithHttpInfo(gameID, startPeriod, endPeriod);
    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playbyplayGetWithHttpInfo(String gameID, String startPeriod, String endPeriod) throws ApiException {
        okhttp3.Call localVarCall = playbyplayGetValidateBeforeCall(gameID, startPeriod, endPeriod, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playbyplayGetAsync(String gameID, String startPeriod, String endPeriod, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playbyplayGetValidateBeforeCall(gameID, startPeriod, endPeriod, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playbyplayv2Get
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playbyplayv2GetCall(String gameID, String startPeriod, String endPeriod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playbyplayv2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (startPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartPeriod", startPeriod));
        }

        if (endPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndPeriod", endPeriod));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playbyplayv2GetValidateBeforeCall(String gameID, String startPeriod, String endPeriod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling playbyplayv2Get(Async)");
        }

        // verify the required parameter 'startPeriod' is set
        if (startPeriod == null) {
            throw new ApiException("Missing the required parameter 'startPeriod' when calling playbyplayv2Get(Async)");
        }

        // verify the required parameter 'endPeriod' is set
        if (endPeriod == null) {
            throw new ApiException("Missing the required parameter 'endPeriod' when calling playbyplayv2Get(Async)");
        }

        return playbyplayv2GetCall(gameID, startPeriod, endPeriod, _callback);

    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playbyplayv2Get(String gameID, String startPeriod, String endPeriod) throws ApiException {
        playbyplayv2GetWithHttpInfo(gameID, startPeriod, endPeriod);
    }

    /**
     * 
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playbyplayv2GetWithHttpInfo(String gameID, String startPeriod, String endPeriod) throws ApiException {
        okhttp3.Call localVarCall = playbyplayv2GetValidateBeforeCall(gameID, startPeriod, endPeriod, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameID  (required)
     * @param startPeriod  (required)
     * @param endPeriod  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playbyplayv2GetAsync(String gameID, String startPeriod, String endPeriod, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playbyplayv2GetValidateBeforeCall(gameID, startPeriod, endPeriod, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playercareerstatsGet
     * @param perMode  (required)
     * @param playerID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playercareerstatsGetCall(String perMode, String playerID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playercareerstats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playercareerstatsGetValidateBeforeCall(String perMode, String playerID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playercareerstatsGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playercareerstatsGet(Async)");
        }

        return playercareerstatsGetCall(perMode, playerID, _callback);

    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param playerID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playercareerstatsGet(String perMode, String playerID) throws ApiException {
        playercareerstatsGetWithHttpInfo(perMode, playerID);
    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param playerID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playercareerstatsGetWithHttpInfo(String perMode, String playerID) throws ApiException {
        okhttp3.Call localVarCall = playercareerstatsGetValidateBeforeCall(perMode, playerID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param perMode  (required)
     * @param playerID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playercareerstatsGetAsync(String perMode, String playerID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playercareerstatsGetValidateBeforeCall(perMode, playerID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playercompareGet
     * @param playerIDList  (required)
     * @param vsPlayerIDList  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playercompareGetCall(String playerIDList, String vsPlayerIDList, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playercompare";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playerIDList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerIDList", playerIDList));
        }

        if (vsPlayerIDList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsPlayerIDList", vsPlayerIDList));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playercompareGetValidateBeforeCall(String playerIDList, String vsPlayerIDList, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerIDList' is set
        if (playerIDList == null) {
            throw new ApiException("Missing the required parameter 'playerIDList' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'vsPlayerIDList' is set
        if (vsPlayerIDList == null) {
            throw new ApiException("Missing the required parameter 'vsPlayerIDList' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playercompareGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playercompareGet(Async)");
        }

        return playercompareGetCall(playerIDList, vsPlayerIDList, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param playerIDList  (required)
     * @param vsPlayerIDList  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playercompareGet(String playerIDList, String vsPlayerIDList, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playercompareGetWithHttpInfo(playerIDList, vsPlayerIDList, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param playerIDList  (required)
     * @param vsPlayerIDList  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playercompareGetWithHttpInfo(String playerIDList, String vsPlayerIDList, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playercompareGetValidateBeforeCall(playerIDList, vsPlayerIDList, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param playerIDList  (required)
     * @param vsPlayerIDList  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playercompareGetAsync(String playerIDList, String vsPlayerIDList, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playercompareGetValidateBeforeCall(playerIDList, vsPlayerIDList, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashboardbyclutchGet
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbyclutchGetCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashboardbyclutch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashboardbyclutchGetValidateBeforeCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playerdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playerdashboardbyclutchGet(Async)");
        }

        return playerdashboardbyclutchGetCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerdashboardbyclutchGet(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playerdashboardbyclutchGetWithHttpInfo(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerdashboardbyclutchGetWithHttpInfo(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashboardbyclutchGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbyclutchGetAsync(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashboardbyclutchGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashboardbygamesplitsGet
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbygamesplitsGetCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashboardbygamesplits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashboardbygamesplitsGetValidateBeforeCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playerdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playerdashboardbygamesplitsGet(Async)");
        }

        return playerdashboardbygamesplitsGetCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerdashboardbygamesplitsGet(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playerdashboardbygamesplitsGetWithHttpInfo(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerdashboardbygamesplitsGetWithHttpInfo(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashboardbygamesplitsGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbygamesplitsGetAsync(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashboardbygamesplitsGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashboardbygeneralsplitsGet
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbygeneralsplitsGetCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashboardbygeneralsplits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashboardbygeneralsplitsGetValidateBeforeCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playerdashboardbygeneralsplitsGet(Async)");
        }

        return playerdashboardbygeneralsplitsGetCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerdashboardbygeneralsplitsGet(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playerdashboardbygeneralsplitsGetWithHttpInfo(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerdashboardbygeneralsplitsGetWithHttpInfo(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashboardbygeneralsplitsGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbygeneralsplitsGetAsync(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashboardbygeneralsplitsGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashboardbylastngamesGet
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbylastngamesGetCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashboardbylastngames";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashboardbylastngamesGetValidateBeforeCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playerdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playerdashboardbylastngamesGet(Async)");
        }

        return playerdashboardbylastngamesGetCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerdashboardbylastngamesGet(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playerdashboardbylastngamesGetWithHttpInfo(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerdashboardbylastngamesGetWithHttpInfo(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashboardbylastngamesGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbylastngamesGetAsync(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashboardbylastngamesGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashboardbyopponentGet
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbyopponentGetCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashboardbyopponent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashboardbyopponentGetValidateBeforeCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playerdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playerdashboardbyopponentGet(Async)");
        }

        return playerdashboardbyopponentGetCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerdashboardbyopponentGet(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playerdashboardbyopponentGetWithHttpInfo(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerdashboardbyopponentGetWithHttpInfo(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashboardbyopponentGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbyopponentGetAsync(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashboardbyopponentGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashboardbyshootingsplitsGet
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbyshootingsplitsGetCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashboardbyshootingsplits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashboardbyshootingsplitsGetValidateBeforeCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playerdashboardbyshootingsplitsGet(Async)");
        }

        return playerdashboardbyshootingsplitsGetCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerdashboardbyshootingsplitsGet(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playerdashboardbyshootingsplitsGetWithHttpInfo(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerdashboardbyshootingsplitsGetWithHttpInfo(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashboardbyshootingsplitsGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbyshootingsplitsGetAsync(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashboardbyshootingsplitsGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashboardbyteamperformanceGet
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbyteamperformanceGetCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashboardbyteamperformance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashboardbyteamperformanceGetValidateBeforeCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playerdashboardbyteamperformanceGet(Async)");
        }

        return playerdashboardbyteamperformanceGetCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerdashboardbyteamperformanceGet(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playerdashboardbyteamperformanceGetWithHttpInfo(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerdashboardbyteamperformanceGetWithHttpInfo(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashboardbyteamperformanceGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbyteamperformanceGetAsync(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashboardbyteamperformanceGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashboardbyyearoveryearGet
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbyyearoveryearGetCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashboardbyyearoveryear";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashboardbyyearoveryearGetValidateBeforeCall(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playerdashboardbyyearoveryearGet(Async)");
        }

        return playerdashboardbyyearoveryearGetCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerdashboardbyyearoveryearGet(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playerdashboardbyyearoveryearGetWithHttpInfo(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerdashboardbyyearoveryearGetWithHttpInfo(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashboardbyyearoveryearGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashboardbyyearoveryearGetAsync(String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String playerID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashboardbyyearoveryearGetValidateBeforeCall(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashptpassGet
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashptpassGetCall(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashptpass";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashptpassGetValidateBeforeCall(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playerdashptpassGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playerdashptpassGet(Async)");
        }

        return playerdashptpassGetCall(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerdashptpassGet(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String lastNGames) throws ApiException {
        playerdashptpassGetWithHttpInfo(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, lastNGames);
    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerdashptpassGetWithHttpInfo(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashptpassGetValidateBeforeCall(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashptpassGetAsync(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashptpassGetValidateBeforeCall(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashptrebGet
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashptrebGetCall(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashptreb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashptrebGetValidateBeforeCall(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playerdashptrebGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playerdashptrebGet(Async)");
        }

        return playerdashptrebGetCall(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerdashptrebGet(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playerdashptrebGetWithHttpInfo(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerdashptrebGetWithHttpInfo(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashptrebGetValidateBeforeCall(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashptrebGetAsync(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashptrebGetValidateBeforeCall(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashptreboundlogsGet
     * @param season  (optional)
     * @param seasonType  (optional)
     * @param playerID  (optional)
     * @param teamID  (optional)
     * @param outcome  (optional)
     * @param location  (optional)
     * @param month  (optional)
     * @param seasonSegment  (optional)
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param opponentTeamID  (optional)
     * @param vsConference  (optional)
     * @param vsDivision  (optional)
     * @param gameSegment  (optional)
     * @param period  (optional)
     * @param lastNGames  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call playerdashptreboundlogsGetCall(String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashptreboundlogs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashptreboundlogsGetValidateBeforeCall(String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        return playerdashptreboundlogsGetCall(season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param season  (optional)
     * @param seasonType  (optional)
     * @param playerID  (optional)
     * @param teamID  (optional)
     * @param outcome  (optional)
     * @param location  (optional)
     * @param month  (optional)
     * @param seasonSegment  (optional)
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param opponentTeamID  (optional)
     * @param vsConference  (optional)
     * @param vsDivision  (optional)
     * @param gameSegment  (optional)
     * @param period  (optional)
     * @param lastNGames  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void playerdashptreboundlogsGet(String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playerdashptreboundlogsGetWithHttpInfo(season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param season  (optional)
     * @param seasonType  (optional)
     * @param playerID  (optional)
     * @param teamID  (optional)
     * @param outcome  (optional)
     * @param location  (optional)
     * @param month  (optional)
     * @param seasonSegment  (optional)
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param opponentTeamID  (optional)
     * @param vsConference  (optional)
     * @param vsDivision  (optional)
     * @param gameSegment  (optional)
     * @param period  (optional)
     * @param lastNGames  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> playerdashptreboundlogsGetWithHttpInfo(String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashptreboundlogsGetValidateBeforeCall(season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param season  (optional)
     * @param seasonType  (optional)
     * @param playerID  (optional)
     * @param teamID  (optional)
     * @param outcome  (optional)
     * @param location  (optional)
     * @param month  (optional)
     * @param seasonSegment  (optional)
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param opponentTeamID  (optional)
     * @param vsConference  (optional)
     * @param vsDivision  (optional)
     * @param gameSegment  (optional)
     * @param period  (optional)
     * @param lastNGames  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call playerdashptreboundlogsGetAsync(String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashptreboundlogsGetValidateBeforeCall(season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashptshotdefendGet
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashptshotdefendGetCall(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashptshotdefend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashptshotdefendGetValidateBeforeCall(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playerdashptshotdefendGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playerdashptshotdefendGet(Async)");
        }

        return playerdashptshotdefendGetCall(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerdashptshotdefendGet(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playerdashptshotdefendGetWithHttpInfo(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerdashptshotdefendGetWithHttpInfo(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashptshotdefendGetValidateBeforeCall(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashptshotdefendGetAsync(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashptshotdefendGetValidateBeforeCall(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashptshotlogGet
     * @param leagueID  (optional)
     * @param season  (optional)
     * @param seasonType  (optional)
     * @param playerID  (optional)
     * @param teamID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call playerdashptshotlogGetCall(String leagueID, String season, String seasonType, String playerID, String teamID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashptshotlog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashptshotlogGetValidateBeforeCall(String leagueID, String season, String seasonType, String playerID, String teamID, final ApiCallback _callback) throws ApiException {
        return playerdashptshotlogGetCall(leagueID, season, seasonType, playerID, teamID, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (optional)
     * @param season  (optional)
     * @param seasonType  (optional)
     * @param playerID  (optional)
     * @param teamID  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void playerdashptshotlogGet(String leagueID, String season, String seasonType, String playerID, String teamID) throws ApiException {
        playerdashptshotlogGetWithHttpInfo(leagueID, season, seasonType, playerID, teamID);
    }

    /**
     * 
     * 
     * @param leagueID  (optional)
     * @param season  (optional)
     * @param seasonType  (optional)
     * @param playerID  (optional)
     * @param teamID  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> playerdashptshotlogGetWithHttpInfo(String leagueID, String season, String seasonType, String playerID, String teamID) throws ApiException {
        okhttp3.Call localVarCall = playerdashptshotlogGetValidateBeforeCall(leagueID, season, seasonType, playerID, teamID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (optional)
     * @param season  (optional)
     * @param seasonType  (optional)
     * @param playerID  (optional)
     * @param teamID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call playerdashptshotlogGetAsync(String leagueID, String season, String seasonType, String playerID, String teamID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashptshotlogGetValidateBeforeCall(leagueID, season, seasonType, playerID, teamID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerdashptshotsGet
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashptshotsGetCall(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerdashptshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerdashptshotsGetValidateBeforeCall(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playerdashptshotsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playerdashptshotsGet(Async)");
        }

        return playerdashptshotsGetCall(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerdashptshotsGet(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playerdashptshotsGetWithHttpInfo(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerdashptshotsGetWithHttpInfo(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playerdashptshotsGetValidateBeforeCall(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param playerID  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerdashptshotsGetAsync(String perMode, String season, String seasonType, String playerID, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerdashptshotsGetValidateBeforeCall(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playergamelogGet
     * @param playerID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playergamelogGetCall(String playerID, String season, String seasonType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playergamelog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playergamelogGetValidateBeforeCall(String playerID, String season, String seasonType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playergamelogGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playergamelogGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playergamelogGet(Async)");
        }

        return playergamelogGetCall(playerID, season, seasonType, _callback);

    }

    /**
     * 
     * 
     * @param playerID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playergamelogGet(String playerID, String season, String seasonType) throws ApiException {
        playergamelogGetWithHttpInfo(playerID, season, seasonType);
    }

    /**
     * 
     * 
     * @param playerID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playergamelogGetWithHttpInfo(String playerID, String season, String seasonType) throws ApiException {
        okhttp3.Call localVarCall = playergamelogGetValidateBeforeCall(playerID, season, seasonType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param playerID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playergamelogGetAsync(String playerID, String season, String seasonType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playergamelogGetValidateBeforeCall(playerID, season, seasonType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerprofileGet
     * @param leagueID  (required)
     * @param playerID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param graphStartSeason  (required)
     * @param graphEndSeason  (required)
     * @param graphStat  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerprofileGetCall(String leagueID, String playerID, String season, String seasonType, String graphStartSeason, String graphEndSeason, String graphStat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerprofile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (graphStartSeason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GraphStartSeason", graphStartSeason));
        }

        if (graphEndSeason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GraphEndSeason", graphEndSeason));
        }

        if (graphStat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GraphStat", graphStat));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerprofileGetValidateBeforeCall(String leagueID, String playerID, String season, String seasonType, String graphStartSeason, String graphEndSeason, String graphStat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling playerprofileGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerprofileGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playerprofileGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playerprofileGet(Async)");
        }

        // verify the required parameter 'graphStartSeason' is set
        if (graphStartSeason == null) {
            throw new ApiException("Missing the required parameter 'graphStartSeason' when calling playerprofileGet(Async)");
        }

        // verify the required parameter 'graphEndSeason' is set
        if (graphEndSeason == null) {
            throw new ApiException("Missing the required parameter 'graphEndSeason' when calling playerprofileGet(Async)");
        }

        // verify the required parameter 'graphStat' is set
        if (graphStat == null) {
            throw new ApiException("Missing the required parameter 'graphStat' when calling playerprofileGet(Async)");
        }

        return playerprofileGetCall(leagueID, playerID, season, seasonType, graphStartSeason, graphEndSeason, graphStat, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param playerID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param graphStartSeason  (required)
     * @param graphEndSeason  (required)
     * @param graphStat  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerprofileGet(String leagueID, String playerID, String season, String seasonType, String graphStartSeason, String graphEndSeason, String graphStat) throws ApiException {
        playerprofileGetWithHttpInfo(leagueID, playerID, season, seasonType, graphStartSeason, graphEndSeason, graphStat);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param playerID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param graphStartSeason  (required)
     * @param graphEndSeason  (required)
     * @param graphStat  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerprofileGetWithHttpInfo(String leagueID, String playerID, String season, String seasonType, String graphStartSeason, String graphEndSeason, String graphStat) throws ApiException {
        okhttp3.Call localVarCall = playerprofileGetValidateBeforeCall(leagueID, playerID, season, seasonType, graphStartSeason, graphEndSeason, graphStat, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param playerID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param graphStartSeason  (required)
     * @param graphEndSeason  (required)
     * @param graphStat  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerprofileGetAsync(String leagueID, String playerID, String season, String seasonType, String graphStartSeason, String graphEndSeason, String graphStat, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerprofileGetValidateBeforeCall(leagueID, playerID, season, seasonType, graphStartSeason, graphEndSeason, graphStat, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerprofilev2Get
     * @param perMode  (required)
     * @param playerID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerprofilev2GetCall(String perMode, String playerID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playerprofilev2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerprofilev2GetValidateBeforeCall(String perMode, String playerID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playerprofilev2Get(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playerprofilev2Get(Async)");
        }

        return playerprofilev2GetCall(perMode, playerID, _callback);

    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param playerID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playerprofilev2Get(String perMode, String playerID) throws ApiException {
        playerprofilev2GetWithHttpInfo(perMode, playerID);
    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param playerID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playerprofilev2GetWithHttpInfo(String perMode, String playerID) throws ApiException {
        okhttp3.Call localVarCall = playerprofilev2GetValidateBeforeCall(perMode, playerID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param perMode  (required)
     * @param playerID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerprofilev2GetAsync(String perMode, String playerID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerprofilev2GetValidateBeforeCall(perMode, playerID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playersvsplayersGet
     * @param playerTeamID  (required)
     * @param playerID1  (required)
     * @param playerID2  (required)
     * @param playerID3  (required)
     * @param playerID4  (required)
     * @param playerID5  (required)
     * @param vsTeamID  (required)
     * @param vsPlayerID1  (required)
     * @param vsPlayerID2  (required)
     * @param vsPlayerID3  (required)
     * @param vsPlayerID4  (required)
     * @param vsPlayerID5  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersvsplayersGetCall(String playerTeamID, String playerID1, String playerID2, String playerID3, String playerID4, String playerID5, String vsTeamID, String vsPlayerID1, String vsPlayerID2, String vsPlayerID3, String vsPlayerID4, String vsPlayerID5, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playersvsplayers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playerTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerTeamID", playerTeamID));
        }

        if (playerID1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID1", playerID1));
        }

        if (playerID2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID2", playerID2));
        }

        if (playerID3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID3", playerID3));
        }

        if (playerID4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID4", playerID4));
        }

        if (playerID5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID5", playerID5));
        }

        if (vsTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsTeamID", vsTeamID));
        }

        if (vsPlayerID1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsPlayerID1", vsPlayerID1));
        }

        if (vsPlayerID2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsPlayerID2", vsPlayerID2));
        }

        if (vsPlayerID3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsPlayerID3", vsPlayerID3));
        }

        if (vsPlayerID4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsPlayerID4", vsPlayerID4));
        }

        if (vsPlayerID5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsPlayerID5", vsPlayerID5));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playersvsplayersGetValidateBeforeCall(String playerTeamID, String playerID1, String playerID2, String playerID3, String playerID4, String playerID5, String vsTeamID, String vsPlayerID1, String vsPlayerID2, String vsPlayerID3, String vsPlayerID4, String vsPlayerID5, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerTeamID' is set
        if (playerTeamID == null) {
            throw new ApiException("Missing the required parameter 'playerTeamID' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'playerID1' is set
        if (playerID1 == null) {
            throw new ApiException("Missing the required parameter 'playerID1' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'playerID2' is set
        if (playerID2 == null) {
            throw new ApiException("Missing the required parameter 'playerID2' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'playerID3' is set
        if (playerID3 == null) {
            throw new ApiException("Missing the required parameter 'playerID3' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'playerID4' is set
        if (playerID4 == null) {
            throw new ApiException("Missing the required parameter 'playerID4' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'playerID5' is set
        if (playerID5 == null) {
            throw new ApiException("Missing the required parameter 'playerID5' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'vsTeamID' is set
        if (vsTeamID == null) {
            throw new ApiException("Missing the required parameter 'vsTeamID' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'vsPlayerID1' is set
        if (vsPlayerID1 == null) {
            throw new ApiException("Missing the required parameter 'vsPlayerID1' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'vsPlayerID2' is set
        if (vsPlayerID2 == null) {
            throw new ApiException("Missing the required parameter 'vsPlayerID2' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'vsPlayerID3' is set
        if (vsPlayerID3 == null) {
            throw new ApiException("Missing the required parameter 'vsPlayerID3' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'vsPlayerID4' is set
        if (vsPlayerID4 == null) {
            throw new ApiException("Missing the required parameter 'vsPlayerID4' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'vsPlayerID5' is set
        if (vsPlayerID5 == null) {
            throw new ApiException("Missing the required parameter 'vsPlayerID5' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playersvsplayersGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playersvsplayersGet(Async)");
        }

        return playersvsplayersGetCall(playerTeamID, playerID1, playerID2, playerID3, playerID4, playerID5, vsTeamID, vsPlayerID1, vsPlayerID2, vsPlayerID3, vsPlayerID4, vsPlayerID5, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param playerTeamID  (required)
     * @param playerID1  (required)
     * @param playerID2  (required)
     * @param playerID3  (required)
     * @param playerID4  (required)
     * @param playerID5  (required)
     * @param vsTeamID  (required)
     * @param vsPlayerID1  (required)
     * @param vsPlayerID2  (required)
     * @param vsPlayerID3  (required)
     * @param vsPlayerID4  (required)
     * @param vsPlayerID5  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playersvsplayersGet(String playerTeamID, String playerID1, String playerID2, String playerID3, String playerID4, String playerID5, String vsTeamID, String vsPlayerID1, String vsPlayerID2, String vsPlayerID3, String vsPlayerID4, String vsPlayerID5, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playersvsplayersGetWithHttpInfo(playerTeamID, playerID1, playerID2, playerID3, playerID4, playerID5, vsTeamID, vsPlayerID1, vsPlayerID2, vsPlayerID3, vsPlayerID4, vsPlayerID5, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param playerTeamID  (required)
     * @param playerID1  (required)
     * @param playerID2  (required)
     * @param playerID3  (required)
     * @param playerID4  (required)
     * @param playerID5  (required)
     * @param vsTeamID  (required)
     * @param vsPlayerID1  (required)
     * @param vsPlayerID2  (required)
     * @param vsPlayerID3  (required)
     * @param vsPlayerID4  (required)
     * @param vsPlayerID5  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playersvsplayersGetWithHttpInfo(String playerTeamID, String playerID1, String playerID2, String playerID3, String playerID4, String playerID5, String vsTeamID, String vsPlayerID1, String vsPlayerID2, String vsPlayerID3, String vsPlayerID4, String vsPlayerID5, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playersvsplayersGetValidateBeforeCall(playerTeamID, playerID1, playerID2, playerID3, playerID4, playerID5, vsTeamID, vsPlayerID1, vsPlayerID2, vsPlayerID3, vsPlayerID4, vsPlayerID5, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param playerTeamID  (required)
     * @param playerID1  (required)
     * @param playerID2  (required)
     * @param playerID3  (required)
     * @param playerID4  (required)
     * @param playerID5  (required)
     * @param vsTeamID  (required)
     * @param vsPlayerID1  (required)
     * @param vsPlayerID2  (required)
     * @param vsPlayerID3  (required)
     * @param vsPlayerID4  (required)
     * @param vsPlayerID5  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersvsplayersGetAsync(String playerTeamID, String playerID1, String playerID2, String playerID3, String playerID4, String playerID5, String vsTeamID, String vsPlayerID1, String vsPlayerID2, String vsPlayerID3, String vsPlayerID4, String vsPlayerID5, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playersvsplayersGetValidateBeforeCall(playerTeamID, playerID1, playerID2, playerID3, playerID4, playerID5, vsTeamID, vsPlayerID1, vsPlayerID2, vsPlayerID3, vsPlayerID4, vsPlayerID5, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playervsplayerGet
     * @param playerID  (required)
     * @param vsPlayerID  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playervsplayerGetCall(String playerID, String vsPlayerID, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playervsplayer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (vsPlayerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsPlayerID", vsPlayerID));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playervsplayerGetValidateBeforeCall(String playerID, String vsPlayerID, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'vsPlayerID' is set
        if (vsPlayerID == null) {
            throw new ApiException("Missing the required parameter 'vsPlayerID' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling playervsplayerGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling playervsplayerGet(Async)");
        }

        return playervsplayerGetCall(playerID, vsPlayerID, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param playerID  (required)
     * @param vsPlayerID  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playervsplayerGet(String playerID, String vsPlayerID, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        playervsplayerGetWithHttpInfo(playerID, vsPlayerID, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param playerID  (required)
     * @param vsPlayerID  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playervsplayerGetWithHttpInfo(String playerID, String vsPlayerID, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = playervsplayerGetValidateBeforeCall(playerID, vsPlayerID, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param playerID  (required)
     * @param vsPlayerID  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playervsplayerGetAsync(String playerID, String vsPlayerID, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playervsplayerGetValidateBeforeCall(playerID, vsPlayerID, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playoffpictureGet
     * @param leagueID  (required)
     * @param seasonID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playoffpictureGetCall(String leagueID, String seasonID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playoffpicture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (seasonID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonID", seasonID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playoffpictureGetValidateBeforeCall(String leagueID, String seasonID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling playoffpictureGet(Async)");
        }

        // verify the required parameter 'seasonID' is set
        if (seasonID == null) {
            throw new ApiException("Missing the required parameter 'seasonID' when calling playoffpictureGet(Async)");
        }

        return playoffpictureGetCall(leagueID, seasonID, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void playoffpictureGet(String leagueID, String seasonID) throws ApiException {
        playoffpictureGetWithHttpInfo(leagueID, seasonID);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playoffpictureGetWithHttpInfo(String leagueID, String seasonID) throws ApiException {
        okhttp3.Call localVarCall = playoffpictureGetValidateBeforeCall(leagueID, seasonID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param seasonID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playoffpictureGetAsync(String leagueID, String seasonID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playoffpictureGetValidateBeforeCall(leagueID, seasonID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scoreboardGet
     * @param gameDate  (required)
     * @param leagueID  (required)
     * @param dayOffset  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scoreboardGetCall(String gameDate, String leagueID, String dayOffset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scoreboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameDate", gameDate));
        }

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (dayOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DayOffset", dayOffset));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scoreboardGetValidateBeforeCall(String gameDate, String leagueID, String dayOffset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameDate' is set
        if (gameDate == null) {
            throw new ApiException("Missing the required parameter 'gameDate' when calling scoreboardGet(Async)");
        }

        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling scoreboardGet(Async)");
        }

        // verify the required parameter 'dayOffset' is set
        if (dayOffset == null) {
            throw new ApiException("Missing the required parameter 'dayOffset' when calling scoreboardGet(Async)");
        }

        return scoreboardGetCall(gameDate, leagueID, dayOffset, _callback);

    }

    /**
     * 
     * 
     * @param gameDate  (required)
     * @param leagueID  (required)
     * @param dayOffset  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void scoreboardGet(String gameDate, String leagueID, String dayOffset) throws ApiException {
        scoreboardGetWithHttpInfo(gameDate, leagueID, dayOffset);
    }

    /**
     * 
     * 
     * @param gameDate  (required)
     * @param leagueID  (required)
     * @param dayOffset  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scoreboardGetWithHttpInfo(String gameDate, String leagueID, String dayOffset) throws ApiException {
        okhttp3.Call localVarCall = scoreboardGetValidateBeforeCall(gameDate, leagueID, dayOffset, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameDate  (required)
     * @param leagueID  (required)
     * @param dayOffset  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scoreboardGetAsync(String gameDate, String leagueID, String dayOffset, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scoreboardGetValidateBeforeCall(gameDate, leagueID, dayOffset, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scoreboardV2Get
     * @param gameDate  (required)
     * @param leagueID  (required)
     * @param dayOffset  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scoreboardV2GetCall(String gameDate, String leagueID, String dayOffset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scoreboardV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameDate", gameDate));
        }

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (dayOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DayOffset", dayOffset));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scoreboardV2GetValidateBeforeCall(String gameDate, String leagueID, String dayOffset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameDate' is set
        if (gameDate == null) {
            throw new ApiException("Missing the required parameter 'gameDate' when calling scoreboardV2Get(Async)");
        }

        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling scoreboardV2Get(Async)");
        }

        // verify the required parameter 'dayOffset' is set
        if (dayOffset == null) {
            throw new ApiException("Missing the required parameter 'dayOffset' when calling scoreboardV2Get(Async)");
        }

        return scoreboardV2GetCall(gameDate, leagueID, dayOffset, _callback);

    }

    /**
     * 
     * 
     * @param gameDate  (required)
     * @param leagueID  (required)
     * @param dayOffset  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void scoreboardV2Get(String gameDate, String leagueID, String dayOffset) throws ApiException {
        scoreboardV2GetWithHttpInfo(gameDate, leagueID, dayOffset);
    }

    /**
     * 
     * 
     * @param gameDate  (required)
     * @param leagueID  (required)
     * @param dayOffset  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scoreboardV2GetWithHttpInfo(String gameDate, String leagueID, String dayOffset) throws ApiException {
        okhttp3.Call localVarCall = scoreboardV2GetValidateBeforeCall(gameDate, leagueID, dayOffset, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gameDate  (required)
     * @param leagueID  (required)
     * @param dayOffset  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scoreboardV2GetAsync(String gameDate, String leagueID, String dayOffset, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scoreboardV2GetValidateBeforeCall(gameDate, leagueID, dayOffset, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for shotchartdetailGet
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param playerID  (required)
     * @param gameID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param position  (required)
     * @param rookieYear  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param contextMeasure  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shotchartdetailGetCall(String seasonType, String teamID, String playerID, String gameID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String position, String rookieYear, String gameSegment, String period, String lastNGames, String contextMeasure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shotchartdetail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (playerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlayerID", playerID));
        }

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Position", position));
        }

        if (rookieYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RookieYear", rookieYear));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        if (contextMeasure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContextMeasure", contextMeasure));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shotchartdetailGetValidateBeforeCall(String seasonType, String teamID, String playerID, String gameID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String position, String rookieYear, String gameSegment, String period, String lastNGames, String contextMeasure, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'playerID' is set
        if (playerID == null) {
            throw new ApiException("Missing the required parameter 'playerID' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'position' is set
        if (position == null) {
            throw new ApiException("Missing the required parameter 'position' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'rookieYear' is set
        if (rookieYear == null) {
            throw new ApiException("Missing the required parameter 'rookieYear' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling shotchartdetailGet(Async)");
        }

        // verify the required parameter 'contextMeasure' is set
        if (contextMeasure == null) {
            throw new ApiException("Missing the required parameter 'contextMeasure' when calling shotchartdetailGet(Async)");
        }

        return shotchartdetailGetCall(seasonType, teamID, playerID, gameID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, position, rookieYear, gameSegment, period, lastNGames, contextMeasure, _callback);

    }

    /**
     * 
     * 
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param playerID  (required)
     * @param gameID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param position  (required)
     * @param rookieYear  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param contextMeasure  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void shotchartdetailGet(String seasonType, String teamID, String playerID, String gameID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String position, String rookieYear, String gameSegment, String period, String lastNGames, String contextMeasure) throws ApiException {
        shotchartdetailGetWithHttpInfo(seasonType, teamID, playerID, gameID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, position, rookieYear, gameSegment, period, lastNGames, contextMeasure);
    }

    /**
     * 
     * 
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param playerID  (required)
     * @param gameID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param position  (required)
     * @param rookieYear  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param contextMeasure  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> shotchartdetailGetWithHttpInfo(String seasonType, String teamID, String playerID, String gameID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String position, String rookieYear, String gameSegment, String period, String lastNGames, String contextMeasure) throws ApiException {
        okhttp3.Call localVarCall = shotchartdetailGetValidateBeforeCall(seasonType, teamID, playerID, gameID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, position, rookieYear, gameSegment, period, lastNGames, contextMeasure, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param playerID  (required)
     * @param gameID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param position  (required)
     * @param rookieYear  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param contextMeasure  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shotchartdetailGetAsync(String seasonType, String teamID, String playerID, String gameID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String position, String rookieYear, String gameSegment, String period, String lastNGames, String contextMeasure, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = shotchartdetailGetValidateBeforeCall(seasonType, teamID, playerID, gameID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, position, rookieYear, gameSegment, period, lastNGames, contextMeasure, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for shotchartlineupdetailGet
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param gameID  (required)
     * @param GROUP_ID  (required)
     * @param contextMeasure  (required)
     * @param contextFilter  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shotchartlineupdetailGetCall(String leagueID, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String gameID, String GROUP_ID, String contextMeasure, String contextFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shotchartlineupdetail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (GROUP_ID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GROUP_ID", GROUP_ID));
        }

        if (contextMeasure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContextMeasure", contextMeasure));
        }

        if (contextFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContextFilter", contextFilter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shotchartlineupdetailGetValidateBeforeCall(String leagueID, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String gameID, String GROUP_ID, String contextMeasure, String contextFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'GROUP_ID' is set
        if (GROUP_ID == null) {
            throw new ApiException("Missing the required parameter 'GROUP_ID' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'contextMeasure' is set
        if (contextMeasure == null) {
            throw new ApiException("Missing the required parameter 'contextMeasure' when calling shotchartlineupdetailGet(Async)");
        }

        // verify the required parameter 'contextFilter' is set
        if (contextFilter == null) {
            throw new ApiException("Missing the required parameter 'contextFilter' when calling shotchartlineupdetailGet(Async)");
        }

        return shotchartlineupdetailGetCall(leagueID, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, gameID, GROUP_ID, contextMeasure, contextFilter, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param gameID  (required)
     * @param GROUP_ID  (required)
     * @param contextMeasure  (required)
     * @param contextFilter  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void shotchartlineupdetailGet(String leagueID, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String gameID, String GROUP_ID, String contextMeasure, String contextFilter) throws ApiException {
        shotchartlineupdetailGetWithHttpInfo(leagueID, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, gameID, GROUP_ID, contextMeasure, contextFilter);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param gameID  (required)
     * @param GROUP_ID  (required)
     * @param contextMeasure  (required)
     * @param contextFilter  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> shotchartlineupdetailGetWithHttpInfo(String leagueID, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String gameID, String GROUP_ID, String contextMeasure, String contextFilter) throws ApiException {
        okhttp3.Call localVarCall = shotchartlineupdetailGetValidateBeforeCall(leagueID, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, gameID, GROUP_ID, contextMeasure, contextFilter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param gameID  (required)
     * @param GROUP_ID  (required)
     * @param contextMeasure  (required)
     * @param contextFilter  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shotchartlineupdetailGetAsync(String leagueID, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, String gameID, String GROUP_ID, String contextMeasure, String contextFilter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = shotchartlineupdetailGetValidateBeforeCall(leagueID, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, gameID, GROUP_ID, contextMeasure, contextFilter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamdashboardbyclutchGet
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbyclutchGetCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamdashboardbyclutch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamdashboardbyclutchGetValidateBeforeCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamdashboardbyclutchGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamdashboardbyclutchGet(Async)");
        }

        return teamdashboardbyclutchGetCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamdashboardbyclutchGet(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamdashboardbyclutchGetWithHttpInfo(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamdashboardbyclutchGetWithHttpInfo(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamdashboardbyclutchGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbyclutchGetAsync(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamdashboardbyclutchGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamdashboardbygamesplitsGet
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbygamesplitsGetCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamdashboardbygamesplits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamdashboardbygamesplitsGetValidateBeforeCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamdashboardbygamesplitsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamdashboardbygamesplitsGet(Async)");
        }

        return teamdashboardbygamesplitsGetCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamdashboardbygamesplitsGet(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamdashboardbygamesplitsGetWithHttpInfo(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamdashboardbygamesplitsGetWithHttpInfo(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamdashboardbygamesplitsGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbygamesplitsGetAsync(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamdashboardbygamesplitsGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamdashboardbygeneralsplitsGet
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbygeneralsplitsGetCall(String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamdashboardbygeneralsplits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamdashboardbygeneralsplitsGetValidateBeforeCall(String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamdashboardbygeneralsplitsGet(Async)");
        }

        return teamdashboardbygeneralsplitsGetCall(seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamdashboardbygeneralsplitsGet(String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamdashboardbygeneralsplitsGetWithHttpInfo(seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamdashboardbygeneralsplitsGetWithHttpInfo(String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamdashboardbygeneralsplitsGetValidateBeforeCall(seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbygeneralsplitsGetAsync(String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamdashboardbygeneralsplitsGetValidateBeforeCall(seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamdashboardbylastngamesGet
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbylastngamesGetCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamdashboardbylastngames";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamdashboardbylastngamesGetValidateBeforeCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamdashboardbylastngamesGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamdashboardbylastngamesGet(Async)");
        }

        return teamdashboardbylastngamesGetCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamdashboardbylastngamesGet(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamdashboardbylastngamesGetWithHttpInfo(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamdashboardbylastngamesGetWithHttpInfo(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamdashboardbylastngamesGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbylastngamesGetAsync(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamdashboardbylastngamesGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamdashboardbyopponentGet
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbyopponentGetCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamdashboardbyopponent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamdashboardbyopponentGetValidateBeforeCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamdashboardbyopponentGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamdashboardbyopponentGet(Async)");
        }

        return teamdashboardbyopponentGetCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamdashboardbyopponentGet(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamdashboardbyopponentGetWithHttpInfo(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamdashboardbyopponentGetWithHttpInfo(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamdashboardbyopponentGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbyopponentGetAsync(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamdashboardbyopponentGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamdashboardbyshootingsplitsGet
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbyshootingsplitsGetCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamdashboardbyshootingsplits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamdashboardbyshootingsplitsGetValidateBeforeCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamdashboardbyshootingsplitsGet(Async)");
        }

        return teamdashboardbyshootingsplitsGetCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamdashboardbyshootingsplitsGet(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamdashboardbyshootingsplitsGetWithHttpInfo(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamdashboardbyshootingsplitsGetWithHttpInfo(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamdashboardbyshootingsplitsGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbyshootingsplitsGetAsync(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamdashboardbyshootingsplitsGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamdashboardbyteamperformanceGet
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbyteamperformanceGetCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamdashboardbyteamperformance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamdashboardbyteamperformanceGetValidateBeforeCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamdashboardbyteamperformanceGet(Async)");
        }

        return teamdashboardbyteamperformanceGetCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamdashboardbyteamperformanceGet(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamdashboardbyteamperformanceGetWithHttpInfo(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamdashboardbyteamperformanceGetWithHttpInfo(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamdashboardbyteamperformanceGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbyteamperformanceGetAsync(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamdashboardbyteamperformanceGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamdashboardbyyearoveryearGet
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbyyearoveryearGetCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamdashboardbyyearoveryear";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamdashboardbyyearoveryearGetValidateBeforeCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamdashboardbyyearoveryearGet(Async)");
        }

        return teamdashboardbyyearoveryearGetCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamdashboardbyyearoveryearGet(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamdashboardbyyearoveryearGetWithHttpInfo(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamdashboardbyyearoveryearGetWithHttpInfo(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamdashboardbyyearoveryearGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashboardbyyearoveryearGetAsync(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamdashboardbyyearoveryearGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamdashlineupsGet
     * @param groupQuantity  (required)
     * @param gameID  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashlineupsGetCall(String groupQuantity, String gameID, String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamdashlineups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupQuantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GroupQuantity", groupQuantity));
        }

        if (gameID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameID", gameID));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamdashlineupsGetValidateBeforeCall(String groupQuantity, String gameID, String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupQuantity' is set
        if (groupQuantity == null) {
            throw new ApiException("Missing the required parameter 'groupQuantity' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'gameID' is set
        if (gameID == null) {
            throw new ApiException("Missing the required parameter 'gameID' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamdashlineupsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamdashlineupsGet(Async)");
        }

        return teamdashlineupsGetCall(groupQuantity, gameID, seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param groupQuantity  (required)
     * @param gameID  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamdashlineupsGet(String groupQuantity, String gameID, String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamdashlineupsGetWithHttpInfo(groupQuantity, gameID, seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param groupQuantity  (required)
     * @param gameID  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamdashlineupsGetWithHttpInfo(String groupQuantity, String gameID, String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamdashlineupsGetValidateBeforeCall(groupQuantity, gameID, seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param groupQuantity  (required)
     * @param gameID  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashlineupsGetAsync(String groupQuantity, String gameID, String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamdashlineupsGetValidateBeforeCall(groupQuantity, gameID, seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamdashptpassGet
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashptpassGetCall(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamdashptpass";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamdashptpassGetValidateBeforeCall(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamdashptpassGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamdashptpassGet(Async)");
        }

        return teamdashptpassGetCall(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamdashptpassGet(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String lastNGames) throws ApiException {
        teamdashptpassGetWithHttpInfo(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, lastNGames);
    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamdashptpassGetWithHttpInfo(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamdashptpassGetValidateBeforeCall(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashptpassGetAsync(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamdashptpassGetValidateBeforeCall(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamdashptrebGet
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashptrebGetCall(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamdashptreb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamdashptrebGetValidateBeforeCall(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamdashptrebGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamdashptrebGet(Async)");
        }

        return teamdashptrebGetCall(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamdashptrebGet(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamdashptrebGetWithHttpInfo(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamdashptrebGetWithHttpInfo(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamdashptrebGetValidateBeforeCall(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashptrebGetAsync(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamdashptrebGetValidateBeforeCall(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamdashptshotsGet
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashptshotsGetCall(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamdashptshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamdashptshotsGetValidateBeforeCall(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamdashptshotsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamdashptshotsGet(Async)");
        }

        return teamdashptshotsGetCall(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamdashptshotsGet(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamdashptshotsGetWithHttpInfo(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamdashptshotsGetWithHttpInfo(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamdashptshotsGetValidateBeforeCall(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param perMode  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamdashptshotsGetAsync(String perMode, String season, String seasonType, String teamID, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamdashptshotsGetValidateBeforeCall(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamgamelogGet
     * @param teamID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamgamelogGetCall(String teamID, String season, String seasonType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamgamelog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamgamelogGetValidateBeforeCall(String teamID, String season, String seasonType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamgamelogGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamgamelogGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamgamelogGet(Async)");
        }

        return teamgamelogGetCall(teamID, season, seasonType, _callback);

    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamgamelogGet(String teamID, String season, String seasonType) throws ApiException {
        teamgamelogGetWithHttpInfo(teamID, season, seasonType);
    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamgamelogGetWithHttpInfo(String teamID, String season, String seasonType) throws ApiException {
        okhttp3.Call localVarCall = teamgamelogGetValidateBeforeCall(teamID, season, seasonType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param teamID  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamgamelogGetAsync(String teamID, String season, String seasonType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamgamelogGetValidateBeforeCall(teamID, season, seasonType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teaminfocommonGet
     * @param season  (required)
     * @param teamID  (required)
     * @param leagueID  (required)
     * @param seasonType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teaminfocommonGetCall(String season, String teamID, String leagueID, String seasonType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teaminfocommon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teaminfocommonGetValidateBeforeCall(String season, String teamID, String leagueID, String seasonType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teaminfocommonGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teaminfocommonGet(Async)");
        }

        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling teaminfocommonGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teaminfocommonGet(Async)");
        }

        return teaminfocommonGetCall(season, teamID, leagueID, seasonType, _callback);

    }

    /**
     * 
     * 
     * @param season  (required)
     * @param teamID  (required)
     * @param leagueID  (required)
     * @param seasonType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teaminfocommonGet(String season, String teamID, String leagueID, String seasonType) throws ApiException {
        teaminfocommonGetWithHttpInfo(season, teamID, leagueID, seasonType);
    }

    /**
     * 
     * 
     * @param season  (required)
     * @param teamID  (required)
     * @param leagueID  (required)
     * @param seasonType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teaminfocommonGetWithHttpInfo(String season, String teamID, String leagueID, String seasonType) throws ApiException {
        okhttp3.Call localVarCall = teaminfocommonGetValidateBeforeCall(season, teamID, leagueID, seasonType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param season  (required)
     * @param teamID  (required)
     * @param leagueID  (required)
     * @param seasonType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teaminfocommonGetAsync(String season, String teamID, String leagueID, String seasonType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teaminfocommonGetValidateBeforeCall(season, teamID, leagueID, seasonType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamplayerdashboardGet
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamplayerdashboardGetCall(String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamplayerdashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamplayerdashboardGetValidateBeforeCall(String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamplayerdashboardGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamplayerdashboardGet(Async)");
        }

        return teamplayerdashboardGetCall(seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamplayerdashboardGet(String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamplayerdashboardGetWithHttpInfo(seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamplayerdashboardGetWithHttpInfo(String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamplayerdashboardGetValidateBeforeCall(seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param seasonType  (required)
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamplayerdashboardGetAsync(String seasonType, String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamplayerdashboardGetValidateBeforeCall(seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamplayeronoffdetailsGet
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamplayeronoffdetailsGetCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamplayeronoffdetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamplayeronoffdetailsGetValidateBeforeCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamplayeronoffdetailsGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamplayeronoffdetailsGet(Async)");
        }

        return teamplayeronoffdetailsGetCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamplayeronoffdetailsGet(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamplayeronoffdetailsGetWithHttpInfo(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamplayeronoffdetailsGetWithHttpInfo(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamplayeronoffdetailsGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamplayeronoffdetailsGetAsync(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamplayeronoffdetailsGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamplayeronoffsummaryGet
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamplayeronoffsummaryGetCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamplayeronoffsummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamplayeronoffsummaryGetValidateBeforeCall(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamplayeronoffsummaryGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamplayeronoffsummaryGet(Async)");
        }

        return teamplayeronoffsummaryGetCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamplayeronoffsummaryGet(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamplayeronoffsummaryGetWithHttpInfo(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamplayeronoffsummaryGetWithHttpInfo(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamplayeronoffsummaryGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param teamID  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param seasonType  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamplayeronoffsummaryGetAsync(String teamID, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String seasonType, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamplayeronoffsummaryGetValidateBeforeCall(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamvsplayerGet
     * @param teamID  (required)
     * @param vsPlayerID  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamvsplayerGetCall(String teamID, String vsPlayerID, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamvsplayer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        if (vsPlayerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsPlayerID", vsPlayerID));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MeasureType", measureType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (plusMinus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlusMinus", plusMinus));
        }

        if (paceAdjust != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaceAdjust", paceAdjust));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rank", rank));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Season", season));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Outcome", outcome));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Location", location));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Month", month));
        }

        if (seasonSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonSegment", seasonSegment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (opponentTeamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OpponentTeamID", opponentTeamID));
        }

        if (vsConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsConference", vsConference));
        }

        if (vsDivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VsDivision", vsDivision));
        }

        if (gameSegment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameSegment", gameSegment));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (lastNGames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastNGames", lastNGames));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamvsplayerGetValidateBeforeCall(String teamID, String vsPlayerID, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'vsPlayerID' is set
        if (vsPlayerID == null) {
            throw new ApiException("Missing the required parameter 'vsPlayerID' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'measureType' is set
        if (measureType == null) {
            throw new ApiException("Missing the required parameter 'measureType' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'plusMinus' is set
        if (plusMinus == null) {
            throw new ApiException("Missing the required parameter 'plusMinus' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'paceAdjust' is set
        if (paceAdjust == null) {
            throw new ApiException("Missing the required parameter 'paceAdjust' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'rank' is set
        if (rank == null) {
            throw new ApiException("Missing the required parameter 'rank' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'seasonSegment' is set
        if (seasonSegment == null) {
            throw new ApiException("Missing the required parameter 'seasonSegment' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'opponentTeamID' is set
        if (opponentTeamID == null) {
            throw new ApiException("Missing the required parameter 'opponentTeamID' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'vsConference' is set
        if (vsConference == null) {
            throw new ApiException("Missing the required parameter 'vsConference' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'vsDivision' is set
        if (vsDivision == null) {
            throw new ApiException("Missing the required parameter 'vsDivision' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'gameSegment' is set
        if (gameSegment == null) {
            throw new ApiException("Missing the required parameter 'gameSegment' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling teamvsplayerGet(Async)");
        }

        // verify the required parameter 'lastNGames' is set
        if (lastNGames == null) {
            throw new ApiException("Missing the required parameter 'lastNGames' when calling teamvsplayerGet(Async)");
        }

        return teamvsplayerGetCall(teamID, vsPlayerID, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);

    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param vsPlayerID  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamvsplayerGet(String teamID, String vsPlayerID, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        teamvsplayerGetWithHttpInfo(teamID, vsPlayerID, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames);
    }

    /**
     * 
     * 
     * @param teamID  (required)
     * @param vsPlayerID  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamvsplayerGetWithHttpInfo(String teamID, String vsPlayerID, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames) throws ApiException {
        okhttp3.Call localVarCall = teamvsplayerGetValidateBeforeCall(teamID, vsPlayerID, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param teamID  (required)
     * @param vsPlayerID  (required)
     * @param seasonType  (required)
     * @param measureType  (required)
     * @param perMode  (required)
     * @param plusMinus  (required)
     * @param paceAdjust  (required)
     * @param rank  (required)
     * @param season  (required)
     * @param outcome  (required)
     * @param location  (required)
     * @param month  (required)
     * @param seasonSegment  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param opponentTeamID  (required)
     * @param vsConference  (required)
     * @param vsDivision  (required)
     * @param gameSegment  (required)
     * @param period  (required)
     * @param lastNGames  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamvsplayerGetAsync(String teamID, String vsPlayerID, String seasonType, String measureType, String perMode, String plusMinus, String paceAdjust, String rank, String season, String outcome, String location, String month, String seasonSegment, String dateFrom, String dateTo, String opponentTeamID, String vsConference, String vsDivision, String gameSegment, String period, String lastNGames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamvsplayerGetValidateBeforeCall(teamID, vsPlayerID, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamyearbyyearstatsGet
     * @param leagueID  (required)
     * @param seasonType  (required)
     * @param perMode  (required)
     * @param teamID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamyearbyyearstatsGetCall(String leagueID, String seasonType, String perMode, String teamID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamyearbyyearstats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SeasonType", seasonType));
        }

        if (perMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerMode", perMode));
        }

        if (teamID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TeamID", teamID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamyearbyyearstatsGetValidateBeforeCall(String leagueID, String seasonType, String perMode, String teamID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling teamyearbyyearstatsGet(Async)");
        }

        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling teamyearbyyearstatsGet(Async)");
        }

        // verify the required parameter 'perMode' is set
        if (perMode == null) {
            throw new ApiException("Missing the required parameter 'perMode' when calling teamyearbyyearstatsGet(Async)");
        }

        // verify the required parameter 'teamID' is set
        if (teamID == null) {
            throw new ApiException("Missing the required parameter 'teamID' when calling teamyearbyyearstatsGet(Async)");
        }

        return teamyearbyyearstatsGetCall(leagueID, seasonType, perMode, teamID, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonType  (required)
     * @param perMode  (required)
     * @param teamID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void teamyearbyyearstatsGet(String leagueID, String seasonType, String perMode, String teamID) throws ApiException {
        teamyearbyyearstatsGetWithHttpInfo(leagueID, seasonType, perMode, teamID);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param seasonType  (required)
     * @param perMode  (required)
     * @param teamID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamyearbyyearstatsGetWithHttpInfo(String leagueID, String seasonType, String perMode, String teamID) throws ApiException {
        okhttp3.Call localVarCall = teamyearbyyearstatsGetValidateBeforeCall(leagueID, seasonType, perMode, teamID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param seasonType  (required)
     * @param perMode  (required)
     * @param teamID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamyearbyyearstatsGetAsync(String leagueID, String seasonType, String perMode, String teamID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamyearbyyearstatsGetValidateBeforeCall(leagueID, seasonType, perMode, teamID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for videoStatusGet
     * @param leagueID  (required)
     * @param gameDate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call videoStatusGetCall(String leagueID, String gameDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videoStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leagueID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeagueID", leagueID));
        }

        if (gameDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GameDate", gameDate));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call videoStatusGetValidateBeforeCall(String leagueID, String gameDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leagueID' is set
        if (leagueID == null) {
            throw new ApiException("Missing the required parameter 'leagueID' when calling videoStatusGet(Async)");
        }

        // verify the required parameter 'gameDate' is set
        if (gameDate == null) {
            throw new ApiException("Missing the required parameter 'gameDate' when calling videoStatusGet(Async)");
        }

        return videoStatusGetCall(leagueID, gameDate, _callback);

    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param gameDate  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public void videoStatusGet(String leagueID, String gameDate) throws ApiException {
        videoStatusGetWithHttpInfo(leagueID, gameDate);
    }

    /**
     * 
     * 
     * @param leagueID  (required)
     * @param gameDate  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> videoStatusGetWithHttpInfo(String leagueID, String gameDate) throws ApiException {
        okhttp3.Call localVarCall = videoStatusGetValidateBeforeCall(leagueID, gameDate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param leagueID  (required)
     * @param gameDate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - bad parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call videoStatusGetAsync(String leagueID, String gameDate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = videoStatusGetValidateBeforeCall(leagueID, gameDate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
