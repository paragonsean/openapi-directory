# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change_reason: str=None, cost_center1: str=None, cost_center2: str=None, cost_center3: str=None, effective_date: str=None, end_check_date: str=None, job: str=None, rate: float=None, rate_code: str=None, rate_notes: str=None, rate_per: str=None, shift: str=None):
        """AdditionalRate - a model defined in OpenAPI

        :param change_reason: The change_reason of this AdditionalRate.
        :param cost_center1: The cost_center1 of this AdditionalRate.
        :param cost_center2: The cost_center2 of this AdditionalRate.
        :param cost_center3: The cost_center3 of this AdditionalRate.
        :param effective_date: The effective_date of this AdditionalRate.
        :param end_check_date: The end_check_date of this AdditionalRate.
        :param job: The job of this AdditionalRate.
        :param rate: The rate of this AdditionalRate.
        :param rate_code: The rate_code of this AdditionalRate.
        :param rate_notes: The rate_notes of this AdditionalRate.
        :param rate_per: The rate_per of this AdditionalRate.
        :param shift: The shift of this AdditionalRate.
        """
        self.openapi_types = {
            'change_reason': str,
            'cost_center1': str,
            'cost_center2': str,
            'cost_center3': str,
            'effective_date': str,
            'end_check_date': str,
            'job': str,
            'rate': float,
            'rate_code': str,
            'rate_notes': str,
            'rate_per': str,
            'shift': str
        }

        self.attribute_map = {
            'change_reason': 'changeReason',
            'cost_center1': 'costCenter1',
            'cost_center2': 'costCenter2',
            'cost_center3': 'costCenter3',
            'effective_date': 'effectiveDate',
            'end_check_date': 'endCheckDate',
            'job': 'job',
            'rate': 'rate',
            'rate_code': 'rateCode',
            'rate_notes': 'rateNotes',
            'rate_per': 'ratePer',
            'shift': 'shift'
        }

        self._change_reason = change_reason
        self._cost_center1 = cost_center1
        self._cost_center2 = cost_center2
        self._cost_center3 = cost_center3
        self._effective_date = effective_date
        self._end_check_date = end_check_date
        self._job = job
        self._rate = rate
        self._rate_code = rate_code
        self._rate_notes = rate_notes
        self._rate_per = rate_per
        self._shift = shift

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The additionalRate of this AdditionalRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change_reason(self):
        """Gets the change_reason of this AdditionalRate.

        Not required. If populated, must match one of the system coded values available in the Additional Rates Change Reason drop down.<br />

        :return: The change_reason of this AdditionalRate.
        :rtype: str
        """
        return self._change_reason

    @change_reason.setter
    def change_reason(self, change_reason):
        """Sets the change_reason of this AdditionalRate.

        Not required. If populated, must match one of the system coded values available in the Additional Rates Change Reason drop down.<br />

        :param change_reason: The change_reason of this AdditionalRate.
        :type change_reason: str
        """

        self._change_reason = change_reason

    @property
    def cost_center1(self):
        """Gets the cost_center1 of this AdditionalRate.

        Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 1 drop down. This cell must be in a text format.<br />

        :return: The cost_center1 of this AdditionalRate.
        :rtype: str
        """
        return self._cost_center1

    @cost_center1.setter
    def cost_center1(self, cost_center1):
        """Sets the cost_center1 of this AdditionalRate.

        Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 1 drop down. This cell must be in a text format.<br />

        :param cost_center1: The cost_center1 of this AdditionalRate.
        :type cost_center1: str
        """

        self._cost_center1 = cost_center1

    @property
    def cost_center2(self):
        """Gets the cost_center2 of this AdditionalRate.

        Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 2 drop down. This cell must be in a text format.<br />

        :return: The cost_center2 of this AdditionalRate.
        :rtype: str
        """
        return self._cost_center2

    @cost_center2.setter
    def cost_center2(self, cost_center2):
        """Sets the cost_center2 of this AdditionalRate.

        Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 2 drop down. This cell must be in a text format.<br />

        :param cost_center2: The cost_center2 of this AdditionalRate.
        :type cost_center2: str
        """

        self._cost_center2 = cost_center2

    @property
    def cost_center3(self):
        """Gets the cost_center3 of this AdditionalRate.

        Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 3 drop down. This cell must be in a text format.<br />

        :return: The cost_center3 of this AdditionalRate.
        :rtype: str
        """
        return self._cost_center3

    @cost_center3.setter
    def cost_center3(self, cost_center3):
        """Sets the cost_center3 of this AdditionalRate.

        Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 3 drop down. This cell must be in a text format.<br />

        :param cost_center3: The cost_center3 of this AdditionalRate.
        :type cost_center3: str
        """

        self._cost_center3 = cost_center3

    @property
    def effective_date(self):
        """Gets the effective_date of this AdditionalRate.

        Required. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />

        :return: The effective_date of this AdditionalRate.
        :rtype: str
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this AdditionalRate.

        Required. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />

        :param effective_date: The effective_date of this AdditionalRate.
        :type effective_date: str
        """

        self._effective_date = effective_date

    @property
    def end_check_date(self):
        """Gets the end_check_date of this AdditionalRate.

        Not required. Must match one of the system coded check dates available in the Additional Rates End Check Date drop down. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />

        :return: The end_check_date of this AdditionalRate.
        :rtype: str
        """
        return self._end_check_date

    @end_check_date.setter
    def end_check_date(self, end_check_date):
        """Sets the end_check_date of this AdditionalRate.

        Not required. Must match one of the system coded check dates available in the Additional Rates End Check Date drop down. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />

        :param end_check_date: The end_check_date of this AdditionalRate.
        :type end_check_date: str
        """

        self._end_check_date = end_check_date

    @property
    def job(self):
        """Gets the job of this AdditionalRate.

        Not required. If populated, must match one of the system coded values available in the Additional Rates Job drop down.<br />

        :return: The job of this AdditionalRate.
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this AdditionalRate.

        Not required. If populated, must match one of the system coded values available in the Additional Rates Job drop down.<br />

        :param job: The job of this AdditionalRate.
        :type job: str
        """

        self._job = job

    @property
    def rate(self):
        """Gets the rate of this AdditionalRate.

        Required. Enter dollar amount that corresponds to the Per selection.<br />

        :return: The rate of this AdditionalRate.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this AdditionalRate.

        Required. Enter dollar amount that corresponds to the Per selection.<br />

        :param rate: The rate of this AdditionalRate.
        :type rate: float
        """

        self._rate = rate

    @property
    def rate_code(self):
        """Gets the rate_code of this AdditionalRate.

        Required. If populated, must match one of the system coded values available in the Additional Rates Rate Code drop down.<br />

        :return: The rate_code of this AdditionalRate.
        :rtype: str
        """
        return self._rate_code

    @rate_code.setter
    def rate_code(self, rate_code):
        """Sets the rate_code of this AdditionalRate.

        Required. If populated, must match one of the system coded values available in the Additional Rates Rate Code drop down.<br />

        :param rate_code: The rate_code of this AdditionalRate.
        :type rate_code: str
        """

        self._rate_code = rate_code

    @property
    def rate_notes(self):
        """Gets the rate_notes of this AdditionalRate.

        Not required.<br  />Max length: 4000<br />

        :return: The rate_notes of this AdditionalRate.
        :rtype: str
        """
        return self._rate_notes

    @rate_notes.setter
    def rate_notes(self, rate_notes):
        """Sets the rate_notes of this AdditionalRate.

        Not required.<br  />Max length: 4000<br />

        :param rate_notes: The rate_notes of this AdditionalRate.
        :type rate_notes: str
        """

        self._rate_notes = rate_notes

    @property
    def rate_per(self):
        """Gets the rate_per of this AdditionalRate.

        Required. Valid values are HOUR or WEEK.<br />

        :return: The rate_per of this AdditionalRate.
        :rtype: str
        """
        return self._rate_per

    @rate_per.setter
    def rate_per(self, rate_per):
        """Sets the rate_per of this AdditionalRate.

        Required. Valid values are HOUR or WEEK.<br />

        :param rate_per: The rate_per of this AdditionalRate.
        :type rate_per: str
        """

        self._rate_per = rate_per

    @property
    def shift(self):
        """Gets the shift of this AdditionalRate.

        Not required. If populated, must match one of the system coded values available in the Additional Rates Shift drop down.<br />

        :return: The shift of this AdditionalRate.
        :rtype: str
        """
        return self._shift

    @shift.setter
    def shift(self, shift):
        """Sets the shift of this AdditionalRate.

        Not required. If populated, must match one of the system coded values available in the Additional Rates Shift drop down.<br />

        :param shift: The shift of this AdditionalRate.
        :type shift: str
        """

        self._shift = shift
