# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direct_deposit_additional_direct_deposit_inner import DirectDepositAdditionalDirectDepositInner
from openapi_server.models.employee_additional_rate_inner import EmployeeAdditionalRateInner
from openapi_server.models.employee_benefit_setup import EmployeeBenefitSetup
from openapi_server.models.employee_custom_boolean_fields_inner import EmployeeCustomBooleanFieldsInner
from openapi_server.models.employee_custom_date_fields_inner import EmployeeCustomDateFieldsInner
from openapi_server.models.employee_custom_drop_down_fields_inner import EmployeeCustomDropDownFieldsInner
from openapi_server.models.employee_custom_number_fields_inner import EmployeeCustomNumberFieldsInner
from openapi_server.models.employee_custom_text_fields_inner import EmployeeCustomTextFieldsInner
from openapi_server.models.employee_department_position import EmployeeDepartmentPosition
from openapi_server.models.employee_emergency_contacts_inner import EmployeeEmergencyContactsInner
from openapi_server.models.employee_federal_tax import EmployeeFederalTax
from openapi_server.models.employee_home_address import EmployeeHomeAddress
from openapi_server.models.employee_local_tax_inner import EmployeeLocalTaxInner
from openapi_server.models.employee_main_direct_deposit import EmployeeMainDirectDeposit
from openapi_server.models.employee_non_primary_state_tax import EmployeeNonPrimaryStateTax
from openapi_server.models.employee_primary_pay_rate import EmployeePrimaryPayRate
from openapi_server.models.employee_primary_state_tax import EmployeePrimaryStateTax
from openapi_server.models.employee_status import EmployeeStatus
from openapi_server.models.employee_tax_setup import EmployeeTaxSetup
from openapi_server.models.employee_web_time import EmployeeWebTime
from openapi_server.models.employee_work_address import EmployeeWorkAddress
from openapi_server.models.employee_work_eligibility import EmployeeWorkEligibility
from openapi_server import util


class Employee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_direct_deposit: List[DirectDepositAdditionalDirectDepositInner]=None, additional_rate: List[EmployeeAdditionalRateInner]=None, benefit_setup: EmployeeBenefitSetup=None, birth_date: str=None, co_emp_code: str=None, company_fein: str=None, company_name: str=None, currency: str=None, custom_boolean_fields: List[EmployeeCustomBooleanFieldsInner]=None, custom_date_fields: List[EmployeeCustomDateFieldsInner]=None, custom_drop_down_fields: List[EmployeeCustomDropDownFieldsInner]=None, custom_number_fields: List[EmployeeCustomNumberFieldsInner]=None, custom_text_fields: List[EmployeeCustomTextFieldsInner]=None, department_position: EmployeeDepartmentPosition=None, disability_description: str=None, emergency_contacts: List[EmployeeEmergencyContactsInner]=None, employee_id: str=None, ethnicity: str=None, federal_tax: EmployeeFederalTax=None, first_name: str=None, gender: str=None, home_address: EmployeeHomeAddress=None, is_highly_compensated: bool=None, is_smoker: bool=None, last_name: str=None, local_tax: List[EmployeeLocalTaxInner]=None, main_direct_deposit: EmployeeMainDirectDeposit=None, marital_status: str=None, middle_name: str=None, non_primary_state_tax: EmployeeNonPrimaryStateTax=None, owner_percent: float=None, preferred_name: str=None, primary_pay_rate: EmployeePrimaryPayRate=None, primary_state_tax: EmployeePrimaryStateTax=None, prior_last_name: str=None, salutation: str=None, ssn: str=None, status: EmployeeStatus=None, suffix: str=None, tax_setup: EmployeeTaxSetup=None, veteran_description: str=None, web_time: EmployeeWebTime=None, work_address: EmployeeWorkAddress=None, work_eligibility: EmployeeWorkEligibility=None):
        """Employee - a model defined in OpenAPI

        :param additional_direct_deposit: The additional_direct_deposit of this Employee.
        :param additional_rate: The additional_rate of this Employee.
        :param benefit_setup: The benefit_setup of this Employee.
        :param birth_date: The birth_date of this Employee.
        :param co_emp_code: The co_emp_code of this Employee.
        :param company_fein: The company_fein of this Employee.
        :param company_name: The company_name of this Employee.
        :param currency: The currency of this Employee.
        :param custom_boolean_fields: The custom_boolean_fields of this Employee.
        :param custom_date_fields: The custom_date_fields of this Employee.
        :param custom_drop_down_fields: The custom_drop_down_fields of this Employee.
        :param custom_number_fields: The custom_number_fields of this Employee.
        :param custom_text_fields: The custom_text_fields of this Employee.
        :param department_position: The department_position of this Employee.
        :param disability_description: The disability_description of this Employee.
        :param emergency_contacts: The emergency_contacts of this Employee.
        :param employee_id: The employee_id of this Employee.
        :param ethnicity: The ethnicity of this Employee.
        :param federal_tax: The federal_tax of this Employee.
        :param first_name: The first_name of this Employee.
        :param gender: The gender of this Employee.
        :param home_address: The home_address of this Employee.
        :param is_highly_compensated: The is_highly_compensated of this Employee.
        :param is_smoker: The is_smoker of this Employee.
        :param last_name: The last_name of this Employee.
        :param local_tax: The local_tax of this Employee.
        :param main_direct_deposit: The main_direct_deposit of this Employee.
        :param marital_status: The marital_status of this Employee.
        :param middle_name: The middle_name of this Employee.
        :param non_primary_state_tax: The non_primary_state_tax of this Employee.
        :param owner_percent: The owner_percent of this Employee.
        :param preferred_name: The preferred_name of this Employee.
        :param primary_pay_rate: The primary_pay_rate of this Employee.
        :param primary_state_tax: The primary_state_tax of this Employee.
        :param prior_last_name: The prior_last_name of this Employee.
        :param salutation: The salutation of this Employee.
        :param ssn: The ssn of this Employee.
        :param status: The status of this Employee.
        :param suffix: The suffix of this Employee.
        :param tax_setup: The tax_setup of this Employee.
        :param veteran_description: The veteran_description of this Employee.
        :param web_time: The web_time of this Employee.
        :param work_address: The work_address of this Employee.
        :param work_eligibility: The work_eligibility of this Employee.
        """
        self.openapi_types = {
            'additional_direct_deposit': List[DirectDepositAdditionalDirectDepositInner],
            'additional_rate': List[EmployeeAdditionalRateInner],
            'benefit_setup': EmployeeBenefitSetup,
            'birth_date': str,
            'co_emp_code': str,
            'company_fein': str,
            'company_name': str,
            'currency': str,
            'custom_boolean_fields': List[EmployeeCustomBooleanFieldsInner],
            'custom_date_fields': List[EmployeeCustomDateFieldsInner],
            'custom_drop_down_fields': List[EmployeeCustomDropDownFieldsInner],
            'custom_number_fields': List[EmployeeCustomNumberFieldsInner],
            'custom_text_fields': List[EmployeeCustomTextFieldsInner],
            'department_position': EmployeeDepartmentPosition,
            'disability_description': str,
            'emergency_contacts': List[EmployeeEmergencyContactsInner],
            'employee_id': str,
            'ethnicity': str,
            'federal_tax': EmployeeFederalTax,
            'first_name': str,
            'gender': str,
            'home_address': EmployeeHomeAddress,
            'is_highly_compensated': bool,
            'is_smoker': bool,
            'last_name': str,
            'local_tax': List[EmployeeLocalTaxInner],
            'main_direct_deposit': EmployeeMainDirectDeposit,
            'marital_status': str,
            'middle_name': str,
            'non_primary_state_tax': EmployeeNonPrimaryStateTax,
            'owner_percent': float,
            'preferred_name': str,
            'primary_pay_rate': EmployeePrimaryPayRate,
            'primary_state_tax': EmployeePrimaryStateTax,
            'prior_last_name': str,
            'salutation': str,
            'ssn': str,
            'status': EmployeeStatus,
            'suffix': str,
            'tax_setup': EmployeeTaxSetup,
            'veteran_description': str,
            'web_time': EmployeeWebTime,
            'work_address': EmployeeWorkAddress,
            'work_eligibility': EmployeeWorkEligibility
        }

        self.attribute_map = {
            'additional_direct_deposit': 'additionalDirectDeposit',
            'additional_rate': 'additionalRate',
            'benefit_setup': 'benefitSetup',
            'birth_date': 'birthDate',
            'co_emp_code': 'coEmpCode',
            'company_fein': 'companyFEIN',
            'company_name': 'companyName',
            'currency': 'currency',
            'custom_boolean_fields': 'customBooleanFields',
            'custom_date_fields': 'customDateFields',
            'custom_drop_down_fields': 'customDropDownFields',
            'custom_number_fields': 'customNumberFields',
            'custom_text_fields': 'customTextFields',
            'department_position': 'departmentPosition',
            'disability_description': 'disabilityDescription',
            'emergency_contacts': 'emergencyContacts',
            'employee_id': 'employeeId',
            'ethnicity': 'ethnicity',
            'federal_tax': 'federalTax',
            'first_name': 'firstName',
            'gender': 'gender',
            'home_address': 'homeAddress',
            'is_highly_compensated': 'isHighlyCompensated',
            'is_smoker': 'isSmoker',
            'last_name': 'lastName',
            'local_tax': 'localTax',
            'main_direct_deposit': 'mainDirectDeposit',
            'marital_status': 'maritalStatus',
            'middle_name': 'middleName',
            'non_primary_state_tax': 'nonPrimaryStateTax',
            'owner_percent': 'ownerPercent',
            'preferred_name': 'preferredName',
            'primary_pay_rate': 'primaryPayRate',
            'primary_state_tax': 'primaryStateTax',
            'prior_last_name': 'priorLastName',
            'salutation': 'salutation',
            'ssn': 'ssn',
            'status': 'status',
            'suffix': 'suffix',
            'tax_setup': 'taxSetup',
            'veteran_description': 'veteranDescription',
            'web_time': 'webTime',
            'work_address': 'workAddress',
            'work_eligibility': 'workEligibility'
        }

        self._additional_direct_deposit = additional_direct_deposit
        self._additional_rate = additional_rate
        self._benefit_setup = benefit_setup
        self._birth_date = birth_date
        self._co_emp_code = co_emp_code
        self._company_fein = company_fein
        self._company_name = company_name
        self._currency = currency
        self._custom_boolean_fields = custom_boolean_fields
        self._custom_date_fields = custom_date_fields
        self._custom_drop_down_fields = custom_drop_down_fields
        self._custom_number_fields = custom_number_fields
        self._custom_text_fields = custom_text_fields
        self._department_position = department_position
        self._disability_description = disability_description
        self._emergency_contacts = emergency_contacts
        self._employee_id = employee_id
        self._ethnicity = ethnicity
        self._federal_tax = federal_tax
        self._first_name = first_name
        self._gender = gender
        self._home_address = home_address
        self._is_highly_compensated = is_highly_compensated
        self._is_smoker = is_smoker
        self._last_name = last_name
        self._local_tax = local_tax
        self._main_direct_deposit = main_direct_deposit
        self._marital_status = marital_status
        self._middle_name = middle_name
        self._non_primary_state_tax = non_primary_state_tax
        self._owner_percent = owner_percent
        self._preferred_name = preferred_name
        self._primary_pay_rate = primary_pay_rate
        self._primary_state_tax = primary_state_tax
        self._prior_last_name = prior_last_name
        self._salutation = salutation
        self._ssn = ssn
        self._status = status
        self._suffix = suffix
        self._tax_setup = tax_setup
        self._veteran_description = veteran_description
        self._web_time = web_time
        self._work_address = work_address
        self._work_eligibility = work_eligibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Employee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The employee of this Employee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_direct_deposit(self):
        """Gets the additional_direct_deposit of this Employee.

        Add up to 19 direct deposit accounts in addition to the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with information provided on the request. GET API will not return direct deposit data.

        :return: The additional_direct_deposit of this Employee.
        :rtype: List[DirectDepositAdditionalDirectDepositInner]
        """
        return self._additional_direct_deposit

    @additional_direct_deposit.setter
    def additional_direct_deposit(self, additional_direct_deposit):
        """Sets the additional_direct_deposit of this Employee.

        Add up to 19 direct deposit accounts in addition to the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with information provided on the request. GET API will not return direct deposit data.

        :param additional_direct_deposit: The additional_direct_deposit of this Employee.
        :type additional_direct_deposit: List[DirectDepositAdditionalDirectDepositInner]
        """
        if additional_direct_deposit is not None and len(additional_direct_deposit) > 19:
            raise ValueError("Invalid value for `additional_direct_deposit`, number of items must be less than or equal to `19`")

        self._additional_direct_deposit = additional_direct_deposit

    @property
    def additional_rate(self):
        """Gets the additional_rate of this Employee.

        Add Additional Rates.

        :return: The additional_rate of this Employee.
        :rtype: List[EmployeeAdditionalRateInner]
        """
        return self._additional_rate

    @additional_rate.setter
    def additional_rate(self, additional_rate):
        """Sets the additional_rate of this Employee.

        Add Additional Rates.

        :param additional_rate: The additional_rate of this Employee.
        :type additional_rate: List[EmployeeAdditionalRateInner]
        """

        self._additional_rate = additional_rate

    @property
    def benefit_setup(self):
        """Gets the benefit_setup of this Employee.


        :return: The benefit_setup of this Employee.
        :rtype: EmployeeBenefitSetup
        """
        return self._benefit_setup

    @benefit_setup.setter
    def benefit_setup(self, benefit_setup):
        """Sets the benefit_setup of this Employee.


        :param benefit_setup: The benefit_setup of this Employee.
        :type benefit_setup: EmployeeBenefitSetup
        """

        self._benefit_setup = benefit_setup

    @property
    def birth_date(self):
        """Gets the birth_date of this Employee.

        Employee birthdate. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :return: The birth_date of this Employee.
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Employee.

        Employee birthdate. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :param birth_date: The birth_date of this Employee.
        :type birth_date: str
        """

        self._birth_date = birth_date

    @property
    def co_emp_code(self):
        """Gets the co_emp_code of this Employee.

        Unique idenifier for SSO.<br  />Max length: 20

        :return: The co_emp_code of this Employee.
        :rtype: str
        """
        return self._co_emp_code

    @co_emp_code.setter
    def co_emp_code(self, co_emp_code):
        """Sets the co_emp_code of this Employee.

        Unique idenifier for SSO.<br  />Max length: 20

        :param co_emp_code: The co_emp_code of this Employee.
        :type co_emp_code: str
        """

        self._co_emp_code = co_emp_code

    @property
    def company_fein(self):
        """Gets the company_fein of this Employee.

        Company FEIN as defined in Web Pay, applicable with GET requests only.<br  /> Max length: 20

        :return: The company_fein of this Employee.
        :rtype: str
        """
        return self._company_fein

    @company_fein.setter
    def company_fein(self, company_fein):
        """Sets the company_fein of this Employee.

        Company FEIN as defined in Web Pay, applicable with GET requests only.<br  /> Max length: 20

        :param company_fein: The company_fein of this Employee.
        :type company_fein: str
        """

        self._company_fein = company_fein

    @property
    def company_name(self):
        """Gets the company_name of this Employee.

        Company name as defined in Web Pay, applicable with GET requests only.<br  /> Max length: 50

        :return: The company_name of this Employee.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Employee.

        Company name as defined in Web Pay, applicable with GET requests only.<br  /> Max length: 50

        :param company_name: The company_name of this Employee.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def currency(self):
        """Gets the currency of this Employee.

        Employee is paid in this currency. <br  />Max length: 30

        :return: The currency of this Employee.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Employee.

        Employee is paid in this currency. <br  />Max length: 30

        :param currency: The currency of this Employee.
        :type currency: str
        """

        self._currency = currency

    @property
    def custom_boolean_fields(self):
        """Gets the custom_boolean_fields of this Employee.

        Up to 8 custom fields of boolean (checkbox) type value.

        :return: The custom_boolean_fields of this Employee.
        :rtype: List[EmployeeCustomBooleanFieldsInner]
        """
        return self._custom_boolean_fields

    @custom_boolean_fields.setter
    def custom_boolean_fields(self, custom_boolean_fields):
        """Sets the custom_boolean_fields of this Employee.

        Up to 8 custom fields of boolean (checkbox) type value.

        :param custom_boolean_fields: The custom_boolean_fields of this Employee.
        :type custom_boolean_fields: List[EmployeeCustomBooleanFieldsInner]
        """
        if custom_boolean_fields is not None and len(custom_boolean_fields) > 8:
            raise ValueError("Invalid value for `custom_boolean_fields`, number of items must be less than or equal to `8`")

        self._custom_boolean_fields = custom_boolean_fields

    @property
    def custom_date_fields(self):
        """Gets the custom_date_fields of this Employee.

        Up to 8 custom fields of the date type value.

        :return: The custom_date_fields of this Employee.
        :rtype: List[EmployeeCustomDateFieldsInner]
        """
        return self._custom_date_fields

    @custom_date_fields.setter
    def custom_date_fields(self, custom_date_fields):
        """Sets the custom_date_fields of this Employee.

        Up to 8 custom fields of the date type value.

        :param custom_date_fields: The custom_date_fields of this Employee.
        :type custom_date_fields: List[EmployeeCustomDateFieldsInner]
        """
        if custom_date_fields is not None and len(custom_date_fields) > 8:
            raise ValueError("Invalid value for `custom_date_fields`, number of items must be less than or equal to `8`")

        self._custom_date_fields = custom_date_fields

    @property
    def custom_drop_down_fields(self):
        """Gets the custom_drop_down_fields of this Employee.

        Up to 8 custom fields of the dropdown type value.

        :return: The custom_drop_down_fields of this Employee.
        :rtype: List[EmployeeCustomDropDownFieldsInner]
        """
        return self._custom_drop_down_fields

    @custom_drop_down_fields.setter
    def custom_drop_down_fields(self, custom_drop_down_fields):
        """Sets the custom_drop_down_fields of this Employee.

        Up to 8 custom fields of the dropdown type value.

        :param custom_drop_down_fields: The custom_drop_down_fields of this Employee.
        :type custom_drop_down_fields: List[EmployeeCustomDropDownFieldsInner]
        """
        if custom_drop_down_fields is not None and len(custom_drop_down_fields) > 8:
            raise ValueError("Invalid value for `custom_drop_down_fields`, number of items must be less than or equal to `8`")

        self._custom_drop_down_fields = custom_drop_down_fields

    @property
    def custom_number_fields(self):
        """Gets the custom_number_fields of this Employee.

        Up to 8 custom fields of numeric type value.

        :return: The custom_number_fields of this Employee.
        :rtype: List[EmployeeCustomNumberFieldsInner]
        """
        return self._custom_number_fields

    @custom_number_fields.setter
    def custom_number_fields(self, custom_number_fields):
        """Sets the custom_number_fields of this Employee.

        Up to 8 custom fields of numeric type value.

        :param custom_number_fields: The custom_number_fields of this Employee.
        :type custom_number_fields: List[EmployeeCustomNumberFieldsInner]
        """
        if custom_number_fields is not None and len(custom_number_fields) > 8:
            raise ValueError("Invalid value for `custom_number_fields`, number of items must be less than or equal to `8`")

        self._custom_number_fields = custom_number_fields

    @property
    def custom_text_fields(self):
        """Gets the custom_text_fields of this Employee.

        Up to 8 custom fields of text type value.

        :return: The custom_text_fields of this Employee.
        :rtype: List[EmployeeCustomTextFieldsInner]
        """
        return self._custom_text_fields

    @custom_text_fields.setter
    def custom_text_fields(self, custom_text_fields):
        """Sets the custom_text_fields of this Employee.

        Up to 8 custom fields of text type value.

        :param custom_text_fields: The custom_text_fields of this Employee.
        :type custom_text_fields: List[EmployeeCustomTextFieldsInner]
        """
        if custom_text_fields is not None and len(custom_text_fields) > 8:
            raise ValueError("Invalid value for `custom_text_fields`, number of items must be less than or equal to `8`")

        self._custom_text_fields = custom_text_fields

    @property
    def department_position(self):
        """Gets the department_position of this Employee.


        :return: The department_position of this Employee.
        :rtype: EmployeeDepartmentPosition
        """
        return self._department_position

    @department_position.setter
    def department_position(self, department_position):
        """Sets the department_position of this Employee.


        :param department_position: The department_position of this Employee.
        :type department_position: EmployeeDepartmentPosition
        """

        self._department_position = department_position

    @property
    def disability_description(self):
        """Gets the disability_description of this Employee.

        Indicates if employee has disability status.

        :return: The disability_description of this Employee.
        :rtype: str
        """
        return self._disability_description

    @disability_description.setter
    def disability_description(self, disability_description):
        """Sets the disability_description of this Employee.

        Indicates if employee has disability status.

        :param disability_description: The disability_description of this Employee.
        :type disability_description: str
        """

        self._disability_description = disability_description

    @property
    def emergency_contacts(self):
        """Gets the emergency_contacts of this Employee.

        Add or update Emergency Contacts.

        :return: The emergency_contacts of this Employee.
        :rtype: List[EmployeeEmergencyContactsInner]
        """
        return self._emergency_contacts

    @emergency_contacts.setter
    def emergency_contacts(self, emergency_contacts):
        """Sets the emergency_contacts of this Employee.

        Add or update Emergency Contacts.

        :param emergency_contacts: The emergency_contacts of this Employee.
        :type emergency_contacts: List[EmployeeEmergencyContactsInner]
        """

        self._emergency_contacts = emergency_contacts

    @property
    def employee_id(self):
        """Gets the employee_id of this Employee.

        Leave blank to have Web Pay automatically assign the next available employee ID.<br  />Max length: 9

        :return: The employee_id of this Employee.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this Employee.

        Leave blank to have Web Pay automatically assign the next available employee ID.<br  />Max length: 9

        :param employee_id: The employee_id of this Employee.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def ethnicity(self):
        """Gets the ethnicity of this Employee.

        Employee ethnicity.<br  /> Max length: 10

        :return: The ethnicity of this Employee.
        :rtype: str
        """
        return self._ethnicity

    @ethnicity.setter
    def ethnicity(self, ethnicity):
        """Sets the ethnicity of this Employee.

        Employee ethnicity.<br  /> Max length: 10

        :param ethnicity: The ethnicity of this Employee.
        :type ethnicity: str
        """

        self._ethnicity = ethnicity

    @property
    def federal_tax(self):
        """Gets the federal_tax of this Employee.


        :return: The federal_tax of this Employee.
        :rtype: EmployeeFederalTax
        """
        return self._federal_tax

    @federal_tax.setter
    def federal_tax(self, federal_tax):
        """Sets the federal_tax of this Employee.


        :param federal_tax: The federal_tax of this Employee.
        :type federal_tax: EmployeeFederalTax
        """

        self._federal_tax = federal_tax

    @property
    def first_name(self):
        """Gets the first_name of this Employee.

        Employee first name. <br  />Max length: 40

        :return: The first_name of this Employee.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Employee.

        Employee first name. <br  />Max length: 40

        :param first_name: The first_name of this Employee.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this Employee.

        Employee gender. Common values *M* (Male), *F* (Female). <br  />Max length: 1

        :return: The gender of this Employee.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Employee.

        Employee gender. Common values *M* (Male), *F* (Female). <br  />Max length: 1

        :param gender: The gender of this Employee.
        :type gender: str
        """

        self._gender = gender

    @property
    def home_address(self):
        """Gets the home_address of this Employee.


        :return: The home_address of this Employee.
        :rtype: EmployeeHomeAddress
        """
        return self._home_address

    @home_address.setter
    def home_address(self, home_address):
        """Sets the home_address of this Employee.


        :param home_address: The home_address of this Employee.
        :type home_address: EmployeeHomeAddress
        """

        self._home_address = home_address

    @property
    def is_highly_compensated(self):
        """Gets the is_highly_compensated of this Employee.

        Indicates if employee meets the highly compensated employee criteria.

        :return: The is_highly_compensated of this Employee.
        :rtype: bool
        """
        return self._is_highly_compensated

    @is_highly_compensated.setter
    def is_highly_compensated(self, is_highly_compensated):
        """Sets the is_highly_compensated of this Employee.

        Indicates if employee meets the highly compensated employee criteria.

        :param is_highly_compensated: The is_highly_compensated of this Employee.
        :type is_highly_compensated: bool
        """

        self._is_highly_compensated = is_highly_compensated

    @property
    def is_smoker(self):
        """Gets the is_smoker of this Employee.

        Indicates if employee is a smoker.

        :return: The is_smoker of this Employee.
        :rtype: bool
        """
        return self._is_smoker

    @is_smoker.setter
    def is_smoker(self, is_smoker):
        """Sets the is_smoker of this Employee.

        Indicates if employee is a smoker.

        :param is_smoker: The is_smoker of this Employee.
        :type is_smoker: bool
        """

        self._is_smoker = is_smoker

    @property
    def last_name(self):
        """Gets the last_name of this Employee.

        Employee last name. <br  />Max length: 40

        :return: The last_name of this Employee.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Employee.

        Employee last name. <br  />Max length: 40

        :param last_name: The last_name of this Employee.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def local_tax(self):
        """Gets the local_tax of this Employee.

        Add, update, or delete local tax code, filing status, and exemptions including  PA-PSD taxes.

        :return: The local_tax of this Employee.
        :rtype: List[EmployeeLocalTaxInner]
        """
        return self._local_tax

    @local_tax.setter
    def local_tax(self, local_tax):
        """Sets the local_tax of this Employee.

        Add, update, or delete local tax code, filing status, and exemptions including  PA-PSD taxes.

        :param local_tax: The local_tax of this Employee.
        :type local_tax: List[EmployeeLocalTaxInner]
        """
        if local_tax is not None and len(local_tax) > 5:
            raise ValueError("Invalid value for `local_tax`, number of items must be less than or equal to `5`")

        self._local_tax = local_tax

    @property
    def main_direct_deposit(self):
        """Gets the main_direct_deposit of this Employee.


        :return: The main_direct_deposit of this Employee.
        :rtype: EmployeeMainDirectDeposit
        """
        return self._main_direct_deposit

    @main_direct_deposit.setter
    def main_direct_deposit(self, main_direct_deposit):
        """Sets the main_direct_deposit of this Employee.


        :param main_direct_deposit: The main_direct_deposit of this Employee.
        :type main_direct_deposit: EmployeeMainDirectDeposit
        """

        self._main_direct_deposit = main_direct_deposit

    @property
    def marital_status(self):
        """Gets the marital_status of this Employee.

        Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. <br  />Max length: 10

        :return: The marital_status of this Employee.
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this Employee.

        Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. <br  />Max length: 10

        :param marital_status: The marital_status of this Employee.
        :type marital_status: str
        """

        self._marital_status = marital_status

    @property
    def middle_name(self):
        """Gets the middle_name of this Employee.

        Employee middle name.<br  /> Max length: 20

        :return: The middle_name of this Employee.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Employee.

        Employee middle name.<br  /> Max length: 20

        :param middle_name: The middle_name of this Employee.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def non_primary_state_tax(self):
        """Gets the non_primary_state_tax of this Employee.


        :return: The non_primary_state_tax of this Employee.
        :rtype: EmployeeNonPrimaryStateTax
        """
        return self._non_primary_state_tax

    @non_primary_state_tax.setter
    def non_primary_state_tax(self, non_primary_state_tax):
        """Sets the non_primary_state_tax of this Employee.


        :param non_primary_state_tax: The non_primary_state_tax of this Employee.
        :type non_primary_state_tax: EmployeeNonPrimaryStateTax
        """

        self._non_primary_state_tax = non_primary_state_tax

    @property
    def owner_percent(self):
        """Gets the owner_percent of this Employee.

        Percentage of employee's ownership in the company, entered as a whole number. <br  /> Decimal (12,2)

        :return: The owner_percent of this Employee.
        :rtype: float
        """
        return self._owner_percent

    @owner_percent.setter
    def owner_percent(self, owner_percent):
        """Sets the owner_percent of this Employee.

        Percentage of employee's ownership in the company, entered as a whole number. <br  /> Decimal (12,2)

        :param owner_percent: The owner_percent of this Employee.
        :type owner_percent: float
        """

        self._owner_percent = owner_percent

    @property
    def preferred_name(self):
        """Gets the preferred_name of this Employee.

        Employee preferred display name.<br  /> Max length: 20

        :return: The preferred_name of this Employee.
        :rtype: str
        """
        return self._preferred_name

    @preferred_name.setter
    def preferred_name(self, preferred_name):
        """Sets the preferred_name of this Employee.

        Employee preferred display name.<br  /> Max length: 20

        :param preferred_name: The preferred_name of this Employee.
        :type preferred_name: str
        """

        self._preferred_name = preferred_name

    @property
    def primary_pay_rate(self):
        """Gets the primary_pay_rate of this Employee.


        :return: The primary_pay_rate of this Employee.
        :rtype: EmployeePrimaryPayRate
        """
        return self._primary_pay_rate

    @primary_pay_rate.setter
    def primary_pay_rate(self, primary_pay_rate):
        """Sets the primary_pay_rate of this Employee.


        :param primary_pay_rate: The primary_pay_rate of this Employee.
        :type primary_pay_rate: EmployeePrimaryPayRate
        """

        self._primary_pay_rate = primary_pay_rate

    @property
    def primary_state_tax(self):
        """Gets the primary_state_tax of this Employee.


        :return: The primary_state_tax of this Employee.
        :rtype: EmployeePrimaryStateTax
        """
        return self._primary_state_tax

    @primary_state_tax.setter
    def primary_state_tax(self, primary_state_tax):
        """Sets the primary_state_tax of this Employee.


        :param primary_state_tax: The primary_state_tax of this Employee.
        :type primary_state_tax: EmployeePrimaryStateTax
        """

        self._primary_state_tax = primary_state_tax

    @property
    def prior_last_name(self):
        """Gets the prior_last_name of this Employee.

        Prior last name if applicable.<br  />Max length: 40

        :return: The prior_last_name of this Employee.
        :rtype: str
        """
        return self._prior_last_name

    @prior_last_name.setter
    def prior_last_name(self, prior_last_name):
        """Sets the prior_last_name of this Employee.

        Prior last name if applicable.<br  />Max length: 40

        :param prior_last_name: The prior_last_name of this Employee.
        :type prior_last_name: str
        """

        self._prior_last_name = prior_last_name

    @property
    def salutation(self):
        """Gets the salutation of this Employee.

        Employee preferred salutation. <br  />Max length: 10

        :return: The salutation of this Employee.
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this Employee.

        Employee preferred salutation. <br  />Max length: 10

        :param salutation: The salutation of this Employee.
        :type salutation: str
        """

        self._salutation = salutation

    @property
    def ssn(self):
        """Gets the ssn of this Employee.

        Employee social security number. Leave it blank if valid social security number not available. <br  />Max length: 11

        :return: The ssn of this Employee.
        :rtype: str
        """
        return self._ssn

    @ssn.setter
    def ssn(self, ssn):
        """Sets the ssn of this Employee.

        Employee social security number. Leave it blank if valid social security number not available. <br  />Max length: 11

        :param ssn: The ssn of this Employee.
        :type ssn: str
        """

        self._ssn = ssn

    @property
    def status(self):
        """Gets the status of this Employee.


        :return: The status of this Employee.
        :rtype: EmployeeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Employee.


        :param status: The status of this Employee.
        :type status: EmployeeStatus
        """

        self._status = status

    @property
    def suffix(self):
        """Gets the suffix of this Employee.

        Employee name suffix. Common values are *Jr, Sr, II*.<br  />Max length: 30

        :return: The suffix of this Employee.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Employee.

        Employee name suffix. Common values are *Jr, Sr, II*.<br  />Max length: 30

        :param suffix: The suffix of this Employee.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def tax_setup(self):
        """Gets the tax_setup of this Employee.


        :return: The tax_setup of this Employee.
        :rtype: EmployeeTaxSetup
        """
        return self._tax_setup

    @tax_setup.setter
    def tax_setup(self, tax_setup):
        """Sets the tax_setup of this Employee.


        :param tax_setup: The tax_setup of this Employee.
        :type tax_setup: EmployeeTaxSetup
        """

        self._tax_setup = tax_setup

    @property
    def veteran_description(self):
        """Gets the veteran_description of this Employee.

        Indicates if employee is a veteran.

        :return: The veteran_description of this Employee.
        :rtype: str
        """
        return self._veteran_description

    @veteran_description.setter
    def veteran_description(self, veteran_description):
        """Sets the veteran_description of this Employee.

        Indicates if employee is a veteran.

        :param veteran_description: The veteran_description of this Employee.
        :type veteran_description: str
        """

        self._veteran_description = veteran_description

    @property
    def web_time(self):
        """Gets the web_time of this Employee.


        :return: The web_time of this Employee.
        :rtype: EmployeeWebTime
        """
        return self._web_time

    @web_time.setter
    def web_time(self, web_time):
        """Sets the web_time of this Employee.


        :param web_time: The web_time of this Employee.
        :type web_time: EmployeeWebTime
        """

        self._web_time = web_time

    @property
    def work_address(self):
        """Gets the work_address of this Employee.


        :return: The work_address of this Employee.
        :rtype: EmployeeWorkAddress
        """
        return self._work_address

    @work_address.setter
    def work_address(self, work_address):
        """Sets the work_address of this Employee.


        :param work_address: The work_address of this Employee.
        :type work_address: EmployeeWorkAddress
        """

        self._work_address = work_address

    @property
    def work_eligibility(self):
        """Gets the work_eligibility of this Employee.


        :return: The work_eligibility of this Employee.
        :rtype: EmployeeWorkEligibility
        """
        return self._work_eligibility

    @work_eligibility.setter
    def work_eligibility(self, work_eligibility):
        """Sets the work_eligibility of this Employee.


        :param work_eligibility: The work_eligibility of this Employee.
        :type work_eligibility: EmployeeWorkEligibility
        """

        self._work_eligibility = work_eligibility
