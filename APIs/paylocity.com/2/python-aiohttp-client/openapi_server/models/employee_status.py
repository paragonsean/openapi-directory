# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmployeeStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjusted_seniority_date: str=None, change_reason: str=None, effective_date: str=None, employee_status: str=None, hire_date: str=None, is_eligible_for_rehire: bool=None, re_hire_date: str=None, status_type: str=None, termination_date: str=None):
        """EmployeeStatus - a model defined in OpenAPI

        :param adjusted_seniority_date: The adjusted_seniority_date of this EmployeeStatus.
        :param change_reason: The change_reason of this EmployeeStatus.
        :param effective_date: The effective_date of this EmployeeStatus.
        :param employee_status: The employee_status of this EmployeeStatus.
        :param hire_date: The hire_date of this EmployeeStatus.
        :param is_eligible_for_rehire: The is_eligible_for_rehire of this EmployeeStatus.
        :param re_hire_date: The re_hire_date of this EmployeeStatus.
        :param status_type: The status_type of this EmployeeStatus.
        :param termination_date: The termination_date of this EmployeeStatus.
        """
        self.openapi_types = {
            'adjusted_seniority_date': str,
            'change_reason': str,
            'effective_date': str,
            'employee_status': str,
            'hire_date': str,
            'is_eligible_for_rehire': bool,
            're_hire_date': str,
            'status_type': str,
            'termination_date': str
        }

        self.attribute_map = {
            'adjusted_seniority_date': 'adjustedSeniorityDate',
            'change_reason': 'changeReason',
            'effective_date': 'effectiveDate',
            'employee_status': 'employeeStatus',
            'hire_date': 'hireDate',
            'is_eligible_for_rehire': 'isEligibleForRehire',
            're_hire_date': 'reHireDate',
            'status_type': 'statusType',
            'termination_date': 'terminationDate'
        }

        self._adjusted_seniority_date = adjusted_seniority_date
        self._change_reason = change_reason
        self._effective_date = effective_date
        self._employee_status = employee_status
        self._hire_date = hire_date
        self._is_eligible_for_rehire = is_eligible_for_rehire
        self._re_hire_date = re_hire_date
        self._status_type = status_type
        self._termination_date = termination_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmployeeStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The employee_status of this EmployeeStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjusted_seniority_date(self):
        """Gets the adjusted_seniority_date of this EmployeeStatus.

        Adjusted seniority date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :return: The adjusted_seniority_date of this EmployeeStatus.
        :rtype: str
        """
        return self._adjusted_seniority_date

    @adjusted_seniority_date.setter
    def adjusted_seniority_date(self, adjusted_seniority_date):
        """Sets the adjusted_seniority_date of this EmployeeStatus.

        Adjusted seniority date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :param adjusted_seniority_date: The adjusted_seniority_date of this EmployeeStatus.
        :type adjusted_seniority_date: str
        """

        self._adjusted_seniority_date = adjusted_seniority_date

    @property
    def change_reason(self):
        """Gets the change_reason of this EmployeeStatus.

        Employee status change reason. Must match Company setup.<br  /> Max length: 15

        :return: The change_reason of this EmployeeStatus.
        :rtype: str
        """
        return self._change_reason

    @change_reason.setter
    def change_reason(self, change_reason):
        """Sets the change_reason of this EmployeeStatus.

        Employee status change reason. Must match Company setup.<br  /> Max length: 15

        :param change_reason: The change_reason of this EmployeeStatus.
        :type change_reason: str
        """

        self._change_reason = change_reason

    @property
    def effective_date(self):
        """Gets the effective_date of this EmployeeStatus.

        Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :return: The effective_date of this EmployeeStatus.
        :rtype: str
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this EmployeeStatus.

        Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :param effective_date: The effective_date of this EmployeeStatus.
        :type effective_date: str
        """

        self._effective_date = effective_date

    @property
    def employee_status(self):
        """Gets the employee_status of this EmployeeStatus.

        Employee current work status. Common values are *A* (Active), *L* (Leave of Absence), *T* (Terminated). <br  />Max length: 20

        :return: The employee_status of this EmployeeStatus.
        :rtype: str
        """
        return self._employee_status

    @employee_status.setter
    def employee_status(self, employee_status):
        """Sets the employee_status of this EmployeeStatus.

        Employee current work status. Common values are *A* (Active), *L* (Leave of Absence), *T* (Terminated). <br  />Max length: 20

        :param employee_status: The employee_status of this EmployeeStatus.
        :type employee_status: str
        """

        self._employee_status = employee_status

    @property
    def hire_date(self):
        """Gets the hire_date of this EmployeeStatus.

        Employee hired date. Updates to hire date are not allowed and will be ignored. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :return: The hire_date of this EmployeeStatus.
        :rtype: str
        """
        return self._hire_date

    @hire_date.setter
    def hire_date(self, hire_date):
        """Sets the hire_date of this EmployeeStatus.

        Employee hired date. Updates to hire date are not allowed and will be ignored. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :param hire_date: The hire_date of this EmployeeStatus.
        :type hire_date: str
        """

        self._hire_date = hire_date

    @property
    def is_eligible_for_rehire(self):
        """Gets the is_eligible_for_rehire of this EmployeeStatus.

        Indicates if employee eligible for rehire.

        :return: The is_eligible_for_rehire of this EmployeeStatus.
        :rtype: bool
        """
        return self._is_eligible_for_rehire

    @is_eligible_for_rehire.setter
    def is_eligible_for_rehire(self, is_eligible_for_rehire):
        """Sets the is_eligible_for_rehire of this EmployeeStatus.

        Indicates if employee eligible for rehire.

        :param is_eligible_for_rehire: The is_eligible_for_rehire of this EmployeeStatus.
        :type is_eligible_for_rehire: bool
        """

        self._is_eligible_for_rehire = is_eligible_for_rehire

    @property
    def re_hire_date(self):
        """Gets the re_hire_date of this EmployeeStatus.

        Rehire date if employee is rehired.  Updates to re-hire date are not allowed and will be ignored. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.

        :return: The re_hire_date of this EmployeeStatus.
        :rtype: str
        """
        return self._re_hire_date

    @re_hire_date.setter
    def re_hire_date(self, re_hire_date):
        """Sets the re_hire_date of this EmployeeStatus.

        Rehire date if employee is rehired.  Updates to re-hire date are not allowed and will be ignored. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.

        :param re_hire_date: The re_hire_date of this EmployeeStatus.
        :type re_hire_date: str
        """

        self._re_hire_date = re_hire_date

    @property
    def status_type(self):
        """Gets the status_type of this EmployeeStatus.

        The Status Type associated with the Employee Status code. Each Employee Status  code for a company is assigned to one of the Status Type values of  A (Active), L (Leave of Absence), T (Terminated).

        :return: The status_type of this EmployeeStatus.
        :rtype: str
        """
        return self._status_type

    @status_type.setter
    def status_type(self, status_type):
        """Sets the status_type of this EmployeeStatus.

        The Status Type associated with the Employee Status code. Each Employee Status  code for a company is assigned to one of the Status Type values of  A (Active), L (Leave of Absence), T (Terminated).

        :param status_type: The status_type of this EmployeeStatus.
        :type status_type: str
        """

        self._status_type = status_type

    @property
    def termination_date(self):
        """Gets the termination_date of this EmployeeStatus.

        Employee termination date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :return: The termination_date of this EmployeeStatus.
        :rtype: str
        """
        return self._termination_date

    @termination_date.setter
    def termination_date(self, termination_date):
        """Sets the termination_date of this EmployeeStatus.

        Employee termination date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :param termination_date: The termination_date of this EmployeeStatus.
        :type termination_date: str
        """

        self._termination_date = termination_date
