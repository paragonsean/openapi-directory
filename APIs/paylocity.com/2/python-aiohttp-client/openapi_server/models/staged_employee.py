# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.employee_custom_boolean_fields_inner import EmployeeCustomBooleanFieldsInner
from openapi_server.models.employee_custom_date_fields_inner import EmployeeCustomDateFieldsInner
from openapi_server.models.employee_custom_drop_down_fields_inner import EmployeeCustomDropDownFieldsInner
from openapi_server.models.employee_custom_number_fields_inner import EmployeeCustomNumberFieldsInner
from openapi_server.models.employee_custom_text_fields_inner import EmployeeCustomTextFieldsInner
from openapi_server.models.employee_local_tax_inner import EmployeeLocalTaxInner
from openapi_server.models.staged_employee_additional_direct_deposit_inner import StagedEmployeeAdditionalDirectDepositInner
from openapi_server.models.staged_employee_benefit_setup_inner import StagedEmployeeBenefitSetupInner
from openapi_server.models.staged_employee_department_position_inner import StagedEmployeeDepartmentPositionInner
from openapi_server.models.staged_employee_federal_tax_inner import StagedEmployeeFederalTaxInner
from openapi_server.models.staged_employee_home_address_inner import StagedEmployeeHomeAddressInner
from openapi_server.models.staged_employee_main_direct_deposit_inner import StagedEmployeeMainDirectDepositInner
from openapi_server.models.staged_employee_non_primary_state_tax_inner import StagedEmployeeNonPrimaryStateTaxInner
from openapi_server.models.staged_employee_primary_pay_rate_inner import StagedEmployeePrimaryPayRateInner
from openapi_server.models.staged_employee_primary_state_tax_inner import StagedEmployeePrimaryStateTaxInner
from openapi_server.models.staged_employee_status_inner import StagedEmployeeStatusInner
from openapi_server.models.staged_employee_web_time import StagedEmployeeWebTime
from openapi_server.models.staged_employee_work_address_inner import StagedEmployeeWorkAddressInner
from openapi_server.models.staged_employee_work_eligibility_inner import StagedEmployeeWorkEligibilityInner
from openapi_server import util


class StagedEmployee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_direct_deposit: List[StagedEmployeeAdditionalDirectDepositInner]=None, benefit_setup: List[StagedEmployeeBenefitSetupInner]=None, birth_date: str=None, custom_boolean_fields: List[EmployeeCustomBooleanFieldsInner]=None, custom_date_fields: List[EmployeeCustomDateFieldsInner]=None, custom_drop_down_fields: List[EmployeeCustomDropDownFieldsInner]=None, custom_number_fields: List[EmployeeCustomNumberFieldsInner]=None, custom_text_fields: List[EmployeeCustomTextFieldsInner]=None, department_position: List[StagedEmployeeDepartmentPositionInner]=None, disability_description: str=None, employee_id: str=None, ethnicity: str=None, federal_tax: List[StagedEmployeeFederalTaxInner]=None, first_name: str=None, fitw_exempt_reason: str=None, futa_exempt_reason: str=None, gender: str=None, home_address: List[StagedEmployeeHomeAddressInner]=None, is_employee943: bool=None, is_smoker: bool=None, last_name: str=None, local_tax: List[EmployeeLocalTaxInner]=None, main_direct_deposit: List[StagedEmployeeMainDirectDepositInner]=None, marital_status: str=None, med_exempt_reason: str=None, middle_name: str=None, non_primary_state_tax: List[StagedEmployeeNonPrimaryStateTaxInner]=None, preferred_name: str=None, primary_pay_rate: List[StagedEmployeePrimaryPayRateInner]=None, primary_state_tax: List[StagedEmployeePrimaryStateTaxInner]=None, prior_last_name: str=None, salutation: str=None, sitw_exempt_reason: str=None, ss_exempt_reason: str=None, ssn: str=None, status: List[StagedEmployeeStatusInner]=None, suffix: str=None, sui_exempt_reason: str=None, sui_state: str=None, tax_distribution_code1099_r: str=None, tax_form: str=None, veteran_description: str=None, web_time: StagedEmployeeWebTime=None, work_address: List[StagedEmployeeWorkAddressInner]=None, work_eligibility: List[StagedEmployeeWorkEligibilityInner]=None):
        """StagedEmployee - a model defined in OpenAPI

        :param additional_direct_deposit: The additional_direct_deposit of this StagedEmployee.
        :param benefit_setup: The benefit_setup of this StagedEmployee.
        :param birth_date: The birth_date of this StagedEmployee.
        :param custom_boolean_fields: The custom_boolean_fields of this StagedEmployee.
        :param custom_date_fields: The custom_date_fields of this StagedEmployee.
        :param custom_drop_down_fields: The custom_drop_down_fields of this StagedEmployee.
        :param custom_number_fields: The custom_number_fields of this StagedEmployee.
        :param custom_text_fields: The custom_text_fields of this StagedEmployee.
        :param department_position: The department_position of this StagedEmployee.
        :param disability_description: The disability_description of this StagedEmployee.
        :param employee_id: The employee_id of this StagedEmployee.
        :param ethnicity: The ethnicity of this StagedEmployee.
        :param federal_tax: The federal_tax of this StagedEmployee.
        :param first_name: The first_name of this StagedEmployee.
        :param fitw_exempt_reason: The fitw_exempt_reason of this StagedEmployee.
        :param futa_exempt_reason: The futa_exempt_reason of this StagedEmployee.
        :param gender: The gender of this StagedEmployee.
        :param home_address: The home_address of this StagedEmployee.
        :param is_employee943: The is_employee943 of this StagedEmployee.
        :param is_smoker: The is_smoker of this StagedEmployee.
        :param last_name: The last_name of this StagedEmployee.
        :param local_tax: The local_tax of this StagedEmployee.
        :param main_direct_deposit: The main_direct_deposit of this StagedEmployee.
        :param marital_status: The marital_status of this StagedEmployee.
        :param med_exempt_reason: The med_exempt_reason of this StagedEmployee.
        :param middle_name: The middle_name of this StagedEmployee.
        :param non_primary_state_tax: The non_primary_state_tax of this StagedEmployee.
        :param preferred_name: The preferred_name of this StagedEmployee.
        :param primary_pay_rate: The primary_pay_rate of this StagedEmployee.
        :param primary_state_tax: The primary_state_tax of this StagedEmployee.
        :param prior_last_name: The prior_last_name of this StagedEmployee.
        :param salutation: The salutation of this StagedEmployee.
        :param sitw_exempt_reason: The sitw_exempt_reason of this StagedEmployee.
        :param ss_exempt_reason: The ss_exempt_reason of this StagedEmployee.
        :param ssn: The ssn of this StagedEmployee.
        :param status: The status of this StagedEmployee.
        :param suffix: The suffix of this StagedEmployee.
        :param sui_exempt_reason: The sui_exempt_reason of this StagedEmployee.
        :param sui_state: The sui_state of this StagedEmployee.
        :param tax_distribution_code1099_r: The tax_distribution_code1099_r of this StagedEmployee.
        :param tax_form: The tax_form of this StagedEmployee.
        :param veteran_description: The veteran_description of this StagedEmployee.
        :param web_time: The web_time of this StagedEmployee.
        :param work_address: The work_address of this StagedEmployee.
        :param work_eligibility: The work_eligibility of this StagedEmployee.
        """
        self.openapi_types = {
            'additional_direct_deposit': List[StagedEmployeeAdditionalDirectDepositInner],
            'benefit_setup': List[StagedEmployeeBenefitSetupInner],
            'birth_date': str,
            'custom_boolean_fields': List[EmployeeCustomBooleanFieldsInner],
            'custom_date_fields': List[EmployeeCustomDateFieldsInner],
            'custom_drop_down_fields': List[EmployeeCustomDropDownFieldsInner],
            'custom_number_fields': List[EmployeeCustomNumberFieldsInner],
            'custom_text_fields': List[EmployeeCustomTextFieldsInner],
            'department_position': List[StagedEmployeeDepartmentPositionInner],
            'disability_description': str,
            'employee_id': str,
            'ethnicity': str,
            'federal_tax': List[StagedEmployeeFederalTaxInner],
            'first_name': str,
            'fitw_exempt_reason': str,
            'futa_exempt_reason': str,
            'gender': str,
            'home_address': List[StagedEmployeeHomeAddressInner],
            'is_employee943': bool,
            'is_smoker': bool,
            'last_name': str,
            'local_tax': List[EmployeeLocalTaxInner],
            'main_direct_deposit': List[StagedEmployeeMainDirectDepositInner],
            'marital_status': str,
            'med_exempt_reason': str,
            'middle_name': str,
            'non_primary_state_tax': List[StagedEmployeeNonPrimaryStateTaxInner],
            'preferred_name': str,
            'primary_pay_rate': List[StagedEmployeePrimaryPayRateInner],
            'primary_state_tax': List[StagedEmployeePrimaryStateTaxInner],
            'prior_last_name': str,
            'salutation': str,
            'sitw_exempt_reason': str,
            'ss_exempt_reason': str,
            'ssn': str,
            'status': List[StagedEmployeeStatusInner],
            'suffix': str,
            'sui_exempt_reason': str,
            'sui_state': str,
            'tax_distribution_code1099_r': str,
            'tax_form': str,
            'veteran_description': str,
            'web_time': StagedEmployeeWebTime,
            'work_address': List[StagedEmployeeWorkAddressInner],
            'work_eligibility': List[StagedEmployeeWorkEligibilityInner]
        }

        self.attribute_map = {
            'additional_direct_deposit': 'additionalDirectDeposit',
            'benefit_setup': 'benefitSetup',
            'birth_date': 'birthDate',
            'custom_boolean_fields': 'customBooleanFields',
            'custom_date_fields': 'customDateFields',
            'custom_drop_down_fields': 'customDropDownFields',
            'custom_number_fields': 'customNumberFields',
            'custom_text_fields': 'customTextFields',
            'department_position': 'departmentPosition',
            'disability_description': 'disabilityDescription',
            'employee_id': 'employeeId',
            'ethnicity': 'ethnicity',
            'federal_tax': 'federalTax',
            'first_name': 'firstName',
            'fitw_exempt_reason': 'fitwExemptReason',
            'futa_exempt_reason': 'futaExemptReason',
            'gender': 'gender',
            'home_address': 'homeAddress',
            'is_employee943': 'isEmployee943',
            'is_smoker': 'isSmoker',
            'last_name': 'lastName',
            'local_tax': 'localTax',
            'main_direct_deposit': 'mainDirectDeposit',
            'marital_status': 'maritalStatus',
            'med_exempt_reason': 'medExemptReason',
            'middle_name': 'middleName',
            'non_primary_state_tax': 'nonPrimaryStateTax',
            'preferred_name': 'preferredName',
            'primary_pay_rate': 'primaryPayRate',
            'primary_state_tax': 'primaryStateTax',
            'prior_last_name': 'priorLastName',
            'salutation': 'salutation',
            'sitw_exempt_reason': 'sitwExemptReason',
            'ss_exempt_reason': 'ssExemptReason',
            'ssn': 'ssn',
            'status': 'status',
            'suffix': 'suffix',
            'sui_exempt_reason': 'suiExemptReason',
            'sui_state': 'suiState',
            'tax_distribution_code1099_r': 'taxDistributionCode1099R',
            'tax_form': 'taxForm',
            'veteran_description': 'veteranDescription',
            'web_time': 'webTime',
            'work_address': 'workAddress',
            'work_eligibility': 'workEligibility'
        }

        self._additional_direct_deposit = additional_direct_deposit
        self._benefit_setup = benefit_setup
        self._birth_date = birth_date
        self._custom_boolean_fields = custom_boolean_fields
        self._custom_date_fields = custom_date_fields
        self._custom_drop_down_fields = custom_drop_down_fields
        self._custom_number_fields = custom_number_fields
        self._custom_text_fields = custom_text_fields
        self._department_position = department_position
        self._disability_description = disability_description
        self._employee_id = employee_id
        self._ethnicity = ethnicity
        self._federal_tax = federal_tax
        self._first_name = first_name
        self._fitw_exempt_reason = fitw_exempt_reason
        self._futa_exempt_reason = futa_exempt_reason
        self._gender = gender
        self._home_address = home_address
        self._is_employee943 = is_employee943
        self._is_smoker = is_smoker
        self._last_name = last_name
        self._local_tax = local_tax
        self._main_direct_deposit = main_direct_deposit
        self._marital_status = marital_status
        self._med_exempt_reason = med_exempt_reason
        self._middle_name = middle_name
        self._non_primary_state_tax = non_primary_state_tax
        self._preferred_name = preferred_name
        self._primary_pay_rate = primary_pay_rate
        self._primary_state_tax = primary_state_tax
        self._prior_last_name = prior_last_name
        self._salutation = salutation
        self._sitw_exempt_reason = sitw_exempt_reason
        self._ss_exempt_reason = ss_exempt_reason
        self._ssn = ssn
        self._status = status
        self._suffix = suffix
        self._sui_exempt_reason = sui_exempt_reason
        self._sui_state = sui_state
        self._tax_distribution_code1099_r = tax_distribution_code1099_r
        self._tax_form = tax_form
        self._veteran_description = veteran_description
        self._web_time = web_time
        self._work_address = work_address
        self._work_eligibility = work_eligibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StagedEmployee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stagedEmployee of this StagedEmployee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_direct_deposit(self):
        """Gets the additional_direct_deposit of this StagedEmployee.

        Add up to 19 direct deposit accounts in addition to the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with information provided on the request. GET API will not return direct deposit data.

        :return: The additional_direct_deposit of this StagedEmployee.
        :rtype: List[StagedEmployeeAdditionalDirectDepositInner]
        """
        return self._additional_direct_deposit

    @additional_direct_deposit.setter
    def additional_direct_deposit(self, additional_direct_deposit):
        """Sets the additional_direct_deposit of this StagedEmployee.

        Add up to 19 direct deposit accounts in addition to the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with information provided on the request. GET API will not return direct deposit data.

        :param additional_direct_deposit: The additional_direct_deposit of this StagedEmployee.
        :type additional_direct_deposit: List[StagedEmployeeAdditionalDirectDepositInner]
        """
        if additional_direct_deposit is not None and len(additional_direct_deposit) > 4:
            raise ValueError("Invalid value for `additional_direct_deposit`, number of items must be less than or equal to `4`")

        self._additional_direct_deposit = additional_direct_deposit

    @property
    def benefit_setup(self):
        """Gets the benefit_setup of this StagedEmployee.

        Add setup values used for employee benefits integration, insurance plan settings, and ACA reporting.

        :return: The benefit_setup of this StagedEmployee.
        :rtype: List[StagedEmployeeBenefitSetupInner]
        """
        return self._benefit_setup

    @benefit_setup.setter
    def benefit_setup(self, benefit_setup):
        """Sets the benefit_setup of this StagedEmployee.

        Add setup values used for employee benefits integration, insurance plan settings, and ACA reporting.

        :param benefit_setup: The benefit_setup of this StagedEmployee.
        :type benefit_setup: List[StagedEmployeeBenefitSetupInner]
        """
        if benefit_setup is not None and len(benefit_setup) > 1:
            raise ValueError("Invalid value for `benefit_setup`, number of items must be less than or equal to `1`")

        self._benefit_setup = benefit_setup

    @property
    def birth_date(self):
        """Gets the birth_date of this StagedEmployee.

        Employee birthdate. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :return: The birth_date of this StagedEmployee.
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this StagedEmployee.

        Employee birthdate. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :param birth_date: The birth_date of this StagedEmployee.
        :type birth_date: str
        """

        self._birth_date = birth_date

    @property
    def custom_boolean_fields(self):
        """Gets the custom_boolean_fields of this StagedEmployee.

        Up to 8 custom fields of boolean (checkbox) type value.

        :return: The custom_boolean_fields of this StagedEmployee.
        :rtype: List[EmployeeCustomBooleanFieldsInner]
        """
        return self._custom_boolean_fields

    @custom_boolean_fields.setter
    def custom_boolean_fields(self, custom_boolean_fields):
        """Sets the custom_boolean_fields of this StagedEmployee.

        Up to 8 custom fields of boolean (checkbox) type value.

        :param custom_boolean_fields: The custom_boolean_fields of this StagedEmployee.
        :type custom_boolean_fields: List[EmployeeCustomBooleanFieldsInner]
        """
        if custom_boolean_fields is not None and len(custom_boolean_fields) > 8:
            raise ValueError("Invalid value for `custom_boolean_fields`, number of items must be less than or equal to `8`")

        self._custom_boolean_fields = custom_boolean_fields

    @property
    def custom_date_fields(self):
        """Gets the custom_date_fields of this StagedEmployee.

        Up to 8 custom fields of the date type value.

        :return: The custom_date_fields of this StagedEmployee.
        :rtype: List[EmployeeCustomDateFieldsInner]
        """
        return self._custom_date_fields

    @custom_date_fields.setter
    def custom_date_fields(self, custom_date_fields):
        """Sets the custom_date_fields of this StagedEmployee.

        Up to 8 custom fields of the date type value.

        :param custom_date_fields: The custom_date_fields of this StagedEmployee.
        :type custom_date_fields: List[EmployeeCustomDateFieldsInner]
        """
        if custom_date_fields is not None and len(custom_date_fields) > 8:
            raise ValueError("Invalid value for `custom_date_fields`, number of items must be less than or equal to `8`")

        self._custom_date_fields = custom_date_fields

    @property
    def custom_drop_down_fields(self):
        """Gets the custom_drop_down_fields of this StagedEmployee.

        Up to 8 custom fields of the dropdown type value.

        :return: The custom_drop_down_fields of this StagedEmployee.
        :rtype: List[EmployeeCustomDropDownFieldsInner]
        """
        return self._custom_drop_down_fields

    @custom_drop_down_fields.setter
    def custom_drop_down_fields(self, custom_drop_down_fields):
        """Sets the custom_drop_down_fields of this StagedEmployee.

        Up to 8 custom fields of the dropdown type value.

        :param custom_drop_down_fields: The custom_drop_down_fields of this StagedEmployee.
        :type custom_drop_down_fields: List[EmployeeCustomDropDownFieldsInner]
        """
        if custom_drop_down_fields is not None and len(custom_drop_down_fields) > 8:
            raise ValueError("Invalid value for `custom_drop_down_fields`, number of items must be less than or equal to `8`")

        self._custom_drop_down_fields = custom_drop_down_fields

    @property
    def custom_number_fields(self):
        """Gets the custom_number_fields of this StagedEmployee.

        Up to 8 custom fields of numeric type value.

        :return: The custom_number_fields of this StagedEmployee.
        :rtype: List[EmployeeCustomNumberFieldsInner]
        """
        return self._custom_number_fields

    @custom_number_fields.setter
    def custom_number_fields(self, custom_number_fields):
        """Sets the custom_number_fields of this StagedEmployee.

        Up to 8 custom fields of numeric type value.

        :param custom_number_fields: The custom_number_fields of this StagedEmployee.
        :type custom_number_fields: List[EmployeeCustomNumberFieldsInner]
        """
        if custom_number_fields is not None and len(custom_number_fields) > 8:
            raise ValueError("Invalid value for `custom_number_fields`, number of items must be less than or equal to `8`")

        self._custom_number_fields = custom_number_fields

    @property
    def custom_text_fields(self):
        """Gets the custom_text_fields of this StagedEmployee.

        Up to 8 custom fields of text type value.

        :return: The custom_text_fields of this StagedEmployee.
        :rtype: List[EmployeeCustomTextFieldsInner]
        """
        return self._custom_text_fields

    @custom_text_fields.setter
    def custom_text_fields(self, custom_text_fields):
        """Sets the custom_text_fields of this StagedEmployee.

        Up to 8 custom fields of text type value.

        :param custom_text_fields: The custom_text_fields of this StagedEmployee.
        :type custom_text_fields: List[EmployeeCustomTextFieldsInner]
        """
        if custom_text_fields is not None and len(custom_text_fields) > 8:
            raise ValueError("Invalid value for `custom_text_fields`, number of items must be less than or equal to `8`")

        self._custom_text_fields = custom_text_fields

    @property
    def department_position(self):
        """Gets the department_position of this StagedEmployee.

        Add home department cost center, position, supervisor, reviewer, employment type, EEO class, pay settings, and union information.

        :return: The department_position of this StagedEmployee.
        :rtype: List[StagedEmployeeDepartmentPositionInner]
        """
        return self._department_position

    @department_position.setter
    def department_position(self, department_position):
        """Sets the department_position of this StagedEmployee.

        Add home department cost center, position, supervisor, reviewer, employment type, EEO class, pay settings, and union information.

        :param department_position: The department_position of this StagedEmployee.
        :type department_position: List[StagedEmployeeDepartmentPositionInner]
        """
        if department_position is not None and len(department_position) > 1:
            raise ValueError("Invalid value for `department_position`, number of items must be less than or equal to `1`")

        self._department_position = department_position

    @property
    def disability_description(self):
        """Gets the disability_description of this StagedEmployee.

        Indicates if employee has disability status.

        :return: The disability_description of this StagedEmployee.
        :rtype: str
        """
        return self._disability_description

    @disability_description.setter
    def disability_description(self, disability_description):
        """Sets the disability_description of this StagedEmployee.

        Indicates if employee has disability status.

        :param disability_description: The disability_description of this StagedEmployee.
        :type disability_description: str
        """

        self._disability_description = disability_description

    @property
    def employee_id(self):
        """Gets the employee_id of this StagedEmployee.

        Leave blank to have Web Pay automatically assign the next available employee ID.<br  /> Max length: 10

        :return: The employee_id of this StagedEmployee.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this StagedEmployee.

        Leave blank to have Web Pay automatically assign the next available employee ID.<br  /> Max length: 10

        :param employee_id: The employee_id of this StagedEmployee.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def ethnicity(self):
        """Gets the ethnicity of this StagedEmployee.

        Employee ethnicity.<br  /> Max length: 10

        :return: The ethnicity of this StagedEmployee.
        :rtype: str
        """
        return self._ethnicity

    @ethnicity.setter
    def ethnicity(self, ethnicity):
        """Sets the ethnicity of this StagedEmployee.

        Employee ethnicity.<br  /> Max length: 10

        :param ethnicity: The ethnicity of this StagedEmployee.
        :type ethnicity: str
        """

        self._ethnicity = ethnicity

    @property
    def federal_tax(self):
        """Gets the federal_tax of this StagedEmployee.

        Add federal tax amount type (taxCalculationCode), amount or percentage, filing status, and exemptions.

        :return: The federal_tax of this StagedEmployee.
        :rtype: List[StagedEmployeeFederalTaxInner]
        """
        return self._federal_tax

    @federal_tax.setter
    def federal_tax(self, federal_tax):
        """Sets the federal_tax of this StagedEmployee.

        Add federal tax amount type (taxCalculationCode), amount or percentage, filing status, and exemptions.

        :param federal_tax: The federal_tax of this StagedEmployee.
        :type federal_tax: List[StagedEmployeeFederalTaxInner]
        """
        if federal_tax is not None and len(federal_tax) > 1:
            raise ValueError("Invalid value for `federal_tax`, number of items must be less than or equal to `1`")

        self._federal_tax = federal_tax

    @property
    def first_name(self):
        """Gets the first_name of this StagedEmployee.

        Employee first name. <br  />Max length: 40

        :return: The first_name of this StagedEmployee.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this StagedEmployee.

        Employee first name. <br  />Max length: 40

        :param first_name: The first_name of this StagedEmployee.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def fitw_exempt_reason(self):
        """Gets the fitw_exempt_reason of this StagedEmployee.

        Reason code for FITW exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30

        :return: The fitw_exempt_reason of this StagedEmployee.
        :rtype: str
        """
        return self._fitw_exempt_reason

    @fitw_exempt_reason.setter
    def fitw_exempt_reason(self, fitw_exempt_reason):
        """Sets the fitw_exempt_reason of this StagedEmployee.

        Reason code for FITW exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30

        :param fitw_exempt_reason: The fitw_exempt_reason of this StagedEmployee.
        :type fitw_exempt_reason: str
        """

        self._fitw_exempt_reason = fitw_exempt_reason

    @property
    def futa_exempt_reason(self):
        """Gets the futa_exempt_reason of this StagedEmployee.

        Reason code for FUTA exemption. Common values are *501* (5019c)(3) Organization), *IC* (Independent Contractor).<br  /> Max length: 30

        :return: The futa_exempt_reason of this StagedEmployee.
        :rtype: str
        """
        return self._futa_exempt_reason

    @futa_exempt_reason.setter
    def futa_exempt_reason(self, futa_exempt_reason):
        """Sets the futa_exempt_reason of this StagedEmployee.

        Reason code for FUTA exemption. Common values are *501* (5019c)(3) Organization), *IC* (Independent Contractor).<br  /> Max length: 30

        :param futa_exempt_reason: The futa_exempt_reason of this StagedEmployee.
        :type futa_exempt_reason: str
        """

        self._futa_exempt_reason = futa_exempt_reason

    @property
    def gender(self):
        """Gets the gender of this StagedEmployee.

        Employee gender. Common values *M* (Male), *F* (Female). <br  />Max length: 1

        :return: The gender of this StagedEmployee.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this StagedEmployee.

        Employee gender. Common values *M* (Male), *F* (Female). <br  />Max length: 1

        :param gender: The gender of this StagedEmployee.
        :type gender: str
        """

        self._gender = gender

    @property
    def home_address(self):
        """Gets the home_address of this StagedEmployee.

        Add employee's home address, personal phone numbers, and personal email.

        :return: The home_address of this StagedEmployee.
        :rtype: List[StagedEmployeeHomeAddressInner]
        """
        return self._home_address

    @home_address.setter
    def home_address(self, home_address):
        """Sets the home_address of this StagedEmployee.

        Add employee's home address, personal phone numbers, and personal email.

        :param home_address: The home_address of this StagedEmployee.
        :type home_address: List[StagedEmployeeHomeAddressInner]
        """
        if home_address is not None and len(home_address) > 1:
            raise ValueError("Invalid value for `home_address`, number of items must be less than or equal to `1`")

        self._home_address = home_address

    @property
    def is_employee943(self):
        """Gets the is_employee943 of this StagedEmployee.

        Indicates if employee in agriculture or farming.

        :return: The is_employee943 of this StagedEmployee.
        :rtype: bool
        """
        return self._is_employee943

    @is_employee943.setter
    def is_employee943(self, is_employee943):
        """Sets the is_employee943 of this StagedEmployee.

        Indicates if employee in agriculture or farming.

        :param is_employee943: The is_employee943 of this StagedEmployee.
        :type is_employee943: bool
        """

        self._is_employee943 = is_employee943

    @property
    def is_smoker(self):
        """Gets the is_smoker of this StagedEmployee.

        Indicates if employee is a smoker.

        :return: The is_smoker of this StagedEmployee.
        :rtype: bool
        """
        return self._is_smoker

    @is_smoker.setter
    def is_smoker(self, is_smoker):
        """Sets the is_smoker of this StagedEmployee.

        Indicates if employee is a smoker.

        :param is_smoker: The is_smoker of this StagedEmployee.
        :type is_smoker: bool
        """

        self._is_smoker = is_smoker

    @property
    def last_name(self):
        """Gets the last_name of this StagedEmployee.

        Employee last name. <br  />Max length: 40

        :return: The last_name of this StagedEmployee.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this StagedEmployee.

        Employee last name. <br  />Max length: 40

        :param last_name: The last_name of this StagedEmployee.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def local_tax(self):
        """Gets the local_tax of this StagedEmployee.

        Add local tax code, filing status, and exemptions including PA-PSD taxes.

        :return: The local_tax of this StagedEmployee.
        :rtype: List[EmployeeLocalTaxInner]
        """
        return self._local_tax

    @local_tax.setter
    def local_tax(self, local_tax):
        """Sets the local_tax of this StagedEmployee.

        Add local tax code, filing status, and exemptions including PA-PSD taxes.

        :param local_tax: The local_tax of this StagedEmployee.
        :type local_tax: List[EmployeeLocalTaxInner]
        """
        if local_tax is not None and len(local_tax) > 5:
            raise ValueError("Invalid value for `local_tax`, number of items must be less than or equal to `5`")

        self._local_tax = local_tax

    @property
    def main_direct_deposit(self):
        """Gets the main_direct_deposit of this StagedEmployee.

        Add the main direct deposit account. After deposits are made to any additional direct deposit accounts, the remaining net check is deposited in the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with what is provided on the request. GET API will not return direct deposit data.

        :return: The main_direct_deposit of this StagedEmployee.
        :rtype: List[StagedEmployeeMainDirectDepositInner]
        """
        return self._main_direct_deposit

    @main_direct_deposit.setter
    def main_direct_deposit(self, main_direct_deposit):
        """Sets the main_direct_deposit of this StagedEmployee.

        Add the main direct deposit account. After deposits are made to any additional direct deposit accounts, the remaining net check is deposited in the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with what is provided on the request. GET API will not return direct deposit data.

        :param main_direct_deposit: The main_direct_deposit of this StagedEmployee.
        :type main_direct_deposit: List[StagedEmployeeMainDirectDepositInner]
        """
        if main_direct_deposit is not None and len(main_direct_deposit) > 1:
            raise ValueError("Invalid value for `main_direct_deposit`, number of items must be less than or equal to `1`")

        self._main_direct_deposit = main_direct_deposit

    @property
    def marital_status(self):
        """Gets the marital_status of this StagedEmployee.

        Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. <br  />Max length: 10

        :return: The marital_status of this StagedEmployee.
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this StagedEmployee.

        Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. <br  />Max length: 10

        :param marital_status: The marital_status of this StagedEmployee.
        :type marital_status: str
        """

        self._marital_status = marital_status

    @property
    def med_exempt_reason(self):
        """Gets the med_exempt_reason of this StagedEmployee.

        Reason code for Medicare exemption. Common values are *501* (5019c)(3) Organization), *IC* (Independent Contractor).<br  /> Max length: 30

        :return: The med_exempt_reason of this StagedEmployee.
        :rtype: str
        """
        return self._med_exempt_reason

    @med_exempt_reason.setter
    def med_exempt_reason(self, med_exempt_reason):
        """Sets the med_exempt_reason of this StagedEmployee.

        Reason code for Medicare exemption. Common values are *501* (5019c)(3) Organization), *IC* (Independent Contractor).<br  /> Max length: 30

        :param med_exempt_reason: The med_exempt_reason of this StagedEmployee.
        :type med_exempt_reason: str
        """

        self._med_exempt_reason = med_exempt_reason

    @property
    def middle_name(self):
        """Gets the middle_name of this StagedEmployee.

        Employee middle name.<br  /> Max length: 20

        :return: The middle_name of this StagedEmployee.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this StagedEmployee.

        Employee middle name.<br  /> Max length: 20

        :param middle_name: The middle_name of this StagedEmployee.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def non_primary_state_tax(self):
        """Gets the non_primary_state_tax of this StagedEmployee.

        Add non-primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, supplemental check (specialCheckCalc), and reciprocity code information.

        :return: The non_primary_state_tax of this StagedEmployee.
        :rtype: List[StagedEmployeeNonPrimaryStateTaxInner]
        """
        return self._non_primary_state_tax

    @non_primary_state_tax.setter
    def non_primary_state_tax(self, non_primary_state_tax):
        """Sets the non_primary_state_tax of this StagedEmployee.

        Add non-primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, supplemental check (specialCheckCalc), and reciprocity code information.

        :param non_primary_state_tax: The non_primary_state_tax of this StagedEmployee.
        :type non_primary_state_tax: List[StagedEmployeeNonPrimaryStateTaxInner]
        """
        if non_primary_state_tax is not None and len(non_primary_state_tax) > 1:
            raise ValueError("Invalid value for `non_primary_state_tax`, number of items must be less than or equal to `1`")

        self._non_primary_state_tax = non_primary_state_tax

    @property
    def preferred_name(self):
        """Gets the preferred_name of this StagedEmployee.

        Employee preferred display name.<br  /> Max length: 20

        :return: The preferred_name of this StagedEmployee.
        :rtype: str
        """
        return self._preferred_name

    @preferred_name.setter
    def preferred_name(self, preferred_name):
        """Sets the preferred_name of this StagedEmployee.

        Employee preferred display name.<br  /> Max length: 20

        :param preferred_name: The preferred_name of this StagedEmployee.
        :type preferred_name: str
        """

        self._preferred_name = preferred_name

    @property
    def primary_pay_rate(self):
        """Gets the primary_pay_rate of this StagedEmployee.

        Add hourly or salary pay rate, effective date, and pay frequency.

        :return: The primary_pay_rate of this StagedEmployee.
        :rtype: List[StagedEmployeePrimaryPayRateInner]
        """
        return self._primary_pay_rate

    @primary_pay_rate.setter
    def primary_pay_rate(self, primary_pay_rate):
        """Sets the primary_pay_rate of this StagedEmployee.

        Add hourly or salary pay rate, effective date, and pay frequency.

        :param primary_pay_rate: The primary_pay_rate of this StagedEmployee.
        :type primary_pay_rate: List[StagedEmployeePrimaryPayRateInner]
        """
        if primary_pay_rate is not None and len(primary_pay_rate) > 1:
            raise ValueError("Invalid value for `primary_pay_rate`, number of items must be less than or equal to `1`")

        self._primary_pay_rate = primary_pay_rate

    @property
    def primary_state_tax(self):
        """Gets the primary_state_tax of this StagedEmployee.

        Add primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, and supplemental check (specialCheckCalc) information. Only one primary state is allowed.

        :return: The primary_state_tax of this StagedEmployee.
        :rtype: List[StagedEmployeePrimaryStateTaxInner]
        """
        return self._primary_state_tax

    @primary_state_tax.setter
    def primary_state_tax(self, primary_state_tax):
        """Sets the primary_state_tax of this StagedEmployee.

        Add primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, and supplemental check (specialCheckCalc) information. Only one primary state is allowed.

        :param primary_state_tax: The primary_state_tax of this StagedEmployee.
        :type primary_state_tax: List[StagedEmployeePrimaryStateTaxInner]
        """
        if primary_state_tax is not None and len(primary_state_tax) > 1:
            raise ValueError("Invalid value for `primary_state_tax`, number of items must be less than or equal to `1`")

        self._primary_state_tax = primary_state_tax

    @property
    def prior_last_name(self):
        """Gets the prior_last_name of this StagedEmployee.

        Prior last name if applicable.<br  />Max length: 40

        :return: The prior_last_name of this StagedEmployee.
        :rtype: str
        """
        return self._prior_last_name

    @prior_last_name.setter
    def prior_last_name(self, prior_last_name):
        """Sets the prior_last_name of this StagedEmployee.

        Prior last name if applicable.<br  />Max length: 40

        :param prior_last_name: The prior_last_name of this StagedEmployee.
        :type prior_last_name: str
        """

        self._prior_last_name = prior_last_name

    @property
    def salutation(self):
        """Gets the salutation of this StagedEmployee.

        Employee preferred salutation. <br  />Max length: 10

        :return: The salutation of this StagedEmployee.
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this StagedEmployee.

        Employee preferred salutation. <br  />Max length: 10

        :param salutation: The salutation of this StagedEmployee.
        :type salutation: str
        """

        self._salutation = salutation

    @property
    def sitw_exempt_reason(self):
        """Gets the sitw_exempt_reason of this StagedEmployee.

        Reason code for SITW exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30

        :return: The sitw_exempt_reason of this StagedEmployee.
        :rtype: str
        """
        return self._sitw_exempt_reason

    @sitw_exempt_reason.setter
    def sitw_exempt_reason(self, sitw_exempt_reason):
        """Sets the sitw_exempt_reason of this StagedEmployee.

        Reason code for SITW exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30

        :param sitw_exempt_reason: The sitw_exempt_reason of this StagedEmployee.
        :type sitw_exempt_reason: str
        """

        self._sitw_exempt_reason = sitw_exempt_reason

    @property
    def ss_exempt_reason(self):
        """Gets the ss_exempt_reason of this StagedEmployee.

        Reason code for Social Security exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30

        :return: The ss_exempt_reason of this StagedEmployee.
        :rtype: str
        """
        return self._ss_exempt_reason

    @ss_exempt_reason.setter
    def ss_exempt_reason(self, ss_exempt_reason):
        """Sets the ss_exempt_reason of this StagedEmployee.

        Reason code for Social Security exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30

        :param ss_exempt_reason: The ss_exempt_reason of this StagedEmployee.
        :type ss_exempt_reason: str
        """

        self._ss_exempt_reason = ss_exempt_reason

    @property
    def ssn(self):
        """Gets the ssn of this StagedEmployee.

        Employee social security number. Leave it blank if valid social security number not available. <br  />Max length: 11

        :return: The ssn of this StagedEmployee.
        :rtype: str
        """
        return self._ssn

    @ssn.setter
    def ssn(self, ssn):
        """Sets the ssn of this StagedEmployee.

        Employee social security number. Leave it blank if valid social security number not available. <br  />Max length: 11

        :param ssn: The ssn of this StagedEmployee.
        :type ssn: str
        """

        self._ssn = ssn

    @property
    def status(self):
        """Gets the status of this StagedEmployee.

        Add employee status, change reason, effective date, and adjusted seniority date. Note that companies that are still in Implementation cannot hire future employees.

        :return: The status of this StagedEmployee.
        :rtype: List[StagedEmployeeStatusInner]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StagedEmployee.

        Add employee status, change reason, effective date, and adjusted seniority date. Note that companies that are still in Implementation cannot hire future employees.

        :param status: The status of this StagedEmployee.
        :type status: List[StagedEmployeeStatusInner]
        """
        if status is not None and len(status) > 1:
            raise ValueError("Invalid value for `status`, number of items must be less than or equal to `1`")

        self._status = status

    @property
    def suffix(self):
        """Gets the suffix of this StagedEmployee.

        Employee name suffix. Common values are *Jr, Sr, II*.<br  />Max length: 30

        :return: The suffix of this StagedEmployee.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this StagedEmployee.

        Employee name suffix. Common values are *Jr, Sr, II*.<br  />Max length: 30

        :param suffix: The suffix of this StagedEmployee.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def sui_exempt_reason(self):
        """Gets the sui_exempt_reason of this StagedEmployee.

        Reason code for SUI exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30

        :return: The sui_exempt_reason of this StagedEmployee.
        :rtype: str
        """
        return self._sui_exempt_reason

    @sui_exempt_reason.setter
    def sui_exempt_reason(self, sui_exempt_reason):
        """Sets the sui_exempt_reason of this StagedEmployee.

        Reason code for SUI exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30

        :param sui_exempt_reason: The sui_exempt_reason of this StagedEmployee.
        :type sui_exempt_reason: str
        """

        self._sui_exempt_reason = sui_exempt_reason

    @property
    def sui_state(self):
        """Gets the sui_state of this StagedEmployee.

        Employee SUI (State Unemployment Insurance) state. <br  />Max length: 2

        :return: The sui_state of this StagedEmployee.
        :rtype: str
        """
        return self._sui_state

    @sui_state.setter
    def sui_state(self, sui_state):
        """Sets the sui_state of this StagedEmployee.

        Employee SUI (State Unemployment Insurance) state. <br  />Max length: 2

        :param sui_state: The sui_state of this StagedEmployee.
        :type sui_state: str
        """

        self._sui_state = sui_state

    @property
    def tax_distribution_code1099_r(self):
        """Gets the tax_distribution_code1099_r of this StagedEmployee.

        Employee 1099R distribution code. Common values are *7* (Normal Distribution), *F* (Charitable Gift Annuity). <br  />Max length: 1

        :return: The tax_distribution_code1099_r of this StagedEmployee.
        :rtype: str
        """
        return self._tax_distribution_code1099_r

    @tax_distribution_code1099_r.setter
    def tax_distribution_code1099_r(self, tax_distribution_code1099_r):
        """Sets the tax_distribution_code1099_r of this StagedEmployee.

        Employee 1099R distribution code. Common values are *7* (Normal Distribution), *F* (Charitable Gift Annuity). <br  />Max length: 1

        :param tax_distribution_code1099_r: The tax_distribution_code1099_r of this StagedEmployee.
        :type tax_distribution_code1099_r: str
        """

        self._tax_distribution_code1099_r = tax_distribution_code1099_r

    @property
    def tax_form(self):
        """Gets the tax_form of this StagedEmployee.

        Employee tax form for reporting income. Valid values are *W2, 1099M, 1099R*. Default is W2. <br  />Max length: 15

        :return: The tax_form of this StagedEmployee.
        :rtype: str
        """
        return self._tax_form

    @tax_form.setter
    def tax_form(self, tax_form):
        """Sets the tax_form of this StagedEmployee.

        Employee tax form for reporting income. Valid values are *W2, 1099M, 1099R*. Default is W2. <br  />Max length: 15

        :param tax_form: The tax_form of this StagedEmployee.
        :type tax_form: str
        """

        self._tax_form = tax_form

    @property
    def veteran_description(self):
        """Gets the veteran_description of this StagedEmployee.

        Indicates if employee is a veteran.

        :return: The veteran_description of this StagedEmployee.
        :rtype: str
        """
        return self._veteran_description

    @veteran_description.setter
    def veteran_description(self, veteran_description):
        """Sets the veteran_description of this StagedEmployee.

        Indicates if employee is a veteran.

        :param veteran_description: The veteran_description of this StagedEmployee.
        :type veteran_description: str
        """

        self._veteran_description = veteran_description

    @property
    def web_time(self):
        """Gets the web_time of this StagedEmployee.


        :return: The web_time of this StagedEmployee.
        :rtype: StagedEmployeeWebTime
        """
        return self._web_time

    @web_time.setter
    def web_time(self, web_time):
        """Sets the web_time of this StagedEmployee.


        :param web_time: The web_time of this StagedEmployee.
        :type web_time: StagedEmployeeWebTime
        """

        self._web_time = web_time

    @property
    def work_address(self):
        """Gets the work_address of this StagedEmployee.

        Add employee's work address, phone numbers, and email. Work Location drop down field is not included.

        :return: The work_address of this StagedEmployee.
        :rtype: List[StagedEmployeeWorkAddressInner]
        """
        return self._work_address

    @work_address.setter
    def work_address(self, work_address):
        """Sets the work_address of this StagedEmployee.

        Add employee's work address, phone numbers, and email. Work Location drop down field is not included.

        :param work_address: The work_address of this StagedEmployee.
        :type work_address: List[StagedEmployeeWorkAddressInner]
        """
        if work_address is not None and len(work_address) > 1:
            raise ValueError("Invalid value for `work_address`, number of items must be less than or equal to `1`")

        self._work_address = work_address

    @property
    def work_eligibility(self):
        """Gets the work_eligibility of this StagedEmployee.

        Add I-9 work authorization information.

        :return: The work_eligibility of this StagedEmployee.
        :rtype: List[StagedEmployeeWorkEligibilityInner]
        """
        return self._work_eligibility

    @work_eligibility.setter
    def work_eligibility(self, work_eligibility):
        """Sets the work_eligibility of this StagedEmployee.

        Add I-9 work authorization information.

        :param work_eligibility: The work_eligibility of this StagedEmployee.
        :type work_eligibility: List[StagedEmployeeWorkEligibilityInner]
        """
        if work_eligibility is not None and len(work_eligibility) > 1:
            raise ValueError("Invalid value for `work_eligibility`, number of items must be less than or equal to `1`")

        self._work_eligibility = work_eligibility
