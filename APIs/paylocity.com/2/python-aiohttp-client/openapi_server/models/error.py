# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_options_inner import ErrorOptionsInner
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, message: str=None, options: List[ErrorOptionsInner]=None, path: str=None):
        """Error - a model defined in OpenAPI

        :param _field: The _field of this Error.
        :param message: The message of this Error.
        :param options: The options of this Error.
        :param path: The path of this Error.
        """
        self.openapi_types = {
            '_field': str,
            'message': str,
            'options': List[ErrorOptionsInner],
            'path': str
        }

        self.attribute_map = {
            '_field': 'field',
            'message': 'message',
            'options': 'options',
            'path': 'path'
        }

        self.__field = _field
        self._message = message
        self._options = options
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this Error.

        The name of the field, or property in the request message that contains an error.

        :return: The _field of this Error.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this Error.

        The name of the field, or property in the request message that contains an error.

        :param _field: The _field of this Error.
        :type _field: str
        """

        self.__field = _field

    @property
    def message(self):
        """Gets the message of this Error.

        The error message.

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        The error message.

        :param message: The message of this Error.
        :type message: str
        """

        self._message = message

    @property
    def options(self):
        """Gets the options of this Error.

        A list of options associated with this error. These options may indicate valid values for the field, or property that contains an error.

        :return: The options of this Error.
        :rtype: List[ErrorOptionsInner]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Error.

        A list of options associated with this error. These options may indicate valid values for the field, or property that contains an error.

        :param options: The options of this Error.
        :type options: List[ErrorOptionsInner]
        """

        self._options = options

    @property
    def path(self):
        """Gets the path of this Error.

        The JSON path of the field, or property, that contains an error in the request message.

        :return: The path of this Error.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Error.

        The JSON path of the field, or property, that contains an error in the request message.

        :param path: The path of this Error.
        :type path: str
        """

        self._path = path
