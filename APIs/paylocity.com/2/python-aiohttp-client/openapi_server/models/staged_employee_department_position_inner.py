# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StagedEmployeeDepartmentPositionInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change_reason: str=None, clock_badge_number: str=None, cost_center1: str=None, cost_center2: str=None, cost_center3: str=None, effective_date: str=None, employee_type: str=None, equal_employment_opportunity_class: str=None, is_minimum_wage_exempt: bool=None, is_overtime_exempt: bool=None, is_supervisor_reviewer: bool=None, is_union_dues_collected: bool=None, is_union_initiation_collected: bool=None, job_title: str=None, pay_group: str=None, position_code: str=None, shift: str=None, supervisor_company_number: str=None, supervisor_employee_id: str=None, tipped: str=None, union_affiliation_date: str=None, union_code: str=None, union_position: str=None, workers_compensation: str=None):
        """StagedEmployeeDepartmentPositionInner - a model defined in OpenAPI

        :param change_reason: The change_reason of this StagedEmployeeDepartmentPositionInner.
        :param clock_badge_number: The clock_badge_number of this StagedEmployeeDepartmentPositionInner.
        :param cost_center1: The cost_center1 of this StagedEmployeeDepartmentPositionInner.
        :param cost_center2: The cost_center2 of this StagedEmployeeDepartmentPositionInner.
        :param cost_center3: The cost_center3 of this StagedEmployeeDepartmentPositionInner.
        :param effective_date: The effective_date of this StagedEmployeeDepartmentPositionInner.
        :param employee_type: The employee_type of this StagedEmployeeDepartmentPositionInner.
        :param equal_employment_opportunity_class: The equal_employment_opportunity_class of this StagedEmployeeDepartmentPositionInner.
        :param is_minimum_wage_exempt: The is_minimum_wage_exempt of this StagedEmployeeDepartmentPositionInner.
        :param is_overtime_exempt: The is_overtime_exempt of this StagedEmployeeDepartmentPositionInner.
        :param is_supervisor_reviewer: The is_supervisor_reviewer of this StagedEmployeeDepartmentPositionInner.
        :param is_union_dues_collected: The is_union_dues_collected of this StagedEmployeeDepartmentPositionInner.
        :param is_union_initiation_collected: The is_union_initiation_collected of this StagedEmployeeDepartmentPositionInner.
        :param job_title: The job_title of this StagedEmployeeDepartmentPositionInner.
        :param pay_group: The pay_group of this StagedEmployeeDepartmentPositionInner.
        :param position_code: The position_code of this StagedEmployeeDepartmentPositionInner.
        :param shift: The shift of this StagedEmployeeDepartmentPositionInner.
        :param supervisor_company_number: The supervisor_company_number of this StagedEmployeeDepartmentPositionInner.
        :param supervisor_employee_id: The supervisor_employee_id of this StagedEmployeeDepartmentPositionInner.
        :param tipped: The tipped of this StagedEmployeeDepartmentPositionInner.
        :param union_affiliation_date: The union_affiliation_date of this StagedEmployeeDepartmentPositionInner.
        :param union_code: The union_code of this StagedEmployeeDepartmentPositionInner.
        :param union_position: The union_position of this StagedEmployeeDepartmentPositionInner.
        :param workers_compensation: The workers_compensation of this StagedEmployeeDepartmentPositionInner.
        """
        self.openapi_types = {
            'change_reason': str,
            'clock_badge_number': str,
            'cost_center1': str,
            'cost_center2': str,
            'cost_center3': str,
            'effective_date': str,
            'employee_type': str,
            'equal_employment_opportunity_class': str,
            'is_minimum_wage_exempt': bool,
            'is_overtime_exempt': bool,
            'is_supervisor_reviewer': bool,
            'is_union_dues_collected': bool,
            'is_union_initiation_collected': bool,
            'job_title': str,
            'pay_group': str,
            'position_code': str,
            'shift': str,
            'supervisor_company_number': str,
            'supervisor_employee_id': str,
            'tipped': str,
            'union_affiliation_date': str,
            'union_code': str,
            'union_position': str,
            'workers_compensation': str
        }

        self.attribute_map = {
            'change_reason': 'changeReason',
            'clock_badge_number': 'clockBadgeNumber',
            'cost_center1': 'costCenter1',
            'cost_center2': 'costCenter2',
            'cost_center3': 'costCenter3',
            'effective_date': 'effectiveDate',
            'employee_type': 'employeeType',
            'equal_employment_opportunity_class': 'equalEmploymentOpportunityClass',
            'is_minimum_wage_exempt': 'isMinimumWageExempt',
            'is_overtime_exempt': 'isOvertimeExempt',
            'is_supervisor_reviewer': 'isSupervisorReviewer',
            'is_union_dues_collected': 'isUnionDuesCollected',
            'is_union_initiation_collected': 'isUnionInitiationCollected',
            'job_title': 'jobTitle',
            'pay_group': 'payGroup',
            'position_code': 'positionCode',
            'shift': 'shift',
            'supervisor_company_number': 'supervisorCompanyNumber',
            'supervisor_employee_id': 'supervisorEmployeeId',
            'tipped': 'tipped',
            'union_affiliation_date': 'unionAffiliationDate',
            'union_code': 'unionCode',
            'union_position': 'unionPosition',
            'workers_compensation': 'workersCompensation'
        }

        self._change_reason = change_reason
        self._clock_badge_number = clock_badge_number
        self._cost_center1 = cost_center1
        self._cost_center2 = cost_center2
        self._cost_center3 = cost_center3
        self._effective_date = effective_date
        self._employee_type = employee_type
        self._equal_employment_opportunity_class = equal_employment_opportunity_class
        self._is_minimum_wage_exempt = is_minimum_wage_exempt
        self._is_overtime_exempt = is_overtime_exempt
        self._is_supervisor_reviewer = is_supervisor_reviewer
        self._is_union_dues_collected = is_union_dues_collected
        self._is_union_initiation_collected = is_union_initiation_collected
        self._job_title = job_title
        self._pay_group = pay_group
        self._position_code = position_code
        self._shift = shift
        self._supervisor_company_number = supervisor_company_number
        self._supervisor_employee_id = supervisor_employee_id
        self._tipped = tipped
        self._union_affiliation_date = union_affiliation_date
        self._union_code = union_code
        self._union_position = union_position
        self._workers_compensation = workers_compensation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StagedEmployeeDepartmentPositionInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stagedEmployee_departmentPosition_inner of this StagedEmployeeDepartmentPositionInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change_reason(self):
        """Gets the change_reason of this StagedEmployeeDepartmentPositionInner.

        Employee department/position change reason. Must match Company setup. <br  />Max length: 15

        :return: The change_reason of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._change_reason

    @change_reason.setter
    def change_reason(self, change_reason):
        """Sets the change_reason of this StagedEmployeeDepartmentPositionInner.

        Employee department/position change reason. Must match Company setup. <br  />Max length: 15

        :param change_reason: The change_reason of this StagedEmployeeDepartmentPositionInner.
        :type change_reason: str
        """

        self._change_reason = change_reason

    @property
    def clock_badge_number(self):
        """Gets the clock_badge_number of this StagedEmployeeDepartmentPositionInner.

        Employee clock badge number. Defaults to employeeId. <br  />Max length: 10

        :return: The clock_badge_number of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._clock_badge_number

    @clock_badge_number.setter
    def clock_badge_number(self, clock_badge_number):
        """Sets the clock_badge_number of this StagedEmployeeDepartmentPositionInner.

        Employee clock badge number. Defaults to employeeId. <br  />Max length: 10

        :param clock_badge_number: The clock_badge_number of this StagedEmployeeDepartmentPositionInner.
        :type clock_badge_number: str
        """

        self._clock_badge_number = clock_badge_number

    @property
    def cost_center1(self):
        """Gets the cost_center1 of this StagedEmployeeDepartmentPositionInner.

        Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10

        :return: The cost_center1 of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._cost_center1

    @cost_center1.setter
    def cost_center1(self, cost_center1):
        """Sets the cost_center1 of this StagedEmployeeDepartmentPositionInner.

        Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10

        :param cost_center1: The cost_center1 of this StagedEmployeeDepartmentPositionInner.
        :type cost_center1: str
        """

        self._cost_center1 = cost_center1

    @property
    def cost_center2(self):
        """Gets the cost_center2 of this StagedEmployeeDepartmentPositionInner.

        Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10

        :return: The cost_center2 of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._cost_center2

    @cost_center2.setter
    def cost_center2(self, cost_center2):
        """Sets the cost_center2 of this StagedEmployeeDepartmentPositionInner.

        Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10

        :param cost_center2: The cost_center2 of this StagedEmployeeDepartmentPositionInner.
        :type cost_center2: str
        """

        self._cost_center2 = cost_center2

    @property
    def cost_center3(self):
        """Gets the cost_center3 of this StagedEmployeeDepartmentPositionInner.

        Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10

        :return: The cost_center3 of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._cost_center3

    @cost_center3.setter
    def cost_center3(self, cost_center3):
        """Sets the cost_center3 of this StagedEmployeeDepartmentPositionInner.

        Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10

        :param cost_center3: The cost_center3 of this StagedEmployeeDepartmentPositionInner.
        :type cost_center3: str
        """

        self._cost_center3 = cost_center3

    @property
    def effective_date(self):
        """Gets the effective_date of this StagedEmployeeDepartmentPositionInner.

        The date the position takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :return: The effective_date of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this StagedEmployeeDepartmentPositionInner.

        The date the position takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :param effective_date: The effective_date of this StagedEmployeeDepartmentPositionInner.
        :type effective_date: str
        """

        self._effective_date = effective_date

    @property
    def employee_type(self):
        """Gets the employee_type of this StagedEmployeeDepartmentPositionInner.

        Employee current employment type. Common values *RFT (Regular Full Time), RPT (Regular Part Time), SNL (Seasonal), TFT (Temporary Full Time), TPT (Temporary Part Time)*. <br  />Max length: 10

        :return: The employee_type of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._employee_type

    @employee_type.setter
    def employee_type(self, employee_type):
        """Sets the employee_type of this StagedEmployeeDepartmentPositionInner.

        Employee current employment type. Common values *RFT (Regular Full Time), RPT (Regular Part Time), SNL (Seasonal), TFT (Temporary Full Time), TPT (Temporary Part Time)*. <br  />Max length: 10

        :param employee_type: The employee_type of this StagedEmployeeDepartmentPositionInner.
        :type employee_type: str
        """

        self._employee_type = employee_type

    @property
    def equal_employment_opportunity_class(self):
        """Gets the equal_employment_opportunity_class of this StagedEmployeeDepartmentPositionInner.

        Values are configured in Company > Setup > HR > EEO Classes.<br  /> Max length: 10

        :return: The equal_employment_opportunity_class of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._equal_employment_opportunity_class

    @equal_employment_opportunity_class.setter
    def equal_employment_opportunity_class(self, equal_employment_opportunity_class):
        """Sets the equal_employment_opportunity_class of this StagedEmployeeDepartmentPositionInner.

        Values are configured in Company > Setup > HR > EEO Classes.<br  /> Max length: 10

        :param equal_employment_opportunity_class: The equal_employment_opportunity_class of this StagedEmployeeDepartmentPositionInner.
        :type equal_employment_opportunity_class: str
        """

        self._equal_employment_opportunity_class = equal_employment_opportunity_class

    @property
    def is_minimum_wage_exempt(self):
        """Gets the is_minimum_wage_exempt of this StagedEmployeeDepartmentPositionInner.

        Indicates if employee is exempt from minimum wage.

        :return: The is_minimum_wage_exempt of this StagedEmployeeDepartmentPositionInner.
        :rtype: bool
        """
        return self._is_minimum_wage_exempt

    @is_minimum_wage_exempt.setter
    def is_minimum_wage_exempt(self, is_minimum_wage_exempt):
        """Sets the is_minimum_wage_exempt of this StagedEmployeeDepartmentPositionInner.

        Indicates if employee is exempt from minimum wage.

        :param is_minimum_wage_exempt: The is_minimum_wage_exempt of this StagedEmployeeDepartmentPositionInner.
        :type is_minimum_wage_exempt: bool
        """

        self._is_minimum_wage_exempt = is_minimum_wage_exempt

    @property
    def is_overtime_exempt(self):
        """Gets the is_overtime_exempt of this StagedEmployeeDepartmentPositionInner.

        Indicates if employee is exempt from overtime.

        :return: The is_overtime_exempt of this StagedEmployeeDepartmentPositionInner.
        :rtype: bool
        """
        return self._is_overtime_exempt

    @is_overtime_exempt.setter
    def is_overtime_exempt(self, is_overtime_exempt):
        """Sets the is_overtime_exempt of this StagedEmployeeDepartmentPositionInner.

        Indicates if employee is exempt from overtime.

        :param is_overtime_exempt: The is_overtime_exempt of this StagedEmployeeDepartmentPositionInner.
        :type is_overtime_exempt: bool
        """

        self._is_overtime_exempt = is_overtime_exempt

    @property
    def is_supervisor_reviewer(self):
        """Gets the is_supervisor_reviewer of this StagedEmployeeDepartmentPositionInner.

        Indicates if employee is a supervisor or reviewer.

        :return: The is_supervisor_reviewer of this StagedEmployeeDepartmentPositionInner.
        :rtype: bool
        """
        return self._is_supervisor_reviewer

    @is_supervisor_reviewer.setter
    def is_supervisor_reviewer(self, is_supervisor_reviewer):
        """Sets the is_supervisor_reviewer of this StagedEmployeeDepartmentPositionInner.

        Indicates if employee is a supervisor or reviewer.

        :param is_supervisor_reviewer: The is_supervisor_reviewer of this StagedEmployeeDepartmentPositionInner.
        :type is_supervisor_reviewer: bool
        """

        self._is_supervisor_reviewer = is_supervisor_reviewer

    @property
    def is_union_dues_collected(self):
        """Gets the is_union_dues_collected of this StagedEmployeeDepartmentPositionInner.

        Indicates if union dues are collected.

        :return: The is_union_dues_collected of this StagedEmployeeDepartmentPositionInner.
        :rtype: bool
        """
        return self._is_union_dues_collected

    @is_union_dues_collected.setter
    def is_union_dues_collected(self, is_union_dues_collected):
        """Sets the is_union_dues_collected of this StagedEmployeeDepartmentPositionInner.

        Indicates if union dues are collected.

        :param is_union_dues_collected: The is_union_dues_collected of this StagedEmployeeDepartmentPositionInner.
        :type is_union_dues_collected: bool
        """

        self._is_union_dues_collected = is_union_dues_collected

    @property
    def is_union_initiation_collected(self):
        """Gets the is_union_initiation_collected of this StagedEmployeeDepartmentPositionInner.

        Indicates if initiations fees are collected.

        :return: The is_union_initiation_collected of this StagedEmployeeDepartmentPositionInner.
        :rtype: bool
        """
        return self._is_union_initiation_collected

    @is_union_initiation_collected.setter
    def is_union_initiation_collected(self, is_union_initiation_collected):
        """Sets the is_union_initiation_collected of this StagedEmployeeDepartmentPositionInner.

        Indicates if initiations fees are collected.

        :param is_union_initiation_collected: The is_union_initiation_collected of this StagedEmployeeDepartmentPositionInner.
        :type is_union_initiation_collected: bool
        """

        self._is_union_initiation_collected = is_union_initiation_collected

    @property
    def job_title(self):
        """Gets the job_title of this StagedEmployeeDepartmentPositionInner.

        Employee current job title. <br  />Max length: 50

        :return: The job_title of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this StagedEmployeeDepartmentPositionInner.

        Employee current job title. <br  />Max length: 50

        :param job_title: The job_title of this StagedEmployeeDepartmentPositionInner.
        :type job_title: str
        """

        self._job_title = job_title

    @property
    def pay_group(self):
        """Gets the pay_group of this StagedEmployeeDepartmentPositionInner.

        Employee pay group. Must match Company setup. <br  /> Max length: 20

        :return: The pay_group of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._pay_group

    @pay_group.setter
    def pay_group(self, pay_group):
        """Sets the pay_group of this StagedEmployeeDepartmentPositionInner.

        Employee pay group. Must match Company setup. <br  /> Max length: 20

        :param pay_group: The pay_group of this StagedEmployeeDepartmentPositionInner.
        :type pay_group: str
        """

        self._pay_group = pay_group

    @property
    def position_code(self):
        """Gets the position_code of this StagedEmployeeDepartmentPositionInner.

        Employee position code. Must match Company setup.<br  />Max length: 20

        :return: The position_code of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._position_code

    @position_code.setter
    def position_code(self, position_code):
        """Sets the position_code of this StagedEmployeeDepartmentPositionInner.

        Employee position code. Must match Company setup.<br  />Max length: 20

        :param position_code: The position_code of this StagedEmployeeDepartmentPositionInner.
        :type position_code: str
        """

        self._position_code = position_code

    @property
    def shift(self):
        """Gets the shift of this StagedEmployeeDepartmentPositionInner.

        Employee work shift.<br  />Max length: 255

        :return: The shift of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._shift

    @shift.setter
    def shift(self, shift):
        """Sets the shift of this StagedEmployeeDepartmentPositionInner.

        Employee work shift.<br  />Max length: 255

        :param shift: The shift of this StagedEmployeeDepartmentPositionInner.
        :type shift: str
        """

        self._shift = shift

    @property
    def supervisor_company_number(self):
        """Gets the supervisor_company_number of this StagedEmployeeDepartmentPositionInner.

        Supervisor's company number. Defaults to employee company number.<br  />Max length: 9

        :return: The supervisor_company_number of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._supervisor_company_number

    @supervisor_company_number.setter
    def supervisor_company_number(self, supervisor_company_number):
        """Sets the supervisor_company_number of this StagedEmployeeDepartmentPositionInner.

        Supervisor's company number. Defaults to employee company number.<br  />Max length: 9

        :param supervisor_company_number: The supervisor_company_number of this StagedEmployeeDepartmentPositionInner.
        :type supervisor_company_number: str
        """

        self._supervisor_company_number = supervisor_company_number

    @property
    def supervisor_employee_id(self):
        """Gets the supervisor_employee_id of this StagedEmployeeDepartmentPositionInner.

        EmployeeId of the supervisor. <br  />Max length: 10

        :return: The supervisor_employee_id of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._supervisor_employee_id

    @supervisor_employee_id.setter
    def supervisor_employee_id(self, supervisor_employee_id):
        """Sets the supervisor_employee_id of this StagedEmployeeDepartmentPositionInner.

        EmployeeId of the supervisor. <br  />Max length: 10

        :param supervisor_employee_id: The supervisor_employee_id of this StagedEmployeeDepartmentPositionInner.
        :type supervisor_employee_id: str
        """

        self._supervisor_employee_id = supervisor_employee_id

    @property
    def tipped(self):
        """Gets the tipped of this StagedEmployeeDepartmentPositionInner.

        Indicates if employee receives tips.

        :return: The tipped of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._tipped

    @tipped.setter
    def tipped(self, tipped):
        """Sets the tipped of this StagedEmployeeDepartmentPositionInner.

        Indicates if employee receives tips.

        :param tipped: The tipped of this StagedEmployeeDepartmentPositionInner.
        :type tipped: str
        """

        self._tipped = tipped

    @property
    def union_affiliation_date(self):
        """Gets the union_affiliation_date of this StagedEmployeeDepartmentPositionInner.

        Employee union affiliation effective date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :return: The union_affiliation_date of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._union_affiliation_date

    @union_affiliation_date.setter
    def union_affiliation_date(self, union_affiliation_date):
        """Sets the union_affiliation_date of this StagedEmployeeDepartmentPositionInner.

        Employee union affiliation effective date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :param union_affiliation_date: The union_affiliation_date of this StagedEmployeeDepartmentPositionInner.
        :type union_affiliation_date: str
        """

        self._union_affiliation_date = union_affiliation_date

    @property
    def union_code(self):
        """Gets the union_code of this StagedEmployeeDepartmentPositionInner.

        Employee union code. Must match Company setup. <br  />Max length: 10

        :return: The union_code of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._union_code

    @union_code.setter
    def union_code(self, union_code):
        """Sets the union_code of this StagedEmployeeDepartmentPositionInner.

        Employee union code. Must match Company setup. <br  />Max length: 10

        :param union_code: The union_code of this StagedEmployeeDepartmentPositionInner.
        :type union_code: str
        """

        self._union_code = union_code

    @property
    def union_position(self):
        """Gets the union_position of this StagedEmployeeDepartmentPositionInner.

        Employee union position. Must match Company setup. <br  />Max length: 30

        :return: The union_position of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._union_position

    @union_position.setter
    def union_position(self, union_position):
        """Sets the union_position of this StagedEmployeeDepartmentPositionInner.

        Employee union position. Must match Company setup. <br  />Max length: 30

        :param union_position: The union_position of this StagedEmployeeDepartmentPositionInner.
        :type union_position: str
        """

        self._union_position = union_position

    @property
    def workers_compensation(self):
        """Gets the workers_compensation of this StagedEmployeeDepartmentPositionInner.

        Employee worker compensation code. Must match Company setup.<br  /> Max length: 10

        :return: The workers_compensation of this StagedEmployeeDepartmentPositionInner.
        :rtype: str
        """
        return self._workers_compensation

    @workers_compensation.setter
    def workers_compensation(self, workers_compensation):
        """Sets the workers_compensation of this StagedEmployeeDepartmentPositionInner.

        Employee worker compensation code. Must match Company setup.<br  /> Max length: 10

        :param workers_compensation: The workers_compensation of this StagedEmployeeDepartmentPositionInner.
        :type workers_compensation: str
        """

        self._workers_compensation = workers_compensation
