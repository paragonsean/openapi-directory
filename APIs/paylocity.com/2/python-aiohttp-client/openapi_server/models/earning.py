# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Earning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agency: str=None, amount: float=None, annual_maximum: float=None, calculation_code: str=None, cost_center1: str=None, cost_center2: str=None, cost_center3: str=None, earning_code: str=None, effective_date: str=None, end_date: str=None, frequency: str=None, goal: float=None, hours_or_units: float=None, is_self_insured: bool=None, job_code: str=None, miscellaneous_info: str=None, paid_towards_goal: float=None, pay_period_maximum: float=None, pay_period_minimum: float=None, rate: float=None, rate_code: str=None, start_date: str=None):
        """Earning - a model defined in OpenAPI

        :param agency: The agency of this Earning.
        :param amount: The amount of this Earning.
        :param annual_maximum: The annual_maximum of this Earning.
        :param calculation_code: The calculation_code of this Earning.
        :param cost_center1: The cost_center1 of this Earning.
        :param cost_center2: The cost_center2 of this Earning.
        :param cost_center3: The cost_center3 of this Earning.
        :param earning_code: The earning_code of this Earning.
        :param effective_date: The effective_date of this Earning.
        :param end_date: The end_date of this Earning.
        :param frequency: The frequency of this Earning.
        :param goal: The goal of this Earning.
        :param hours_or_units: The hours_or_units of this Earning.
        :param is_self_insured: The is_self_insured of this Earning.
        :param job_code: The job_code of this Earning.
        :param miscellaneous_info: The miscellaneous_info of this Earning.
        :param paid_towards_goal: The paid_towards_goal of this Earning.
        :param pay_period_maximum: The pay_period_maximum of this Earning.
        :param pay_period_minimum: The pay_period_minimum of this Earning.
        :param rate: The rate of this Earning.
        :param rate_code: The rate_code of this Earning.
        :param start_date: The start_date of this Earning.
        """
        self.openapi_types = {
            'agency': str,
            'amount': float,
            'annual_maximum': float,
            'calculation_code': str,
            'cost_center1': str,
            'cost_center2': str,
            'cost_center3': str,
            'earning_code': str,
            'effective_date': str,
            'end_date': str,
            'frequency': str,
            'goal': float,
            'hours_or_units': float,
            'is_self_insured': bool,
            'job_code': str,
            'miscellaneous_info': str,
            'paid_towards_goal': float,
            'pay_period_maximum': float,
            'pay_period_minimum': float,
            'rate': float,
            'rate_code': str,
            'start_date': str
        }

        self.attribute_map = {
            'agency': 'agency',
            'amount': 'amount',
            'annual_maximum': 'annualMaximum',
            'calculation_code': 'calculationCode',
            'cost_center1': 'costCenter1',
            'cost_center2': 'costCenter2',
            'cost_center3': 'costCenter3',
            'earning_code': 'earningCode',
            'effective_date': 'effectiveDate',
            'end_date': 'endDate',
            'frequency': 'frequency',
            'goal': 'goal',
            'hours_or_units': 'hoursOrUnits',
            'is_self_insured': 'isSelfInsured',
            'job_code': 'jobCode',
            'miscellaneous_info': 'miscellaneousInfo',
            'paid_towards_goal': 'paidTowardsGoal',
            'pay_period_maximum': 'payPeriodMaximum',
            'pay_period_minimum': 'payPeriodMinimum',
            'rate': 'rate',
            'rate_code': 'rateCode',
            'start_date': 'startDate'
        }

        self._agency = agency
        self._amount = amount
        self._annual_maximum = annual_maximum
        self._calculation_code = calculation_code
        self._cost_center1 = cost_center1
        self._cost_center2 = cost_center2
        self._cost_center3 = cost_center3
        self._earning_code = earning_code
        self._effective_date = effective_date
        self._end_date = end_date
        self._frequency = frequency
        self._goal = goal
        self._hours_or_units = hours_or_units
        self._is_self_insured = is_self_insured
        self._job_code = job_code
        self._miscellaneous_info = miscellaneous_info
        self._paid_towards_goal = paid_towards_goal
        self._pay_period_maximum = pay_period_maximum
        self._pay_period_minimum = pay_period_minimum
        self._rate = rate
        self._rate_code = rate_code
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Earning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The earning of this Earning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agency(self):
        """Gets the agency of this Earning.

        Third-party agency associated with earning. Must match Company setup.<br  />Max length: 10

        :return: The agency of this Earning.
        :rtype: str
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this Earning.

        Third-party agency associated with earning. Must match Company setup.<br  />Max length: 10

        :param agency: The agency of this Earning.
        :type agency: str
        """

        self._agency = agency

    @property
    def amount(self):
        """Gets the amount of this Earning.

        Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 = 10%).  <br  />Decimal(12,2)

        :return: The amount of this Earning.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Earning.

        Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 = 10%).  <br  />Decimal(12,2)

        :param amount: The amount of this Earning.
        :type amount: float
        """

        self._amount = amount

    @property
    def annual_maximum(self):
        """Gets the annual_maximum of this Earning.

        Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. <br  />Decimal(12,2)

        :return: The annual_maximum of this Earning.
        :rtype: float
        """
        return self._annual_maximum

    @annual_maximum.setter
    def annual_maximum(self, annual_maximum):
        """Sets the annual_maximum of this Earning.

        Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. <br  />Decimal(12,2)

        :param annual_maximum: The annual_maximum of this Earning.
        :type annual_maximum: float
        """

        self._annual_maximum = annual_maximum

    @property
    def calculation_code(self):
        """Gets the calculation_code of this Earning.

        Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. <br  />Max length: 20

        :return: The calculation_code of this Earning.
        :rtype: str
        """
        return self._calculation_code

    @calculation_code.setter
    def calculation_code(self, calculation_code):
        """Sets the calculation_code of this Earning.

        Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. <br  />Max length: 20

        :param calculation_code: The calculation_code of this Earning.
        :type calculation_code: str
        """

        self._calculation_code = calculation_code

    @property
    def cost_center1(self):
        """Gets the cost_center1 of this Earning.

        Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10

        :return: The cost_center1 of this Earning.
        :rtype: str
        """
        return self._cost_center1

    @cost_center1.setter
    def cost_center1(self, cost_center1):
        """Sets the cost_center1 of this Earning.

        Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10

        :param cost_center1: The cost_center1 of this Earning.
        :type cost_center1: str
        """

        self._cost_center1 = cost_center1

    @property
    def cost_center2(self):
        """Gets the cost_center2 of this Earning.

        Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10

        :return: The cost_center2 of this Earning.
        :rtype: str
        """
        return self._cost_center2

    @cost_center2.setter
    def cost_center2(self, cost_center2):
        """Sets the cost_center2 of this Earning.

        Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10

        :param cost_center2: The cost_center2 of this Earning.
        :type cost_center2: str
        """

        self._cost_center2 = cost_center2

    @property
    def cost_center3(self):
        """Gets the cost_center3 of this Earning.

        Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10

        :return: The cost_center3 of this Earning.
        :rtype: str
        """
        return self._cost_center3

    @cost_center3.setter
    def cost_center3(self, cost_center3):
        """Sets the cost_center3 of this Earning.

        Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10

        :param cost_center3: The cost_center3 of this Earning.
        :type cost_center3: str
        """

        self._cost_center3 = cost_center3

    @property
    def earning_code(self):
        """Gets the earning_code of this Earning.

        Earning code. Must match Company setup. <br  />Max length: 10

        :return: The earning_code of this Earning.
        :rtype: str
        """
        return self._earning_code

    @earning_code.setter
    def earning_code(self, earning_code):
        """Sets the earning_code of this Earning.

        Earning code. Must match Company setup. <br  />Max length: 10

        :param earning_code: The earning_code of this Earning.
        :type earning_code: str
        """
        if earning_code is None:
            raise ValueError("Invalid value for `earning_code`, must not be `None`")

        self._earning_code = earning_code

    @property
    def effective_date(self):
        """Gets the effective_date of this Earning.

        Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD.

        :return: The effective_date of this Earning.
        :rtype: str
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this Earning.

        Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD.

        :param effective_date: The effective_date of this Earning.
        :type effective_date: str
        """

        self._effective_date = effective_date

    @property
    def end_date(self):
        """Gets the end_date of this Earning.

        Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD.

        :return: The end_date of this Earning.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Earning.

        Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD.

        :param end_date: The end_date of this Earning.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def frequency(self):
        """Gets the frequency of this Earning.

        Needed if earning is applied differently from the payroll frequency (one time earning for example).<br  /> Max length: 5

        :return: The frequency of this Earning.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Earning.

        Needed if earning is applied differently from the payroll frequency (one time earning for example).<br  /> Max length: 5

        :param frequency: The frequency of this Earning.
        :type frequency: str
        """

        self._frequency = frequency

    @property
    def goal(self):
        """Gets the goal of this Earning.

        Dollar amount. The employee earning will stop when the goal amount is reached.<br  /> Decimal(12,2)

        :return: The goal of this Earning.
        :rtype: float
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this Earning.

        Dollar amount. The employee earning will stop when the goal amount is reached.<br  /> Decimal(12,2)

        :param goal: The goal of this Earning.
        :type goal: float
        """

        self._goal = goal

    @property
    def hours_or_units(self):
        """Gets the hours_or_units of this Earning.

        The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. <br  /> Decimal(12,2)

        :return: The hours_or_units of this Earning.
        :rtype: float
        """
        return self._hours_or_units

    @hours_or_units.setter
    def hours_or_units(self, hours_or_units):
        """Sets the hours_or_units of this Earning.

        The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. <br  /> Decimal(12,2)

        :param hours_or_units: The hours_or_units of this Earning.
        :type hours_or_units: float
        """

        self._hours_or_units = hours_or_units

    @property
    def is_self_insured(self):
        """Gets the is_self_insured of this Earning.

        Used for ACA. If not entered, defaulted to Company earning setup.

        :return: The is_self_insured of this Earning.
        :rtype: bool
        """
        return self._is_self_insured

    @is_self_insured.setter
    def is_self_insured(self, is_self_insured):
        """Sets the is_self_insured of this Earning.

        Used for ACA. If not entered, defaulted to Company earning setup.

        :param is_self_insured: The is_self_insured of this Earning.
        :type is_self_insured: bool
        """

        self._is_self_insured = is_self_insured

    @property
    def job_code(self):
        """Gets the job_code of this Earning.

        Job code associated with earnings. Must match Company setup.<br  /> Max length: 20

        :return: The job_code of this Earning.
        :rtype: str
        """
        return self._job_code

    @job_code.setter
    def job_code(self, job_code):
        """Sets the job_code of this Earning.

        Job code associated with earnings. Must match Company setup.<br  /> Max length: 20

        :param job_code: The job_code of this Earning.
        :type job_code: str
        """

        self._job_code = job_code

    @property
    def miscellaneous_info(self):
        """Gets the miscellaneous_info of this Earning.

        Information to print on the check stub if agency is set up for this earning. <br  />Max length: 50

        :return: The miscellaneous_info of this Earning.
        :rtype: str
        """
        return self._miscellaneous_info

    @miscellaneous_info.setter
    def miscellaneous_info(self, miscellaneous_info):
        """Sets the miscellaneous_info of this Earning.

        Information to print on the check stub if agency is set up for this earning. <br  />Max length: 50

        :param miscellaneous_info: The miscellaneous_info of this Earning.
        :type miscellaneous_info: str
        """

        self._miscellaneous_info = miscellaneous_info

    @property
    def paid_towards_goal(self):
        """Gets the paid_towards_goal of this Earning.

        Amount already paid to employee toward goal. <br  /> Decimal(12,2)

        :return: The paid_towards_goal of this Earning.
        :rtype: float
        """
        return self._paid_towards_goal

    @paid_towards_goal.setter
    def paid_towards_goal(self, paid_towards_goal):
        """Sets the paid_towards_goal of this Earning.

        Amount already paid to employee toward goal. <br  /> Decimal(12,2)

        :param paid_towards_goal: The paid_towards_goal of this Earning.
        :type paid_towards_goal: float
        """

        self._paid_towards_goal = paid_towards_goal

    @property
    def pay_period_maximum(self):
        """Gets the pay_period_maximum of this Earning.

        Maximum amount of the earning on a single paycheck. <br  /> Decimal(12,2)

        :return: The pay_period_maximum of this Earning.
        :rtype: float
        """
        return self._pay_period_maximum

    @pay_period_maximum.setter
    def pay_period_maximum(self, pay_period_maximum):
        """Sets the pay_period_maximum of this Earning.

        Maximum amount of the earning on a single paycheck. <br  /> Decimal(12,2)

        :param pay_period_maximum: The pay_period_maximum of this Earning.
        :type pay_period_maximum: float
        """

        self._pay_period_maximum = pay_period_maximum

    @property
    def pay_period_minimum(self):
        """Gets the pay_period_minimum of this Earning.

        Minimum amount of the earning on a single paycheck. <br  /> Decimal(12,2)

        :return: The pay_period_minimum of this Earning.
        :rtype: float
        """
        return self._pay_period_minimum

    @pay_period_minimum.setter
    def pay_period_minimum(self, pay_period_minimum):
        """Sets the pay_period_minimum of this Earning.

        Minimum amount of the earning on a single paycheck. <br  /> Decimal(12,2)

        :param pay_period_minimum: The pay_period_minimum of this Earning.
        :type pay_period_minimum: float
        """

        self._pay_period_minimum = pay_period_minimum

    @property
    def rate(self):
        """Gets the rate of this Earning.

        Rate is used in conjunction with the hoursOrUnits field. <br  /> Decimal(12,2)

        :return: The rate of this Earning.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Earning.

        Rate is used in conjunction with the hoursOrUnits field. <br  /> Decimal(12,2)

        :param rate: The rate of this Earning.
        :type rate: float
        """

        self._rate = rate

    @property
    def rate_code(self):
        """Gets the rate_code of this Earning.

        Rate Code applies to additional pay rates entered for an employee. Must match Company setup. <br  /> Max length: 10

        :return: The rate_code of this Earning.
        :rtype: str
        """
        return self._rate_code

    @rate_code.setter
    def rate_code(self, rate_code):
        """Sets the rate_code of this Earning.

        Rate Code applies to additional pay rates entered for an employee. Must match Company setup. <br  /> Max length: 10

        :param rate_code: The rate_code of this Earning.
        :type rate_code: str
        """

        self._rate_code = rate_code

    @property
    def start_date(self):
        """Gets the start_date of this Earning.

        Start date of an earning based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD.

        :return: The start_date of this Earning.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Earning.

        Start date of an earning based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD.

        :param start_date: The start_date of this Earning.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
