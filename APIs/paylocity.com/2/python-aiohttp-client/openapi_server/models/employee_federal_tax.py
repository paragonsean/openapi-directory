# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmployeeFederalTax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, deductions_amount: float=None, dependents_amount: float=None, exemptions: float=None, filing_status: str=None, higher_rate: bool=None, other_income_amount: float=None, percentage: float=None, tax_calculation_code: str=None, w4_form_year: int=None):
        """EmployeeFederalTax - a model defined in OpenAPI

        :param amount: The amount of this EmployeeFederalTax.
        :param deductions_amount: The deductions_amount of this EmployeeFederalTax.
        :param dependents_amount: The dependents_amount of this EmployeeFederalTax.
        :param exemptions: The exemptions of this EmployeeFederalTax.
        :param filing_status: The filing_status of this EmployeeFederalTax.
        :param higher_rate: The higher_rate of this EmployeeFederalTax.
        :param other_income_amount: The other_income_amount of this EmployeeFederalTax.
        :param percentage: The percentage of this EmployeeFederalTax.
        :param tax_calculation_code: The tax_calculation_code of this EmployeeFederalTax.
        :param w4_form_year: The w4_form_year of this EmployeeFederalTax.
        """
        self.openapi_types = {
            'amount': float,
            'deductions_amount': float,
            'dependents_amount': float,
            'exemptions': float,
            'filing_status': str,
            'higher_rate': bool,
            'other_income_amount': float,
            'percentage': float,
            'tax_calculation_code': str,
            'w4_form_year': int
        }

        self.attribute_map = {
            'amount': 'amount',
            'deductions_amount': 'deductionsAmount',
            'dependents_amount': 'dependentsAmount',
            'exemptions': 'exemptions',
            'filing_status': 'filingStatus',
            'higher_rate': 'higherRate',
            'other_income_amount': 'otherIncomeAmount',
            'percentage': 'percentage',
            'tax_calculation_code': 'taxCalculationCode',
            'w4_form_year': 'w4FormYear'
        }

        self._amount = amount
        self._deductions_amount = deductions_amount
        self._dependents_amount = dependents_amount
        self._exemptions = exemptions
        self._filing_status = filing_status
        self._higher_rate = higher_rate
        self._other_income_amount = other_income_amount
        self._percentage = percentage
        self._tax_calculation_code = tax_calculation_code
        self._w4_form_year = w4_form_year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmployeeFederalTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The employee_federalTax of this EmployeeFederalTax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this EmployeeFederalTax.

        Tax amount. <br  />Decimal (12,2)

        :return: The amount of this EmployeeFederalTax.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this EmployeeFederalTax.

        Tax amount. <br  />Decimal (12,2)

        :param amount: The amount of this EmployeeFederalTax.
        :type amount: float
        """

        self._amount = amount

    @property
    def deductions_amount(self):
        """Gets the deductions_amount of this EmployeeFederalTax.

        Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)

        :return: The deductions_amount of this EmployeeFederalTax.
        :rtype: float
        """
        return self._deductions_amount

    @deductions_amount.setter
    def deductions_amount(self, deductions_amount):
        """Sets the deductions_amount of this EmployeeFederalTax.

        Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)

        :param deductions_amount: The deductions_amount of this EmployeeFederalTax.
        :type deductions_amount: float
        """

        self._deductions_amount = deductions_amount

    @property
    def dependents_amount(self):
        """Gets the dependents_amount of this EmployeeFederalTax.

        Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)

        :return: The dependents_amount of this EmployeeFederalTax.
        :rtype: float
        """
        return self._dependents_amount

    @dependents_amount.setter
    def dependents_amount(self, dependents_amount):
        """Sets the dependents_amount of this EmployeeFederalTax.

        Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)

        :param dependents_amount: The dependents_amount of this EmployeeFederalTax.
        :type dependents_amount: float
        """

        self._dependents_amount = dependents_amount

    @property
    def exemptions(self):
        """Gets the exemptions of this EmployeeFederalTax.

        Federal tax exemptions value. <br  />Decimal (12,2)

        :return: The exemptions of this EmployeeFederalTax.
        :rtype: float
        """
        return self._exemptions

    @exemptions.setter
    def exemptions(self, exemptions):
        """Sets the exemptions of this EmployeeFederalTax.

        Federal tax exemptions value. <br  />Decimal (12,2)

        :param exemptions: The exemptions of this EmployeeFederalTax.
        :type exemptions: float
        """

        self._exemptions = exemptions

    @property
    def filing_status(self):
        """Gets the filing_status of this EmployeeFederalTax.

        Employee federal filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50

        :return: The filing_status of this EmployeeFederalTax.
        :rtype: str
        """
        return self._filing_status

    @filing_status.setter
    def filing_status(self, filing_status):
        """Sets the filing_status of this EmployeeFederalTax.

        Employee federal filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50

        :param filing_status: The filing_status of this EmployeeFederalTax.
        :type filing_status: str
        """

        self._filing_status = filing_status

    @property
    def higher_rate(self):
        """Gets the higher_rate of this EmployeeFederalTax.

        Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean

        :return: The higher_rate of this EmployeeFederalTax.
        :rtype: bool
        """
        return self._higher_rate

    @higher_rate.setter
    def higher_rate(self, higher_rate):
        """Sets the higher_rate of this EmployeeFederalTax.

        Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean

        :param higher_rate: The higher_rate of this EmployeeFederalTax.
        :type higher_rate: bool
        """

        self._higher_rate = higher_rate

    @property
    def other_income_amount(self):
        """Gets the other_income_amount of this EmployeeFederalTax.

        Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)

        :return: The other_income_amount of this EmployeeFederalTax.
        :rtype: float
        """
        return self._other_income_amount

    @other_income_amount.setter
    def other_income_amount(self, other_income_amount):
        """Sets the other_income_amount of this EmployeeFederalTax.

        Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)

        :param other_income_amount: The other_income_amount of this EmployeeFederalTax.
        :type other_income_amount: float
        """

        self._other_income_amount = other_income_amount

    @property
    def percentage(self):
        """Gets the percentage of this EmployeeFederalTax.

        Tax percentage. <br  />Decimal (12,2)

        :return: The percentage of this EmployeeFederalTax.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this EmployeeFederalTax.

        Tax percentage. <br  />Decimal (12,2)

        :param percentage: The percentage of this EmployeeFederalTax.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def tax_calculation_code(self):
        """Gets the tax_calculation_code of this EmployeeFederalTax.

        Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10

        :return: The tax_calculation_code of this EmployeeFederalTax.
        :rtype: str
        """
        return self._tax_calculation_code

    @tax_calculation_code.setter
    def tax_calculation_code(self, tax_calculation_code):
        """Sets the tax_calculation_code of this EmployeeFederalTax.

        Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10

        :param tax_calculation_code: The tax_calculation_code of this EmployeeFederalTax.
        :type tax_calculation_code: str
        """

        self._tax_calculation_code = tax_calculation_code

    @property
    def w4_form_year(self):
        """Gets the w4_form_year of this EmployeeFederalTax.

        The federal W4 form year <br  />Integer

        :return: The w4_form_year of this EmployeeFederalTax.
        :rtype: int
        """
        return self._w4_form_year

    @w4_form_year.setter
    def w4_form_year(self, w4_form_year):
        """Sets the w4_form_year of this EmployeeFederalTax.

        The federal W4 form year <br  />Integer

        :param w4_form_year: The w4_form_year of this EmployeeFederalTax.
        :type w4_form_year: int
        """

        self._w4_form_year = w4_form_year
