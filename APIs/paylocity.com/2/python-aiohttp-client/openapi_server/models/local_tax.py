# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocalTax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exemptions: float=None, exemptions2: float=None, filing_status: str=None, resident_psd: str=None, tax_code: str=None, work_psd: str=None):
        """LocalTax - a model defined in OpenAPI

        :param exemptions: The exemptions of this LocalTax.
        :param exemptions2: The exemptions2 of this LocalTax.
        :param filing_status: The filing_status of this LocalTax.
        :param resident_psd: The resident_psd of this LocalTax.
        :param tax_code: The tax_code of this LocalTax.
        :param work_psd: The work_psd of this LocalTax.
        """
        self.openapi_types = {
            'exemptions': float,
            'exemptions2': float,
            'filing_status': str,
            'resident_psd': str,
            'tax_code': str,
            'work_psd': str
        }

        self.attribute_map = {
            'exemptions': 'exemptions',
            'exemptions2': 'exemptions2',
            'filing_status': 'filingStatus',
            'resident_psd': 'residentPSD',
            'tax_code': 'taxCode',
            'work_psd': 'workPSD'
        }

        self._exemptions = exemptions
        self._exemptions2 = exemptions2
        self._filing_status = filing_status
        self._resident_psd = resident_psd
        self._tax_code = tax_code
        self._work_psd = work_psd

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocalTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The localTax of this LocalTax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exemptions(self):
        """Gets the exemptions of this LocalTax.

        Local tax exemptions value.<br  />Decimal (12,2)

        :return: The exemptions of this LocalTax.
        :rtype: float
        """
        return self._exemptions

    @exemptions.setter
    def exemptions(self, exemptions):
        """Sets the exemptions of this LocalTax.

        Local tax exemptions value.<br  />Decimal (12,2)

        :param exemptions: The exemptions of this LocalTax.
        :type exemptions: float
        """

        self._exemptions = exemptions

    @property
    def exemptions2(self):
        """Gets the exemptions2 of this LocalTax.

        Local tax exemptions 2 value.<br  />Decimal (12,2)

        :return: The exemptions2 of this LocalTax.
        :rtype: float
        """
        return self._exemptions2

    @exemptions2.setter
    def exemptions2(self, exemptions2):
        """Sets the exemptions2 of this LocalTax.

        Local tax exemptions 2 value.<br  />Decimal (12,2)

        :param exemptions2: The exemptions2 of this LocalTax.
        :type exemptions2: float
        """

        self._exemptions2 = exemptions2

    @property
    def filing_status(self):
        """Gets the filing_status of this LocalTax.

        Employee local tax filing status. Must match specific local tax setup. <br  /> Max length: 50

        :return: The filing_status of this LocalTax.
        :rtype: str
        """
        return self._filing_status

    @filing_status.setter
    def filing_status(self, filing_status):
        """Sets the filing_status of this LocalTax.

        Employee local tax filing status. Must match specific local tax setup. <br  /> Max length: 50

        :param filing_status: The filing_status of this LocalTax.
        :type filing_status: str
        """

        self._filing_status = filing_status

    @property
    def resident_psd(self):
        """Gets the resident_psd of this LocalTax.

        Resident PSD (political subdivision code) applicable in PA. Must match Company setup.<br  /> Max length: 9

        :return: The resident_psd of this LocalTax.
        :rtype: str
        """
        return self._resident_psd

    @resident_psd.setter
    def resident_psd(self, resident_psd):
        """Sets the resident_psd of this LocalTax.

        Resident PSD (political subdivision code) applicable in PA. Must match Company setup.<br  /> Max length: 9

        :param resident_psd: The resident_psd of this LocalTax.
        :type resident_psd: str
        """

        self._resident_psd = resident_psd

    @property
    def tax_code(self):
        """Gets the tax_code of this LocalTax.

        Local tax code.<br  />Max length: 50

        :return: The tax_code of this LocalTax.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this LocalTax.

        Local tax code.<br  />Max length: 50

        :param tax_code: The tax_code of this LocalTax.
        :type tax_code: str
        """

        self._tax_code = tax_code

    @property
    def work_psd(self):
        """Gets the work_psd of this LocalTax.

        Work location PSD. Must match Company setup. <br  /> Max length: 9

        :return: The work_psd of this LocalTax.
        :rtype: str
        """
        return self._work_psd

    @work_psd.setter
    def work_psd(self, work_psd):
        """Sets the work_psd of this LocalTax.

        Work location PSD. Must match Company setup. <br  /> Max length: 9

        :param work_psd: The work_psd of this LocalTax.
        :type work_psd: str
        """

        self._work_psd = work_psd
