# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmployeeWebTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, badge_number: str=None, charge_rate: float=None, is_time_labor_enabled: bool=None):
        """EmployeeWebTime - a model defined in OpenAPI

        :param badge_number: The badge_number of this EmployeeWebTime.
        :param charge_rate: The charge_rate of this EmployeeWebTime.
        :param is_time_labor_enabled: The is_time_labor_enabled of this EmployeeWebTime.
        """
        self.openapi_types = {
            'badge_number': str,
            'charge_rate': float,
            'is_time_labor_enabled': bool
        }

        self.attribute_map = {
            'badge_number': 'badgeNumber',
            'charge_rate': 'chargeRate',
            'is_time_labor_enabled': 'isTimeLaborEnabled'
        }

        self._badge_number = badge_number
        self._charge_rate = charge_rate
        self._is_time_labor_enabled = is_time_labor_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmployeeWebTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The employee_webTime of this EmployeeWebTime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def badge_number(self):
        """Gets the badge_number of this EmployeeWebTime.

        Badge number usually issued for time and attendance system use. <br  />Max length: 50

        :return: The badge_number of this EmployeeWebTime.
        :rtype: str
        """
        return self._badge_number

    @badge_number.setter
    def badge_number(self, badge_number):
        """Sets the badge_number of this EmployeeWebTime.

        Badge number usually issued for time and attendance system use. <br  />Max length: 50

        :param badge_number: The badge_number of this EmployeeWebTime.
        :type badge_number: str
        """

        self._badge_number = badge_number

    @property
    def charge_rate(self):
        """Gets the charge_rate of this EmployeeWebTime.

        Rate to be charged to third party for time worked by the employee. It is most commonly referenced in the Cost Center Charge, Cost Center Charge vs. Cost Reports, and the Customer Invoice time and attendance reports. <br  />Decimal (12,2)

        :return: The charge_rate of this EmployeeWebTime.
        :rtype: float
        """
        return self._charge_rate

    @charge_rate.setter
    def charge_rate(self, charge_rate):
        """Sets the charge_rate of this EmployeeWebTime.

        Rate to be charged to third party for time worked by the employee. It is most commonly referenced in the Cost Center Charge, Cost Center Charge vs. Cost Reports, and the Customer Invoice time and attendance reports. <br  />Decimal (12,2)

        :param charge_rate: The charge_rate of this EmployeeWebTime.
        :type charge_rate: float
        """

        self._charge_rate = charge_rate

    @property
    def is_time_labor_enabled(self):
        """Gets the is_time_labor_enabled of this EmployeeWebTime.

        If set to true, changes to employee data will be reflected in Web Time.

        :return: The is_time_labor_enabled of this EmployeeWebTime.
        :rtype: bool
        """
        return self._is_time_labor_enabled

    @is_time_labor_enabled.setter
    def is_time_labor_enabled(self, is_time_labor_enabled):
        """Sets the is_time_labor_enabled of this EmployeeWebTime.

        If set to true, changes to employee data will be reflected in Web Time.

        :param is_time_labor_enabled: The is_time_labor_enabled of this EmployeeWebTime.
        :type is_time_labor_enabled: bool
        """

        self._is_time_labor_enabled = is_time_labor_enabled
