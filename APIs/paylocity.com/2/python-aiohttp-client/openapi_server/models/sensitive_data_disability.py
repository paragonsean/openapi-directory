# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sensitive_data_disability_disability_classifications_inner import SensitiveDataDisabilityDisabilityClassificationsInner
from openapi_server import util


class SensitiveDataDisability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disability: str=None, disability_classifications: List[SensitiveDataDisabilityDisabilityClassificationsInner]=None, has_disability: str=None):
        """SensitiveDataDisability - a model defined in OpenAPI

        :param disability: The disability of this SensitiveDataDisability.
        :param disability_classifications: The disability_classifications of this SensitiveDataDisability.
        :param has_disability: The has_disability of this SensitiveDataDisability.
        """
        self.openapi_types = {
            'disability': str,
            'disability_classifications': List[SensitiveDataDisabilityDisabilityClassificationsInner],
            'has_disability': str
        }

        self.attribute_map = {
            'disability': 'disability',
            'disability_classifications': 'disabilityClassifications',
            'has_disability': 'hasDisability'
        }

        self._disability = disability
        self._disability_classifications = disability_classifications
        self._has_disability = has_disability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SensitiveDataDisability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sensitiveData_disability of this SensitiveDataDisability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disability(self):
        """Gets the disability of this SensitiveDataDisability.

        Description of employee's disability or accommodation.<br  />Max length: 50

        :return: The disability of this SensitiveDataDisability.
        :rtype: str
        """
        return self._disability

    @disability.setter
    def disability(self, disability):
        """Sets the disability of this SensitiveDataDisability.

        Description of employee's disability or accommodation.<br  />Max length: 50

        :param disability: The disability of this SensitiveDataDisability.
        :type disability: str
        """

        self._disability = disability

    @property
    def disability_classifications(self):
        """Gets the disability_classifications of this SensitiveDataDisability.

        Add or update employee's disability classifications

        :return: The disability_classifications of this SensitiveDataDisability.
        :rtype: List[SensitiveDataDisabilityDisabilityClassificationsInner]
        """
        return self._disability_classifications

    @disability_classifications.setter
    def disability_classifications(self, disability_classifications):
        """Sets the disability_classifications of this SensitiveDataDisability.

        Add or update employee's disability classifications

        :param disability_classifications: The disability_classifications of this SensitiveDataDisability.
        :type disability_classifications: List[SensitiveDataDisabilityDisabilityClassificationsInner]
        """

        self._disability_classifications = disability_classifications

    @property
    def has_disability(self):
        """Gets the has_disability of this SensitiveDataDisability.

        Indicates if the employee has a disability. Values include:<br  /><br  />0 = No<br  />1 = Yes<br  />2 = Prefer not to say

        :return: The has_disability of this SensitiveDataDisability.
        :rtype: str
        """
        return self._has_disability

    @has_disability.setter
    def has_disability(self, has_disability):
        """Sets the has_disability of this SensitiveDataDisability.

        Indicates if the employee has a disability. Values include:<br  /><br  />0 = No<br  />1 = Yes<br  />2 = Prefer not to say

        :param has_disability: The has_disability of this SensitiveDataDisability.
        :type has_disability: str
        """

        self._has_disability = has_disability
