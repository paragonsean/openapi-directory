# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayStatementDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, check_date: str=None, det: str=None, det_code: str=None, det_type: str=None, eligible_compensation: float=None, hours: float=None, rate: float=None, transaction_number: int=None, transaction_type: str=None, year: int=None):
        """PayStatementDetails - a model defined in OpenAPI

        :param amount: The amount of this PayStatementDetails.
        :param check_date: The check_date of this PayStatementDetails.
        :param det: The det of this PayStatementDetails.
        :param det_code: The det_code of this PayStatementDetails.
        :param det_type: The det_type of this PayStatementDetails.
        :param eligible_compensation: The eligible_compensation of this PayStatementDetails.
        :param hours: The hours of this PayStatementDetails.
        :param rate: The rate of this PayStatementDetails.
        :param transaction_number: The transaction_number of this PayStatementDetails.
        :param transaction_type: The transaction_type of this PayStatementDetails.
        :param year: The year of this PayStatementDetails.
        """
        self.openapi_types = {
            'amount': float,
            'check_date': str,
            'det': str,
            'det_code': str,
            'det_type': str,
            'eligible_compensation': float,
            'hours': float,
            'rate': float,
            'transaction_number': int,
            'transaction_type': str,
            'year': int
        }

        self.attribute_map = {
            'amount': 'amount',
            'check_date': 'checkDate',
            'det': 'det',
            'det_code': 'detCode',
            'det_type': 'detType',
            'eligible_compensation': 'eligibleCompensation',
            'hours': 'hours',
            'rate': 'rate',
            'transaction_number': 'transactionNumber',
            'transaction_type': 'transactionType',
            'year': 'year'
        }

        self._amount = amount
        self._check_date = check_date
        self._det = det
        self._det_code = det_code
        self._det_type = det_type
        self._eligible_compensation = eligible_compensation
        self._hours = hours
        self._rate = rate
        self._transaction_number = transaction_number
        self._transaction_type = transaction_type
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayStatementDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The payStatementDetails of this PayStatementDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PayStatementDetails.

        .<br />

        :return: The amount of this PayStatementDetails.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PayStatementDetails.

        .<br />

        :param amount: The amount of this PayStatementDetails.
        :type amount: float
        """

        self._amount = amount

    @property
    def check_date(self):
        """Gets the check_date of this PayStatementDetails.

        .<br />

        :return: The check_date of this PayStatementDetails.
        :rtype: str
        """
        return self._check_date

    @check_date.setter
    def check_date(self, check_date):
        """Sets the check_date of this PayStatementDetails.

        .<br />

        :param check_date: The check_date of this PayStatementDetails.
        :type check_date: str
        """

        self._check_date = check_date

    @property
    def det(self):
        """Gets the det of this PayStatementDetails.

        .<br />

        :return: The det of this PayStatementDetails.
        :rtype: str
        """
        return self._det

    @det.setter
    def det(self, det):
        """Sets the det of this PayStatementDetails.

        .<br />

        :param det: The det of this PayStatementDetails.
        :type det: str
        """

        self._det = det

    @property
    def det_code(self):
        """Gets the det_code of this PayStatementDetails.

        .<br />

        :return: The det_code of this PayStatementDetails.
        :rtype: str
        """
        return self._det_code

    @det_code.setter
    def det_code(self, det_code):
        """Sets the det_code of this PayStatementDetails.

        .<br />

        :param det_code: The det_code of this PayStatementDetails.
        :type det_code: str
        """

        self._det_code = det_code

    @property
    def det_type(self):
        """Gets the det_type of this PayStatementDetails.

        .<br />

        :return: The det_type of this PayStatementDetails.
        :rtype: str
        """
        return self._det_type

    @det_type.setter
    def det_type(self, det_type):
        """Sets the det_type of this PayStatementDetails.

        .<br />

        :param det_type: The det_type of this PayStatementDetails.
        :type det_type: str
        """

        self._det_type = det_type

    @property
    def eligible_compensation(self):
        """Gets the eligible_compensation of this PayStatementDetails.

        .<br />

        :return: The eligible_compensation of this PayStatementDetails.
        :rtype: float
        """
        return self._eligible_compensation

    @eligible_compensation.setter
    def eligible_compensation(self, eligible_compensation):
        """Sets the eligible_compensation of this PayStatementDetails.

        .<br />

        :param eligible_compensation: The eligible_compensation of this PayStatementDetails.
        :type eligible_compensation: float
        """

        self._eligible_compensation = eligible_compensation

    @property
    def hours(self):
        """Gets the hours of this PayStatementDetails.

        .<br />

        :return: The hours of this PayStatementDetails.
        :rtype: float
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this PayStatementDetails.

        .<br />

        :param hours: The hours of this PayStatementDetails.
        :type hours: float
        """

        self._hours = hours

    @property
    def rate(self):
        """Gets the rate of this PayStatementDetails.

        .<br />

        :return: The rate of this PayStatementDetails.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this PayStatementDetails.

        .<br />

        :param rate: The rate of this PayStatementDetails.
        :type rate: float
        """

        self._rate = rate

    @property
    def transaction_number(self):
        """Gets the transaction_number of this PayStatementDetails.

        <br />

        :return: The transaction_number of this PayStatementDetails.
        :rtype: int
        """
        return self._transaction_number

    @transaction_number.setter
    def transaction_number(self, transaction_number):
        """Sets the transaction_number of this PayStatementDetails.

        <br />

        :param transaction_number: The transaction_number of this PayStatementDetails.
        :type transaction_number: int
        """

        self._transaction_number = transaction_number

    @property
    def transaction_type(self):
        """Gets the transaction_type of this PayStatementDetails.

        .<br />

        :return: The transaction_type of this PayStatementDetails.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this PayStatementDetails.

        .<br />

        :param transaction_type: The transaction_type of this PayStatementDetails.
        :type transaction_type: str
        """

        self._transaction_type = transaction_type

    @property
    def year(self):
        """Gets the year of this PayStatementDetails.

        .<br />

        :return: The year of this PayStatementDetails.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this PayStatementDetails.

        .<br />

        :param year: The year of this PayStatementDetails.
        :type year: int
        """

        self._year = year
