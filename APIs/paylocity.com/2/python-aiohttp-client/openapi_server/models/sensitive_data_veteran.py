# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SensitiveDataVeteran(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_veteran: str=None, veteran: str=None):
        """SensitiveDataVeteran - a model defined in OpenAPI

        :param is_veteran: The is_veteran of this SensitiveDataVeteran.
        :param veteran: The veteran of this SensitiveDataVeteran.
        """
        self.openapi_types = {
            'is_veteran': str,
            'veteran': str
        }

        self.attribute_map = {
            'is_veteran': 'isVeteran',
            'veteran': 'veteran'
        }

        self._is_veteran = is_veteran
        self._veteran = veteran

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SensitiveDataVeteran':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sensitiveData_veteran of this SensitiveDataVeteran.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_veteran(self):
        """Gets the is_veteran of this SensitiveDataVeteran.

        Indicates if the employee is a veteran.  Values include:<br  /><br  />0 = No<br  />1 = Yes<br  />2 = Prefer not to say

        :return: The is_veteran of this SensitiveDataVeteran.
        :rtype: str
        """
        return self._is_veteran

    @is_veteran.setter
    def is_veteran(self, is_veteran):
        """Sets the is_veteran of this SensitiveDataVeteran.

        Indicates if the employee is a veteran.  Values include:<br  /><br  />0 = No<br  />1 = Yes<br  />2 = Prefer not to say

        :param is_veteran: The is_veteran of this SensitiveDataVeteran.
        :type is_veteran: str
        """

        self._is_veteran = is_veteran

    @property
    def veteran(self):
        """Gets the veteran of this SensitiveDataVeteran.

        Employee's Veteran Notes<br  />Max length: 50

        :return: The veteran of this SensitiveDataVeteran.
        :rtype: str
        """
        return self._veteran

    @veteran.setter
    def veteran(self, veteran):
        """Sets the veteran of this SensitiveDataVeteran.

        Employee's Veteran Notes<br  />Max length: 50

        :param veteran: The veteran of this SensitiveDataVeteran.
        :type veteran: str
        """

        self._veteran = veteran
