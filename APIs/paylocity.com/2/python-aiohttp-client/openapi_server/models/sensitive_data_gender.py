# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SensitiveDataGender(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_pronouns: bool=None, gender_identity_description: str=None, identify_as_legal_gender: str=None, legal_gender: str=None, pronouns: str=None, sexual_orientation: str=None):
        """SensitiveDataGender - a model defined in OpenAPI

        :param display_pronouns: The display_pronouns of this SensitiveDataGender.
        :param gender_identity_description: The gender_identity_description of this SensitiveDataGender.
        :param identify_as_legal_gender: The identify_as_legal_gender of this SensitiveDataGender.
        :param legal_gender: The legal_gender of this SensitiveDataGender.
        :param pronouns: The pronouns of this SensitiveDataGender.
        :param sexual_orientation: The sexual_orientation of this SensitiveDataGender.
        """
        self.openapi_types = {
            'display_pronouns': bool,
            'gender_identity_description': str,
            'identify_as_legal_gender': str,
            'legal_gender': str,
            'pronouns': str,
            'sexual_orientation': str
        }

        self.attribute_map = {
            'display_pronouns': 'displayPronouns',
            'gender_identity_description': 'genderIdentityDescription',
            'identify_as_legal_gender': 'identifyAsLegalGender',
            'legal_gender': 'legalGender',
            'pronouns': 'pronouns',
            'sexual_orientation': 'sexualOrientation'
        }

        self._display_pronouns = display_pronouns
        self._gender_identity_description = gender_identity_description
        self._identify_as_legal_gender = identify_as_legal_gender
        self._legal_gender = legal_gender
        self._pronouns = pronouns
        self._sexual_orientation = sexual_orientation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SensitiveDataGender':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sensitiveData_gender of this SensitiveDataGender.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_pronouns(self):
        """Gets the display_pronouns of this SensitiveDataGender.

        Specifies whether employee's preferred pronouns will be displayed to co-workers in Community, Directory, etc. Values include:<br  /><br  />0 = No<br  />1 = Yes

        :return: The display_pronouns of this SensitiveDataGender.
        :rtype: bool
        """
        return self._display_pronouns

    @display_pronouns.setter
    def display_pronouns(self, display_pronouns):
        """Sets the display_pronouns of this SensitiveDataGender.

        Specifies whether employee's preferred pronouns will be displayed to co-workers in Community, Directory, etc. Values include:<br  /><br  />0 = No<br  />1 = Yes

        :param display_pronouns: The display_pronouns of this SensitiveDataGender.
        :type display_pronouns: bool
        """

        self._display_pronouns = display_pronouns

    @property
    def gender_identity_description(self):
        """Gets the gender_identity_description of this SensitiveDataGender.

        Employee's preferred or chosen gender identification.<br  />Max length: 40

        :return: The gender_identity_description of this SensitiveDataGender.
        :rtype: str
        """
        return self._gender_identity_description

    @gender_identity_description.setter
    def gender_identity_description(self, gender_identity_description):
        """Sets the gender_identity_description of this SensitiveDataGender.

        Employee's preferred or chosen gender identification.<br  />Max length: 40

        :param gender_identity_description: The gender_identity_description of this SensitiveDataGender.
        :type gender_identity_description: str
        """

        self._gender_identity_description = gender_identity_description

    @property
    def identify_as_legal_gender(self):
        """Gets the identify_as_legal_gender of this SensitiveDataGender.

        Employee's self-identification of legal gender. Numerical values include:<br  /><br  />0 = No<br  />1 = Yes<br  />2 = Prefer not to say

        :return: The identify_as_legal_gender of this SensitiveDataGender.
        :rtype: str
        """
        return self._identify_as_legal_gender

    @identify_as_legal_gender.setter
    def identify_as_legal_gender(self, identify_as_legal_gender):
        """Sets the identify_as_legal_gender of this SensitiveDataGender.

        Employee's self-identification of legal gender. Numerical values include:<br  /><br  />0 = No<br  />1 = Yes<br  />2 = Prefer not to say

        :param identify_as_legal_gender: The identify_as_legal_gender of this SensitiveDataGender.
        :type identify_as_legal_gender: str
        """

        self._identify_as_legal_gender = identify_as_legal_gender

    @property
    def legal_gender(self):
        """Gets the legal_gender of this SensitiveDataGender.

        Employee's legal gender. Values include:<br  /><br  />M = Male<br  />F = Female<br  /><br  />Valid values can be obtained from Company Codes endpoint, codeResource = legalGender

        :return: The legal_gender of this SensitiveDataGender.
        :rtype: str
        """
        return self._legal_gender

    @legal_gender.setter
    def legal_gender(self, legal_gender):
        """Sets the legal_gender of this SensitiveDataGender.

        Employee's legal gender. Values include:<br  /><br  />M = Male<br  />F = Female<br  /><br  />Valid values can be obtained from Company Codes endpoint, codeResource = legalGender

        :param legal_gender: The legal_gender of this SensitiveDataGender.
        :type legal_gender: str
        """

        self._legal_gender = legal_gender

    @property
    def pronouns(self):
        """Gets the pronouns of this SensitiveDataGender.

        Employee's preferred or chosen pronouns. Values include:<br  /><br  />He / Him / His<br  />She / Her / Hers<br  />They / Them / Theirs<br  />Prefer not to say<br  /><br  />Valid values can be obtained from Company Codes endpoint, codeResource = preferredPronouns

        :return: The pronouns of this SensitiveDataGender.
        :rtype: str
        """
        return self._pronouns

    @pronouns.setter
    def pronouns(self, pronouns):
        """Sets the pronouns of this SensitiveDataGender.

        Employee's preferred or chosen pronouns. Values include:<br  /><br  />He / Him / His<br  />She / Her / Hers<br  />They / Them / Theirs<br  />Prefer not to say<br  /><br  />Valid values can be obtained from Company Codes endpoint, codeResource = preferredPronouns

        :param pronouns: The pronouns of this SensitiveDataGender.
        :type pronouns: str
        """

        self._pronouns = pronouns

    @property
    def sexual_orientation(self):
        """Gets the sexual_orientation of this SensitiveDataGender.

        Employee's self-identification of sexual orientation. Values may include values below. Additionally, any custom value may be provided.<br  /><br  />Asexual<br  />Gay / Lesbian<br  />Heterosexual / Straight<br  />Pansexual<br  />Queer<br  />Bisexual<br  />Prefer not to say

        :return: The sexual_orientation of this SensitiveDataGender.
        :rtype: str
        """
        return self._sexual_orientation

    @sexual_orientation.setter
    def sexual_orientation(self, sexual_orientation):
        """Sets the sexual_orientation of this SensitiveDataGender.

        Employee's self-identification of sexual orientation. Values may include values below. Additionally, any custom value may be provided.<br  /><br  />Asexual<br  />Gay / Lesbian<br  />Heterosexual / Straight<br  />Pansexual<br  />Queer<br  />Bisexual<br  />Prefer not to say

        :param sexual_orientation: The sexual_orientation of this SensitiveDataGender.
        :type sexual_orientation: str
        """

        self._sexual_orientation = sexual_orientation
