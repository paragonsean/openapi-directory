# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StagedEmployeeHomeAddressInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address1: str=None, address2: str=None, city: str=None, country: str=None, county: str=None, email_address: str=None, mobile_phone: str=None, phone: str=None, postal_code: str=None, state: str=None):
        """StagedEmployeeHomeAddressInner - a model defined in OpenAPI

        :param address1: The address1 of this StagedEmployeeHomeAddressInner.
        :param address2: The address2 of this StagedEmployeeHomeAddressInner.
        :param city: The city of this StagedEmployeeHomeAddressInner.
        :param country: The country of this StagedEmployeeHomeAddressInner.
        :param county: The county of this StagedEmployeeHomeAddressInner.
        :param email_address: The email_address of this StagedEmployeeHomeAddressInner.
        :param mobile_phone: The mobile_phone of this StagedEmployeeHomeAddressInner.
        :param phone: The phone of this StagedEmployeeHomeAddressInner.
        :param postal_code: The postal_code of this StagedEmployeeHomeAddressInner.
        :param state: The state of this StagedEmployeeHomeAddressInner.
        """
        self.openapi_types = {
            'address1': str,
            'address2': str,
            'city': str,
            'country': str,
            'county': str,
            'email_address': str,
            'mobile_phone': str,
            'phone': str,
            'postal_code': str,
            'state': str
        }

        self.attribute_map = {
            'address1': 'address1',
            'address2': 'address2',
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'email_address': 'emailAddress',
            'mobile_phone': 'mobilePhone',
            'phone': 'phone',
            'postal_code': 'postalCode',
            'state': 'state'
        }

        self._address1 = address1
        self._address2 = address2
        self._city = city
        self._country = country
        self._county = county
        self._email_address = email_address
        self._mobile_phone = mobile_phone
        self._phone = phone
        self._postal_code = postal_code
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StagedEmployeeHomeAddressInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stagedEmployee_homeAddress_inner of this StagedEmployeeHomeAddressInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address1(self):
        """Gets the address1 of this StagedEmployeeHomeAddressInner.

        1st address line.<br  /> Max length: 40

        :return: The address1 of this StagedEmployeeHomeAddressInner.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this StagedEmployeeHomeAddressInner.

        1st address line.<br  /> Max length: 40

        :param address1: The address1 of this StagedEmployeeHomeAddressInner.
        :type address1: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this StagedEmployeeHomeAddressInner.

        2nd address line. <br  /> Max length: 40

        :return: The address2 of this StagedEmployeeHomeAddressInner.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this StagedEmployeeHomeAddressInner.

        2nd address line. <br  /> Max length: 40

        :param address2: The address2 of this StagedEmployeeHomeAddressInner.
        :type address2: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this StagedEmployeeHomeAddressInner.

        City.<br  /> Max length: 40

        :return: The city of this StagedEmployeeHomeAddressInner.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this StagedEmployeeHomeAddressInner.

        City.<br  /> Max length: 40

        :param city: The city of this StagedEmployeeHomeAddressInner.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this StagedEmployeeHomeAddressInner.

        Country.<br  /> Max length: 30

        :return: The country of this StagedEmployeeHomeAddressInner.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this StagedEmployeeHomeAddressInner.

        Country.<br  /> Max length: 30

        :param country: The country of this StagedEmployeeHomeAddressInner.
        :type country: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this StagedEmployeeHomeAddressInner.

        County.<br  /> Max length: 30

        :return: The county of this StagedEmployeeHomeAddressInner.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this StagedEmployeeHomeAddressInner.

        County.<br  /> Max length: 30

        :param county: The county of this StagedEmployeeHomeAddressInner.
        :type county: str
        """

        self._county = county

    @property
    def email_address(self):
        """Gets the email_address of this StagedEmployeeHomeAddressInner.

        Email. <br  />Max length: 50

        :return: The email_address of this StagedEmployeeHomeAddressInner.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this StagedEmployeeHomeAddressInner.

        Email. <br  />Max length: 50

        :param email_address: The email_address of this StagedEmployeeHomeAddressInner.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this StagedEmployeeHomeAddressInner.

        Mobile phone number.<br  /> Max length: 12

        :return: The mobile_phone of this StagedEmployeeHomeAddressInner.
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this StagedEmployeeHomeAddressInner.

        Mobile phone number.<br  /> Max length: 12

        :param mobile_phone: The mobile_phone of this StagedEmployeeHomeAddressInner.
        :type mobile_phone: str
        """

        self._mobile_phone = mobile_phone

    @property
    def phone(self):
        """Gets the phone of this StagedEmployeeHomeAddressInner.

        Phone number.<br  /> Max length: 12

        :return: The phone of this StagedEmployeeHomeAddressInner.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this StagedEmployeeHomeAddressInner.

        Phone number.<br  /> Max length: 12

        :param phone: The phone of this StagedEmployeeHomeAddressInner.
        :type phone: str
        """

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this StagedEmployeeHomeAddressInner.

        Postal code.<br  /> Max length: 10

        :return: The postal_code of this StagedEmployeeHomeAddressInner.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this StagedEmployeeHomeAddressInner.

        Postal code.<br  /> Max length: 10

        :param postal_code: The postal_code of this StagedEmployeeHomeAddressInner.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this StagedEmployeeHomeAddressInner.

        State or province.<br  /> Max length: 2

        :return: The state of this StagedEmployeeHomeAddressInner.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StagedEmployeeHomeAddressInner.

        State or province.<br  /> Max length: 2

        :param state: The state of this StagedEmployeeHomeAddressInner.
        :type state: str
        """

        self._state = state
