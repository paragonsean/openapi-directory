# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_field_definition_values_inner import CustomFieldDefinitionValuesInner
from openapi_server import util


class CustomFieldDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, default_value: str=None, is_required: bool=None, label: str=None, type: str=None, values: List[CustomFieldDefinitionValuesInner]=None):
        """CustomFieldDefinition - a model defined in OpenAPI

        :param category: The category of this CustomFieldDefinition.
        :param default_value: The default_value of this CustomFieldDefinition.
        :param is_required: The is_required of this CustomFieldDefinition.
        :param label: The label of this CustomFieldDefinition.
        :param type: The type of this CustomFieldDefinition.
        :param values: The values of this CustomFieldDefinition.
        """
        self.openapi_types = {
            'category': str,
            'default_value': str,
            'is_required': bool,
            'label': str,
            'type': str,
            'values': List[CustomFieldDefinitionValuesInner]
        }

        self.attribute_map = {
            'category': 'category',
            'default_value': 'defaultValue',
            'is_required': 'isRequired',
            'label': 'label',
            'type': 'type',
            'values': 'values'
        }

        self._category = category
        self._default_value = default_value
        self._is_required = is_required
        self._label = label
        self._type = type
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomFieldDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customFieldDefinition of this CustomFieldDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this CustomFieldDefinition.

        The custom field category.

        :return: The category of this CustomFieldDefinition.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CustomFieldDefinition.

        The custom field category.

        :param category: The category of this CustomFieldDefinition.
        :type category: str
        """

        self._category = category

    @property
    def default_value(self):
        """Gets the default_value of this CustomFieldDefinition.

        Specifies the default value of the custom field.

        :return: The default_value of this CustomFieldDefinition.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CustomFieldDefinition.

        Specifies the default value of the custom field.

        :param default_value: The default_value of this CustomFieldDefinition.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def is_required(self):
        """Gets the is_required of this CustomFieldDefinition.

        Indicates whether the custom field is required.

        :return: The is_required of this CustomFieldDefinition.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this CustomFieldDefinition.

        Indicates whether the custom field is required.

        :param is_required: The is_required of this CustomFieldDefinition.
        :type is_required: bool
        """

        self._is_required = is_required

    @property
    def label(self):
        """Gets the label of this CustomFieldDefinition.

        The custom field label.

        :return: The label of this CustomFieldDefinition.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CustomFieldDefinition.

        The custom field label.

        :param label: The label of this CustomFieldDefinition.
        :type label: str
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this CustomFieldDefinition.

        The custom field type.

        :return: The type of this CustomFieldDefinition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomFieldDefinition.

        The custom field type.

        :param type: The type of this CustomFieldDefinition.
        :type type: str
        """

        self._type = type

    @property
    def values(self):
        """Gets the values of this CustomFieldDefinition.

        A set of values that are applicable to the custom field.

        :return: The values of this CustomFieldDefinition.
        :rtype: List[CustomFieldDefinitionValuesInner]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this CustomFieldDefinition.

        A set of values that are applicable to the custom field.

        :param values: The values of this CustomFieldDefinition.
        :type values: List[CustomFieldDefinitionValuesInner]
        """

        self._values = values
