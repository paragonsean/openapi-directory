# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmergencyContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address1: str=None, address2: str=None, city: str=None, country: str=None, county: str=None, email: str=None, first_name: str=None, home_phone: str=None, last_name: str=None, mobile_phone: str=None, notes: str=None, pager: str=None, primary_phone: str=None, priority: str=None, relationship: str=None, state: str=None, sync_employee_info: bool=None, work_extension: str=None, work_phone: str=None, zip: str=None):
        """EmergencyContact - a model defined in OpenAPI

        :param address1: The address1 of this EmergencyContact.
        :param address2: The address2 of this EmergencyContact.
        :param city: The city of this EmergencyContact.
        :param country: The country of this EmergencyContact.
        :param county: The county of this EmergencyContact.
        :param email: The email of this EmergencyContact.
        :param first_name: The first_name of this EmergencyContact.
        :param home_phone: The home_phone of this EmergencyContact.
        :param last_name: The last_name of this EmergencyContact.
        :param mobile_phone: The mobile_phone of this EmergencyContact.
        :param notes: The notes of this EmergencyContact.
        :param pager: The pager of this EmergencyContact.
        :param primary_phone: The primary_phone of this EmergencyContact.
        :param priority: The priority of this EmergencyContact.
        :param relationship: The relationship of this EmergencyContact.
        :param state: The state of this EmergencyContact.
        :param sync_employee_info: The sync_employee_info of this EmergencyContact.
        :param work_extension: The work_extension of this EmergencyContact.
        :param work_phone: The work_phone of this EmergencyContact.
        :param zip: The zip of this EmergencyContact.
        """
        self.openapi_types = {
            'address1': str,
            'address2': str,
            'city': str,
            'country': str,
            'county': str,
            'email': str,
            'first_name': str,
            'home_phone': str,
            'last_name': str,
            'mobile_phone': str,
            'notes': str,
            'pager': str,
            'primary_phone': str,
            'priority': str,
            'relationship': str,
            'state': str,
            'sync_employee_info': bool,
            'work_extension': str,
            'work_phone': str,
            'zip': str
        }

        self.attribute_map = {
            'address1': 'address1',
            'address2': 'address2',
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'email': 'email',
            'first_name': 'firstName',
            'home_phone': 'homePhone',
            'last_name': 'lastName',
            'mobile_phone': 'mobilePhone',
            'notes': 'notes',
            'pager': 'pager',
            'primary_phone': 'primaryPhone',
            'priority': 'priority',
            'relationship': 'relationship',
            'state': 'state',
            'sync_employee_info': 'syncEmployeeInfo',
            'work_extension': 'workExtension',
            'work_phone': 'workPhone',
            'zip': 'zip'
        }

        self._address1 = address1
        self._address2 = address2
        self._city = city
        self._country = country
        self._county = county
        self._email = email
        self._first_name = first_name
        self._home_phone = home_phone
        self._last_name = last_name
        self._mobile_phone = mobile_phone
        self._notes = notes
        self._pager = pager
        self._primary_phone = primary_phone
        self._priority = priority
        self._relationship = relationship
        self._state = state
        self._sync_employee_info = sync_employee_info
        self._work_extension = work_extension
        self._work_phone = work_phone
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmergencyContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The emergencyContact of this EmergencyContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address1(self):
        """Gets the address1 of this EmergencyContact.

        1st address line.

        :return: The address1 of this EmergencyContact.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this EmergencyContact.

        1st address line.

        :param address1: The address1 of this EmergencyContact.
        :type address1: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this EmergencyContact.

        2nd address line.

        :return: The address2 of this EmergencyContact.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this EmergencyContact.

        2nd address line.

        :param address2: The address2 of this EmergencyContact.
        :type address2: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this EmergencyContact.

        City.

        :return: The city of this EmergencyContact.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this EmergencyContact.

        City.

        :param city: The city of this EmergencyContact.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this EmergencyContact.

        County.

        :return: The country of this EmergencyContact.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EmergencyContact.

        County.

        :param country: The country of this EmergencyContact.
        :type country: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this EmergencyContact.

        Country.  Must be a valid 3 character country code.  Common values are *USA* (United States), *CAN* (Canada).

        :return: The county of this EmergencyContact.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this EmergencyContact.

        Country.  Must be a valid 3 character country code.  Common values are *USA* (United States), *CAN* (Canada).

        :param county: The county of this EmergencyContact.
        :type county: str
        """

        self._county = county

    @property
    def email(self):
        """Gets the email of this EmergencyContact.

        Contact email.  Must be valid email address format.

        :return: The email of this EmergencyContact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EmergencyContact.

        Contact email.  Must be valid email address format.

        :param email: The email of this EmergencyContact.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this EmergencyContact.

        Required. Contact first name. <br  />Max length: 40

        :return: The first_name of this EmergencyContact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EmergencyContact.

        Required. Contact first name. <br  />Max length: 40

        :param first_name: The first_name of this EmergencyContact.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def home_phone(self):
        """Gets the home_phone of this EmergencyContact.

        Contact Home Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.

        :return: The home_phone of this EmergencyContact.
        :rtype: str
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this EmergencyContact.

        Contact Home Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.

        :param home_phone: The home_phone of this EmergencyContact.
        :type home_phone: str
        """

        self._home_phone = home_phone

    @property
    def last_name(self):
        """Gets the last_name of this EmergencyContact.

        Required. Contact last name. <br  />Max length: 40

        :return: The last_name of this EmergencyContact.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this EmergencyContact.

        Required. Contact last name. <br  />Max length: 40

        :param last_name: The last_name of this EmergencyContact.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this EmergencyContact.

        Contact Mobile Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.

        :return: The mobile_phone of this EmergencyContact.
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this EmergencyContact.

        Contact Mobile Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.

        :param mobile_phone: The mobile_phone of this EmergencyContact.
        :type mobile_phone: str
        """

        self._mobile_phone = mobile_phone

    @property
    def notes(self):
        """Gets the notes of this EmergencyContact.

        Notes. <br  />Max length: 1000

        :return: The notes of this EmergencyContact.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this EmergencyContact.

        Notes. <br  />Max length: 1000

        :param notes: The notes of this EmergencyContact.
        :type notes: str
        """

        self._notes = notes

    @property
    def pager(self):
        """Gets the pager of this EmergencyContact.

        Contact Pager.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.

        :return: The pager of this EmergencyContact.
        :rtype: str
        """
        return self._pager

    @pager.setter
    def pager(self, pager):
        """Sets the pager of this EmergencyContact.

        Contact Pager.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.

        :param pager: The pager of this EmergencyContact.
        :type pager: str
        """

        self._pager = pager

    @property
    def primary_phone(self):
        """Gets the primary_phone of this EmergencyContact.

        Required. Contact primary phone type.  Must match Company setup.  Valid  values are H (Home), M (Mobile), P (Pager), W (Work)

        :return: The primary_phone of this EmergencyContact.
        :rtype: str
        """
        return self._primary_phone

    @primary_phone.setter
    def primary_phone(self, primary_phone):
        """Sets the primary_phone of this EmergencyContact.

        Required. Contact primary phone type.  Must match Company setup.  Valid  values are H (Home), M (Mobile), P (Pager), W (Work)

        :param primary_phone: The primary_phone of this EmergencyContact.
        :type primary_phone: str
        """

        self._primary_phone = primary_phone

    @property
    def priority(self):
        """Gets the priority of this EmergencyContact.

        Required. Contact priority. Valid values are *P* (Primary) or *S* (Secondary).

        :return: The priority of this EmergencyContact.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this EmergencyContact.

        Required. Contact priority. Valid values are *P* (Primary) or *S* (Secondary).

        :param priority: The priority of this EmergencyContact.
        :type priority: str
        """

        self._priority = priority

    @property
    def relationship(self):
        """Gets the relationship of this EmergencyContact.

        Required. Contact relationship.  Must match Company setup.  Common values are Spouse, Mother, Father.

        :return: The relationship of this EmergencyContact.
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this EmergencyContact.

        Required. Contact relationship.  Must match Company setup.  Common values are Spouse, Mother, Father.

        :param relationship: The relationship of this EmergencyContact.
        :type relationship: str
        """

        self._relationship = relationship

    @property
    def state(self):
        """Gets the state of this EmergencyContact.

        State or Province.  If U.S. address, must be valid 2 character state code.  Common values are *IL* (Illinois), *CA* (California).

        :return: The state of this EmergencyContact.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EmergencyContact.

        State or Province.  If U.S. address, must be valid 2 character state code.  Common values are *IL* (Illinois), *CA* (California).

        :param state: The state of this EmergencyContact.
        :type state: str
        """

        self._state = state

    @property
    def sync_employee_info(self):
        """Gets the sync_employee_info of this EmergencyContact.

        Valid values are *true* or *false*.

        :return: The sync_employee_info of this EmergencyContact.
        :rtype: bool
        """
        return self._sync_employee_info

    @sync_employee_info.setter
    def sync_employee_info(self, sync_employee_info):
        """Sets the sync_employee_info of this EmergencyContact.

        Valid values are *true* or *false*.

        :param sync_employee_info: The sync_employee_info of this EmergencyContact.
        :type sync_employee_info: bool
        """

        self._sync_employee_info = sync_employee_info

    @property
    def work_extension(self):
        """Gets the work_extension of this EmergencyContact.

        Work Extension.

        :return: The work_extension of this EmergencyContact.
        :rtype: str
        """
        return self._work_extension

    @work_extension.setter
    def work_extension(self, work_extension):
        """Sets the work_extension of this EmergencyContact.

        Work Extension.

        :param work_extension: The work_extension of this EmergencyContact.
        :type work_extension: str
        """

        self._work_extension = work_extension

    @property
    def work_phone(self):
        """Gets the work_phone of this EmergencyContact.

        Contact Work Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.

        :return: The work_phone of this EmergencyContact.
        :rtype: str
        """
        return self._work_phone

    @work_phone.setter
    def work_phone(self, work_phone):
        """Sets the work_phone of this EmergencyContact.

        Contact Work Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.

        :param work_phone: The work_phone of this EmergencyContact.
        :type work_phone: str
        """

        self._work_phone = work_phone

    @property
    def zip(self):
        """Gets the zip of this EmergencyContact.

        Postal code.  If U.S. address, must be a valid zip code.

        :return: The zip of this EmergencyContact.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this EmergencyContact.

        Postal code.  If U.S. address, must be a valid zip code.

        :param zip: The zip of this EmergencyContact.
        :type zip: str
        """

        self._zip = zip
