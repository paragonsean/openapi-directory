# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmployeeBenefitSetup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benefit_class: str=None, benefit_class_effective_date: str=None, benefit_salary: float=None, benefit_salary_effective_date: str=None, do_not_apply_administrative_period: bool=None, is_measure_aca_eligibility: bool=None):
        """EmployeeBenefitSetup - a model defined in OpenAPI

        :param benefit_class: The benefit_class of this EmployeeBenefitSetup.
        :param benefit_class_effective_date: The benefit_class_effective_date of this EmployeeBenefitSetup.
        :param benefit_salary: The benefit_salary of this EmployeeBenefitSetup.
        :param benefit_salary_effective_date: The benefit_salary_effective_date of this EmployeeBenefitSetup.
        :param do_not_apply_administrative_period: The do_not_apply_administrative_period of this EmployeeBenefitSetup.
        :param is_measure_aca_eligibility: The is_measure_aca_eligibility of this EmployeeBenefitSetup.
        """
        self.openapi_types = {
            'benefit_class': str,
            'benefit_class_effective_date': str,
            'benefit_salary': float,
            'benefit_salary_effective_date': str,
            'do_not_apply_administrative_period': bool,
            'is_measure_aca_eligibility': bool
        }

        self.attribute_map = {
            'benefit_class': 'benefitClass',
            'benefit_class_effective_date': 'benefitClassEffectiveDate',
            'benefit_salary': 'benefitSalary',
            'benefit_salary_effective_date': 'benefitSalaryEffectiveDate',
            'do_not_apply_administrative_period': 'doNotApplyAdministrativePeriod',
            'is_measure_aca_eligibility': 'isMeasureAcaEligibility'
        }

        self._benefit_class = benefit_class
        self._benefit_class_effective_date = benefit_class_effective_date
        self._benefit_salary = benefit_salary
        self._benefit_salary_effective_date = benefit_salary_effective_date
        self._do_not_apply_administrative_period = do_not_apply_administrative_period
        self._is_measure_aca_eligibility = is_measure_aca_eligibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmployeeBenefitSetup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The employee_benefitSetup of this EmployeeBenefitSetup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benefit_class(self):
        """Gets the benefit_class of this EmployeeBenefitSetup.

        Benefit Class code. Values are configured in Web Pay Company > Setup > Benefits > Classes.<br  />Max length: 30

        :return: The benefit_class of this EmployeeBenefitSetup.
        :rtype: str
        """
        return self._benefit_class

    @benefit_class.setter
    def benefit_class(self, benefit_class):
        """Sets the benefit_class of this EmployeeBenefitSetup.

        Benefit Class code. Values are configured in Web Pay Company > Setup > Benefits > Classes.<br  />Max length: 30

        :param benefit_class: The benefit_class of this EmployeeBenefitSetup.
        :type benefit_class: str
        """

        self._benefit_class = benefit_class

    @property
    def benefit_class_effective_date(self):
        """Gets the benefit_class_effective_date of this EmployeeBenefitSetup.

        Date when Benefit Class takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :return: The benefit_class_effective_date of this EmployeeBenefitSetup.
        :rtype: str
        """
        return self._benefit_class_effective_date

    @benefit_class_effective_date.setter
    def benefit_class_effective_date(self, benefit_class_effective_date):
        """Sets the benefit_class_effective_date of this EmployeeBenefitSetup.

        Date when Benefit Class takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :param benefit_class_effective_date: The benefit_class_effective_date of this EmployeeBenefitSetup.
        :type benefit_class_effective_date: str
        """

        self._benefit_class_effective_date = benefit_class_effective_date

    @property
    def benefit_salary(self):
        """Gets the benefit_salary of this EmployeeBenefitSetup.

        Salary used to configure benefits.<br  />Decimal(12,2)

        :return: The benefit_salary of this EmployeeBenefitSetup.
        :rtype: float
        """
        return self._benefit_salary

    @benefit_salary.setter
    def benefit_salary(self, benefit_salary):
        """Sets the benefit_salary of this EmployeeBenefitSetup.

        Salary used to configure benefits.<br  />Decimal(12,2)

        :param benefit_salary: The benefit_salary of this EmployeeBenefitSetup.
        :type benefit_salary: float
        """

        self._benefit_salary = benefit_salary

    @property
    def benefit_salary_effective_date(self):
        """Gets the benefit_salary_effective_date of this EmployeeBenefitSetup.

        Date when Benefit Salary takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :return: The benefit_salary_effective_date of this EmployeeBenefitSetup.
        :rtype: str
        """
        return self._benefit_salary_effective_date

    @benefit_salary_effective_date.setter
    def benefit_salary_effective_date(self, benefit_salary_effective_date):
        """Sets the benefit_salary_effective_date of this EmployeeBenefitSetup.

        Date when Benefit Salary takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.

        :param benefit_salary_effective_date: The benefit_salary_effective_date of this EmployeeBenefitSetup.
        :type benefit_salary_effective_date: str
        """

        self._benefit_salary_effective_date = benefit_salary_effective_date

    @property
    def do_not_apply_administrative_period(self):
        """Gets the do_not_apply_administrative_period of this EmployeeBenefitSetup.

        Applicable only for HR Enhanced clients and Benefit Classes with ACA Employment Type of Full Time.

        :return: The do_not_apply_administrative_period of this EmployeeBenefitSetup.
        :rtype: bool
        """
        return self._do_not_apply_administrative_period

    @do_not_apply_administrative_period.setter
    def do_not_apply_administrative_period(self, do_not_apply_administrative_period):
        """Sets the do_not_apply_administrative_period of this EmployeeBenefitSetup.

        Applicable only for HR Enhanced clients and Benefit Classes with ACA Employment Type of Full Time.

        :param do_not_apply_administrative_period: The do_not_apply_administrative_period of this EmployeeBenefitSetup.
        :type do_not_apply_administrative_period: bool
        """

        self._do_not_apply_administrative_period = do_not_apply_administrative_period

    @property
    def is_measure_aca_eligibility(self):
        """Gets the is_measure_aca_eligibility of this EmployeeBenefitSetup.

        Only valid for HR Enhanced clients and Benefit Classes that are ACA Employment Type of Full Time.

        :return: The is_measure_aca_eligibility of this EmployeeBenefitSetup.
        :rtype: bool
        """
        return self._is_measure_aca_eligibility

    @is_measure_aca_eligibility.setter
    def is_measure_aca_eligibility(self, is_measure_aca_eligibility):
        """Sets the is_measure_aca_eligibility of this EmployeeBenefitSetup.

        Only valid for HR Enhanced clients and Benefit Classes that are ACA Employment Type of Full Time.

        :param is_measure_aca_eligibility: The is_measure_aca_eligibility of this EmployeeBenefitSetup.
        :type is_measure_aca_eligibility: bool
        """

        self._is_measure_aca_eligibility = is_measure_aca_eligibility
