/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncidentTransition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncidentTransition::OAIIncidentTransition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncidentTransition::OAIIncidentTransition() {
    this->initializeModel();
}

OAIIncidentTransition::~OAIIncidentTransition() {}

void OAIIncidentTransition::initializeModel() {

    m_alert_id_isSet = false;
    m_alert_id_isValid = false;

    m_alert_url_isSet = false;
    m_alert_url_isValid = false;

    m_at_isSet = false;
    m_at_isValid = false;

    m_by_isSet = false;
    m_by_isValid = false;

    m_manually_isSet = false;
    m_manually_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIIncidentTransition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncidentTransition::fromJsonObject(QJsonObject json) {

    m_alert_id_isValid = ::OpenAPI::fromJsonValue(m_alert_id, json[QString("alertId")]);
    m_alert_id_isSet = !json[QString("alertId")].isNull() && m_alert_id_isValid;

    m_alert_url_isValid = ::OpenAPI::fromJsonValue(m_alert_url, json[QString("alertUrl")]);
    m_alert_url_isSet = !json[QString("alertUrl")].isNull() && m_alert_url_isValid;

    m_at_isValid = ::OpenAPI::fromJsonValue(m_at, json[QString("at")]);
    m_at_isSet = !json[QString("at")].isNull() && m_at_isValid;

    m_by_isValid = ::OpenAPI::fromJsonValue(m_by, json[QString("by")]);
    m_by_isSet = !json[QString("by")].isNull() && m_by_isValid;

    m_manually_isValid = ::OpenAPI::fromJsonValue(m_manually, json[QString("manually")]);
    m_manually_isSet = !json[QString("manually")].isNull() && m_manually_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIIncidentTransition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncidentTransition::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_id_isSet) {
        obj.insert(QString("alertId"), ::OpenAPI::toJsonValue(m_alert_id));
    }
    if (m_alert_url_isSet) {
        obj.insert(QString("alertUrl"), ::OpenAPI::toJsonValue(m_alert_url));
    }
    if (m_at_isSet) {
        obj.insert(QString("at"), ::OpenAPI::toJsonValue(m_at));
    }
    if (m_by_isSet) {
        obj.insert(QString("by"), ::OpenAPI::toJsonValue(m_by));
    }
    if (m_manually_isSet) {
        obj.insert(QString("manually"), ::OpenAPI::toJsonValue(m_manually));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIIncidentTransition::getAlertId() const {
    return m_alert_id;
}
void OAIIncidentTransition::setAlertId(const QString &alert_id) {
    m_alert_id = alert_id;
    m_alert_id_isSet = true;
}

bool OAIIncidentTransition::is_alert_id_Set() const{
    return m_alert_id_isSet;
}

bool OAIIncidentTransition::is_alert_id_Valid() const{
    return m_alert_id_isValid;
}

QString OAIIncidentTransition::getAlertUrl() const {
    return m_alert_url;
}
void OAIIncidentTransition::setAlertUrl(const QString &alert_url) {
    m_alert_url = alert_url;
    m_alert_url_isSet = true;
}

bool OAIIncidentTransition::is_alert_url_Set() const{
    return m_alert_url_isSet;
}

bool OAIIncidentTransition::is_alert_url_Valid() const{
    return m_alert_url_isValid;
}

QString OAIIncidentTransition::getAt() const {
    return m_at;
}
void OAIIncidentTransition::setAt(const QString &at) {
    m_at = at;
    m_at_isSet = true;
}

bool OAIIncidentTransition::is_at_Set() const{
    return m_at_isSet;
}

bool OAIIncidentTransition::is_at_Valid() const{
    return m_at_isValid;
}

QString OAIIncidentTransition::getBy() const {
    return m_by;
}
void OAIIncidentTransition::setBy(const QString &by) {
    m_by = by;
    m_by_isSet = true;
}

bool OAIIncidentTransition::is_by_Set() const{
    return m_by_isSet;
}

bool OAIIncidentTransition::is_by_Valid() const{
    return m_by_isValid;
}

bool OAIIncidentTransition::isManually() const {
    return m_manually;
}
void OAIIncidentTransition::setManually(const bool &manually) {
    m_manually = manually;
    m_manually_isSet = true;
}

bool OAIIncidentTransition::is_manually_Set() const{
    return m_manually_isSet;
}

bool OAIIncidentTransition::is_manually_Valid() const{
    return m_manually_isValid;
}

QString OAIIncidentTransition::getMessage() const {
    return m_message;
}
void OAIIncidentTransition::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIIncidentTransition::is_message_Set() const{
    return m_message_isSet;
}

bool OAIIncidentTransition::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIIncidentTransition::getName() const {
    return m_name;
}
void OAIIncidentTransition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIncidentTransition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIncidentTransition::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIIncidentTransition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manually_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncidentTransition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
