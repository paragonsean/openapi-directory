/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncidentsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIIncidentsApi::OAIIncidentsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIIncidentsApi::~OAIIncidentsApi() {
}

void OAIIncidentsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.victorops.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("apiPublicV1IncidentsAckPatch", defaultConf);
    _serverIndices.insert("apiPublicV1IncidentsAckPatch", 0);
    _serverConfigs.insert("apiPublicV1IncidentsByUserAckPatch", defaultConf);
    _serverIndices.insert("apiPublicV1IncidentsByUserAckPatch", 0);
    _serverConfigs.insert("apiPublicV1IncidentsByUserResolvePatch", defaultConf);
    _serverIndices.insert("apiPublicV1IncidentsByUserResolvePatch", 0);
    _serverConfigs.insert("apiPublicV1IncidentsGet", defaultConf);
    _serverIndices.insert("apiPublicV1IncidentsGet", 0);
    _serverConfigs.insert("apiPublicV1IncidentsPost", defaultConf);
    _serverIndices.insert("apiPublicV1IncidentsPost", 0);
    _serverConfigs.insert("apiPublicV1IncidentsReroutePost", defaultConf);
    _serverIndices.insert("apiPublicV1IncidentsReroutePost", 0);
    _serverConfigs.insert("apiPublicV1IncidentsResolvePatch", defaultConf);
    _serverIndices.insert("apiPublicV1IncidentsResolvePatch", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIIncidentsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIIncidentsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIIncidentsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIIncidentsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIIncidentsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIIncidentsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIIncidentsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIIncidentsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIIncidentsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIIncidentsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIIncidentsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIIncidentsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIIncidentsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIIncidentsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIIncidentsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIIncidentsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIIncidentsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIIncidentsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIIncidentsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIIncidentsApi::apiPublicV1IncidentsAckPatch(const QString &x_vo_api_id, const QString &x_vo_api_key, const OAIAckOrResolveRequest &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1IncidentsAckPatch"][_serverIndices.value("apiPublicV1IncidentsAckPatch")].URL()+"/api-public/v1/incidents/ack");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIncidentsApi::apiPublicV1IncidentsAckPatchCallback);
    connect(this, &OAIIncidentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIncidentsApi::apiPublicV1IncidentsAckPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAckOrResolveResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1IncidentsAckPatchSignal(output);
        Q_EMIT apiPublicV1IncidentsAckPatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1IncidentsAckPatchSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsAckPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1IncidentsAckPatchSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsAckPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIncidentsApi::apiPublicV1IncidentsByUserAckPatch(const QString &x_vo_api_id, const QString &x_vo_api_key, const OAIAckOrResolveByUserRequest &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1IncidentsByUserAckPatch"][_serverIndices.value("apiPublicV1IncidentsByUserAckPatch")].URL()+"/api-public/v1/incidents/byUser/ack");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIncidentsApi::apiPublicV1IncidentsByUserAckPatchCallback);
    connect(this, &OAIIncidentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIncidentsApi::apiPublicV1IncidentsByUserAckPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAckOrResolveResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1IncidentsByUserAckPatchSignal(output);
        Q_EMIT apiPublicV1IncidentsByUserAckPatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1IncidentsByUserAckPatchSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsByUserAckPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1IncidentsByUserAckPatchSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsByUserAckPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIncidentsApi::apiPublicV1IncidentsByUserResolvePatch(const QString &x_vo_api_id, const QString &x_vo_api_key, const OAIAckOrResolveByUserRequest &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1IncidentsByUserResolvePatch"][_serverIndices.value("apiPublicV1IncidentsByUserResolvePatch")].URL()+"/api-public/v1/incidents/byUser/resolve");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIncidentsApi::apiPublicV1IncidentsByUserResolvePatchCallback);
    connect(this, &OAIIncidentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIncidentsApi::apiPublicV1IncidentsByUserResolvePatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAckOrResolveResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1IncidentsByUserResolvePatchSignal(output);
        Q_EMIT apiPublicV1IncidentsByUserResolvePatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1IncidentsByUserResolvePatchSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsByUserResolvePatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1IncidentsByUserResolvePatchSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsByUserResolvePatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIncidentsApi::apiPublicV1IncidentsGet(const QString &x_vo_api_id, const QString &x_vo_api_key) {
    QString fullPath = QString(_serverConfigs["apiPublicV1IncidentsGet"][_serverIndices.value("apiPublicV1IncidentsGet")].URL()+"/api-public/v1/incidents");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIncidentsApi::apiPublicV1IncidentsGetCallback);
    connect(this, &OAIIncidentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIncidentsApi::apiPublicV1IncidentsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIActiveIncidentList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1IncidentsGetSignal(output);
        Q_EMIT apiPublicV1IncidentsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1IncidentsGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1IncidentsGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIncidentsApi::apiPublicV1IncidentsPost(const QString &x_vo_api_id, const QString &x_vo_api_key, const OAICreateIncidentRequest &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1IncidentsPost"][_serverIndices.value("apiPublicV1IncidentsPost")].URL()+"/api-public/v1/incidents");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIncidentsApi::apiPublicV1IncidentsPostCallback);
    connect(this, &OAIIncidentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIncidentsApi::apiPublicV1IncidentsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreatedIncident output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1IncidentsPostSignal(output);
        Q_EMIT apiPublicV1IncidentsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1IncidentsPostSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1IncidentsPostSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIncidentsApi::apiPublicV1IncidentsReroutePost(const QString &x_vo_api_id, const QString &x_vo_api_key, const OAIRerouteCollection &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1IncidentsReroutePost"][_serverIndices.value("apiPublicV1IncidentsReroutePost")].URL()+"/api-public/v1/incidents/reroute");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIncidentsApi::apiPublicV1IncidentsReroutePostCallback);
    connect(this, &OAIIncidentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIncidentsApi::apiPublicV1IncidentsReroutePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRerouteStatusResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1IncidentsReroutePostSignal(output);
        Q_EMIT apiPublicV1IncidentsReroutePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1IncidentsReroutePostSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsReroutePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1IncidentsReroutePostSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsReroutePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIncidentsApi::apiPublicV1IncidentsResolvePatch(const QString &x_vo_api_id, const QString &x_vo_api_key, const OAIAckOrResolveRequest &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1IncidentsResolvePatch"][_serverIndices.value("apiPublicV1IncidentsResolvePatch")].URL()+"/api-public/v1/incidents/resolve");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIncidentsApi::apiPublicV1IncidentsResolvePatchCallback);
    connect(this, &OAIIncidentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIncidentsApi::apiPublicV1IncidentsResolvePatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAckOrResolveResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1IncidentsResolvePatchSignal(output);
        Q_EMIT apiPublicV1IncidentsResolvePatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1IncidentsResolvePatchSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsResolvePatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1IncidentsResolvePatchSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1IncidentsResolvePatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIncidentsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
