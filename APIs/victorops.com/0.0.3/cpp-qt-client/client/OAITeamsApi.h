/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeamsApi_H
#define OAI_OAITeamsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddTeamMemberPayload.h"
#include "OAIAddTeamPayload.h"
#include "OAIEscalationPolicyList.h"
#include "OAIListTeamMembersResponse.h"
#include "OAIRemoveTeamMemberPayload.h"
#include "OAITeamAdminsResponse.h"
#include "OAITeamDetail.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeamsApi : public QObject {
    Q_OBJECT

public:
    OAITeamsApi(const int timeOut = 0);
    ~OAITeamsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    */
    virtual void apiPublicV1TeamGet(const QString &x_vo_api_id, const QString &x_vo_api_key);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  body OAIAddTeamPayload [required]
    */
    virtual void apiPublicV1TeamPost(const QString &x_vo_api_id, const QString &x_vo_api_key, const OAIAddTeamPayload &body);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  team QString [required]
    */
    virtual void apiPublicV1TeamTeamAdminsGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  team QString [required]
    */
    virtual void apiPublicV1TeamTeamDelete(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  team QString [required]
    */
    virtual void apiPublicV1TeamTeamGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  team QString [required]
    */
    virtual void apiPublicV1TeamTeamMembersGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  team QString [required]
    * @param[in]  body OAIAddTeamMemberPayload [required]
    */
    virtual void apiPublicV1TeamTeamMembersPost(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team, const OAIAddTeamMemberPayload &body);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  team QString [required]
    * @param[in]  user QString [required]
    * @param[in]  body OAIRemoveTeamMemberPayload [required]
    */
    virtual void apiPublicV1TeamTeamMembersUserDelete(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team, const QString &user, const OAIRemoveTeamMemberPayload &body);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  team QString [required]
    */
    virtual void apiPublicV1TeamTeamPoliciesGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  team QString [required]
    * @param[in]  body OAIAddTeamPayload [required]
    */
    virtual void apiPublicV1TeamTeamPut(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team, const OAIAddTeamPayload &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiPublicV1TeamGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamPostCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamTeamAdminsGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamTeamDeleteCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamTeamGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamTeamMembersGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamTeamMembersPostCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamTeamMembersUserDeleteCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamTeamPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamTeamPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiPublicV1TeamGetSignal(QList<OAITeamDetail> summary);
    void apiPublicV1TeamPostSignal(OAITeamDetail summary);
    void apiPublicV1TeamTeamAdminsGetSignal(OAITeamAdminsResponse summary);
    void apiPublicV1TeamTeamDeleteSignal();
    void apiPublicV1TeamTeamGetSignal(OAITeamDetail summary);
    void apiPublicV1TeamTeamMembersGetSignal(OAIListTeamMembersResponse summary);
    void apiPublicV1TeamTeamMembersPostSignal(OAIListTeamMembersResponse summary);
    void apiPublicV1TeamTeamMembersUserDeleteSignal();
    void apiPublicV1TeamTeamPoliciesGetSignal(OAIEscalationPolicyList summary);
    void apiPublicV1TeamTeamPutSignal(OAITeamDetail summary);


    void apiPublicV1TeamGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamDetail> summary);
    void apiPublicV1TeamPostSignalFull(OAIHttpRequestWorker *worker, OAITeamDetail summary);
    void apiPublicV1TeamTeamAdminsGetSignalFull(OAIHttpRequestWorker *worker, OAITeamAdminsResponse summary);
    void apiPublicV1TeamTeamDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamTeamGetSignalFull(OAIHttpRequestWorker *worker, OAITeamDetail summary);
    void apiPublicV1TeamTeamMembersGetSignalFull(OAIHttpRequestWorker *worker, OAIListTeamMembersResponse summary);
    void apiPublicV1TeamTeamMembersPostSignalFull(OAIHttpRequestWorker *worker, OAIListTeamMembersResponse summary);
    void apiPublicV1TeamTeamMembersUserDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamTeamPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIEscalationPolicyList summary);
    void apiPublicV1TeamTeamPutSignalFull(OAIHttpRequestWorker *worker, OAITeamDetail summary);

    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamGetSignalError() instead")
    void apiPublicV1TeamGetSignalE(QList<OAITeamDetail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamGetSignalError(QList<OAITeamDetail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamPostSignalError() instead")
    void apiPublicV1TeamPostSignalE(OAITeamDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamPostSignalError(OAITeamDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamAdminsGetSignalError() instead")
    void apiPublicV1TeamTeamAdminsGetSignalE(OAITeamAdminsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamAdminsGetSignalError(OAITeamAdminsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamDeleteSignalError() instead")
    void apiPublicV1TeamTeamDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamGetSignalError() instead")
    void apiPublicV1TeamTeamGetSignalE(OAITeamDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamGetSignalError(OAITeamDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamMembersGetSignalError() instead")
    void apiPublicV1TeamTeamMembersGetSignalE(OAIListTeamMembersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamMembersGetSignalError(OAIListTeamMembersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamMembersPostSignalError() instead")
    void apiPublicV1TeamTeamMembersPostSignalE(OAIListTeamMembersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamMembersPostSignalError(OAIListTeamMembersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamMembersUserDeleteSignalError() instead")
    void apiPublicV1TeamTeamMembersUserDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamMembersUserDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamPoliciesGetSignalError() instead")
    void apiPublicV1TeamTeamPoliciesGetSignalE(OAIEscalationPolicyList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamPoliciesGetSignalError(OAIEscalationPolicyList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamPutSignalError() instead")
    void apiPublicV1TeamTeamPutSignalE(OAITeamDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamPutSignalError(OAITeamDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamGetSignalErrorFull() instead")
    void apiPublicV1TeamGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamPostSignalErrorFull() instead")
    void apiPublicV1TeamPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamAdminsGetSignalErrorFull() instead")
    void apiPublicV1TeamTeamAdminsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamAdminsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamDeleteSignalErrorFull() instead")
    void apiPublicV1TeamTeamDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamGetSignalErrorFull() instead")
    void apiPublicV1TeamTeamGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamMembersGetSignalErrorFull() instead")
    void apiPublicV1TeamTeamMembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamMembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamMembersPostSignalErrorFull() instead")
    void apiPublicV1TeamTeamMembersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamMembersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamMembersUserDeleteSignalErrorFull() instead")
    void apiPublicV1TeamTeamMembersUserDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamMembersUserDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamPoliciesGetSignalErrorFull() instead")
    void apiPublicV1TeamTeamPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamPutSignalErrorFull() instead")
    void apiPublicV1TeamTeamPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
