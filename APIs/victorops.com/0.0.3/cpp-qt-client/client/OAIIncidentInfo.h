/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIncidentInfo.h
 *
 * Incidents contain the following fields (all should be considered optional)
 */

#ifndef OAIIncidentInfo_H
#define OAIIncidentInfo_H

#include <QJsonObject>

#include "OAIAckUser.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAckUser;

class OAIIncidentInfo : public OAIObject {
public:
    OAIIncidentInfo();
    OAIIncidentInfo(QString json);
    ~OAIIncidentInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAckTime() const;
    void setAckTime(const QString &ack_time);
    bool is_ack_time_Set() const;
    bool is_ack_time_Valid() const;

    OAIAckUser getAckUser() const;
    void setAckUser(const OAIAckUser &ack_user);
    bool is_ack_user_Set() const;
    bool is_ack_user_Valid() const;

    QString getAckUserId() const;
    void setAckUserId(const QString &ack_user_id);
    bool is_ack_user_id_Set() const;
    bool is_ack_user_id_Valid() const;

    double getAlertCount() const;
    void setAlertCount(const double &alert_count);
    bool is_alert_count_Set() const;
    bool is_alert_count_Valid() const;

    QString getCurrentPhase() const;
    void setCurrentPhase(const QString &current_phase);
    bool is_current_phase_Set() const;
    bool is_current_phase_Valid() const;

    QString getEndTime() const;
    void setEndTime(const QString &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getEntityDispName() const;
    void setEntityDispName(const QString &entity_disp_name);
    bool is_entity_disp_name_Set() const;
    bool is_entity_disp_name_Valid() const;

    QString getEntityId() const;
    void setEntityId(const QString &entity_id);
    bool is_entity_id_Set() const;
    bool is_entity_id_Valid() const;

    QString getEntityType() const;
    void setEntityType(const QString &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QString getHost() const;
    void setHost(const QString &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    QString getIncidentNumber() const;
    void setIncidentNumber(const QString &incident_number);
    bool is_incident_number_Set() const;
    bool is_incident_number_Valid() const;

    QString getLastAlertId() const;
    void setLastAlertId(const QString &last_alert_id);
    bool is_last_alert_id_Set() const;
    bool is_last_alert_id_Valid() const;

    QString getLastAlertTime() const;
    void setLastAlertTime(const QString &last_alert_time);
    bool is_last_alert_time_Set() const;
    bool is_last_alert_time_Valid() const;

    QString getService() const;
    void setService(const QString &service);
    bool is_service_Set() const;
    bool is_service_Valid() const;

    QString getStartTime() const;
    void setStartTime(const QString &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getTeams() const;
    void setTeams(const QString &teams);
    bool is_teams_Set() const;
    bool is_teams_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ack_time;
    bool m_ack_time_isSet;
    bool m_ack_time_isValid;

    OAIAckUser m_ack_user;
    bool m_ack_user_isSet;
    bool m_ack_user_isValid;

    QString m_ack_user_id;
    bool m_ack_user_id_isSet;
    bool m_ack_user_id_isValid;

    double m_alert_count;
    bool m_alert_count_isSet;
    bool m_alert_count_isValid;

    QString m_current_phase;
    bool m_current_phase_isSet;
    bool m_current_phase_isValid;

    QString m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_entity_disp_name;
    bool m_entity_disp_name_isSet;
    bool m_entity_disp_name_isValid;

    QString m_entity_id;
    bool m_entity_id_isSet;
    bool m_entity_id_isValid;

    QString m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QString m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    QString m_incident_number;
    bool m_incident_number_isSet;
    bool m_incident_number_isValid;

    QString m_last_alert_id;
    bool m_last_alert_id_isSet;
    bool m_last_alert_id_isValid;

    QString m_last_alert_time;
    bool m_last_alert_time_isSet;
    bool m_last_alert_time_isValid;

    QString m_service;
    bool m_service_isSet;
    bool m_service_isValid;

    QString m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_teams;
    bool m_teams_isSet;
    bool m_teams_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIncidentInfo)

#endif // OAIIncidentInfo_H
