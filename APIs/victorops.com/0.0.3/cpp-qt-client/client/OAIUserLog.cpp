/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserLog::OAIUserLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserLog::OAIUserLog() {
    this->initializeModel();
}

OAIUserLog::~OAIUserLog() {}

void OAIUserLog::initializeModel() {

    m_adjusted_total_isSet = false;
    m_adjusted_total_isValid = false;

    m_log_isSet = false;
    m_log_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUserLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserLog::fromJsonObject(QJsonObject json) {

    m_adjusted_total_isValid = ::OpenAPI::fromJsonValue(m_adjusted_total, json[QString("adjustedTotal")]);
    m_adjusted_total_isSet = !json[QString("adjustedTotal")].isNull() && m_adjusted_total_isValid;

    m_log_isValid = ::OpenAPI::fromJsonValue(m_log, json[QString("log")]);
    m_log_isSet = !json[QString("log")].isNull() && m_log_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIUserLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserLog::asJsonObject() const {
    QJsonObject obj;
    if (m_adjusted_total.isSet()) {
        obj.insert(QString("adjustedTotal"), ::OpenAPI::toJsonValue(m_adjusted_total));
    }
    if (m_log.size() > 0) {
        obj.insert(QString("log"), ::OpenAPI::toJsonValue(m_log));
    }
    if (m_total.isSet()) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIOnCallInterval_duration OAIUserLog::getAdjustedTotal() const {
    return m_adjusted_total;
}
void OAIUserLog::setAdjustedTotal(const OAIOnCallInterval_duration &adjusted_total) {
    m_adjusted_total = adjusted_total;
    m_adjusted_total_isSet = true;
}

bool OAIUserLog::is_adjusted_total_Set() const{
    return m_adjusted_total_isSet;
}

bool OAIUserLog::is_adjusted_total_Valid() const{
    return m_adjusted_total_isValid;
}

QList<OAIOnCallInterval> OAIUserLog::getLog() const {
    return m_log;
}
void OAIUserLog::setLog(const QList<OAIOnCallInterval> &log) {
    m_log = log;
    m_log_isSet = true;
}

bool OAIUserLog::is_log_Set() const{
    return m_log_isSet;
}

bool OAIUserLog::is_log_Valid() const{
    return m_log_isValid;
}

OAIOnCallInterval_duration OAIUserLog::getTotal() const {
    return m_total;
}
void OAIUserLog::setTotal(const OAIOnCallInterval_duration &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIUserLog::is_total_Set() const{
    return m_total_isSet;
}

bool OAIUserLog::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIUserLog::getUserId() const {
    return m_user_id;
}
void OAIUserLog::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUserLog::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUserLog::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUserLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjusted_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
