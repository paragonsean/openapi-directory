/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetAlertResponse.h
 *
 * Alert details. All fields should be considered optional.
 */

#ifndef OAIGetAlertResponse_H
#define OAIGetAlertResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetAlertResponse : public OAIObject {
public:
    OAIGetAlertResponse();
    OAIGetAlertResponse(QString json);
    ~OAIGetAlertResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAckAuthor() const;
    void setAckAuthor(const QString &ack_author);
    bool is_ack_author_Set() const;
    bool is_ack_author_Valid() const;

    QString getAckMsg() const;
    void setAckMsg(const QString &ack_msg);
    bool is_ack_msg_Set() const;
    bool is_ack_msg_Valid() const;

    QString getEntityDisplayName() const;
    void setEntityDisplayName(const QString &entity_display_name);
    bool is_entity_display_name_Set() const;
    bool is_entity_display_name_Valid() const;

    QString getEntityId() const;
    void setEntityId(const QString &entity_id);
    bool is_entity_id_Set() const;
    bool is_entity_id_Valid() const;

    QString getMessageType() const;
    void setMessageType(const QString &message_type);
    bool is_message_type_Set() const;
    bool is_message_type_Valid() const;

    QString getMonitoringTool() const;
    void setMonitoringTool(const QString &monitoring_tool);
    bool is_monitoring_tool_Set() const;
    bool is_monitoring_tool_Valid() const;

    QString getRaw() const;
    void setRaw(const QString &raw);
    bool is_raw_Set() const;
    bool is_raw_Valid() const;

    QString getStateMessage() const;
    void setStateMessage(const QString &state_message);
    bool is_state_message_Set() const;
    bool is_state_message_Valid() const;

    double getStateStartTime() const;
    void setStateStartTime(const double &state_start_time);
    bool is_state_start_time_Set() const;
    bool is_state_start_time_Valid() const;

    double getTimestamp() const;
    void setTimestamp(const double &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ack_author;
    bool m_ack_author_isSet;
    bool m_ack_author_isValid;

    QString m_ack_msg;
    bool m_ack_msg_isSet;
    bool m_ack_msg_isValid;

    QString m_entity_display_name;
    bool m_entity_display_name_isSet;
    bool m_entity_display_name_isValid;

    QString m_entity_id;
    bool m_entity_id_isSet;
    bool m_entity_id_isValid;

    QString m_message_type;
    bool m_message_type_isSet;
    bool m_message_type_isValid;

    QString m_monitoring_tool;
    bool m_monitoring_tool_isSet;
    bool m_monitoring_tool_isValid;

    QString m_raw;
    bool m_raw_isSet;
    bool m_raw_isValid;

    QString m_state_message;
    bool m_state_message_isSet;
    bool m_state_message_isValid;

    double m_state_start_time;
    bool m_state_start_time_isSet;
    bool m_state_start_time_isValid;

    double m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetAlertResponse)

#endif // OAIGetAlertResponse_H
