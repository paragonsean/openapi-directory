/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamScheduleRollResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamScheduleRollResource::OAITeamScheduleRollResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamScheduleRollResource::OAITeamScheduleRollResource() {
    this->initializeModel();
}

OAITeamScheduleRollResource::~OAITeamScheduleRollResource() {}

void OAITeamScheduleRollResource::initializeModel() {

    m_change_isSet = false;
    m_change_isValid = false;

    m_is_roll_isSet = false;
    m_is_roll_isValid = false;

    m_oncall_isSet = false;
    m_oncall_isValid = false;

    m_until_isSet = false;
    m_until_isValid = false;
}

void OAITeamScheduleRollResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamScheduleRollResource::fromJsonObject(QJsonObject json) {

    m_change_isValid = ::OpenAPI::fromJsonValue(m_change, json[QString("change")]);
    m_change_isSet = !json[QString("change")].isNull() && m_change_isValid;

    m_is_roll_isValid = ::OpenAPI::fromJsonValue(m_is_roll, json[QString("isRoll")]);
    m_is_roll_isSet = !json[QString("isRoll")].isNull() && m_is_roll_isValid;

    m_oncall_isValid = ::OpenAPI::fromJsonValue(m_oncall, json[QString("oncall")]);
    m_oncall_isSet = !json[QString("oncall")].isNull() && m_oncall_isValid;

    m_until_isValid = ::OpenAPI::fromJsonValue(m_until, json[QString("until")]);
    m_until_isSet = !json[QString("until")].isNull() && m_until_isValid;
}

QString OAITeamScheduleRollResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamScheduleRollResource::asJsonObject() const {
    QJsonObject obj;
    if (m_change_isSet) {
        obj.insert(QString("change"), ::OpenAPI::toJsonValue(m_change));
    }
    if (m_is_roll_isSet) {
        obj.insert(QString("isRoll"), ::OpenAPI::toJsonValue(m_is_roll));
    }
    if (m_oncall_isSet) {
        obj.insert(QString("oncall"), ::OpenAPI::toJsonValue(m_oncall));
    }
    if (m_until_isSet) {
        obj.insert(QString("until"), ::OpenAPI::toJsonValue(m_until));
    }
    return obj;
}

double OAITeamScheduleRollResource::getChange() const {
    return m_change;
}
void OAITeamScheduleRollResource::setChange(const double &change) {
    m_change = change;
    m_change_isSet = true;
}

bool OAITeamScheduleRollResource::is_change_Set() const{
    return m_change_isSet;
}

bool OAITeamScheduleRollResource::is_change_Valid() const{
    return m_change_isValid;
}

bool OAITeamScheduleRollResource::isIsRoll() const {
    return m_is_roll;
}
void OAITeamScheduleRollResource::setIsRoll(const bool &is_roll) {
    m_is_roll = is_roll;
    m_is_roll_isSet = true;
}

bool OAITeamScheduleRollResource::is_is_roll_Set() const{
    return m_is_roll_isSet;
}

bool OAITeamScheduleRollResource::is_is_roll_Valid() const{
    return m_is_roll_isValid;
}

QString OAITeamScheduleRollResource::getOncall() const {
    return m_oncall;
}
void OAITeamScheduleRollResource::setOncall(const QString &oncall) {
    m_oncall = oncall;
    m_oncall_isSet = true;
}

bool OAITeamScheduleRollResource::is_oncall_Set() const{
    return m_oncall_isSet;
}

bool OAITeamScheduleRollResource::is_oncall_Valid() const{
    return m_oncall_isValid;
}

double OAITeamScheduleRollResource::getUntil() const {
    return m_until;
}
void OAITeamScheduleRollResource::setUntil(const double &until) {
    m_until = until;
    m_until_isSet = true;
}

bool OAITeamScheduleRollResource::is_until_Set() const{
    return m_until_isSet;
}

bool OAITeamScheduleRollResource::is_until_Valid() const{
    return m_until_isValid;
}

bool OAITeamScheduleRollResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_roll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oncall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_until_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamScheduleRollResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_change_isValid && m_is_roll_isValid && m_until_isValid && true;
}

} // namespace OpenAPI
