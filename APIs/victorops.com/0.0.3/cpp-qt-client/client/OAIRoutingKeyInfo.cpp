/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutingKeyInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutingKeyInfo::OAIRoutingKeyInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutingKeyInfo::OAIRoutingKeyInfo() {
    this->initializeModel();
}

OAIRoutingKeyInfo::~OAIRoutingKeyInfo() {}

void OAIRoutingKeyInfo::initializeModel() {

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_routing_key_isSet = false;
    m_routing_key_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;
}

void OAIRoutingKeyInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutingKeyInfo::fromJsonObject(QJsonObject json) {

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_routing_key_isValid = ::OpenAPI::fromJsonValue(m_routing_key, json[QString("routingKey")]);
    m_routing_key_isSet = !json[QString("routingKey")].isNull() && m_routing_key_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;
}

QString OAIRoutingKeyInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutingKeyInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_routing_key_isSet) {
        obj.insert(QString("routingKey"), ::OpenAPI::toJsonValue(m_routing_key));
    }
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    return obj;
}

bool OAIRoutingKeyInfo::isIsDefault() const {
    return m_is_default;
}
void OAIRoutingKeyInfo::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIRoutingKeyInfo::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIRoutingKeyInfo::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAIRoutingKeyInfo::getRoutingKey() const {
    return m_routing_key;
}
void OAIRoutingKeyInfo::setRoutingKey(const QString &routing_key) {
    m_routing_key = routing_key;
    m_routing_key_isSet = true;
}

bool OAIRoutingKeyInfo::is_routing_key_Set() const{
    return m_routing_key_isSet;
}

bool OAIRoutingKeyInfo::is_routing_key_Valid() const{
    return m_routing_key_isValid;
}

QList<OAIRoutingKeyTarget> OAIRoutingKeyInfo::getTargets() const {
    return m_targets;
}
void OAIRoutingKeyInfo::setTargets(const QList<OAIRoutingKeyTarget> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIRoutingKeyInfo::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIRoutingKeyInfo::is_targets_Valid() const{
    return m_targets_isValid;
}

bool OAIRoutingKeyInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutingKeyInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
