/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledOverride::OAIScheduledOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledOverride::OAIScheduledOverride() {
    this->initializeModel();
}

OAIScheduledOverride::~OAIScheduledOverride() {}

void OAIScheduledOverride::initializeModel() {

    m_assignments_isSet = false;
    m_assignments_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_public_id_isSet = false;
    m_public_id_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIScheduledOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledOverride::fromJsonObject(QJsonObject json) {

    m_assignments_isValid = ::OpenAPI::fromJsonValue(m_assignments, json[QString("assignments")]);
    m_assignments_isSet = !json[QString("assignments")].isNull() && m_assignments_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_public_id_isValid = ::OpenAPI::fromJsonValue(m_public_id, json[QString("publicId")]);
    m_public_id_isSet = !json[QString("publicId")].isNull() && m_public_id_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIScheduledOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_assignments.size() > 0) {
        obj.insert(QString("assignments"), ::OpenAPI::toJsonValue(m_assignments));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_public_id_isSet) {
        obj.insert(QString("publicId"), ::OpenAPI::toJsonValue(m_public_id));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAIAssignment> OAIScheduledOverride::getAssignments() const {
    return m_assignments;
}
void OAIScheduledOverride::setAssignments(const QList<OAIAssignment> &assignments) {
    m_assignments = assignments;
    m_assignments_isSet = true;
}

bool OAIScheduledOverride::is_assignments_Set() const{
    return m_assignments_isSet;
}

bool OAIScheduledOverride::is_assignments_Valid() const{
    return m_assignments_isValid;
}

QString OAIScheduledOverride::getEnd() const {
    return m_end;
}
void OAIScheduledOverride::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIScheduledOverride::is_end_Set() const{
    return m_end_isSet;
}

bool OAIScheduledOverride::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIScheduledOverride::getPublicId() const {
    return m_public_id;
}
void OAIScheduledOverride::setPublicId(const QString &public_id) {
    m_public_id = public_id;
    m_public_id_isSet = true;
}

bool OAIScheduledOverride::is_public_id_Set() const{
    return m_public_id_isSet;
}

bool OAIScheduledOverride::is_public_id_Valid() const{
    return m_public_id_isValid;
}

QString OAIScheduledOverride::getStart() const {
    return m_start;
}
void OAIScheduledOverride::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIScheduledOverride::is_start_Set() const{
    return m_start_isSet;
}

bool OAIScheduledOverride::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIScheduledOverride::getTimezone() const {
    return m_timezone;
}
void OAIScheduledOverride::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIScheduledOverride::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIScheduledOverride::is_timezone_Valid() const{
    return m_timezone_isValid;
}

OAIScheduledUser OAIScheduledOverride::getUser() const {
    return m_user;
}
void OAIScheduledOverride::setUser(const OAIScheduledUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIScheduledOverride::is_user_Set() const{
    return m_user_isSet;
}

bool OAIScheduledOverride::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIScheduledOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
