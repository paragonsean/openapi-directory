/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScheduledOverridesApi_H
#define OAI_OAIScheduledOverridesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssignment.h"
#include "OAIScheduledOverridePayload.h"
#include "OAIUpdateAssignment.h"
#include "OAI_api_public_v1_overrides__publicId__get_200_response.h"
#include "OAI_api_public_v1_overrides_get_200_response.h"
#include "OAI_api_public_v1_overrides_post_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScheduledOverridesApi : public QObject {
    Q_OBJECT

public:
    OAIScheduledOverridesApi(const int timeOut = 0);
    ~OAIScheduledOverridesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    */
    virtual void apiPublicV1OverridesGet(const QString &x_vo_api_id, const QString &x_vo_api_key);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  body OAIScheduledOverridePayload [required]
    */
    virtual void apiPublicV1OverridesPost(const QString &x_vo_api_id, const QString &x_vo_api_key, const OAIScheduledOverridePayload &body);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  public_id QString [required]
    */
    virtual void apiPublicV1OverridesPublicIdAssignmentsGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &public_id);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  public_id QString [required]
    * @param[in]  policy_slug QString [required]
    */
    virtual void apiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &public_id, const QString &policy_slug);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  public_id QString [required]
    * @param[in]  policy_slug QString [required]
    */
    virtual void apiPublicV1OverridesPublicIdAssignmentsPolicySlugGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &public_id, const QString &policy_slug);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  public_id QString [required]
    * @param[in]  policy_slug QString [required]
    * @param[in]  body OAIUpdateAssignment [required]
    */
    virtual void apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &public_id, const QString &policy_slug, const OAIUpdateAssignment &body);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  public_id QString [required]
    */
    virtual void apiPublicV1OverridesPublicIdDelete(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &public_id);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  public_id QString [required]
    */
    virtual void apiPublicV1OverridesPublicIdGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &public_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiPublicV1OverridesGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1OverridesPostCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1OverridesPublicIdAssignmentsGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1OverridesPublicIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1OverridesPublicIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiPublicV1OverridesGetSignal(OAI_api_public_v1_overrides_get_200_response summary);
    void apiPublicV1OverridesPostSignal(OAI_api_public_v1_overrides_post_200_response summary);
    void apiPublicV1OverridesPublicIdAssignmentsGetSignal(QList<OAIAssignment> summary);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignal(OAIAssignment summary);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignal(OAIAssignment summary);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignal(OAIAssignment summary);
    void apiPublicV1OverridesPublicIdDeleteSignal();
    void apiPublicV1OverridesPublicIdGetSignal(OAI_api_public_v1_overrides__publicId__get_200_response summary);


    void apiPublicV1OverridesGetSignalFull(OAIHttpRequestWorker *worker, OAI_api_public_v1_overrides_get_200_response summary);
    void apiPublicV1OverridesPostSignalFull(OAIHttpRequestWorker *worker, OAI_api_public_v1_overrides_post_200_response summary);
    void apiPublicV1OverridesPublicIdAssignmentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssignment> summary);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAssignment summary);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignalFull(OAIHttpRequestWorker *worker, OAIAssignment summary);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignalFull(OAIHttpRequestWorker *worker, OAIAssignment summary);
    void apiPublicV1OverridesPublicIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiPublicV1OverridesPublicIdGetSignalFull(OAIHttpRequestWorker *worker, OAI_api_public_v1_overrides__publicId__get_200_response summary);

    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesGetSignalError() instead")
    void apiPublicV1OverridesGetSignalE(OAI_api_public_v1_overrides_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesGetSignalError(OAI_api_public_v1_overrides_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPostSignalError() instead")
    void apiPublicV1OverridesPostSignalE(OAI_api_public_v1_overrides_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPostSignalError(OAI_api_public_v1_overrides_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPublicIdAssignmentsGetSignalError() instead")
    void apiPublicV1OverridesPublicIdAssignmentsGetSignalE(QList<OAIAssignment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPublicIdAssignmentsGetSignalError(QList<OAIAssignment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignalError() instead")
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignalE(OAIAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignalError(OAIAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignalError() instead")
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignalE(OAIAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignalError(OAIAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignalError() instead")
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignalE(OAIAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignalError(OAIAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPublicIdDeleteSignalError() instead")
    void apiPublicV1OverridesPublicIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPublicIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPublicIdGetSignalError() instead")
    void apiPublicV1OverridesPublicIdGetSignalE(OAI_api_public_v1_overrides__publicId__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPublicIdGetSignalError(OAI_api_public_v1_overrides__publicId__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesGetSignalErrorFull() instead")
    void apiPublicV1OverridesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPostSignalErrorFull() instead")
    void apiPublicV1OverridesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPublicIdAssignmentsGetSignalErrorFull() instead")
    void apiPublicV1OverridesPublicIdAssignmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPublicIdAssignmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignalErrorFull() instead")
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignalErrorFull() instead")
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignalErrorFull() instead")
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPublicIdDeleteSignalErrorFull() instead")
    void apiPublicV1OverridesPublicIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPublicIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1OverridesPublicIdGetSignalErrorFull() instead")
    void apiPublicV1OverridesPublicIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OverridesPublicIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
