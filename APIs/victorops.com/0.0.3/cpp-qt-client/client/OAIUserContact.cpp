/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserContact::OAIUserContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserContact::OAIUserContact() {
    this->initializeModel();
}

OAIUserContact::~OAIUserContact() {}

void OAIUserContact::initializeModel() {

    m__self_url_isSet = false;
    m__self_url_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_ext_id_isSet = false;
    m_ext_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAIUserContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserContact::fromJsonObject(QJsonObject json) {

    m__self_url_isValid = ::OpenAPI::fromJsonValue(m__self_url, json[QString("_selfUrl")]);
    m__self_url_isSet = !json[QString("_selfUrl")].isNull() && m__self_url_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_ext_id_isValid = ::OpenAPI::fromJsonValue(m_ext_id, json[QString("extId")]);
    m_ext_id_isSet = !json[QString("extId")].isNull() && m_ext_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAIUserContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserContact::asJsonObject() const {
    QJsonObject obj;
    if (m__self_url_isSet) {
        obj.insert(QString("_selfUrl"), ::OpenAPI::toJsonValue(m__self_url));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_ext_id_isSet) {
        obj.insert(QString("extId"), ::OpenAPI::toJsonValue(m_ext_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

QString OAIUserContact::getSelfUrl() const {
    return m__self_url;
}
void OAIUserContact::setSelfUrl(const QString &_self_url) {
    m__self_url = _self_url;
    m__self_url_isSet = true;
}

bool OAIUserContact::is__self_url_Set() const{
    return m__self_url_isSet;
}

bool OAIUserContact::is__self_url_Valid() const{
    return m__self_url_isValid;
}

QString OAIUserContact::getDeviceType() const {
    return m_device_type;
}
void OAIUserContact::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIUserContact::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIUserContact::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIUserContact::getExtId() const {
    return m_ext_id;
}
void OAIUserContact::setExtId(const QString &ext_id) {
    m_ext_id = ext_id;
    m_ext_id_isSet = true;
}

bool OAIUserContact::is_ext_id_Set() const{
    return m_ext_id_isSet;
}

bool OAIUserContact::is_ext_id_Valid() const{
    return m_ext_id_isValid;
}

QString OAIUserContact::getLabel() const {
    return m_label;
}
void OAIUserContact::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIUserContact::is_label_Set() const{
    return m_label_isSet;
}

bool OAIUserContact::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIUserContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__self_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
