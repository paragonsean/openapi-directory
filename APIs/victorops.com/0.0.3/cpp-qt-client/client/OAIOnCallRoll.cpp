/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnCallRoll.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnCallRoll::OAIOnCallRoll(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnCallRoll::OAIOnCallRoll() {
    this->initializeModel();
}

OAIOnCallRoll::~OAIOnCallRoll() {}

void OAIOnCallRoll::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_is_roll_isSet = false;
    m_is_roll_isValid = false;

    m_on_call_user_isSet = false;
    m_on_call_user_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIOnCallRoll::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnCallRoll::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_is_roll_isValid = ::OpenAPI::fromJsonValue(m_is_roll, json[QString("isRoll")]);
    m_is_roll_isSet = !json[QString("isRoll")].isNull() && m_is_roll_isValid;

    m_on_call_user_isValid = ::OpenAPI::fromJsonValue(m_on_call_user, json[QString("onCallUser")]);
    m_on_call_user_isSet = !json[QString("onCallUser")].isNull() && m_on_call_user_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIOnCallRoll::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnCallRoll::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_is_roll_isSet) {
        obj.insert(QString("isRoll"), ::OpenAPI::toJsonValue(m_is_roll));
    }
    if (m_on_call_user.isSet()) {
        obj.insert(QString("onCallUser"), ::OpenAPI::toJsonValue(m_on_call_user));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

QString OAIOnCallRoll::getEnd() const {
    return m_end;
}
void OAIOnCallRoll::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIOnCallRoll::is_end_Set() const{
    return m_end_isSet;
}

bool OAIOnCallRoll::is_end_Valid() const{
    return m_end_isValid;
}

bool OAIOnCallRoll::isIsRoll() const {
    return m_is_roll;
}
void OAIOnCallRoll::setIsRoll(const bool &is_roll) {
    m_is_roll = is_roll;
    m_is_roll_isSet = true;
}

bool OAIOnCallRoll::is_is_roll_Set() const{
    return m_is_roll_isSet;
}

bool OAIOnCallRoll::is_is_roll_Valid() const{
    return m_is_roll_isValid;
}

OAIUser OAIOnCallRoll::getOnCallUser() const {
    return m_on_call_user;
}
void OAIOnCallRoll::setOnCallUser(const OAIUser &on_call_user) {
    m_on_call_user = on_call_user;
    m_on_call_user_isSet = true;
}

bool OAIOnCallRoll::is_on_call_user_Set() const{
    return m_on_call_user_isSet;
}

bool OAIOnCallRoll::is_on_call_user_Valid() const{
    return m_on_call_user_isValid;
}

QString OAIOnCallRoll::getStart() const {
    return m_start;
}
void OAIOnCallRoll::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIOnCallRoll::is_start_Set() const{
    return m_start_isSet;
}

bool OAIOnCallRoll::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIOnCallRoll::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_roll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_call_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnCallRoll::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_isValid && m_is_roll_isValid && m_start_isValid && true;
}

} // namespace OpenAPI
