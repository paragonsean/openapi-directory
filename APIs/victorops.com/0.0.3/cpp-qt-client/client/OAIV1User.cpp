/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1User.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1User::OAIV1User(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1User::OAIV1User() {
    this->initializeModel();
}

OAIV1User::~OAIV1User() {}

void OAIV1User::initializeModel() {

    m__self_url_isSet = false;
    m__self_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_password_last_updated_isSet = false;
    m_password_last_updated_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_verified_isSet = false;
    m_verified_isValid = false;
}

void OAIV1User::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV1User::fromJsonObject(QJsonObject json) {

    m__self_url_isValid = ::OpenAPI::fromJsonValue(m__self_url, json[QString("_selfUrl")]);
    m__self_url_isSet = !json[QString("_selfUrl")].isNull() && m__self_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_password_last_updated_isValid = ::OpenAPI::fromJsonValue(m_password_last_updated, json[QString("passwordLastUpdated")]);
    m_password_last_updated_isSet = !json[QString("passwordLastUpdated")].isNull() && m_password_last_updated_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_verified_isValid = ::OpenAPI::fromJsonValue(m_verified, json[QString("verified")]);
    m_verified_isSet = !json[QString("verified")].isNull() && m_verified_isValid;
}

QString OAIV1User::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV1User::asJsonObject() const {
    QJsonObject obj;
    if (m__self_url_isSet) {
        obj.insert(QString("_selfUrl"), ::OpenAPI::toJsonValue(m__self_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_password_last_updated_isSet) {
        obj.insert(QString("passwordLastUpdated"), ::OpenAPI::toJsonValue(m_password_last_updated));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_verified_isSet) {
        obj.insert(QString("verified"), ::OpenAPI::toJsonValue(m_verified));
    }
    return obj;
}

QString OAIV1User::getSelfUrl() const {
    return m__self_url;
}
void OAIV1User::setSelfUrl(const QString &_self_url) {
    m__self_url = _self_url;
    m__self_url_isSet = true;
}

bool OAIV1User::is__self_url_Set() const{
    return m__self_url_isSet;
}

bool OAIV1User::is__self_url_Valid() const{
    return m__self_url_isValid;
}

QString OAIV1User::getCreatedAt() const {
    return m_created_at;
}
void OAIV1User::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIV1User::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIV1User::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIV1User::getEmail() const {
    return m_email;
}
void OAIV1User::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIV1User::is_email_Set() const{
    return m_email_isSet;
}

bool OAIV1User::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIV1User::getFirstName() const {
    return m_first_name;
}
void OAIV1User::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIV1User::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIV1User::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIV1User::getLastName() const {
    return m_last_name;
}
void OAIV1User::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIV1User::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIV1User::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIV1User::getPasswordLastUpdated() const {
    return m_password_last_updated;
}
void OAIV1User::setPasswordLastUpdated(const QString &password_last_updated) {
    m_password_last_updated = password_last_updated;
    m_password_last_updated_isSet = true;
}

bool OAIV1User::is_password_last_updated_Set() const{
    return m_password_last_updated_isSet;
}

bool OAIV1User::is_password_last_updated_Valid() const{
    return m_password_last_updated_isValid;
}

QString OAIV1User::getUsername() const {
    return m_username;
}
void OAIV1User::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIV1User::is_username_Set() const{
    return m_username_isSet;
}

bool OAIV1User::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIV1User::isVerified() const {
    return m_verified;
}
void OAIV1User::setVerified(const bool &verified) {
    m_verified = verified;
    m_verified_isSet = true;
}

bool OAIV1User::is_verified_Set() const{
    return m_verified_isSet;
}

bool OAIV1User::is_verified_Valid() const{
    return m_verified_isValid;
}

bool OAIV1User::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__self_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV1User::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
