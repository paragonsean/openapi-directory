/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserContactMethodsApi_H
#define OAI_OAIUserContactMethodsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContactDevice.h"
#include "OAIContactDeviceAdd.h"
#include "OAIContactEmailAdd.h"
#include "OAIContactPhoneAdd.h"
#include "OAIUserContact.h"
#include "OAI_api_public_v1_user__user__contact_methods_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserContactMethodsApi : public QObject {
    Q_OBJECT

public:
    OAIUserContactMethodsApi(const int timeOut = 0);
    ~OAIUserContactMethodsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void apiPublicV1UserUserContactMethodsDevicesContactIdDelete(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const QString &contact_id);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void apiPublicV1UserUserContactMethodsDevicesContactIdGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const QString &contact_id);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    * @param[in]  contact_id QString [required]
    * @param[in]  body OAIContactDeviceAdd [required]
    */
    virtual void apiPublicV1UserUserContactMethodsDevicesContactIdPut(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const QString &contact_id, const OAIContactDeviceAdd &body);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    */
    virtual void apiPublicV1UserUserContactMethodsDevicesGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void apiPublicV1UserUserContactMethodsEmailsContactIdDelete(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const QString &contact_id);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void apiPublicV1UserUserContactMethodsEmailsContactIdGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const QString &contact_id);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    */
    virtual void apiPublicV1UserUserContactMethodsEmailsGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    * @param[in]  body OAIContactEmailAdd [required]
    */
    virtual void apiPublicV1UserUserContactMethodsEmailsPost(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const OAIContactEmailAdd &body);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    */
    virtual void apiPublicV1UserUserContactMethodsGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void apiPublicV1UserUserContactMethodsPhonesContactIdDelete(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const QString &contact_id);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void apiPublicV1UserUserContactMethodsPhonesContactIdGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const QString &contact_id);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    */
    virtual void apiPublicV1UserUserContactMethodsPhonesGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    * @param[in]  body OAIContactPhoneAdd [required]
    */
    virtual void apiPublicV1UserUserContactMethodsPhonesPost(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const OAIContactPhoneAdd &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiPublicV1UserUserContactMethodsDevicesContactIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserContactMethodsDevicesContactIdGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserContactMethodsDevicesContactIdPutCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserContactMethodsDevicesGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserContactMethodsEmailsContactIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserContactMethodsEmailsContactIdGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserContactMethodsEmailsGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserContactMethodsEmailsPostCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserContactMethodsGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserContactMethodsPhonesContactIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserContactMethodsPhonesContactIdGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserContactMethodsPhonesGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserContactMethodsPhonesPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiPublicV1UserUserContactMethodsDevicesContactIdDeleteSignal(OAIContactDevice summary);
    void apiPublicV1UserUserContactMethodsDevicesContactIdGetSignal(QList<OAIContactDevice> summary);
    void apiPublicV1UserUserContactMethodsDevicesContactIdPutSignal(OAIContactDevice summary);
    void apiPublicV1UserUserContactMethodsDevicesGetSignal(QList<OAIContactDevice> summary);
    void apiPublicV1UserUserContactMethodsEmailsContactIdDeleteSignal(OAIUserContact summary);
    void apiPublicV1UserUserContactMethodsEmailsContactIdGetSignal(QList<OAIUserContact> summary);
    void apiPublicV1UserUserContactMethodsEmailsGetSignal(QList<OAIUserContact> summary);
    void apiPublicV1UserUserContactMethodsEmailsPostSignal(OAIUserContact summary);
    void apiPublicV1UserUserContactMethodsGetSignal(OAI_api_public_v1_user__user__contact_methods_get_200_response summary);
    void apiPublicV1UserUserContactMethodsPhonesContactIdDeleteSignal(OAIUserContact summary);
    void apiPublicV1UserUserContactMethodsPhonesContactIdGetSignal(QList<OAIUserContact> summary);
    void apiPublicV1UserUserContactMethodsPhonesGetSignal(QList<OAIUserContact> summary);
    void apiPublicV1UserUserContactMethodsPhonesPostSignal(OAIUserContact summary);


    void apiPublicV1UserUserContactMethodsDevicesContactIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIContactDevice summary);
    void apiPublicV1UserUserContactMethodsDevicesContactIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIContactDevice> summary);
    void apiPublicV1UserUserContactMethodsDevicesContactIdPutSignalFull(OAIHttpRequestWorker *worker, OAIContactDevice summary);
    void apiPublicV1UserUserContactMethodsDevicesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIContactDevice> summary);
    void apiPublicV1UserUserContactMethodsEmailsContactIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIUserContact summary);
    void apiPublicV1UserUserContactMethodsEmailsContactIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserContact> summary);
    void apiPublicV1UserUserContactMethodsEmailsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserContact> summary);
    void apiPublicV1UserUserContactMethodsEmailsPostSignalFull(OAIHttpRequestWorker *worker, OAIUserContact summary);
    void apiPublicV1UserUserContactMethodsGetSignalFull(OAIHttpRequestWorker *worker, OAI_api_public_v1_user__user__contact_methods_get_200_response summary);
    void apiPublicV1UserUserContactMethodsPhonesContactIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIUserContact summary);
    void apiPublicV1UserUserContactMethodsPhonesContactIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserContact> summary);
    void apiPublicV1UserUserContactMethodsPhonesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserContact> summary);
    void apiPublicV1UserUserContactMethodsPhonesPostSignalFull(OAIHttpRequestWorker *worker, OAIUserContact summary);

    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsDevicesContactIdDeleteSignalError() instead")
    void apiPublicV1UserUserContactMethodsDevicesContactIdDeleteSignalE(OAIContactDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsDevicesContactIdDeleteSignalError(OAIContactDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsDevicesContactIdGetSignalError() instead")
    void apiPublicV1UserUserContactMethodsDevicesContactIdGetSignalE(QList<OAIContactDevice> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsDevicesContactIdGetSignalError(QList<OAIContactDevice> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsDevicesContactIdPutSignalError() instead")
    void apiPublicV1UserUserContactMethodsDevicesContactIdPutSignalE(OAIContactDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsDevicesContactIdPutSignalError(OAIContactDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsDevicesGetSignalError() instead")
    void apiPublicV1UserUserContactMethodsDevicesGetSignalE(QList<OAIContactDevice> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsDevicesGetSignalError(QList<OAIContactDevice> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsEmailsContactIdDeleteSignalError() instead")
    void apiPublicV1UserUserContactMethodsEmailsContactIdDeleteSignalE(OAIUserContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsEmailsContactIdDeleteSignalError(OAIUserContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsEmailsContactIdGetSignalError() instead")
    void apiPublicV1UserUserContactMethodsEmailsContactIdGetSignalE(QList<OAIUserContact> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsEmailsContactIdGetSignalError(QList<OAIUserContact> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsEmailsGetSignalError() instead")
    void apiPublicV1UserUserContactMethodsEmailsGetSignalE(QList<OAIUserContact> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsEmailsGetSignalError(QList<OAIUserContact> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsEmailsPostSignalError() instead")
    void apiPublicV1UserUserContactMethodsEmailsPostSignalE(OAIUserContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsEmailsPostSignalError(OAIUserContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsGetSignalError() instead")
    void apiPublicV1UserUserContactMethodsGetSignalE(OAI_api_public_v1_user__user__contact_methods_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsGetSignalError(OAI_api_public_v1_user__user__contact_methods_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsPhonesContactIdDeleteSignalError() instead")
    void apiPublicV1UserUserContactMethodsPhonesContactIdDeleteSignalE(OAIUserContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsPhonesContactIdDeleteSignalError(OAIUserContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsPhonesContactIdGetSignalError() instead")
    void apiPublicV1UserUserContactMethodsPhonesContactIdGetSignalE(QList<OAIUserContact> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsPhonesContactIdGetSignalError(QList<OAIUserContact> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsPhonesGetSignalError() instead")
    void apiPublicV1UserUserContactMethodsPhonesGetSignalE(QList<OAIUserContact> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsPhonesGetSignalError(QList<OAIUserContact> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsPhonesPostSignalError() instead")
    void apiPublicV1UserUserContactMethodsPhonesPostSignalE(OAIUserContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsPhonesPostSignalError(OAIUserContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsDevicesContactIdDeleteSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsDevicesContactIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsDevicesContactIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsDevicesContactIdGetSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsDevicesContactIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsDevicesContactIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsDevicesContactIdPutSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsDevicesContactIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsDevicesContactIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsDevicesGetSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsDevicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsDevicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsEmailsContactIdDeleteSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsEmailsContactIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsEmailsContactIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsEmailsContactIdGetSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsEmailsContactIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsEmailsContactIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsEmailsGetSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsEmailsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsEmailsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsEmailsPostSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsEmailsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsEmailsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsGetSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsPhonesContactIdDeleteSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsPhonesContactIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsPhonesContactIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsPhonesContactIdGetSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsPhonesContactIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsPhonesContactIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsPhonesGetSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsPhonesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsPhonesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserContactMethodsPhonesPostSignalErrorFull() instead")
    void apiPublicV1UserUserContactMethodsPhonesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserContactMethodsPhonesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
