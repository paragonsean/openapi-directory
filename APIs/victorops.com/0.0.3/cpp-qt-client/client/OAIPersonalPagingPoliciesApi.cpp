/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalPagingPoliciesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPersonalPagingPoliciesApi::OAIPersonalPagingPoliciesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIPersonalPagingPoliciesApi::~OAIPersonalPagingPoliciesApi() {
}

void OAIPersonalPagingPoliciesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.victorops.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("apiPublicV1ProfileUsernamePoliciesGet", defaultConf);
    _serverIndices.insert("apiPublicV1ProfileUsernamePoliciesGet", 0);
    _serverConfigs.insert("apiPublicV1ProfileUsernamePoliciesPost", defaultConf);
    _serverIndices.insert("apiPublicV1ProfileUsernamePoliciesPost", 0);
    _serverConfigs.insert("apiPublicV1ProfileUsernamePoliciesStepGet", defaultConf);
    _serverIndices.insert("apiPublicV1ProfileUsernamePoliciesStepGet", 0);
    _serverConfigs.insert("apiPublicV1ProfileUsernamePoliciesStepPost", defaultConf);
    _serverIndices.insert("apiPublicV1ProfileUsernamePoliciesStepPost", 0);
    _serverConfigs.insert("apiPublicV1ProfileUsernamePoliciesStepPut", defaultConf);
    _serverIndices.insert("apiPublicV1ProfileUsernamePoliciesStepPut", 0);
    _serverConfigs.insert("apiPublicV1ProfileUsernamePoliciesStepRuleDelete", defaultConf);
    _serverIndices.insert("apiPublicV1ProfileUsernamePoliciesStepRuleDelete", 0);
    _serverConfigs.insert("apiPublicV1ProfileUsernamePoliciesStepRuleGet", defaultConf);
    _serverIndices.insert("apiPublicV1ProfileUsernamePoliciesStepRuleGet", 0);
    _serverConfigs.insert("apiPublicV1ProfileUsernamePoliciesStepRulePut", defaultConf);
    _serverIndices.insert("apiPublicV1ProfileUsernamePoliciesStepRulePut", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIPersonalPagingPoliciesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIPersonalPagingPoliciesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIPersonalPagingPoliciesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIPersonalPagingPoliciesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIPersonalPagingPoliciesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIPersonalPagingPoliciesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIPersonalPagingPoliciesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIPersonalPagingPoliciesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIPersonalPagingPoliciesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIPersonalPagingPoliciesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPersonalPagingPoliciesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPersonalPagingPoliciesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIPersonalPagingPoliciesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIPersonalPagingPoliciesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIPersonalPagingPoliciesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIPersonalPagingPoliciesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIPersonalPagingPoliciesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIPersonalPagingPoliciesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIPersonalPagingPoliciesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesGet(const QString &username, const QString &x_vo_api_id, const QString &x_vo_api_key) {
    QString fullPath = QString(_serverConfigs["apiPublicV1ProfileUsernamePoliciesGet"][_serverIndices.value("apiPublicV1ProfileUsernamePoliciesGet")].URL()+"/api-public/v1/profile/{username}/policies");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesGetCallback);
    connect(this, &OAIPersonalPagingPoliciesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_api_public_v1_profile__username__policies_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1ProfileUsernamePoliciesGetSignal(output);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesPost(const QString &username, const QString &x_vo_api_id, const QString &x_vo_api_key, const OAIAddGroupPayload &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1ProfileUsernamePoliciesPost"][_serverIndices.value("apiPublicV1ProfileUsernamePoliciesPost")].URL()+"/api-public/v1/profile/{username}/policies");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesPostCallback);
    connect(this, &OAIPersonalPagingPoliciesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_api_public_v1_profile__username__policies_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1ProfileUsernamePoliciesPostSignal(output);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesPostSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesPostSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepGet(const QString &username, const double &step, const QString &x_vo_api_id, const QString &x_vo_api_key) {
    QString fullPath = QString(_serverConfigs["apiPublicV1ProfileUsernamePoliciesStepGet"][_serverIndices.value("apiPublicV1ProfileUsernamePoliciesStepGet")].URL()+"/api-public/v1/profile/{username}/policies/{step}");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString stepPathParam("{");
        stepPathParam.append("step").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "step", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"step"+pathSuffix : pathPrefix;
        fullPath.replace(stepPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(step)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepGetCallback);
    connect(this, &OAIPersonalPagingPoliciesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_api_public_v1_profile__username__policies_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepGetSignal(output);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepPost(const QString &username, const double &step, const QString &x_vo_api_id, const QString &x_vo_api_key, const OAIAddStepPayload &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1ProfileUsernamePoliciesStepPost"][_serverIndices.value("apiPublicV1ProfileUsernamePoliciesStepPost")].URL()+"/api-public/v1/profile/{username}/policies/{step}");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString stepPathParam("{");
        stepPathParam.append("step").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "step", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"step"+pathSuffix : pathPrefix;
        fullPath.replace(stepPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(step)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepPostCallback);
    connect(this, &OAIPersonalPagingPoliciesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_api_public_v1_profile__username__policies__step__post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepPostSignal(output);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepPostSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepPostSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepPut(const QString &username, const double &step, const QString &x_vo_api_id, const QString &x_vo_api_key, const OAIAddGroupPayload &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1ProfileUsernamePoliciesStepPut"][_serverIndices.value("apiPublicV1ProfileUsernamePoliciesStepPut")].URL()+"/api-public/v1/profile/{username}/policies/{step}");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString stepPathParam("{");
        stepPathParam.append("step").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "step", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"step"+pathSuffix : pathPrefix;
        fullPath.replace(stepPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(step)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepPutCallback);
    connect(this, &OAIPersonalPagingPoliciesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_api_public_v1_profile__username__policies_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepPutSignal(output);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepPutSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepPutSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepPutSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepRuleDelete(const QString &username, const double &step, const double &rule, const QString &x_vo_api_id, const QString &x_vo_api_key) {
    QString fullPath = QString(_serverConfigs["apiPublicV1ProfileUsernamePoliciesStepRuleDelete"][_serverIndices.value("apiPublicV1ProfileUsernamePoliciesStepRuleDelete")].URL()+"/api-public/v1/profile/{username}/policies/{step}/{rule}");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString stepPathParam("{");
        stepPathParam.append("step").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "step", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"step"+pathSuffix : pathPrefix;
        fullPath.replace(stepPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(step)));
    }
    
    {
        QString rulePathParam("{");
        rulePathParam.append("rule").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rule", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rule"+pathSuffix : pathPrefix;
        fullPath.replace(rulePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rule)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepRuleDeleteCallback);
    connect(this, &OAIPersonalPagingPoliciesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepRuleDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_api_public_v1_profile__username__policies__step__post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRuleDeleteSignal(output);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRuleDeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRuleDeleteSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRuleDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRuleDeleteSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRuleDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepRuleGet(const QString &username, const double &step, const double &rule, const QString &x_vo_api_id, const QString &x_vo_api_key) {
    QString fullPath = QString(_serverConfigs["apiPublicV1ProfileUsernamePoliciesStepRuleGet"][_serverIndices.value("apiPublicV1ProfileUsernamePoliciesStepRuleGet")].URL()+"/api-public/v1/profile/{username}/policies/{step}/{rule}");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString stepPathParam("{");
        stepPathParam.append("step").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "step", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"step"+pathSuffix : pathPrefix;
        fullPath.replace(stepPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(step)));
    }
    
    {
        QString rulePathParam("{");
        rulePathParam.append("rule").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rule", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rule"+pathSuffix : pathPrefix;
        fullPath.replace(rulePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rule)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepRuleGetCallback);
    connect(this, &OAIPersonalPagingPoliciesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepRuleGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_api_public_v1_profile__username__policies__step__post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRuleGetSignal(output);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRuleGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRuleGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRuleGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRuleGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRuleGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepRulePut(const QString &username, const double &step, const double &rule, const QString &x_vo_api_id, const QString &x_vo_api_key, const OAIAddStepPayload &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1ProfileUsernamePoliciesStepRulePut"][_serverIndices.value("apiPublicV1ProfileUsernamePoliciesStepRulePut")].URL()+"/api-public/v1/profile/{username}/policies/{step}/{rule}");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString stepPathParam("{");
        stepPathParam.append("step").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "step", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"step"+pathSuffix : pathPrefix;
        fullPath.replace(stepPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(step)));
    }
    
    {
        QString rulePathParam("{");
        rulePathParam.append("rule").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rule", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rule"+pathSuffix : pathPrefix;
        fullPath.replace(rulePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rule)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepRulePutCallback);
    connect(this, &OAIPersonalPagingPoliciesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalPagingPoliciesApi::apiPublicV1ProfileUsernamePoliciesStepRulePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_api_public_v1_profile__username__policies__step__post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRulePutSignal(output);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRulePutSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRulePutSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRulePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRulePutSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1ProfileUsernamePoliciesStepRulePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalPagingPoliciesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
