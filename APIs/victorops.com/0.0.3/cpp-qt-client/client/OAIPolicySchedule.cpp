/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicySchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicySchedule::OAIPolicySchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicySchedule::OAIPolicySchedule() {
    this->initializeModel();
}

OAIPolicySchedule::~OAIPolicySchedule() {}

void OAIPolicySchedule::initializeModel() {

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;
}

void OAIPolicySchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicySchedule::fromJsonObject(QJsonObject json) {

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;
}

QString OAIPolicySchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicySchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_overrides.size() > 0) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_schedule.size() > 0) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    return obj;
}

QList<OAIOnCallOverride> OAIPolicySchedule::getOverrides() const {
    return m_overrides;
}
void OAIPolicySchedule::setOverrides(const QList<OAIOnCallOverride> &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIPolicySchedule::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIPolicySchedule::is_overrides_Valid() const{
    return m_overrides_isValid;
}

OAIEscalationPolicy OAIPolicySchedule::getPolicy() const {
    return m_policy;
}
void OAIPolicySchedule::setPolicy(const OAIEscalationPolicy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPolicySchedule::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPolicySchedule::is_policy_Valid() const{
    return m_policy_isValid;
}

QList<OAIOnCallEntry> OAIPolicySchedule::getSchedule() const {
    return m_schedule;
}
void OAIPolicySchedule::setSchedule(const QList<OAIOnCallEntry> &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIPolicySchedule::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIPolicySchedule::is_schedule_Valid() const{
    return m_schedule_isValid;
}

bool OAIPolicySchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicySchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
