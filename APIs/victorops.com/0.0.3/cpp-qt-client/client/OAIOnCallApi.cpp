/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnCallApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIOnCallApi::OAIOnCallApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIOnCallApi::~OAIOnCallApi() {
}

void OAIOnCallApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.victorops.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("apiPublicV1OncallCurrentGet", defaultConf);
    _serverIndices.insert("apiPublicV1OncallCurrentGet", 0);
    _serverConfigs.insert("apiPublicV1PoliciesPolicyOncallUserPatch", defaultConf);
    _serverIndices.insert("apiPublicV1PoliciesPolicyOncallUserPatch", 0);
    _serverConfigs.insert("apiPublicV1TeamTeamOncallScheduleGet", defaultConf);
    _serverIndices.insert("apiPublicV1TeamTeamOncallScheduleGet", 0);
    _serverConfigs.insert("apiPublicV1TeamTeamOncallUserPatch", defaultConf);
    _serverIndices.insert("apiPublicV1TeamTeamOncallUserPatch", 0);
    _serverConfigs.insert("apiPublicV1UserUserOncallScheduleGet", defaultConf);
    _serverIndices.insert("apiPublicV1UserUserOncallScheduleGet", 0);
    _serverConfigs.insert("apiPublicV2TeamTeamOncallScheduleGet", defaultConf);
    _serverIndices.insert("apiPublicV2TeamTeamOncallScheduleGet", 0);
    _serverConfigs.insert("apiPublicV2UserUserOncallScheduleGet", defaultConf);
    _serverIndices.insert("apiPublicV2UserUserOncallScheduleGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIOnCallApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIOnCallApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIOnCallApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIOnCallApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIOnCallApi::setUsername(const QString &username) {
    _username = username;
}

void OAIOnCallApi::setPassword(const QString &password) {
    _password = password;
}


void OAIOnCallApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIOnCallApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIOnCallApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIOnCallApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIOnCallApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIOnCallApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIOnCallApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIOnCallApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIOnCallApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIOnCallApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIOnCallApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIOnCallApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIOnCallApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIOnCallApi::apiPublicV1OncallCurrentGet(const QString &x_vo_api_id, const QString &x_vo_api_key) {
    QString fullPath = QString(_serverConfigs["apiPublicV1OncallCurrentGet"][_serverIndices.value("apiPublicV1OncallCurrentGet")].URL()+"/api-public/v1/oncall/current");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOnCallApi::apiPublicV1OncallCurrentGetCallback);
    connect(this, &OAIOnCallApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOnCallApi::apiPublicV1OncallCurrentGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_api_public_v1_oncall_current_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1OncallCurrentGetSignal(output);
        Q_EMIT apiPublicV1OncallCurrentGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1OncallCurrentGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1OncallCurrentGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1OncallCurrentGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1OncallCurrentGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOnCallApi::apiPublicV1PoliciesPolicyOncallUserPatch(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &policy, const OAITakeRequest &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1PoliciesPolicyOncallUserPatch"][_serverIndices.value("apiPublicV1PoliciesPolicyOncallUserPatch")].URL()+"/api-public/v1/policies/{policy}/oncall/user");
    
    
    {
        QString policyPathParam("{");
        policyPathParam.append("policy").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "policy", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"policy"+pathSuffix : pathPrefix;
        fullPath.replace(policyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(policy)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOnCallApi::apiPublicV1PoliciesPolicyOncallUserPatchCallback);
    connect(this, &OAIOnCallApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOnCallApi::apiPublicV1PoliciesPolicyOncallUserPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITakeResult output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1PoliciesPolicyOncallUserPatchSignal(output);
        Q_EMIT apiPublicV1PoliciesPolicyOncallUserPatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1PoliciesPolicyOncallUserPatchSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1PoliciesPolicyOncallUserPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1PoliciesPolicyOncallUserPatchSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1PoliciesPolicyOncallUserPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOnCallApi::apiPublicV1TeamTeamOncallScheduleGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team, const ::OpenAPI::OptionalParam<double> &days_forward, const ::OpenAPI::OptionalParam<double> &days_skip, const ::OpenAPI::OptionalParam<double> &step) {
    QString fullPath = QString(_serverConfigs["apiPublicV1TeamTeamOncallScheduleGet"][_serverIndices.value("apiPublicV1TeamTeamOncallScheduleGet")].URL()+"/api-public/v1/team/{team}/oncall/schedule");
    
    
    {
        QString teamPathParam("{");
        teamPathParam.append("team").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team"+pathSuffix : pathPrefix;
        fullPath.replace(teamPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (days_forward.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "daysForward", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("daysForward")).append(querySuffix).append(QUrl::toPercentEncoding(days_forward.stringValue()));
    }
    if (days_skip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "daysSkip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("daysSkip")).append(querySuffix).append(QUrl::toPercentEncoding(days_skip.stringValue()));
    }
    if (step.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "step", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("step")).append(querySuffix).append(QUrl::toPercentEncoding(step.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOnCallApi::apiPublicV1TeamTeamOncallScheduleGetCallback);
    connect(this, &OAIOnCallApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOnCallApi::apiPublicV1TeamTeamOncallScheduleGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOnCallAndOverrides output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1TeamTeamOncallScheduleGetSignal(output);
        Q_EMIT apiPublicV1TeamTeamOncallScheduleGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1TeamTeamOncallScheduleGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1TeamTeamOncallScheduleGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1TeamTeamOncallScheduleGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1TeamTeamOncallScheduleGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOnCallApi::apiPublicV1TeamTeamOncallUserPatch(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team, const OAITakeRequest &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1TeamTeamOncallUserPatch"][_serverIndices.value("apiPublicV1TeamTeamOncallUserPatch")].URL()+"/api-public/v1/team/{team}/oncall/user");
    
    
    {
        QString teamPathParam("{");
        teamPathParam.append("team").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team"+pathSuffix : pathPrefix;
        fullPath.replace(teamPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOnCallApi::apiPublicV1TeamTeamOncallUserPatchCallback);
    connect(this, &OAIOnCallApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOnCallApi::apiPublicV1TeamTeamOncallUserPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITakeResult output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1TeamTeamOncallUserPatchSignal(output);
        Q_EMIT apiPublicV1TeamTeamOncallUserPatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1TeamTeamOncallUserPatchSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1TeamTeamOncallUserPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1TeamTeamOncallUserPatchSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1TeamTeamOncallUserPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOnCallApi::apiPublicV1UserUserOncallScheduleGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const ::OpenAPI::OptionalParam<double> &days_forward, const ::OpenAPI::OptionalParam<double> &days_skip, const ::OpenAPI::OptionalParam<double> &step) {
    QString fullPath = QString(_serverConfigs["apiPublicV1UserUserOncallScheduleGet"][_serverIndices.value("apiPublicV1UserUserOncallScheduleGet")].URL()+"/api-public/v1/user/{user}/oncall/schedule");
    
    
    {
        QString userPathParam("{");
        userPathParam.append("user").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user"+pathSuffix : pathPrefix;
        fullPath.replace(userPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (days_forward.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "daysForward", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("daysForward")).append(querySuffix).append(QUrl::toPercentEncoding(days_forward.stringValue()));
    }
    if (days_skip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "daysSkip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("daysSkip")).append(querySuffix).append(QUrl::toPercentEncoding(days_skip.stringValue()));
    }
    if (step.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "step", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("step")).append(querySuffix).append(QUrl::toPercentEncoding(step.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOnCallApi::apiPublicV1UserUserOncallScheduleGetCallback);
    connect(this, &OAIOnCallApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOnCallApi::apiPublicV1UserUserOncallScheduleGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIOnCallAndOverrides> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIOnCallAndOverrides val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1UserUserOncallScheduleGetSignal(output);
        Q_EMIT apiPublicV1UserUserOncallScheduleGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1UserUserOncallScheduleGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1UserUserOncallScheduleGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1UserUserOncallScheduleGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1UserUserOncallScheduleGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOnCallApi::apiPublicV2TeamTeamOncallScheduleGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team, const ::OpenAPI::OptionalParam<double> &days_forward, const ::OpenAPI::OptionalParam<double> &days_skip, const ::OpenAPI::OptionalParam<double> &step) {
    QString fullPath = QString(_serverConfigs["apiPublicV2TeamTeamOncallScheduleGet"][_serverIndices.value("apiPublicV2TeamTeamOncallScheduleGet")].URL()+"/api-public/v2/team/{team}/oncall/schedule");
    
    
    {
        QString teamPathParam("{");
        teamPathParam.append("team").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team"+pathSuffix : pathPrefix;
        fullPath.replace(teamPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (days_forward.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "daysForward", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("daysForward")).append(querySuffix).append(QUrl::toPercentEncoding(days_forward.stringValue()));
    }
    if (days_skip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "daysSkip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("daysSkip")).append(querySuffix).append(QUrl::toPercentEncoding(days_skip.stringValue()));
    }
    if (step.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "step", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("step")).append(querySuffix).append(QUrl::toPercentEncoding(step.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOnCallApi::apiPublicV2TeamTeamOncallScheduleGetCallback);
    connect(this, &OAIOnCallApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOnCallApi::apiPublicV2TeamTeamOncallScheduleGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITeamSchedule output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV2TeamTeamOncallScheduleGetSignal(output);
        Q_EMIT apiPublicV2TeamTeamOncallScheduleGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV2TeamTeamOncallScheduleGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV2TeamTeamOncallScheduleGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV2TeamTeamOncallScheduleGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV2TeamTeamOncallScheduleGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOnCallApi::apiPublicV2UserUserOncallScheduleGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const ::OpenAPI::OptionalParam<double> &days_forward, const ::OpenAPI::OptionalParam<double> &days_skip, const ::OpenAPI::OptionalParam<double> &step) {
    QString fullPath = QString(_serverConfigs["apiPublicV2UserUserOncallScheduleGet"][_serverIndices.value("apiPublicV2UserUserOncallScheduleGet")].URL()+"/api-public/v2/user/{user}/oncall/schedule");
    
    
    {
        QString userPathParam("{");
        userPathParam.append("user").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user"+pathSuffix : pathPrefix;
        fullPath.replace(userPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (days_forward.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "daysForward", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("daysForward")).append(querySuffix).append(QUrl::toPercentEncoding(days_forward.stringValue()));
    }
    if (days_skip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "daysSkip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("daysSkip")).append(querySuffix).append(QUrl::toPercentEncoding(days_skip.stringValue()));
    }
    if (step.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "step", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("step")).append(querySuffix).append(QUrl::toPercentEncoding(step.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOnCallApi::apiPublicV2UserUserOncallScheduleGetCallback);
    connect(this, &OAIOnCallApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOnCallApi::apiPublicV2UserUserOncallScheduleGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUserSchedule output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV2UserUserOncallScheduleGetSignal(output);
        Q_EMIT apiPublicV2UserUserOncallScheduleGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV2UserUserOncallScheduleGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV2UserUserOncallScheduleGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV2UserUserOncallScheduleGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV2UserUserOncallScheduleGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOnCallApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
