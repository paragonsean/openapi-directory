/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAckOrResolveResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAckOrResolveResult::OAIAckOrResolveResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAckOrResolveResult::OAIAckOrResolveResult() {
    this->initializeModel();
}

OAIAckOrResolveResult::~OAIAckOrResolveResult() {}

void OAIAckOrResolveResult::initializeModel() {

    m_cmd_accepted_isSet = false;
    m_cmd_accepted_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_incident_number_isSet = false;
    m_incident_number_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIAckOrResolveResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAckOrResolveResult::fromJsonObject(QJsonObject json) {

    m_cmd_accepted_isValid = ::OpenAPI::fromJsonValue(m_cmd_accepted, json[QString("cmdAccepted")]);
    m_cmd_accepted_isSet = !json[QString("cmdAccepted")].isNull() && m_cmd_accepted_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_incident_number_isValid = ::OpenAPI::fromJsonValue(m_incident_number, json[QString("incidentNumber")]);
    m_incident_number_isSet = !json[QString("incidentNumber")].isNull() && m_incident_number_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIAckOrResolveResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAckOrResolveResult::asJsonObject() const {
    QJsonObject obj;
    if (m_cmd_accepted_isSet) {
        obj.insert(QString("cmdAccepted"), ::OpenAPI::toJsonValue(m_cmd_accepted));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_incident_number_isSet) {
        obj.insert(QString("incidentNumber"), ::OpenAPI::toJsonValue(m_incident_number));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

bool OAIAckOrResolveResult::isCmdAccepted() const {
    return m_cmd_accepted;
}
void OAIAckOrResolveResult::setCmdAccepted(const bool &cmd_accepted) {
    m_cmd_accepted = cmd_accepted;
    m_cmd_accepted_isSet = true;
}

bool OAIAckOrResolveResult::is_cmd_accepted_Set() const{
    return m_cmd_accepted_isSet;
}

bool OAIAckOrResolveResult::is_cmd_accepted_Valid() const{
    return m_cmd_accepted_isValid;
}

QString OAIAckOrResolveResult::getEntityId() const {
    return m_entity_id;
}
void OAIAckOrResolveResult::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIAckOrResolveResult::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIAckOrResolveResult::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIAckOrResolveResult::getIncidentNumber() const {
    return m_incident_number;
}
void OAIAckOrResolveResult::setIncidentNumber(const QString &incident_number) {
    m_incident_number = incident_number;
    m_incident_number_isSet = true;
}

bool OAIAckOrResolveResult::is_incident_number_Set() const{
    return m_incident_number_isSet;
}

bool OAIAckOrResolveResult::is_incident_number_Valid() const{
    return m_incident_number_isValid;
}

QString OAIAckOrResolveResult::getMessage() const {
    return m_message;
}
void OAIAckOrResolveResult::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAckOrResolveResult::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAckOrResolveResult::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIAckOrResolveResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cmd_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incident_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAckOrResolveResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
