/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeoutDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeoutDescription::OAITimeoutDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeoutDescription::OAITimeoutDescription() {
    this->initializeModel();
}

OAITimeoutDescription::~OAITimeoutDescription() {}

void OAITimeoutDescription::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITimeoutDescription::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITimeoutDescription::fromJson(QString jsonString) {
    
    if ( jsonString.compare("If still unacked after 1 minute", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutDescription::_1_MINUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("If still unacked after 5 minute", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutDescription::_5_MINUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("If still unacked after 10 minute", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutDescription::_10_MINUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("If still unacked after 15 minute", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutDescription::_15_MINUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("If still unacked after 20 minute", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutDescription::_20_MINUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("If still unacked after 25 minute", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutDescription::_25_MINUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("If still unacked after 30 minute", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutDescription::_30_MINUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("If still unacked after 45 minute", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutDescription::_45_MINUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("If still unacked after 60 minute", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutDescription::_60_MINUTE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITimeoutDescription::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITimeoutDescription::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITimeoutDescription::_1_MINUTE:
            val = "If still unacked after 1 minute";
            break;
        case eOAITimeoutDescription::_5_MINUTE:
            val = "If still unacked after 5 minute";
            break;
        case eOAITimeoutDescription::_10_MINUTE:
            val = "If still unacked after 10 minute";
            break;
        case eOAITimeoutDescription::_15_MINUTE:
            val = "If still unacked after 15 minute";
            break;
        case eOAITimeoutDescription::_20_MINUTE:
            val = "If still unacked after 20 minute";
            break;
        case eOAITimeoutDescription::_25_MINUTE:
            val = "If still unacked after 25 minute";
            break;
        case eOAITimeoutDescription::_30_MINUTE:
            val = "If still unacked after 30 minute";
            break;
        case eOAITimeoutDescription::_45_MINUTE:
            val = "If still unacked after 45 minute";
            break;
        case eOAITimeoutDescription::_60_MINUTE:
            val = "If still unacked after 60 minute";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITimeoutDescription::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITimeoutDescription::eOAITimeoutDescription OAITimeoutDescription::getValue() const {
    return m_value;
}

void OAITimeoutDescription::setValue(const OAITimeoutDescription::eOAITimeoutDescription& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITimeoutDescription::isSet() const {
    
    return m_value_isSet;
}

bool OAITimeoutDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
