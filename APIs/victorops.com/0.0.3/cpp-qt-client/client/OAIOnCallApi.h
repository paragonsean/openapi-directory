/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOnCallApi_H
#define OAI_OAIOnCallApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOnCallAndOverrides.h"
#include "OAITakeRequest.h"
#include "OAITakeResult.h"
#include "OAITeamSchedule.h"
#include "OAIUserSchedule.h"
#include "OAI_api_public_v1_oncall_current_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOnCallApi : public QObject {
    Q_OBJECT

public:
    OAIOnCallApi(const int timeOut = 0);
    ~OAIOnCallApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    */
    virtual void apiPublicV1OncallCurrentGet(const QString &x_vo_api_id, const QString &x_vo_api_key);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  policy QString [required]
    * @param[in]  body OAITakeRequest [required]
    */
    virtual void apiPublicV1PoliciesPolicyOncallUserPatch(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &policy, const OAITakeRequest &body);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  team QString [required]
    * @param[in]  days_forward double [optional]
    * @param[in]  days_skip double [optional]
    * @param[in]  step double [optional]
    */
    Q_DECL_DEPRECATED virtual void apiPublicV1TeamTeamOncallScheduleGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team, const ::OpenAPI::OptionalParam<double> &days_forward = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &days_skip = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &step = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  team QString [required]
    * @param[in]  body OAITakeRequest [required]
    */
    Q_DECL_DEPRECATED virtual void apiPublicV1TeamTeamOncallUserPatch(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team, const OAITakeRequest &body);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    * @param[in]  days_forward double [optional]
    * @param[in]  days_skip double [optional]
    * @param[in]  step double [optional]
    */
    Q_DECL_DEPRECATED virtual void apiPublicV1UserUserOncallScheduleGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const ::OpenAPI::OptionalParam<double> &days_forward = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &days_skip = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &step = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  team QString [required]
    * @param[in]  days_forward double [optional]
    * @param[in]  days_skip double [optional]
    * @param[in]  step double [optional]
    */
    virtual void apiPublicV2TeamTeamOncallScheduleGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team, const ::OpenAPI::OptionalParam<double> &days_forward = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &days_skip = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &step = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  user QString [required]
    * @param[in]  days_forward double [optional]
    * @param[in]  days_skip double [optional]
    * @param[in]  step double [optional]
    */
    virtual void apiPublicV2UserUserOncallScheduleGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &user, const ::OpenAPI::OptionalParam<double> &days_forward = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &days_skip = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &step = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiPublicV1OncallCurrentGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1PoliciesPolicyOncallUserPatchCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamTeamOncallScheduleGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1TeamTeamOncallUserPatchCallback(OAIHttpRequestWorker *worker);
    void apiPublicV1UserUserOncallScheduleGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV2TeamTeamOncallScheduleGetCallback(OAIHttpRequestWorker *worker);
    void apiPublicV2UserUserOncallScheduleGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiPublicV1OncallCurrentGetSignal(OAI_api_public_v1_oncall_current_get_200_response summary);
    void apiPublicV1PoliciesPolicyOncallUserPatchSignal(OAITakeResult summary);
    void apiPublicV1TeamTeamOncallScheduleGetSignal(OAIOnCallAndOverrides summary);
    void apiPublicV1TeamTeamOncallUserPatchSignal(OAITakeResult summary);
    void apiPublicV1UserUserOncallScheduleGetSignal(QList<OAIOnCallAndOverrides> summary);
    void apiPublicV2TeamTeamOncallScheduleGetSignal(OAITeamSchedule summary);
    void apiPublicV2UserUserOncallScheduleGetSignal(OAIUserSchedule summary);


    void apiPublicV1OncallCurrentGetSignalFull(OAIHttpRequestWorker *worker, OAI_api_public_v1_oncall_current_get_200_response summary);
    void apiPublicV1PoliciesPolicyOncallUserPatchSignalFull(OAIHttpRequestWorker *worker, OAITakeResult summary);
    void apiPublicV1TeamTeamOncallScheduleGetSignalFull(OAIHttpRequestWorker *worker, OAIOnCallAndOverrides summary);
    void apiPublicV1TeamTeamOncallUserPatchSignalFull(OAIHttpRequestWorker *worker, OAITakeResult summary);
    void apiPublicV1UserUserOncallScheduleGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOnCallAndOverrides> summary);
    void apiPublicV2TeamTeamOncallScheduleGetSignalFull(OAIHttpRequestWorker *worker, OAITeamSchedule summary);
    void apiPublicV2UserUserOncallScheduleGetSignalFull(OAIHttpRequestWorker *worker, OAIUserSchedule summary);

    Q_DECL_DEPRECATED_X("Use apiPublicV1OncallCurrentGetSignalError() instead")
    void apiPublicV1OncallCurrentGetSignalE(OAI_api_public_v1_oncall_current_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OncallCurrentGetSignalError(OAI_api_public_v1_oncall_current_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1PoliciesPolicyOncallUserPatchSignalError() instead")
    void apiPublicV1PoliciesPolicyOncallUserPatchSignalE(OAITakeResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1PoliciesPolicyOncallUserPatchSignalError(OAITakeResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamOncallScheduleGetSignalError() instead")
    void apiPublicV1TeamTeamOncallScheduleGetSignalE(OAIOnCallAndOverrides summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamOncallScheduleGetSignalError(OAIOnCallAndOverrides summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamOncallUserPatchSignalError() instead")
    void apiPublicV1TeamTeamOncallUserPatchSignalE(OAITakeResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamOncallUserPatchSignalError(OAITakeResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserOncallScheduleGetSignalError() instead")
    void apiPublicV1UserUserOncallScheduleGetSignalE(QList<OAIOnCallAndOverrides> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserOncallScheduleGetSignalError(QList<OAIOnCallAndOverrides> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV2TeamTeamOncallScheduleGetSignalError() instead")
    void apiPublicV2TeamTeamOncallScheduleGetSignalE(OAITeamSchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV2TeamTeamOncallScheduleGetSignalError(OAITeamSchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV2UserUserOncallScheduleGetSignalError() instead")
    void apiPublicV2UserUserOncallScheduleGetSignalE(OAIUserSchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV2UserUserOncallScheduleGetSignalError(OAIUserSchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiPublicV1OncallCurrentGetSignalErrorFull() instead")
    void apiPublicV1OncallCurrentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1OncallCurrentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1PoliciesPolicyOncallUserPatchSignalErrorFull() instead")
    void apiPublicV1PoliciesPolicyOncallUserPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1PoliciesPolicyOncallUserPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamOncallScheduleGetSignalErrorFull() instead")
    void apiPublicV1TeamTeamOncallScheduleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamOncallScheduleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1TeamTeamOncallUserPatchSignalErrorFull() instead")
    void apiPublicV1TeamTeamOncallUserPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1TeamTeamOncallUserPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV1UserUserOncallScheduleGetSignalErrorFull() instead")
    void apiPublicV1UserUserOncallScheduleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV1UserUserOncallScheduleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV2TeamTeamOncallScheduleGetSignalErrorFull() instead")
    void apiPublicV2TeamTeamOncallScheduleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV2TeamTeamOncallScheduleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPublicV2UserUserOncallScheduleGetSignalErrorFull() instead")
    void apiPublicV2UserUserOncallScheduleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPublicV2UserUserOncallScheduleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
