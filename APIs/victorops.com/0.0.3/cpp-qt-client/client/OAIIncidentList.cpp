/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncidentList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncidentList::OAIIncidentList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncidentList::OAIIncidentList() {
    this->initializeModel();
}

OAIIncidentList::~OAIIncidentList() {}

void OAIIncidentList::initializeModel() {

    m_incidents_isSet = false;
    m_incidents_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIIncidentList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncidentList::fromJsonObject(QJsonObject json) {

    m_incidents_isValid = ::OpenAPI::fromJsonValue(m_incidents, json[QString("incidents")]);
    m_incidents_isSet = !json[QString("incidents")].isNull() && m_incidents_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIIncidentList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncidentList::asJsonObject() const {
    QJsonObject obj;
    if (m_incidents.size() > 0) {
        obj.insert(QString("incidents"), ::OpenAPI::toJsonValue(m_incidents));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QList<OAIIncidentInfo> OAIIncidentList::getIncidents() const {
    return m_incidents;
}
void OAIIncidentList::setIncidents(const QList<OAIIncidentInfo> &incidents) {
    m_incidents = incidents;
    m_incidents_isSet = true;
}

bool OAIIncidentList::is_incidents_Set() const{
    return m_incidents_isSet;
}

bool OAIIncidentList::is_incidents_Valid() const{
    return m_incidents_isValid;
}

double OAIIncidentList::getLimit() const {
    return m_limit;
}
void OAIIncidentList::setLimit(const double &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIIncidentList::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIIncidentList::is_limit_Valid() const{
    return m_limit_isValid;
}

double OAIIncidentList::getOffset() const {
    return m_offset;
}
void OAIIncidentList::setOffset(const double &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIIncidentList::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIIncidentList::is_offset_Valid() const{
    return m_offset_isValid;
}

double OAIIncidentList::getTotal() const {
    return m_total;
}
void OAIIncidentList::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIIncidentList::is_total_Set() const{
    return m_total_isSet;
}

bool OAIIncidentList::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIIncidentList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_incidents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncidentList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
