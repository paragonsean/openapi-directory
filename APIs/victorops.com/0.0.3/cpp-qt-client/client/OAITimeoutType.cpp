/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeoutType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeoutType::OAITimeoutType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeoutType::OAITimeoutType() {
    this->initializeModel();
}

OAITimeoutType::~OAITimeoutType() {}

void OAITimeoutType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITimeoutType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITimeoutType::fromJson(QString jsonString) {
    
    if ( jsonString.compare(QString::number(1), Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutType::_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(5), Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutType::_5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(10), Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutType::_10;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(15), Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutType::_15;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(20), Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutType::_20;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(25), Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutType::_25;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(30), Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutType::_30;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(45), Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutType::_45;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(60), Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeoutType::_60;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITimeoutType::fromJsonValue(QJsonValue json) {
m_value = static_cast<eOAITimeoutType>(json.toInt());
}

QString OAITimeoutType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITimeoutType::_1:
            val = QString::number(1);
            break;
        case eOAITimeoutType::_5:
            val = QString::number(5);
            break;
        case eOAITimeoutType::_10:
            val = QString::number(10);
            break;
        case eOAITimeoutType::_15:
            val = QString::number(15);
            break;
        case eOAITimeoutType::_20:
            val = QString::number(20);
            break;
        case eOAITimeoutType::_25:
            val = QString::number(25);
            break;
        case eOAITimeoutType::_30:
            val = QString::number(30);
            break;
        case eOAITimeoutType::_45:
            val = QString::number(45);
            break;
        case eOAITimeoutType::_60:
            val = QString::number(60);
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITimeoutType::asJsonValue() const {
    
    return QJsonValue(static_cast<int>(m_value));
}


OAITimeoutType::eOAITimeoutType OAITimeoutType::getValue() const {
    return m_value;
}

void OAITimeoutType::setValue(const OAITimeoutType::eOAITimeoutType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITimeoutType::isSet() const {
    
    return m_value_isSet;
}

bool OAITimeoutType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
