/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActiveMaintenanceMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActiveMaintenanceMode::OAIActiveMaintenanceMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActiveMaintenanceMode::OAIActiveMaintenanceMode() {
    this->initializeModel();
}

OAIActiveMaintenanceMode::~OAIActiveMaintenanceMode() {}

void OAIActiveMaintenanceMode::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_is_global_isSet = false;
    m_is_global_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_started_by_isSet = false;
    m_started_by_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;
}

void OAIActiveMaintenanceMode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActiveMaintenanceMode::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_is_global_isValid = ::OpenAPI::fromJsonValue(m_is_global, json[QString("isGlobal")]);
    m_is_global_isSet = !json[QString("isGlobal")].isNull() && m_is_global_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_started_by_isValid = ::OpenAPI::fromJsonValue(m_started_by, json[QString("startedBy")]);
    m_started_by_isSet = !json[QString("startedBy")].isNull() && m_started_by_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;
}

QString OAIActiveMaintenanceMode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActiveMaintenanceMode::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_is_global_isSet) {
        obj.insert(QString("isGlobal"), ::OpenAPI::toJsonValue(m_is_global));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_started_by_isSet) {
        obj.insert(QString("startedBy"), ::OpenAPI::toJsonValue(m_started_by));
    }
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    return obj;
}

QString OAIActiveMaintenanceMode::getInstanceId() const {
    return m_instance_id;
}
void OAIActiveMaintenanceMode::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIActiveMaintenanceMode::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIActiveMaintenanceMode::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

bool OAIActiveMaintenanceMode::isIsGlobal() const {
    return m_is_global;
}
void OAIActiveMaintenanceMode::setIsGlobal(const bool &is_global) {
    m_is_global = is_global;
    m_is_global_isSet = true;
}

bool OAIActiveMaintenanceMode::is_is_global_Set() const{
    return m_is_global_isSet;
}

bool OAIActiveMaintenanceMode::is_is_global_Valid() const{
    return m_is_global_isValid;
}

double OAIActiveMaintenanceMode::getStartedAt() const {
    return m_started_at;
}
void OAIActiveMaintenanceMode::setStartedAt(const double &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIActiveMaintenanceMode::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIActiveMaintenanceMode::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIActiveMaintenanceMode::getStartedBy() const {
    return m_started_by;
}
void OAIActiveMaintenanceMode::setStartedBy(const QString &started_by) {
    m_started_by = started_by;
    m_started_by_isSet = true;
}

bool OAIActiveMaintenanceMode::is_started_by_Set() const{
    return m_started_by_isSet;
}

bool OAIActiveMaintenanceMode::is_started_by_Valid() const{
    return m_started_by_isValid;
}

QList<OAIMaintenanceModeTarget> OAIActiveMaintenanceMode::getTargets() const {
    return m_targets;
}
void OAIActiveMaintenanceMode::setTargets(const QList<OAIMaintenanceModeTarget> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIActiveMaintenanceMode::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIActiveMaintenanceMode::is_targets_Valid() const{
    return m_targets_isValid;
}

bool OAIActiveMaintenanceMode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_global_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActiveMaintenanceMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
