/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamScheduleOverlayResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamScheduleOverlayResource::OAITeamScheduleOverlayResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamScheduleOverlayResource::OAITeamScheduleOverlayResource() {
    this->initializeModel();
}

OAITeamScheduleOverlayResource::~OAITeamScheduleOverlayResource() {}

void OAITeamScheduleOverlayResource::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_orig_isSet = false;
    m_orig_isValid = false;

    m_over_isSet = false;
    m_over_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAITeamScheduleOverlayResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamScheduleOverlayResource::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_orig_isValid = ::OpenAPI::fromJsonValue(m_orig, json[QString("orig")]);
    m_orig_isSet = !json[QString("orig")].isNull() && m_orig_isValid;

    m_over_isValid = ::OpenAPI::fromJsonValue(m_over, json[QString("over")]);
    m_over_isSet = !json[QString("over")].isNull() && m_over_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAITeamScheduleOverlayResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamScheduleOverlayResource::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_orig_isSet) {
        obj.insert(QString("orig"), ::OpenAPI::toJsonValue(m_orig));
    }
    if (m_over_isSet) {
        obj.insert(QString("over"), ::OpenAPI::toJsonValue(m_over));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

double OAITeamScheduleOverlayResource::getEnd() const {
    return m_end;
}
void OAITeamScheduleOverlayResource::setEnd(const double &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAITeamScheduleOverlayResource::is_end_Set() const{
    return m_end_isSet;
}

bool OAITeamScheduleOverlayResource::is_end_Valid() const{
    return m_end_isValid;
}

QString OAITeamScheduleOverlayResource::getOrig() const {
    return m_orig;
}
void OAITeamScheduleOverlayResource::setOrig(const QString &orig) {
    m_orig = orig;
    m_orig_isSet = true;
}

bool OAITeamScheduleOverlayResource::is_orig_Set() const{
    return m_orig_isSet;
}

bool OAITeamScheduleOverlayResource::is_orig_Valid() const{
    return m_orig_isValid;
}

QString OAITeamScheduleOverlayResource::getOver() const {
    return m_over;
}
void OAITeamScheduleOverlayResource::setOver(const QString &over) {
    m_over = over;
    m_over_isSet = true;
}

bool OAITeamScheduleOverlayResource::is_over_Set() const{
    return m_over_isSet;
}

bool OAITeamScheduleOverlayResource::is_over_Valid() const{
    return m_over_isValid;
}

double OAITeamScheduleOverlayResource::getStart() const {
    return m_start;
}
void OAITeamScheduleOverlayResource::setStart(const double &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAITeamScheduleOverlayResource::is_start_Set() const{
    return m_start_isSet;
}

bool OAITeamScheduleOverlayResource::is_start_Valid() const{
    return m_start_isValid;
}

bool OAITeamScheduleOverlayResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamScheduleOverlayResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
