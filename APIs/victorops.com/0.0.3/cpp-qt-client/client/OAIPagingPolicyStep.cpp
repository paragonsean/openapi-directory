/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagingPolicyStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagingPolicyStep::OAIPagingPolicyStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagingPolicyStep::OAIPagingPolicyStep() {
    this->initializeModel();
}

OAIPagingPolicyStep::~OAIPagingPolicyStep() {}

void OAIPagingPolicyStep::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIPagingPolicyStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagingPolicyStep::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIPagingPolicyStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagingPolicyStep::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_timeout.isSet()) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

double OAIPagingPolicyStep::getIndex() const {
    return m_index;
}
void OAIPagingPolicyStep::setIndex(const double &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIPagingPolicyStep::is_index_Set() const{
    return m_index_isSet;
}

bool OAIPagingPolicyStep::is_index_Valid() const{
    return m_index_isValid;
}

QList<OAIPagingPolicyStepRule> OAIPagingPolicyStep::getRules() const {
    return m_rules;
}
void OAIPagingPolicyStep::setRules(const QList<OAIPagingPolicyStepRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIPagingPolicyStep::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIPagingPolicyStep::is_rules_Valid() const{
    return m_rules_isValid;
}

OAITimeoutType OAIPagingPolicyStep::getTimeout() const {
    return m_timeout;
}
void OAIPagingPolicyStep::setTimeout(const OAITimeoutType &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIPagingPolicyStep::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIPagingPolicyStep::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIPagingPolicyStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagingPolicyStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
