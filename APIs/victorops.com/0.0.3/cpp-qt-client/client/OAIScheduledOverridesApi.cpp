/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledOverridesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIScheduledOverridesApi::OAIScheduledOverridesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIScheduledOverridesApi::~OAIScheduledOverridesApi() {
}

void OAIScheduledOverridesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.victorops.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("apiPublicV1OverridesGet", defaultConf);
    _serverIndices.insert("apiPublicV1OverridesGet", 0);
    _serverConfigs.insert("apiPublicV1OverridesPost", defaultConf);
    _serverIndices.insert("apiPublicV1OverridesPost", 0);
    _serverConfigs.insert("apiPublicV1OverridesPublicIdAssignmentsGet", defaultConf);
    _serverIndices.insert("apiPublicV1OverridesPublicIdAssignmentsGet", 0);
    _serverConfigs.insert("apiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete", defaultConf);
    _serverIndices.insert("apiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete", 0);
    _serverConfigs.insert("apiPublicV1OverridesPublicIdAssignmentsPolicySlugGet", defaultConf);
    _serverIndices.insert("apiPublicV1OverridesPublicIdAssignmentsPolicySlugGet", 0);
    _serverConfigs.insert("apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut", defaultConf);
    _serverIndices.insert("apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut", 0);
    _serverConfigs.insert("apiPublicV1OverridesPublicIdDelete", defaultConf);
    _serverIndices.insert("apiPublicV1OverridesPublicIdDelete", 0);
    _serverConfigs.insert("apiPublicV1OverridesPublicIdGet", defaultConf);
    _serverIndices.insert("apiPublicV1OverridesPublicIdGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIScheduledOverridesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIScheduledOverridesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIScheduledOverridesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIScheduledOverridesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIScheduledOverridesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIScheduledOverridesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIScheduledOverridesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIScheduledOverridesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIScheduledOverridesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIScheduledOverridesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIScheduledOverridesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIScheduledOverridesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIScheduledOverridesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIScheduledOverridesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIScheduledOverridesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIScheduledOverridesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIScheduledOverridesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIScheduledOverridesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIScheduledOverridesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIScheduledOverridesApi::apiPublicV1OverridesGet(const QString &x_vo_api_id, const QString &x_vo_api_key) {
    QString fullPath = QString(_serverConfigs["apiPublicV1OverridesGet"][_serverIndices.value("apiPublicV1OverridesGet")].URL()+"/api-public/v1/overrides");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledOverridesApi::apiPublicV1OverridesGetCallback);
    connect(this, &OAIScheduledOverridesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledOverridesApi::apiPublicV1OverridesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_api_public_v1_overrides_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1OverridesGetSignal(output);
        Q_EMIT apiPublicV1OverridesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1OverridesGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1OverridesGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPost(const QString &x_vo_api_id, const QString &x_vo_api_key, const OAIScheduledOverridePayload &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1OverridesPost"][_serverIndices.value("apiPublicV1OverridesPost")].URL()+"/api-public/v1/overrides");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledOverridesApi::apiPublicV1OverridesPostCallback);
    connect(this, &OAIScheduledOverridesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_api_public_v1_overrides_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1OverridesPostSignal(output);
        Q_EMIT apiPublicV1OverridesPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1OverridesPostSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1OverridesPostSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdAssignmentsGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &public_id) {
    QString fullPath = QString(_serverConfigs["apiPublicV1OverridesPublicIdAssignmentsGet"][_serverIndices.value("apiPublicV1OverridesPublicIdAssignmentsGet")].URL()+"/api-public/v1/overrides/{publicId}/assignments");
    
    
    {
        QString public_idPathParam("{");
        public_idPathParam.append("publicId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publicId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publicId"+pathSuffix : pathPrefix;
        fullPath.replace(public_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(public_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdAssignmentsGetCallback);
    connect(this, &OAIScheduledOverridesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdAssignmentsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAssignment> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAssignment val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsGetSignal(output);
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &public_id, const QString &policy_slug) {
    QString fullPath = QString(_serverConfigs["apiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete"][_serverIndices.value("apiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete")].URL()+"/api-public/v1/overrides/{publicId}/assignments/{policySlug}");
    
    
    {
        QString public_idPathParam("{");
        public_idPathParam.append("publicId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publicId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publicId"+pathSuffix : pathPrefix;
        fullPath.replace(public_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(public_id)));
    }
    
    {
        QString policy_slugPathParam("{");
        policy_slugPathParam.append("policySlug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "policySlug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"policySlug"+pathSuffix : pathPrefix;
        fullPath.replace(policy_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(policy_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteCallback);
    connect(this, &OAIScheduledOverridesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAssignment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignal(output);
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdAssignmentsPolicySlugGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &public_id, const QString &policy_slug) {
    QString fullPath = QString(_serverConfigs["apiPublicV1OverridesPublicIdAssignmentsPolicySlugGet"][_serverIndices.value("apiPublicV1OverridesPublicIdAssignmentsPolicySlugGet")].URL()+"/api-public/v1/overrides/{publicId}/assignments/{policySlug}");
    
    
    {
        QString public_idPathParam("{");
        public_idPathParam.append("publicId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publicId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publicId"+pathSuffix : pathPrefix;
        fullPath.replace(public_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(public_id)));
    }
    
    {
        QString policy_slugPathParam("{");
        policy_slugPathParam.append("policySlug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "policySlug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"policySlug"+pathSuffix : pathPrefix;
        fullPath.replace(policy_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(policy_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetCallback);
    connect(this, &OAIScheduledOverridesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAssignment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignal(output);
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &public_id, const QString &policy_slug, const OAIUpdateAssignment &body) {
    QString fullPath = QString(_serverConfigs["apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut"][_serverIndices.value("apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut")].URL()+"/api-public/v1/overrides/{publicId}/assignments/{policySlug}");
    
    
    {
        QString public_idPathParam("{");
        public_idPathParam.append("publicId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publicId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publicId"+pathSuffix : pathPrefix;
        fullPath.replace(public_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(public_id)));
    }
    
    {
        QString policy_slugPathParam("{");
        policy_slugPathParam.append("policySlug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "policySlug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"policySlug"+pathSuffix : pathPrefix;
        fullPath.replace(policy_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(policy_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutCallback);
    connect(this, &OAIScheduledOverridesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAssignment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignal(output);
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdDelete(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &public_id) {
    QString fullPath = QString(_serverConfigs["apiPublicV1OverridesPublicIdDelete"][_serverIndices.value("apiPublicV1OverridesPublicIdDelete")].URL()+"/api-public/v1/overrides/{publicId}");
    
    
    {
        QString public_idPathParam("{");
        public_idPathParam.append("publicId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publicId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publicId"+pathSuffix : pathPrefix;
        fullPath.replace(public_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(public_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdDeleteCallback);
    connect(this, &OAIScheduledOverridesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1OverridesPublicIdDeleteSignal();
        Q_EMIT apiPublicV1OverridesPublicIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1OverridesPublicIdDeleteSignalE(error_type, error_str);
        Q_EMIT apiPublicV1OverridesPublicIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1OverridesPublicIdDeleteSignalError(error_type, error_str);
        Q_EMIT apiPublicV1OverridesPublicIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &public_id) {
    QString fullPath = QString(_serverConfigs["apiPublicV1OverridesPublicIdGet"][_serverIndices.value("apiPublicV1OverridesPublicIdGet")].URL()+"/api-public/v1/overrides/{publicId}");
    
    
    {
        QString public_idPathParam("{");
        public_idPathParam.append("publicId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publicId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publicId"+pathSuffix : pathPrefix;
        fullPath.replace(public_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(public_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_id).isEmpty()) {
            input.headers.insert("X-VO-Api-Id", ::OpenAPI::toStringValue(x_vo_api_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vo_api_key).isEmpty()) {
            input.headers.insert("X-VO-Api-Key", ::OpenAPI::toStringValue(x_vo_api_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdGetCallback);
    connect(this, &OAIScheduledOverridesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledOverridesApi::apiPublicV1OverridesPublicIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_api_public_v1_overrides__publicId__get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiPublicV1OverridesPublicIdGetSignal(output);
        Q_EMIT apiPublicV1OverridesPublicIdGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiPublicV1OverridesPublicIdGetSignalE(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesPublicIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiPublicV1OverridesPublicIdGetSignalError(output, error_type, error_str);
        Q_EMIT apiPublicV1OverridesPublicIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledOverridesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
