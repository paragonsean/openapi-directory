/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAlertResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAlertResponse::OAIGetAlertResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAlertResponse::OAIGetAlertResponse() {
    this->initializeModel();
}

OAIGetAlertResponse::~OAIGetAlertResponse() {}

void OAIGetAlertResponse::initializeModel() {

    m_ack_author_isSet = false;
    m_ack_author_isValid = false;

    m_ack_msg_isSet = false;
    m_ack_msg_isValid = false;

    m_entity_display_name_isSet = false;
    m_entity_display_name_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_monitoring_tool_isSet = false;
    m_monitoring_tool_isValid = false;

    m_raw_isSet = false;
    m_raw_isValid = false;

    m_state_message_isSet = false;
    m_state_message_isValid = false;

    m_state_start_time_isSet = false;
    m_state_start_time_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIGetAlertResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAlertResponse::fromJsonObject(QJsonObject json) {

    m_ack_author_isValid = ::OpenAPI::fromJsonValue(m_ack_author, json[QString("ackAuthor")]);
    m_ack_author_isSet = !json[QString("ackAuthor")].isNull() && m_ack_author_isValid;

    m_ack_msg_isValid = ::OpenAPI::fromJsonValue(m_ack_msg, json[QString("ackMsg")]);
    m_ack_msg_isSet = !json[QString("ackMsg")].isNull() && m_ack_msg_isValid;

    m_entity_display_name_isValid = ::OpenAPI::fromJsonValue(m_entity_display_name, json[QString("entityDisplayName")]);
    m_entity_display_name_isSet = !json[QString("entityDisplayName")].isNull() && m_entity_display_name_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("messageType")]);
    m_message_type_isSet = !json[QString("messageType")].isNull() && m_message_type_isValid;

    m_monitoring_tool_isValid = ::OpenAPI::fromJsonValue(m_monitoring_tool, json[QString("monitoringTool")]);
    m_monitoring_tool_isSet = !json[QString("monitoringTool")].isNull() && m_monitoring_tool_isValid;

    m_raw_isValid = ::OpenAPI::fromJsonValue(m_raw, json[QString("raw")]);
    m_raw_isSet = !json[QString("raw")].isNull() && m_raw_isValid;

    m_state_message_isValid = ::OpenAPI::fromJsonValue(m_state_message, json[QString("stateMessage")]);
    m_state_message_isSet = !json[QString("stateMessage")].isNull() && m_state_message_isValid;

    m_state_start_time_isValid = ::OpenAPI::fromJsonValue(m_state_start_time, json[QString("stateStartTime")]);
    m_state_start_time_isSet = !json[QString("stateStartTime")].isNull() && m_state_start_time_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIGetAlertResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAlertResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ack_author_isSet) {
        obj.insert(QString("ackAuthor"), ::OpenAPI::toJsonValue(m_ack_author));
    }
    if (m_ack_msg_isSet) {
        obj.insert(QString("ackMsg"), ::OpenAPI::toJsonValue(m_ack_msg));
    }
    if (m_entity_display_name_isSet) {
        obj.insert(QString("entityDisplayName"), ::OpenAPI::toJsonValue(m_entity_display_name));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_message_type_isSet) {
        obj.insert(QString("messageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_monitoring_tool_isSet) {
        obj.insert(QString("monitoringTool"), ::OpenAPI::toJsonValue(m_monitoring_tool));
    }
    if (m_raw_isSet) {
        obj.insert(QString("raw"), ::OpenAPI::toJsonValue(m_raw));
    }
    if (m_state_message_isSet) {
        obj.insert(QString("stateMessage"), ::OpenAPI::toJsonValue(m_state_message));
    }
    if (m_state_start_time_isSet) {
        obj.insert(QString("stateStartTime"), ::OpenAPI::toJsonValue(m_state_start_time));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIGetAlertResponse::getAckAuthor() const {
    return m_ack_author;
}
void OAIGetAlertResponse::setAckAuthor(const QString &ack_author) {
    m_ack_author = ack_author;
    m_ack_author_isSet = true;
}

bool OAIGetAlertResponse::is_ack_author_Set() const{
    return m_ack_author_isSet;
}

bool OAIGetAlertResponse::is_ack_author_Valid() const{
    return m_ack_author_isValid;
}

QString OAIGetAlertResponse::getAckMsg() const {
    return m_ack_msg;
}
void OAIGetAlertResponse::setAckMsg(const QString &ack_msg) {
    m_ack_msg = ack_msg;
    m_ack_msg_isSet = true;
}

bool OAIGetAlertResponse::is_ack_msg_Set() const{
    return m_ack_msg_isSet;
}

bool OAIGetAlertResponse::is_ack_msg_Valid() const{
    return m_ack_msg_isValid;
}

QString OAIGetAlertResponse::getEntityDisplayName() const {
    return m_entity_display_name;
}
void OAIGetAlertResponse::setEntityDisplayName(const QString &entity_display_name) {
    m_entity_display_name = entity_display_name;
    m_entity_display_name_isSet = true;
}

bool OAIGetAlertResponse::is_entity_display_name_Set() const{
    return m_entity_display_name_isSet;
}

bool OAIGetAlertResponse::is_entity_display_name_Valid() const{
    return m_entity_display_name_isValid;
}

QString OAIGetAlertResponse::getEntityId() const {
    return m_entity_id;
}
void OAIGetAlertResponse::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIGetAlertResponse::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIGetAlertResponse::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIGetAlertResponse::getMessageType() const {
    return m_message_type;
}
void OAIGetAlertResponse::setMessageType(const QString &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIGetAlertResponse::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIGetAlertResponse::is_message_type_Valid() const{
    return m_message_type_isValid;
}

QString OAIGetAlertResponse::getMonitoringTool() const {
    return m_monitoring_tool;
}
void OAIGetAlertResponse::setMonitoringTool(const QString &monitoring_tool) {
    m_monitoring_tool = monitoring_tool;
    m_monitoring_tool_isSet = true;
}

bool OAIGetAlertResponse::is_monitoring_tool_Set() const{
    return m_monitoring_tool_isSet;
}

bool OAIGetAlertResponse::is_monitoring_tool_Valid() const{
    return m_monitoring_tool_isValid;
}

QString OAIGetAlertResponse::getRaw() const {
    return m_raw;
}
void OAIGetAlertResponse::setRaw(const QString &raw) {
    m_raw = raw;
    m_raw_isSet = true;
}

bool OAIGetAlertResponse::is_raw_Set() const{
    return m_raw_isSet;
}

bool OAIGetAlertResponse::is_raw_Valid() const{
    return m_raw_isValid;
}

QString OAIGetAlertResponse::getStateMessage() const {
    return m_state_message;
}
void OAIGetAlertResponse::setStateMessage(const QString &state_message) {
    m_state_message = state_message;
    m_state_message_isSet = true;
}

bool OAIGetAlertResponse::is_state_message_Set() const{
    return m_state_message_isSet;
}

bool OAIGetAlertResponse::is_state_message_Valid() const{
    return m_state_message_isValid;
}

double OAIGetAlertResponse::getStateStartTime() const {
    return m_state_start_time;
}
void OAIGetAlertResponse::setStateStartTime(const double &state_start_time) {
    m_state_start_time = state_start_time;
    m_state_start_time_isSet = true;
}

bool OAIGetAlertResponse::is_state_start_time_Set() const{
    return m_state_start_time_isSet;
}

bool OAIGetAlertResponse::is_state_start_time_Valid() const{
    return m_state_start_time_isValid;
}

double OAIGetAlertResponse::getTimestamp() const {
    return m_timestamp;
}
void OAIGetAlertResponse::setTimestamp(const double &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIGetAlertResponse::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIGetAlertResponse::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIGetAlertResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ack_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ack_msg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_tool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAlertResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
