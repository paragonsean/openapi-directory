/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOnCallEntry.h
 *
 * 
 */

#ifndef OAIOnCallEntry_H
#define OAIOnCallEntry_H

#include <QJsonObject>

#include "OAIOnCallRoll.h"
#include "OAIOnCallType.h"
#include "OAIUser.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser;
class OAIOnCallRoll;

class OAIOnCallEntry : public OAIObject {
public:
    OAIOnCallEntry();
    OAIOnCallEntry(QString json);
    ~OAIOnCallEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIOnCallType getOnCallType() const;
    void setOnCallType(const OAIOnCallType &on_call_type);
    bool is_on_call_type_Set() const;
    bool is_on_call_type_Valid() const;

    OAIUser getOnCallUser() const;
    void setOnCallUser(const OAIUser &on_call_user);
    bool is_on_call_user_Set() const;
    bool is_on_call_user_Valid() const;

    OAIUser getOverrideOnCallUser() const;
    void setOverrideOnCallUser(const OAIUser &override_on_call_user);
    bool is_override_on_call_user_Set() const;
    bool is_override_on_call_user_Valid() const;

    QList<OAIOnCallRoll> getRolls() const;
    void setRolls(const QList<OAIOnCallRoll> &rolls);
    bool is_rolls_Set() const;
    bool is_rolls_Valid() const;

    QString getRotationName() const;
    void setRotationName(const QString &rotation_name);
    bool is_rotation_name_Set() const;
    bool is_rotation_name_Valid() const;

    QString getShiftName() const;
    void setShiftName(const QString &shift_name);
    bool is_shift_name_Set() const;
    bool is_shift_name_Valid() const;

    QString getShiftRoll() const;
    void setShiftRoll(const QString &shift_roll);
    bool is_shift_roll_Set() const;
    bool is_shift_roll_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIOnCallType m_on_call_type;
    bool m_on_call_type_isSet;
    bool m_on_call_type_isValid;

    OAIUser m_on_call_user;
    bool m_on_call_user_isSet;
    bool m_on_call_user_isValid;

    OAIUser m_override_on_call_user;
    bool m_override_on_call_user_isSet;
    bool m_override_on_call_user_isValid;

    QList<OAIOnCallRoll> m_rolls;
    bool m_rolls_isSet;
    bool m_rolls_isValid;

    QString m_rotation_name;
    bool m_rotation_name_isSet;
    bool m_rotation_name_isValid;

    QString m_shift_name;
    bool m_shift_name_isSet;
    bool m_shift_name_isValid;

    QString m_shift_roll;
    bool m_shift_roll_isSet;
    bool m_shift_roll_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOnCallEntry)

#endif // OAIOnCallEntry_H
