/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActiveIncidentInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActiveIncidentInfo::OAIActiveIncidentInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActiveIncidentInfo::OAIActiveIncidentInfo() {
    this->initializeModel();
}

OAIActiveIncidentInfo::~OAIActiveIncidentInfo() {}

void OAIActiveIncidentInfo::initializeModel() {

    m_alert_count_isSet = false;
    m_alert_count_isValid = false;

    m_current_phase_isSet = false;
    m_current_phase_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_incident_number_isSet = false;
    m_incident_number_isValid = false;

    m_last_alert_id_isSet = false;
    m_last_alert_id_isValid = false;

    m_last_alert_time_isSet = false;
    m_last_alert_time_isValid = false;

    m_paged_policies_isSet = false;
    m_paged_policies_isValid = false;

    m_paged_teams_isSet = false;
    m_paged_teams_isValid = false;

    m_paged_users_isSet = false;
    m_paged_users_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_transitions_isSet = false;
    m_transitions_isValid = false;
}

void OAIActiveIncidentInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActiveIncidentInfo::fromJsonObject(QJsonObject json) {

    m_alert_count_isValid = ::OpenAPI::fromJsonValue(m_alert_count, json[QString("alertCount")]);
    m_alert_count_isSet = !json[QString("alertCount")].isNull() && m_alert_count_isValid;

    m_current_phase_isValid = ::OpenAPI::fromJsonValue(m_current_phase, json[QString("currentPhase")]);
    m_current_phase_isSet = !json[QString("currentPhase")].isNull() && m_current_phase_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_incident_number_isValid = ::OpenAPI::fromJsonValue(m_incident_number, json[QString("incidentNumber")]);
    m_incident_number_isSet = !json[QString("incidentNumber")].isNull() && m_incident_number_isValid;

    m_last_alert_id_isValid = ::OpenAPI::fromJsonValue(m_last_alert_id, json[QString("lastAlertId")]);
    m_last_alert_id_isSet = !json[QString("lastAlertId")].isNull() && m_last_alert_id_isValid;

    m_last_alert_time_isValid = ::OpenAPI::fromJsonValue(m_last_alert_time, json[QString("lastAlertTime")]);
    m_last_alert_time_isSet = !json[QString("lastAlertTime")].isNull() && m_last_alert_time_isValid;

    m_paged_policies_isValid = ::OpenAPI::fromJsonValue(m_paged_policies, json[QString("pagedPolicies")]);
    m_paged_policies_isSet = !json[QString("pagedPolicies")].isNull() && m_paged_policies_isValid;

    m_paged_teams_isValid = ::OpenAPI::fromJsonValue(m_paged_teams, json[QString("pagedTeams")]);
    m_paged_teams_isSet = !json[QString("pagedTeams")].isNull() && m_paged_teams_isValid;

    m_paged_users_isValid = ::OpenAPI::fromJsonValue(m_paged_users, json[QString("pagedUsers")]);
    m_paged_users_isSet = !json[QString("pagedUsers")].isNull() && m_paged_users_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_transitions_isValid = ::OpenAPI::fromJsonValue(m_transitions, json[QString("transitions")]);
    m_transitions_isSet = !json[QString("transitions")].isNull() && m_transitions_isValid;
}

QString OAIActiveIncidentInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActiveIncidentInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_count_isSet) {
        obj.insert(QString("alertCount"), ::OpenAPI::toJsonValue(m_alert_count));
    }
    if (m_current_phase_isSet) {
        obj.insert(QString("currentPhase"), ::OpenAPI::toJsonValue(m_current_phase));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_incident_number_isSet) {
        obj.insert(QString("incidentNumber"), ::OpenAPI::toJsonValue(m_incident_number));
    }
    if (m_last_alert_id_isSet) {
        obj.insert(QString("lastAlertId"), ::OpenAPI::toJsonValue(m_last_alert_id));
    }
    if (m_last_alert_time_isSet) {
        obj.insert(QString("lastAlertTime"), ::OpenAPI::toJsonValue(m_last_alert_time));
    }
    if (m_paged_policies.size() > 0) {
        obj.insert(QString("pagedPolicies"), ::OpenAPI::toJsonValue(m_paged_policies));
    }
    if (m_paged_teams.size() > 0) {
        obj.insert(QString("pagedTeams"), ::OpenAPI::toJsonValue(m_paged_teams));
    }
    if (m_paged_users.size() > 0) {
        obj.insert(QString("pagedUsers"), ::OpenAPI::toJsonValue(m_paged_users));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_transitions.size() > 0) {
        obj.insert(QString("transitions"), ::OpenAPI::toJsonValue(m_transitions));
    }
    return obj;
}

double OAIActiveIncidentInfo::getAlertCount() const {
    return m_alert_count;
}
void OAIActiveIncidentInfo::setAlertCount(const double &alert_count) {
    m_alert_count = alert_count;
    m_alert_count_isSet = true;
}

bool OAIActiveIncidentInfo::is_alert_count_Set() const{
    return m_alert_count_isSet;
}

bool OAIActiveIncidentInfo::is_alert_count_Valid() const{
    return m_alert_count_isValid;
}

QString OAIActiveIncidentInfo::getCurrentPhase() const {
    return m_current_phase;
}
void OAIActiveIncidentInfo::setCurrentPhase(const QString &current_phase) {
    m_current_phase = current_phase;
    m_current_phase_isSet = true;
}

bool OAIActiveIncidentInfo::is_current_phase_Set() const{
    return m_current_phase_isSet;
}

bool OAIActiveIncidentInfo::is_current_phase_Valid() const{
    return m_current_phase_isValid;
}

QString OAIActiveIncidentInfo::getEntityId() const {
    return m_entity_id;
}
void OAIActiveIncidentInfo::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIActiveIncidentInfo::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIActiveIncidentInfo::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIActiveIncidentInfo::getHost() const {
    return m_host;
}
void OAIActiveIncidentInfo::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIActiveIncidentInfo::is_host_Set() const{
    return m_host_isSet;
}

bool OAIActiveIncidentInfo::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIActiveIncidentInfo::getIncidentNumber() const {
    return m_incident_number;
}
void OAIActiveIncidentInfo::setIncidentNumber(const QString &incident_number) {
    m_incident_number = incident_number;
    m_incident_number_isSet = true;
}

bool OAIActiveIncidentInfo::is_incident_number_Set() const{
    return m_incident_number_isSet;
}

bool OAIActiveIncidentInfo::is_incident_number_Valid() const{
    return m_incident_number_isValid;
}

QString OAIActiveIncidentInfo::getLastAlertId() const {
    return m_last_alert_id;
}
void OAIActiveIncidentInfo::setLastAlertId(const QString &last_alert_id) {
    m_last_alert_id = last_alert_id;
    m_last_alert_id_isSet = true;
}

bool OAIActiveIncidentInfo::is_last_alert_id_Set() const{
    return m_last_alert_id_isSet;
}

bool OAIActiveIncidentInfo::is_last_alert_id_Valid() const{
    return m_last_alert_id_isValid;
}

QString OAIActiveIncidentInfo::getLastAlertTime() const {
    return m_last_alert_time;
}
void OAIActiveIncidentInfo::setLastAlertTime(const QString &last_alert_time) {
    m_last_alert_time = last_alert_time;
    m_last_alert_time_isSet = true;
}

bool OAIActiveIncidentInfo::is_last_alert_time_Set() const{
    return m_last_alert_time_isSet;
}

bool OAIActiveIncidentInfo::is_last_alert_time_Valid() const{
    return m_last_alert_time_isValid;
}

QList<OAIEscalationPolicyInfo> OAIActiveIncidentInfo::getPagedPolicies() const {
    return m_paged_policies;
}
void OAIActiveIncidentInfo::setPagedPolicies(const QList<OAIEscalationPolicyInfo> &paged_policies) {
    m_paged_policies = paged_policies;
    m_paged_policies_isSet = true;
}

bool OAIActiveIncidentInfo::is_paged_policies_Set() const{
    return m_paged_policies_isSet;
}

bool OAIActiveIncidentInfo::is_paged_policies_Valid() const{
    return m_paged_policies_isValid;
}

QList<QString> OAIActiveIncidentInfo::getPagedTeams() const {
    return m_paged_teams;
}
void OAIActiveIncidentInfo::setPagedTeams(const QList<QString> &paged_teams) {
    m_paged_teams = paged_teams;
    m_paged_teams_isSet = true;
}

bool OAIActiveIncidentInfo::is_paged_teams_Set() const{
    return m_paged_teams_isSet;
}

bool OAIActiveIncidentInfo::is_paged_teams_Valid() const{
    return m_paged_teams_isValid;
}

QList<QString> OAIActiveIncidentInfo::getPagedUsers() const {
    return m_paged_users;
}
void OAIActiveIncidentInfo::setPagedUsers(const QList<QString> &paged_users) {
    m_paged_users = paged_users;
    m_paged_users_isSet = true;
}

bool OAIActiveIncidentInfo::is_paged_users_Set() const{
    return m_paged_users_isSet;
}

bool OAIActiveIncidentInfo::is_paged_users_Valid() const{
    return m_paged_users_isValid;
}

QString OAIActiveIncidentInfo::getService() const {
    return m_service;
}
void OAIActiveIncidentInfo::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIActiveIncidentInfo::is_service_Set() const{
    return m_service_isSet;
}

bool OAIActiveIncidentInfo::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIActiveIncidentInfo::getStartTime() const {
    return m_start_time;
}
void OAIActiveIncidentInfo::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIActiveIncidentInfo::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIActiveIncidentInfo::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QList<OAIIncidentTransition> OAIActiveIncidentInfo::getTransitions() const {
    return m_transitions;
}
void OAIActiveIncidentInfo::setTransitions(const QList<OAIIncidentTransition> &transitions) {
    m_transitions = transitions;
    m_transitions_isSet = true;
}

bool OAIActiveIncidentInfo::is_transitions_Set() const{
    return m_transitions_isSet;
}

bool OAIActiveIncidentInfo::is_transitions_Valid() const{
    return m_transitions_isValid;
}

bool OAIActiveIncidentInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incident_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_alert_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_alert_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paged_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_paged_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_paged_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActiveIncidentInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
