/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamDetail::OAITeamDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamDetail::OAITeamDetail() {
    this->initializeModel();
}

OAITeamDetail::~OAITeamDetail() {}

void OAITeamDetail::initializeModel() {

    m__admins_url_isSet = false;
    m__admins_url_isValid = false;

    m__members_url_isSet = false;
    m__members_url_isValid = false;

    m__policies_url_isSet = false;
    m__policies_url_isValid = false;

    m__self_url_isSet = false;
    m__self_url_isValid = false;

    m_is_default_team_isSet = false;
    m_is_default_team_isValid = false;

    m_member_count_isSet = false;
    m_member_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAITeamDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamDetail::fromJsonObject(QJsonObject json) {

    m__admins_url_isValid = ::OpenAPI::fromJsonValue(m__admins_url, json[QString("_adminsUrl")]);
    m__admins_url_isSet = !json[QString("_adminsUrl")].isNull() && m__admins_url_isValid;

    m__members_url_isValid = ::OpenAPI::fromJsonValue(m__members_url, json[QString("_membersUrl")]);
    m__members_url_isSet = !json[QString("_membersUrl")].isNull() && m__members_url_isValid;

    m__policies_url_isValid = ::OpenAPI::fromJsonValue(m__policies_url, json[QString("_policiesUrl")]);
    m__policies_url_isSet = !json[QString("_policiesUrl")].isNull() && m__policies_url_isValid;

    m__self_url_isValid = ::OpenAPI::fromJsonValue(m__self_url, json[QString("_selfUrl")]);
    m__self_url_isSet = !json[QString("_selfUrl")].isNull() && m__self_url_isValid;

    m_is_default_team_isValid = ::OpenAPI::fromJsonValue(m_is_default_team, json[QString("isDefaultTeam")]);
    m_is_default_team_isSet = !json[QString("isDefaultTeam")].isNull() && m_is_default_team_isValid;

    m_member_count_isValid = ::OpenAPI::fromJsonValue(m_member_count, json[QString("memberCount")]);
    m_member_count_isSet = !json[QString("memberCount")].isNull() && m_member_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAITeamDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamDetail::asJsonObject() const {
    QJsonObject obj;
    if (m__admins_url_isSet) {
        obj.insert(QString("_adminsUrl"), ::OpenAPI::toJsonValue(m__admins_url));
    }
    if (m__members_url_isSet) {
        obj.insert(QString("_membersUrl"), ::OpenAPI::toJsonValue(m__members_url));
    }
    if (m__policies_url_isSet) {
        obj.insert(QString("_policiesUrl"), ::OpenAPI::toJsonValue(m__policies_url));
    }
    if (m__self_url_isSet) {
        obj.insert(QString("_selfUrl"), ::OpenAPI::toJsonValue(m__self_url));
    }
    if (m_is_default_team_isSet) {
        obj.insert(QString("isDefaultTeam"), ::OpenAPI::toJsonValue(m_is_default_team));
    }
    if (m_member_count_isSet) {
        obj.insert(QString("memberCount"), ::OpenAPI::toJsonValue(m_member_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAITeamDetail::getAdminsUrl() const {
    return m__admins_url;
}
void OAITeamDetail::setAdminsUrl(const QString &_admins_url) {
    m__admins_url = _admins_url;
    m__admins_url_isSet = true;
}

bool OAITeamDetail::is__admins_url_Set() const{
    return m__admins_url_isSet;
}

bool OAITeamDetail::is__admins_url_Valid() const{
    return m__admins_url_isValid;
}

QString OAITeamDetail::getMembersUrl() const {
    return m__members_url;
}
void OAITeamDetail::setMembersUrl(const QString &_members_url) {
    m__members_url = _members_url;
    m__members_url_isSet = true;
}

bool OAITeamDetail::is__members_url_Set() const{
    return m__members_url_isSet;
}

bool OAITeamDetail::is__members_url_Valid() const{
    return m__members_url_isValid;
}

QString OAITeamDetail::getPoliciesUrl() const {
    return m__policies_url;
}
void OAITeamDetail::setPoliciesUrl(const QString &_policies_url) {
    m__policies_url = _policies_url;
    m__policies_url_isSet = true;
}

bool OAITeamDetail::is__policies_url_Set() const{
    return m__policies_url_isSet;
}

bool OAITeamDetail::is__policies_url_Valid() const{
    return m__policies_url_isValid;
}

QString OAITeamDetail::getSelfUrl() const {
    return m__self_url;
}
void OAITeamDetail::setSelfUrl(const QString &_self_url) {
    m__self_url = _self_url;
    m__self_url_isSet = true;
}

bool OAITeamDetail::is__self_url_Set() const{
    return m__self_url_isSet;
}

bool OAITeamDetail::is__self_url_Valid() const{
    return m__self_url_isValid;
}

bool OAITeamDetail::isIsDefaultTeam() const {
    return m_is_default_team;
}
void OAITeamDetail::setIsDefaultTeam(const bool &is_default_team) {
    m_is_default_team = is_default_team;
    m_is_default_team_isSet = true;
}

bool OAITeamDetail::is_is_default_team_Set() const{
    return m_is_default_team_isSet;
}

bool OAITeamDetail::is_is_default_team_Valid() const{
    return m_is_default_team_isValid;
}

double OAITeamDetail::getMemberCount() const {
    return m_member_count;
}
void OAITeamDetail::setMemberCount(const double &member_count) {
    m_member_count = member_count;
    m_member_count_isSet = true;
}

bool OAITeamDetail::is_member_count_Set() const{
    return m_member_count_isSet;
}

bool OAITeamDetail::is_member_count_Valid() const{
    return m_member_count_isValid;
}

QString OAITeamDetail::getName() const {
    return m_name;
}
void OAITeamDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeamDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeamDetail::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITeamDetail::getSlug() const {
    return m_slug;
}
void OAITeamDetail::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAITeamDetail::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAITeamDetail::is_slug_Valid() const{
    return m_slug_isValid;
}

double OAITeamDetail::getVersion() const {
    return m_version;
}
void OAITeamDetail::setVersion(const double &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAITeamDetail::is_version_Set() const{
    return m_version_isSet;
}

bool OAITeamDetail::is_version_Valid() const{
    return m_version_isValid;
}

bool OAITeamDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__admins_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__members_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__policies_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__self_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
