/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnCallInterval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnCallInterval::OAIOnCallInterval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnCallInterval::OAIOnCallInterval() {
    this->initializeModel();
}

OAIOnCallInterval::~OAIOnCallInterval() {}

void OAIOnCallInterval::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_escalation_policy_isSet = false;
    m_escalation_policy_isValid = false;

    m_r_false_isSet = false;
    m_r_false_isValid = false;

    m_r_true_isSet = false;
    m_r_true_isValid = false;
}

void OAIOnCallInterval::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnCallInterval::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_escalation_policy_isValid = ::OpenAPI::fromJsonValue(m_escalation_policy, json[QString("escalationPolicy")]);
    m_escalation_policy_isSet = !json[QString("escalationPolicy")].isNull() && m_escalation_policy_isValid;

    m_r_false_isValid = ::OpenAPI::fromJsonValue(m_r_false, json[QString("false")]);
    m_r_false_isSet = !json[QString("false")].isNull() && m_r_false_isValid;

    m_r_true_isValid = ::OpenAPI::fromJsonValue(m_r_true, json[QString("true")]);
    m_r_true_isSet = !json[QString("true")].isNull() && m_r_true_isValid;
}

QString OAIOnCallInterval::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnCallInterval::asJsonObject() const {
    QJsonObject obj;
    if (m_duration.isSet()) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_escalation_policy.isSet()) {
        obj.insert(QString("escalationPolicy"), ::OpenAPI::toJsonValue(m_escalation_policy));
    }
    if (m_r_false_isSet) {
        obj.insert(QString("false"), ::OpenAPI::toJsonValue(m_r_false));
    }
    if (m_r_true_isSet) {
        obj.insert(QString("true"), ::OpenAPI::toJsonValue(m_r_true));
    }
    return obj;
}

OAIOnCallInterval_duration OAIOnCallInterval::getDuration() const {
    return m_duration;
}
void OAIOnCallInterval::setDuration(const OAIOnCallInterval_duration &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIOnCallInterval::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIOnCallInterval::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIEscalationPolicy OAIOnCallInterval::getEscalationPolicy() const {
    return m_escalation_policy;
}
void OAIOnCallInterval::setEscalationPolicy(const OAIEscalationPolicy &escalation_policy) {
    m_escalation_policy = escalation_policy;
    m_escalation_policy_isSet = true;
}

bool OAIOnCallInterval::is_escalation_policy_Set() const{
    return m_escalation_policy_isSet;
}

bool OAIOnCallInterval::is_escalation_policy_Valid() const{
    return m_escalation_policy_isValid;
}

QString OAIOnCallInterval::getRFalse() const {
    return m_r_false;
}
void OAIOnCallInterval::setRFalse(const QString &r_false) {
    m_r_false = r_false;
    m_r_false_isSet = true;
}

bool OAIOnCallInterval::is_r_false_Set() const{
    return m_r_false_isSet;
}

bool OAIOnCallInterval::is_r_false_Valid() const{
    return m_r_false_isValid;
}

QString OAIOnCallInterval::getRTrue() const {
    return m_r_true;
}
void OAIOnCallInterval::setRTrue(const QString &r_true) {
    m_r_true = r_true;
    m_r_true_isSet = true;
}

bool OAIOnCallInterval::is_r_true_Set() const{
    return m_r_true_isSet;
}

bool OAIOnCallInterval::is_r_true_Valid() const{
    return m_r_true_isValid;
}

bool OAIOnCallInterval::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_escalation_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_false_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_true_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnCallInterval::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
