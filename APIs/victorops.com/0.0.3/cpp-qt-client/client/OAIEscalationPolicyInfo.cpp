/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEscalationPolicyInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEscalationPolicyInfo::OAIEscalationPolicyInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEscalationPolicyInfo::OAIEscalationPolicyInfo() {
    this->initializeModel();
}

OAIEscalationPolicyInfo::~OAIEscalationPolicyInfo() {}

void OAIEscalationPolicyInfo::initializeModel() {

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIEscalationPolicyInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEscalationPolicyInfo::fromJsonObject(QJsonObject json) {

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIEscalationPolicyInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEscalationPolicyInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_team.isSet()) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

OAIEscalationPolicy OAIEscalationPolicyInfo::getPolicy() const {
    return m_policy;
}
void OAIEscalationPolicyInfo::setPolicy(const OAIEscalationPolicy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIEscalationPolicyInfo::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIEscalationPolicyInfo::is_policy_Valid() const{
    return m_policy_isValid;
}

OAITeam OAIEscalationPolicyInfo::getTeam() const {
    return m_team;
}
void OAIEscalationPolicyInfo::setTeam(const OAITeam &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIEscalationPolicyInfo::is_team_Set() const{
    return m_team_isSet;
}

bool OAIEscalationPolicyInfo::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIEscalationPolicyInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEscalationPolicyInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_isValid && true;
}

} // namespace OpenAPI
