/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnCallLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnCallLog::OAIOnCallLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnCallLog::OAIOnCallLog() {
    this->initializeModel();
}

OAIOnCallLog::~OAIOnCallLog() {}

void OAIOnCallLog::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_team_slug_isSet = false;
    m_team_slug_isValid = false;

    m_user_logs_isSet = false;
    m_user_logs_isValid = false;
}

void OAIOnCallLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnCallLog::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_team_slug_isValid = ::OpenAPI::fromJsonValue(m_team_slug, json[QString("teamSlug")]);
    m_team_slug_isSet = !json[QString("teamSlug")].isNull() && m_team_slug_isValid;

    m_user_logs_isValid = ::OpenAPI::fromJsonValue(m_user_logs, json[QString("userLogs")]);
    m_user_logs_isSet = !json[QString("userLogs")].isNull() && m_user_logs_isValid;
}

QString OAIOnCallLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnCallLog::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_team_slug_isSet) {
        obj.insert(QString("teamSlug"), ::OpenAPI::toJsonValue(m_team_slug));
    }
    if (m_user_logs.size() > 0) {
        obj.insert(QString("userLogs"), ::OpenAPI::toJsonValue(m_user_logs));
    }
    return obj;
}

QDateTime OAIOnCallLog::getEnd() const {
    return m_end;
}
void OAIOnCallLog::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIOnCallLog::is_end_Set() const{
    return m_end_isSet;
}

bool OAIOnCallLog::is_end_Valid() const{
    return m_end_isValid;
}

QDateTime OAIOnCallLog::getStart() const {
    return m_start;
}
void OAIOnCallLog::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIOnCallLog::is_start_Set() const{
    return m_start_isSet;
}

bool OAIOnCallLog::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIOnCallLog::getTeamSlug() const {
    return m_team_slug;
}
void OAIOnCallLog::setTeamSlug(const QString &team_slug) {
    m_team_slug = team_slug;
    m_team_slug_isSet = true;
}

bool OAIOnCallLog::is_team_slug_Set() const{
    return m_team_slug_isSet;
}

bool OAIOnCallLog::is_team_slug_Valid() const{
    return m_team_slug_isValid;
}

QList<OAIUserLog> OAIOnCallLog::getUserLogs() const {
    return m_user_logs;
}
void OAIOnCallLog::setUserLogs(const QList<OAIUserLog> &user_logs) {
    m_user_logs = user_logs;
    m_user_logs_isSet = true;
}

bool OAIOnCallLog::is_user_logs_Set() const{
    return m_user_logs_isSet;
}

bool OAIOnCallLog::is_user_logs_Valid() const{
    return m_user_logs_isValid;
}

bool OAIOnCallLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_logs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnCallLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
