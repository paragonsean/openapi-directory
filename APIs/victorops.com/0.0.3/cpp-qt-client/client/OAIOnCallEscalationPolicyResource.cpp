/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnCallEscalationPolicyResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnCallEscalationPolicyResource::OAIOnCallEscalationPolicyResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnCallEscalationPolicyResource::OAIOnCallEscalationPolicyResource() {
    this->initializeModel();
}

OAIOnCallEscalationPolicyResource::~OAIOnCallEscalationPolicyResource() {}

void OAIOnCallEscalationPolicyResource::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;
}

void OAIOnCallEscalationPolicyResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnCallEscalationPolicyResource::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;
}

QString OAIOnCallEscalationPolicyResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnCallEscalationPolicyResource::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    return obj;
}

QString OAIOnCallEscalationPolicyResource::getName() const {
    return m_name;
}
void OAIOnCallEscalationPolicyResource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOnCallEscalationPolicyResource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOnCallEscalationPolicyResource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOnCallEscalationPolicyResource::getSlug() const {
    return m_slug;
}
void OAIOnCallEscalationPolicyResource::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIOnCallEscalationPolicyResource::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIOnCallEscalationPolicyResource::is_slug_Valid() const{
    return m_slug_isValid;
}

bool OAIOnCallEscalationPolicyResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnCallEscalationPolicyResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
