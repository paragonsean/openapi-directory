/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAckOrResolveRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAckOrResolveRequest::OAIAckOrResolveRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAckOrResolveRequest::OAIAckOrResolveRequest() {
    this->initializeModel();
}

OAIAckOrResolveRequest::~OAIAckOrResolveRequest() {}

void OAIAckOrResolveRequest::initializeModel() {

    m_incident_names_isSet = false;
    m_incident_names_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIAckOrResolveRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAckOrResolveRequest::fromJsonObject(QJsonObject json) {

    m_incident_names_isValid = ::OpenAPI::fromJsonValue(m_incident_names, json[QString("incidentNames")]);
    m_incident_names_isSet = !json[QString("incidentNames")].isNull() && m_incident_names_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIAckOrResolveRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAckOrResolveRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_incident_names.size() > 0) {
        obj.insert(QString("incidentNames"), ::OpenAPI::toJsonValue(m_incident_names));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QList<QString> OAIAckOrResolveRequest::getIncidentNames() const {
    return m_incident_names;
}
void OAIAckOrResolveRequest::setIncidentNames(const QList<QString> &incident_names) {
    m_incident_names = incident_names;
    m_incident_names_isSet = true;
}

bool OAIAckOrResolveRequest::is_incident_names_Set() const{
    return m_incident_names_isSet;
}

bool OAIAckOrResolveRequest::is_incident_names_Valid() const{
    return m_incident_names_isValid;
}

QString OAIAckOrResolveRequest::getMessage() const {
    return m_message;
}
void OAIAckOrResolveRequest::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAckOrResolveRequest::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAckOrResolveRequest::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIAckOrResolveRequest::getUserName() const {
    return m_user_name;
}
void OAIAckOrResolveRequest::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIAckOrResolveRequest::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIAckOrResolveRequest::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIAckOrResolveRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_incident_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAckOrResolveRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_incident_names_isValid && m_user_name_isValid && true;
}

} // namespace OpenAPI
