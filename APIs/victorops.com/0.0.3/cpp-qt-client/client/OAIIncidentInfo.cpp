/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncidentInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncidentInfo::OAIIncidentInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncidentInfo::OAIIncidentInfo() {
    this->initializeModel();
}

OAIIncidentInfo::~OAIIncidentInfo() {}

void OAIIncidentInfo::initializeModel() {

    m_ack_time_isSet = false;
    m_ack_time_isValid = false;

    m_ack_user_isSet = false;
    m_ack_user_isValid = false;

    m_ack_user_id_isSet = false;
    m_ack_user_id_isValid = false;

    m_alert_count_isSet = false;
    m_alert_count_isValid = false;

    m_current_phase_isSet = false;
    m_current_phase_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_entity_disp_name_isSet = false;
    m_entity_disp_name_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_incident_number_isSet = false;
    m_incident_number_isValid = false;

    m_last_alert_id_isSet = false;
    m_last_alert_id_isValid = false;

    m_last_alert_time_isSet = false;
    m_last_alert_time_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_teams_isSet = false;
    m_teams_isValid = false;
}

void OAIIncidentInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncidentInfo::fromJsonObject(QJsonObject json) {

    m_ack_time_isValid = ::OpenAPI::fromJsonValue(m_ack_time, json[QString("ackTime")]);
    m_ack_time_isSet = !json[QString("ackTime")].isNull() && m_ack_time_isValid;

    m_ack_user_isValid = ::OpenAPI::fromJsonValue(m_ack_user, json[QString("ackUser")]);
    m_ack_user_isSet = !json[QString("ackUser")].isNull() && m_ack_user_isValid;

    m_ack_user_id_isValid = ::OpenAPI::fromJsonValue(m_ack_user_id, json[QString("ackUserId")]);
    m_ack_user_id_isSet = !json[QString("ackUserId")].isNull() && m_ack_user_id_isValid;

    m_alert_count_isValid = ::OpenAPI::fromJsonValue(m_alert_count, json[QString("alertCount")]);
    m_alert_count_isSet = !json[QString("alertCount")].isNull() && m_alert_count_isValid;

    m_current_phase_isValid = ::OpenAPI::fromJsonValue(m_current_phase, json[QString("currentPhase")]);
    m_current_phase_isSet = !json[QString("currentPhase")].isNull() && m_current_phase_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_entity_disp_name_isValid = ::OpenAPI::fromJsonValue(m_entity_disp_name, json[QString("entityDispName")]);
    m_entity_disp_name_isSet = !json[QString("entityDispName")].isNull() && m_entity_disp_name_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_incident_number_isValid = ::OpenAPI::fromJsonValue(m_incident_number, json[QString("incidentNumber")]);
    m_incident_number_isSet = !json[QString("incidentNumber")].isNull() && m_incident_number_isValid;

    m_last_alert_id_isValid = ::OpenAPI::fromJsonValue(m_last_alert_id, json[QString("lastAlertID")]);
    m_last_alert_id_isSet = !json[QString("lastAlertID")].isNull() && m_last_alert_id_isValid;

    m_last_alert_time_isValid = ::OpenAPI::fromJsonValue(m_last_alert_time, json[QString("lastAlertTime")]);
    m_last_alert_time_isSet = !json[QString("lastAlertTime")].isNull() && m_last_alert_time_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_teams_isValid = ::OpenAPI::fromJsonValue(m_teams, json[QString("teams")]);
    m_teams_isSet = !json[QString("teams")].isNull() && m_teams_isValid;
}

QString OAIIncidentInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncidentInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_ack_time_isSet) {
        obj.insert(QString("ackTime"), ::OpenAPI::toJsonValue(m_ack_time));
    }
    if (m_ack_user.isSet()) {
        obj.insert(QString("ackUser"), ::OpenAPI::toJsonValue(m_ack_user));
    }
    if (m_ack_user_id_isSet) {
        obj.insert(QString("ackUserId"), ::OpenAPI::toJsonValue(m_ack_user_id));
    }
    if (m_alert_count_isSet) {
        obj.insert(QString("alertCount"), ::OpenAPI::toJsonValue(m_alert_count));
    }
    if (m_current_phase_isSet) {
        obj.insert(QString("currentPhase"), ::OpenAPI::toJsonValue(m_current_phase));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_entity_disp_name_isSet) {
        obj.insert(QString("entityDispName"), ::OpenAPI::toJsonValue(m_entity_disp_name));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_incident_number_isSet) {
        obj.insert(QString("incidentNumber"), ::OpenAPI::toJsonValue(m_incident_number));
    }
    if (m_last_alert_id_isSet) {
        obj.insert(QString("lastAlertID"), ::OpenAPI::toJsonValue(m_last_alert_id));
    }
    if (m_last_alert_time_isSet) {
        obj.insert(QString("lastAlertTime"), ::OpenAPI::toJsonValue(m_last_alert_time));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_teams_isSet) {
        obj.insert(QString("teams"), ::OpenAPI::toJsonValue(m_teams));
    }
    return obj;
}

QString OAIIncidentInfo::getAckTime() const {
    return m_ack_time;
}
void OAIIncidentInfo::setAckTime(const QString &ack_time) {
    m_ack_time = ack_time;
    m_ack_time_isSet = true;
}

bool OAIIncidentInfo::is_ack_time_Set() const{
    return m_ack_time_isSet;
}

bool OAIIncidentInfo::is_ack_time_Valid() const{
    return m_ack_time_isValid;
}

OAIAckUser OAIIncidentInfo::getAckUser() const {
    return m_ack_user;
}
void OAIIncidentInfo::setAckUser(const OAIAckUser &ack_user) {
    m_ack_user = ack_user;
    m_ack_user_isSet = true;
}

bool OAIIncidentInfo::is_ack_user_Set() const{
    return m_ack_user_isSet;
}

bool OAIIncidentInfo::is_ack_user_Valid() const{
    return m_ack_user_isValid;
}

QString OAIIncidentInfo::getAckUserId() const {
    return m_ack_user_id;
}
void OAIIncidentInfo::setAckUserId(const QString &ack_user_id) {
    m_ack_user_id = ack_user_id;
    m_ack_user_id_isSet = true;
}

bool OAIIncidentInfo::is_ack_user_id_Set() const{
    return m_ack_user_id_isSet;
}

bool OAIIncidentInfo::is_ack_user_id_Valid() const{
    return m_ack_user_id_isValid;
}

double OAIIncidentInfo::getAlertCount() const {
    return m_alert_count;
}
void OAIIncidentInfo::setAlertCount(const double &alert_count) {
    m_alert_count = alert_count;
    m_alert_count_isSet = true;
}

bool OAIIncidentInfo::is_alert_count_Set() const{
    return m_alert_count_isSet;
}

bool OAIIncidentInfo::is_alert_count_Valid() const{
    return m_alert_count_isValid;
}

QString OAIIncidentInfo::getCurrentPhase() const {
    return m_current_phase;
}
void OAIIncidentInfo::setCurrentPhase(const QString &current_phase) {
    m_current_phase = current_phase;
    m_current_phase_isSet = true;
}

bool OAIIncidentInfo::is_current_phase_Set() const{
    return m_current_phase_isSet;
}

bool OAIIncidentInfo::is_current_phase_Valid() const{
    return m_current_phase_isValid;
}

QString OAIIncidentInfo::getEndTime() const {
    return m_end_time;
}
void OAIIncidentInfo::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIIncidentInfo::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIIncidentInfo::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIIncidentInfo::getEntityDispName() const {
    return m_entity_disp_name;
}
void OAIIncidentInfo::setEntityDispName(const QString &entity_disp_name) {
    m_entity_disp_name = entity_disp_name;
    m_entity_disp_name_isSet = true;
}

bool OAIIncidentInfo::is_entity_disp_name_Set() const{
    return m_entity_disp_name_isSet;
}

bool OAIIncidentInfo::is_entity_disp_name_Valid() const{
    return m_entity_disp_name_isValid;
}

QString OAIIncidentInfo::getEntityId() const {
    return m_entity_id;
}
void OAIIncidentInfo::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIIncidentInfo::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIIncidentInfo::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIIncidentInfo::getEntityType() const {
    return m_entity_type;
}
void OAIIncidentInfo::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIIncidentInfo::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIIncidentInfo::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIIncidentInfo::getHost() const {
    return m_host;
}
void OAIIncidentInfo::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIIncidentInfo::is_host_Set() const{
    return m_host_isSet;
}

bool OAIIncidentInfo::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIIncidentInfo::getIncidentNumber() const {
    return m_incident_number;
}
void OAIIncidentInfo::setIncidentNumber(const QString &incident_number) {
    m_incident_number = incident_number;
    m_incident_number_isSet = true;
}

bool OAIIncidentInfo::is_incident_number_Set() const{
    return m_incident_number_isSet;
}

bool OAIIncidentInfo::is_incident_number_Valid() const{
    return m_incident_number_isValid;
}

QString OAIIncidentInfo::getLastAlertId() const {
    return m_last_alert_id;
}
void OAIIncidentInfo::setLastAlertId(const QString &last_alert_id) {
    m_last_alert_id = last_alert_id;
    m_last_alert_id_isSet = true;
}

bool OAIIncidentInfo::is_last_alert_id_Set() const{
    return m_last_alert_id_isSet;
}

bool OAIIncidentInfo::is_last_alert_id_Valid() const{
    return m_last_alert_id_isValid;
}

QString OAIIncidentInfo::getLastAlertTime() const {
    return m_last_alert_time;
}
void OAIIncidentInfo::setLastAlertTime(const QString &last_alert_time) {
    m_last_alert_time = last_alert_time;
    m_last_alert_time_isSet = true;
}

bool OAIIncidentInfo::is_last_alert_time_Set() const{
    return m_last_alert_time_isSet;
}

bool OAIIncidentInfo::is_last_alert_time_Valid() const{
    return m_last_alert_time_isValid;
}

QString OAIIncidentInfo::getService() const {
    return m_service;
}
void OAIIncidentInfo::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIIncidentInfo::is_service_Set() const{
    return m_service_isSet;
}

bool OAIIncidentInfo::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIIncidentInfo::getStartTime() const {
    return m_start_time;
}
void OAIIncidentInfo::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIIncidentInfo::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIIncidentInfo::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIIncidentInfo::getTeams() const {
    return m_teams;
}
void OAIIncidentInfo::setTeams(const QString &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAIIncidentInfo::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAIIncidentInfo::is_teams_Valid() const{
    return m_teams_isValid;
}

bool OAIIncidentInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ack_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ack_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ack_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_disp_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incident_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_alert_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_alert_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncidentInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
