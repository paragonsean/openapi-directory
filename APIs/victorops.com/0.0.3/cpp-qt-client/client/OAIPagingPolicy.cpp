/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagingPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagingPolicy::OAIPagingPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagingPolicy::OAIPagingPolicy() {
    this->initializeModel();
}

OAIPagingPolicy::~OAIPagingPolicy() {}

void OAIPagingPolicy::initializeModel() {

    m_contact_type_isSet = false;
    m_contact_type_isValid = false;

    m_ext_id_isSet = false;
    m_ext_id_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIPagingPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagingPolicy::fromJsonObject(QJsonObject json) {

    m_contact_type_isValid = ::OpenAPI::fromJsonValue(m_contact_type, json[QString("contactType")]);
    m_contact_type_isSet = !json[QString("contactType")].isNull() && m_contact_type_isValid;

    m_ext_id_isValid = ::OpenAPI::fromJsonValue(m_ext_id, json[QString("extId")]);
    m_ext_id_isSet = !json[QString("extId")].isNull() && m_ext_id_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIPagingPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagingPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_type_isSet) {
        obj.insert(QString("contactType"), ::OpenAPI::toJsonValue(m_contact_type));
    }
    if (m_ext_id_isSet) {
        obj.insert(QString("extId"), ::OpenAPI::toJsonValue(m_ext_id));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QString OAIPagingPolicy::getContactType() const {
    return m_contact_type;
}
void OAIPagingPolicy::setContactType(const QString &contact_type) {
    m_contact_type = contact_type;
    m_contact_type_isSet = true;
}

bool OAIPagingPolicy::is_contact_type_Set() const{
    return m_contact_type_isSet;
}

bool OAIPagingPolicy::is_contact_type_Valid() const{
    return m_contact_type_isValid;
}

QString OAIPagingPolicy::getExtId() const {
    return m_ext_id;
}
void OAIPagingPolicy::setExtId(const QString &ext_id) {
    m_ext_id = ext_id;
    m_ext_id_isSet = true;
}

bool OAIPagingPolicy::is_ext_id_Set() const{
    return m_ext_id_isSet;
}

bool OAIPagingPolicy::is_ext_id_Valid() const{
    return m_ext_id_isValid;
}

qint32 OAIPagingPolicy::getOrder() const {
    return m_order;
}
void OAIPagingPolicy::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIPagingPolicy::is_order_Set() const{
    return m_order_isSet;
}

bool OAIPagingPolicy::is_order_Valid() const{
    return m_order_isValid;
}

qint32 OAIPagingPolicy::getTimeout() const {
    return m_timeout;
}
void OAIPagingPolicy::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIPagingPolicy::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIPagingPolicy::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIPagingPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagingPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
