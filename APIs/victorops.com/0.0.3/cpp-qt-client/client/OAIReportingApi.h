/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportingApi_H
#define OAI_OAIReportingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActiveIncidentList.h"
#include "OAIIncidentList.h"
#include "OAIOnCallLog.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportingApi : public QObject {
    Q_OBJECT

public:
    OAIReportingApi(const int timeOut = 0);
    ~OAIReportingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  offset double [optional]
    * @param[in]  limit double [optional]
    * @param[in]  entity_id QString [optional]
    * @param[in]  incident_number QString [optional]
    * @param[in]  started_after QString [optional]
    * @param[in]  started_before QString [optional]
    * @param[in]  host QString [optional]
    * @param[in]  service QString [optional]
    * @param[in]  current_phase QString [optional]
    */
    Q_DECL_DEPRECATED virtual void apiReportingV1IncidentsGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const ::OpenAPI::OptionalParam<double> &offset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &limit = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &entity_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &incident_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &started_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &started_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &host = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &current_phase = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  team QString [required]
    * @param[in]  start QDateTime [optional]
    * @param[in]  end QDateTime [optional]
    * @param[in]  user_name QString [optional]
    */
    virtual void apiReportingV1TeamTeamOncallLogGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const QString &team, const ::OpenAPI::OptionalParam<QDateTime> &start = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &user_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_vo_api_id QString [required]
    * @param[in]  x_vo_api_key QString [required]
    * @param[in]  offset double [optional]
    * @param[in]  limit double [optional]
    * @param[in]  entity_id QString [optional]
    * @param[in]  incident_number QString [optional]
    * @param[in]  started_after QString [optional]
    * @param[in]  started_before QString [optional]
    * @param[in]  host QString [optional]
    * @param[in]  service QString [optional]
    * @param[in]  current_phase QString [optional]
    * @param[in]  routing_key QString [optional]
    */
    virtual void apiReportingV2IncidentsGet(const QString &x_vo_api_id, const QString &x_vo_api_key, const ::OpenAPI::OptionalParam<double> &offset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &limit = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &entity_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &incident_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &started_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &started_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &host = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &current_phase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &routing_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiReportingV1IncidentsGetCallback(OAIHttpRequestWorker *worker);
    void apiReportingV1TeamTeamOncallLogGetCallback(OAIHttpRequestWorker *worker);
    void apiReportingV2IncidentsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiReportingV1IncidentsGetSignal(QList<OAIIncidentList> summary);
    void apiReportingV1TeamTeamOncallLogGetSignal(OAIOnCallLog summary);
    void apiReportingV2IncidentsGetSignal(OAIActiveIncidentList summary);


    void apiReportingV1IncidentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIIncidentList> summary);
    void apiReportingV1TeamTeamOncallLogGetSignalFull(OAIHttpRequestWorker *worker, OAIOnCallLog summary);
    void apiReportingV2IncidentsGetSignalFull(OAIHttpRequestWorker *worker, OAIActiveIncidentList summary);

    Q_DECL_DEPRECATED_X("Use apiReportingV1IncidentsGetSignalError() instead")
    void apiReportingV1IncidentsGetSignalE(QList<OAIIncidentList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReportingV1IncidentsGetSignalError(QList<OAIIncidentList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReportingV1TeamTeamOncallLogGetSignalError() instead")
    void apiReportingV1TeamTeamOncallLogGetSignalE(OAIOnCallLog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReportingV1TeamTeamOncallLogGetSignalError(OAIOnCallLog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReportingV2IncidentsGetSignalError() instead")
    void apiReportingV2IncidentsGetSignalE(OAIActiveIncidentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReportingV2IncidentsGetSignalError(OAIActiveIncidentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiReportingV1IncidentsGetSignalErrorFull() instead")
    void apiReportingV1IncidentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReportingV1IncidentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReportingV1TeamTeamOncallLogGetSignalErrorFull() instead")
    void apiReportingV1TeamTeamOncallLogGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReportingV1TeamTeamOncallLogGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReportingV2IncidentsGetSignalErrorFull() instead")
    void apiReportingV2IncidentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReportingV2IncidentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
