/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnCallEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnCallEntry::OAIOnCallEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnCallEntry::OAIOnCallEntry() {
    this->initializeModel();
}

OAIOnCallEntry::~OAIOnCallEntry() {}

void OAIOnCallEntry::initializeModel() {

    m_on_call_type_isSet = false;
    m_on_call_type_isValid = false;

    m_on_call_user_isSet = false;
    m_on_call_user_isValid = false;

    m_override_on_call_user_isSet = false;
    m_override_on_call_user_isValid = false;

    m_rolls_isSet = false;
    m_rolls_isValid = false;

    m_rotation_name_isSet = false;
    m_rotation_name_isValid = false;

    m_shift_name_isSet = false;
    m_shift_name_isValid = false;

    m_shift_roll_isSet = false;
    m_shift_roll_isValid = false;
}

void OAIOnCallEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnCallEntry::fromJsonObject(QJsonObject json) {

    m_on_call_type_isValid = ::OpenAPI::fromJsonValue(m_on_call_type, json[QString("onCallType")]);
    m_on_call_type_isSet = !json[QString("onCallType")].isNull() && m_on_call_type_isValid;

    m_on_call_user_isValid = ::OpenAPI::fromJsonValue(m_on_call_user, json[QString("onCallUser")]);
    m_on_call_user_isSet = !json[QString("onCallUser")].isNull() && m_on_call_user_isValid;

    m_override_on_call_user_isValid = ::OpenAPI::fromJsonValue(m_override_on_call_user, json[QString("overrideOnCallUser")]);
    m_override_on_call_user_isSet = !json[QString("overrideOnCallUser")].isNull() && m_override_on_call_user_isValid;

    m_rolls_isValid = ::OpenAPI::fromJsonValue(m_rolls, json[QString("rolls")]);
    m_rolls_isSet = !json[QString("rolls")].isNull() && m_rolls_isValid;

    m_rotation_name_isValid = ::OpenAPI::fromJsonValue(m_rotation_name, json[QString("rotationName")]);
    m_rotation_name_isSet = !json[QString("rotationName")].isNull() && m_rotation_name_isValid;

    m_shift_name_isValid = ::OpenAPI::fromJsonValue(m_shift_name, json[QString("shiftName")]);
    m_shift_name_isSet = !json[QString("shiftName")].isNull() && m_shift_name_isValid;

    m_shift_roll_isValid = ::OpenAPI::fromJsonValue(m_shift_roll, json[QString("shiftRoll")]);
    m_shift_roll_isSet = !json[QString("shiftRoll")].isNull() && m_shift_roll_isValid;
}

QString OAIOnCallEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnCallEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_on_call_type.isSet()) {
        obj.insert(QString("onCallType"), ::OpenAPI::toJsonValue(m_on_call_type));
    }
    if (m_on_call_user.isSet()) {
        obj.insert(QString("onCallUser"), ::OpenAPI::toJsonValue(m_on_call_user));
    }
    if (m_override_on_call_user.isSet()) {
        obj.insert(QString("overrideOnCallUser"), ::OpenAPI::toJsonValue(m_override_on_call_user));
    }
    if (m_rolls.size() > 0) {
        obj.insert(QString("rolls"), ::OpenAPI::toJsonValue(m_rolls));
    }
    if (m_rotation_name_isSet) {
        obj.insert(QString("rotationName"), ::OpenAPI::toJsonValue(m_rotation_name));
    }
    if (m_shift_name_isSet) {
        obj.insert(QString("shiftName"), ::OpenAPI::toJsonValue(m_shift_name));
    }
    if (m_shift_roll_isSet) {
        obj.insert(QString("shiftRoll"), ::OpenAPI::toJsonValue(m_shift_roll));
    }
    return obj;
}

OAIOnCallType OAIOnCallEntry::getOnCallType() const {
    return m_on_call_type;
}
void OAIOnCallEntry::setOnCallType(const OAIOnCallType &on_call_type) {
    m_on_call_type = on_call_type;
    m_on_call_type_isSet = true;
}

bool OAIOnCallEntry::is_on_call_type_Set() const{
    return m_on_call_type_isSet;
}

bool OAIOnCallEntry::is_on_call_type_Valid() const{
    return m_on_call_type_isValid;
}

OAIUser OAIOnCallEntry::getOnCallUser() const {
    return m_on_call_user;
}
void OAIOnCallEntry::setOnCallUser(const OAIUser &on_call_user) {
    m_on_call_user = on_call_user;
    m_on_call_user_isSet = true;
}

bool OAIOnCallEntry::is_on_call_user_Set() const{
    return m_on_call_user_isSet;
}

bool OAIOnCallEntry::is_on_call_user_Valid() const{
    return m_on_call_user_isValid;
}

OAIUser OAIOnCallEntry::getOverrideOnCallUser() const {
    return m_override_on_call_user;
}
void OAIOnCallEntry::setOverrideOnCallUser(const OAIUser &override_on_call_user) {
    m_override_on_call_user = override_on_call_user;
    m_override_on_call_user_isSet = true;
}

bool OAIOnCallEntry::is_override_on_call_user_Set() const{
    return m_override_on_call_user_isSet;
}

bool OAIOnCallEntry::is_override_on_call_user_Valid() const{
    return m_override_on_call_user_isValid;
}

QList<OAIOnCallRoll> OAIOnCallEntry::getRolls() const {
    return m_rolls;
}
void OAIOnCallEntry::setRolls(const QList<OAIOnCallRoll> &rolls) {
    m_rolls = rolls;
    m_rolls_isSet = true;
}

bool OAIOnCallEntry::is_rolls_Set() const{
    return m_rolls_isSet;
}

bool OAIOnCallEntry::is_rolls_Valid() const{
    return m_rolls_isValid;
}

QString OAIOnCallEntry::getRotationName() const {
    return m_rotation_name;
}
void OAIOnCallEntry::setRotationName(const QString &rotation_name) {
    m_rotation_name = rotation_name;
    m_rotation_name_isSet = true;
}

bool OAIOnCallEntry::is_rotation_name_Set() const{
    return m_rotation_name_isSet;
}

bool OAIOnCallEntry::is_rotation_name_Valid() const{
    return m_rotation_name_isValid;
}

QString OAIOnCallEntry::getShiftName() const {
    return m_shift_name;
}
void OAIOnCallEntry::setShiftName(const QString &shift_name) {
    m_shift_name = shift_name;
    m_shift_name_isSet = true;
}

bool OAIOnCallEntry::is_shift_name_Set() const{
    return m_shift_name_isSet;
}

bool OAIOnCallEntry::is_shift_name_Valid() const{
    return m_shift_name_isValid;
}

QString OAIOnCallEntry::getShiftRoll() const {
    return m_shift_roll;
}
void OAIOnCallEntry::setShiftRoll(const QString &shift_roll) {
    m_shift_roll = shift_roll;
    m_shift_roll_isSet = true;
}

bool OAIOnCallEntry::is_shift_roll_Set() const{
    return m_shift_roll_isSet;
}

bool OAIOnCallEntry::is_shift_roll_Valid() const{
    return m_shift_roll_isValid;
}

bool OAIOnCallEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_on_call_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_call_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_on_call_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shift_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shift_roll_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnCallEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_on_call_type_isValid && m_rolls_isValid && true;
}

} // namespace OpenAPI
