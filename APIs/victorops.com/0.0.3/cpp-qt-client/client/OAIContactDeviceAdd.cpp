/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactDeviceAdd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactDeviceAdd::OAIContactDeviceAdd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactDeviceAdd::OAIContactDeviceAdd() {
    this->initializeModel();
}

OAIContactDeviceAdd::~OAIContactDeviceAdd() {}

void OAIContactDeviceAdd::initializeModel() {

    m_chat_escalation_sound_isSet = false;
    m_chat_escalation_sound_isValid = false;

    m_device_label_isSet = false;
    m_device_label_isValid = false;

    m_escalation_notification_sound_isSet = false;
    m_escalation_notification_sound_isValid = false;

    m_resolved_notification_sound_isSet = false;
    m_resolved_notification_sound_isValid = false;
}

void OAIContactDeviceAdd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactDeviceAdd::fromJsonObject(QJsonObject json) {

    m_chat_escalation_sound_isValid = ::OpenAPI::fromJsonValue(m_chat_escalation_sound, json[QString("chat_escalation_sound")]);
    m_chat_escalation_sound_isSet = !json[QString("chat_escalation_sound")].isNull() && m_chat_escalation_sound_isValid;

    m_device_label_isValid = ::OpenAPI::fromJsonValue(m_device_label, json[QString("device_label")]);
    m_device_label_isSet = !json[QString("device_label")].isNull() && m_device_label_isValid;

    m_escalation_notification_sound_isValid = ::OpenAPI::fromJsonValue(m_escalation_notification_sound, json[QString("escalation_notification_sound")]);
    m_escalation_notification_sound_isSet = !json[QString("escalation_notification_sound")].isNull() && m_escalation_notification_sound_isValid;

    m_resolved_notification_sound_isValid = ::OpenAPI::fromJsonValue(m_resolved_notification_sound, json[QString("resolved_notification_sound")]);
    m_resolved_notification_sound_isSet = !json[QString("resolved_notification_sound")].isNull() && m_resolved_notification_sound_isValid;
}

QString OAIContactDeviceAdd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactDeviceAdd::asJsonObject() const {
    QJsonObject obj;
    if (m_chat_escalation_sound_isSet) {
        obj.insert(QString("chat_escalation_sound"), ::OpenAPI::toJsonValue(m_chat_escalation_sound));
    }
    if (m_device_label_isSet) {
        obj.insert(QString("device_label"), ::OpenAPI::toJsonValue(m_device_label));
    }
    if (m_escalation_notification_sound_isSet) {
        obj.insert(QString("escalation_notification_sound"), ::OpenAPI::toJsonValue(m_escalation_notification_sound));
    }
    if (m_resolved_notification_sound_isSet) {
        obj.insert(QString("resolved_notification_sound"), ::OpenAPI::toJsonValue(m_resolved_notification_sound));
    }
    return obj;
}

QString OAIContactDeviceAdd::getChatEscalationSound() const {
    return m_chat_escalation_sound;
}
void OAIContactDeviceAdd::setChatEscalationSound(const QString &chat_escalation_sound) {
    m_chat_escalation_sound = chat_escalation_sound;
    m_chat_escalation_sound_isSet = true;
}

bool OAIContactDeviceAdd::is_chat_escalation_sound_Set() const{
    return m_chat_escalation_sound_isSet;
}

bool OAIContactDeviceAdd::is_chat_escalation_sound_Valid() const{
    return m_chat_escalation_sound_isValid;
}

QString OAIContactDeviceAdd::getDeviceLabel() const {
    return m_device_label;
}
void OAIContactDeviceAdd::setDeviceLabel(const QString &device_label) {
    m_device_label = device_label;
    m_device_label_isSet = true;
}

bool OAIContactDeviceAdd::is_device_label_Set() const{
    return m_device_label_isSet;
}

bool OAIContactDeviceAdd::is_device_label_Valid() const{
    return m_device_label_isValid;
}

QString OAIContactDeviceAdd::getEscalationNotificationSound() const {
    return m_escalation_notification_sound;
}
void OAIContactDeviceAdd::setEscalationNotificationSound(const QString &escalation_notification_sound) {
    m_escalation_notification_sound = escalation_notification_sound;
    m_escalation_notification_sound_isSet = true;
}

bool OAIContactDeviceAdd::is_escalation_notification_sound_Set() const{
    return m_escalation_notification_sound_isSet;
}

bool OAIContactDeviceAdd::is_escalation_notification_sound_Valid() const{
    return m_escalation_notification_sound_isValid;
}

QString OAIContactDeviceAdd::getResolvedNotificationSound() const {
    return m_resolved_notification_sound;
}
void OAIContactDeviceAdd::setResolvedNotificationSound(const QString &resolved_notification_sound) {
    m_resolved_notification_sound = resolved_notification_sound;
    m_resolved_notification_sound_isSet = true;
}

bool OAIContactDeviceAdd::is_resolved_notification_sound_Set() const{
    return m_resolved_notification_sound_isSet;
}

bool OAIContactDeviceAdd::is_resolved_notification_sound_Valid() const{
    return m_resolved_notification_sound_isValid;
}

bool OAIContactDeviceAdd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chat_escalation_sound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_escalation_notification_sound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_notification_sound_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactDeviceAdd::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
