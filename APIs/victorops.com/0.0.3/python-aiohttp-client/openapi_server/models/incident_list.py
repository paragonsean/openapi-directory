# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.incident_info import IncidentInfo
from openapi_server import util


class IncidentList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, incidents: List[IncidentInfo]=None, limit: float=None, offset: float=None, total: float=None):
        """IncidentList - a model defined in OpenAPI

        :param incidents: The incidents of this IncidentList.
        :param limit: The limit of this IncidentList.
        :param offset: The offset of this IncidentList.
        :param total: The total of this IncidentList.
        """
        self.openapi_types = {
            'incidents': List[IncidentInfo],
            'limit': float,
            'offset': float,
            'total': float
        }

        self.attribute_map = {
            'incidents': 'incidents',
            'limit': 'limit',
            'offset': 'offset',
            'total': 'total'
        }

        self._incidents = incidents
        self._limit = limit
        self._offset = offset
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IncidentList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IncidentList of this IncidentList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def incidents(self):
        """Gets the incidents of this IncidentList.

        An array of incident objects matching the search

        :return: The incidents of this IncidentList.
        :rtype: List[IncidentInfo]
        """
        return self._incidents

    @incidents.setter
    def incidents(self, incidents):
        """Sets the incidents of this IncidentList.

        An array of incident objects matching the search

        :param incidents: The incidents of this IncidentList.
        :type incidents: List[IncidentInfo]
        """

        self._incidents = incidents

    @property
    def limit(self):
        """Gets the limit of this IncidentList.

        The limit value passed in the request

        :return: The limit of this IncidentList.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this IncidentList.

        The limit value passed in the request

        :param limit: The limit of this IncidentList.
        :type limit: float
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this IncidentList.

        The offset passed in the request

        :return: The offset of this IncidentList.
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this IncidentList.

        The offset passed in the request

        :param offset: The offset of this IncidentList.
        :type offset: float
        """

        self._offset = offset

    @property
    def total(self):
        """Gets the total of this IncidentList.

        The total number of incidents available for this search

        :return: The total of this IncidentList.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this IncidentList.

        The total number of incidents available for this search

        :param total: The total of this IncidentList.
        :type total: float
        """

        self._total = total
