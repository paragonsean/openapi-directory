# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_call_roll import OnCallRoll
from openapi_server.models.on_call_type import OnCallType
from openapi_server.models.user import User
from openapi_server import util


class OnCallEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, on_call_type: OnCallType=None, on_call_user: User=None, override_on_call_user: User=None, rolls: List[OnCallRoll]=None, rotation_name: str=None, shift_name: str=None, shift_roll: str=None):
        """OnCallEntry - a model defined in OpenAPI

        :param on_call_type: The on_call_type of this OnCallEntry.
        :param on_call_user: The on_call_user of this OnCallEntry.
        :param override_on_call_user: The override_on_call_user of this OnCallEntry.
        :param rolls: The rolls of this OnCallEntry.
        :param rotation_name: The rotation_name of this OnCallEntry.
        :param shift_name: The shift_name of this OnCallEntry.
        :param shift_roll: The shift_roll of this OnCallEntry.
        """
        self.openapi_types = {
            'on_call_type': OnCallType,
            'on_call_user': User,
            'override_on_call_user': User,
            'rolls': List[OnCallRoll],
            'rotation_name': str,
            'shift_name': str,
            'shift_roll': str
        }

        self.attribute_map = {
            'on_call_type': 'onCallType',
            'on_call_user': 'onCallUser',
            'override_on_call_user': 'overrideOnCallUser',
            'rolls': 'rolls',
            'rotation_name': 'rotationName',
            'shift_name': 'shiftName',
            'shift_roll': 'shiftRoll'
        }

        self._on_call_type = on_call_type
        self._on_call_user = on_call_user
        self._override_on_call_user = override_on_call_user
        self._rolls = rolls
        self._rotation_name = rotation_name
        self._shift_name = shift_name
        self._shift_roll = shift_roll

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnCallEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OnCallEntry of this OnCallEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def on_call_type(self):
        """Gets the on_call_type of this OnCallEntry.


        :return: The on_call_type of this OnCallEntry.
        :rtype: OnCallType
        """
        return self._on_call_type

    @on_call_type.setter
    def on_call_type(self, on_call_type):
        """Sets the on_call_type of this OnCallEntry.


        :param on_call_type: The on_call_type of this OnCallEntry.
        :type on_call_type: OnCallType
        """
        if on_call_type is None:
            raise ValueError("Invalid value for `on_call_type`, must not be `None`")

        self._on_call_type = on_call_type

    @property
    def on_call_user(self):
        """Gets the on_call_user of this OnCallEntry.


        :return: The on_call_user of this OnCallEntry.
        :rtype: User
        """
        return self._on_call_user

    @on_call_user.setter
    def on_call_user(self, on_call_user):
        """Sets the on_call_user of this OnCallEntry.


        :param on_call_user: The on_call_user of this OnCallEntry.
        :type on_call_user: User
        """

        self._on_call_user = on_call_user

    @property
    def override_on_call_user(self):
        """Gets the override_on_call_user of this OnCallEntry.


        :return: The override_on_call_user of this OnCallEntry.
        :rtype: User
        """
        return self._override_on_call_user

    @override_on_call_user.setter
    def override_on_call_user(self, override_on_call_user):
        """Sets the override_on_call_user of this OnCallEntry.


        :param override_on_call_user: The override_on_call_user of this OnCallEntry.
        :type override_on_call_user: User
        """

        self._override_on_call_user = override_on_call_user

    @property
    def rolls(self):
        """Gets the rolls of this OnCallEntry.


        :return: The rolls of this OnCallEntry.
        :rtype: List[OnCallRoll]
        """
        return self._rolls

    @rolls.setter
    def rolls(self, rolls):
        """Sets the rolls of this OnCallEntry.


        :param rolls: The rolls of this OnCallEntry.
        :type rolls: List[OnCallRoll]
        """
        if rolls is None:
            raise ValueError("Invalid value for `rolls`, must not be `None`")

        self._rolls = rolls

    @property
    def rotation_name(self):
        """Gets the rotation_name of this OnCallEntry.


        :return: The rotation_name of this OnCallEntry.
        :rtype: str
        """
        return self._rotation_name

    @rotation_name.setter
    def rotation_name(self, rotation_name):
        """Sets the rotation_name of this OnCallEntry.


        :param rotation_name: The rotation_name of this OnCallEntry.
        :type rotation_name: str
        """

        self._rotation_name = rotation_name

    @property
    def shift_name(self):
        """Gets the shift_name of this OnCallEntry.


        :return: The shift_name of this OnCallEntry.
        :rtype: str
        """
        return self._shift_name

    @shift_name.setter
    def shift_name(self, shift_name):
        """Sets the shift_name of this OnCallEntry.


        :param shift_name: The shift_name of this OnCallEntry.
        :type shift_name: str
        """

        self._shift_name = shift_name

    @property
    def shift_roll(self):
        """Gets the shift_roll of this OnCallEntry.

        The shift roll time (ISO 8601)

        :return: The shift_roll of this OnCallEntry.
        :rtype: str
        """
        return self._shift_roll

    @shift_roll.setter
    def shift_roll(self, shift_roll):
        """Sets the shift_roll of this OnCallEntry.

        The shift roll time (ISO 8601)

        :param shift_roll: The shift_roll of this OnCallEntry.
        :type shift_roll: str
        """

        self._shift_roll = shift_roll
