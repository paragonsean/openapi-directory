# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Assignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, self_url: str=None, assigned: bool=None, policy: str=None, team: str=None, user: str=None):
        """Assignment - a model defined in OpenAPI

        :param self_url: The self_url of this Assignment.
        :param assigned: The assigned of this Assignment.
        :param policy: The policy of this Assignment.
        :param team: The team of this Assignment.
        :param user: The user of this Assignment.
        """
        self.openapi_types = {
            'self_url': str,
            'assigned': bool,
            'policy': str,
            'team': str,
            'user': str
        }

        self.attribute_map = {
            'self_url': '_selfUrl',
            'assigned': 'assigned',
            'policy': 'policy',
            'team': 'team',
            'user': 'user'
        }

        self._self_url = self_url
        self._assigned = assigned
        self._policy = policy
        self._team = team
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Assignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assignment of this Assignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def self_url(self):
        """Gets the self_url of this Assignment.


        :return: The self_url of this Assignment.
        :rtype: str
        """
        return self._self_url

    @self_url.setter
    def self_url(self, self_url):
        """Sets the self_url of this Assignment.


        :param self_url: The self_url of this Assignment.
        :type self_url: str
        """

        self._self_url = self_url

    @property
    def assigned(self):
        """Gets the assigned of this Assignment.


        :return: The assigned of this Assignment.
        :rtype: bool
        """
        return self._assigned

    @assigned.setter
    def assigned(self, assigned):
        """Sets the assigned of this Assignment.


        :param assigned: The assigned of this Assignment.
        :type assigned: bool
        """

        self._assigned = assigned

    @property
    def policy(self):
        """Gets the policy of this Assignment.


        :return: The policy of this Assignment.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this Assignment.


        :param policy: The policy of this Assignment.
        :type policy: str
        """

        self._policy = policy

    @property
    def team(self):
        """Gets the team of this Assignment.


        :return: The team of this Assignment.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Assignment.


        :param team: The team of this Assignment.
        :type team: str
        """

        self._team = team

    @property
    def user(self):
        """Gets the user of this Assignment.


        :return: The user of this Assignment.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Assignment.


        :param user: The user of this Assignment.
        :type user: str
        """

        self._user = user
