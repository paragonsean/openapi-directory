# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetAlertResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ack_author: str=None, ack_msg: str=None, entity_display_name: str=None, entity_id: str=None, message_type: str=None, monitoring_tool: str=None, raw: str=None, state_message: str=None, state_start_time: float=None, timestamp: float=None):
        """GetAlertResponse - a model defined in OpenAPI

        :param ack_author: The ack_author of this GetAlertResponse.
        :param ack_msg: The ack_msg of this GetAlertResponse.
        :param entity_display_name: The entity_display_name of this GetAlertResponse.
        :param entity_id: The entity_id of this GetAlertResponse.
        :param message_type: The message_type of this GetAlertResponse.
        :param monitoring_tool: The monitoring_tool of this GetAlertResponse.
        :param raw: The raw of this GetAlertResponse.
        :param state_message: The state_message of this GetAlertResponse.
        :param state_start_time: The state_start_time of this GetAlertResponse.
        :param timestamp: The timestamp of this GetAlertResponse.
        """
        self.openapi_types = {
            'ack_author': str,
            'ack_msg': str,
            'entity_display_name': str,
            'entity_id': str,
            'message_type': str,
            'monitoring_tool': str,
            'raw': str,
            'state_message': str,
            'state_start_time': float,
            'timestamp': float
        }

        self.attribute_map = {
            'ack_author': 'ackAuthor',
            'ack_msg': 'ackMsg',
            'entity_display_name': 'entityDisplayName',
            'entity_id': 'entityId',
            'message_type': 'messageType',
            'monitoring_tool': 'monitoringTool',
            'raw': 'raw',
            'state_message': 'stateMessage',
            'state_start_time': 'stateStartTime',
            'timestamp': 'timestamp'
        }

        self._ack_author = ack_author
        self._ack_msg = ack_msg
        self._entity_display_name = entity_display_name
        self._entity_id = entity_id
        self._message_type = message_type
        self._monitoring_tool = monitoring_tool
        self._raw = raw
        self._state_message = state_message
        self._state_start_time = state_start_time
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAlertResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetAlertResponse of this GetAlertResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ack_author(self):
        """Gets the ack_author of this GetAlertResponse.

        The user that acknowledged the incident.

        :return: The ack_author of this GetAlertResponse.
        :rtype: str
        """
        return self._ack_author

    @ack_author.setter
    def ack_author(self, ack_author):
        """Sets the ack_author of this GetAlertResponse.

        The user that acknowledged the incident.

        :param ack_author: The ack_author of this GetAlertResponse.
        :type ack_author: str
        """

        self._ack_author = ack_author

    @property
    def ack_msg(self):
        """Gets the ack_msg of this GetAlertResponse.

        A user entered comment for the acknowledgment.

        :return: The ack_msg of this GetAlertResponse.
        :rtype: str
        """
        return self._ack_msg

    @ack_msg.setter
    def ack_msg(self, ack_msg):
        """Sets the ack_msg of this GetAlertResponse.

        A user entered comment for the acknowledgment.

        :param ack_msg: The ack_msg of this GetAlertResponse.
        :type ack_msg: str
        """

        self._ack_msg = ack_msg

    @property
    def entity_display_name(self):
        """Gets the entity_display_name of this GetAlertResponse.

        Used within VictorOps to display a human-readable name for the entity.

        :return: The entity_display_name of this GetAlertResponse.
        :rtype: str
        """
        return self._entity_display_name

    @entity_display_name.setter
    def entity_display_name(self, entity_display_name):
        """Sets the entity_display_name of this GetAlertResponse.

        Used within VictorOps to display a human-readable name for the entity.

        :param entity_display_name: The entity_display_name of this GetAlertResponse.
        :type entity_display_name: str
        """

        self._entity_display_name = entity_display_name

    @property
    def entity_id(self):
        """Gets the entity_id of this GetAlertResponse.

        Identifies the entity (host, service, etc.) this alert was about. 

        :return: The entity_id of this GetAlertResponse.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this GetAlertResponse.

        Identifies the entity (host, service, etc.) this alert was about. 

        :param entity_id: The entity_id of this GetAlertResponse.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def message_type(self):
        """Gets the message_type of this GetAlertResponse.

        The type of alert; INFO, WARNING, ACKNOWLEDGEMENT, CRITICAL, RECOVERY 

        :return: The message_type of this GetAlertResponse.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this GetAlertResponse.

        The type of alert; INFO, WARNING, ACKNOWLEDGEMENT, CRITICAL, RECOVERY 

        :param message_type: The message_type of this GetAlertResponse.
        :type message_type: str
        """

        self._message_type = message_type

    @property
    def monitoring_tool(self):
        """Gets the monitoring_tool of this GetAlertResponse.

        The name of the monitoring system software (eg. nagios, icinga, sensu, etc.)

        :return: The monitoring_tool of this GetAlertResponse.
        :rtype: str
        """
        return self._monitoring_tool

    @monitoring_tool.setter
    def monitoring_tool(self, monitoring_tool):
        """Sets the monitoring_tool of this GetAlertResponse.

        The name of the monitoring system software (eg. nagios, icinga, sensu, etc.)

        :param monitoring_tool: The monitoring_tool of this GetAlertResponse.
        :type monitoring_tool: str
        """

        self._monitoring_tool = monitoring_tool

    @property
    def raw(self):
        """Gets the raw of this GetAlertResponse.

        The full, raw alert details JSON string (i.e. parse the string into a JSON object) 

        :return: The raw of this GetAlertResponse.
        :rtype: str
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this GetAlertResponse.

        The full, raw alert details JSON string (i.e. parse the string into a JSON object) 

        :param raw: The raw of this GetAlertResponse.
        :type raw: str
        """

        self._raw = raw

    @property
    def state_message(self):
        """Gets the state_message of this GetAlertResponse.

        Any additional status information from the alert item.

        :return: The state_message of this GetAlertResponse.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this GetAlertResponse.

        Any additional status information from the alert item.

        :param state_message: The state_message of this GetAlertResponse.
        :type state_message: str
        """

        self._state_message = state_message

    @property
    def state_start_time(self):
        """Gets the state_start_time of this GetAlertResponse.

        The time this entity entered its current state (seconds since epoch).

        :return: The state_start_time of this GetAlertResponse.
        :rtype: float
        """
        return self._state_start_time

    @state_start_time.setter
    def state_start_time(self, state_start_time):
        """Sets the state_start_time of this GetAlertResponse.

        The time this entity entered its current state (seconds since epoch).

        :param state_start_time: The state_start_time of this GetAlertResponse.
        :type state_start_time: float
        """

        self._state_start_time = state_start_time

    @property
    def timestamp(self):
        """Gets the timestamp of this GetAlertResponse.

        Timestamp of the alert in seconds since epoch.

        :return: The timestamp of this GetAlertResponse.
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GetAlertResponse.

        Timestamp of the alert in seconds since epoch.

        :param timestamp: The timestamp of this GetAlertResponse.
        :type timestamp: float
        """

        self._timestamp = timestamp
