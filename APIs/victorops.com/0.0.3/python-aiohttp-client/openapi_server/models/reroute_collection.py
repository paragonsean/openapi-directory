# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reroute import Reroute
from openapi_server import util


class RerouteCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reroutes: List[Reroute]=None, user_name: str=None):
        """RerouteCollection - a model defined in OpenAPI

        :param reroutes: The reroutes of this RerouteCollection.
        :param user_name: The user_name of this RerouteCollection.
        """
        self.openapi_types = {
            'reroutes': List[Reroute],
            'user_name': str
        }

        self.attribute_map = {
            'reroutes': 'reroutes',
            'user_name': 'userName'
        }

        self._reroutes = reroutes
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RerouteCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RerouteCollection of this RerouteCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reroutes(self):
        """Gets the reroutes of this RerouteCollection.


        :return: The reroutes of this RerouteCollection.
        :rtype: List[Reroute]
        """
        return self._reroutes

    @reroutes.setter
    def reroutes(self, reroutes):
        """Sets the reroutes of this RerouteCollection.


        :param reroutes: The reroutes of this RerouteCollection.
        :type reroutes: List[Reroute]
        """
        if reroutes is None:
            raise ValueError("Invalid value for `reroutes`, must not be `None`")

        self._reroutes = reroutes

    @property
    def user_name(self):
        """Gets the user_name of this RerouteCollection.


        :return: The user_name of this RerouteCollection.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this RerouteCollection.


        :param user_name: The user_name of this RerouteCollection.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name
