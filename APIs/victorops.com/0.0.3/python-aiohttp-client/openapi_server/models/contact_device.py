# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, self_url: str=None, device_type: str=None, ext_id: str=None, label: str=None):
        """ContactDevice - a model defined in OpenAPI

        :param self_url: The self_url of this ContactDevice.
        :param device_type: The device_type of this ContactDevice.
        :param ext_id: The ext_id of this ContactDevice.
        :param label: The label of this ContactDevice.
        """
        self.openapi_types = {
            'self_url': str,
            'device_type': str,
            'ext_id': str,
            'label': str
        }

        self.attribute_map = {
            'self_url': '_selfUrl',
            'device_type': 'deviceType',
            'ext_id': 'extId',
            'label': 'label'
        }

        self._self_url = self_url
        self._device_type = device_type
        self._ext_id = ext_id
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactDevice of this ContactDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def self_url(self):
        """Gets the self_url of this ContactDevice.


        :return: The self_url of this ContactDevice.
        :rtype: str
        """
        return self._self_url

    @self_url.setter
    def self_url(self, self_url):
        """Sets the self_url of this ContactDevice.


        :param self_url: The self_url of this ContactDevice.
        :type self_url: str
        """

        self._self_url = self_url

    @property
    def device_type(self):
        """Gets the device_type of this ContactDevice.


        :return: The device_type of this ContactDevice.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this ContactDevice.


        :param device_type: The device_type of this ContactDevice.
        :type device_type: str
        """

        self._device_type = device_type

    @property
    def ext_id(self):
        """Gets the ext_id of this ContactDevice.


        :return: The ext_id of this ContactDevice.
        :rtype: str
        """
        return self._ext_id

    @ext_id.setter
    def ext_id(self, ext_id):
        """Sets the ext_id of this ContactDevice.


        :param ext_id: The ext_id of this ContactDevice.
        :type ext_id: str
        """

        self._ext_id = ext_id

    @property
    def label(self):
        """Gets the label of this ContactDevice.


        :return: The label of this ContactDevice.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ContactDevice.


        :param label: The label of this ContactDevice.
        :type label: str
        """

        self._label = label
