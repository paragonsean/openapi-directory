# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class OnCallRoll(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: str=None, is_roll: bool=None, on_call_user: User=None, start: str=None):
        """OnCallRoll - a model defined in OpenAPI

        :param end: The end of this OnCallRoll.
        :param is_roll: The is_roll of this OnCallRoll.
        :param on_call_user: The on_call_user of this OnCallRoll.
        :param start: The start of this OnCallRoll.
        """
        self.openapi_types = {
            'end': str,
            'is_roll': bool,
            'on_call_user': User,
            'start': str
        }

        self.attribute_map = {
            'end': 'end',
            'is_roll': 'isRoll',
            'on_call_user': 'onCallUser',
            'start': 'start'
        }

        self._end = end
        self._is_roll = is_roll
        self._on_call_user = on_call_user
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnCallRoll':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OnCallRoll of this OnCallRoll.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this OnCallRoll.

        The on-call period end time (ISO 8601)

        :return: The end of this OnCallRoll.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this OnCallRoll.

        The on-call period end time (ISO 8601)

        :param end: The end of this OnCallRoll.
        :type end: str
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")

        self._end = end

    @property
    def is_roll(self):
        """Gets the is_roll of this OnCallRoll.


        :return: The is_roll of this OnCallRoll.
        :rtype: bool
        """
        return self._is_roll

    @is_roll.setter
    def is_roll(self, is_roll):
        """Sets the is_roll of this OnCallRoll.


        :param is_roll: The is_roll of this OnCallRoll.
        :type is_roll: bool
        """
        if is_roll is None:
            raise ValueError("Invalid value for `is_roll`, must not be `None`")

        self._is_roll = is_roll

    @property
    def on_call_user(self):
        """Gets the on_call_user of this OnCallRoll.


        :return: The on_call_user of this OnCallRoll.
        :rtype: User
        """
        return self._on_call_user

    @on_call_user.setter
    def on_call_user(self, on_call_user):
        """Sets the on_call_user of this OnCallRoll.


        :param on_call_user: The on_call_user of this OnCallRoll.
        :type on_call_user: User
        """

        self._on_call_user = on_call_user

    @property
    def start(self):
        """Gets the start of this OnCallRoll.

        The on-call period start time (ISO 8601)

        :return: The start of this OnCallRoll.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this OnCallRoll.

        The on-call period start time (ISO 8601)

        :param start: The start of this OnCallRoll.
        :type start: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start
