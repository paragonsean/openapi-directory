# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.maintenance_mode_target import MaintenanceModeTarget
from openapi_server import util


class ActiveMaintenanceMode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_id: str=None, is_global: bool=None, started_at: float=None, started_by: str=None, targets: List[MaintenanceModeTarget]=None):
        """ActiveMaintenanceMode - a model defined in OpenAPI

        :param instance_id: The instance_id of this ActiveMaintenanceMode.
        :param is_global: The is_global of this ActiveMaintenanceMode.
        :param started_at: The started_at of this ActiveMaintenanceMode.
        :param started_by: The started_by of this ActiveMaintenanceMode.
        :param targets: The targets of this ActiveMaintenanceMode.
        """
        self.openapi_types = {
            'instance_id': str,
            'is_global': bool,
            'started_at': float,
            'started_by': str,
            'targets': List[MaintenanceModeTarget]
        }

        self.attribute_map = {
            'instance_id': 'instanceId',
            'is_global': 'isGlobal',
            'started_at': 'startedAt',
            'started_by': 'startedBy',
            'targets': 'targets'
        }

        self._instance_id = instance_id
        self._is_global = is_global
        self._started_at = started_at
        self._started_by = started_by
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActiveMaintenanceMode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActiveMaintenanceMode of this ActiveMaintenanceMode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_id(self):
        """Gets the instance_id of this ActiveMaintenanceMode.

        external friendly unique id for maintenance mode

        :return: The instance_id of this ActiveMaintenanceMode.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ActiveMaintenanceMode.

        external friendly unique id for maintenance mode

        :param instance_id: The instance_id of this ActiveMaintenanceMode.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def is_global(self):
        """Gets the is_global of this ActiveMaintenanceMode.

        whether this instance is a global maintenance mode or for specific routing keys

        :return: The is_global of this ActiveMaintenanceMode.
        :rtype: bool
        """
        return self._is_global

    @is_global.setter
    def is_global(self, is_global):
        """Sets the is_global of this ActiveMaintenanceMode.

        whether this instance is a global maintenance mode or for specific routing keys

        :param is_global: The is_global of this ActiveMaintenanceMode.
        :type is_global: bool
        """

        self._is_global = is_global

    @property
    def started_at(self):
        """Gets the started_at of this ActiveMaintenanceMode.

        millis from epoch marking the start time

        :return: The started_at of this ActiveMaintenanceMode.
        :rtype: float
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ActiveMaintenanceMode.

        millis from epoch marking the start time

        :param started_at: The started_at of this ActiveMaintenanceMode.
        :type started_at: float
        """

        self._started_at = started_at

    @property
    def started_by(self):
        """Gets the started_by of this ActiveMaintenanceMode.

        username of the user that started maintenance mode

        :return: The started_by of this ActiveMaintenanceMode.
        :rtype: str
        """
        return self._started_by

    @started_by.setter
    def started_by(self, started_by):
        """Sets the started_by of this ActiveMaintenanceMode.

        username of the user that started maintenance mode

        :param started_by: The started_by of this ActiveMaintenanceMode.
        :type started_by: str
        """

        self._started_by = started_by

    @property
    def targets(self):
        """Gets the targets of this ActiveMaintenanceMode.


        :return: The targets of this ActiveMaintenanceMode.
        :rtype: List[MaintenanceModeTarget]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this ActiveMaintenanceMode.


        :param targets: The targets of this ActiveMaintenanceMode.
        :type targets: List[MaintenanceModeTarget]
        """

        self._targets = targets
