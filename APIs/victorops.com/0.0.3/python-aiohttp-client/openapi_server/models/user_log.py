# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_call_interval import OnCallInterval
from openapi_server.models.on_call_interval_duration import OnCallIntervalDuration
from openapi_server import util


class UserLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjusted_total: OnCallIntervalDuration=None, log: List[OnCallInterval]=None, total: OnCallIntervalDuration=None, user_id: str=None):
        """UserLog - a model defined in OpenAPI

        :param adjusted_total: The adjusted_total of this UserLog.
        :param log: The log of this UserLog.
        :param total: The total of this UserLog.
        :param user_id: The user_id of this UserLog.
        """
        self.openapi_types = {
            'adjusted_total': OnCallIntervalDuration,
            'log': List[OnCallInterval],
            'total': OnCallIntervalDuration,
            'user_id': str
        }

        self.attribute_map = {
            'adjusted_total': 'adjustedTotal',
            'log': 'log',
            'total': 'total',
            'user_id': 'userId'
        }

        self._adjusted_total = adjusted_total
        self._log = log
        self._total = total
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserLog of this UserLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjusted_total(self):
        """Gets the adjusted_total of this UserLog.


        :return: The adjusted_total of this UserLog.
        :rtype: OnCallIntervalDuration
        """
        return self._adjusted_total

    @adjusted_total.setter
    def adjusted_total(self, adjusted_total):
        """Sets the adjusted_total of this UserLog.


        :param adjusted_total: The adjusted_total of this UserLog.
        :type adjusted_total: OnCallIntervalDuration
        """

        self._adjusted_total = adjusted_total

    @property
    def log(self):
        """Gets the log of this UserLog.


        :return: The log of this UserLog.
        :rtype: List[OnCallInterval]
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this UserLog.


        :param log: The log of this UserLog.
        :type log: List[OnCallInterval]
        """

        self._log = log

    @property
    def total(self):
        """Gets the total of this UserLog.


        :return: The total of this UserLog.
        :rtype: OnCallIntervalDuration
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this UserLog.


        :param total: The total of this UserLog.
        :type total: OnCallIntervalDuration
        """

        self._total = total

    @property
    def user_id(self):
        """Gets the user_id of this UserLog.


        :return: The user_id of this UserLog.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserLog.


        :param user_id: The user_id of this UserLog.
        :type user_id: str
        """

        self._user_id = user_id
