# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ack_user import AckUser
from openapi_server import util


class IncidentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ack_time: str=None, ack_user: AckUser=None, ack_user_id: str=None, alert_count: float=None, current_phase: str=None, end_time: str=None, entity_disp_name: str=None, entity_id: str=None, entity_type: str=None, host: str=None, incident_number: str=None, last_alert_id: str=None, last_alert_time: str=None, service: str=None, start_time: str=None, teams: str=None):
        """IncidentInfo - a model defined in OpenAPI

        :param ack_time: The ack_time of this IncidentInfo.
        :param ack_user: The ack_user of this IncidentInfo.
        :param ack_user_id: The ack_user_id of this IncidentInfo.
        :param alert_count: The alert_count of this IncidentInfo.
        :param current_phase: The current_phase of this IncidentInfo.
        :param end_time: The end_time of this IncidentInfo.
        :param entity_disp_name: The entity_disp_name of this IncidentInfo.
        :param entity_id: The entity_id of this IncidentInfo.
        :param entity_type: The entity_type of this IncidentInfo.
        :param host: The host of this IncidentInfo.
        :param incident_number: The incident_number of this IncidentInfo.
        :param last_alert_id: The last_alert_id of this IncidentInfo.
        :param last_alert_time: The last_alert_time of this IncidentInfo.
        :param service: The service of this IncidentInfo.
        :param start_time: The start_time of this IncidentInfo.
        :param teams: The teams of this IncidentInfo.
        """
        self.openapi_types = {
            'ack_time': str,
            'ack_user': AckUser,
            'ack_user_id': str,
            'alert_count': float,
            'current_phase': str,
            'end_time': str,
            'entity_disp_name': str,
            'entity_id': str,
            'entity_type': str,
            'host': str,
            'incident_number': str,
            'last_alert_id': str,
            'last_alert_time': str,
            'service': str,
            'start_time': str,
            'teams': str
        }

        self.attribute_map = {
            'ack_time': 'ackTime',
            'ack_user': 'ackUser',
            'ack_user_id': 'ackUserId',
            'alert_count': 'alertCount',
            'current_phase': 'currentPhase',
            'end_time': 'endTime',
            'entity_disp_name': 'entityDispName',
            'entity_id': 'entityId',
            'entity_type': 'entityType',
            'host': 'host',
            'incident_number': 'incidentNumber',
            'last_alert_id': 'lastAlertID',
            'last_alert_time': 'lastAlertTime',
            'service': 'service',
            'start_time': 'startTime',
            'teams': 'teams'
        }

        self._ack_time = ack_time
        self._ack_user = ack_user
        self._ack_user_id = ack_user_id
        self._alert_count = alert_count
        self._current_phase = current_phase
        self._end_time = end_time
        self._entity_disp_name = entity_disp_name
        self._entity_id = entity_id
        self._entity_type = entity_type
        self._host = host
        self._incident_number = incident_number
        self._last_alert_id = last_alert_id
        self._last_alert_time = last_alert_time
        self._service = service
        self._start_time = start_time
        self._teams = teams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IncidentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IncidentInfo of this IncidentInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ack_time(self):
        """Gets the ack_time of this IncidentInfo.

        The time of the last acknowledgment of the incident

        :return: The ack_time of this IncidentInfo.
        :rtype: str
        """
        return self._ack_time

    @ack_time.setter
    def ack_time(self, ack_time):
        """Sets the ack_time of this IncidentInfo.

        The time of the last acknowledgment of the incident

        :param ack_time: The ack_time of this IncidentInfo.
        :type ack_time: str
        """

        self._ack_time = ack_time

    @property
    def ack_user(self):
        """Gets the ack_user of this IncidentInfo.


        :return: The ack_user of this IncidentInfo.
        :rtype: AckUser
        """
        return self._ack_user

    @ack_user.setter
    def ack_user(self, ack_user):
        """Sets the ack_user of this IncidentInfo.


        :param ack_user: The ack_user of this IncidentInfo.
        :type ack_user: AckUser
        """

        self._ack_user = ack_user

    @property
    def ack_user_id(self):
        """Gets the ack_user_id of this IncidentInfo.

        The VictorOps user id of the user that acknowledged the incident

        :return: The ack_user_id of this IncidentInfo.
        :rtype: str
        """
        return self._ack_user_id

    @ack_user_id.setter
    def ack_user_id(self, ack_user_id):
        """Sets the ack_user_id of this IncidentInfo.

        The VictorOps user id of the user that acknowledged the incident

        :param ack_user_id: The ack_user_id of this IncidentInfo.
        :type ack_user_id: str
        """

        self._ack_user_id = ack_user_id

    @property
    def alert_count(self):
        """Gets the alert_count of this IncidentInfo.

        The number of alerts received for this incident

        :return: The alert_count of this IncidentInfo.
        :rtype: float
        """
        return self._alert_count

    @alert_count.setter
    def alert_count(self, alert_count):
        """Sets the alert_count of this IncidentInfo.

        The number of alerts received for this incident

        :param alert_count: The alert_count of this IncidentInfo.
        :type alert_count: float
        """

        self._alert_count = alert_count

    @property
    def current_phase(self):
        """Gets the current_phase of this IncidentInfo.

        The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\".

        :return: The current_phase of this IncidentInfo.
        :rtype: str
        """
        return self._current_phase

    @current_phase.setter
    def current_phase(self, current_phase):
        """Sets the current_phase of this IncidentInfo.

        The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\".

        :param current_phase: The current_phase of this IncidentInfo.
        :type current_phase: str
        """

        self._current_phase = current_phase

    @property
    def end_time(self):
        """Gets the end_time of this IncidentInfo.

        The time the incident ended

        :return: The end_time of this IncidentInfo.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this IncidentInfo.

        The time the incident ended

        :param end_time: The end_time of this IncidentInfo.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def entity_disp_name(self):
        """Gets the entity_disp_name of this IncidentInfo.

        The display name of the entity causing the incident

        :return: The entity_disp_name of this IncidentInfo.
        :rtype: str
        """
        return self._entity_disp_name

    @entity_disp_name.setter
    def entity_disp_name(self, entity_disp_name):
        """Sets the entity_disp_name of this IncidentInfo.

        The display name of the entity causing the incident

        :param entity_disp_name: The entity_disp_name of this IncidentInfo.
        :type entity_disp_name: str
        """

        self._entity_disp_name = entity_disp_name

    @property
    def entity_id(self):
        """Gets the entity_id of this IncidentInfo.

        The unique identification of the entity being monitored that caused the incident

        :return: The entity_id of this IncidentInfo.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this IncidentInfo.

        The unique identification of the entity being monitored that caused the incident

        :param entity_id: The entity_id of this IncidentInfo.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this IncidentInfo.

        The type of entity causing the incident (host/service)

        :return: The entity_type of this IncidentInfo.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this IncidentInfo.

        The type of entity causing the incident (host/service)

        :param entity_type: The entity_type of this IncidentInfo.
        :type entity_type: str
        """

        self._entity_type = entity_type

    @property
    def host(self):
        """Gets the host of this IncidentInfo.

        The host on which the incident occurred

        :return: The host of this IncidentInfo.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this IncidentInfo.

        The host on which the incident occurred

        :param host: The host of this IncidentInfo.
        :type host: str
        """

        self._host = host

    @property
    def incident_number(self):
        """Gets the incident_number of this IncidentInfo.

        The VictorOps incident number

        :return: The incident_number of this IncidentInfo.
        :rtype: str
        """
        return self._incident_number

    @incident_number.setter
    def incident_number(self, incident_number):
        """Sets the incident_number of this IncidentInfo.

        The VictorOps incident number

        :param incident_number: The incident_number of this IncidentInfo.
        :type incident_number: str
        """

        self._incident_number = incident_number

    @property
    def last_alert_id(self):
        """Gets the last_alert_id of this IncidentInfo.

        The unique id of the last alert for the incident

        :return: The last_alert_id of this IncidentInfo.
        :rtype: str
        """
        return self._last_alert_id

    @last_alert_id.setter
    def last_alert_id(self, last_alert_id):
        """Sets the last_alert_id of this IncidentInfo.

        The unique id of the last alert for the incident

        :param last_alert_id: The last_alert_id of this IncidentInfo.
        :type last_alert_id: str
        """

        self._last_alert_id = last_alert_id

    @property
    def last_alert_time(self):
        """Gets the last_alert_time of this IncidentInfo.

        The time of the last alert received for the incident

        :return: The last_alert_time of this IncidentInfo.
        :rtype: str
        """
        return self._last_alert_time

    @last_alert_time.setter
    def last_alert_time(self, last_alert_time):
        """Sets the last_alert_time of this IncidentInfo.

        The time of the last alert received for the incident

        :param last_alert_time: The last_alert_time of this IncidentInfo.
        :type last_alert_time: str
        """

        self._last_alert_time = last_alert_time

    @property
    def service(self):
        """Gets the service of this IncidentInfo.

        The service name causing the incident (if any)

        :return: The service of this IncidentInfo.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this IncidentInfo.

        The service name causing the incident (if any)

        :param service: The service of this IncidentInfo.
        :type service: str
        """

        self._service = service

    @property
    def start_time(self):
        """Gets the start_time of this IncidentInfo.

        The time the incident started

        :return: The start_time of this IncidentInfo.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this IncidentInfo.

        The time the incident started

        :param start_time: The start_time of this IncidentInfo.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def teams(self):
        """Gets the teams of this IncidentInfo.

        The teams that were paged for the incident (comma separated).

        :return: The teams of this IncidentInfo.
        :rtype: str
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this IncidentInfo.

        The teams that were paged for the incident (comma separated).

        :param teams: The teams of this IncidentInfo.
        :type teams: str
        """

        self._teams = teams
