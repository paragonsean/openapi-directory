# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.escalation_policy_info import EscalationPolicyInfo
from openapi_server.models.incident_transition import IncidentTransition
from openapi_server import util


class ActiveIncidentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_count: float=None, current_phase: str=None, entity_id: str=None, host: str=None, incident_number: str=None, last_alert_id: str=None, last_alert_time: str=None, paged_policies: List[EscalationPolicyInfo]=None, paged_teams: List[str]=None, paged_users: List[str]=None, service: str=None, start_time: str=None, transitions: List[IncidentTransition]=None):
        """ActiveIncidentInfo - a model defined in OpenAPI

        :param alert_count: The alert_count of this ActiveIncidentInfo.
        :param current_phase: The current_phase of this ActiveIncidentInfo.
        :param entity_id: The entity_id of this ActiveIncidentInfo.
        :param host: The host of this ActiveIncidentInfo.
        :param incident_number: The incident_number of this ActiveIncidentInfo.
        :param last_alert_id: The last_alert_id of this ActiveIncidentInfo.
        :param last_alert_time: The last_alert_time of this ActiveIncidentInfo.
        :param paged_policies: The paged_policies of this ActiveIncidentInfo.
        :param paged_teams: The paged_teams of this ActiveIncidentInfo.
        :param paged_users: The paged_users of this ActiveIncidentInfo.
        :param service: The service of this ActiveIncidentInfo.
        :param start_time: The start_time of this ActiveIncidentInfo.
        :param transitions: The transitions of this ActiveIncidentInfo.
        """
        self.openapi_types = {
            'alert_count': float,
            'current_phase': str,
            'entity_id': str,
            'host': str,
            'incident_number': str,
            'last_alert_id': str,
            'last_alert_time': str,
            'paged_policies': List[EscalationPolicyInfo],
            'paged_teams': List[str],
            'paged_users': List[str],
            'service': str,
            'start_time': str,
            'transitions': List[IncidentTransition]
        }

        self.attribute_map = {
            'alert_count': 'alertCount',
            'current_phase': 'currentPhase',
            'entity_id': 'entityId',
            'host': 'host',
            'incident_number': 'incidentNumber',
            'last_alert_id': 'lastAlertId',
            'last_alert_time': 'lastAlertTime',
            'paged_policies': 'pagedPolicies',
            'paged_teams': 'pagedTeams',
            'paged_users': 'pagedUsers',
            'service': 'service',
            'start_time': 'startTime',
            'transitions': 'transitions'
        }

        self._alert_count = alert_count
        self._current_phase = current_phase
        self._entity_id = entity_id
        self._host = host
        self._incident_number = incident_number
        self._last_alert_id = last_alert_id
        self._last_alert_time = last_alert_time
        self._paged_policies = paged_policies
        self._paged_teams = paged_teams
        self._paged_users = paged_users
        self._service = service
        self._start_time = start_time
        self._transitions = transitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActiveIncidentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActiveIncidentInfo of this ActiveIncidentInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_count(self):
        """Gets the alert_count of this ActiveIncidentInfo.

        The number of alerts received for this incident

        :return: The alert_count of this ActiveIncidentInfo.
        :rtype: float
        """
        return self._alert_count

    @alert_count.setter
    def alert_count(self, alert_count):
        """Sets the alert_count of this ActiveIncidentInfo.

        The number of alerts received for this incident

        :param alert_count: The alert_count of this ActiveIncidentInfo.
        :type alert_count: float
        """

        self._alert_count = alert_count

    @property
    def current_phase(self):
        """Gets the current_phase of this ActiveIncidentInfo.

        The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\".

        :return: The current_phase of this ActiveIncidentInfo.
        :rtype: str
        """
        return self._current_phase

    @current_phase.setter
    def current_phase(self, current_phase):
        """Sets the current_phase of this ActiveIncidentInfo.

        The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\".

        :param current_phase: The current_phase of this ActiveIncidentInfo.
        :type current_phase: str
        """

        self._current_phase = current_phase

    @property
    def entity_id(self):
        """Gets the entity_id of this ActiveIncidentInfo.

        The unique identification of the entity being monitored that caused the incident

        :return: The entity_id of this ActiveIncidentInfo.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ActiveIncidentInfo.

        The unique identification of the entity being monitored that caused the incident

        :param entity_id: The entity_id of this ActiveIncidentInfo.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def host(self):
        """Gets the host of this ActiveIncidentInfo.

        The host on which the incident occurred

        :return: The host of this ActiveIncidentInfo.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ActiveIncidentInfo.

        The host on which the incident occurred

        :param host: The host of this ActiveIncidentInfo.
        :type host: str
        """

        self._host = host

    @property
    def incident_number(self):
        """Gets the incident_number of this ActiveIncidentInfo.

        The VictorOps incident number

        :return: The incident_number of this ActiveIncidentInfo.
        :rtype: str
        """
        return self._incident_number

    @incident_number.setter
    def incident_number(self, incident_number):
        """Sets the incident_number of this ActiveIncidentInfo.

        The VictorOps incident number

        :param incident_number: The incident_number of this ActiveIncidentInfo.
        :type incident_number: str
        """

        self._incident_number = incident_number

    @property
    def last_alert_id(self):
        """Gets the last_alert_id of this ActiveIncidentInfo.

        The unique id of the last alert for the incident

        :return: The last_alert_id of this ActiveIncidentInfo.
        :rtype: str
        """
        return self._last_alert_id

    @last_alert_id.setter
    def last_alert_id(self, last_alert_id):
        """Sets the last_alert_id of this ActiveIncidentInfo.

        The unique id of the last alert for the incident

        :param last_alert_id: The last_alert_id of this ActiveIncidentInfo.
        :type last_alert_id: str
        """

        self._last_alert_id = last_alert_id

    @property
    def last_alert_time(self):
        """Gets the last_alert_time of this ActiveIncidentInfo.

        The time of the last alert received for the incident

        :return: The last_alert_time of this ActiveIncidentInfo.
        :rtype: str
        """
        return self._last_alert_time

    @last_alert_time.setter
    def last_alert_time(self, last_alert_time):
        """Sets the last_alert_time of this ActiveIncidentInfo.

        The time of the last alert received for the incident

        :param last_alert_time: The last_alert_time of this ActiveIncidentInfo.
        :type last_alert_time: str
        """

        self._last_alert_time = last_alert_time

    @property
    def paged_policies(self):
        """Gets the paged_policies of this ActiveIncidentInfo.

        The escalation policies that were triggered for the incident

        :return: The paged_policies of this ActiveIncidentInfo.
        :rtype: List[EscalationPolicyInfo]
        """
        return self._paged_policies

    @paged_policies.setter
    def paged_policies(self, paged_policies):
        """Sets the paged_policies of this ActiveIncidentInfo.

        The escalation policies that were triggered for the incident

        :param paged_policies: The paged_policies of this ActiveIncidentInfo.
        :type paged_policies: List[EscalationPolicyInfo]
        """

        self._paged_policies = paged_policies

    @property
    def paged_teams(self):
        """Gets the paged_teams of this ActiveIncidentInfo.

        The teams that were paged for the incident

        :return: The paged_teams of this ActiveIncidentInfo.
        :rtype: List[str]
        """
        return self._paged_teams

    @paged_teams.setter
    def paged_teams(self, paged_teams):
        """Sets the paged_teams of this ActiveIncidentInfo.

        The teams that were paged for the incident

        :param paged_teams: The paged_teams of this ActiveIncidentInfo.
        :type paged_teams: List[str]
        """

        self._paged_teams = paged_teams

    @property
    def paged_users(self):
        """Gets the paged_users of this ActiveIncidentInfo.

        The users that were paged for the incident.

        :return: The paged_users of this ActiveIncidentInfo.
        :rtype: List[str]
        """
        return self._paged_users

    @paged_users.setter
    def paged_users(self, paged_users):
        """Sets the paged_users of this ActiveIncidentInfo.

        The users that were paged for the incident.

        :param paged_users: The paged_users of this ActiveIncidentInfo.
        :type paged_users: List[str]
        """

        self._paged_users = paged_users

    @property
    def service(self):
        """Gets the service of this ActiveIncidentInfo.

        The service name causing the incident (if any)

        :return: The service of this ActiveIncidentInfo.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ActiveIncidentInfo.

        The service name causing the incident (if any)

        :param service: The service of this ActiveIncidentInfo.
        :type service: str
        """

        self._service = service

    @property
    def start_time(self):
        """Gets the start_time of this ActiveIncidentInfo.

        The time the incident started

        :return: The start_time of this ActiveIncidentInfo.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ActiveIncidentInfo.

        The time the incident started

        :param start_time: The start_time of this ActiveIncidentInfo.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def transitions(self):
        """Gets the transitions of this ActiveIncidentInfo.

        Transitions of the incident state over time

        :return: The transitions of this ActiveIncidentInfo.
        :rtype: List[IncidentTransition]
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this ActiveIncidentInfo.

        Transitions of the incident state over time

        :param transitions: The transitions of this ActiveIncidentInfo.
        :type transitions: List[IncidentTransition]
        """

        self._transitions = transitions
