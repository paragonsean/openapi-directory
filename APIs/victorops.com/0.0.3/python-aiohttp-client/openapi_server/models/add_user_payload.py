# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddUserPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: bool=None, email: str=None, expiration_hours: float=None, first_name: str=None, last_name: str=None, username: str=None):
        """AddUserPayload - a model defined in OpenAPI

        :param admin: The admin of this AddUserPayload.
        :param email: The email of this AddUserPayload.
        :param expiration_hours: The expiration_hours of this AddUserPayload.
        :param first_name: The first_name of this AddUserPayload.
        :param last_name: The last_name of this AddUserPayload.
        :param username: The username of this AddUserPayload.
        """
        self.openapi_types = {
            'admin': bool,
            'email': str,
            'expiration_hours': float,
            'first_name': str,
            'last_name': str,
            'username': str
        }

        self.attribute_map = {
            'admin': 'admin',
            'email': 'email',
            'expiration_hours': 'expirationHours',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'username': 'username'
        }

        self._admin = admin
        self._email = email
        self._expiration_hours = expiration_hours
        self._first_name = first_name
        self._last_name = last_name
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddUserPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddUserPayload of this AddUserPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this AddUserPayload.


        :return: The admin of this AddUserPayload.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this AddUserPayload.


        :param admin: The admin of this AddUserPayload.
        :type admin: bool
        """

        self._admin = admin

    @property
    def email(self):
        """Gets the email of this AddUserPayload.


        :return: The email of this AddUserPayload.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AddUserPayload.


        :param email: The email of this AddUserPayload.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def expiration_hours(self):
        """Gets the expiration_hours of this AddUserPayload.

        The validity duration for the invitatation/set password link sent to the added user.

        :return: The expiration_hours of this AddUserPayload.
        :rtype: float
        """
        return self._expiration_hours

    @expiration_hours.setter
    def expiration_hours(self, expiration_hours):
        """Sets the expiration_hours of this AddUserPayload.

        The validity duration for the invitatation/set password link sent to the added user.

        :param expiration_hours: The expiration_hours of this AddUserPayload.
        :type expiration_hours: float
        """

        self._expiration_hours = expiration_hours

    @property
    def first_name(self):
        """Gets the first_name of this AddUserPayload.


        :return: The first_name of this AddUserPayload.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AddUserPayload.


        :param first_name: The first_name of this AddUserPayload.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this AddUserPayload.


        :return: The last_name of this AddUserPayload.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AddUserPayload.


        :param last_name: The last_name of this AddUserPayload.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def username(self):
        """Gets the username of this AddUserPayload.


        :return: The username of this AddUserPayload.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AddUserPayload.


        :param username: The username of this AddUserPayload.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
