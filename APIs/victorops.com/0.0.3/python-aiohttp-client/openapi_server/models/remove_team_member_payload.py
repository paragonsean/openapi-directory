# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoveTeamMemberPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, replacement: str=None):
        """RemoveTeamMemberPayload - a model defined in OpenAPI

        :param replacement: The replacement of this RemoveTeamMemberPayload.
        """
        self.openapi_types = {
            'replacement': str
        }

        self.attribute_map = {
            'replacement': 'replacement'
        }

        self._replacement = replacement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveTeamMemberPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveTeamMemberPayload of this RemoveTeamMemberPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def replacement(self):
        """Gets the replacement of this RemoveTeamMemberPayload.


        :return: The replacement of this RemoveTeamMemberPayload.
        :rtype: str
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement):
        """Sets the replacement of this RemoveTeamMemberPayload.


        :param replacement: The replacement of this RemoveTeamMemberPayload.
        :type replacement: str
        """
        if replacement is None:
            raise ValueError("Invalid value for `replacement`, must not be `None`")

        self._replacement = replacement
