# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactEmailAdd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, label: str=None, rank: int=None):
        """ContactEmailAdd - a model defined in OpenAPI

        :param email: The email of this ContactEmailAdd.
        :param label: The label of this ContactEmailAdd.
        :param rank: The rank of this ContactEmailAdd.
        """
        self.openapi_types = {
            'email': str,
            'label': str,
            'rank': int
        }

        self.attribute_map = {
            'email': 'email',
            'label': 'label',
            'rank': 'rank'
        }

        self._email = email
        self._label = label
        self._rank = rank

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactEmailAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactEmailAdd of this ContactEmailAdd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this ContactEmailAdd.


        :return: The email of this ContactEmailAdd.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactEmailAdd.


        :param email: The email of this ContactEmailAdd.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def label(self):
        """Gets the label of this ContactEmailAdd.


        :return: The label of this ContactEmailAdd.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ContactEmailAdd.


        :param label: The label of this ContactEmailAdd.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def rank(self):
        """Gets the rank of this ContactEmailAdd.


        :return: The rank of this ContactEmailAdd.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this ContactEmailAdd.


        :param rank: The rank of this ContactEmailAdd.
        :type rank: int
        """

        self._rank = rank
