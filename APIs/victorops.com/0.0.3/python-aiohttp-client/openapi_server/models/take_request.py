# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TakeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_user: str=None, to_user: str=None):
        """TakeRequest - a model defined in OpenAPI

        :param from_user: The from_user of this TakeRequest.
        :param to_user: The to_user of this TakeRequest.
        """
        self.openapi_types = {
            'from_user': str,
            'to_user': str
        }

        self.attribute_map = {
            'from_user': 'fromUser',
            'to_user': 'toUser'
        }

        self._from_user = from_user
        self._to_user = to_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TakeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TakeRequest of this TakeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_user(self):
        """Gets the from_user of this TakeRequest.


        :return: The from_user of this TakeRequest.
        :rtype: str
        """
        return self._from_user

    @from_user.setter
    def from_user(self, from_user):
        """Sets the from_user of this TakeRequest.


        :param from_user: The from_user of this TakeRequest.
        :type from_user: str
        """
        if from_user is None:
            raise ValueError("Invalid value for `from_user`, must not be `None`")

        self._from_user = from_user

    @property
    def to_user(self):
        """Gets the to_user of this TakeRequest.


        :return: The to_user of this TakeRequest.
        :rtype: str
        """
        return self._to_user

    @to_user.setter
    def to_user(self, to_user):
        """Sets the to_user of this TakeRequest.


        :param to_user: The to_user of this TakeRequest.
        :type to_user: str
        """
        if to_user is None:
            raise ValueError("Invalid value for `to_user`, must not be `None`")

        self._to_user = to_user
