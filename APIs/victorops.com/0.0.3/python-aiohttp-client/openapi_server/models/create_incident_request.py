# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.incident_target import IncidentTarget
from openapi_server import util


class CreateIncidentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, summary: str=None, targets: List[IncidentTarget]=None, user_name: str=None):
        """CreateIncidentRequest - a model defined in OpenAPI

        :param details: The details of this CreateIncidentRequest.
        :param summary: The summary of this CreateIncidentRequest.
        :param targets: The targets of this CreateIncidentRequest.
        :param user_name: The user_name of this CreateIncidentRequest.
        """
        self.openapi_types = {
            'details': str,
            'summary': str,
            'targets': List[IncidentTarget],
            'user_name': str
        }

        self.attribute_map = {
            'details': 'details',
            'summary': 'summary',
            'targets': 'targets',
            'user_name': 'userName'
        }

        self._details = details
        self._summary = summary
        self._targets = targets
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateIncidentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateIncidentRequest of this CreateIncidentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this CreateIncidentRequest.


        :return: The details of this CreateIncidentRequest.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this CreateIncidentRequest.


        :param details: The details of this CreateIncidentRequest.
        :type details: str
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")

        self._details = details

    @property
    def summary(self):
        """Gets the summary of this CreateIncidentRequest.


        :return: The summary of this CreateIncidentRequest.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CreateIncidentRequest.


        :param summary: The summary of this CreateIncidentRequest.
        :type summary: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary

    @property
    def targets(self):
        """Gets the targets of this CreateIncidentRequest.


        :return: The targets of this CreateIncidentRequest.
        :rtype: List[IncidentTarget]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this CreateIncidentRequest.


        :param targets: The targets of this CreateIncidentRequest.
        :type targets: List[IncidentTarget]
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets

    @property
    def user_name(self):
        """Gets the user_name of this CreateIncidentRequest.


        :return: The user_name of this CreateIncidentRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this CreateIncidentRequest.


        :param user_name: The user_name of this CreateIncidentRequest.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name
