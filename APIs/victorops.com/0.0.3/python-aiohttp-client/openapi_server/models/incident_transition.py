# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IncidentTransition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_id: str=None, alert_url: str=None, at: str=None, by: str=None, manually: bool=None, message: str=None, name: str=None):
        """IncidentTransition - a model defined in OpenAPI

        :param alert_id: The alert_id of this IncidentTransition.
        :param alert_url: The alert_url of this IncidentTransition.
        :param at: The at of this IncidentTransition.
        :param by: The by of this IncidentTransition.
        :param manually: The manually of this IncidentTransition.
        :param message: The message of this IncidentTransition.
        :param name: The name of this IncidentTransition.
        """
        self.openapi_types = {
            'alert_id': str,
            'alert_url': str,
            'at': str,
            'by': str,
            'manually': bool,
            'message': str,
            'name': str
        }

        self.attribute_map = {
            'alert_id': 'alertId',
            'alert_url': 'alertUrl',
            'at': 'at',
            'by': 'by',
            'manually': 'manually',
            'message': 'message',
            'name': 'name'
        }

        self._alert_id = alert_id
        self._alert_url = alert_url
        self._at = at
        self._by = by
        self._manually = manually
        self._message = message
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IncidentTransition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IncidentTransition of this IncidentTransition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_id(self):
        """Gets the alert_id of this IncidentTransition.

        The unique alert ID that caused the transition

        :return: The alert_id of this IncidentTransition.
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this IncidentTransition.

        The unique alert ID that caused the transition

        :param alert_id: The alert_id of this IncidentTransition.
        :type alert_id: str
        """

        self._alert_id = alert_id

    @property
    def alert_url(self):
        """Gets the alert_url of this IncidentTransition.

        A URL to retrieve the details of the alert that caused the transition

        :return: The alert_url of this IncidentTransition.
        :rtype: str
        """
        return self._alert_url

    @alert_url.setter
    def alert_url(self, alert_url):
        """Sets the alert_url of this IncidentTransition.

        A URL to retrieve the details of the alert that caused the transition

        :param alert_url: The alert_url of this IncidentTransition.
        :type alert_url: str
        """

        self._alert_url = alert_url

    @property
    def at(self):
        """Gets the at of this IncidentTransition.

        The time of the transition

        :return: The at of this IncidentTransition.
        :rtype: str
        """
        return self._at

    @at.setter
    def at(self, at):
        """Sets the at of this IncidentTransition.

        The time of the transition

        :param at: The at of this IncidentTransition.
        :type at: str
        """

        self._at = at

    @property
    def by(self):
        """Gets the by of this IncidentTransition.

        The user that caused the transition (if any)

        :return: The by of this IncidentTransition.
        :rtype: str
        """
        return self._by

    @by.setter
    def by(self, by):
        """Sets the by of this IncidentTransition.

        The user that caused the transition (if any)

        :param by: The by of this IncidentTransition.
        :type by: str
        """

        self._by = by

    @property
    def manually(self):
        """Gets the manually of this IncidentTransition.

        If the incident transition was caused by a person

        :return: The manually of this IncidentTransition.
        :rtype: bool
        """
        return self._manually

    @manually.setter
    def manually(self, manually):
        """Sets the manually of this IncidentTransition.

        If the incident transition was caused by a person

        :param manually: The manually of this IncidentTransition.
        :type manually: bool
        """

        self._manually = manually

    @property
    def message(self):
        """Gets the message of this IncidentTransition.

        The message entered by that user (if any)

        :return: The message of this IncidentTransition.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this IncidentTransition.

        The message entered by that user (if any)

        :param message: The message of this IncidentTransition.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this IncidentTransition.

        The transition name

        :return: The name of this IncidentTransition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IncidentTransition.

        The transition name

        :param name: The name of this IncidentTransition.
        :type name: str
        """

        self._name = name
