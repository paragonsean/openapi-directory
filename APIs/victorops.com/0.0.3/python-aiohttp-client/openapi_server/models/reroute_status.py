# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reroute_target_status import RerouteTargetStatus
from openapi_server import util


class RerouteStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, incident_number: str=None, message: str=None, success: bool=None, target_status: List[RerouteTargetStatus]=None):
        """RerouteStatus - a model defined in OpenAPI

        :param incident_number: The incident_number of this RerouteStatus.
        :param message: The message of this RerouteStatus.
        :param success: The success of this RerouteStatus.
        :param target_status: The target_status of this RerouteStatus.
        """
        self.openapi_types = {
            'incident_number': str,
            'message': str,
            'success': bool,
            'target_status': List[RerouteTargetStatus]
        }

        self.attribute_map = {
            'incident_number': 'incidentNumber',
            'message': 'message',
            'success': 'success',
            'target_status': 'targetStatus'
        }

        self._incident_number = incident_number
        self._message = message
        self._success = success
        self._target_status = target_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RerouteStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RerouteStatus of this RerouteStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def incident_number(self):
        """Gets the incident_number of this RerouteStatus.


        :return: The incident_number of this RerouteStatus.
        :rtype: str
        """
        return self._incident_number

    @incident_number.setter
    def incident_number(self, incident_number):
        """Sets the incident_number of this RerouteStatus.


        :param incident_number: The incident_number of this RerouteStatus.
        :type incident_number: str
        """
        if incident_number is None:
            raise ValueError("Invalid value for `incident_number`, must not be `None`")

        self._incident_number = incident_number

    @property
    def message(self):
        """Gets the message of this RerouteStatus.


        :return: The message of this RerouteStatus.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RerouteStatus.


        :param message: The message of this RerouteStatus.
        :type message: str
        """

        self._message = message

    @property
    def success(self):
        """Gets the success of this RerouteStatus.


        :return: The success of this RerouteStatus.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this RerouteStatus.


        :param success: The success of this RerouteStatus.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success

    @property
    def target_status(self):
        """Gets the target_status of this RerouteStatus.


        :return: The target_status of this RerouteStatus.
        :rtype: List[RerouteTargetStatus]
        """
        return self._target_status

    @target_status.setter
    def target_status(self, target_status):
        """Sets the target_status of this RerouteStatus.


        :param target_status: The target_status of this RerouteStatus.
        :type target_status: List[RerouteTargetStatus]
        """
        if target_status is None:
            raise ValueError("Invalid value for `target_status`, must not be `None`")

        self._target_status = target_status
