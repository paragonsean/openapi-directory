# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.incident_target import IncidentTarget
from openapi_server import util


class Reroute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, incident_number: str=None, targets: List[IncidentTarget]=None):
        """Reroute - a model defined in OpenAPI

        :param incident_number: The incident_number of this Reroute.
        :param targets: The targets of this Reroute.
        """
        self.openapi_types = {
            'incident_number': str,
            'targets': List[IncidentTarget]
        }

        self.attribute_map = {
            'incident_number': 'incidentNumber',
            'targets': 'targets'
        }

        self._incident_number = incident_number
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Reroute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Reroute of this Reroute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def incident_number(self):
        """Gets the incident_number of this Reroute.


        :return: The incident_number of this Reroute.
        :rtype: str
        """
        return self._incident_number

    @incident_number.setter
    def incident_number(self, incident_number):
        """Sets the incident_number of this Reroute.


        :param incident_number: The incident_number of this Reroute.
        :type incident_number: str
        """
        if incident_number is None:
            raise ValueError("Invalid value for `incident_number`, must not be `None`")

        self._incident_number = incident_number

    @property
    def targets(self):
        """Gets the targets of this Reroute.


        :return: The targets of this Reroute.
        :rtype: List[IncidentTarget]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this Reroute.


        :param targets: The targets of this Reroute.
        :type targets: List[IncidentTarget]
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets
