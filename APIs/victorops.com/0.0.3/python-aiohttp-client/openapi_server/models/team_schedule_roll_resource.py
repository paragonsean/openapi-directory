# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamScheduleRollResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change: float=None, is_roll: bool=None, oncall: str=None, until: float=None):
        """TeamScheduleRollResource - a model defined in OpenAPI

        :param change: The change of this TeamScheduleRollResource.
        :param is_roll: The is_roll of this TeamScheduleRollResource.
        :param oncall: The oncall of this TeamScheduleRollResource.
        :param until: The until of this TeamScheduleRollResource.
        """
        self.openapi_types = {
            'change': float,
            'is_roll': bool,
            'oncall': str,
            'until': float
        }

        self.attribute_map = {
            'change': 'change',
            'is_roll': 'isRoll',
            'oncall': 'oncall',
            'until': 'until'
        }

        self._change = change
        self._is_roll = is_roll
        self._oncall = oncall
        self._until = until

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamScheduleRollResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TeamScheduleRollResource of this TeamScheduleRollResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change(self):
        """Gets the change of this TeamScheduleRollResource.

        The time the period is scheduled to start

        :return: The change of this TeamScheduleRollResource.
        :rtype: float
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this TeamScheduleRollResource.

        The time the period is scheduled to start

        :param change: The change of this TeamScheduleRollResource.
        :type change: float
        """
        if change is None:
            raise ValueError("Invalid value for `change`, must not be `None`")

        self._change = change

    @property
    def is_roll(self):
        """Gets the is_roll of this TeamScheduleRollResource.


        :return: The is_roll of this TeamScheduleRollResource.
        :rtype: bool
        """
        return self._is_roll

    @is_roll.setter
    def is_roll(self, is_roll):
        """Sets the is_roll of this TeamScheduleRollResource.


        :param is_roll: The is_roll of this TeamScheduleRollResource.
        :type is_roll: bool
        """
        if is_roll is None:
            raise ValueError("Invalid value for `is_roll`, must not be `None`")

        self._is_roll = is_roll

    @property
    def oncall(self):
        """Gets the oncall of this TeamScheduleRollResource.

        The user scheduled on call (if any)

        :return: The oncall of this TeamScheduleRollResource.
        :rtype: str
        """
        return self._oncall

    @oncall.setter
    def oncall(self, oncall):
        """Sets the oncall of this TeamScheduleRollResource.

        The user scheduled on call (if any)

        :param oncall: The oncall of this TeamScheduleRollResource.
        :type oncall: str
        """

        self._oncall = oncall

    @property
    def until(self):
        """Gets the until of this TeamScheduleRollResource.

        The time the period is scheduled to end

        :return: The until of this TeamScheduleRollResource.
        :rtype: float
        """
        return self._until

    @until.setter
    def until(self, until):
        """Sets the until of this TeamScheduleRollResource.

        The time the period is scheduled to end

        :param until: The until of this TeamScheduleRollResource.
        :type until: float
        """
        if until is None:
            raise ValueError("Invalid value for `until`, must not be `None`")

        self._until = until
