/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VictorOps);
  }
}(this, function(expect, VictorOps) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VictorOps.OnCallEntry();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OnCallEntry', function() {
    it('should create an instance of OnCallEntry', function() {
      // uncomment below and update the code to test OnCallEntry
      //var instance = new VictorOps.OnCallEntry();
      //expect(instance).to.be.a(VictorOps.OnCallEntry);
    });

    it('should have the property onCallType (base name: "onCallType")', function() {
      // uncomment below and update the code to test the property onCallType
      //var instance = new VictorOps.OnCallEntry();
      //expect(instance).to.be();
    });

    it('should have the property onCallUser (base name: "onCallUser")', function() {
      // uncomment below and update the code to test the property onCallUser
      //var instance = new VictorOps.OnCallEntry();
      //expect(instance).to.be();
    });

    it('should have the property overrideOnCallUser (base name: "overrideOnCallUser")', function() {
      // uncomment below and update the code to test the property overrideOnCallUser
      //var instance = new VictorOps.OnCallEntry();
      //expect(instance).to.be();
    });

    it('should have the property rolls (base name: "rolls")', function() {
      // uncomment below and update the code to test the property rolls
      //var instance = new VictorOps.OnCallEntry();
      //expect(instance).to.be();
    });

    it('should have the property rotationName (base name: "rotationName")', function() {
      // uncomment below and update the code to test the property rotationName
      //var instance = new VictorOps.OnCallEntry();
      //expect(instance).to.be();
    });

    it('should have the property shiftName (base name: "shiftName")', function() {
      // uncomment below and update the code to test the property shiftName
      //var instance = new VictorOps.OnCallEntry();
      //expect(instance).to.be();
    });

    it('should have the property shiftRoll (base name: "shiftRoll")', function() {
      // uncomment below and update the code to test the property shiftRoll
      //var instance = new VictorOps.OnCallEntry();
      //expect(instance).to.be();
    });

  });

}));
