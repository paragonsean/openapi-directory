/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VictorOps);
  }
}(this, function(expect, VictorOps) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VictorOps.IncidentInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IncidentInfo', function() {
    it('should create an instance of IncidentInfo', function() {
      // uncomment below and update the code to test IncidentInfo
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be.a(VictorOps.IncidentInfo);
    });

    it('should have the property ackTime (base name: "ackTime")', function() {
      // uncomment below and update the code to test the property ackTime
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property ackUser (base name: "ackUser")', function() {
      // uncomment below and update the code to test the property ackUser
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property ackUserId (base name: "ackUserId")', function() {
      // uncomment below and update the code to test the property ackUserId
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property alertCount (base name: "alertCount")', function() {
      // uncomment below and update the code to test the property alertCount
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property currentPhase (base name: "currentPhase")', function() {
      // uncomment below and update the code to test the property currentPhase
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "endTime")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property entityDispName (base name: "entityDispName")', function() {
      // uncomment below and update the code to test the property entityDispName
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property entityId (base name: "entityId")', function() {
      // uncomment below and update the code to test the property entityId
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property entityType (base name: "entityType")', function() {
      // uncomment below and update the code to test the property entityType
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property host (base name: "host")', function() {
      // uncomment below and update the code to test the property host
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property incidentNumber (base name: "incidentNumber")', function() {
      // uncomment below and update the code to test the property incidentNumber
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property lastAlertID (base name: "lastAlertID")', function() {
      // uncomment below and update the code to test the property lastAlertID
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property lastAlertTime (base name: "lastAlertTime")', function() {
      // uncomment below and update the code to test the property lastAlertTime
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property service (base name: "service")', function() {
      // uncomment below and update the code to test the property service
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

    it('should have the property teams (base name: "teams")', function() {
      // uncomment below and update the code to test the property teams
      //var instance = new VictorOps.IncidentInfo();
      //expect(instance).to.be();
    });

  });

}));
