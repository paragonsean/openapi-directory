/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiPublicV1UserUserContactMethodsGet200Response from '../model/ApiPublicV1UserUserContactMethodsGet200Response';
import ContactDevice from '../model/ContactDevice';
import ContactDeviceAdd from '../model/ContactDeviceAdd';
import ContactEmailAdd from '../model/ContactEmailAdd';
import ContactPhoneAdd from '../model/ContactPhoneAdd';
import UserContact from '../model/UserContact';

/**
* UserContactMethods service.
* @module api/UserContactMethodsApi
* @version 0.0.3
*/
export default class UserContactMethodsApi {

    /**
    * Constructs a new UserContactMethodsApi. 
    * @alias module:api/UserContactMethodsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsDevicesContactIdDelete operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsDevicesContactIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactDevice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a contact device for a user
     * Delete a contact device for a user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {String} contactId The unique contact identifier
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsDevicesContactIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactDevice}
     */
    apiPublicV1UserUserContactMethodsDevicesContactIdDelete(xVOApiId, xVOApiKey, user, contactId, callback) {
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsDevicesContactIdDelete");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsDevicesContactIdDelete");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsDevicesContactIdDelete");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsDevicesContactIdDelete");
      }

      let pathParams = {
        'user': user,
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactDevice;
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods/devices/{contactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsDevicesContactIdGet operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsDevicesContactIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactDevice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the indicated contact device for a user
     * Get the indicated contact device for a user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {String} contactId The unique contact identifier
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsDevicesContactIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactDevice>}
     */
    apiPublicV1UserUserContactMethodsDevicesContactIdGet(xVOApiId, xVOApiKey, user, contactId, callback) {
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsDevicesContactIdGet");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsDevicesContactIdGet");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsDevicesContactIdGet");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsDevicesContactIdGet");
      }

      let pathParams = {
        'user': user,
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContactDevice];
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods/devices/{contactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsDevicesContactIdPut operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsDevicesContactIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactDevice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a contact device for a user
     * Update a contact device for a user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {String} contactId The unique contact identifier
     * @param {module:model/ContactDeviceAdd} body The contact device
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsDevicesContactIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactDevice}
     */
    apiPublicV1UserUserContactMethodsDevicesContactIdPut(xVOApiId, xVOApiKey, user, contactId, body, callback) {
      let postBody = body;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsDevicesContactIdPut");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsDevicesContactIdPut");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsDevicesContactIdPut");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsDevicesContactIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiPublicV1UserUserContactMethodsDevicesContactIdPut");
      }

      let pathParams = {
        'user': user,
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactDevice;
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods/devices/{contactId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsDevicesGet operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsDevicesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactDevice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all contact devices for a user
     * Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsDevicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactDevice>}
     */
    apiPublicV1UserUserContactMethodsDevicesGet(xVOApiId, xVOApiKey, user, callback) {
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsDevicesGet");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsDevicesGet");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsDevicesGet");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContactDevice];
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsEmailsContactIdDelete operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsEmailsContactIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a contact email for a user
     * Delete the indicated contact email for the user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {String} contactId The unique contact identifier
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsEmailsContactIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserContact}
     */
    apiPublicV1UserUserContactMethodsEmailsContactIdDelete(xVOApiId, xVOApiKey, user, contactId, callback) {
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsEmailsContactIdDelete");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsEmailsContactIdDelete");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsEmailsContactIdDelete");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsEmailsContactIdDelete");
      }

      let pathParams = {
        'user': user,
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserContact;
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods/emails/{contactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsEmailsContactIdGet operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsEmailsContactIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserContact>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the indicated contact email for a user
     * Get the indicated contact email for a user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {String} contactId The unique contact identifier
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsEmailsContactIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserContact>}
     */
    apiPublicV1UserUserContactMethodsEmailsContactIdGet(xVOApiId, xVOApiKey, user, contactId, callback) {
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsEmailsContactIdGet");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsEmailsContactIdGet");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsEmailsContactIdGet");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsEmailsContactIdGet");
      }

      let pathParams = {
        'user': user,
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserContact];
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods/emails/{contactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsEmailsGet operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsEmailsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserContact>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all contact emails for a user
     * Get the contact emails for a user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsEmailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserContact>}
     */
    apiPublicV1UserUserContactMethodsEmailsGet(xVOApiId, xVOApiKey, user, callback) {
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsEmailsGet");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsEmailsGet");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsEmailsGet");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserContact];
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods/emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsEmailsPost operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsEmailsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a contact emails for a user
     * Create a contact email for a user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {module:model/ContactEmailAdd} body The contact email
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsEmailsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserContact}
     */
    apiPublicV1UserUserContactMethodsEmailsPost(xVOApiId, xVOApiKey, user, body, callback) {
      let postBody = body;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsEmailsPost");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsEmailsPost");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsEmailsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiPublicV1UserUserContactMethodsEmailsPost");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserContact;
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods/emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsGet operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiPublicV1UserUserContactMethodsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all contact methods for a user
     * Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiPublicV1UserUserContactMethodsGet200Response}
     */
    apiPublicV1UserUserContactMethodsGet(xVOApiId, xVOApiKey, user, callback) {
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsGet");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsGet");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsGet");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiPublicV1UserUserContactMethodsGet200Response;
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsPhonesContactIdDelete operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsPhonesContactIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a contact phone for a user
     * Delete the indicated contact phone for the user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {String} contactId The unique contact identifier
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsPhonesContactIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserContact}
     */
    apiPublicV1UserUserContactMethodsPhonesContactIdDelete(xVOApiId, xVOApiKey, user, contactId, callback) {
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsPhonesContactIdDelete");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsPhonesContactIdDelete");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsPhonesContactIdDelete");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsPhonesContactIdDelete");
      }

      let pathParams = {
        'user': user,
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserContact;
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods/phones/{contactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsPhonesContactIdGet operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsPhonesContactIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserContact>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the indicated contact phone for a user
     * Get the indicated contact phone for a user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {String} contactId The unique contact identifier
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsPhonesContactIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserContact>}
     */
    apiPublicV1UserUserContactMethodsPhonesContactIdGet(xVOApiId, xVOApiKey, user, contactId, callback) {
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsPhonesContactIdGet");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsPhonesContactIdGet");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsPhonesContactIdGet");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsPhonesContactIdGet");
      }

      let pathParams = {
        'user': user,
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserContact];
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods/phones/{contactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsPhonesGet operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsPhonesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserContact>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all contact phones for a user
     * Get the contact phones for a user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsPhonesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserContact>}
     */
    apiPublicV1UserUserContactMethodsPhonesGet(xVOApiId, xVOApiKey, user, callback) {
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsPhonesGet");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsPhonesGet");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsPhonesGet");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserContact];
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods/phones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1UserUserContactMethodsPhonesPost operation.
     * @callback module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsPhonesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a contact phones for a user
     * Create a contact phone for a user  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} user The VictorOps user ID
     * @param {module:model/ContactPhoneAdd} body The contact phone
     * @param {module:api/UserContactMethodsApi~apiPublicV1UserUserContactMethodsPhonesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserContact}
     */
    apiPublicV1UserUserContactMethodsPhonesPost(xVOApiId, xVOApiKey, user, body, callback) {
      let postBody = body;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsPhonesPost");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsPhonesPost");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsPhonesPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiPublicV1UserUserContactMethodsPhonesPost");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserContact;
      return this.apiClient.callApi(
        '/api-public/v1/user/{user}/contact-methods/phones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
