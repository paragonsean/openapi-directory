/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActiveIncidentList from '../model/ActiveIncidentList';
import IncidentList from '../model/IncidentList';
import OnCallLog from '../model/OnCallLog';

/**
* Reporting service.
* @module api/ReportingApi
* @version 0.0.3
*/
export default class ReportingApi {

    /**
    * Constructs a new ReportingApi. 
    * @alias module:api/ReportingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiReportingV1IncidentsGet operation.
     * @callback module:api/ReportingApi~apiReportingV1IncidentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IncidentList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get/search incident history
     *  __NOTE: This call is deprecated. Please use `GET /api-reporting/v2/incidents`.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as 'total'. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0.0)] The offset within the set of matching incidents
     * @param {Number} [limit = 20.0)] The maximum number of matching incidents to return (100 max)
     * @param {String} [entityId] The entity ID involved  This is the unique identifier for the entity causing the incident.
     * @param {String} [incidentNumber] The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 
     * @param {String} [startedAfter] Return incidents started after this timestamp Specify the timestamp in ISO8601 format
     * @param {String} [startedBefore] Find incidents started before this timestamp  Specify the timestamp in ISO8601 format
     * @param {String} [host] The host involved in the incident Multiple values can be separated with commas.
     * @param {String} [service] The service involved in the incident (if any) Multiple values can be separated with commas.
     * @param {String} [currentPhase] The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas.
     * @param {module:api/ReportingApi~apiReportingV1IncidentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IncidentList>}
     */
    apiReportingV1IncidentsGet(xVOApiId, xVOApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiReportingV1IncidentsGet");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiReportingV1IncidentsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'entityId': opts['entityId'],
        'incidentNumber': opts['incidentNumber'],
        'startedAfter': opts['startedAfter'],
        'startedBefore': opts['startedBefore'],
        'host': opts['host'],
        'service': opts['service'],
        'currentPhase': opts['currentPhase']
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IncidentList];
      return this.apiClient.callApi(
        '/api-reporting/v1/incidents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiReportingV1TeamTeamOncallLogGet operation.
     * @callback module:api/ReportingApi~apiReportingV1TeamTeamOncallLogGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnCallLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of shift changes for a team
     * Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {String} team The VictorOps team 'slug'
     * @param {Object} opts Optional parameters
     * @param {Date} [start] Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format
     * @param {Date} [end] Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format
     * @param {String} [userName] The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned
     * @param {module:api/ReportingApi~apiReportingV1TeamTeamOncallLogGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnCallLog}
     */
    apiReportingV1TeamTeamOncallLogGet(xVOApiId, xVOApiKey, team, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiReportingV1TeamTeamOncallLogGet");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiReportingV1TeamTeamOncallLogGet");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling apiReportingV1TeamTeamOncallLogGet");
      }

      let pathParams = {
        'team': team
      };
      let queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'userName': opts['userName']
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OnCallLog;
      return this.apiClient.callApi(
        '/api-reporting/v1/team/{team}/oncall/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiReportingV2IncidentsGet operation.
     * @callback module:api/ReportingApi~apiReportingV2IncidentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveIncidentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get/search incident history
     * Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as 'total'. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0.0)] The offset within the set of matching incidents
     * @param {Number} [limit = 20.0)] The maximum number of matching incidents to return (100 max)
     * @param {String} [entityId] The entity ID involved  This is the unique identifier for the entity causing the incident.
     * @param {String} [incidentNumber] The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 
     * @param {String} [startedAfter] Return incidents started after this timestamp Specify the timestamp in ISO8601 format
     * @param {String} [startedBefore] Find incidents started before this timestamp  Specify the timestamp in ISO8601 format
     * @param {String} [host] The host involved in the incident Multiple values can be separated with commas.
     * @param {String} [service] The service involved in the incident (if any) Multiple values can be separated with commas.
     * @param {String} [currentPhase] The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas. By default, response contains only \"resolved\" incidents
     * @param {String} [routingKey] The original routing of the incident
     * @param {module:api/ReportingApi~apiReportingV2IncidentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveIncidentList}
     */
    apiReportingV2IncidentsGet(xVOApiId, xVOApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiReportingV2IncidentsGet");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiReportingV2IncidentsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'entityId': opts['entityId'],
        'incidentNumber': opts['incidentNumber'],
        'startedAfter': opts['startedAfter'],
        'startedBefore': opts['startedBefore'],
        'host': opts['host'],
        'service': opts['service'],
        'currentPhase': opts['currentPhase'],
        'routingKey': opts['routingKey']
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActiveIncidentList;
      return this.apiClient.callApi(
        '/api-reporting/v2/incidents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
