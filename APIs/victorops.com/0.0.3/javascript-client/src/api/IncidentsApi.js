/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AckOrResolveByUserRequest from '../model/AckOrResolveByUserRequest';
import AckOrResolveRequest from '../model/AckOrResolveRequest';
import AckOrResolveResponse from '../model/AckOrResolveResponse';
import ActiveIncidentList from '../model/ActiveIncidentList';
import CreateIncidentRequest from '../model/CreateIncidentRequest';
import CreatedIncident from '../model/CreatedIncident';
import RerouteCollection from '../model/RerouteCollection';
import RerouteStatusResponse from '../model/RerouteStatusResponse';

/**
* Incidents service.
* @module api/IncidentsApi
* @version 0.0.3
*/
export default class IncidentsApi {

    /**
    * Constructs a new IncidentsApi. 
    * @alias module:api/IncidentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiPublicV1IncidentsAckPatch operation.
     * @callback module:api/IncidentsApi~apiPublicV1IncidentsAckPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AckOrResolveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledge an incident or list of incidents
     * The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {module:model/AckOrResolveRequest} body Ack/Resolve payload
     * @param {module:api/IncidentsApi~apiPublicV1IncidentsAckPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AckOrResolveResponse}
     */
    apiPublicV1IncidentsAckPatch(xVOApiId, xVOApiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1IncidentsAckPatch");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1IncidentsAckPatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiPublicV1IncidentsAckPatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AckOrResolveResponse;
      return this.apiClient.callApi(
        '/api-public/v1/incidents/ack', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1IncidentsByUserAckPatch operation.
     * @callback module:api/IncidentsApi~apiPublicV1IncidentsByUserAckPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AckOrResolveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledge all incidents for which a user was paged.
     * The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {module:model/AckOrResolveByUserRequest} body Ack/Resolve payload
     * @param {module:api/IncidentsApi~apiPublicV1IncidentsByUserAckPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AckOrResolveResponse}
     */
    apiPublicV1IncidentsByUserAckPatch(xVOApiId, xVOApiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1IncidentsByUserAckPatch");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1IncidentsByUserAckPatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiPublicV1IncidentsByUserAckPatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AckOrResolveResponse;
      return this.apiClient.callApi(
        '/api-public/v1/incidents/byUser/ack', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1IncidentsByUserResolvePatch operation.
     * @callback module:api/IncidentsApi~apiPublicV1IncidentsByUserResolvePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AckOrResolveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve all incidents for which a user was paged.
     * The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {module:model/AckOrResolveByUserRequest} body Ack/Resolve payload
     * @param {module:api/IncidentsApi~apiPublicV1IncidentsByUserResolvePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AckOrResolveResponse}
     */
    apiPublicV1IncidentsByUserResolvePatch(xVOApiId, xVOApiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1IncidentsByUserResolvePatch");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1IncidentsByUserResolvePatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiPublicV1IncidentsByUserResolvePatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AckOrResolveResponse;
      return this.apiClient.callApi(
        '/api-public/v1/incidents/byUser/resolve', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1IncidentsGet operation.
     * @callback module:api/IncidentsApi~apiPublicV1IncidentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveIncidentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current incident information
     * Get a list of the currently open, acknowledged and recently resolved incidents.  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {module:api/IncidentsApi~apiPublicV1IncidentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveIncidentList}
     */
    apiPublicV1IncidentsGet(xVOApiId, xVOApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1IncidentsGet");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1IncidentsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActiveIncidentList;
      return this.apiClient.callApi(
        '/api-public/v1/incidents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1IncidentsPost operation.
     * @callback module:api/IncidentsApi~apiPublicV1IncidentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatedIncident} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new incident
     * Create a new incident.  This call replicates the function of our <a href=\"https://help.victorops.com/knowledge-base/manual-incident-creation/\">manual incident creation process</a>. Monitoring tools and custom integrations should be configured using our <a href=\"https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/\">REST Endpoint</a>.  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {module:model/CreateIncidentRequest} body The incident details
     * @param {module:api/IncidentsApi~apiPublicV1IncidentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatedIncident}
     */
    apiPublicV1IncidentsPost(xVOApiId, xVOApiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1IncidentsPost");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1IncidentsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiPublicV1IncidentsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreatedIncident;
      return this.apiClient.callApi(
        '/api-public/v1/incidents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1IncidentsReroutePost operation.
     * @callback module:api/IncidentsApi~apiPublicV1IncidentsReroutePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RerouteStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reroute one or more incidents to one or more new routable destinations.
     * Reroute one or more incidents to one or more users and/or escalation policies  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {module:model/RerouteCollection} body The reroute rules
     * @param {module:api/IncidentsApi~apiPublicV1IncidentsReroutePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RerouteStatusResponse}
     */
    apiPublicV1IncidentsReroutePost(xVOApiId, xVOApiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1IncidentsReroutePost");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1IncidentsReroutePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiPublicV1IncidentsReroutePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RerouteStatusResponse;
      return this.apiClient.callApi(
        '/api-public/v1/incidents/reroute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1IncidentsResolvePatch operation.
     * @callback module:api/IncidentsApi~apiPublicV1IncidentsResolvePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AckOrResolveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve an incident or list of incidents
     * The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
     * @param {String} xVOApiId Your API ID
     * @param {String} xVOApiKey Your API Key
     * @param {module:model/AckOrResolveRequest} body Ack/Resolve payload
     * @param {module:api/IncidentsApi~apiPublicV1IncidentsResolvePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AckOrResolveResponse}
     */
    apiPublicV1IncidentsResolvePatch(xVOApiId, xVOApiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xVOApiId' is set
      if (xVOApiId === undefined || xVOApiId === null) {
        throw new Error("Missing the required parameter 'xVOApiId' when calling apiPublicV1IncidentsResolvePatch");
      }
      // verify the required parameter 'xVOApiKey' is set
      if (xVOApiKey === undefined || xVOApiKey === null) {
        throw new Error("Missing the required parameter 'xVOApiKey' when calling apiPublicV1IncidentsResolvePatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiPublicV1IncidentsResolvePatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-VO-Api-Id': xVOApiId,
        'X-VO-Api-Key': xVOApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AckOrResolveResponse;
      return this.apiClient.callApi(
        '/api-public/v1/incidents/resolve', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
