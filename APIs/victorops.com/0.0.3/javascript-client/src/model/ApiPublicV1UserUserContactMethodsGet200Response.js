/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactDevice from './ContactDevice';
import UserContact from './UserContact';

/**
 * The ApiPublicV1UserUserContactMethodsGet200Response model module.
 * @module model/ApiPublicV1UserUserContactMethodsGet200Response
 * @version 0.0.3
 */
class ApiPublicV1UserUserContactMethodsGet200Response {
    /**
     * Constructs a new <code>ApiPublicV1UserUserContactMethodsGet200Response</code>.
     * @alias module:model/ApiPublicV1UserUserContactMethodsGet200Response
     */
    constructor() { 
        
        ApiPublicV1UserUserContactMethodsGet200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiPublicV1UserUserContactMethodsGet200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiPublicV1UserUserContactMethodsGet200Response} obj Optional instance to populate.
     * @return {module:model/ApiPublicV1UserUserContactMethodsGet200Response} The populated <code>ApiPublicV1UserUserContactMethodsGet200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiPublicV1UserUserContactMethodsGet200Response();

            if (data.hasOwnProperty('devices')) {
                obj['devices'] = ApiClient.convertToType(data['devices'], [ContactDevice]);
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], [UserContact]);
            }
            if (data.hasOwnProperty('phones')) {
                obj['phones'] = ApiClient.convertToType(data['phones'], [UserContact]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiPublicV1UserUserContactMethodsGet200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiPublicV1UserUserContactMethodsGet200Response</code>.
     */
    static validateJSON(data) {
        if (data['devices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['devices'])) {
                throw new Error("Expected the field `devices` to be an array in the JSON data but got " + data['devices']);
            }
            // validate the optional field `devices` (array)
            for (const item of data['devices']) {
                ContactDevice.validateJSON(item);
            };
        }
        if (data['emails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emails'])) {
                throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
            }
            // validate the optional field `emails` (array)
            for (const item of data['emails']) {
                UserContact.validateJSON(item);
            };
        }
        if (data['phones']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phones'])) {
                throw new Error("Expected the field `phones` to be an array in the JSON data but got " + data['phones']);
            }
            // validate the optional field `phones` (array)
            for (const item of data['phones']) {
                UserContact.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ContactDevice>} devices
 */
ApiPublicV1UserUserContactMethodsGet200Response.prototype['devices'] = undefined;

/**
 * @member {Array.<module:model/UserContact>} emails
 */
ApiPublicV1UserUserContactMethodsGet200Response.prototype['emails'] = undefined;

/**
 * @member {Array.<module:model/UserContact>} phones
 */
ApiPublicV1UserUserContactMethodsGet200Response.prototype['phones'] = undefined;






export default ApiPublicV1UserUserContactMethodsGet200Response;

