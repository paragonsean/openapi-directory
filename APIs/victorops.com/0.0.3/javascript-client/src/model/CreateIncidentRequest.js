/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IncidentTarget from './IncidentTarget';

/**
 * The CreateIncidentRequest model module.
 * @module model/CreateIncidentRequest
 * @version 0.0.3
 */
class CreateIncidentRequest {
    /**
     * Constructs a new <code>CreateIncidentRequest</code>.
     * @alias module:model/CreateIncidentRequest
     * @param details {String} 
     * @param summary {String} 
     * @param targets {Array.<module:model/IncidentTarget>} 
     * @param userName {String} 
     */
    constructor(details, summary, targets, userName) { 
        
        CreateIncidentRequest.initialize(this, details, summary, targets, userName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, details, summary, targets, userName) { 
        obj['details'] = details;
        obj['summary'] = summary;
        obj['targets'] = targets;
        obj['userName'] = userName;
    }

    /**
     * Constructs a <code>CreateIncidentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateIncidentRequest} obj Optional instance to populate.
     * @return {module:model/CreateIncidentRequest} The populated <code>CreateIncidentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateIncidentRequest();

            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], [IncidentTarget]);
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateIncidentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateIncidentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateIncidentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        if (data['targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['targets'])) {
                throw new Error("Expected the field `targets` to be an array in the JSON data but got " + data['targets']);
            }
            // validate the optional field `targets` (array)
            for (const item of data['targets']) {
                IncidentTarget.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }

        return true;
    }


}

CreateIncidentRequest.RequiredProperties = ["details", "summary", "targets", "userName"];

/**
 * @member {String} details
 */
CreateIncidentRequest.prototype['details'] = undefined;

/**
 * @member {String} summary
 */
CreateIncidentRequest.prototype['summary'] = undefined;

/**
 * @member {Array.<module:model/IncidentTarget>} targets
 */
CreateIncidentRequest.prototype['targets'] = undefined;

/**
 * @member {String} userName
 */
CreateIncidentRequest.prototype['userName'] = undefined;






export default CreateIncidentRequest;

