/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetAlertResponse model module.
 * @module model/GetAlertResponse
 * @version 0.0.3
 */
class GetAlertResponse {
    /**
     * Constructs a new <code>GetAlertResponse</code>.
     * Alert details. All fields should be considered optional.
     * @alias module:model/GetAlertResponse
     */
    constructor() { 
        
        GetAlertResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetAlertResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetAlertResponse} obj Optional instance to populate.
     * @return {module:model/GetAlertResponse} The populated <code>GetAlertResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetAlertResponse();

            if (data.hasOwnProperty('ackAuthor')) {
                obj['ackAuthor'] = ApiClient.convertToType(data['ackAuthor'], 'String');
            }
            if (data.hasOwnProperty('ackMsg')) {
                obj['ackMsg'] = ApiClient.convertToType(data['ackMsg'], 'String');
            }
            if (data.hasOwnProperty('entityDisplayName')) {
                obj['entityDisplayName'] = ApiClient.convertToType(data['entityDisplayName'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('messageType')) {
                obj['messageType'] = ApiClient.convertToType(data['messageType'], 'String');
            }
            if (data.hasOwnProperty('monitoringTool')) {
                obj['monitoringTool'] = ApiClient.convertToType(data['monitoringTool'], 'String');
            }
            if (data.hasOwnProperty('raw')) {
                obj['raw'] = ApiClient.convertToType(data['raw'], 'String');
            }
            if (data.hasOwnProperty('stateMessage')) {
                obj['stateMessage'] = ApiClient.convertToType(data['stateMessage'], 'String');
            }
            if (data.hasOwnProperty('stateStartTime')) {
                obj['stateStartTime'] = ApiClient.convertToType(data['stateStartTime'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetAlertResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetAlertResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ackAuthor'] && !(typeof data['ackAuthor'] === 'string' || data['ackAuthor'] instanceof String)) {
            throw new Error("Expected the field `ackAuthor` to be a primitive type in the JSON string but got " + data['ackAuthor']);
        }
        // ensure the json data is a string
        if (data['ackMsg'] && !(typeof data['ackMsg'] === 'string' || data['ackMsg'] instanceof String)) {
            throw new Error("Expected the field `ackMsg` to be a primitive type in the JSON string but got " + data['ackMsg']);
        }
        // ensure the json data is a string
        if (data['entityDisplayName'] && !(typeof data['entityDisplayName'] === 'string' || data['entityDisplayName'] instanceof String)) {
            throw new Error("Expected the field `entityDisplayName` to be a primitive type in the JSON string but got " + data['entityDisplayName']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['messageType'] && !(typeof data['messageType'] === 'string' || data['messageType'] instanceof String)) {
            throw new Error("Expected the field `messageType` to be a primitive type in the JSON string but got " + data['messageType']);
        }
        // ensure the json data is a string
        if (data['monitoringTool'] && !(typeof data['monitoringTool'] === 'string' || data['monitoringTool'] instanceof String)) {
            throw new Error("Expected the field `monitoringTool` to be a primitive type in the JSON string but got " + data['monitoringTool']);
        }
        // ensure the json data is a string
        if (data['raw'] && !(typeof data['raw'] === 'string' || data['raw'] instanceof String)) {
            throw new Error("Expected the field `raw` to be a primitive type in the JSON string but got " + data['raw']);
        }
        // ensure the json data is a string
        if (data['stateMessage'] && !(typeof data['stateMessage'] === 'string' || data['stateMessage'] instanceof String)) {
            throw new Error("Expected the field `stateMessage` to be a primitive type in the JSON string but got " + data['stateMessage']);
        }

        return true;
    }


}



/**
 * The user that acknowledged the incident.
 * @member {String} ackAuthor
 */
GetAlertResponse.prototype['ackAuthor'] = undefined;

/**
 * A user entered comment for the acknowledgment.
 * @member {String} ackMsg
 */
GetAlertResponse.prototype['ackMsg'] = undefined;

/**
 * Used within VictorOps to display a human-readable name for the entity.
 * @member {String} entityDisplayName
 */
GetAlertResponse.prototype['entityDisplayName'] = undefined;

/**
 * Identifies the entity (host, service, etc.) this alert was about. 
 * @member {String} entityId
 */
GetAlertResponse.prototype['entityId'] = undefined;

/**
 * The type of alert; INFO, WARNING, ACKNOWLEDGEMENT, CRITICAL, RECOVERY 
 * @member {String} messageType
 */
GetAlertResponse.prototype['messageType'] = undefined;

/**
 * The name of the monitoring system software (eg. nagios, icinga, sensu, etc.)
 * @member {String} monitoringTool
 */
GetAlertResponse.prototype['monitoringTool'] = undefined;

/**
 * The full, raw alert details JSON string (i.e. parse the string into a JSON object) 
 * @member {String} raw
 */
GetAlertResponse.prototype['raw'] = undefined;

/**
 * Any additional status information from the alert item.
 * @member {String} stateMessage
 */
GetAlertResponse.prototype['stateMessage'] = undefined;

/**
 * The time this entity entered its current state (seconds since epoch).
 * @member {Number} stateStartTime
 */
GetAlertResponse.prototype['stateStartTime'] = undefined;

/**
 * Timestamp of the alert in seconds since epoch.
 * @member {Number} timestamp
 */
GetAlertResponse.prototype['timestamp'] = undefined;






export default GetAlertResponse;

