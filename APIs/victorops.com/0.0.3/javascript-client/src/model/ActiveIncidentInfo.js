/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EscalationPolicyInfo from './EscalationPolicyInfo';
import IncidentTransition from './IncidentTransition';

/**
 * The ActiveIncidentInfo model module.
 * @module model/ActiveIncidentInfo
 * @version 0.0.3
 */
class ActiveIncidentInfo {
    /**
     * Constructs a new <code>ActiveIncidentInfo</code>.
     * Incidents contain the following fields (all should be considered optional)
     * @alias module:model/ActiveIncidentInfo
     */
    constructor() { 
        
        ActiveIncidentInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActiveIncidentInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActiveIncidentInfo} obj Optional instance to populate.
     * @return {module:model/ActiveIncidentInfo} The populated <code>ActiveIncidentInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActiveIncidentInfo();

            if (data.hasOwnProperty('alertCount')) {
                obj['alertCount'] = ApiClient.convertToType(data['alertCount'], 'Number');
            }
            if (data.hasOwnProperty('currentPhase')) {
                obj['currentPhase'] = ApiClient.convertToType(data['currentPhase'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('incidentNumber')) {
                obj['incidentNumber'] = ApiClient.convertToType(data['incidentNumber'], 'String');
            }
            if (data.hasOwnProperty('lastAlertId')) {
                obj['lastAlertId'] = ApiClient.convertToType(data['lastAlertId'], 'String');
            }
            if (data.hasOwnProperty('lastAlertTime')) {
                obj['lastAlertTime'] = ApiClient.convertToType(data['lastAlertTime'], 'String');
            }
            if (data.hasOwnProperty('pagedPolicies')) {
                obj['pagedPolicies'] = ApiClient.convertToType(data['pagedPolicies'], [EscalationPolicyInfo]);
            }
            if (data.hasOwnProperty('pagedTeams')) {
                obj['pagedTeams'] = ApiClient.convertToType(data['pagedTeams'], ['String']);
            }
            if (data.hasOwnProperty('pagedUsers')) {
                obj['pagedUsers'] = ApiClient.convertToType(data['pagedUsers'], ['String']);
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('transitions')) {
                obj['transitions'] = ApiClient.convertToType(data['transitions'], [IncidentTransition]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActiveIncidentInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActiveIncidentInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currentPhase'] && !(typeof data['currentPhase'] === 'string' || data['currentPhase'] instanceof String)) {
            throw new Error("Expected the field `currentPhase` to be a primitive type in the JSON string but got " + data['currentPhase']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['incidentNumber'] && !(typeof data['incidentNumber'] === 'string' || data['incidentNumber'] instanceof String)) {
            throw new Error("Expected the field `incidentNumber` to be a primitive type in the JSON string but got " + data['incidentNumber']);
        }
        // ensure the json data is a string
        if (data['lastAlertId'] && !(typeof data['lastAlertId'] === 'string' || data['lastAlertId'] instanceof String)) {
            throw new Error("Expected the field `lastAlertId` to be a primitive type in the JSON string but got " + data['lastAlertId']);
        }
        // ensure the json data is a string
        if (data['lastAlertTime'] && !(typeof data['lastAlertTime'] === 'string' || data['lastAlertTime'] instanceof String)) {
            throw new Error("Expected the field `lastAlertTime` to be a primitive type in the JSON string but got " + data['lastAlertTime']);
        }
        if (data['pagedPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pagedPolicies'])) {
                throw new Error("Expected the field `pagedPolicies` to be an array in the JSON data but got " + data['pagedPolicies']);
            }
            // validate the optional field `pagedPolicies` (array)
            for (const item of data['pagedPolicies']) {
                EscalationPolicyInfo.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pagedTeams'])) {
            throw new Error("Expected the field `pagedTeams` to be an array in the JSON data but got " + data['pagedTeams']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pagedUsers'])) {
            throw new Error("Expected the field `pagedUsers` to be an array in the JSON data but got " + data['pagedUsers']);
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        if (data['transitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transitions'])) {
                throw new Error("Expected the field `transitions` to be an array in the JSON data but got " + data['transitions']);
            }
            // validate the optional field `transitions` (array)
            for (const item of data['transitions']) {
                IncidentTransition.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The number of alerts received for this incident
 * @member {Number} alertCount
 */
ActiveIncidentInfo.prototype['alertCount'] = undefined;

/**
 * The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\".
 * @member {String} currentPhase
 */
ActiveIncidentInfo.prototype['currentPhase'] = undefined;

/**
 * The unique identification of the entity being monitored that caused the incident
 * @member {String} entityId
 */
ActiveIncidentInfo.prototype['entityId'] = undefined;

/**
 * The host on which the incident occurred
 * @member {String} host
 */
ActiveIncidentInfo.prototype['host'] = undefined;

/**
 * The VictorOps incident number
 * @member {String} incidentNumber
 */
ActiveIncidentInfo.prototype['incidentNumber'] = undefined;

/**
 * The unique id of the last alert for the incident
 * @member {String} lastAlertId
 */
ActiveIncidentInfo.prototype['lastAlertId'] = undefined;

/**
 * The time of the last alert received for the incident
 * @member {String} lastAlertTime
 */
ActiveIncidentInfo.prototype['lastAlertTime'] = undefined;

/**
 * The escalation policies that were triggered for the incident
 * @member {Array.<module:model/EscalationPolicyInfo>} pagedPolicies
 */
ActiveIncidentInfo.prototype['pagedPolicies'] = undefined;

/**
 * The teams that were paged for the incident
 * @member {Array.<String>} pagedTeams
 */
ActiveIncidentInfo.prototype['pagedTeams'] = undefined;

/**
 * The users that were paged for the incident.
 * @member {Array.<String>} pagedUsers
 */
ActiveIncidentInfo.prototype['pagedUsers'] = undefined;

/**
 * The service name causing the incident (if any)
 * @member {String} service
 */
ActiveIncidentInfo.prototype['service'] = undefined;

/**
 * The time the incident started
 * @member {String} startTime
 */
ActiveIncidentInfo.prototype['startTime'] = undefined;

/**
 * Transitions of the incident state over time
 * @member {Array.<module:model/IncidentTransition>} transitions
 */
ActiveIncidentInfo.prototype['transitions'] = undefined;






export default ActiveIncidentInfo;

