/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TeamDetail model module.
 * @module model/TeamDetail
 * @version 0.0.3
 */
class TeamDetail {
    /**
     * Constructs a new <code>TeamDetail</code>.
     * Some info about the team
     * @alias module:model/TeamDetail
     */
    constructor() { 
        
        TeamDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TeamDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamDetail} obj Optional instance to populate.
     * @return {module:model/TeamDetail} The populated <code>TeamDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamDetail();

            if (data.hasOwnProperty('_adminsUrl')) {
                obj['_adminsUrl'] = ApiClient.convertToType(data['_adminsUrl'], 'String');
            }
            if (data.hasOwnProperty('_membersUrl')) {
                obj['_membersUrl'] = ApiClient.convertToType(data['_membersUrl'], 'String');
            }
            if (data.hasOwnProperty('_policiesUrl')) {
                obj['_policiesUrl'] = ApiClient.convertToType(data['_policiesUrl'], 'String');
            }
            if (data.hasOwnProperty('_selfUrl')) {
                obj['_selfUrl'] = ApiClient.convertToType(data['_selfUrl'], 'String');
            }
            if (data.hasOwnProperty('isDefaultTeam')) {
                obj['isDefaultTeam'] = ApiClient.convertToType(data['isDefaultTeam'], 'Boolean');
            }
            if (data.hasOwnProperty('memberCount')) {
                obj['memberCount'] = ApiClient.convertToType(data['memberCount'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['_adminsUrl'] && !(typeof data['_adminsUrl'] === 'string' || data['_adminsUrl'] instanceof String)) {
            throw new Error("Expected the field `_adminsUrl` to be a primitive type in the JSON string but got " + data['_adminsUrl']);
        }
        // ensure the json data is a string
        if (data['_membersUrl'] && !(typeof data['_membersUrl'] === 'string' || data['_membersUrl'] instanceof String)) {
            throw new Error("Expected the field `_membersUrl` to be a primitive type in the JSON string but got " + data['_membersUrl']);
        }
        // ensure the json data is a string
        if (data['_policiesUrl'] && !(typeof data['_policiesUrl'] === 'string' || data['_policiesUrl'] instanceof String)) {
            throw new Error("Expected the field `_policiesUrl` to be a primitive type in the JSON string but got " + data['_policiesUrl']);
        }
        // ensure the json data is a string
        if (data['_selfUrl'] && !(typeof data['_selfUrl'] === 'string' || data['_selfUrl'] instanceof String)) {
            throw new Error("Expected the field `_selfUrl` to be a primitive type in the JSON string but got " + data['_selfUrl']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }

        return true;
    }


}



/**
 * @member {String} _adminsUrl
 */
TeamDetail.prototype['_adminsUrl'] = undefined;

/**
 * @member {String} _membersUrl
 */
TeamDetail.prototype['_membersUrl'] = undefined;

/**
 * @member {String} _policiesUrl
 */
TeamDetail.prototype['_policiesUrl'] = undefined;

/**
 * @member {String} _selfUrl
 */
TeamDetail.prototype['_selfUrl'] = undefined;

/**
 * @member {Boolean} isDefaultTeam
 */
TeamDetail.prototype['isDefaultTeam'] = undefined;

/**
 * @member {Number} memberCount
 */
TeamDetail.prototype['memberCount'] = undefined;

/**
 * @member {String} name
 */
TeamDetail.prototype['name'] = undefined;

/**
 * @member {String} slug
 */
TeamDetail.prototype['slug'] = undefined;

/**
 * @member {Number} version
 */
TeamDetail.prototype['version'] = undefined;






export default TeamDetail;

