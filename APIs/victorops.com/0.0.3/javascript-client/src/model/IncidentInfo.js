/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AckUser from './AckUser';

/**
 * The IncidentInfo model module.
 * @module model/IncidentInfo
 * @version 0.0.3
 */
class IncidentInfo {
    /**
     * Constructs a new <code>IncidentInfo</code>.
     * Incidents contain the following fields (all should be considered optional)
     * @alias module:model/IncidentInfo
     */
    constructor() { 
        
        IncidentInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IncidentInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IncidentInfo} obj Optional instance to populate.
     * @return {module:model/IncidentInfo} The populated <code>IncidentInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IncidentInfo();

            if (data.hasOwnProperty('ackTime')) {
                obj['ackTime'] = ApiClient.convertToType(data['ackTime'], 'String');
            }
            if (data.hasOwnProperty('ackUser')) {
                obj['ackUser'] = AckUser.constructFromObject(data['ackUser']);
            }
            if (data.hasOwnProperty('ackUserId')) {
                obj['ackUserId'] = ApiClient.convertToType(data['ackUserId'], 'String');
            }
            if (data.hasOwnProperty('alertCount')) {
                obj['alertCount'] = ApiClient.convertToType(data['alertCount'], 'Number');
            }
            if (data.hasOwnProperty('currentPhase')) {
                obj['currentPhase'] = ApiClient.convertToType(data['currentPhase'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('entityDispName')) {
                obj['entityDispName'] = ApiClient.convertToType(data['entityDispName'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('incidentNumber')) {
                obj['incidentNumber'] = ApiClient.convertToType(data['incidentNumber'], 'String');
            }
            if (data.hasOwnProperty('lastAlertID')) {
                obj['lastAlertID'] = ApiClient.convertToType(data['lastAlertID'], 'String');
            }
            if (data.hasOwnProperty('lastAlertTime')) {
                obj['lastAlertTime'] = ApiClient.convertToType(data['lastAlertTime'], 'String');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('teams')) {
                obj['teams'] = ApiClient.convertToType(data['teams'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IncidentInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IncidentInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ackTime'] && !(typeof data['ackTime'] === 'string' || data['ackTime'] instanceof String)) {
            throw new Error("Expected the field `ackTime` to be a primitive type in the JSON string but got " + data['ackTime']);
        }
        // validate the optional field `ackUser`
        if (data['ackUser']) { // data not null
          AckUser.validateJSON(data['ackUser']);
        }
        // ensure the json data is a string
        if (data['ackUserId'] && !(typeof data['ackUserId'] === 'string' || data['ackUserId'] instanceof String)) {
            throw new Error("Expected the field `ackUserId` to be a primitive type in the JSON string but got " + data['ackUserId']);
        }
        // ensure the json data is a string
        if (data['currentPhase'] && !(typeof data['currentPhase'] === 'string' || data['currentPhase'] instanceof String)) {
            throw new Error("Expected the field `currentPhase` to be a primitive type in the JSON string but got " + data['currentPhase']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['entityDispName'] && !(typeof data['entityDispName'] === 'string' || data['entityDispName'] instanceof String)) {
            throw new Error("Expected the field `entityDispName` to be a primitive type in the JSON string but got " + data['entityDispName']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['incidentNumber'] && !(typeof data['incidentNumber'] === 'string' || data['incidentNumber'] instanceof String)) {
            throw new Error("Expected the field `incidentNumber` to be a primitive type in the JSON string but got " + data['incidentNumber']);
        }
        // ensure the json data is a string
        if (data['lastAlertID'] && !(typeof data['lastAlertID'] === 'string' || data['lastAlertID'] instanceof String)) {
            throw new Error("Expected the field `lastAlertID` to be a primitive type in the JSON string but got " + data['lastAlertID']);
        }
        // ensure the json data is a string
        if (data['lastAlertTime'] && !(typeof data['lastAlertTime'] === 'string' || data['lastAlertTime'] instanceof String)) {
            throw new Error("Expected the field `lastAlertTime` to be a primitive type in the JSON string but got " + data['lastAlertTime']);
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['teams'] && !(typeof data['teams'] === 'string' || data['teams'] instanceof String)) {
            throw new Error("Expected the field `teams` to be a primitive type in the JSON string but got " + data['teams']);
        }

        return true;
    }


}



/**
 * The time of the last acknowledgment of the incident
 * @member {String} ackTime
 */
IncidentInfo.prototype['ackTime'] = undefined;

/**
 * @member {module:model/AckUser} ackUser
 */
IncidentInfo.prototype['ackUser'] = undefined;

/**
 * The VictorOps user id of the user that acknowledged the incident
 * @member {String} ackUserId
 */
IncidentInfo.prototype['ackUserId'] = undefined;

/**
 * The number of alerts received for this incident
 * @member {Number} alertCount
 */
IncidentInfo.prototype['alertCount'] = undefined;

/**
 * The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\".
 * @member {String} currentPhase
 */
IncidentInfo.prototype['currentPhase'] = undefined;

/**
 * The time the incident ended
 * @member {String} endTime
 */
IncidentInfo.prototype['endTime'] = undefined;

/**
 * The display name of the entity causing the incident
 * @member {String} entityDispName
 */
IncidentInfo.prototype['entityDispName'] = undefined;

/**
 * The unique identification of the entity being monitored that caused the incident
 * @member {String} entityId
 */
IncidentInfo.prototype['entityId'] = undefined;

/**
 * The type of entity causing the incident (host/service)
 * @member {String} entityType
 */
IncidentInfo.prototype['entityType'] = undefined;

/**
 * The host on which the incident occurred
 * @member {String} host
 */
IncidentInfo.prototype['host'] = undefined;

/**
 * The VictorOps incident number
 * @member {String} incidentNumber
 */
IncidentInfo.prototype['incidentNumber'] = undefined;

/**
 * The unique id of the last alert for the incident
 * @member {String} lastAlertID
 */
IncidentInfo.prototype['lastAlertID'] = undefined;

/**
 * The time of the last alert received for the incident
 * @member {String} lastAlertTime
 */
IncidentInfo.prototype['lastAlertTime'] = undefined;

/**
 * The service name causing the incident (if any)
 * @member {String} service
 */
IncidentInfo.prototype['service'] = undefined;

/**
 * The time the incident started
 * @member {String} startTime
 */
IncidentInfo.prototype['startTime'] = undefined;

/**
 * The teams that were paged for the incident (comma separated).
 * @member {String} teams
 */
IncidentInfo.prototype['teams'] = undefined;






export default IncidentInfo;

