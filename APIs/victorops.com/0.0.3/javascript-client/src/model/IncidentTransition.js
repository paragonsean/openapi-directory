/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IncidentTransition model module.
 * @module model/IncidentTransition
 * @version 0.0.3
 */
class IncidentTransition {
    /**
     * Constructs a new <code>IncidentTransition</code>.
     * A transition of incident state
     * @alias module:model/IncidentTransition
     */
    constructor() { 
        
        IncidentTransition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IncidentTransition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IncidentTransition} obj Optional instance to populate.
     * @return {module:model/IncidentTransition} The populated <code>IncidentTransition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IncidentTransition();

            if (data.hasOwnProperty('alertId')) {
                obj['alertId'] = ApiClient.convertToType(data['alertId'], 'String');
            }
            if (data.hasOwnProperty('alertUrl')) {
                obj['alertUrl'] = ApiClient.convertToType(data['alertUrl'], 'String');
            }
            if (data.hasOwnProperty('at')) {
                obj['at'] = ApiClient.convertToType(data['at'], 'String');
            }
            if (data.hasOwnProperty('by')) {
                obj['by'] = ApiClient.convertToType(data['by'], 'String');
            }
            if (data.hasOwnProperty('manually')) {
                obj['manually'] = ApiClient.convertToType(data['manually'], 'Boolean');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IncidentTransition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IncidentTransition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alertId'] && !(typeof data['alertId'] === 'string' || data['alertId'] instanceof String)) {
            throw new Error("Expected the field `alertId` to be a primitive type in the JSON string but got " + data['alertId']);
        }
        // ensure the json data is a string
        if (data['alertUrl'] && !(typeof data['alertUrl'] === 'string' || data['alertUrl'] instanceof String)) {
            throw new Error("Expected the field `alertUrl` to be a primitive type in the JSON string but got " + data['alertUrl']);
        }
        // ensure the json data is a string
        if (data['at'] && !(typeof data['at'] === 'string' || data['at'] instanceof String)) {
            throw new Error("Expected the field `at` to be a primitive type in the JSON string but got " + data['at']);
        }
        // ensure the json data is a string
        if (data['by'] && !(typeof data['by'] === 'string' || data['by'] instanceof String)) {
            throw new Error("Expected the field `by` to be a primitive type in the JSON string but got " + data['by']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The unique alert ID that caused the transition
 * @member {String} alertId
 */
IncidentTransition.prototype['alertId'] = undefined;

/**
 * A URL to retrieve the details of the alert that caused the transition
 * @member {String} alertUrl
 */
IncidentTransition.prototype['alertUrl'] = undefined;

/**
 * The time of the transition
 * @member {String} at
 */
IncidentTransition.prototype['at'] = undefined;

/**
 * The user that caused the transition (if any)
 * @member {String} by
 */
IncidentTransition.prototype['by'] = undefined;

/**
 * If the incident transition was caused by a person
 * @member {Boolean} manually
 */
IncidentTransition.prototype['manually'] = undefined;

/**
 * The message entered by that user (if any)
 * @member {String} message
 */
IncidentTransition.prototype['message'] = undefined;

/**
 * The transition name
 * @member {String} name
 */
IncidentTransition.prototype['name'] = undefined;






export default IncidentTransition;

