/**
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The V1User model module.
 * @module model/V1User
 * @version 0.0.3
 */
class V1User {
    /**
     * Constructs a new <code>V1User</code>.
     * Some info about the user
     * @alias module:model/V1User
     */
    constructor() { 
        
        V1User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1User} obj Optional instance to populate.
     * @return {module:model/V1User} The populated <code>V1User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1User();

            if (data.hasOwnProperty('_selfUrl')) {
                obj['_selfUrl'] = ApiClient.convertToType(data['_selfUrl'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('passwordLastUpdated')) {
                obj['passwordLastUpdated'] = ApiClient.convertToType(data['passwordLastUpdated'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['_selfUrl'] && !(typeof data['_selfUrl'] === 'string' || data['_selfUrl'] instanceof String)) {
            throw new Error("Expected the field `_selfUrl` to be a primitive type in the JSON string but got " + data['_selfUrl']);
        }
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['passwordLastUpdated'] && !(typeof data['passwordLastUpdated'] === 'string' || data['passwordLastUpdated'] instanceof String)) {
            throw new Error("Expected the field `passwordLastUpdated` to be a primitive type in the JSON string but got " + data['passwordLastUpdated']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * @member {String} _selfUrl
 */
V1User.prototype['_selfUrl'] = undefined;

/**
 * @member {String} createdAt
 */
V1User.prototype['createdAt'] = undefined;

/**
 * @member {String} email
 */
V1User.prototype['email'] = undefined;

/**
 * @member {String} firstName
 */
V1User.prototype['firstName'] = undefined;

/**
 * @member {String} lastName
 */
V1User.prototype['lastName'] = undefined;

/**
 * @member {String} passwordLastUpdated
 */
V1User.prototype['passwordLastUpdated'] = undefined;

/**
 * @member {String} username
 */
V1User.prototype['username'] = undefined;

/**
 * Whether or not this user has set their password (will always be false)
 * @member {Boolean} verified
 */
V1User.prototype['verified'] = undefined;






export default V1User;

