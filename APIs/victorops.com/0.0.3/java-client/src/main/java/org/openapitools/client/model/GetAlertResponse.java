/*
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Alert details. All fields should be considered optional.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:27.682448-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetAlertResponse {
  public static final String SERIALIZED_NAME_ACK_AUTHOR = "ackAuthor";
  @SerializedName(SERIALIZED_NAME_ACK_AUTHOR)
  private String ackAuthor;

  public static final String SERIALIZED_NAME_ACK_MSG = "ackMsg";
  @SerializedName(SERIALIZED_NAME_ACK_MSG)
  private String ackMsg;

  public static final String SERIALIZED_NAME_ENTITY_DISPLAY_NAME = "entityDisplayName";
  @SerializedName(SERIALIZED_NAME_ENTITY_DISPLAY_NAME)
  private String entityDisplayName;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "messageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private String messageType;

  public static final String SERIALIZED_NAME_MONITORING_TOOL = "monitoringTool";
  @SerializedName(SERIALIZED_NAME_MONITORING_TOOL)
  private String monitoringTool;

  public static final String SERIALIZED_NAME_RAW = "raw";
  @SerializedName(SERIALIZED_NAME_RAW)
  private String raw;

  public static final String SERIALIZED_NAME_STATE_MESSAGE = "stateMessage";
  @SerializedName(SERIALIZED_NAME_STATE_MESSAGE)
  private String stateMessage;

  public static final String SERIALIZED_NAME_STATE_START_TIME = "stateStartTime";
  @SerializedName(SERIALIZED_NAME_STATE_START_TIME)
  private BigDecimal stateStartTime;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private BigDecimal timestamp;

  public GetAlertResponse() {
  }

  public GetAlertResponse ackAuthor(String ackAuthor) {
    this.ackAuthor = ackAuthor;
    return this;
  }

  /**
   * The user that acknowledged the incident.
   * @return ackAuthor
   */
  @javax.annotation.Nullable
  public String getAckAuthor() {
    return ackAuthor;
  }

  public void setAckAuthor(String ackAuthor) {
    this.ackAuthor = ackAuthor;
  }


  public GetAlertResponse ackMsg(String ackMsg) {
    this.ackMsg = ackMsg;
    return this;
  }

  /**
   * A user entered comment for the acknowledgment.
   * @return ackMsg
   */
  @javax.annotation.Nullable
  public String getAckMsg() {
    return ackMsg;
  }

  public void setAckMsg(String ackMsg) {
    this.ackMsg = ackMsg;
  }


  public GetAlertResponse entityDisplayName(String entityDisplayName) {
    this.entityDisplayName = entityDisplayName;
    return this;
  }

  /**
   * Used within VictorOps to display a human-readable name for the entity.
   * @return entityDisplayName
   */
  @javax.annotation.Nullable
  public String getEntityDisplayName() {
    return entityDisplayName;
  }

  public void setEntityDisplayName(String entityDisplayName) {
    this.entityDisplayName = entityDisplayName;
  }


  public GetAlertResponse entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Identifies the entity (host, service, etc.) this alert was about. 
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public GetAlertResponse messageType(String messageType) {
    this.messageType = messageType;
    return this;
  }

  /**
   * The type of alert; INFO, WARNING, ACKNOWLEDGEMENT, CRITICAL, RECOVERY 
   * @return messageType
   */
  @javax.annotation.Nullable
  public String getMessageType() {
    return messageType;
  }

  public void setMessageType(String messageType) {
    this.messageType = messageType;
  }


  public GetAlertResponse monitoringTool(String monitoringTool) {
    this.monitoringTool = monitoringTool;
    return this;
  }

  /**
   * The name of the monitoring system software (eg. nagios, icinga, sensu, etc.)
   * @return monitoringTool
   */
  @javax.annotation.Nullable
  public String getMonitoringTool() {
    return monitoringTool;
  }

  public void setMonitoringTool(String monitoringTool) {
    this.monitoringTool = monitoringTool;
  }


  public GetAlertResponse raw(String raw) {
    this.raw = raw;
    return this;
  }

  /**
   * The full, raw alert details JSON string (i.e. parse the string into a JSON object) 
   * @return raw
   */
  @javax.annotation.Nullable
  public String getRaw() {
    return raw;
  }

  public void setRaw(String raw) {
    this.raw = raw;
  }


  public GetAlertResponse stateMessage(String stateMessage) {
    this.stateMessage = stateMessage;
    return this;
  }

  /**
   * Any additional status information from the alert item.
   * @return stateMessage
   */
  @javax.annotation.Nullable
  public String getStateMessage() {
    return stateMessage;
  }

  public void setStateMessage(String stateMessage) {
    this.stateMessage = stateMessage;
  }


  public GetAlertResponse stateStartTime(BigDecimal stateStartTime) {
    this.stateStartTime = stateStartTime;
    return this;
  }

  /**
   * The time this entity entered its current state (seconds since epoch).
   * @return stateStartTime
   */
  @javax.annotation.Nullable
  public BigDecimal getStateStartTime() {
    return stateStartTime;
  }

  public void setStateStartTime(BigDecimal stateStartTime) {
    this.stateStartTime = stateStartTime;
  }


  public GetAlertResponse timestamp(BigDecimal timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Timestamp of the alert in seconds since epoch.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public BigDecimal getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(BigDecimal timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAlertResponse getAlertResponse = (GetAlertResponse) o;
    return Objects.equals(this.ackAuthor, getAlertResponse.ackAuthor) &&
        Objects.equals(this.ackMsg, getAlertResponse.ackMsg) &&
        Objects.equals(this.entityDisplayName, getAlertResponse.entityDisplayName) &&
        Objects.equals(this.entityId, getAlertResponse.entityId) &&
        Objects.equals(this.messageType, getAlertResponse.messageType) &&
        Objects.equals(this.monitoringTool, getAlertResponse.monitoringTool) &&
        Objects.equals(this.raw, getAlertResponse.raw) &&
        Objects.equals(this.stateMessage, getAlertResponse.stateMessage) &&
        Objects.equals(this.stateStartTime, getAlertResponse.stateStartTime) &&
        Objects.equals(this.timestamp, getAlertResponse.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ackAuthor, ackMsg, entityDisplayName, entityId, messageType, monitoringTool, raw, stateMessage, stateStartTime, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAlertResponse {\n");
    sb.append("    ackAuthor: ").append(toIndentedString(ackAuthor)).append("\n");
    sb.append("    ackMsg: ").append(toIndentedString(ackMsg)).append("\n");
    sb.append("    entityDisplayName: ").append(toIndentedString(entityDisplayName)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    monitoringTool: ").append(toIndentedString(monitoringTool)).append("\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("    stateMessage: ").append(toIndentedString(stateMessage)).append("\n");
    sb.append("    stateStartTime: ").append(toIndentedString(stateStartTime)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ackAuthor");
    openapiFields.add("ackMsg");
    openapiFields.add("entityDisplayName");
    openapiFields.add("entityId");
    openapiFields.add("messageType");
    openapiFields.add("monitoringTool");
    openapiFields.add("raw");
    openapiFields.add("stateMessage");
    openapiFields.add("stateStartTime");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAlertResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAlertResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAlertResponse is not found in the empty JSON string", GetAlertResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAlertResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAlertResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ackAuthor") != null && !jsonObj.get("ackAuthor").isJsonNull()) && !jsonObj.get("ackAuthor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ackAuthor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ackAuthor").toString()));
      }
      if ((jsonObj.get("ackMsg") != null && !jsonObj.get("ackMsg").isJsonNull()) && !jsonObj.get("ackMsg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ackMsg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ackMsg").toString()));
      }
      if ((jsonObj.get("entityDisplayName") != null && !jsonObj.get("entityDisplayName").isJsonNull()) && !jsonObj.get("entityDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityDisplayName").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("messageType") != null && !jsonObj.get("messageType").isJsonNull()) && !jsonObj.get("messageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageType").toString()));
      }
      if ((jsonObj.get("monitoringTool") != null && !jsonObj.get("monitoringTool").isJsonNull()) && !jsonObj.get("monitoringTool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitoringTool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitoringTool").toString()));
      }
      if ((jsonObj.get("raw") != null && !jsonObj.get("raw").isJsonNull()) && !jsonObj.get("raw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw").toString()));
      }
      if ((jsonObj.get("stateMessage") != null && !jsonObj.get("stateMessage").isJsonNull()) && !jsonObj.get("stateMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAlertResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAlertResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAlertResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAlertResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAlertResponse>() {
           @Override
           public void write(JsonWriter out, GetAlertResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAlertResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAlertResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAlertResponse
   * @throws IOException if the JSON string is invalid with respect to GetAlertResponse
   */
  public static GetAlertResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAlertResponse.class);
  }

  /**
   * Convert an instance of GetAlertResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

