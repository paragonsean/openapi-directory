/*
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TeamScheduleRollResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamScheduleResource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:27.682448-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamScheduleResource {
  public static final String SERIALIZED_NAME_ONCALL = "oncall";
  @SerializedName(SERIALIZED_NAME_ONCALL)
  private String oncall;

  public static final String SERIALIZED_NAME_OVERRIDEONCALL = "overrideoncall";
  @SerializedName(SERIALIZED_NAME_OVERRIDEONCALL)
  private String overrideoncall;

  public static final String SERIALIZED_NAME_POLICY_TYPE = "policyType";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  private String policyType;

  public static final String SERIALIZED_NAME_ROLLS = "rolls";
  @SerializedName(SERIALIZED_NAME_ROLLS)
  private List<TeamScheduleRollResource> rolls = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTATION_NAME = "rotationName";
  @SerializedName(SERIALIZED_NAME_ROTATION_NAME)
  private String rotationName;

  public static final String SERIALIZED_NAME_SHIFT_NAME = "shiftName";
  @SerializedName(SERIALIZED_NAME_SHIFT_NAME)
  private String shiftName;

  public static final String SERIALIZED_NAME_SHIFT_ROLL = "shiftRoll";
  @SerializedName(SERIALIZED_NAME_SHIFT_ROLL)
  private BigDecimal shiftRoll;

  public TeamScheduleResource() {
  }

  public TeamScheduleResource oncall(String oncall) {
    this.oncall = oncall;
    return this;
  }

  /**
   * The user scheduled on call (if any)
   * @return oncall
   */
  @javax.annotation.Nullable
  public String getOncall() {
    return oncall;
  }

  public void setOncall(String oncall) {
    this.oncall = oncall;
  }


  public TeamScheduleResource overrideoncall(String overrideoncall) {
    this.overrideoncall = overrideoncall;
    return this;
  }

  /**
   * The user overriding the scheduled on call user (if any)
   * @return overrideoncall
   */
  @javax.annotation.Nullable
  public String getOverrideoncall() {
    return overrideoncall;
  }

  public void setOverrideoncall(String overrideoncall) {
    this.overrideoncall = overrideoncall;
  }


  public TeamScheduleResource policyType(String policyType) {
    this.policyType = policyType;
    return this;
  }

  /**
   * Get policyType
   * @return policyType
   */
  @javax.annotation.Nonnull
  public String getPolicyType() {
    return policyType;
  }

  public void setPolicyType(String policyType) {
    this.policyType = policyType;
  }


  public TeamScheduleResource rolls(List<TeamScheduleRollResource> rolls) {
    this.rolls = rolls;
    return this;
  }

  public TeamScheduleResource addRollsItem(TeamScheduleRollResource rollsItem) {
    if (this.rolls == null) {
      this.rolls = new ArrayList<>();
    }
    this.rolls.add(rollsItem);
    return this;
  }

  /**
   * Get rolls
   * @return rolls
   */
  @javax.annotation.Nonnull
  public List<TeamScheduleRollResource> getRolls() {
    return rolls;
  }

  public void setRolls(List<TeamScheduleRollResource> rolls) {
    this.rolls = rolls;
  }


  public TeamScheduleResource rotationName(String rotationName) {
    this.rotationName = rotationName;
    return this;
  }

  /**
   * Get rotationName
   * @return rotationName
   */
  @javax.annotation.Nullable
  public String getRotationName() {
    return rotationName;
  }

  public void setRotationName(String rotationName) {
    this.rotationName = rotationName;
  }


  public TeamScheduleResource shiftName(String shiftName) {
    this.shiftName = shiftName;
    return this;
  }

  /**
   * Get shiftName
   * @return shiftName
   */
  @javax.annotation.Nullable
  public String getShiftName() {
    return shiftName;
  }

  public void setShiftName(String shiftName) {
    this.shiftName = shiftName;
  }


  public TeamScheduleResource shiftRoll(BigDecimal shiftRoll) {
    this.shiftRoll = shiftRoll;
    return this;
  }

  /**
   * Get shiftRoll
   * @return shiftRoll
   */
  @javax.annotation.Nullable
  public BigDecimal getShiftRoll() {
    return shiftRoll;
  }

  public void setShiftRoll(BigDecimal shiftRoll) {
    this.shiftRoll = shiftRoll;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamScheduleResource teamScheduleResource = (TeamScheduleResource) o;
    return Objects.equals(this.oncall, teamScheduleResource.oncall) &&
        Objects.equals(this.overrideoncall, teamScheduleResource.overrideoncall) &&
        Objects.equals(this.policyType, teamScheduleResource.policyType) &&
        Objects.equals(this.rolls, teamScheduleResource.rolls) &&
        Objects.equals(this.rotationName, teamScheduleResource.rotationName) &&
        Objects.equals(this.shiftName, teamScheduleResource.shiftName) &&
        Objects.equals(this.shiftRoll, teamScheduleResource.shiftRoll);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oncall, overrideoncall, policyType, rolls, rotationName, shiftName, shiftRoll);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamScheduleResource {\n");
    sb.append("    oncall: ").append(toIndentedString(oncall)).append("\n");
    sb.append("    overrideoncall: ").append(toIndentedString(overrideoncall)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("    rolls: ").append(toIndentedString(rolls)).append("\n");
    sb.append("    rotationName: ").append(toIndentedString(rotationName)).append("\n");
    sb.append("    shiftName: ").append(toIndentedString(shiftName)).append("\n");
    sb.append("    shiftRoll: ").append(toIndentedString(shiftRoll)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("oncall");
    openapiFields.add("overrideoncall");
    openapiFields.add("policyType");
    openapiFields.add("rolls");
    openapiFields.add("rotationName");
    openapiFields.add("shiftName");
    openapiFields.add("shiftRoll");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("policyType");
    openapiRequiredFields.add("rolls");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamScheduleResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamScheduleResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamScheduleResource is not found in the empty JSON string", TeamScheduleResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamScheduleResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamScheduleResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamScheduleResource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("oncall") != null && !jsonObj.get("oncall").isJsonNull()) && !jsonObj.get("oncall").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oncall` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oncall").toString()));
      }
      if ((jsonObj.get("overrideoncall") != null && !jsonObj.get("overrideoncall").isJsonNull()) && !jsonObj.get("overrideoncall").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overrideoncall` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overrideoncall").toString()));
      }
      if (!jsonObj.get("policyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyType").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("rolls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolls` to be an array in the JSON string but got `%s`", jsonObj.get("rolls").toString()));
      }

      JsonArray jsonArrayrolls = jsonObj.getAsJsonArray("rolls");
      // validate the required field `rolls` (array)
      for (int i = 0; i < jsonArrayrolls.size(); i++) {
        TeamScheduleRollResource.validateJsonElement(jsonArrayrolls.get(i));
      };
      if ((jsonObj.get("rotationName") != null && !jsonObj.get("rotationName").isJsonNull()) && !jsonObj.get("rotationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotationName").toString()));
      }
      if ((jsonObj.get("shiftName") != null && !jsonObj.get("shiftName").isJsonNull()) && !jsonObj.get("shiftName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shiftName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shiftName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamScheduleResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamScheduleResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamScheduleResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamScheduleResource.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamScheduleResource>() {
           @Override
           public void write(JsonWriter out, TeamScheduleResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamScheduleResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamScheduleResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamScheduleResource
   * @throws IOException if the JSON string is invalid with respect to TeamScheduleResource
   */
  public static TeamScheduleResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamScheduleResource.class);
  }

  /**
   * Convert an instance of TeamScheduleResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

