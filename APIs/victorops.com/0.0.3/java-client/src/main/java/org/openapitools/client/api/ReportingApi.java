/*
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActiveIncidentList;
import java.math.BigDecimal;
import org.openapitools.client.model.IncidentList;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OnCallLog;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiReportingV1IncidentsGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param offset The offset within the set of matching incidents (optional, default to 0.0)
     * @param limit The maximum number of matching incidents to return (100 max) (optional, default to 20.0)
     * @param entityId The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)
     * @param incidentNumber The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)
     * @param startedAfter Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)
     * @param startedBefore Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)
     * @param host The host involved in the incident Multiple values can be separated with commas. (optional)
     * @param service The service involved in the incident (if any) Multiple values can be separated with commas. (optional)
     * @param currentPhase The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of incidents matching the request filters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call apiReportingV1IncidentsGetCall(String xVOApiId, String xVOApiKey, BigDecimal offset, BigDecimal limit, String entityId, String incidentNumber, String startedAfter, String startedBefore, String host, String service, String currentPhase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-reporting/v1/incidents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        if (incidentNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("incidentNumber", incidentNumber));
        }

        if (startedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startedAfter", startedAfter));
        }

        if (startedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startedBefore", startedBefore));
        }

        if (host != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("host", host));
        }

        if (service != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service", service));
        }

        if (currentPhase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPhase", currentPhase));
        }

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiReportingV1IncidentsGetValidateBeforeCall(String xVOApiId, String xVOApiKey, BigDecimal offset, BigDecimal limit, String entityId, String incidentNumber, String startedAfter, String startedBefore, String host, String service, String currentPhase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiReportingV1IncidentsGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiReportingV1IncidentsGet(Async)");
        }

        return apiReportingV1IncidentsGetCall(xVOApiId, xVOApiKey, offset, limit, entityId, incidentNumber, startedAfter, startedBefore, host, service, currentPhase, _callback);

    }

    /**
     * Get/search incident history
     *  __NOTE: This call is deprecated. Please use &#x60;GET /api-reporting/v2/incidents&#x60;.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param offset The offset within the set of matching incidents (optional, default to 0.0)
     * @param limit The maximum number of matching incidents to return (100 max) (optional, default to 20.0)
     * @param entityId The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)
     * @param incidentNumber The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)
     * @param startedAfter Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)
     * @param startedBefore Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)
     * @param host The host involved in the incident Multiple values can be separated with commas. (optional)
     * @param service The service involved in the incident (if any) Multiple values can be separated with commas. (optional)
     * @param currentPhase The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. (optional)
     * @return List&lt;IncidentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of incidents matching the request filters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<IncidentList> apiReportingV1IncidentsGet(String xVOApiId, String xVOApiKey, BigDecimal offset, BigDecimal limit, String entityId, String incidentNumber, String startedAfter, String startedBefore, String host, String service, String currentPhase) throws ApiException {
        ApiResponse<List<IncidentList>> localVarResp = apiReportingV1IncidentsGetWithHttpInfo(xVOApiId, xVOApiKey, offset, limit, entityId, incidentNumber, startedAfter, startedBefore, host, service, currentPhase);
        return localVarResp.getData();
    }

    /**
     * Get/search incident history
     *  __NOTE: This call is deprecated. Please use &#x60;GET /api-reporting/v2/incidents&#x60;.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param offset The offset within the set of matching incidents (optional, default to 0.0)
     * @param limit The maximum number of matching incidents to return (100 max) (optional, default to 20.0)
     * @param entityId The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)
     * @param incidentNumber The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)
     * @param startedAfter Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)
     * @param startedBefore Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)
     * @param host The host involved in the incident Multiple values can be separated with commas. (optional)
     * @param service The service involved in the incident (if any) Multiple values can be separated with commas. (optional)
     * @param currentPhase The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. (optional)
     * @return ApiResponse&lt;List&lt;IncidentList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of incidents matching the request filters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<IncidentList>> apiReportingV1IncidentsGetWithHttpInfo(String xVOApiId, String xVOApiKey, BigDecimal offset, BigDecimal limit, String entityId, String incidentNumber, String startedAfter, String startedBefore, String host, String service, String currentPhase) throws ApiException {
        okhttp3.Call localVarCall = apiReportingV1IncidentsGetValidateBeforeCall(xVOApiId, xVOApiKey, offset, limit, entityId, incidentNumber, startedAfter, startedBefore, host, service, currentPhase, null);
        Type localVarReturnType = new TypeToken<List<IncidentList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get/search incident history (asynchronously)
     *  __NOTE: This call is deprecated. Please use &#x60;GET /api-reporting/v2/incidents&#x60;.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param offset The offset within the set of matching incidents (optional, default to 0.0)
     * @param limit The maximum number of matching incidents to return (100 max) (optional, default to 20.0)
     * @param entityId The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)
     * @param incidentNumber The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)
     * @param startedAfter Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)
     * @param startedBefore Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)
     * @param host The host involved in the incident Multiple values can be separated with commas. (optional)
     * @param service The service involved in the incident (if any) Multiple values can be separated with commas. (optional)
     * @param currentPhase The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of incidents matching the request filters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call apiReportingV1IncidentsGetAsync(String xVOApiId, String xVOApiKey, BigDecimal offset, BigDecimal limit, String entityId, String incidentNumber, String startedAfter, String startedBefore, String host, String service, String currentPhase, final ApiCallback<List<IncidentList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiReportingV1IncidentsGetValidateBeforeCall(xVOApiId, xVOApiKey, offset, limit, entityId, incidentNumber, startedAfter, startedBefore, host, service, currentPhase, _callback);
        Type localVarReturnType = new TypeToken<List<IncidentList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiReportingV1TeamTeamOncallLogGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team &#39;slug&#39; (required)
     * @param start Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format (optional)
     * @param end Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format (optional)
     * @param userName The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the take request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team or user(s) not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReportingV1TeamTeamOncallLogGetCall(String xVOApiId, String xVOApiKey, String team, OffsetDateTime start, OffsetDateTime end, String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-reporting/v1/team/{team}/oncall/log"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiReportingV1TeamTeamOncallLogGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String team, OffsetDateTime start, OffsetDateTime end, String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiReportingV1TeamTeamOncallLogGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiReportingV1TeamTeamOncallLogGet(Async)");
        }

        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling apiReportingV1TeamTeamOncallLogGet(Async)");
        }

        return apiReportingV1TeamTeamOncallLogGetCall(xVOApiId, xVOApiKey, team, start, end, userName, _callback);

    }

    /**
     * A list of shift changes for a team
     * Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team &#39;slug&#39; (required)
     * @param start Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format (optional)
     * @param end Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format (optional)
     * @param userName The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned (optional)
     * @return OnCallLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the take request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team or user(s) not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public OnCallLog apiReportingV1TeamTeamOncallLogGet(String xVOApiId, String xVOApiKey, String team, OffsetDateTime start, OffsetDateTime end, String userName) throws ApiException {
        ApiResponse<OnCallLog> localVarResp = apiReportingV1TeamTeamOncallLogGetWithHttpInfo(xVOApiId, xVOApiKey, team, start, end, userName);
        return localVarResp.getData();
    }

    /**
     * A list of shift changes for a team
     * Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team &#39;slug&#39; (required)
     * @param start Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format (optional)
     * @param end Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format (optional)
     * @param userName The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned (optional)
     * @return ApiResponse&lt;OnCallLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the take request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team or user(s) not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnCallLog> apiReportingV1TeamTeamOncallLogGetWithHttpInfo(String xVOApiId, String xVOApiKey, String team, OffsetDateTime start, OffsetDateTime end, String userName) throws ApiException {
        okhttp3.Call localVarCall = apiReportingV1TeamTeamOncallLogGetValidateBeforeCall(xVOApiId, xVOApiKey, team, start, end, userName, null);
        Type localVarReturnType = new TypeToken<OnCallLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of shift changes for a team (asynchronously)
     * Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team &#39;slug&#39; (required)
     * @param start Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format (optional)
     * @param end Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format (optional)
     * @param userName The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the take request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team or user(s) not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReportingV1TeamTeamOncallLogGetAsync(String xVOApiId, String xVOApiKey, String team, OffsetDateTime start, OffsetDateTime end, String userName, final ApiCallback<OnCallLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiReportingV1TeamTeamOncallLogGetValidateBeforeCall(xVOApiId, xVOApiKey, team, start, end, userName, _callback);
        Type localVarReturnType = new TypeToken<OnCallLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiReportingV2IncidentsGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param offset The offset within the set of matching incidents (optional, default to 0.0)
     * @param limit The maximum number of matching incidents to return (100 max) (optional, default to 20.0)
     * @param entityId The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)
     * @param incidentNumber The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)
     * @param startedAfter Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)
     * @param startedBefore Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)
     * @param host The host involved in the incident Multiple values can be separated with commas. (optional)
     * @param service The service involved in the incident (if any) Multiple values can be separated with commas. (optional)
     * @param currentPhase The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. By default, response contains only \&quot;resolved\&quot; incidents (optional)
     * @param routingKey The original routing of the incident (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of incidents matching the request filters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReportingV2IncidentsGetCall(String xVOApiId, String xVOApiKey, BigDecimal offset, BigDecimal limit, String entityId, String incidentNumber, String startedAfter, String startedBefore, String host, String service, String currentPhase, String routingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-reporting/v2/incidents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        if (incidentNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("incidentNumber", incidentNumber));
        }

        if (startedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startedAfter", startedAfter));
        }

        if (startedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startedBefore", startedBefore));
        }

        if (host != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("host", host));
        }

        if (service != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service", service));
        }

        if (currentPhase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPhase", currentPhase));
        }

        if (routingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routingKey", routingKey));
        }

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiReportingV2IncidentsGetValidateBeforeCall(String xVOApiId, String xVOApiKey, BigDecimal offset, BigDecimal limit, String entityId, String incidentNumber, String startedAfter, String startedBefore, String host, String service, String currentPhase, String routingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiReportingV2IncidentsGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiReportingV2IncidentsGet(Async)");
        }

        return apiReportingV2IncidentsGetCall(xVOApiId, xVOApiKey, offset, limit, entityId, incidentNumber, startedAfter, startedBefore, host, service, currentPhase, routingKey, _callback);

    }

    /**
     * Get/search incident history
     * Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param offset The offset within the set of matching incidents (optional, default to 0.0)
     * @param limit The maximum number of matching incidents to return (100 max) (optional, default to 20.0)
     * @param entityId The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)
     * @param incidentNumber The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)
     * @param startedAfter Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)
     * @param startedBefore Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)
     * @param host The host involved in the incident Multiple values can be separated with commas. (optional)
     * @param service The service involved in the incident (if any) Multiple values can be separated with commas. (optional)
     * @param currentPhase The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. By default, response contains only \&quot;resolved\&quot; incidents (optional)
     * @param routingKey The original routing of the incident (optional)
     * @return ActiveIncidentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of incidents matching the request filters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ActiveIncidentList apiReportingV2IncidentsGet(String xVOApiId, String xVOApiKey, BigDecimal offset, BigDecimal limit, String entityId, String incidentNumber, String startedAfter, String startedBefore, String host, String service, String currentPhase, String routingKey) throws ApiException {
        ApiResponse<ActiveIncidentList> localVarResp = apiReportingV2IncidentsGetWithHttpInfo(xVOApiId, xVOApiKey, offset, limit, entityId, incidentNumber, startedAfter, startedBefore, host, service, currentPhase, routingKey);
        return localVarResp.getData();
    }

    /**
     * Get/search incident history
     * Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param offset The offset within the set of matching incidents (optional, default to 0.0)
     * @param limit The maximum number of matching incidents to return (100 max) (optional, default to 20.0)
     * @param entityId The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)
     * @param incidentNumber The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)
     * @param startedAfter Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)
     * @param startedBefore Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)
     * @param host The host involved in the incident Multiple values can be separated with commas. (optional)
     * @param service The service involved in the incident (if any) Multiple values can be separated with commas. (optional)
     * @param currentPhase The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. By default, response contains only \&quot;resolved\&quot; incidents (optional)
     * @param routingKey The original routing of the incident (optional)
     * @return ApiResponse&lt;ActiveIncidentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of incidents matching the request filters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveIncidentList> apiReportingV2IncidentsGetWithHttpInfo(String xVOApiId, String xVOApiKey, BigDecimal offset, BigDecimal limit, String entityId, String incidentNumber, String startedAfter, String startedBefore, String host, String service, String currentPhase, String routingKey) throws ApiException {
        okhttp3.Call localVarCall = apiReportingV2IncidentsGetValidateBeforeCall(xVOApiId, xVOApiKey, offset, limit, entityId, incidentNumber, startedAfter, startedBefore, host, service, currentPhase, routingKey, null);
        Type localVarReturnType = new TypeToken<ActiveIncidentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get/search incident history (asynchronously)
     * Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param offset The offset within the set of matching incidents (optional, default to 0.0)
     * @param limit The maximum number of matching incidents to return (100 max) (optional, default to 20.0)
     * @param entityId The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)
     * @param incidentNumber The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)
     * @param startedAfter Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)
     * @param startedBefore Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)
     * @param host The host involved in the incident Multiple values can be separated with commas. (optional)
     * @param service The service involved in the incident (if any) Multiple values can be separated with commas. (optional)
     * @param currentPhase The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. By default, response contains only \&quot;resolved\&quot; incidents (optional)
     * @param routingKey The original routing of the incident (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of incidents matching the request filters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReportingV2IncidentsGetAsync(String xVOApiId, String xVOApiKey, BigDecimal offset, BigDecimal limit, String entityId, String incidentNumber, String startedAfter, String startedBefore, String host, String service, String currentPhase, String routingKey, final ApiCallback<ActiveIncidentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiReportingV2IncidentsGetValidateBeforeCall(xVOApiId, xVOApiKey, offset, limit, entityId, incidentNumber, startedAfter, startedBefore, host, service, currentPhase, routingKey, _callback);
        Type localVarReturnType = new TypeToken<ActiveIncidentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
