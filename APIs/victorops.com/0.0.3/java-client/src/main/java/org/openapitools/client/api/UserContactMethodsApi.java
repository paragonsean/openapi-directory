/*
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiPublicV1UserUserContactMethodsGet200Response;
import org.openapitools.client.model.ContactDevice;
import org.openapitools.client.model.ContactDeviceAdd;
import org.openapitools.client.model.ContactEmailAdd;
import org.openapitools.client.model.ContactPhoneAdd;
import org.openapitools.client.model.UserContact;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserContactMethodsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserContactMethodsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserContactMethodsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiPublicV1UserUserContactMethodsDevicesContactIdDelete
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted contact device for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsDevicesContactIdDeleteCall(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods/devices/{contactId}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsDevicesContactIdDeleteValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsDevicesContactIdDelete(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsDevicesContactIdDelete(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsDevicesContactIdDelete(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsDevicesContactIdDelete(Async)");
        }

        return apiPublicV1UserUserContactMethodsDevicesContactIdDeleteCall(xVOApiId, xVOApiKey, user, contactId, _callback);

    }

    /**
     * Delete a contact device for a user
     * Delete a contact device for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @return ContactDevice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted contact device for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ContactDevice apiPublicV1UserUserContactMethodsDevicesContactIdDelete(String xVOApiId, String xVOApiKey, String user, String contactId) throws ApiException {
        ApiResponse<ContactDevice> localVarResp = apiPublicV1UserUserContactMethodsDevicesContactIdDeleteWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
        return localVarResp.getData();
    }

    /**
     * Delete a contact device for a user
     * Delete a contact device for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @return ApiResponse&lt;ContactDevice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted contact device for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactDevice> apiPublicV1UserUserContactMethodsDevicesContactIdDeleteWithHttpInfo(String xVOApiId, String xVOApiKey, String user, String contactId) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsDevicesContactIdDeleteValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, null);
        Type localVarReturnType = new TypeToken<ContactDevice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a contact device for a user (asynchronously)
     * Delete a contact device for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted contact device for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsDevicesContactIdDeleteAsync(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback<ContactDevice> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsDevicesContactIdDeleteValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, _callback);
        Type localVarReturnType = new TypeToken<ContactDevice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1UserUserContactMethodsDevicesContactIdGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact devices for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsDevicesContactIdGetCall(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods/devices/{contactId}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsDevicesContactIdGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsDevicesContactIdGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsDevicesContactIdGet(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsDevicesContactIdGet(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsDevicesContactIdGet(Async)");
        }

        return apiPublicV1UserUserContactMethodsDevicesContactIdGetCall(xVOApiId, xVOApiKey, user, contactId, _callback);

    }

    /**
     * Get the indicated contact device for a user
     * Get the indicated contact device for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @return List&lt;ContactDevice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact devices for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ContactDevice> apiPublicV1UserUserContactMethodsDevicesContactIdGet(String xVOApiId, String xVOApiKey, String user, String contactId) throws ApiException {
        ApiResponse<List<ContactDevice>> localVarResp = apiPublicV1UserUserContactMethodsDevicesContactIdGetWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
        return localVarResp.getData();
    }

    /**
     * Get the indicated contact device for a user
     * Get the indicated contact device for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @return ApiResponse&lt;List&lt;ContactDevice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact devices for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContactDevice>> apiPublicV1UserUserContactMethodsDevicesContactIdGetWithHttpInfo(String xVOApiId, String xVOApiKey, String user, String contactId) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsDevicesContactIdGetValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, null);
        Type localVarReturnType = new TypeToken<List<ContactDevice>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the indicated contact device for a user (asynchronously)
     * Get the indicated contact device for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact devices for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsDevicesContactIdGetAsync(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback<List<ContactDevice>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsDevicesContactIdGetValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, _callback);
        Type localVarReturnType = new TypeToken<List<ContactDevice>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1UserUserContactMethodsDevicesContactIdPut
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param body The contact device (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact devices for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsDevicesContactIdPutCall(String xVOApiId, String xVOApiKey, String user, String contactId, ContactDeviceAdd body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods/devices/{contactId}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsDevicesContactIdPutValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, String contactId, ContactDeviceAdd body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsDevicesContactIdPut(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsDevicesContactIdPut(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsDevicesContactIdPut(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsDevicesContactIdPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1UserUserContactMethodsDevicesContactIdPut(Async)");
        }

        return apiPublicV1UserUserContactMethodsDevicesContactIdPutCall(xVOApiId, xVOApiKey, user, contactId, body, _callback);

    }

    /**
     * Update a contact device for a user
     * Update a contact device for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param body The contact device (required)
     * @return ContactDevice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact devices for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ContactDevice apiPublicV1UserUserContactMethodsDevicesContactIdPut(String xVOApiId, String xVOApiKey, String user, String contactId, ContactDeviceAdd body) throws ApiException {
        ApiResponse<ContactDevice> localVarResp = apiPublicV1UserUserContactMethodsDevicesContactIdPutWithHttpInfo(xVOApiId, xVOApiKey, user, contactId, body);
        return localVarResp.getData();
    }

    /**
     * Update a contact device for a user
     * Update a contact device for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param body The contact device (required)
     * @return ApiResponse&lt;ContactDevice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact devices for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactDevice> apiPublicV1UserUserContactMethodsDevicesContactIdPutWithHttpInfo(String xVOApiId, String xVOApiKey, String user, String contactId, ContactDeviceAdd body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsDevicesContactIdPutValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, body, null);
        Type localVarReturnType = new TypeToken<ContactDevice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a contact device for a user (asynchronously)
     * Update a contact device for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param body The contact device (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact devices for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsDevicesContactIdPutAsync(String xVOApiId, String xVOApiKey, String user, String contactId, ContactDeviceAdd body, final ApiCallback<ContactDevice> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsDevicesContactIdPutValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, body, _callback);
        Type localVarReturnType = new TypeToken<ContactDevice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1UserUserContactMethodsDevicesGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact devices for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsDevicesGetCall(String xVOApiId, String xVOApiKey, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods/devices"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsDevicesGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsDevicesGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsDevicesGet(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsDevicesGet(Async)");
        }

        return apiPublicV1UserUserContactMethodsDevicesGetCall(xVOApiId, xVOApiKey, user, _callback);

    }

    /**
     * Get a list of all contact devices for a user
     * Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @return List&lt;ContactDevice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact devices for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ContactDevice> apiPublicV1UserUserContactMethodsDevicesGet(String xVOApiId, String xVOApiKey, String user) throws ApiException {
        ApiResponse<List<ContactDevice>> localVarResp = apiPublicV1UserUserContactMethodsDevicesGetWithHttpInfo(xVOApiId, xVOApiKey, user);
        return localVarResp.getData();
    }

    /**
     * Get a list of all contact devices for a user
     * Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @return ApiResponse&lt;List&lt;ContactDevice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact devices for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContactDevice>> apiPublicV1UserUserContactMethodsDevicesGetWithHttpInfo(String xVOApiId, String xVOApiKey, String user) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsDevicesGetValidateBeforeCall(xVOApiId, xVOApiKey, user, null);
        Type localVarReturnType = new TypeToken<List<ContactDevice>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all contact devices for a user (asynchronously)
     * Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact devices for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsDevicesGetAsync(String xVOApiId, String xVOApiKey, String user, final ApiCallback<List<ContactDevice>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsDevicesGetValidateBeforeCall(xVOApiId, xVOApiKey, user, _callback);
        Type localVarReturnType = new TypeToken<List<ContactDevice>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1UserUserContactMethodsEmailsContactIdDelete
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted contact email for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsEmailsContactIdDeleteCall(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods/emails/{contactId}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsEmailsContactIdDeleteValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsEmailsContactIdDelete(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsEmailsContactIdDelete(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsEmailsContactIdDelete(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsEmailsContactIdDelete(Async)");
        }

        return apiPublicV1UserUserContactMethodsEmailsContactIdDeleteCall(xVOApiId, xVOApiKey, user, contactId, _callback);

    }

    /**
     * Delete a contact email for a user
     * Delete the indicated contact email for the user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @return UserContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted contact email for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UserContact apiPublicV1UserUserContactMethodsEmailsContactIdDelete(String xVOApiId, String xVOApiKey, String user, String contactId) throws ApiException {
        ApiResponse<UserContact> localVarResp = apiPublicV1UserUserContactMethodsEmailsContactIdDeleteWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
        return localVarResp.getData();
    }

    /**
     * Delete a contact email for a user
     * Delete the indicated contact email for the user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @return ApiResponse&lt;UserContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted contact email for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserContact> apiPublicV1UserUserContactMethodsEmailsContactIdDeleteWithHttpInfo(String xVOApiId, String xVOApiKey, String user, String contactId) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsEmailsContactIdDeleteValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, null);
        Type localVarReturnType = new TypeToken<UserContact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a contact email for a user (asynchronously)
     * Delete the indicated contact email for the user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted contact email for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsEmailsContactIdDeleteAsync(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback<UserContact> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsEmailsContactIdDeleteValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, _callback);
        Type localVarReturnType = new TypeToken<UserContact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1UserUserContactMethodsEmailsContactIdGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The indicated contact email for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsEmailsContactIdGetCall(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods/emails/{contactId}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsEmailsContactIdGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsEmailsContactIdGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsEmailsContactIdGet(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsEmailsContactIdGet(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsEmailsContactIdGet(Async)");
        }

        return apiPublicV1UserUserContactMethodsEmailsContactIdGetCall(xVOApiId, xVOApiKey, user, contactId, _callback);

    }

    /**
     * Get the indicated contact email for a user
     * Get the indicated contact email for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @return List&lt;UserContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The indicated contact email for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<UserContact> apiPublicV1UserUserContactMethodsEmailsContactIdGet(String xVOApiId, String xVOApiKey, String user, String contactId) throws ApiException {
        ApiResponse<List<UserContact>> localVarResp = apiPublicV1UserUserContactMethodsEmailsContactIdGetWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
        return localVarResp.getData();
    }

    /**
     * Get the indicated contact email for a user
     * Get the indicated contact email for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @return ApiResponse&lt;List&lt;UserContact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The indicated contact email for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserContact>> apiPublicV1UserUserContactMethodsEmailsContactIdGetWithHttpInfo(String xVOApiId, String xVOApiKey, String user, String contactId) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsEmailsContactIdGetValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, null);
        Type localVarReturnType = new TypeToken<List<UserContact>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the indicated contact email for a user (asynchronously)
     * Get the indicated contact email for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The indicated contact email for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsEmailsContactIdGetAsync(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback<List<UserContact>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsEmailsContactIdGetValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, _callback);
        Type localVarReturnType = new TypeToken<List<UserContact>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1UserUserContactMethodsEmailsGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact emails for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsEmailsGetCall(String xVOApiId, String xVOApiKey, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods/emails"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsEmailsGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsEmailsGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsEmailsGet(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsEmailsGet(Async)");
        }

        return apiPublicV1UserUserContactMethodsEmailsGetCall(xVOApiId, xVOApiKey, user, _callback);

    }

    /**
     * Get a list of all contact emails for a user
     * Get the contact emails for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @return List&lt;UserContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact emails for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<UserContact> apiPublicV1UserUserContactMethodsEmailsGet(String xVOApiId, String xVOApiKey, String user) throws ApiException {
        ApiResponse<List<UserContact>> localVarResp = apiPublicV1UserUserContactMethodsEmailsGetWithHttpInfo(xVOApiId, xVOApiKey, user);
        return localVarResp.getData();
    }

    /**
     * Get a list of all contact emails for a user
     * Get the contact emails for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @return ApiResponse&lt;List&lt;UserContact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact emails for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserContact>> apiPublicV1UserUserContactMethodsEmailsGetWithHttpInfo(String xVOApiId, String xVOApiKey, String user) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsEmailsGetValidateBeforeCall(xVOApiId, xVOApiKey, user, null);
        Type localVarReturnType = new TypeToken<List<UserContact>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all contact emails for a user (asynchronously)
     * Get the contact emails for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact emails for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsEmailsGetAsync(String xVOApiId, String xVOApiKey, String user, final ApiCallback<List<UserContact>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsEmailsGetValidateBeforeCall(xVOApiId, xVOApiKey, user, _callback);
        Type localVarReturnType = new TypeToken<List<UserContact>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1UserUserContactMethodsEmailsPost
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param body The contact email (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact emails for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsEmailsPostCall(String xVOApiId, String xVOApiKey, String user, ContactEmailAdd body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods/emails"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsEmailsPostValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, ContactEmailAdd body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsEmailsPost(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsEmailsPost(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsEmailsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1UserUserContactMethodsEmailsPost(Async)");
        }

        return apiPublicV1UserUserContactMethodsEmailsPostCall(xVOApiId, xVOApiKey, user, body, _callback);

    }

    /**
     * Create a contact emails for a user
     * Create a contact email for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param body The contact email (required)
     * @return UserContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact emails for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UserContact apiPublicV1UserUserContactMethodsEmailsPost(String xVOApiId, String xVOApiKey, String user, ContactEmailAdd body) throws ApiException {
        ApiResponse<UserContact> localVarResp = apiPublicV1UserUserContactMethodsEmailsPostWithHttpInfo(xVOApiId, xVOApiKey, user, body);
        return localVarResp.getData();
    }

    /**
     * Create a contact emails for a user
     * Create a contact email for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param body The contact email (required)
     * @return ApiResponse&lt;UserContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact emails for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserContact> apiPublicV1UserUserContactMethodsEmailsPostWithHttpInfo(String xVOApiId, String xVOApiKey, String user, ContactEmailAdd body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsEmailsPostValidateBeforeCall(xVOApiId, xVOApiKey, user, body, null);
        Type localVarReturnType = new TypeToken<UserContact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a contact emails for a user (asynchronously)
     * Create a contact email for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param body The contact email (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact emails for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsEmailsPostAsync(String xVOApiId, String xVOApiKey, String user, ContactEmailAdd body, final ApiCallback<UserContact> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsEmailsPostValidateBeforeCall(xVOApiId, xVOApiKey, user, body, _callback);
        Type localVarReturnType = new TypeToken<UserContact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1UserUserContactMethodsGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All available contact methods for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsGetCall(String xVOApiId, String xVOApiKey, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsGet(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsGet(Async)");
        }

        return apiPublicV1UserUserContactMethodsGetCall(xVOApiId, xVOApiKey, user, _callback);

    }

    /**
     * Get a list of all contact methods for a user
     * Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @return ApiPublicV1UserUserContactMethodsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All available contact methods for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiPublicV1UserUserContactMethodsGet200Response apiPublicV1UserUserContactMethodsGet(String xVOApiId, String xVOApiKey, String user) throws ApiException {
        ApiResponse<ApiPublicV1UserUserContactMethodsGet200Response> localVarResp = apiPublicV1UserUserContactMethodsGetWithHttpInfo(xVOApiId, xVOApiKey, user);
        return localVarResp.getData();
    }

    /**
     * Get a list of all contact methods for a user
     * Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @return ApiResponse&lt;ApiPublicV1UserUserContactMethodsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All available contact methods for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiPublicV1UserUserContactMethodsGet200Response> apiPublicV1UserUserContactMethodsGetWithHttpInfo(String xVOApiId, String xVOApiKey, String user) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsGetValidateBeforeCall(xVOApiId, xVOApiKey, user, null);
        Type localVarReturnType = new TypeToken<ApiPublicV1UserUserContactMethodsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all contact methods for a user (asynchronously)
     * Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All available contact methods for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsGetAsync(String xVOApiId, String xVOApiKey, String user, final ApiCallback<ApiPublicV1UserUserContactMethodsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsGetValidateBeforeCall(xVOApiId, xVOApiKey, user, _callback);
        Type localVarReturnType = new TypeToken<ApiPublicV1UserUserContactMethodsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1UserUserContactMethodsPhonesContactIdDelete
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted contact phone for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsPhonesContactIdDeleteCall(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods/phones/{contactId}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsPhonesContactIdDeleteValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsPhonesContactIdDelete(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsPhonesContactIdDelete(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsPhonesContactIdDelete(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsPhonesContactIdDelete(Async)");
        }

        return apiPublicV1UserUserContactMethodsPhonesContactIdDeleteCall(xVOApiId, xVOApiKey, user, contactId, _callback);

    }

    /**
     * Delete a contact phone for a user
     * Delete the indicated contact phone for the user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @return UserContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted contact phone for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UserContact apiPublicV1UserUserContactMethodsPhonesContactIdDelete(String xVOApiId, String xVOApiKey, String user, String contactId) throws ApiException {
        ApiResponse<UserContact> localVarResp = apiPublicV1UserUserContactMethodsPhonesContactIdDeleteWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
        return localVarResp.getData();
    }

    /**
     * Delete a contact phone for a user
     * Delete the indicated contact phone for the user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @return ApiResponse&lt;UserContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted contact phone for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserContact> apiPublicV1UserUserContactMethodsPhonesContactIdDeleteWithHttpInfo(String xVOApiId, String xVOApiKey, String user, String contactId) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsPhonesContactIdDeleteValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, null);
        Type localVarReturnType = new TypeToken<UserContact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a contact phone for a user (asynchronously)
     * Delete the indicated contact phone for the user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted contact phone for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsPhonesContactIdDeleteAsync(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback<UserContact> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsPhonesContactIdDeleteValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, _callback);
        Type localVarReturnType = new TypeToken<UserContact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1UserUserContactMethodsPhonesContactIdGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The indicated contact phone for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsPhonesContactIdGetCall(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods/phones/{contactId}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsPhonesContactIdGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsPhonesContactIdGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsPhonesContactIdGet(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsPhonesContactIdGet(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling apiPublicV1UserUserContactMethodsPhonesContactIdGet(Async)");
        }

        return apiPublicV1UserUserContactMethodsPhonesContactIdGetCall(xVOApiId, xVOApiKey, user, contactId, _callback);

    }

    /**
     * Get the indicated contact phone for a user
     * Get the indicated contact phone for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @return List&lt;UserContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The indicated contact phone for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<UserContact> apiPublicV1UserUserContactMethodsPhonesContactIdGet(String xVOApiId, String xVOApiKey, String user, String contactId) throws ApiException {
        ApiResponse<List<UserContact>> localVarResp = apiPublicV1UserUserContactMethodsPhonesContactIdGetWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
        return localVarResp.getData();
    }

    /**
     * Get the indicated contact phone for a user
     * Get the indicated contact phone for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @return ApiResponse&lt;List&lt;UserContact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The indicated contact phone for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserContact>> apiPublicV1UserUserContactMethodsPhonesContactIdGetWithHttpInfo(String xVOApiId, String xVOApiKey, String user, String contactId) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsPhonesContactIdGetValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, null);
        Type localVarReturnType = new TypeToken<List<UserContact>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the indicated contact phone for a user (asynchronously)
     * Get the indicated contact phone for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param contactId The unique contact identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The indicated contact phone for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsPhonesContactIdGetAsync(String xVOApiId, String xVOApiKey, String user, String contactId, final ApiCallback<List<UserContact>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsPhonesContactIdGetValidateBeforeCall(xVOApiId, xVOApiKey, user, contactId, _callback);
        Type localVarReturnType = new TypeToken<List<UserContact>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1UserUserContactMethodsPhonesGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact phones for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsPhonesGetCall(String xVOApiId, String xVOApiKey, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods/phones"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsPhonesGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsPhonesGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsPhonesGet(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsPhonesGet(Async)");
        }

        return apiPublicV1UserUserContactMethodsPhonesGetCall(xVOApiId, xVOApiKey, user, _callback);

    }

    /**
     * Get a list of all contact phones for a user
     * Get the contact phones for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @return List&lt;UserContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact phones for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<UserContact> apiPublicV1UserUserContactMethodsPhonesGet(String xVOApiId, String xVOApiKey, String user) throws ApiException {
        ApiResponse<List<UserContact>> localVarResp = apiPublicV1UserUserContactMethodsPhonesGetWithHttpInfo(xVOApiId, xVOApiKey, user);
        return localVarResp.getData();
    }

    /**
     * Get a list of all contact phones for a user
     * Get the contact phones for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @return ApiResponse&lt;List&lt;UserContact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact phones for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserContact>> apiPublicV1UserUserContactMethodsPhonesGetWithHttpInfo(String xVOApiId, String xVOApiKey, String user) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsPhonesGetValidateBeforeCall(xVOApiId, xVOApiKey, user, null);
        Type localVarReturnType = new TypeToken<List<UserContact>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all contact phones for a user (asynchronously)
     * Get the contact phones for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact phones for the user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsPhonesGetAsync(String xVOApiId, String xVOApiKey, String user, final ApiCallback<List<UserContact>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsPhonesGetValidateBeforeCall(xVOApiId, xVOApiKey, user, _callback);
        Type localVarReturnType = new TypeToken<List<UserContact>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1UserUserContactMethodsPhonesPost
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param body The contact phone (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact phones for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsPhonesPostCall(String xVOApiId, String xVOApiKey, String user, ContactPhoneAdd body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/user/{user}/contact-methods/phones"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1UserUserContactMethodsPhonesPostValidateBeforeCall(String xVOApiId, String xVOApiKey, String user, ContactPhoneAdd body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1UserUserContactMethodsPhonesPost(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1UserUserContactMethodsPhonesPost(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1UserUserContactMethodsPhonesPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1UserUserContactMethodsPhonesPost(Async)");
        }

        return apiPublicV1UserUserContactMethodsPhonesPostCall(xVOApiId, xVOApiKey, user, body, _callback);

    }

    /**
     * Create a contact phones for a user
     * Create a contact phone for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param body The contact phone (required)
     * @return UserContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact phones for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UserContact apiPublicV1UserUserContactMethodsPhonesPost(String xVOApiId, String xVOApiKey, String user, ContactPhoneAdd body) throws ApiException {
        ApiResponse<UserContact> localVarResp = apiPublicV1UserUserContactMethodsPhonesPostWithHttpInfo(xVOApiId, xVOApiKey, user, body);
        return localVarResp.getData();
    }

    /**
     * Create a contact phones for a user
     * Create a contact phone for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param body The contact phone (required)
     * @return ApiResponse&lt;UserContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact phones for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserContact> apiPublicV1UserUserContactMethodsPhonesPostWithHttpInfo(String xVOApiId, String xVOApiKey, String user, ContactPhoneAdd body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsPhonesPostValidateBeforeCall(xVOApiId, xVOApiKey, user, body, null);
        Type localVarReturnType = new TypeToken<UserContact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a contact phones for a user (asynchronously)
     * Create a contact phone for a user  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param user The VictorOps user ID (required)
     * @param body The contact phone (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of contact phones for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1UserUserContactMethodsPhonesPostAsync(String xVOApiId, String xVOApiKey, String user, ContactPhoneAdd body, final ApiCallback<UserContact> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1UserUserContactMethodsPhonesPostValidateBeforeCall(xVOApiId, xVOApiKey, user, body, _callback);
        Type localVarReturnType = new TypeToken<UserContact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
