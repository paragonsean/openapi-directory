/*
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddTeamMemberPayload;
import org.openapitools.client.model.AddTeamPayload;
import org.openapitools.client.model.EscalationPolicyList;
import org.openapitools.client.model.ListTeamMembersResponse;
import org.openapitools.client.model.RemoveTeamMemberPayload;
import org.openapitools.client.model.TeamAdminsResponse;
import org.openapitools.client.model.TeamDetail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiPublicV1TeamGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of teams for your organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamGetCall(String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/team";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1TeamGetValidateBeforeCall(String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1TeamGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1TeamGet(Async)");
        }

        return apiPublicV1TeamGetCall(xVOApiId, xVOApiKey, _callback);

    }

    /**
     * List teams
     * Get a list of teams for your organization.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return List&lt;TeamDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of teams for your organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamDetail> apiPublicV1TeamGet(String xVOApiId, String xVOApiKey) throws ApiException {
        ApiResponse<List<TeamDetail>> localVarResp = apiPublicV1TeamGetWithHttpInfo(xVOApiId, xVOApiKey);
        return localVarResp.getData();
    }

    /**
     * List teams
     * Get a list of teams for your organization.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ApiResponse&lt;List&lt;TeamDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of teams for your organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamDetail>> apiPublicV1TeamGetWithHttpInfo(String xVOApiId, String xVOApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1TeamGetValidateBeforeCall(xVOApiId, xVOApiKey, null);
        Type localVarReturnType = new TypeToken<List<TeamDetail>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List teams (asynchronously)
     * Get a list of teams for your organization.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of teams for your organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamGetAsync(String xVOApiId, String xVOApiKey, final ApiCallback<List<TeamDetail>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1TeamGetValidateBeforeCall(xVOApiId, xVOApiKey, _callback);
        Type localVarReturnType = new TypeToken<List<TeamDetail>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1TeamPost
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body The team information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamPostCall(String xVOApiId, String xVOApiKey, AddTeamPayload body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/team";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1TeamPostValidateBeforeCall(String xVOApiId, String xVOApiKey, AddTeamPayload body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1TeamPost(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1TeamPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1TeamPost(Async)");
        }

        return apiPublicV1TeamPostCall(xVOApiId, xVOApiKey, body, _callback);

    }

    /**
     * Add a team
     * Add a team to your organization.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body The team information (required)
     * @return TeamDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public TeamDetail apiPublicV1TeamPost(String xVOApiId, String xVOApiKey, AddTeamPayload body) throws ApiException {
        ApiResponse<TeamDetail> localVarResp = apiPublicV1TeamPostWithHttpInfo(xVOApiId, xVOApiKey, body);
        return localVarResp.getData();
    }

    /**
     * Add a team
     * Add a team to your organization.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body The team information (required)
     * @return ApiResponse&lt;TeamDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamDetail> apiPublicV1TeamPostWithHttpInfo(String xVOApiId, String xVOApiKey, AddTeamPayload body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1TeamPostValidateBeforeCall(xVOApiId, xVOApiKey, body, null);
        Type localVarReturnType = new TypeToken<TeamDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a team (asynchronously)
     * Add a team to your organization.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body The team information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamPostAsync(String xVOApiId, String xVOApiKey, AddTeamPayload body, final ApiCallback<TeamDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1TeamPostValidateBeforeCall(xVOApiId, xVOApiKey, body, _callback);
        Type localVarReturnType = new TypeToken<TeamDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1TeamTeamAdminsGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamAdminsGetCall(String xVOApiId, String xVOApiKey, String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/team/{team}/admins"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1TeamTeamAdminsGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1TeamTeamAdminsGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1TeamTeamAdminsGet(Async)");
        }

        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling apiPublicV1TeamTeamAdminsGet(Async)");
        }

        return apiPublicV1TeamTeamAdminsGetCall(xVOApiId, xVOApiKey, team, _callback);

    }

    /**
     * Retrieve a list of team admins for a team
     * Get the team admins for the specified team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team (required)
     * @return TeamAdminsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public TeamAdminsResponse apiPublicV1TeamTeamAdminsGet(String xVOApiId, String xVOApiKey, String team) throws ApiException {
        ApiResponse<TeamAdminsResponse> localVarResp = apiPublicV1TeamTeamAdminsGetWithHttpInfo(xVOApiId, xVOApiKey, team);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of team admins for a team
     * Get the team admins for the specified team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team (required)
     * @return ApiResponse&lt;TeamAdminsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamAdminsResponse> apiPublicV1TeamTeamAdminsGetWithHttpInfo(String xVOApiId, String xVOApiKey, String team) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1TeamTeamAdminsGetValidateBeforeCall(xVOApiId, xVOApiKey, team, null);
        Type localVarReturnType = new TypeToken<TeamAdminsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of team admins for a team (asynchronously)
     * Get the team admins for the specified team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamAdminsGetAsync(String xVOApiId, String xVOApiKey, String team, final ApiCallback<TeamAdminsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1TeamTeamAdminsGetValidateBeforeCall(xVOApiId, xVOApiKey, team, _callback);
        Type localVarReturnType = new TypeToken<TeamAdminsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1TeamTeamDelete
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> There was a problem with the delete such as the replacement team was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamDeleteCall(String xVOApiId, String xVOApiKey, String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/team/{team}"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1TeamTeamDeleteValidateBeforeCall(String xVOApiId, String xVOApiKey, String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1TeamTeamDelete(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1TeamTeamDelete(Async)");
        }

        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling apiPublicV1TeamTeamDelete(Async)");
        }

        return apiPublicV1TeamTeamDeleteCall(xVOApiId, xVOApiKey, team, _callback);

    }

    /**
     * Remove a team
     * Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> There was a problem with the delete such as the replacement team was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void apiPublicV1TeamTeamDelete(String xVOApiId, String xVOApiKey, String team) throws ApiException {
        apiPublicV1TeamTeamDeleteWithHttpInfo(xVOApiId, xVOApiKey, team);
    }

    /**
     * Remove a team
     * Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> There was a problem with the delete such as the replacement team was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiPublicV1TeamTeamDeleteWithHttpInfo(String xVOApiId, String xVOApiKey, String team) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1TeamTeamDeleteValidateBeforeCall(xVOApiId, xVOApiKey, team, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a team (asynchronously)
     * Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> There was a problem with the delete such as the replacement team was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamDeleteAsync(String xVOApiId, String xVOApiKey, String team, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1TeamTeamDeleteValidateBeforeCall(xVOApiId, xVOApiKey, team, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1TeamTeamGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamGetCall(String xVOApiId, String xVOApiKey, String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/team/{team}"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1TeamTeamGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1TeamTeamGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1TeamTeamGet(Async)");
        }

        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling apiPublicV1TeamTeamGet(Async)");
        }

        return apiPublicV1TeamTeamGetCall(xVOApiId, xVOApiKey, team, _callback);

    }

    /**
     * Retrieve information for a team
     * Get the information for the specified team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @return TeamDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public TeamDetail apiPublicV1TeamTeamGet(String xVOApiId, String xVOApiKey, String team) throws ApiException {
        ApiResponse<TeamDetail> localVarResp = apiPublicV1TeamTeamGetWithHttpInfo(xVOApiId, xVOApiKey, team);
        return localVarResp.getData();
    }

    /**
     * Retrieve information for a team
     * Get the information for the specified team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @return ApiResponse&lt;TeamDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamDetail> apiPublicV1TeamTeamGetWithHttpInfo(String xVOApiId, String xVOApiKey, String team) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1TeamTeamGetValidateBeforeCall(xVOApiId, xVOApiKey, team, null);
        Type localVarReturnType = new TypeToken<TeamDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve information for a team (asynchronously)
     * Get the information for the specified team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamGetAsync(String xVOApiId, String xVOApiKey, String team, final ApiCallback<TeamDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1TeamTeamGetValidateBeforeCall(xVOApiId, xVOApiKey, team, _callback);
        Type localVarReturnType = new TypeToken<TeamDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1TeamTeamMembersGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamMembersGetCall(String xVOApiId, String xVOApiKey, String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/team/{team}/members"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1TeamTeamMembersGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1TeamTeamMembersGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1TeamTeamMembersGet(Async)");
        }

        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling apiPublicV1TeamTeamMembersGet(Async)");
        }

        return apiPublicV1TeamTeamMembersGetCall(xVOApiId, xVOApiKey, team, _callback);

    }

    /**
     * Retrieve a list of members for a team
     * Get the members for the specified team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @return ListTeamMembersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamMembersResponse apiPublicV1TeamTeamMembersGet(String xVOApiId, String xVOApiKey, String team) throws ApiException {
        ApiResponse<ListTeamMembersResponse> localVarResp = apiPublicV1TeamTeamMembersGetWithHttpInfo(xVOApiId, xVOApiKey, team);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of members for a team
     * Get the members for the specified team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @return ApiResponse&lt;ListTeamMembersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTeamMembersResponse> apiPublicV1TeamTeamMembersGetWithHttpInfo(String xVOApiId, String xVOApiKey, String team) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1TeamTeamMembersGetValidateBeforeCall(xVOApiId, xVOApiKey, team, null);
        Type localVarReturnType = new TypeToken<ListTeamMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of members for a team (asynchronously)
     * Get the members for the specified team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamMembersGetAsync(String xVOApiId, String xVOApiKey, String team, final ApiCallback<ListTeamMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1TeamTeamMembersGetValidateBeforeCall(xVOApiId, xVOApiKey, team, _callback);
        Type localVarReturnType = new TypeToken<ListTeamMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1TeamTeamMembersPost
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamMembersPostCall(String xVOApiId, String xVOApiKey, String team, AddTeamMemberPayload body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/team/{team}/members"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1TeamTeamMembersPostValidateBeforeCall(String xVOApiId, String xVOApiKey, String team, AddTeamMemberPayload body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1TeamTeamMembersPost(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1TeamTeamMembersPost(Async)");
        }

        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling apiPublicV1TeamTeamMembersPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1TeamTeamMembersPost(Async)");
        }

        return apiPublicV1TeamTeamMembersPostCall(xVOApiId, xVOApiKey, team, body, _callback);

    }

    /**
     * Add a team member
     * Add a team member to your team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @param body  (required)
     * @return ListTeamMembersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamMembersResponse apiPublicV1TeamTeamMembersPost(String xVOApiId, String xVOApiKey, String team, AddTeamMemberPayload body) throws ApiException {
        ApiResponse<ListTeamMembersResponse> localVarResp = apiPublicV1TeamTeamMembersPostWithHttpInfo(xVOApiId, xVOApiKey, team, body);
        return localVarResp.getData();
    }

    /**
     * Add a team member
     * Add a team member to your team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @param body  (required)
     * @return ApiResponse&lt;ListTeamMembersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTeamMembersResponse> apiPublicV1TeamTeamMembersPostWithHttpInfo(String xVOApiId, String xVOApiKey, String team, AddTeamMemberPayload body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1TeamTeamMembersPostValidateBeforeCall(xVOApiId, xVOApiKey, team, body, null);
        Type localVarReturnType = new TypeToken<ListTeamMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a team member (asynchronously)
     * Add a team member to your team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamMembersPostAsync(String xVOApiId, String xVOApiKey, String team, AddTeamMemberPayload body, final ApiCallback<ListTeamMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1TeamTeamMembersPostValidateBeforeCall(xVOApiId, xVOApiKey, team, body, _callback);
        Type localVarReturnType = new TypeToken<ListTeamMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1TeamTeamMembersUserDelete
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to be deleted (required)
     * @param user The team member username (required)
     * @param body The user information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> There was a problem with the delete such as the replacement team member was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamMembersUserDeleteCall(String xVOApiId, String xVOApiKey, String team, String user, RemoveTeamMemberPayload body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/team/{team}/members/{user}"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1TeamTeamMembersUserDeleteValidateBeforeCall(String xVOApiId, String xVOApiKey, String team, String user, RemoveTeamMemberPayload body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1TeamTeamMembersUserDelete(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1TeamTeamMembersUserDelete(Async)");
        }

        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling apiPublicV1TeamTeamMembersUserDelete(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiPublicV1TeamTeamMembersUserDelete(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1TeamTeamMembersUserDelete(Async)");
        }

        return apiPublicV1TeamTeamMembersUserDeleteCall(xVOApiId, xVOApiKey, team, user, body, _callback);

    }

    /**
     * Remove a team member
     * Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to be deleted (required)
     * @param user The team member username (required)
     * @param body The user information (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> There was a problem with the delete such as the replacement team member was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void apiPublicV1TeamTeamMembersUserDelete(String xVOApiId, String xVOApiKey, String team, String user, RemoveTeamMemberPayload body) throws ApiException {
        apiPublicV1TeamTeamMembersUserDeleteWithHttpInfo(xVOApiId, xVOApiKey, team, user, body);
    }

    /**
     * Remove a team member
     * Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to be deleted (required)
     * @param user The team member username (required)
     * @param body The user information (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> There was a problem with the delete such as the replacement team member was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiPublicV1TeamTeamMembersUserDeleteWithHttpInfo(String xVOApiId, String xVOApiKey, String team, String user, RemoveTeamMemberPayload body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1TeamTeamMembersUserDeleteValidateBeforeCall(xVOApiId, xVOApiKey, team, user, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a team member (asynchronously)
     * Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to be deleted (required)
     * @param user The team member username (required)
     * @param body The user information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> There was a problem with the delete such as the replacement team member was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamMembersUserDeleteAsync(String xVOApiId, String xVOApiKey, String team, String user, RemoveTeamMemberPayload body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1TeamTeamMembersUserDeleteValidateBeforeCall(xVOApiId, xVOApiKey, team, user, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1TeamTeamPoliciesGet_0
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The escalation policy list. This does not include details about the actual notification steps of the policy. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamPoliciesGet_0Call(String xVOApiId, String xVOApiKey, String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/team/{team}/policies"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1TeamTeamPoliciesGet_0ValidateBeforeCall(String xVOApiId, String xVOApiKey, String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1TeamTeamPoliciesGet_0(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1TeamTeamPoliciesGet_0(Async)");
        }

        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling apiPublicV1TeamTeamPoliciesGet_0(Async)");
        }

        return apiPublicV1TeamTeamPoliciesGet_0Call(xVOApiId, xVOApiKey, team, _callback);

    }

    /**
     * Retrieve a list of escalation policies for a team
     * Get the escalation policies for the specified team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @return EscalationPolicyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The escalation policy list. This does not include details about the actual notification steps of the policy. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public EscalationPolicyList apiPublicV1TeamTeamPoliciesGet_0(String xVOApiId, String xVOApiKey, String team) throws ApiException {
        ApiResponse<EscalationPolicyList> localVarResp = apiPublicV1TeamTeamPoliciesGet_0WithHttpInfo(xVOApiId, xVOApiKey, team);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of escalation policies for a team
     * Get the escalation policies for the specified team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @return ApiResponse&lt;EscalationPolicyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The escalation policy list. This does not include details about the actual notification steps of the policy. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EscalationPolicyList> apiPublicV1TeamTeamPoliciesGet_0WithHttpInfo(String xVOApiId, String xVOApiKey, String team) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1TeamTeamPoliciesGet_0ValidateBeforeCall(xVOApiId, xVOApiKey, team, null);
        Type localVarReturnType = new TypeToken<EscalationPolicyList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of escalation policies for a team (asynchronously)
     * Get the escalation policies for the specified team.  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The escalation policy list. This does not include details about the actual notification steps of the policy. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamPoliciesGet_0Async(String xVOApiId, String xVOApiKey, String team, final ApiCallback<EscalationPolicyList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1TeamTeamPoliciesGet_0ValidateBeforeCall(xVOApiId, xVOApiKey, team, _callback);
        Type localVarReturnType = new TypeToken<EscalationPolicyList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1TeamTeamPut
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to be updated (required)
     * @param body The team information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamPutCall(String xVOApiId, String xVOApiKey, String team, AddTeamPayload body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/team/{team}"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1TeamTeamPutValidateBeforeCall(String xVOApiId, String xVOApiKey, String team, AddTeamPayload body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1TeamTeamPut(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1TeamTeamPut(Async)");
        }

        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling apiPublicV1TeamTeamPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1TeamTeamPut(Async)");
        }

        return apiPublicV1TeamTeamPutCall(xVOApiId, xVOApiKey, team, body, _callback);

    }

    /**
     * Update a team
     * Update the designated team  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to be updated (required)
     * @param body The team information (required)
     * @return TeamDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public TeamDetail apiPublicV1TeamTeamPut(String xVOApiId, String xVOApiKey, String team, AddTeamPayload body) throws ApiException {
        ApiResponse<TeamDetail> localVarResp = apiPublicV1TeamTeamPutWithHttpInfo(xVOApiId, xVOApiKey, team, body);
        return localVarResp.getData();
    }

    /**
     * Update a team
     * Update the designated team  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to be updated (required)
     * @param body The team information (required)
     * @return ApiResponse&lt;TeamDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamDetail> apiPublicV1TeamTeamPutWithHttpInfo(String xVOApiId, String xVOApiKey, String team, AddTeamPayload body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1TeamTeamPutValidateBeforeCall(xVOApiId, xVOApiKey, team, body, null);
        Type localVarReturnType = new TypeToken<TeamDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a team (asynchronously)
     * Update the designated team  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param team The VictorOps team to be updated (required)
     * @param body The team information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Some details about the team that was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Team name or email is unavailable, or you have reached your team limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1TeamTeamPutAsync(String xVOApiId, String xVOApiKey, String team, AddTeamPayload body, final ApiCallback<TeamDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1TeamTeamPutValidateBeforeCall(xVOApiId, xVOApiKey, team, body, _callback);
        Type localVarReturnType = new TypeToken<TeamDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
