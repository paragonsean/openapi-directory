/*
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListRoutingKeysResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoutingKeysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoutingKeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoutingKeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiPublicV1OrgRoutingKeysGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of routing keys and associated teams </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OrgRoutingKeysGetCall(String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/org/routing-keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1OrgRoutingKeysGetValidateBeforeCall(String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1OrgRoutingKeysGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1OrgRoutingKeysGet(Async)");
        }

        return apiPublicV1OrgRoutingKeysGetCall(xVOApiId, xVOApiKey, _callback);

    }

    /**
     * List routing keys with associated teams
     * Retrieves a list of routing keys and associated teams. This API may be called a maximum of 60 times per minute.
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ListRoutingKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of routing keys and associated teams </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ListRoutingKeysResponse apiPublicV1OrgRoutingKeysGet(String xVOApiId, String xVOApiKey) throws ApiException {
        ApiResponse<ListRoutingKeysResponse> localVarResp = apiPublicV1OrgRoutingKeysGetWithHttpInfo(xVOApiId, xVOApiKey);
        return localVarResp.getData();
    }

    /**
     * List routing keys with associated teams
     * Retrieves a list of routing keys and associated teams. This API may be called a maximum of 60 times per minute.
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ApiResponse&lt;ListRoutingKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of routing keys and associated teams </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRoutingKeysResponse> apiPublicV1OrgRoutingKeysGetWithHttpInfo(String xVOApiId, String xVOApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1OrgRoutingKeysGetValidateBeforeCall(xVOApiId, xVOApiKey, null);
        Type localVarReturnType = new TypeToken<ListRoutingKeysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List routing keys with associated teams (asynchronously)
     * Retrieves a list of routing keys and associated teams. This API may be called a maximum of 60 times per minute.
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of routing keys and associated teams </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OrgRoutingKeysGetAsync(String xVOApiId, String xVOApiKey, final ApiCallback<ListRoutingKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1OrgRoutingKeysGetValidateBeforeCall(xVOApiId, xVOApiKey, _callback);
        Type localVarReturnType = new TypeToken<ListRoutingKeysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
