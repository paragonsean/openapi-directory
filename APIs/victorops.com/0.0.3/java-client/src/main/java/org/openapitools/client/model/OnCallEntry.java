/*
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OnCallRoll;
import org.openapitools.client.model.OnCallType;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OnCallEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:27.682448-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OnCallEntry {
  public static final String SERIALIZED_NAME_ON_CALL_TYPE = "onCallType";
  @SerializedName(SERIALIZED_NAME_ON_CALL_TYPE)
  private OnCallType onCallType;

  public static final String SERIALIZED_NAME_ON_CALL_USER = "onCallUser";
  @SerializedName(SERIALIZED_NAME_ON_CALL_USER)
  private User onCallUser;

  public static final String SERIALIZED_NAME_OVERRIDE_ON_CALL_USER = "overrideOnCallUser";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_ON_CALL_USER)
  private User overrideOnCallUser;

  public static final String SERIALIZED_NAME_ROLLS = "rolls";
  @SerializedName(SERIALIZED_NAME_ROLLS)
  private List<OnCallRoll> rolls = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTATION_NAME = "rotationName";
  @SerializedName(SERIALIZED_NAME_ROTATION_NAME)
  private String rotationName;

  public static final String SERIALIZED_NAME_SHIFT_NAME = "shiftName";
  @SerializedName(SERIALIZED_NAME_SHIFT_NAME)
  private String shiftName;

  public static final String SERIALIZED_NAME_SHIFT_ROLL = "shiftRoll";
  @SerializedName(SERIALIZED_NAME_SHIFT_ROLL)
  private String shiftRoll;

  public OnCallEntry() {
  }

  public OnCallEntry onCallType(OnCallType onCallType) {
    this.onCallType = onCallType;
    return this;
  }

  /**
   * Get onCallType
   * @return onCallType
   */
  @javax.annotation.Nonnull
  public OnCallType getOnCallType() {
    return onCallType;
  }

  public void setOnCallType(OnCallType onCallType) {
    this.onCallType = onCallType;
  }


  public OnCallEntry onCallUser(User onCallUser) {
    this.onCallUser = onCallUser;
    return this;
  }

  /**
   * Get onCallUser
   * @return onCallUser
   */
  @javax.annotation.Nullable
  public User getOnCallUser() {
    return onCallUser;
  }

  public void setOnCallUser(User onCallUser) {
    this.onCallUser = onCallUser;
  }


  public OnCallEntry overrideOnCallUser(User overrideOnCallUser) {
    this.overrideOnCallUser = overrideOnCallUser;
    return this;
  }

  /**
   * Get overrideOnCallUser
   * @return overrideOnCallUser
   */
  @javax.annotation.Nullable
  public User getOverrideOnCallUser() {
    return overrideOnCallUser;
  }

  public void setOverrideOnCallUser(User overrideOnCallUser) {
    this.overrideOnCallUser = overrideOnCallUser;
  }


  public OnCallEntry rolls(List<OnCallRoll> rolls) {
    this.rolls = rolls;
    return this;
  }

  public OnCallEntry addRollsItem(OnCallRoll rollsItem) {
    if (this.rolls == null) {
      this.rolls = new ArrayList<>();
    }
    this.rolls.add(rollsItem);
    return this;
  }

  /**
   * Get rolls
   * @return rolls
   */
  @javax.annotation.Nonnull
  public List<OnCallRoll> getRolls() {
    return rolls;
  }

  public void setRolls(List<OnCallRoll> rolls) {
    this.rolls = rolls;
  }


  public OnCallEntry rotationName(String rotationName) {
    this.rotationName = rotationName;
    return this;
  }

  /**
   * Get rotationName
   * @return rotationName
   */
  @javax.annotation.Nullable
  public String getRotationName() {
    return rotationName;
  }

  public void setRotationName(String rotationName) {
    this.rotationName = rotationName;
  }


  public OnCallEntry shiftName(String shiftName) {
    this.shiftName = shiftName;
    return this;
  }

  /**
   * Get shiftName
   * @return shiftName
   */
  @javax.annotation.Nullable
  public String getShiftName() {
    return shiftName;
  }

  public void setShiftName(String shiftName) {
    this.shiftName = shiftName;
  }


  public OnCallEntry shiftRoll(String shiftRoll) {
    this.shiftRoll = shiftRoll;
    return this;
  }

  /**
   * The shift roll time (ISO 8601)
   * @return shiftRoll
   */
  @javax.annotation.Nullable
  public String getShiftRoll() {
    return shiftRoll;
  }

  public void setShiftRoll(String shiftRoll) {
    this.shiftRoll = shiftRoll;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnCallEntry onCallEntry = (OnCallEntry) o;
    return Objects.equals(this.onCallType, onCallEntry.onCallType) &&
        Objects.equals(this.onCallUser, onCallEntry.onCallUser) &&
        Objects.equals(this.overrideOnCallUser, onCallEntry.overrideOnCallUser) &&
        Objects.equals(this.rolls, onCallEntry.rolls) &&
        Objects.equals(this.rotationName, onCallEntry.rotationName) &&
        Objects.equals(this.shiftName, onCallEntry.shiftName) &&
        Objects.equals(this.shiftRoll, onCallEntry.shiftRoll);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onCallType, onCallUser, overrideOnCallUser, rolls, rotationName, shiftName, shiftRoll);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnCallEntry {\n");
    sb.append("    onCallType: ").append(toIndentedString(onCallType)).append("\n");
    sb.append("    onCallUser: ").append(toIndentedString(onCallUser)).append("\n");
    sb.append("    overrideOnCallUser: ").append(toIndentedString(overrideOnCallUser)).append("\n");
    sb.append("    rolls: ").append(toIndentedString(rolls)).append("\n");
    sb.append("    rotationName: ").append(toIndentedString(rotationName)).append("\n");
    sb.append("    shiftName: ").append(toIndentedString(shiftName)).append("\n");
    sb.append("    shiftRoll: ").append(toIndentedString(shiftRoll)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("onCallType");
    openapiFields.add("onCallUser");
    openapiFields.add("overrideOnCallUser");
    openapiFields.add("rolls");
    openapiFields.add("rotationName");
    openapiFields.add("shiftName");
    openapiFields.add("shiftRoll");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("onCallType");
    openapiRequiredFields.add("rolls");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OnCallEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnCallEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnCallEntry is not found in the empty JSON string", OnCallEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OnCallEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OnCallEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OnCallEntry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `onCallType`
      OnCallType.validateJsonElement(jsonObj.get("onCallType"));
      // validate the optional field `onCallUser`
      if (jsonObj.get("onCallUser") != null && !jsonObj.get("onCallUser").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("onCallUser"));
      }
      // validate the optional field `overrideOnCallUser`
      if (jsonObj.get("overrideOnCallUser") != null && !jsonObj.get("overrideOnCallUser").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("overrideOnCallUser"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("rolls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolls` to be an array in the JSON string but got `%s`", jsonObj.get("rolls").toString()));
      }

      JsonArray jsonArrayrolls = jsonObj.getAsJsonArray("rolls");
      // validate the required field `rolls` (array)
      for (int i = 0; i < jsonArrayrolls.size(); i++) {
        OnCallRoll.validateJsonElement(jsonArrayrolls.get(i));
      };
      if ((jsonObj.get("rotationName") != null && !jsonObj.get("rotationName").isJsonNull()) && !jsonObj.get("rotationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotationName").toString()));
      }
      if ((jsonObj.get("shiftName") != null && !jsonObj.get("shiftName").isJsonNull()) && !jsonObj.get("shiftName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shiftName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shiftName").toString()));
      }
      if ((jsonObj.get("shiftRoll") != null && !jsonObj.get("shiftRoll").isJsonNull()) && !jsonObj.get("shiftRoll").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shiftRoll` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shiftRoll").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnCallEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnCallEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnCallEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnCallEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<OnCallEntry>() {
           @Override
           public void write(JsonWriter out, OnCallEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnCallEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OnCallEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OnCallEntry
   * @throws IOException if the JSON string is invalid with respect to OnCallEntry
   */
  public static OnCallEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnCallEntry.class);
  }

  /**
   * Convert an instance of OnCallEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

