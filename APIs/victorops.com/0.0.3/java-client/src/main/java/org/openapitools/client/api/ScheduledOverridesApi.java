/*
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiPublicV1OverridesGet200Response;
import org.openapitools.client.model.ApiPublicV1OverridesPost200Response;
import org.openapitools.client.model.ApiPublicV1OverridesPublicIdGet200Response;
import org.openapitools.client.model.Assignment;
import org.openapitools.client.model.ScheduledOverridePayload;
import org.openapitools.client.model.UpdateAssignment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScheduledOverridesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScheduledOverridesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduledOverridesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiPublicV1OverridesGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of scheduled overrides for your organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesGetCall(String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/overrides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1OverridesGetValidateBeforeCall(String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1OverridesGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1OverridesGet(Async)");
        }

        return apiPublicV1OverridesGetCall(xVOApiId, xVOApiKey, _callback);

    }

    /**
     * List the scheduled overrides
     * List all the scheduled overrides on the organization  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ApiPublicV1OverridesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of scheduled overrides for your organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiPublicV1OverridesGet200Response apiPublicV1OverridesGet(String xVOApiId, String xVOApiKey) throws ApiException {
        ApiResponse<ApiPublicV1OverridesGet200Response> localVarResp = apiPublicV1OverridesGetWithHttpInfo(xVOApiId, xVOApiKey);
        return localVarResp.getData();
    }

    /**
     * List the scheduled overrides
     * List all the scheduled overrides on the organization  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ApiResponse&lt;ApiPublicV1OverridesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of scheduled overrides for your organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiPublicV1OverridesGet200Response> apiPublicV1OverridesGetWithHttpInfo(String xVOApiId, String xVOApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1OverridesGetValidateBeforeCall(xVOApiId, xVOApiKey, null);
        Type localVarReturnType = new TypeToken<ApiPublicV1OverridesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the scheduled overrides (asynchronously)
     * List all the scheduled overrides on the organization  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of scheduled overrides for your organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesGetAsync(String xVOApiId, String xVOApiKey, final ApiCallback<ApiPublicV1OverridesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1OverridesGetValidateBeforeCall(xVOApiId, xVOApiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiPublicV1OverridesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1OverridesPost
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created scheduled override </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPostCall(String xVOApiId, String xVOApiKey, ScheduledOverridePayload body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/overrides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1OverridesPostValidateBeforeCall(String xVOApiId, String xVOApiKey, ScheduledOverridePayload body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1OverridesPost(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1OverridesPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1OverridesPost(Async)");
        }

        return apiPublicV1OverridesPostCall(xVOApiId, xVOApiKey, body, _callback);

    }

    /**
     * Creates a new scheduled override
     * Creates a new scheduled override. Start and end dates are in ISO8601 format. E.g. &#x60;2018-09-28&#39;T&#39;05:00:00Z&#x60;  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @return ApiPublicV1OverridesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created scheduled override </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiPublicV1OverridesPost200Response apiPublicV1OverridesPost(String xVOApiId, String xVOApiKey, ScheduledOverridePayload body) throws ApiException {
        ApiResponse<ApiPublicV1OverridesPost200Response> localVarResp = apiPublicV1OverridesPostWithHttpInfo(xVOApiId, xVOApiKey, body);
        return localVarResp.getData();
    }

    /**
     * Creates a new scheduled override
     * Creates a new scheduled override. Start and end dates are in ISO8601 format. E.g. &#x60;2018-09-28&#39;T&#39;05:00:00Z&#x60;  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @return ApiResponse&lt;ApiPublicV1OverridesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created scheduled override </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiPublicV1OverridesPost200Response> apiPublicV1OverridesPostWithHttpInfo(String xVOApiId, String xVOApiKey, ScheduledOverridePayload body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1OverridesPostValidateBeforeCall(xVOApiId, xVOApiKey, body, null);
        Type localVarReturnType = new TypeToken<ApiPublicV1OverridesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new scheduled override (asynchronously)
     * Creates a new scheduled override. Start and end dates are in ISO8601 format. E.g. &#x60;2018-09-28&#39;T&#39;05:00:00Z&#x60;  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created scheduled override </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPostAsync(String xVOApiId, String xVOApiKey, ScheduledOverridePayload body, final ApiCallback<ApiPublicV1OverridesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1OverridesPostValidateBeforeCall(xVOApiId, xVOApiKey, body, _callback);
        Type localVarReturnType = new TypeToken<ApiPublicV1OverridesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1OverridesPublicIdAssignmentsGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignments for a given scheduled override </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPublicIdAssignmentsGetCall(String xVOApiId, String xVOApiKey, String publicId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/overrides/{publicId}/assignments"
            .replace("{" + "publicId" + "}", localVarApiClient.escapeString(publicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1OverridesPublicIdAssignmentsGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String publicId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1OverridesPublicIdAssignmentsGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1OverridesPublicIdAssignmentsGet(Async)");
        }

        // verify the required parameter 'publicId' is set
        if (publicId == null) {
            throw new ApiException("Missing the required parameter 'publicId' when calling apiPublicV1OverridesPublicIdAssignmentsGet(Async)");
        }

        return apiPublicV1OverridesPublicIdAssignmentsGetCall(xVOApiId, xVOApiKey, publicId, _callback);

    }

    /**
     * Get the specified scheduled override
     * Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @return List&lt;Assignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignments for a given scheduled override </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Assignment> apiPublicV1OverridesPublicIdAssignmentsGet(String xVOApiId, String xVOApiKey, String publicId) throws ApiException {
        ApiResponse<List<Assignment>> localVarResp = apiPublicV1OverridesPublicIdAssignmentsGetWithHttpInfo(xVOApiId, xVOApiKey, publicId);
        return localVarResp.getData();
    }

    /**
     * Get the specified scheduled override
     * Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @return ApiResponse&lt;List&lt;Assignment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignments for a given scheduled override </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Assignment>> apiPublicV1OverridesPublicIdAssignmentsGetWithHttpInfo(String xVOApiId, String xVOApiKey, String publicId) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1OverridesPublicIdAssignmentsGetValidateBeforeCall(xVOApiId, xVOApiKey, publicId, null);
        Type localVarReturnType = new TypeToken<List<Assignment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the specified scheduled override (asynchronously)
     * Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignments for a given scheduled override </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPublicIdAssignmentsGetAsync(String xVOApiId, String xVOApiKey, String publicId, final ApiCallback<List<Assignment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1OverridesPublicIdAssignmentsGetValidateBeforeCall(xVOApiId, xVOApiKey, publicId, _callback);
        Type localVarReturnType = new TypeToken<List<Assignment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param policySlug The policySlug of the assignment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment that was deleted for the given scheduled override and policySlug </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteCall(String xVOApiId, String xVOApiKey, String publicId, String policySlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/overrides/{publicId}/assignments/{policySlug}"
            .replace("{" + "publicId" + "}", localVarApiClient.escapeString(publicId.toString()))
            .replace("{" + "policySlug" + "}", localVarApiClient.escapeString(policySlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteValidateBeforeCall(String xVOApiId, String xVOApiKey, String publicId, String policySlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete(Async)");
        }

        // verify the required parameter 'publicId' is set
        if (publicId == null) {
            throw new ApiException("Missing the required parameter 'publicId' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete(Async)");
        }

        // verify the required parameter 'policySlug' is set
        if (policySlug == null) {
            throw new ApiException("Missing the required parameter 'policySlug' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete(Async)");
        }

        return apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteCall(xVOApiId, xVOApiKey, publicId, policySlug, _callback);

    }

    /**
     * Delete the scheduled override assignment
     * Delete the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param policySlug The policySlug of the assignment (required)
     * @return Assignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment that was deleted for the given scheduled override and policySlug </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Assignment apiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete(String xVOApiId, String xVOApiKey, String publicId, String policySlug) throws ApiException {
        ApiResponse<Assignment> localVarResp = apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteWithHttpInfo(xVOApiId, xVOApiKey, publicId, policySlug);
        return localVarResp.getData();
    }

    /**
     * Delete the scheduled override assignment
     * Delete the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param policySlug The policySlug of the assignment (required)
     * @return ApiResponse&lt;Assignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment that was deleted for the given scheduled override and policySlug </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assignment> apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteWithHttpInfo(String xVOApiId, String xVOApiKey, String publicId, String policySlug) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteValidateBeforeCall(xVOApiId, xVOApiKey, publicId, policySlug, null);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the scheduled override assignment (asynchronously)
     * Delete the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param policySlug The policySlug of the assignment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment that was deleted for the given scheduled override and policySlug </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteAsync(String xVOApiId, String xVOApiKey, String publicId, String policySlug, final ApiCallback<Assignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteValidateBeforeCall(xVOApiId, xVOApiKey, publicId, policySlug, _callback);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1OverridesPublicIdAssignmentsPolicySlugGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param policySlug The policySlug of the assignment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment for the given publicId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetCall(String xVOApiId, String xVOApiKey, String publicId, String policySlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/overrides/{publicId}/assignments/{policySlug}"
            .replace("{" + "publicId" + "}", localVarApiClient.escapeString(publicId.toString()))
            .replace("{" + "policySlug" + "}", localVarApiClient.escapeString(policySlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String publicId, String policySlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugGet(Async)");
        }

        // verify the required parameter 'publicId' is set
        if (publicId == null) {
            throw new ApiException("Missing the required parameter 'publicId' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugGet(Async)");
        }

        // verify the required parameter 'policySlug' is set
        if (policySlug == null) {
            throw new ApiException("Missing the required parameter 'policySlug' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugGet(Async)");
        }

        return apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetCall(xVOApiId, xVOApiKey, publicId, policySlug, _callback);

    }

    /**
     * Get the specified scheduled override assignment
     * Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param policySlug The policySlug of the assignment (required)
     * @return Assignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment for the given publicId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Assignment apiPublicV1OverridesPublicIdAssignmentsPolicySlugGet(String xVOApiId, String xVOApiKey, String publicId, String policySlug) throws ApiException {
        ApiResponse<Assignment> localVarResp = apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetWithHttpInfo(xVOApiId, xVOApiKey, publicId, policySlug);
        return localVarResp.getData();
    }

    /**
     * Get the specified scheduled override assignment
     * Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param policySlug The policySlug of the assignment (required)
     * @return ApiResponse&lt;Assignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment for the given publicId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assignment> apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetWithHttpInfo(String xVOApiId, String xVOApiKey, String publicId, String policySlug) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetValidateBeforeCall(xVOApiId, xVOApiKey, publicId, policySlug, null);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the specified scheduled override assignment (asynchronously)
     * Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param policySlug The policySlug of the assignment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment for the given publicId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetAsync(String xVOApiId, String xVOApiKey, String publicId, String policySlug, final ApiCallback<Assignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1OverridesPublicIdAssignmentsPolicySlugGetValidateBeforeCall(xVOApiId, xVOApiKey, publicId, policySlug, _callback);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param policySlug The policySlug of the assignment (required)
     * @param body The policy and username we are assigning (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment for the given policySlug </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutCall(String xVOApiId, String xVOApiKey, String publicId, String policySlug, UpdateAssignment body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/overrides/{publicId}/assignments/{policySlug}"
            .replace("{" + "publicId" + "}", localVarApiClient.escapeString(publicId.toString()))
            .replace("{" + "policySlug" + "}", localVarApiClient.escapeString(policySlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutValidateBeforeCall(String xVOApiId, String xVOApiKey, String publicId, String policySlug, UpdateAssignment body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut(Async)");
        }

        // verify the required parameter 'publicId' is set
        if (publicId == null) {
            throw new ApiException("Missing the required parameter 'publicId' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut(Async)");
        }

        // verify the required parameter 'policySlug' is set
        if (policySlug == null) {
            throw new ApiException("Missing the required parameter 'policySlug' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut(Async)");
        }

        return apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutCall(xVOApiId, xVOApiKey, publicId, policySlug, body, _callback);

    }

    /**
     * Update the scheduled override assignment
     * Update the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param policySlug The policySlug of the assignment (required)
     * @param body The policy and username we are assigning (required)
     * @return Assignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment for the given policySlug </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Assignment apiPublicV1OverridesPublicIdAssignmentsPolicySlugPut(String xVOApiId, String xVOApiKey, String publicId, String policySlug, UpdateAssignment body) throws ApiException {
        ApiResponse<Assignment> localVarResp = apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutWithHttpInfo(xVOApiId, xVOApiKey, publicId, policySlug, body);
        return localVarResp.getData();
    }

    /**
     * Update the scheduled override assignment
     * Update the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param policySlug The policySlug of the assignment (required)
     * @param body The policy and username we are assigning (required)
     * @return ApiResponse&lt;Assignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment for the given policySlug </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assignment> apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutWithHttpInfo(String xVOApiId, String xVOApiKey, String publicId, String policySlug, UpdateAssignment body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutValidateBeforeCall(xVOApiId, xVOApiKey, publicId, policySlug, body, null);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the scheduled override assignment (asynchronously)
     * Update the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param policySlug The policySlug of the assignment (required)
     * @param body The policy and username we are assigning (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment for the given policySlug </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutAsync(String xVOApiId, String xVOApiKey, String publicId, String policySlug, UpdateAssignment body, final ApiCallback<Assignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1OverridesPublicIdAssignmentsPolicySlugPutValidateBeforeCall(xVOApiId, xVOApiKey, publicId, policySlug, body, _callback);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1OverridesPublicIdDelete
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Whether or not the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPublicIdDeleteCall(String xVOApiId, String xVOApiKey, String publicId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/overrides/{publicId}"
            .replace("{" + "publicId" + "}", localVarApiClient.escapeString(publicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1OverridesPublicIdDeleteValidateBeforeCall(String xVOApiId, String xVOApiKey, String publicId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1OverridesPublicIdDelete(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1OverridesPublicIdDelete(Async)");
        }

        // verify the required parameter 'publicId' is set
        if (publicId == null) {
            throw new ApiException("Missing the required parameter 'publicId' when calling apiPublicV1OverridesPublicIdDelete(Async)");
        }

        return apiPublicV1OverridesPublicIdDeleteCall(xVOApiId, xVOApiKey, publicId, _callback);

    }

    /**
     * Deletes a scheduled override
     * Deletes a scheduled override  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Whether or not the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void apiPublicV1OverridesPublicIdDelete(String xVOApiId, String xVOApiKey, String publicId) throws ApiException {
        apiPublicV1OverridesPublicIdDeleteWithHttpInfo(xVOApiId, xVOApiKey, publicId);
    }

    /**
     * Deletes a scheduled override
     * Deletes a scheduled override  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Whether or not the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiPublicV1OverridesPublicIdDeleteWithHttpInfo(String xVOApiId, String xVOApiKey, String publicId) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1OverridesPublicIdDeleteValidateBeforeCall(xVOApiId, xVOApiKey, publicId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a scheduled override (asynchronously)
     * Deletes a scheduled override  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Whether or not the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPublicIdDeleteAsync(String xVOApiId, String xVOApiKey, String publicId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1OverridesPublicIdDeleteValidateBeforeCall(xVOApiId, xVOApiKey, publicId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1OverridesPublicIdGet
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The scheduled override </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPublicIdGetCall(String xVOApiId, String xVOApiKey, String publicId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/overrides/{publicId}"
            .replace("{" + "publicId" + "}", localVarApiClient.escapeString(publicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1OverridesPublicIdGetValidateBeforeCall(String xVOApiId, String xVOApiKey, String publicId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1OverridesPublicIdGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1OverridesPublicIdGet(Async)");
        }

        // verify the required parameter 'publicId' is set
        if (publicId == null) {
            throw new ApiException("Missing the required parameter 'publicId' when calling apiPublicV1OverridesPublicIdGet(Async)");
        }

        return apiPublicV1OverridesPublicIdGetCall(xVOApiId, xVOApiKey, publicId, _callback);

    }

    /**
     * Get the specified scheduled override
     * Get the specified scheduled override  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @return ApiPublicV1OverridesPublicIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The scheduled override </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiPublicV1OverridesPublicIdGet200Response apiPublicV1OverridesPublicIdGet(String xVOApiId, String xVOApiKey, String publicId) throws ApiException {
        ApiResponse<ApiPublicV1OverridesPublicIdGet200Response> localVarResp = apiPublicV1OverridesPublicIdGetWithHttpInfo(xVOApiId, xVOApiKey, publicId);
        return localVarResp.getData();
    }

    /**
     * Get the specified scheduled override
     * Get the specified scheduled override  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @return ApiResponse&lt;ApiPublicV1OverridesPublicIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The scheduled override </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiPublicV1OverridesPublicIdGet200Response> apiPublicV1OverridesPublicIdGetWithHttpInfo(String xVOApiId, String xVOApiKey, String publicId) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1OverridesPublicIdGetValidateBeforeCall(xVOApiId, xVOApiKey, publicId, null);
        Type localVarReturnType = new TypeToken<ApiPublicV1OverridesPublicIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the specified scheduled override (asynchronously)
     * Get the specified scheduled override  This API may be called a maximum of 60 times per minute. 
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param publicId The publicId of the scheduled override (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The scheduled override </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Path not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You have reached your user limit.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1OverridesPublicIdGetAsync(String xVOApiId, String xVOApiKey, String publicId, final ApiCallback<ApiPublicV1OverridesPublicIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1OverridesPublicIdGetValidateBeforeCall(xVOApiId, xVOApiKey, publicId, _callback);
        Type localVarReturnType = new TypeToken<ApiPublicV1OverridesPublicIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
