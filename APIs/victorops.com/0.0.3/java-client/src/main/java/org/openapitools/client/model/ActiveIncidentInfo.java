/*
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EscalationPolicyInfo;
import org.openapitools.client.model.IncidentTransition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Incidents contain the following fields (all should be considered optional)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:27.682448-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActiveIncidentInfo {
  public static final String SERIALIZED_NAME_ALERT_COUNT = "alertCount";
  @SerializedName(SERIALIZED_NAME_ALERT_COUNT)
  private BigDecimal alertCount;

  public static final String SERIALIZED_NAME_CURRENT_PHASE = "currentPhase";
  @SerializedName(SERIALIZED_NAME_CURRENT_PHASE)
  private String currentPhase;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_INCIDENT_NUMBER = "incidentNumber";
  @SerializedName(SERIALIZED_NAME_INCIDENT_NUMBER)
  private String incidentNumber;

  public static final String SERIALIZED_NAME_LAST_ALERT_ID = "lastAlertId";
  @SerializedName(SERIALIZED_NAME_LAST_ALERT_ID)
  private String lastAlertId;

  public static final String SERIALIZED_NAME_LAST_ALERT_TIME = "lastAlertTime";
  @SerializedName(SERIALIZED_NAME_LAST_ALERT_TIME)
  private String lastAlertTime;

  public static final String SERIALIZED_NAME_PAGED_POLICIES = "pagedPolicies";
  @SerializedName(SERIALIZED_NAME_PAGED_POLICIES)
  private List<EscalationPolicyInfo> pagedPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGED_TEAMS = "pagedTeams";
  @SerializedName(SERIALIZED_NAME_PAGED_TEAMS)
  private List<String> pagedTeams = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGED_USERS = "pagedUsers";
  @SerializedName(SERIALIZED_NAME_PAGED_USERS)
  private List<String> pagedUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TRANSITIONS = "transitions";
  @SerializedName(SERIALIZED_NAME_TRANSITIONS)
  private List<IncidentTransition> transitions = new ArrayList<>();

  public ActiveIncidentInfo() {
  }

  public ActiveIncidentInfo alertCount(BigDecimal alertCount) {
    this.alertCount = alertCount;
    return this;
  }

  /**
   * The number of alerts received for this incident
   * @return alertCount
   */
  @javax.annotation.Nullable
  public BigDecimal getAlertCount() {
    return alertCount;
  }

  public void setAlertCount(BigDecimal alertCount) {
    this.alertCount = alertCount;
  }


  public ActiveIncidentInfo currentPhase(String currentPhase) {
    this.currentPhase = currentPhase;
    return this;
  }

  /**
   * The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;.
   * @return currentPhase
   */
  @javax.annotation.Nullable
  public String getCurrentPhase() {
    return currentPhase;
  }

  public void setCurrentPhase(String currentPhase) {
    this.currentPhase = currentPhase;
  }


  public ActiveIncidentInfo entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * The unique identification of the entity being monitored that caused the incident
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public ActiveIncidentInfo host(String host) {
    this.host = host;
    return this;
  }

  /**
   * The host on which the incident occurred
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public ActiveIncidentInfo incidentNumber(String incidentNumber) {
    this.incidentNumber = incidentNumber;
    return this;
  }

  /**
   * The VictorOps incident number
   * @return incidentNumber
   */
  @javax.annotation.Nullable
  public String getIncidentNumber() {
    return incidentNumber;
  }

  public void setIncidentNumber(String incidentNumber) {
    this.incidentNumber = incidentNumber;
  }


  public ActiveIncidentInfo lastAlertId(String lastAlertId) {
    this.lastAlertId = lastAlertId;
    return this;
  }

  /**
   * The unique id of the last alert for the incident
   * @return lastAlertId
   */
  @javax.annotation.Nullable
  public String getLastAlertId() {
    return lastAlertId;
  }

  public void setLastAlertId(String lastAlertId) {
    this.lastAlertId = lastAlertId;
  }


  public ActiveIncidentInfo lastAlertTime(String lastAlertTime) {
    this.lastAlertTime = lastAlertTime;
    return this;
  }

  /**
   * The time of the last alert received for the incident
   * @return lastAlertTime
   */
  @javax.annotation.Nullable
  public String getLastAlertTime() {
    return lastAlertTime;
  }

  public void setLastAlertTime(String lastAlertTime) {
    this.lastAlertTime = lastAlertTime;
  }


  public ActiveIncidentInfo pagedPolicies(List<EscalationPolicyInfo> pagedPolicies) {
    this.pagedPolicies = pagedPolicies;
    return this;
  }

  public ActiveIncidentInfo addPagedPoliciesItem(EscalationPolicyInfo pagedPoliciesItem) {
    if (this.pagedPolicies == null) {
      this.pagedPolicies = new ArrayList<>();
    }
    this.pagedPolicies.add(pagedPoliciesItem);
    return this;
  }

  /**
   * The escalation policies that were triggered for the incident
   * @return pagedPolicies
   */
  @javax.annotation.Nullable
  public List<EscalationPolicyInfo> getPagedPolicies() {
    return pagedPolicies;
  }

  public void setPagedPolicies(List<EscalationPolicyInfo> pagedPolicies) {
    this.pagedPolicies = pagedPolicies;
  }


  public ActiveIncidentInfo pagedTeams(List<String> pagedTeams) {
    this.pagedTeams = pagedTeams;
    return this;
  }

  public ActiveIncidentInfo addPagedTeamsItem(String pagedTeamsItem) {
    if (this.pagedTeams == null) {
      this.pagedTeams = new ArrayList<>();
    }
    this.pagedTeams.add(pagedTeamsItem);
    return this;
  }

  /**
   * The teams that were paged for the incident
   * @return pagedTeams
   */
  @javax.annotation.Nullable
  public List<String> getPagedTeams() {
    return pagedTeams;
  }

  public void setPagedTeams(List<String> pagedTeams) {
    this.pagedTeams = pagedTeams;
  }


  public ActiveIncidentInfo pagedUsers(List<String> pagedUsers) {
    this.pagedUsers = pagedUsers;
    return this;
  }

  public ActiveIncidentInfo addPagedUsersItem(String pagedUsersItem) {
    if (this.pagedUsers == null) {
      this.pagedUsers = new ArrayList<>();
    }
    this.pagedUsers.add(pagedUsersItem);
    return this;
  }

  /**
   * The users that were paged for the incident.
   * @return pagedUsers
   */
  @javax.annotation.Nullable
  public List<String> getPagedUsers() {
    return pagedUsers;
  }

  public void setPagedUsers(List<String> pagedUsers) {
    this.pagedUsers = pagedUsers;
  }


  public ActiveIncidentInfo service(String service) {
    this.service = service;
    return this;
  }

  /**
   * The service name causing the incident (if any)
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public ActiveIncidentInfo startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time the incident started
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public ActiveIncidentInfo transitions(List<IncidentTransition> transitions) {
    this.transitions = transitions;
    return this;
  }

  public ActiveIncidentInfo addTransitionsItem(IncidentTransition transitionsItem) {
    if (this.transitions == null) {
      this.transitions = new ArrayList<>();
    }
    this.transitions.add(transitionsItem);
    return this;
  }

  /**
   * Transitions of the incident state over time
   * @return transitions
   */
  @javax.annotation.Nullable
  public List<IncidentTransition> getTransitions() {
    return transitions;
  }

  public void setTransitions(List<IncidentTransition> transitions) {
    this.transitions = transitions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActiveIncidentInfo activeIncidentInfo = (ActiveIncidentInfo) o;
    return Objects.equals(this.alertCount, activeIncidentInfo.alertCount) &&
        Objects.equals(this.currentPhase, activeIncidentInfo.currentPhase) &&
        Objects.equals(this.entityId, activeIncidentInfo.entityId) &&
        Objects.equals(this.host, activeIncidentInfo.host) &&
        Objects.equals(this.incidentNumber, activeIncidentInfo.incidentNumber) &&
        Objects.equals(this.lastAlertId, activeIncidentInfo.lastAlertId) &&
        Objects.equals(this.lastAlertTime, activeIncidentInfo.lastAlertTime) &&
        Objects.equals(this.pagedPolicies, activeIncidentInfo.pagedPolicies) &&
        Objects.equals(this.pagedTeams, activeIncidentInfo.pagedTeams) &&
        Objects.equals(this.pagedUsers, activeIncidentInfo.pagedUsers) &&
        Objects.equals(this.service, activeIncidentInfo.service) &&
        Objects.equals(this.startTime, activeIncidentInfo.startTime) &&
        Objects.equals(this.transitions, activeIncidentInfo.transitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertCount, currentPhase, entityId, host, incidentNumber, lastAlertId, lastAlertTime, pagedPolicies, pagedTeams, pagedUsers, service, startTime, transitions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActiveIncidentInfo {\n");
    sb.append("    alertCount: ").append(toIndentedString(alertCount)).append("\n");
    sb.append("    currentPhase: ").append(toIndentedString(currentPhase)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    incidentNumber: ").append(toIndentedString(incidentNumber)).append("\n");
    sb.append("    lastAlertId: ").append(toIndentedString(lastAlertId)).append("\n");
    sb.append("    lastAlertTime: ").append(toIndentedString(lastAlertTime)).append("\n");
    sb.append("    pagedPolicies: ").append(toIndentedString(pagedPolicies)).append("\n");
    sb.append("    pagedTeams: ").append(toIndentedString(pagedTeams)).append("\n");
    sb.append("    pagedUsers: ").append(toIndentedString(pagedUsers)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    transitions: ").append(toIndentedString(transitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertCount");
    openapiFields.add("currentPhase");
    openapiFields.add("entityId");
    openapiFields.add("host");
    openapiFields.add("incidentNumber");
    openapiFields.add("lastAlertId");
    openapiFields.add("lastAlertTime");
    openapiFields.add("pagedPolicies");
    openapiFields.add("pagedTeams");
    openapiFields.add("pagedUsers");
    openapiFields.add("service");
    openapiFields.add("startTime");
    openapiFields.add("transitions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActiveIncidentInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActiveIncidentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActiveIncidentInfo is not found in the empty JSON string", ActiveIncidentInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActiveIncidentInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActiveIncidentInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentPhase") != null && !jsonObj.get("currentPhase").isJsonNull()) && !jsonObj.get("currentPhase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentPhase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentPhase").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("incidentNumber") != null && !jsonObj.get("incidentNumber").isJsonNull()) && !jsonObj.get("incidentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incidentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incidentNumber").toString()));
      }
      if ((jsonObj.get("lastAlertId") != null && !jsonObj.get("lastAlertId").isJsonNull()) && !jsonObj.get("lastAlertId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastAlertId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastAlertId").toString()));
      }
      if ((jsonObj.get("lastAlertTime") != null && !jsonObj.get("lastAlertTime").isJsonNull()) && !jsonObj.get("lastAlertTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastAlertTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastAlertTime").toString()));
      }
      if (jsonObj.get("pagedPolicies") != null && !jsonObj.get("pagedPolicies").isJsonNull()) {
        JsonArray jsonArraypagedPolicies = jsonObj.getAsJsonArray("pagedPolicies");
        if (jsonArraypagedPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pagedPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pagedPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("pagedPolicies").toString()));
          }

          // validate the optional field `pagedPolicies` (array)
          for (int i = 0; i < jsonArraypagedPolicies.size(); i++) {
            EscalationPolicyInfo.validateJsonElement(jsonArraypagedPolicies.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pagedTeams") != null && !jsonObj.get("pagedTeams").isJsonNull() && !jsonObj.get("pagedTeams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pagedTeams` to be an array in the JSON string but got `%s`", jsonObj.get("pagedTeams").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pagedUsers") != null && !jsonObj.get("pagedUsers").isJsonNull() && !jsonObj.get("pagedUsers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pagedUsers` to be an array in the JSON string but got `%s`", jsonObj.get("pagedUsers").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if (jsonObj.get("transitions") != null && !jsonObj.get("transitions").isJsonNull()) {
        JsonArray jsonArraytransitions = jsonObj.getAsJsonArray("transitions");
        if (jsonArraytransitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transitions` to be an array in the JSON string but got `%s`", jsonObj.get("transitions").toString()));
          }

          // validate the optional field `transitions` (array)
          for (int i = 0; i < jsonArraytransitions.size(); i++) {
            IncidentTransition.validateJsonElement(jsonArraytransitions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActiveIncidentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActiveIncidentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActiveIncidentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActiveIncidentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ActiveIncidentInfo>() {
           @Override
           public void write(JsonWriter out, ActiveIncidentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActiveIncidentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActiveIncidentInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActiveIncidentInfo
   * @throws IOException if the JSON string is invalid with respect to ActiveIncidentInfo
   */
  public static ActiveIncidentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActiveIncidentInfo.class);
  }

  /**
   * Convert an instance of ActiveIncidentInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

