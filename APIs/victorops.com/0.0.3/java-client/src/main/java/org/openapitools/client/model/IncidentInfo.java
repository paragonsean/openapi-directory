/*
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.AckUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Incidents contain the following fields (all should be considered optional)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:27.682448-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IncidentInfo {
  public static final String SERIALIZED_NAME_ACK_TIME = "ackTime";
  @SerializedName(SERIALIZED_NAME_ACK_TIME)
  private String ackTime;

  public static final String SERIALIZED_NAME_ACK_USER = "ackUser";
  @SerializedName(SERIALIZED_NAME_ACK_USER)
  private AckUser ackUser;

  public static final String SERIALIZED_NAME_ACK_USER_ID = "ackUserId";
  @SerializedName(SERIALIZED_NAME_ACK_USER_ID)
  private String ackUserId;

  public static final String SERIALIZED_NAME_ALERT_COUNT = "alertCount";
  @SerializedName(SERIALIZED_NAME_ALERT_COUNT)
  private BigDecimal alertCount;

  public static final String SERIALIZED_NAME_CURRENT_PHASE = "currentPhase";
  @SerializedName(SERIALIZED_NAME_CURRENT_PHASE)
  private String currentPhase;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_ENTITY_DISP_NAME = "entityDispName";
  @SerializedName(SERIALIZED_NAME_ENTITY_DISP_NAME)
  private String entityDispName;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_INCIDENT_NUMBER = "incidentNumber";
  @SerializedName(SERIALIZED_NAME_INCIDENT_NUMBER)
  private String incidentNumber;

  public static final String SERIALIZED_NAME_LAST_ALERT_I_D = "lastAlertID";
  @SerializedName(SERIALIZED_NAME_LAST_ALERT_I_D)
  private String lastAlertID;

  public static final String SERIALIZED_NAME_LAST_ALERT_TIME = "lastAlertTime";
  @SerializedName(SERIALIZED_NAME_LAST_ALERT_TIME)
  private String lastAlertTime;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TEAMS = "teams";
  @SerializedName(SERIALIZED_NAME_TEAMS)
  private String teams;

  public IncidentInfo() {
  }

  public IncidentInfo ackTime(String ackTime) {
    this.ackTime = ackTime;
    return this;
  }

  /**
   * The time of the last acknowledgment of the incident
   * @return ackTime
   */
  @javax.annotation.Nullable
  public String getAckTime() {
    return ackTime;
  }

  public void setAckTime(String ackTime) {
    this.ackTime = ackTime;
  }


  public IncidentInfo ackUser(AckUser ackUser) {
    this.ackUser = ackUser;
    return this;
  }

  /**
   * Get ackUser
   * @return ackUser
   */
  @javax.annotation.Nullable
  public AckUser getAckUser() {
    return ackUser;
  }

  public void setAckUser(AckUser ackUser) {
    this.ackUser = ackUser;
  }


  public IncidentInfo ackUserId(String ackUserId) {
    this.ackUserId = ackUserId;
    return this;
  }

  /**
   * The VictorOps user id of the user that acknowledged the incident
   * @return ackUserId
   */
  @javax.annotation.Nullable
  public String getAckUserId() {
    return ackUserId;
  }

  public void setAckUserId(String ackUserId) {
    this.ackUserId = ackUserId;
  }


  public IncidentInfo alertCount(BigDecimal alertCount) {
    this.alertCount = alertCount;
    return this;
  }

  /**
   * The number of alerts received for this incident
   * @return alertCount
   */
  @javax.annotation.Nullable
  public BigDecimal getAlertCount() {
    return alertCount;
  }

  public void setAlertCount(BigDecimal alertCount) {
    this.alertCount = alertCount;
  }


  public IncidentInfo currentPhase(String currentPhase) {
    this.currentPhase = currentPhase;
    return this;
  }

  /**
   * The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;.
   * @return currentPhase
   */
  @javax.annotation.Nullable
  public String getCurrentPhase() {
    return currentPhase;
  }

  public void setCurrentPhase(String currentPhase) {
    this.currentPhase = currentPhase;
  }


  public IncidentInfo endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time the incident ended
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public IncidentInfo entityDispName(String entityDispName) {
    this.entityDispName = entityDispName;
    return this;
  }

  /**
   * The display name of the entity causing the incident
   * @return entityDispName
   */
  @javax.annotation.Nullable
  public String getEntityDispName() {
    return entityDispName;
  }

  public void setEntityDispName(String entityDispName) {
    this.entityDispName = entityDispName;
  }


  public IncidentInfo entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * The unique identification of the entity being monitored that caused the incident
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public IncidentInfo entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * The type of entity causing the incident (host/service)
   * @return entityType
   */
  @javax.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public IncidentInfo host(String host) {
    this.host = host;
    return this;
  }

  /**
   * The host on which the incident occurred
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public IncidentInfo incidentNumber(String incidentNumber) {
    this.incidentNumber = incidentNumber;
    return this;
  }

  /**
   * The VictorOps incident number
   * @return incidentNumber
   */
  @javax.annotation.Nullable
  public String getIncidentNumber() {
    return incidentNumber;
  }

  public void setIncidentNumber(String incidentNumber) {
    this.incidentNumber = incidentNumber;
  }


  public IncidentInfo lastAlertID(String lastAlertID) {
    this.lastAlertID = lastAlertID;
    return this;
  }

  /**
   * The unique id of the last alert for the incident
   * @return lastAlertID
   */
  @javax.annotation.Nullable
  public String getLastAlertID() {
    return lastAlertID;
  }

  public void setLastAlertID(String lastAlertID) {
    this.lastAlertID = lastAlertID;
  }


  public IncidentInfo lastAlertTime(String lastAlertTime) {
    this.lastAlertTime = lastAlertTime;
    return this;
  }

  /**
   * The time of the last alert received for the incident
   * @return lastAlertTime
   */
  @javax.annotation.Nullable
  public String getLastAlertTime() {
    return lastAlertTime;
  }

  public void setLastAlertTime(String lastAlertTime) {
    this.lastAlertTime = lastAlertTime;
  }


  public IncidentInfo service(String service) {
    this.service = service;
    return this;
  }

  /**
   * The service name causing the incident (if any)
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public IncidentInfo startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time the incident started
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public IncidentInfo teams(String teams) {
    this.teams = teams;
    return this;
  }

  /**
   * The teams that were paged for the incident (comma separated).
   * @return teams
   */
  @javax.annotation.Nullable
  public String getTeams() {
    return teams;
  }

  public void setTeams(String teams) {
    this.teams = teams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IncidentInfo incidentInfo = (IncidentInfo) o;
    return Objects.equals(this.ackTime, incidentInfo.ackTime) &&
        Objects.equals(this.ackUser, incidentInfo.ackUser) &&
        Objects.equals(this.ackUserId, incidentInfo.ackUserId) &&
        Objects.equals(this.alertCount, incidentInfo.alertCount) &&
        Objects.equals(this.currentPhase, incidentInfo.currentPhase) &&
        Objects.equals(this.endTime, incidentInfo.endTime) &&
        Objects.equals(this.entityDispName, incidentInfo.entityDispName) &&
        Objects.equals(this.entityId, incidentInfo.entityId) &&
        Objects.equals(this.entityType, incidentInfo.entityType) &&
        Objects.equals(this.host, incidentInfo.host) &&
        Objects.equals(this.incidentNumber, incidentInfo.incidentNumber) &&
        Objects.equals(this.lastAlertID, incidentInfo.lastAlertID) &&
        Objects.equals(this.lastAlertTime, incidentInfo.lastAlertTime) &&
        Objects.equals(this.service, incidentInfo.service) &&
        Objects.equals(this.startTime, incidentInfo.startTime) &&
        Objects.equals(this.teams, incidentInfo.teams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ackTime, ackUser, ackUserId, alertCount, currentPhase, endTime, entityDispName, entityId, entityType, host, incidentNumber, lastAlertID, lastAlertTime, service, startTime, teams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IncidentInfo {\n");
    sb.append("    ackTime: ").append(toIndentedString(ackTime)).append("\n");
    sb.append("    ackUser: ").append(toIndentedString(ackUser)).append("\n");
    sb.append("    ackUserId: ").append(toIndentedString(ackUserId)).append("\n");
    sb.append("    alertCount: ").append(toIndentedString(alertCount)).append("\n");
    sb.append("    currentPhase: ").append(toIndentedString(currentPhase)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    entityDispName: ").append(toIndentedString(entityDispName)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    incidentNumber: ").append(toIndentedString(incidentNumber)).append("\n");
    sb.append("    lastAlertID: ").append(toIndentedString(lastAlertID)).append("\n");
    sb.append("    lastAlertTime: ").append(toIndentedString(lastAlertTime)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ackTime");
    openapiFields.add("ackUser");
    openapiFields.add("ackUserId");
    openapiFields.add("alertCount");
    openapiFields.add("currentPhase");
    openapiFields.add("endTime");
    openapiFields.add("entityDispName");
    openapiFields.add("entityId");
    openapiFields.add("entityType");
    openapiFields.add("host");
    openapiFields.add("incidentNumber");
    openapiFields.add("lastAlertID");
    openapiFields.add("lastAlertTime");
    openapiFields.add("service");
    openapiFields.add("startTime");
    openapiFields.add("teams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IncidentInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IncidentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IncidentInfo is not found in the empty JSON string", IncidentInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IncidentInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IncidentInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ackTime") != null && !jsonObj.get("ackTime").isJsonNull()) && !jsonObj.get("ackTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ackTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ackTime").toString()));
      }
      // validate the optional field `ackUser`
      if (jsonObj.get("ackUser") != null && !jsonObj.get("ackUser").isJsonNull()) {
        AckUser.validateJsonElement(jsonObj.get("ackUser"));
      }
      if ((jsonObj.get("ackUserId") != null && !jsonObj.get("ackUserId").isJsonNull()) && !jsonObj.get("ackUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ackUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ackUserId").toString()));
      }
      if ((jsonObj.get("currentPhase") != null && !jsonObj.get("currentPhase").isJsonNull()) && !jsonObj.get("currentPhase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentPhase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentPhase").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("entityDispName") != null && !jsonObj.get("entityDispName").isJsonNull()) && !jsonObj.get("entityDispName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityDispName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityDispName").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("incidentNumber") != null && !jsonObj.get("incidentNumber").isJsonNull()) && !jsonObj.get("incidentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incidentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incidentNumber").toString()));
      }
      if ((jsonObj.get("lastAlertID") != null && !jsonObj.get("lastAlertID").isJsonNull()) && !jsonObj.get("lastAlertID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastAlertID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastAlertID").toString()));
      }
      if ((jsonObj.get("lastAlertTime") != null && !jsonObj.get("lastAlertTime").isJsonNull()) && !jsonObj.get("lastAlertTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastAlertTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastAlertTime").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("teams") != null && !jsonObj.get("teams").isJsonNull()) && !jsonObj.get("teams").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teams` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teams").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IncidentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IncidentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IncidentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IncidentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<IncidentInfo>() {
           @Override
           public void write(JsonWriter out, IncidentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IncidentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IncidentInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IncidentInfo
   * @throws IOException if the JSON string is invalid with respect to IncidentInfo
   */
  public static IncidentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IncidentInfo.class);
  }

  /**
   * Convert an instance of IncidentInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

