/*
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OnCallInterval;
import org.openapitools.client.model.OnCallIntervalDuration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserLog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:27.682448-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserLog {
  public static final String SERIALIZED_NAME_ADJUSTED_TOTAL = "adjustedTotal";
  @SerializedName(SERIALIZED_NAME_ADJUSTED_TOTAL)
  private OnCallIntervalDuration adjustedTotal;

  public static final String SERIALIZED_NAME_LOG = "log";
  @SerializedName(SERIALIZED_NAME_LOG)
  private List<OnCallInterval> log = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private OnCallIntervalDuration total;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public UserLog() {
  }

  public UserLog adjustedTotal(OnCallIntervalDuration adjustedTotal) {
    this.adjustedTotal = adjustedTotal;
    return this;
  }

  /**
   * Get adjustedTotal
   * @return adjustedTotal
   */
  @javax.annotation.Nullable
  public OnCallIntervalDuration getAdjustedTotal() {
    return adjustedTotal;
  }

  public void setAdjustedTotal(OnCallIntervalDuration adjustedTotal) {
    this.adjustedTotal = adjustedTotal;
  }


  public UserLog log(List<OnCallInterval> log) {
    this.log = log;
    return this;
  }

  public UserLog addLogItem(OnCallInterval logItem) {
    if (this.log == null) {
      this.log = new ArrayList<>();
    }
    this.log.add(logItem);
    return this;
  }

  /**
   * Get log
   * @return log
   */
  @javax.annotation.Nullable
  public List<OnCallInterval> getLog() {
    return log;
  }

  public void setLog(List<OnCallInterval> log) {
    this.log = log;
  }


  public UserLog total(OnCallIntervalDuration total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public OnCallIntervalDuration getTotal() {
    return total;
  }

  public void setTotal(OnCallIntervalDuration total) {
    this.total = total;
  }


  public UserLog userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserLog userLog = (UserLog) o;
    return Objects.equals(this.adjustedTotal, userLog.adjustedTotal) &&
        Objects.equals(this.log, userLog.log) &&
        Objects.equals(this.total, userLog.total) &&
        Objects.equals(this.userId, userLog.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustedTotal, log, total, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserLog {\n");
    sb.append("    adjustedTotal: ").append(toIndentedString(adjustedTotal)).append("\n");
    sb.append("    log: ").append(toIndentedString(log)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustedTotal");
    openapiFields.add("log");
    openapiFields.add("total");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserLog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserLog is not found in the empty JSON string", UserLog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserLog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adjustedTotal`
      if (jsonObj.get("adjustedTotal") != null && !jsonObj.get("adjustedTotal").isJsonNull()) {
        OnCallIntervalDuration.validateJsonElement(jsonObj.get("adjustedTotal"));
      }
      if (jsonObj.get("log") != null && !jsonObj.get("log").isJsonNull()) {
        JsonArray jsonArraylog = jsonObj.getAsJsonArray("log");
        if (jsonArraylog != null) {
          // ensure the json data is an array
          if (!jsonObj.get("log").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `log` to be an array in the JSON string but got `%s`", jsonObj.get("log").toString()));
          }

          // validate the optional field `log` (array)
          for (int i = 0; i < jsonArraylog.size(); i++) {
            OnCallInterval.validateJsonElement(jsonArraylog.get(i));
          };
        }
      }
      // validate the optional field `total`
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) {
        OnCallIntervalDuration.validateJsonElement(jsonObj.get("total"));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserLog.class));

       return (TypeAdapter<T>) new TypeAdapter<UserLog>() {
           @Override
           public void write(JsonWriter out, UserLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserLog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserLog
   * @throws IOException if the JSON string is invalid with respect to UserLog
   */
  public static UserLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserLog.class);
  }

  /**
   * Convert an instance of UserLog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

