/*
 * VictorOps
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddGroupPayload;
import org.openapitools.client.model.AddStepPayload;
import org.openapitools.client.model.ApiPublicV1ProfileUsernamePoliciesGet200Response;
import org.openapitools.client.model.ApiPublicV1ProfileUsernamePoliciesPost200Response;
import org.openapitools.client.model.ApiPublicV1ProfileUsernamePoliciesStepPost200Response;
import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonalPagingPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersonalPagingPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonalPagingPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiPublicV1ProfileUsernamePoliciesGet
     * @param username Your username (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All steps of the user&#39;s paging policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesGetCall(String username, String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/profile/{username}/policies"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1ProfileUsernamePoliciesGetValidateBeforeCall(String username, String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling apiPublicV1ProfileUsernamePoliciesGet(Async)");
        }

        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1ProfileUsernamePoliciesGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1ProfileUsernamePoliciesGet(Async)");
        }

        return apiPublicV1ProfileUsernamePoliciesGetCall(username, xVOApiId, xVOApiKey, _callback);

    }

    /**
     * Get the user&#39;s paging policy
     * Get all the paging policy steps for the user on the org associated with the API key  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ApiPublicV1ProfileUsernamePoliciesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All steps of the user&#39;s paging policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiPublicV1ProfileUsernamePoliciesGet200Response apiPublicV1ProfileUsernamePoliciesGet(String username, String xVOApiId, String xVOApiKey) throws ApiException {
        ApiResponse<ApiPublicV1ProfileUsernamePoliciesGet200Response> localVarResp = apiPublicV1ProfileUsernamePoliciesGetWithHttpInfo(username, xVOApiId, xVOApiKey);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s paging policy
     * Get all the paging policy steps for the user on the org associated with the API key  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ApiResponse&lt;ApiPublicV1ProfileUsernamePoliciesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All steps of the user&#39;s paging policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiPublicV1ProfileUsernamePoliciesGet200Response> apiPublicV1ProfileUsernamePoliciesGetWithHttpInfo(String username, String xVOApiId, String xVOApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesGetValidateBeforeCall(username, xVOApiId, xVOApiKey, null);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s paging policy (asynchronously)
     * Get all the paging policy steps for the user on the org associated with the API key  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All steps of the user&#39;s paging policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesGetAsync(String username, String xVOApiId, String xVOApiKey, final ApiCallback<ApiPublicV1ProfileUsernamePoliciesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesGetValidateBeforeCall(username, xVOApiId, xVOApiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1ProfileUsernamePoliciesPost
     * @param username Your username (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesPostCall(String username, String xVOApiId, String xVOApiKey, AddGroupPayload body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/profile/{username}/policies"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1ProfileUsernamePoliciesPostValidateBeforeCall(String username, String xVOApiId, String xVOApiKey, AddGroupPayload body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling apiPublicV1ProfileUsernamePoliciesPost(Async)");
        }

        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1ProfileUsernamePoliciesPost(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1ProfileUsernamePoliciesPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1ProfileUsernamePoliciesPost(Async)");
        }

        return apiPublicV1ProfileUsernamePoliciesPostCall(username, xVOApiId, xVOApiKey, body, _callback);

    }

    /**
     * Create a paging policy step
     * Create a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @return ApiPublicV1ProfileUsernamePoliciesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiPublicV1ProfileUsernamePoliciesPost200Response apiPublicV1ProfileUsernamePoliciesPost(String username, String xVOApiId, String xVOApiKey, AddGroupPayload body) throws ApiException {
        ApiResponse<ApiPublicV1ProfileUsernamePoliciesPost200Response> localVarResp = apiPublicV1ProfileUsernamePoliciesPostWithHttpInfo(username, xVOApiId, xVOApiKey, body);
        return localVarResp.getData();
    }

    /**
     * Create a paging policy step
     * Create a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @return ApiResponse&lt;ApiPublicV1ProfileUsernamePoliciesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiPublicV1ProfileUsernamePoliciesPost200Response> apiPublicV1ProfileUsernamePoliciesPostWithHttpInfo(String username, String xVOApiId, String xVOApiKey, AddGroupPayload body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesPostValidateBeforeCall(username, xVOApiId, xVOApiKey, body, null);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a paging policy step (asynchronously)
     * Create a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesPostAsync(String username, String xVOApiId, String xVOApiKey, AddGroupPayload body, final ApiCallback<ApiPublicV1ProfileUsernamePoliciesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesPostValidateBeforeCall(username, xVOApiId, xVOApiKey, body, _callback);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1ProfileUsernamePoliciesStepGet
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepGetCall(String username, BigDecimal step, String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/profile/{username}/policies/{step}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "step" + "}", localVarApiClient.escapeString(step.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepGetValidateBeforeCall(String username, BigDecimal step, String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling apiPublicV1ProfileUsernamePoliciesStepGet(Async)");
        }

        // verify the required parameter 'step' is set
        if (step == null) {
            throw new ApiException("Missing the required parameter 'step' when calling apiPublicV1ProfileUsernamePoliciesStepGet(Async)");
        }

        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1ProfileUsernamePoliciesStepGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1ProfileUsernamePoliciesStepGet(Async)");
        }

        return apiPublicV1ProfileUsernamePoliciesStepGetCall(username, step, xVOApiId, xVOApiKey, _callback);

    }

    /**
     * Get a paging policy step
     * Get a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ApiPublicV1ProfileUsernamePoliciesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiPublicV1ProfileUsernamePoliciesPost200Response apiPublicV1ProfileUsernamePoliciesStepGet(String username, BigDecimal step, String xVOApiId, String xVOApiKey) throws ApiException {
        ApiResponse<ApiPublicV1ProfileUsernamePoliciesPost200Response> localVarResp = apiPublicV1ProfileUsernamePoliciesStepGetWithHttpInfo(username, step, xVOApiId, xVOApiKey);
        return localVarResp.getData();
    }

    /**
     * Get a paging policy step
     * Get a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ApiResponse&lt;ApiPublicV1ProfileUsernamePoliciesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiPublicV1ProfileUsernamePoliciesPost200Response> apiPublicV1ProfileUsernamePoliciesStepGetWithHttpInfo(String username, BigDecimal step, String xVOApiId, String xVOApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesStepGetValidateBeforeCall(username, step, xVOApiId, xVOApiKey, null);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a paging policy step (asynchronously)
     * Get a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepGetAsync(String username, BigDecimal step, String xVOApiId, String xVOApiKey, final ApiCallback<ApiPublicV1ProfileUsernamePoliciesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesStepGetValidateBeforeCall(username, step, xVOApiId, xVOApiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1ProfileUsernamePoliciesStepPost
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created rule for the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepPostCall(String username, BigDecimal step, String xVOApiId, String xVOApiKey, AddStepPayload body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/profile/{username}/policies/{step}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "step" + "}", localVarApiClient.escapeString(step.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepPostValidateBeforeCall(String username, BigDecimal step, String xVOApiId, String xVOApiKey, AddStepPayload body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling apiPublicV1ProfileUsernamePoliciesStepPost(Async)");
        }

        // verify the required parameter 'step' is set
        if (step == null) {
            throw new ApiException("Missing the required parameter 'step' when calling apiPublicV1ProfileUsernamePoliciesStepPost(Async)");
        }

        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1ProfileUsernamePoliciesStepPost(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1ProfileUsernamePoliciesStepPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1ProfileUsernamePoliciesStepPost(Async)");
        }

        return apiPublicV1ProfileUsernamePoliciesStepPostCall(username, step, xVOApiId, xVOApiKey, body, _callback);

    }

    /**
     * Create a rule for a paging policy step
     * Create a rule for a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @return ApiPublicV1ProfileUsernamePoliciesStepPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created rule for the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiPublicV1ProfileUsernamePoliciesStepPost200Response apiPublicV1ProfileUsernamePoliciesStepPost(String username, BigDecimal step, String xVOApiId, String xVOApiKey, AddStepPayload body) throws ApiException {
        ApiResponse<ApiPublicV1ProfileUsernamePoliciesStepPost200Response> localVarResp = apiPublicV1ProfileUsernamePoliciesStepPostWithHttpInfo(username, step, xVOApiId, xVOApiKey, body);
        return localVarResp.getData();
    }

    /**
     * Create a rule for a paging policy step
     * Create a rule for a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @return ApiResponse&lt;ApiPublicV1ProfileUsernamePoliciesStepPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created rule for the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiPublicV1ProfileUsernamePoliciesStepPost200Response> apiPublicV1ProfileUsernamePoliciesStepPostWithHttpInfo(String username, BigDecimal step, String xVOApiId, String xVOApiKey, AddStepPayload body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesStepPostValidateBeforeCall(username, step, xVOApiId, xVOApiKey, body, null);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesStepPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a rule for a paging policy step (asynchronously)
     * Create a rule for a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created rule for the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepPostAsync(String username, BigDecimal step, String xVOApiId, String xVOApiKey, AddStepPayload body, final ApiCallback<ApiPublicV1ProfileUsernamePoliciesStepPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesStepPostValidateBeforeCall(username, step, xVOApiId, xVOApiKey, body, _callback);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesStepPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1ProfileUsernamePoliciesStepPut
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepPutCall(String username, BigDecimal step, String xVOApiId, String xVOApiKey, AddGroupPayload body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/profile/{username}/policies/{step}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "step" + "}", localVarApiClient.escapeString(step.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepPutValidateBeforeCall(String username, BigDecimal step, String xVOApiId, String xVOApiKey, AddGroupPayload body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling apiPublicV1ProfileUsernamePoliciesStepPut(Async)");
        }

        // verify the required parameter 'step' is set
        if (step == null) {
            throw new ApiException("Missing the required parameter 'step' when calling apiPublicV1ProfileUsernamePoliciesStepPut(Async)");
        }

        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1ProfileUsernamePoliciesStepPut(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1ProfileUsernamePoliciesStepPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1ProfileUsernamePoliciesStepPut(Async)");
        }

        return apiPublicV1ProfileUsernamePoliciesStepPutCall(username, step, xVOApiId, xVOApiKey, body, _callback);

    }

    /**
     * Update a paging policy step
     * Update a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @return ApiPublicV1ProfileUsernamePoliciesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiPublicV1ProfileUsernamePoliciesPost200Response apiPublicV1ProfileUsernamePoliciesStepPut(String username, BigDecimal step, String xVOApiId, String xVOApiKey, AddGroupPayload body) throws ApiException {
        ApiResponse<ApiPublicV1ProfileUsernamePoliciesPost200Response> localVarResp = apiPublicV1ProfileUsernamePoliciesStepPutWithHttpInfo(username, step, xVOApiId, xVOApiKey, body);
        return localVarResp.getData();
    }

    /**
     * Update a paging policy step
     * Update a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @return ApiResponse&lt;ApiPublicV1ProfileUsernamePoliciesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiPublicV1ProfileUsernamePoliciesPost200Response> apiPublicV1ProfileUsernamePoliciesStepPutWithHttpInfo(String username, BigDecimal step, String xVOApiId, String xVOApiKey, AddGroupPayload body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesStepPutValidateBeforeCall(username, step, xVOApiId, xVOApiKey, body, null);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a paging policy step (asynchronously)
     * Update a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepPutAsync(String username, BigDecimal step, String xVOApiId, String xVOApiKey, AddGroupPayload body, final ApiCallback<ApiPublicV1ProfileUsernamePoliciesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesStepPutValidateBeforeCall(username, step, xVOApiId, xVOApiKey, body, _callback);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1ProfileUsernamePoliciesStepRuleDelete
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param rule Rule for a paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted rule from the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepRuleDeleteCall(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/profile/{username}/policies/{step}/{rule}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "step" + "}", localVarApiClient.escapeString(step.toString()))
            .replace("{" + "rule" + "}", localVarApiClient.escapeString(rule.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepRuleDeleteValidateBeforeCall(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling apiPublicV1ProfileUsernamePoliciesStepRuleDelete(Async)");
        }

        // verify the required parameter 'step' is set
        if (step == null) {
            throw new ApiException("Missing the required parameter 'step' when calling apiPublicV1ProfileUsernamePoliciesStepRuleDelete(Async)");
        }

        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling apiPublicV1ProfileUsernamePoliciesStepRuleDelete(Async)");
        }

        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1ProfileUsernamePoliciesStepRuleDelete(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1ProfileUsernamePoliciesStepRuleDelete(Async)");
        }

        return apiPublicV1ProfileUsernamePoliciesStepRuleDeleteCall(username, step, rule, xVOApiId, xVOApiKey, _callback);

    }

    /**
     * Delete a rule from a paging policy step
     * Delete a rule from a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param rule Rule for a paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ApiPublicV1ProfileUsernamePoliciesStepPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted rule from the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiPublicV1ProfileUsernamePoliciesStepPost200Response apiPublicV1ProfileUsernamePoliciesStepRuleDelete(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey) throws ApiException {
        ApiResponse<ApiPublicV1ProfileUsernamePoliciesStepPost200Response> localVarResp = apiPublicV1ProfileUsernamePoliciesStepRuleDeleteWithHttpInfo(username, step, rule, xVOApiId, xVOApiKey);
        return localVarResp.getData();
    }

    /**
     * Delete a rule from a paging policy step
     * Delete a rule from a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param rule Rule for a paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ApiResponse&lt;ApiPublicV1ProfileUsernamePoliciesStepPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted rule from the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiPublicV1ProfileUsernamePoliciesStepPost200Response> apiPublicV1ProfileUsernamePoliciesStepRuleDeleteWithHttpInfo(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesStepRuleDeleteValidateBeforeCall(username, step, rule, xVOApiId, xVOApiKey, null);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesStepPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a rule from a paging policy step (asynchronously)
     * Delete a rule from a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param rule Rule for a paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted rule from the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepRuleDeleteAsync(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey, final ApiCallback<ApiPublicV1ProfileUsernamePoliciesStepPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesStepRuleDeleteValidateBeforeCall(username, step, rule, xVOApiId, xVOApiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesStepPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1ProfileUsernamePoliciesStepRuleGet
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param rule Rule for a paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The rule from the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepRuleGetCall(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-public/v1/profile/{username}/policies/{step}/{rule}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "step" + "}", localVarApiClient.escapeString(step.toString()))
            .replace("{" + "rule" + "}", localVarApiClient.escapeString(rule.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepRuleGetValidateBeforeCall(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling apiPublicV1ProfileUsernamePoliciesStepRuleGet(Async)");
        }

        // verify the required parameter 'step' is set
        if (step == null) {
            throw new ApiException("Missing the required parameter 'step' when calling apiPublicV1ProfileUsernamePoliciesStepRuleGet(Async)");
        }

        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling apiPublicV1ProfileUsernamePoliciesStepRuleGet(Async)");
        }

        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1ProfileUsernamePoliciesStepRuleGet(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1ProfileUsernamePoliciesStepRuleGet(Async)");
        }

        return apiPublicV1ProfileUsernamePoliciesStepRuleGetCall(username, step, rule, xVOApiId, xVOApiKey, _callback);

    }

    /**
     * Get a rule from a paging policy step
     * Get a rule from a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param rule Rule for a paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ApiPublicV1ProfileUsernamePoliciesStepPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The rule from the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiPublicV1ProfileUsernamePoliciesStepPost200Response apiPublicV1ProfileUsernamePoliciesStepRuleGet(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey) throws ApiException {
        ApiResponse<ApiPublicV1ProfileUsernamePoliciesStepPost200Response> localVarResp = apiPublicV1ProfileUsernamePoliciesStepRuleGetWithHttpInfo(username, step, rule, xVOApiId, xVOApiKey);
        return localVarResp.getData();
    }

    /**
     * Get a rule from a paging policy step
     * Get a rule from a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param rule Rule for a paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @return ApiResponse&lt;ApiPublicV1ProfileUsernamePoliciesStepPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The rule from the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiPublicV1ProfileUsernamePoliciesStepPost200Response> apiPublicV1ProfileUsernamePoliciesStepRuleGetWithHttpInfo(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesStepRuleGetValidateBeforeCall(username, step, rule, xVOApiId, xVOApiKey, null);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesStepPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a rule from a paging policy step (asynchronously)
     * Get a rule from a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param rule Rule for a paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The rule from the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepRuleGetAsync(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey, final ApiCallback<ApiPublicV1ProfileUsernamePoliciesStepPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesStepRuleGetValidateBeforeCall(username, step, rule, xVOApiId, xVOApiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesStepPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicV1ProfileUsernamePoliciesStepRulePut
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param rule Rule for a paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated rule for the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepRulePutCall(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey, AddStepPayload body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api-public/v1/profile/{username}/policies/{step}/{rule}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "step" + "}", localVarApiClient.escapeString(step.toString()))
            .replace("{" + "rule" + "}", localVarApiClient.escapeString(rule.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVOApiId != null) {
            localVarHeaderParams.put("X-VO-Api-Id", localVarApiClient.parameterToString(xVOApiId));
        }

        if (xVOApiKey != null) {
            localVarHeaderParams.put("X-VO-Api-Key", localVarApiClient.parameterToString(xVOApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepRulePutValidateBeforeCall(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey, AddStepPayload body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling apiPublicV1ProfileUsernamePoliciesStepRulePut(Async)");
        }

        // verify the required parameter 'step' is set
        if (step == null) {
            throw new ApiException("Missing the required parameter 'step' when calling apiPublicV1ProfileUsernamePoliciesStepRulePut(Async)");
        }

        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling apiPublicV1ProfileUsernamePoliciesStepRulePut(Async)");
        }

        // verify the required parameter 'xVOApiId' is set
        if (xVOApiId == null) {
            throw new ApiException("Missing the required parameter 'xVOApiId' when calling apiPublicV1ProfileUsernamePoliciesStepRulePut(Async)");
        }

        // verify the required parameter 'xVOApiKey' is set
        if (xVOApiKey == null) {
            throw new ApiException("Missing the required parameter 'xVOApiKey' when calling apiPublicV1ProfileUsernamePoliciesStepRulePut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiPublicV1ProfileUsernamePoliciesStepRulePut(Async)");
        }

        return apiPublicV1ProfileUsernamePoliciesStepRulePutCall(username, step, rule, xVOApiId, xVOApiKey, body, _callback);

    }

    /**
     * Update a rule for a paging policy step
     * Update a rule for a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param rule Rule for a paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @return ApiPublicV1ProfileUsernamePoliciesStepPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated rule for the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiPublicV1ProfileUsernamePoliciesStepPost200Response apiPublicV1ProfileUsernamePoliciesStepRulePut(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey, AddStepPayload body) throws ApiException {
        ApiResponse<ApiPublicV1ProfileUsernamePoliciesStepPost200Response> localVarResp = apiPublicV1ProfileUsernamePoliciesStepRulePutWithHttpInfo(username, step, rule, xVOApiId, xVOApiKey, body);
        return localVarResp.getData();
    }

    /**
     * Update a rule for a paging policy step
     * Update a rule for a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param rule Rule for a paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @return ApiResponse&lt;ApiPublicV1ProfileUsernamePoliciesStepPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated rule for the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiPublicV1ProfileUsernamePoliciesStepPost200Response> apiPublicV1ProfileUsernamePoliciesStepRulePutWithHttpInfo(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey, AddStepPayload body) throws ApiException {
        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesStepRulePutValidateBeforeCall(username, step, rule, xVOApiId, xVOApiKey, body, null);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesStepPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a rule for a paging policy step (asynchronously)
     * Update a rule for a paging policy step  This API may be called a maximum of 60 times per minute. 
     * @param username Your username (required)
     * @param step Paging policy step (required)
     * @param rule Rule for a paging policy step (required)
     * @param xVOApiId Your API ID (required)
     * @param xVOApiKey Your API Key (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated rule for the paging policy step </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Problem with the request arguments.  The response payload may include an error message. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication parameters missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication failed or rate-limit reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicV1ProfileUsernamePoliciesStepRulePutAsync(String username, BigDecimal step, BigDecimal rule, String xVOApiId, String xVOApiKey, AddStepPayload body, final ApiCallback<ApiPublicV1ProfileUsernamePoliciesStepPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicV1ProfileUsernamePoliciesStepRulePutValidateBeforeCall(username, step, rule, xVOApiId, xVOApiKey, body, _callback);
        Type localVarReturnType = new TypeToken<ApiPublicV1ProfileUsernamePoliciesStepPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
