/*
 * EVEMarketer Marketstat API
 * EVEMarketer Marketstat API is almost compatible with EVE-Central's Marketstat API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExecAPI;
import org.openapitools.client.model.Type;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketstatApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MarketstatApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketstatApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for marketstatGet
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single solar system. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketstatGetCall(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketstat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "typeid", typeid));
        }

        if (regionlimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionlimit", regionlimit));
        }

        if (usesystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usesystem", usesystem));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketstatGetValidateBeforeCall(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'typeid' is set
        if (typeid == null) {
            throw new ApiException("Missing the required parameter 'typeid' when calling marketstatGet(Async)");
        }

        return marketstatGetCall(typeid, regionlimit, usesystem, _callback);

    }

    /**
     * XML Marketstat
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single solar system. (optional)
     * @return ExecAPI
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ExecAPI marketstatGet(List<Integer> typeid, Integer regionlimit, Integer usesystem) throws ApiException {
        ApiResponse<ExecAPI> localVarResp = marketstatGetWithHttpInfo(typeid, regionlimit, usesystem);
        return localVarResp.getData();
    }

    /**
     * XML Marketstat
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single solar system. (optional)
     * @return ApiResponse&lt;ExecAPI&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExecAPI> marketstatGetWithHttpInfo(List<Integer> typeid, Integer regionlimit, Integer usesystem) throws ApiException {
        okhttp3.Call localVarCall = marketstatGetValidateBeforeCall(typeid, regionlimit, usesystem, null);
        Type localVarReturnType = new TypeToken<ExecAPI>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * XML Marketstat (asynchronously)
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single solar system. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketstatGetAsync(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback<ExecAPI> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketstatGetValidateBeforeCall(typeid, regionlimit, usesystem, _callback);
        Type localVarReturnType = new TypeToken<ExecAPI>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketstatJsonGet
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single region. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketstatJsonGetCall(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketstat/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeid != null) {
            localVarFormParams.put("typeid", typeid);
        }

        if (regionlimit != null) {
            localVarFormParams.put("regionlimit", regionlimit);
        }

        if (usesystem != null) {
            localVarFormParams.put("usesystem", usesystem);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketstatJsonGetValidateBeforeCall(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'typeid' is set
        if (typeid == null) {
            throw new ApiException("Missing the required parameter 'typeid' when calling marketstatJsonGet(Async)");
        }

        return marketstatJsonGetCall(typeid, regionlimit, usesystem, _callback);

    }

    /**
     * JSON Marketstat
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single region. (optional)
     * @return List&lt;Type&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public List<Type> marketstatJsonGet(List<Integer> typeid, Integer regionlimit, Integer usesystem) throws ApiException {
        ApiResponse<List<Type>> localVarResp = marketstatJsonGetWithHttpInfo(typeid, regionlimit, usesystem);
        return localVarResp.getData();
    }

    /**
     * JSON Marketstat
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single region. (optional)
     * @return ApiResponse&lt;List&lt;Type&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Type>> marketstatJsonGetWithHttpInfo(List<Integer> typeid, Integer regionlimit, Integer usesystem) throws ApiException {
        okhttp3.Call localVarCall = marketstatJsonGetValidateBeforeCall(typeid, regionlimit, usesystem, null);
        Type localVarReturnType = new TypeToken<List<Type>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * JSON Marketstat (asynchronously)
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single region. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketstatJsonGetAsync(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback<List<Type>> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketstatJsonGetValidateBeforeCall(typeid, regionlimit, usesystem, _callback);
        Type localVarReturnType = new TypeToken<List<Type>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketstatJsonPost
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single region. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketstatJsonPostCall(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketstat/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "typeid", typeid));
        }

        if (regionlimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionlimit", regionlimit));
        }

        if (usesystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usesystem", usesystem));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketstatJsonPostValidateBeforeCall(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'typeid' is set
        if (typeid == null) {
            throw new ApiException("Missing the required parameter 'typeid' when calling marketstatJsonPost(Async)");
        }

        return marketstatJsonPostCall(typeid, regionlimit, usesystem, _callback);

    }

    /**
     * JSON Marketstat
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single region. (optional)
     * @return List&lt;Type&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public List<Type> marketstatJsonPost(List<Integer> typeid, Integer regionlimit, Integer usesystem) throws ApiException {
        ApiResponse<List<Type>> localVarResp = marketstatJsonPostWithHttpInfo(typeid, regionlimit, usesystem);
        return localVarResp.getData();
    }

    /**
     * JSON Marketstat
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single region. (optional)
     * @return ApiResponse&lt;List&lt;Type&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Type>> marketstatJsonPostWithHttpInfo(List<Integer> typeid, Integer regionlimit, Integer usesystem) throws ApiException {
        okhttp3.Call localVarCall = marketstatJsonPostValidateBeforeCall(typeid, regionlimit, usesystem, null);
        Type localVarReturnType = new TypeToken<List<Type>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * JSON Marketstat (asynchronously)
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single region. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketstatJsonPostAsync(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback<List<Type>> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketstatJsonPostValidateBeforeCall(typeid, regionlimit, usesystem, _callback);
        Type localVarReturnType = new TypeToken<List<Type>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketstatPost
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single solar system. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketstatPostCall(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketstat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeid != null) {
            localVarFormParams.put("typeid", typeid);
        }

        if (regionlimit != null) {
            localVarFormParams.put("regionlimit", regionlimit);
        }

        if (usesystem != null) {
            localVarFormParams.put("usesystem", usesystem);
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketstatPostValidateBeforeCall(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'typeid' is set
        if (typeid == null) {
            throw new ApiException("Missing the required parameter 'typeid' when calling marketstatPost(Async)");
        }

        return marketstatPostCall(typeid, regionlimit, usesystem, _callback);

    }

    /**
     * XML Marketstat
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single solar system. (optional)
     * @return ExecAPI
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ExecAPI marketstatPost(List<Integer> typeid, Integer regionlimit, Integer usesystem) throws ApiException {
        ApiResponse<ExecAPI> localVarResp = marketstatPostWithHttpInfo(typeid, regionlimit, usesystem);
        return localVarResp.getData();
    }

    /**
     * XML Marketstat
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single solar system. (optional)
     * @return ApiResponse&lt;ExecAPI&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExecAPI> marketstatPostWithHttpInfo(List<Integer> typeid, Integer regionlimit, Integer usesystem) throws ApiException {
        okhttp3.Call localVarCall = marketstatPostValidateBeforeCall(typeid, regionlimit, usesystem, null);
        Type localVarReturnType = new TypeToken<ExecAPI>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * XML Marketstat (asynchronously)
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single solar system. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  * X-Ratelimit-Reset - The time at which the current rate limit window resets in UTC epoch seconds. <br>  * X-Ratelimit-Limit - The number of allowed requests in the current period <br>  * X-Ratelimit-Remaining - The number of remaining requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketstatPostAsync(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback<ExecAPI> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketstatPostValidateBeforeCall(typeid, regionlimit, usesystem, _callback);
        Type localVarReturnType = new TypeToken<ExecAPI>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
