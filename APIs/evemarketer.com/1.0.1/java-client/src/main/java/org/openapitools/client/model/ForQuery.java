/*
 * EVEMarketer Marketstat API
 * EVEMarketer Marketstat API is almost compatible with EVE-Central's Marketstat API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ForQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:50.680413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ForQuery {
  public static final String SERIALIZED_NAME_BID = "bid";
  @SerializedName(SERIALIZED_NAME_BID)
  private Boolean bid;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Integer hours;

  public static final String SERIALIZED_NAME_MINQ = "minq";
  @SerializedName(SERIALIZED_NAME_MINQ)
  private Integer minq;

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List<Integer> regions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYSTEMS = "systems";
  @SerializedName(SERIALIZED_NAME_SYSTEMS)
  private List<Integer> systems = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<Integer> types = new ArrayList<>();

  public ForQuery() {
  }

  public ForQuery bid(Boolean bid) {
    this.bid = bid;
    return this;
  }

  /**
   * is buy?
   * @return bid
   */
  @javax.annotation.Nullable
  public Boolean getBid() {
    return bid;
  }

  public void setBid(Boolean bid) {
    this.bid = bid;
  }


  public ForQuery hours(Integer hours) {
    this.hours = hours;
    return this;
  }

  /**
   * always 0
   * @return hours
   */
  @javax.annotation.Nullable
  public Integer getHours() {
    return hours;
  }

  public void setHours(Integer hours) {
    this.hours = hours;
  }


  public ForQuery minq(Integer minq) {
    this.minq = minq;
    return this;
  }

  /**
   * always 0
   * @return minq
   */
  @javax.annotation.Nullable
  public Integer getMinq() {
    return minq;
  }

  public void setMinq(Integer minq) {
    this.minq = minq;
  }


  public ForQuery regions(List<Integer> regions) {
    this.regions = regions;
    return this;
  }

  public ForQuery addRegionsItem(Integer regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

  /**
   * Region IDs
   * @return regions
   */
  @javax.annotation.Nullable
  public List<Integer> getRegions() {
    return regions;
  }

  public void setRegions(List<Integer> regions) {
    this.regions = regions;
  }


  public ForQuery systems(List<Integer> systems) {
    this.systems = systems;
    return this;
  }

  public ForQuery addSystemsItem(Integer systemsItem) {
    if (this.systems == null) {
      this.systems = new ArrayList<>();
    }
    this.systems.add(systemsItem);
    return this;
  }

  /**
   * System IDs
   * @return systems
   */
  @javax.annotation.Nullable
  public List<Integer> getSystems() {
    return systems;
  }

  public void setSystems(List<Integer> systems) {
    this.systems = systems;
  }


  public ForQuery types(List<Integer> types) {
    this.types = types;
    return this;
  }

  public ForQuery addTypesItem(Integer typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * Type IDs
   * @return types
   */
  @javax.annotation.Nullable
  public List<Integer> getTypes() {
    return types;
  }

  public void setTypes(List<Integer> types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForQuery forQuery = (ForQuery) o;
    return Objects.equals(this.bid, forQuery.bid) &&
        Objects.equals(this.hours, forQuery.hours) &&
        Objects.equals(this.minq, forQuery.minq) &&
        Objects.equals(this.regions, forQuery.regions) &&
        Objects.equals(this.systems, forQuery.systems) &&
        Objects.equals(this.types, forQuery.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bid, hours, minq, regions, systems, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForQuery {\n");
    sb.append("    bid: ").append(toIndentedString(bid)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    minq: ").append(toIndentedString(minq)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    systems: ").append(toIndentedString(systems)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bid");
    openapiFields.add("hours");
    openapiFields.add("minq");
    openapiFields.add("regions");
    openapiFields.add("systems");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ForQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForQuery is not found in the empty JSON string", ForQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonNull() && !jsonObj.get("regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regions` to be an array in the JSON string but got `%s`", jsonObj.get("regions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("systems") != null && !jsonObj.get("systems").isJsonNull() && !jsonObj.get("systems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `systems` to be an array in the JSON string but got `%s`", jsonObj.get("systems").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull() && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<ForQuery>() {
           @Override
           public void write(JsonWriter out, ForQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ForQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ForQuery
   * @throws IOException if the JSON string is invalid with respect to ForQuery
   */
  public static ForQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForQuery.class);
  }

  /**
   * Convert an instance of ForQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

