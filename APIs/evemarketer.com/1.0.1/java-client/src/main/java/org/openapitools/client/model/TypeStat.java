/*
 * EVEMarketer Marketstat API
 * EVEMarketer Marketstat API is almost compatible with EVE-Central's Marketstat API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ForQuery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TypeStat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:50.680413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TypeStat {
  public static final String SERIALIZED_NAME_AVG = "avg";
  @SerializedName(SERIALIZED_NAME_AVG)
  private Double avg;

  public static final String SERIALIZED_NAME_FIVE_PERCENT = "fivePercent";
  @SerializedName(SERIALIZED_NAME_FIVE_PERCENT)
  private Double fivePercent;

  public static final String SERIALIZED_NAME_FOR_QUERY = "forQuery";
  @SerializedName(SERIALIZED_NAME_FOR_QUERY)
  private ForQuery forQuery;

  public static final String SERIALIZED_NAME_GENERATED = "generated";
  @SerializedName(SERIALIZED_NAME_GENERATED)
  private Long generated;

  public static final String SERIALIZED_NAME_HIGH_TO_LOW = "highToLow";
  @SerializedName(SERIALIZED_NAME_HIGH_TO_LOW)
  private Boolean highToLow;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Double max;

  public static final String SERIALIZED_NAME_MEDIAN = "median";
  @SerializedName(SERIALIZED_NAME_MEDIAN)
  private Double median;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Double min;

  public static final String SERIALIZED_NAME_STD_DEV = "stdDev";
  @SerializedName(SERIALIZED_NAME_STD_DEV)
  private Double stdDev;

  public static final String SERIALIZED_NAME_VARIANCE = "variance";
  @SerializedName(SERIALIZED_NAME_VARIANCE)
  private Double variance;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private Long volume;

  public static final String SERIALIZED_NAME_WAVG = "wavg";
  @SerializedName(SERIALIZED_NAME_WAVG)
  private Double wavg;

  public TypeStat() {
  }

  public TypeStat avg(Double avg) {
    this.avg = avg;
    return this;
  }

  /**
   * Average Price
   * @return avg
   */
  @javax.annotation.Nullable
  public Double getAvg() {
    return avg;
  }

  public void setAvg(Double avg) {
    this.avg = avg;
  }


  public TypeStat fivePercent(Double fivePercent) {
    this.fivePercent = fivePercent;
    return this;
  }

  /**
   * Get fivePercent
   * @return fivePercent
   */
  @javax.annotation.Nullable
  public Double getFivePercent() {
    return fivePercent;
  }

  public void setFivePercent(Double fivePercent) {
    this.fivePercent = fivePercent;
  }


  public TypeStat forQuery(ForQuery forQuery) {
    this.forQuery = forQuery;
    return this;
  }

  /**
   * Get forQuery
   * @return forQuery
   */
  @javax.annotation.Nullable
  public ForQuery getForQuery() {
    return forQuery;
  }

  public void setForQuery(ForQuery forQuery) {
    this.forQuery = forQuery;
  }


  public TypeStat generated(Long generated) {
    this.generated = generated;
    return this;
  }

  /**
   * Generated at (UNIX Timestamp msec)
   * @return generated
   */
  @javax.annotation.Nullable
  public Long getGenerated() {
    return generated;
  }

  public void setGenerated(Long generated) {
    this.generated = generated;
  }


  public TypeStat highToLow(Boolean highToLow) {
    this.highToLow = highToLow;
    return this;
  }

  /**
   * Get highToLow
   * @return highToLow
   */
  @javax.annotation.Nullable
  public Boolean getHighToLow() {
    return highToLow;
  }

  public void setHighToLow(Boolean highToLow) {
    this.highToLow = highToLow;
  }


  public TypeStat max(Double max) {
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nullable
  public Double getMax() {
    return max;
  }

  public void setMax(Double max) {
    this.max = max;
  }


  public TypeStat median(Double median) {
    this.median = median;
    return this;
  }

  /**
   * Median Price
   * @return median
   */
  @javax.annotation.Nullable
  public Double getMedian() {
    return median;
  }

  public void setMedian(Double median) {
    this.median = median;
  }


  public TypeStat min(Double min) {
    this.min = min;
    return this;
  }

  /**
   * Get min
   * @return min
   */
  @javax.annotation.Nullable
  public Double getMin() {
    return min;
  }

  public void setMin(Double min) {
    this.min = min;
  }


  public TypeStat stdDev(Double stdDev) {
    this.stdDev = stdDev;
    return this;
  }

  /**
   * Standard Deviation
   * @return stdDev
   */
  @javax.annotation.Nullable
  public Double getStdDev() {
    return stdDev;
  }

  public void setStdDev(Double stdDev) {
    this.stdDev = stdDev;
  }


  public TypeStat variance(Double variance) {
    this.variance = variance;
    return this;
  }

  /**
   * Get variance
   * @return variance
   */
  @javax.annotation.Nullable
  public Double getVariance() {
    return variance;
  }

  public void setVariance(Double variance) {
    this.variance = variance;
  }


  public TypeStat volume(Long volume) {
    this.volume = volume;
    return this;
  }

  /**
   * Order Volume
   * @return volume
   */
  @javax.annotation.Nullable
  public Long getVolume() {
    return volume;
  }

  public void setVolume(Long volume) {
    this.volume = volume;
  }


  public TypeStat wavg(Double wavg) {
    this.wavg = wavg;
    return this;
  }

  /**
   * Weighted Average Price
   * @return wavg
   */
  @javax.annotation.Nullable
  public Double getWavg() {
    return wavg;
  }

  public void setWavg(Double wavg) {
    this.wavg = wavg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypeStat typeStat = (TypeStat) o;
    return Objects.equals(this.avg, typeStat.avg) &&
        Objects.equals(this.fivePercent, typeStat.fivePercent) &&
        Objects.equals(this.forQuery, typeStat.forQuery) &&
        Objects.equals(this.generated, typeStat.generated) &&
        Objects.equals(this.highToLow, typeStat.highToLow) &&
        Objects.equals(this.max, typeStat.max) &&
        Objects.equals(this.median, typeStat.median) &&
        Objects.equals(this.min, typeStat.min) &&
        Objects.equals(this.stdDev, typeStat.stdDev) &&
        Objects.equals(this.variance, typeStat.variance) &&
        Objects.equals(this.volume, typeStat.volume) &&
        Objects.equals(this.wavg, typeStat.wavg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avg, fivePercent, forQuery, generated, highToLow, max, median, min, stdDev, variance, volume, wavg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypeStat {\n");
    sb.append("    avg: ").append(toIndentedString(avg)).append("\n");
    sb.append("    fivePercent: ").append(toIndentedString(fivePercent)).append("\n");
    sb.append("    forQuery: ").append(toIndentedString(forQuery)).append("\n");
    sb.append("    generated: ").append(toIndentedString(generated)).append("\n");
    sb.append("    highToLow: ").append(toIndentedString(highToLow)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    median: ").append(toIndentedString(median)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    stdDev: ").append(toIndentedString(stdDev)).append("\n");
    sb.append("    variance: ").append(toIndentedString(variance)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    wavg: ").append(toIndentedString(wavg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avg");
    openapiFields.add("fivePercent");
    openapiFields.add("forQuery");
    openapiFields.add("generated");
    openapiFields.add("highToLow");
    openapiFields.add("max");
    openapiFields.add("median");
    openapiFields.add("min");
    openapiFields.add("stdDev");
    openapiFields.add("variance");
    openapiFields.add("volume");
    openapiFields.add("wavg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TypeStat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TypeStat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TypeStat is not found in the empty JSON string", TypeStat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TypeStat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TypeStat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `forQuery`
      if (jsonObj.get("forQuery") != null && !jsonObj.get("forQuery").isJsonNull()) {
        ForQuery.validateJsonElement(jsonObj.get("forQuery"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TypeStat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TypeStat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TypeStat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TypeStat.class));

       return (TypeAdapter<T>) new TypeAdapter<TypeStat>() {
           @Override
           public void write(JsonWriter out, TypeStat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TypeStat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TypeStat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TypeStat
   * @throws IOException if the JSON string is invalid with respect to TypeStat
   */
  public static TypeStat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TypeStat.class);
  }

  /**
   * Convert an instance of TypeStat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

