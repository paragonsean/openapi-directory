/**
 * EVEMarketer Marketstat API
 * EVEMarketer Marketstat API is almost compatible with EVE-Central's Marketstat API.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypeStatXML.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITypeStatXML::OAITypeStatXML(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITypeStatXML::OAITypeStatXML() {
    this->initializeModel();
}

OAITypeStatXML::~OAITypeStatXML() {}

void OAITypeStatXML::initializeModel() {

    m_avg_isSet = false;
    m_avg_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_median_isSet = false;
    m_median_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_percentile_isSet = false;
    m_percentile_isValid = false;

    m_stddev_isSet = false;
    m_stddev_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAITypeStatXML::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITypeStatXML::fromJsonObject(QJsonObject json) {

    m_avg_isValid = ::OpenAPI::fromJsonValue(m_avg, json[QString("avg")]);
    m_avg_isSet = !json[QString("avg")].isNull() && m_avg_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_median_isValid = ::OpenAPI::fromJsonValue(m_median, json[QString("median")]);
    m_median_isSet = !json[QString("median")].isNull() && m_median_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_percentile_isValid = ::OpenAPI::fromJsonValue(m_percentile, json[QString("percentile")]);
    m_percentile_isSet = !json[QString("percentile")].isNull() && m_percentile_isValid;

    m_stddev_isValid = ::OpenAPI::fromJsonValue(m_stddev, json[QString("stddev")]);
    m_stddev_isSet = !json[QString("stddev")].isNull() && m_stddev_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;
}

QString OAITypeStatXML::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITypeStatXML::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_isSet) {
        obj.insert(QString("avg"), ::OpenAPI::toJsonValue(m_avg));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_median_isSet) {
        obj.insert(QString("median"), ::OpenAPI::toJsonValue(m_median));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_percentile_isSet) {
        obj.insert(QString("percentile"), ::OpenAPI::toJsonValue(m_percentile));
    }
    if (m_stddev_isSet) {
        obj.insert(QString("stddev"), ::OpenAPI::toJsonValue(m_stddev));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

double OAITypeStatXML::getAvg() const {
    return m_avg;
}
void OAITypeStatXML::setAvg(const double &avg) {
    m_avg = avg;
    m_avg_isSet = true;
}

bool OAITypeStatXML::is_avg_Set() const{
    return m_avg_isSet;
}

bool OAITypeStatXML::is_avg_Valid() const{
    return m_avg_isValid;
}

double OAITypeStatXML::getMax() const {
    return m_max;
}
void OAITypeStatXML::setMax(const double &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAITypeStatXML::is_max_Set() const{
    return m_max_isSet;
}

bool OAITypeStatXML::is_max_Valid() const{
    return m_max_isValid;
}

double OAITypeStatXML::getMedian() const {
    return m_median;
}
void OAITypeStatXML::setMedian(const double &median) {
    m_median = median;
    m_median_isSet = true;
}

bool OAITypeStatXML::is_median_Set() const{
    return m_median_isSet;
}

bool OAITypeStatXML::is_median_Valid() const{
    return m_median_isValid;
}

double OAITypeStatXML::getMin() const {
    return m_min;
}
void OAITypeStatXML::setMin(const double &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAITypeStatXML::is_min_Set() const{
    return m_min_isSet;
}

bool OAITypeStatXML::is_min_Valid() const{
    return m_min_isValid;
}

double OAITypeStatXML::getPercentile() const {
    return m_percentile;
}
void OAITypeStatXML::setPercentile(const double &percentile) {
    m_percentile = percentile;
    m_percentile_isSet = true;
}

bool OAITypeStatXML::is_percentile_Set() const{
    return m_percentile_isSet;
}

bool OAITypeStatXML::is_percentile_Valid() const{
    return m_percentile_isValid;
}

double OAITypeStatXML::getStddev() const {
    return m_stddev;
}
void OAITypeStatXML::setStddev(const double &stddev) {
    m_stddev = stddev;
    m_stddev_isSet = true;
}

bool OAITypeStatXML::is_stddev_Set() const{
    return m_stddev_isSet;
}

bool OAITypeStatXML::is_stddev_Valid() const{
    return m_stddev_isValid;
}

qint64 OAITypeStatXML::getVolume() const {
    return m_volume;
}
void OAITypeStatXML::setVolume(const qint64 &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAITypeStatXML::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAITypeStatXML::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAITypeStatXML::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_median_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stddev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITypeStatXML::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
