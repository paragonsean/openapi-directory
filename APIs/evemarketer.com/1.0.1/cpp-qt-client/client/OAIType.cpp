/**
 * EVEMarketer Marketstat API
 * EVEMarketer Marketstat API is almost compatible with EVE-Central's Marketstat API.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIType::OAIType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIType::OAIType() {
    this->initializeModel();
}

OAIType::~OAIType() {}

void OAIType::initializeModel() {

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_sell_isSet = false;
    m_sell_isValid = false;
}

void OAIType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIType::fromJsonObject(QJsonObject json) {

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_sell_isValid = ::OpenAPI::fromJsonValue(m_sell, json[QString("sell")]);
    m_sell_isSet = !json[QString("sell")].isNull() && m_sell_isValid;
}

QString OAIType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIType::asJsonObject() const {
    QJsonObject obj;
    if (m_buy.isSet()) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_sell.isSet()) {
        obj.insert(QString("sell"), ::OpenAPI::toJsonValue(m_sell));
    }
    return obj;
}

OAITypeStat OAIType::getBuy() const {
    return m_buy;
}
void OAIType::setBuy(const OAITypeStat &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAIType::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAIType::is_buy_Valid() const{
    return m_buy_isValid;
}

OAITypeStat OAIType::getSell() const {
    return m_sell;
}
void OAIType::setSell(const OAITypeStat &sell) {
    m_sell = sell;
    m_sell_isSet = true;
}

bool OAIType::is_sell_Set() const{
    return m_sell_isSet;
}

bool OAIType::is_sell_Valid() const{
    return m_sell_isValid;
}

bool OAIType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
