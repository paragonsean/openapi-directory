/**
 * EVEMarketer Marketstat API
 * EVEMarketer Marketstat API is almost compatible with EVE-Central's Marketstat API.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForQuery::OAIForQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForQuery::OAIForQuery() {
    this->initializeModel();
}

OAIForQuery::~OAIForQuery() {}

void OAIForQuery::initializeModel() {

    m_bid_isSet = false;
    m_bid_isValid = false;

    m_hours_isSet = false;
    m_hours_isValid = false;

    m_minq_isSet = false;
    m_minq_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_systems_isSet = false;
    m_systems_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIForQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForQuery::fromJsonObject(QJsonObject json) {

    m_bid_isValid = ::OpenAPI::fromJsonValue(m_bid, json[QString("bid")]);
    m_bid_isSet = !json[QString("bid")].isNull() && m_bid_isValid;

    m_hours_isValid = ::OpenAPI::fromJsonValue(m_hours, json[QString("hours")]);
    m_hours_isSet = !json[QString("hours")].isNull() && m_hours_isValid;

    m_minq_isValid = ::OpenAPI::fromJsonValue(m_minq, json[QString("minq")]);
    m_minq_isSet = !json[QString("minq")].isNull() && m_minq_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_systems_isValid = ::OpenAPI::fromJsonValue(m_systems, json[QString("systems")]);
    m_systems_isSet = !json[QString("systems")].isNull() && m_systems_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIForQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_bid_isSet) {
        obj.insert(QString("bid"), ::OpenAPI::toJsonValue(m_bid));
    }
    if (m_hours_isSet) {
        obj.insert(QString("hours"), ::OpenAPI::toJsonValue(m_hours));
    }
    if (m_minq_isSet) {
        obj.insert(QString("minq"), ::OpenAPI::toJsonValue(m_minq));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_systems.size() > 0) {
        obj.insert(QString("systems"), ::OpenAPI::toJsonValue(m_systems));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

bool OAIForQuery::isBid() const {
    return m_bid;
}
void OAIForQuery::setBid(const bool &bid) {
    m_bid = bid;
    m_bid_isSet = true;
}

bool OAIForQuery::is_bid_Set() const{
    return m_bid_isSet;
}

bool OAIForQuery::is_bid_Valid() const{
    return m_bid_isValid;
}

qint32 OAIForQuery::getHours() const {
    return m_hours;
}
void OAIForQuery::setHours(const qint32 &hours) {
    m_hours = hours;
    m_hours_isSet = true;
}

bool OAIForQuery::is_hours_Set() const{
    return m_hours_isSet;
}

bool OAIForQuery::is_hours_Valid() const{
    return m_hours_isValid;
}

qint32 OAIForQuery::getMinq() const {
    return m_minq;
}
void OAIForQuery::setMinq(const qint32 &minq) {
    m_minq = minq;
    m_minq_isSet = true;
}

bool OAIForQuery::is_minq_Set() const{
    return m_minq_isSet;
}

bool OAIForQuery::is_minq_Valid() const{
    return m_minq_isValid;
}

QList<qint32> OAIForQuery::getRegions() const {
    return m_regions;
}
void OAIForQuery::setRegions(const QList<qint32> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIForQuery::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIForQuery::is_regions_Valid() const{
    return m_regions_isValid;
}

QList<qint32> OAIForQuery::getSystems() const {
    return m_systems;
}
void OAIForQuery::setSystems(const QList<qint32> &systems) {
    m_systems = systems;
    m_systems_isSet = true;
}

bool OAIForQuery::is_systems_Set() const{
    return m_systems_isSet;
}

bool OAIForQuery::is_systems_Valid() const{
    return m_systems_isValid;
}

QList<qint32> OAIForQuery::getTypes() const {
    return m_types;
}
void OAIForQuery::setTypes(const QList<qint32> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIForQuery::is_types_Set() const{
    return m_types_isSet;
}

bool OAIForQuery::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIForQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_systems.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
