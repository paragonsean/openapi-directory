/**
 * EVEMarketer Marketstat API
 * EVEMarketer Marketstat API is almost compatible with EVE-Central's Marketstat API.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITypeStat.h
 *
 * 
 */

#ifndef OAITypeStat_H
#define OAITypeStat_H

#include <QJsonObject>

#include "OAIForQuery.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIForQuery;

class OAITypeStat : public OAIObject {
public:
    OAITypeStat();
    OAITypeStat(QString json);
    ~OAITypeStat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAvg() const;
    void setAvg(const double &avg);
    bool is_avg_Set() const;
    bool is_avg_Valid() const;

    double getFivePercent() const;
    void setFivePercent(const double &five_percent);
    bool is_five_percent_Set() const;
    bool is_five_percent_Valid() const;

    OAIForQuery getForQuery() const;
    void setForQuery(const OAIForQuery &for_query);
    bool is_for_query_Set() const;
    bool is_for_query_Valid() const;

    qint64 getGenerated() const;
    void setGenerated(const qint64 &generated);
    bool is_generated_Set() const;
    bool is_generated_Valid() const;

    bool isHighToLow() const;
    void setHighToLow(const bool &high_to_low);
    bool is_high_to_low_Set() const;
    bool is_high_to_low_Valid() const;

    double getMax() const;
    void setMax(const double &max);
    bool is_max_Set() const;
    bool is_max_Valid() const;

    double getMedian() const;
    void setMedian(const double &median);
    bool is_median_Set() const;
    bool is_median_Valid() const;

    double getMin() const;
    void setMin(const double &min);
    bool is_min_Set() const;
    bool is_min_Valid() const;

    double getStdDev() const;
    void setStdDev(const double &std_dev);
    bool is_std_dev_Set() const;
    bool is_std_dev_Valid() const;

    double getVariance() const;
    void setVariance(const double &variance);
    bool is_variance_Set() const;
    bool is_variance_Valid() const;

    qint64 getVolume() const;
    void setVolume(const qint64 &volume);
    bool is_volume_Set() const;
    bool is_volume_Valid() const;

    double getWavg() const;
    void setWavg(const double &wavg);
    bool is_wavg_Set() const;
    bool is_wavg_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_avg;
    bool m_avg_isSet;
    bool m_avg_isValid;

    double m_five_percent;
    bool m_five_percent_isSet;
    bool m_five_percent_isValid;

    OAIForQuery m_for_query;
    bool m_for_query_isSet;
    bool m_for_query_isValid;

    qint64 m_generated;
    bool m_generated_isSet;
    bool m_generated_isValid;

    bool m_high_to_low;
    bool m_high_to_low_isSet;
    bool m_high_to_low_isValid;

    double m_max;
    bool m_max_isSet;
    bool m_max_isValid;

    double m_median;
    bool m_median_isSet;
    bool m_median_isValid;

    double m_min;
    bool m_min_isSet;
    bool m_min_isValid;

    double m_std_dev;
    bool m_std_dev_isSet;
    bool m_std_dev_isValid;

    double m_variance;
    bool m_variance_isSet;
    bool m_variance_isValid;

    qint64 m_volume;
    bool m_volume_isSet;
    bool m_volume_isValid;

    double m_wavg;
    bool m_wavg_isSet;
    bool m_wavg_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITypeStat)

#endif // OAITypeStat_H
