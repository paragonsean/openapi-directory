/**
 * EVEMarketer Marketstat API
 * EVEMarketer Marketstat API is almost compatible with EVE-Central's Marketstat API.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMarketstatApi_H
#define OAI_OAIMarketstatApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExecAPI.h"
#include "OAIType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMarketstatApi : public QObject {
    Q_OBJECT

public:
    OAIMarketstatApi(const int timeOut = 0);
    ~OAIMarketstatApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  r_typeid QList<qint32> [required]
    * @param[in]  regionlimit qint32 [optional]
    * @param[in]  usesystem qint32 [optional]
    */
    virtual void marketstatGet(const QList<qint32> &r_typeid, const ::OpenAPI::OptionalParam<qint32> &regionlimit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &usesystem = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  r_typeid QList<qint32> [required]
    * @param[in]  regionlimit qint32 [optional]
    * @param[in]  usesystem qint32 [optional]
    */
    virtual void marketstatJsonGet(const QList<qint32> &r_typeid, const ::OpenAPI::OptionalParam<qint32> &regionlimit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &usesystem = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  r_typeid QList<qint32> [required]
    * @param[in]  regionlimit qint32 [optional]
    * @param[in]  usesystem qint32 [optional]
    */
    virtual void marketstatJsonPost(const QList<qint32> &r_typeid, const ::OpenAPI::OptionalParam<qint32> &regionlimit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &usesystem = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  r_typeid QList<qint32> [required]
    * @param[in]  regionlimit qint32 [optional]
    * @param[in]  usesystem qint32 [optional]
    */
    virtual void marketstatPost(const QList<qint32> &r_typeid, const ::OpenAPI::OptionalParam<qint32> &regionlimit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &usesystem = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void marketstatGetCallback(OAIHttpRequestWorker *worker);
    void marketstatJsonGetCallback(OAIHttpRequestWorker *worker);
    void marketstatJsonPostCallback(OAIHttpRequestWorker *worker);
    void marketstatPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void marketstatGetSignal(OAIExecAPI summary);
    void marketstatJsonGetSignal(QList<OAIType> summary);
    void marketstatJsonPostSignal(QList<OAIType> summary);
    void marketstatPostSignal(OAIExecAPI summary);


    void marketstatGetSignalFull(OAIHttpRequestWorker *worker, OAIExecAPI summary);
    void marketstatJsonGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIType> summary);
    void marketstatJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIType> summary);
    void marketstatPostSignalFull(OAIHttpRequestWorker *worker, OAIExecAPI summary);

    Q_DECL_DEPRECATED_X("Use marketstatGetSignalError() instead")
    void marketstatGetSignalE(OAIExecAPI summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketstatGetSignalError(OAIExecAPI summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketstatJsonGetSignalError() instead")
    void marketstatJsonGetSignalE(QList<OAIType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketstatJsonGetSignalError(QList<OAIType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketstatJsonPostSignalError() instead")
    void marketstatJsonPostSignalE(QList<OAIType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketstatJsonPostSignalError(QList<OAIType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketstatPostSignalError() instead")
    void marketstatPostSignalE(OAIExecAPI summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketstatPostSignalError(OAIExecAPI summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use marketstatGetSignalErrorFull() instead")
    void marketstatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketstatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketstatJsonGetSignalErrorFull() instead")
    void marketstatJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketstatJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketstatJsonPostSignalErrorFull() instead")
    void marketstatJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketstatJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketstatPostSignalErrorFull() instead")
    void marketstatPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketstatPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
