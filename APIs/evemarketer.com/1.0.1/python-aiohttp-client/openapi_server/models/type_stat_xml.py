# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TypeStatXML(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg: float=None, max: float=None, median: float=None, min: float=None, percentile: float=None, stddev: float=None, volume: int=None):
        """TypeStatXML - a model defined in OpenAPI

        :param avg: The avg of this TypeStatXML.
        :param max: The max of this TypeStatXML.
        :param median: The median of this TypeStatXML.
        :param min: The min of this TypeStatXML.
        :param percentile: The percentile of this TypeStatXML.
        :param stddev: The stddev of this TypeStatXML.
        :param volume: The volume of this TypeStatXML.
        """
        self.openapi_types = {
            'avg': float,
            'max': float,
            'median': float,
            'min': float,
            'percentile': float,
            'stddev': float,
            'volume': int
        }

        self.attribute_map = {
            'avg': 'avg',
            'max': 'max',
            'median': 'median',
            'min': 'min',
            'percentile': 'percentile',
            'stddev': 'stddev',
            'volume': 'volume'
        }

        self._avg = avg
        self._max = max
        self._median = median
        self._min = min
        self._percentile = percentile
        self._stddev = stddev
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TypeStatXML':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TypeStatXML of this TypeStatXML.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg(self):
        """Gets the avg of this TypeStatXML.

        Weighted Average Price

        :return: The avg of this TypeStatXML.
        :rtype: float
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this TypeStatXML.

        Weighted Average Price

        :param avg: The avg of this TypeStatXML.
        :type avg: float
        """

        self._avg = avg

    @property
    def max(self):
        """Gets the max of this TypeStatXML.

        Maximum Price

        :return: The max of this TypeStatXML.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this TypeStatXML.

        Maximum Price

        :param max: The max of this TypeStatXML.
        :type max: float
        """

        self._max = max

    @property
    def median(self):
        """Gets the median of this TypeStatXML.

        Median Price

        :return: The median of this TypeStatXML.
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this TypeStatXML.

        Median Price

        :param median: The median of this TypeStatXML.
        :type median: float
        """

        self._median = median

    @property
    def min(self):
        """Gets the min of this TypeStatXML.

        Minimum Price

        :return: The min of this TypeStatXML.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this TypeStatXML.

        Minimum Price

        :param min: The min of this TypeStatXML.
        :type min: float
        """

        self._min = min

    @property
    def percentile(self):
        """Gets the percentile of this TypeStatXML.

        5% Price

        :return: The percentile of this TypeStatXML.
        :rtype: float
        """
        return self._percentile

    @percentile.setter
    def percentile(self, percentile):
        """Sets the percentile of this TypeStatXML.

        5% Price

        :param percentile: The percentile of this TypeStatXML.
        :type percentile: float
        """

        self._percentile = percentile

    @property
    def stddev(self):
        """Gets the stddev of this TypeStatXML.

        Standard Deviation

        :return: The stddev of this TypeStatXML.
        :rtype: float
        """
        return self._stddev

    @stddev.setter
    def stddev(self, stddev):
        """Sets the stddev of this TypeStatXML.

        Standard Deviation

        :param stddev: The stddev of this TypeStatXML.
        :type stddev: float
        """

        self._stddev = stddev

    @property
    def volume(self):
        """Gets the volume of this TypeStatXML.

        Order Volume

        :return: The volume of this TypeStatXML.
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this TypeStatXML.

        Order Volume

        :param volume: The volume of this TypeStatXML.
        :type volume: int
        """

        self._volume = volume
