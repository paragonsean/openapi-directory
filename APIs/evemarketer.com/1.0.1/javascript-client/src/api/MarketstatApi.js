/**
 * EVEMarketer Marketstat API
 * EVEMarketer Marketstat API is almost compatible with EVE-Central's Marketstat API.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExecAPI from '../model/ExecAPI';
import Type from '../model/Type';

/**
* Marketstat service.
* @module api/MarketstatApi
* @version 1.0.1
*/
export default class MarketstatApi {

    /**
    * Constructs a new MarketstatApi. 
    * @alias module:api/MarketstatApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the marketstatGet operation.
     * @callback module:api/MarketstatApi~marketstatGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecAPI} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * XML Marketstat
     * @param {Array.<Number>} typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid=34&typeid=35 or typeid=34,35 
     * @param {Object} opts Optional parameters
     * @param {Number} [regionlimit] Limit the statistics to a single region.
     * @param {Number} [usesystem] Limit the statistics to a single solar system.
     * @param {module:api/MarketstatApi~marketstatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecAPI}
     */
    marketstatGet(typeid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'typeid' is set
      if (typeid === undefined || typeid === null) {
        throw new Error("Missing the required parameter 'typeid' when calling marketstatGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'typeid': this.apiClient.buildCollectionParam(typeid, 'csv'),
        'regionlimit': opts['regionlimit'],
        'usesystem': opts['usesystem']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = ExecAPI;
      return this.apiClient.callApi(
        '/marketstat', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketstatJsonGet operation.
     * @callback module:api/MarketstatApi~marketstatJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Type>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * JSON Marketstat
     * @param {Array.<Number>} typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid=34&typeid=35 or typeid=34,35 
     * @param {Object} opts Optional parameters
     * @param {Number} [regionlimit] Limit the statistics to a single region.
     * @param {Number} [usesystem] Limit the statistics to a single region.
     * @param {module:api/MarketstatApi~marketstatJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Type>}
     */
    marketstatJsonGet(typeid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'typeid' is set
      if (typeid === undefined || typeid === null) {
        throw new Error("Missing the required parameter 'typeid' when calling marketstatJsonGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'typeid': this.apiClient.buildCollectionParam(typeid, 'csv'),
        'regionlimit': opts['regionlimit'],
        'usesystem': opts['usesystem']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Type];
      return this.apiClient.callApi(
        '/marketstat/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketstatJsonPost operation.
     * @callback module:api/MarketstatApi~marketstatJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Type>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * JSON Marketstat
     * @param {Array.<Number>} typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid=34&typeid=35 or typeid=34,35 
     * @param {Object} opts Optional parameters
     * @param {Number} [regionlimit] Limit the statistics to a single region.
     * @param {Number} [usesystem] Limit the statistics to a single region.
     * @param {module:api/MarketstatApi~marketstatJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Type>}
     */
    marketstatJsonPost(typeid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'typeid' is set
      if (typeid === undefined || typeid === null) {
        throw new Error("Missing the required parameter 'typeid' when calling marketstatJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'typeid': this.apiClient.buildCollectionParam(typeid, 'csv'),
        'regionlimit': opts['regionlimit'],
        'usesystem': opts['usesystem']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Type];
      return this.apiClient.callApi(
        '/marketstat/json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketstatPost operation.
     * @callback module:api/MarketstatApi~marketstatPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecAPI} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * XML Marketstat
     * @param {Array.<Number>} typeid TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request): typeid=34&typeid=35 or typeid=34,35 
     * @param {Object} opts Optional parameters
     * @param {Number} [regionlimit] Limit the statistics to a single region.
     * @param {Number} [usesystem] Limit the statistics to a single solar system.
     * @param {module:api/MarketstatApi~marketstatPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecAPI}
     */
    marketstatPost(typeid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'typeid' is set
      if (typeid === undefined || typeid === null) {
        throw new Error("Missing the required parameter 'typeid' when calling marketstatPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'typeid': this.apiClient.buildCollectionParam(typeid, 'csv'),
        'regionlimit': opts['regionlimit'],
        'usesystem': opts['usesystem']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/xml'];
      let returnType = ExecAPI;
      return this.apiClient.callApi(
        '/marketstat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
