/*
 * geodesystems.com:443
 * Search for data in lots of places - manage your documents, photos and critical business knowledge - communicate and coordinate with blogs, interactive wikis, and data integration dashboards.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TypeTypePointSnotelApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TypeTypePointSnotelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TypeTypePointSnotelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchTypePointSnotel
     * @param text Search text (optional)
     * @param name Search name (optional)
     * @param description Search description (optional)
     * @param fromdate From date (optional)
     * @param todate To date (optional)
     * @param createdateFrom Archive create date from (optional)
     * @param createdateTo Archive create date to (optional)
     * @param changedateFrom Archive change date from (optional)
     * @param changedateTo Archive change date to (optional)
     * @param group Parent entry (optional)
     * @param filesuffix File suffix (optional)
     * @param maxlatitude Northern bounds of search (optional)
     * @param minlongitude Western bounds of search (optional)
     * @param minlatitude Southern bounds of search (optional)
     * @param maxlongitude Eastern bounds of search (optional)
     * @param max Max number of results (optional)
     * @param skip Number to skip (optional)
     * @param searchTypePointSnotelSiteId Site ID (optional)
     * @param searchTypePointSnotelSiteNumber Site Number (optional)
     * @param searchTypePointSnotelState State (optional)
     * @param searchTypePointSnotelNetwork Network (optional)
     * @param searchTypePointSnotelHucName HUC Name (optional)
     * @param searchTypePointSnotelHucId HUC ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTypePointSnotelCall(String text, String name, String description, OffsetDateTime fromdate, OffsetDateTime todate, OffsetDateTime createdateFrom, OffsetDateTime createdateTo, OffsetDateTime changedateFrom, OffsetDateTime changedateTo, String group, String filesuffix, Float maxlatitude, Float minlongitude, Float minlatitude, Float maxlongitude, Integer max, Integer skip, String searchTypePointSnotelSiteId, String searchTypePointSnotelSiteNumber, String searchTypePointSnotelState, String searchTypePointSnotelNetwork, String searchTypePointSnotelHucName, String searchTypePointSnotelHucId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repository/search/type/type_point_snotel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (createdateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdate.from", createdateFrom));
        }

        if (createdateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdate.to", createdateTo));
        }

        if (changedateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedate.from", changedateFrom));
        }

        if (changedateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changedate.to", changedateTo));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (filesuffix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filesuffix", filesuffix));
        }

        if (maxlatitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxlatitude", maxlatitude));
        }

        if (minlongitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minlongitude", minlongitude));
        }

        if (minlatitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minlatitude", minlatitude));
        }

        if (maxlongitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxlongitude", maxlongitude));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (searchTypePointSnotelSiteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search.type_point_snotel.site_id", searchTypePointSnotelSiteId));
        }

        if (searchTypePointSnotelSiteNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search.type_point_snotel.site_number", searchTypePointSnotelSiteNumber));
        }

        if (searchTypePointSnotelState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search.type_point_snotel.state", searchTypePointSnotelState));
        }

        if (searchTypePointSnotelNetwork != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search.type_point_snotel.network", searchTypePointSnotelNetwork));
        }

        if (searchTypePointSnotelHucName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search.type_point_snotel.huc_name", searchTypePointSnotelHucName));
        }

        if (searchTypePointSnotelHucId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search.type_point_snotel.huc_id", searchTypePointSnotelHucId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchTypePointSnotelValidateBeforeCall(String text, String name, String description, OffsetDateTime fromdate, OffsetDateTime todate, OffsetDateTime createdateFrom, OffsetDateTime createdateTo, OffsetDateTime changedateFrom, OffsetDateTime changedateTo, String group, String filesuffix, Float maxlatitude, Float minlongitude, Float minlatitude, Float maxlongitude, Integer max, Integer skip, String searchTypePointSnotelSiteId, String searchTypePointSnotelSiteNumber, String searchTypePointSnotelState, String searchTypePointSnotelNetwork, String searchTypePointSnotelHucName, String searchTypePointSnotelHucId, final ApiCallback _callback) throws ApiException {
        return searchTypePointSnotelCall(text, name, description, fromdate, todate, createdateFrom, createdateTo, changedateFrom, changedateTo, group, filesuffix, maxlatitude, minlongitude, minlatitude, maxlongitude, max, skip, searchTypePointSnotelSiteId, searchTypePointSnotelSiteNumber, searchTypePointSnotelState, searchTypePointSnotelNetwork, searchTypePointSnotelHucName, searchTypePointSnotelHucId, _callback);

    }

    /**
     * Search API for &#39;SNOTEL Snow Data&#39; entry type
     * API to search for entries of type SNOTEL Snow Data
     * @param text Search text (optional)
     * @param name Search name (optional)
     * @param description Search description (optional)
     * @param fromdate From date (optional)
     * @param todate To date (optional)
     * @param createdateFrom Archive create date from (optional)
     * @param createdateTo Archive create date to (optional)
     * @param changedateFrom Archive change date from (optional)
     * @param changedateTo Archive change date to (optional)
     * @param group Parent entry (optional)
     * @param filesuffix File suffix (optional)
     * @param maxlatitude Northern bounds of search (optional)
     * @param minlongitude Western bounds of search (optional)
     * @param minlatitude Southern bounds of search (optional)
     * @param maxlongitude Eastern bounds of search (optional)
     * @param max Max number of results (optional)
     * @param skip Number to skip (optional)
     * @param searchTypePointSnotelSiteId Site ID (optional)
     * @param searchTypePointSnotelSiteNumber Site Number (optional)
     * @param searchTypePointSnotelState State (optional)
     * @param searchTypePointSnotelNetwork Network (optional)
     * @param searchTypePointSnotelHucName HUC Name (optional)
     * @param searchTypePointSnotelHucId HUC ID (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void searchTypePointSnotel(String text, String name, String description, OffsetDateTime fromdate, OffsetDateTime todate, OffsetDateTime createdateFrom, OffsetDateTime createdateTo, OffsetDateTime changedateFrom, OffsetDateTime changedateTo, String group, String filesuffix, Float maxlatitude, Float minlongitude, Float minlatitude, Float maxlongitude, Integer max, Integer skip, String searchTypePointSnotelSiteId, String searchTypePointSnotelSiteNumber, String searchTypePointSnotelState, String searchTypePointSnotelNetwork, String searchTypePointSnotelHucName, String searchTypePointSnotelHucId) throws ApiException {
        searchTypePointSnotelWithHttpInfo(text, name, description, fromdate, todate, createdateFrom, createdateTo, changedateFrom, changedateTo, group, filesuffix, maxlatitude, minlongitude, minlatitude, maxlongitude, max, skip, searchTypePointSnotelSiteId, searchTypePointSnotelSiteNumber, searchTypePointSnotelState, searchTypePointSnotelNetwork, searchTypePointSnotelHucName, searchTypePointSnotelHucId);
    }

    /**
     * Search API for &#39;SNOTEL Snow Data&#39; entry type
     * API to search for entries of type SNOTEL Snow Data
     * @param text Search text (optional)
     * @param name Search name (optional)
     * @param description Search description (optional)
     * @param fromdate From date (optional)
     * @param todate To date (optional)
     * @param createdateFrom Archive create date from (optional)
     * @param createdateTo Archive create date to (optional)
     * @param changedateFrom Archive change date from (optional)
     * @param changedateTo Archive change date to (optional)
     * @param group Parent entry (optional)
     * @param filesuffix File suffix (optional)
     * @param maxlatitude Northern bounds of search (optional)
     * @param minlongitude Western bounds of search (optional)
     * @param minlatitude Southern bounds of search (optional)
     * @param maxlongitude Eastern bounds of search (optional)
     * @param max Max number of results (optional)
     * @param skip Number to skip (optional)
     * @param searchTypePointSnotelSiteId Site ID (optional)
     * @param searchTypePointSnotelSiteNumber Site Number (optional)
     * @param searchTypePointSnotelState State (optional)
     * @param searchTypePointSnotelNetwork Network (optional)
     * @param searchTypePointSnotelHucName HUC Name (optional)
     * @param searchTypePointSnotelHucId HUC ID (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchTypePointSnotelWithHttpInfo(String text, String name, String description, OffsetDateTime fromdate, OffsetDateTime todate, OffsetDateTime createdateFrom, OffsetDateTime createdateTo, OffsetDateTime changedateFrom, OffsetDateTime changedateTo, String group, String filesuffix, Float maxlatitude, Float minlongitude, Float minlatitude, Float maxlongitude, Integer max, Integer skip, String searchTypePointSnotelSiteId, String searchTypePointSnotelSiteNumber, String searchTypePointSnotelState, String searchTypePointSnotelNetwork, String searchTypePointSnotelHucName, String searchTypePointSnotelHucId) throws ApiException {
        okhttp3.Call localVarCall = searchTypePointSnotelValidateBeforeCall(text, name, description, fromdate, todate, createdateFrom, createdateTo, changedateFrom, changedateTo, group, filesuffix, maxlatitude, minlongitude, minlatitude, maxlongitude, max, skip, searchTypePointSnotelSiteId, searchTypePointSnotelSiteNumber, searchTypePointSnotelState, searchTypePointSnotelNetwork, searchTypePointSnotelHucName, searchTypePointSnotelHucId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search API for &#39;SNOTEL Snow Data&#39; entry type (asynchronously)
     * API to search for entries of type SNOTEL Snow Data
     * @param text Search text (optional)
     * @param name Search name (optional)
     * @param description Search description (optional)
     * @param fromdate From date (optional)
     * @param todate To date (optional)
     * @param createdateFrom Archive create date from (optional)
     * @param createdateTo Archive create date to (optional)
     * @param changedateFrom Archive change date from (optional)
     * @param changedateTo Archive change date to (optional)
     * @param group Parent entry (optional)
     * @param filesuffix File suffix (optional)
     * @param maxlatitude Northern bounds of search (optional)
     * @param minlongitude Western bounds of search (optional)
     * @param minlatitude Southern bounds of search (optional)
     * @param maxlongitude Eastern bounds of search (optional)
     * @param max Max number of results (optional)
     * @param skip Number to skip (optional)
     * @param searchTypePointSnotelSiteId Site ID (optional)
     * @param searchTypePointSnotelSiteNumber Site Number (optional)
     * @param searchTypePointSnotelState State (optional)
     * @param searchTypePointSnotelNetwork Network (optional)
     * @param searchTypePointSnotelHucName HUC Name (optional)
     * @param searchTypePointSnotelHucId HUC ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTypePointSnotelAsync(String text, String name, String description, OffsetDateTime fromdate, OffsetDateTime todate, OffsetDateTime createdateFrom, OffsetDateTime createdateTo, OffsetDateTime changedateFrom, OffsetDateTime changedateTo, String group, String filesuffix, Float maxlatitude, Float minlongitude, Float minlatitude, Float maxlongitude, Integer max, Integer skip, String searchTypePointSnotelSiteId, String searchTypePointSnotelSiteNumber, String searchTypePointSnotelState, String searchTypePointSnotelNetwork, String searchTypePointSnotelHucName, String searchTypePointSnotelHucId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchTypePointSnotelValidateBeforeCall(text, name, description, fromdate, todate, createdateFrom, createdateTo, changedateFrom, changedateTo, group, filesuffix, maxlatitude, minlongitude, minlatitude, maxlongitude, max, skip, searchTypePointSnotelSiteId, searchTypePointSnotelSiteNumber, searchTypePointSnotelState, searchTypePointSnotelNetwork, searchTypePointSnotelHucName, searchTypePointSnotelHucId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
