/**
 * geodesystems.com:443
 * Search for data in lots of places - manage your documents, photos and critical business knowledge - communicate and coordinate with blogs, interactive wikis, and data integration dashboards.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITypeBoulderCampaignContributionsApi_H
#define OAI_OAITypeBoulderCampaignContributionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITypeBoulderCampaignContributionsApi : public QObject {
    Q_OBJECT

public:
    OAITypeBoulderCampaignContributionsApi(const int timeOut = 0);
    ~OAITypeBoulderCampaignContributionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  text QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  fromdate QDateTime [optional]
    * @param[in]  todate QDateTime [optional]
    * @param[in]  createdate_from QDateTime [optional]
    * @param[in]  createdate_to QDateTime [optional]
    * @param[in]  changedate_from QDateTime [optional]
    * @param[in]  changedate_to QDateTime [optional]
    * @param[in]  group QString [optional]
    * @param[in]  filesuffix QString [optional]
    * @param[in]  maxlatitude float [optional]
    * @param[in]  minlongitude float [optional]
    * @param[in]  minlatitude float [optional]
    * @param[in]  maxlongitude float [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  search_db_boulder_campaign_contributions_committee QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_type QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_committee_num QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_candidate QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_filing_date QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_amended_date QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_official_filing QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_transaction_date QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_last_name QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_first_name QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_street QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_city QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_state QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_zip QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_contribution double [optional]
    * @param[in]  search_db_boulder_campaign_contributions_contribution_type QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_anonymous QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_from_candidate QString [optional]
    * @param[in]  search_db_boulder_campaign_contributions_match double [optional]
    */
    virtual void searchBoulderCampaignContributions(const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &fromdate = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &todate = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &createdate_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &createdate_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &changedate_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &changedate_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filesuffix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &maxlatitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &minlongitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &minlatitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &maxlongitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_committee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_committee_num = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_candidate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_filing_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_amended_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_official_filing = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_transaction_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_street = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &search_db_boulder_campaign_contributions_contribution = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_contribution_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_anonymous = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_db_boulder_campaign_contributions_from_candidate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &search_db_boulder_campaign_contributions_match = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void searchBoulderCampaignContributionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void searchBoulderCampaignContributionsSignal();


    void searchBoulderCampaignContributionsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use searchBoulderCampaignContributionsSignalError() instead")
    void searchBoulderCampaignContributionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchBoulderCampaignContributionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use searchBoulderCampaignContributionsSignalErrorFull() instead")
    void searchBoulderCampaignContributionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchBoulderCampaignContributionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
