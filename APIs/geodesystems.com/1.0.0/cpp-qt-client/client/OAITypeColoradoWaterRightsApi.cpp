/**
 * geodesystems.com:443
 * Search for data in lots of places - manage your documents, photos and critical business knowledge - communicate and coordinate with blogs, interactive wikis, and data integration dashboards.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypeColoradoWaterRightsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITypeColoradoWaterRightsApi::OAITypeColoradoWaterRightsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITypeColoradoWaterRightsApi::~OAITypeColoradoWaterRightsApi() {
}

void OAITypeColoradoWaterRightsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://geodesystems.com:443/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("searchColoradoWaterRights", defaultConf);
    _serverIndices.insert("searchColoradoWaterRights", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITypeColoradoWaterRightsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITypeColoradoWaterRightsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITypeColoradoWaterRightsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITypeColoradoWaterRightsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITypeColoradoWaterRightsApi::setUsername(const QString &username) {
    _username = username;
}

void OAITypeColoradoWaterRightsApi::setPassword(const QString &password) {
    _password = password;
}


void OAITypeColoradoWaterRightsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITypeColoradoWaterRightsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITypeColoradoWaterRightsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITypeColoradoWaterRightsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITypeColoradoWaterRightsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITypeColoradoWaterRightsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITypeColoradoWaterRightsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITypeColoradoWaterRightsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITypeColoradoWaterRightsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITypeColoradoWaterRightsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITypeColoradoWaterRightsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITypeColoradoWaterRightsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITypeColoradoWaterRightsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITypeColoradoWaterRightsApi::searchColoradoWaterRights(const ::OpenAPI::OptionalParam<QString> &text, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &description, const ::OpenAPI::OptionalParam<QDateTime> &fromdate, const ::OpenAPI::OptionalParam<QDateTime> &todate, const ::OpenAPI::OptionalParam<QDateTime> &createdate_from, const ::OpenAPI::OptionalParam<QDateTime> &createdate_to, const ::OpenAPI::OptionalParam<QDateTime> &changedate_from, const ::OpenAPI::OptionalParam<QDateTime> &changedate_to, const ::OpenAPI::OptionalParam<QString> &group, const ::OpenAPI::OptionalParam<QString> &filesuffix, const ::OpenAPI::OptionalParam<float> &maxlatitude, const ::OpenAPI::OptionalParam<float> &minlongitude, const ::OpenAPI::OptionalParam<float> &minlatitude, const ::OpenAPI::OptionalParam<float> &maxlongitude, const ::OpenAPI::OptionalParam<qint32> &max, const ::OpenAPI::OptionalParam<qint32> &skip, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_structure_name, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_structure_type, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_water_source, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_county, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_adjudication_date, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_appropriation_date, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_priority_no, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_decreed_uses, const ::OpenAPI::OptionalParam<double> &search_db_colorado_water_rights_net_absolute, const ::OpenAPI::OptionalParam<double> &search_db_colorado_water_rights_net_conditional, const ::OpenAPI::OptionalParam<double> &search_db_colorado_water_rights_net_apex_absolute, const ::OpenAPI::OptionalParam<double> &search_db_colorado_water_rights_net_apex_conditional, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_decreed_units, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_seasonal_limits, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_comments, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_more_information, const ::OpenAPI::OptionalParam<QString> &search_db_colorado_water_rights_location) {
    QString fullPath = QString(_serverConfigs["searchColoradoWaterRights"][_serverIndices.value("searchColoradoWaterRights")].URL()+"/repository/search/type/colorado_water_rights");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (text.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "text", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("text")).append(querySuffix).append(QUrl::toPercentEncoding(text.stringValue()));
    }
    if (name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(name.stringValue()));
    }
    if (description.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "description", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("description")).append(querySuffix).append(QUrl::toPercentEncoding(description.stringValue()));
    }
    if (fromdate.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fromdate", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fromdate")).append(querySuffix).append(QUrl::toPercentEncoding(fromdate.stringValue()));
    }
    if (todate.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "todate", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("todate")).append(querySuffix).append(QUrl::toPercentEncoding(todate.stringValue()));
    }
    if (createdate_from.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "createdate.from", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("createdate.from")).append(querySuffix).append(QUrl::toPercentEncoding(createdate_from.stringValue()));
    }
    if (createdate_to.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "createdate.to", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("createdate.to")).append(querySuffix).append(QUrl::toPercentEncoding(createdate_to.stringValue()));
    }
    if (changedate_from.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "changedate.from", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("changedate.from")).append(querySuffix).append(QUrl::toPercentEncoding(changedate_from.stringValue()));
    }
    if (changedate_to.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "changedate.to", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("changedate.to")).append(querySuffix).append(QUrl::toPercentEncoding(changedate_to.stringValue()));
    }
    if (group.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "group", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("group")).append(querySuffix).append(QUrl::toPercentEncoding(group.stringValue()));
    }
    if (filesuffix.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filesuffix", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filesuffix")).append(querySuffix).append(QUrl::toPercentEncoding(filesuffix.stringValue()));
    }
    if (maxlatitude.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "maxlatitude", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("maxlatitude")).append(querySuffix).append(QUrl::toPercentEncoding(maxlatitude.stringValue()));
    }
    if (minlongitude.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "minlongitude", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("minlongitude")).append(querySuffix).append(QUrl::toPercentEncoding(minlongitude.stringValue()));
    }
    if (minlatitude.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "minlatitude", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("minlatitude")).append(querySuffix).append(QUrl::toPercentEncoding(minlatitude.stringValue()));
    }
    if (maxlongitude.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "maxlongitude", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("maxlongitude")).append(querySuffix).append(QUrl::toPercentEncoding(maxlongitude.stringValue()));
    }
    if (max.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "max", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("max")).append(querySuffix).append(QUrl::toPercentEncoding(max.stringValue()));
    }
    if (skip.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "skip", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("skip")).append(querySuffix).append(QUrl::toPercentEncoding(skip.stringValue()));
    }
    if (search_db_colorado_water_rights_structure_name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.structure_name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.structure_name")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_structure_name.stringValue()));
    }
    if (search_db_colorado_water_rights_structure_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.structure_type", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.structure_type")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_structure_type.stringValue()));
    }
    if (search_db_colorado_water_rights_water_source.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.water_source", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.water_source")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_water_source.stringValue()));
    }
    if (search_db_colorado_water_rights_county.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.county", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.county")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_county.stringValue()));
    }
    if (search_db_colorado_water_rights_adjudication_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.adjudication_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.adjudication_date")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_adjudication_date.stringValue()));
    }
    if (search_db_colorado_water_rights_appropriation_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.appropriation_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.appropriation_date")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_appropriation_date.stringValue()));
    }
    if (search_db_colorado_water_rights_priority_no.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.priority_no", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.priority_no")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_priority_no.stringValue()));
    }
    if (search_db_colorado_water_rights_decreed_uses.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.decreed_uses", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.decreed_uses")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_decreed_uses.stringValue()));
    }
    if (search_db_colorado_water_rights_net_absolute.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.net_absolute", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.net_absolute")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_net_absolute.stringValue()));
    }
    if (search_db_colorado_water_rights_net_conditional.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.net_conditional", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.net_conditional")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_net_conditional.stringValue()));
    }
    if (search_db_colorado_water_rights_net_apex_absolute.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.net_apex_absolute", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.net_apex_absolute")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_net_apex_absolute.stringValue()));
    }
    if (search_db_colorado_water_rights_net_apex_conditional.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.net_apex_conditional", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.net_apex_conditional")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_net_apex_conditional.stringValue()));
    }
    if (search_db_colorado_water_rights_decreed_units.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.decreed_units", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.decreed_units")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_decreed_units.stringValue()));
    }
    if (search_db_colorado_water_rights_seasonal_limits.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.seasonal_limits", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.seasonal_limits")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_seasonal_limits.stringValue()));
    }
    if (search_db_colorado_water_rights_comments.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.comments", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.comments")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_comments.stringValue()));
    }
    if (search_db_colorado_water_rights_more_information.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.more_information", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.more_information")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_more_information.stringValue()));
    }
    if (search_db_colorado_water_rights_location.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search.db_colorado_water_rights.location", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search.db_colorado_water_rights.location")).append(querySuffix).append(QUrl::toPercentEncoding(search_db_colorado_water_rights_location.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITypeColoradoWaterRightsApi::searchColoradoWaterRightsCallback);
    connect(this, &OAITypeColoradoWaterRightsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITypeColoradoWaterRightsApi::searchColoradoWaterRightsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT searchColoradoWaterRightsSignal();
        Q_EMIT searchColoradoWaterRightsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT searchColoradoWaterRightsSignalE(error_type, error_str);
        Q_EMIT searchColoradoWaterRightsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT searchColoradoWaterRightsSignalError(error_type, error_str);
        Q_EMIT searchColoradoWaterRightsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITypeColoradoWaterRightsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
