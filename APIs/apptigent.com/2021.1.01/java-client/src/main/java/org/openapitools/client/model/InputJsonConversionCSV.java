/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InputJsonConversionCSV
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:11.265696-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputJsonConversionCSV {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Boolean header = true;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  public static final String SERIALIZED_NAME_OMIT = "omit";
  @SerializedName(SERIALIZED_NAME_OMIT)
  private String omit;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private String order;

  public InputJsonConversionCSV() {
  }

  public InputJsonConversionCSV header(Boolean header) {
    this.header = header;
    return this;
  }

  /**
   * Include header row
   * @return header
   */
  @javax.annotation.Nonnull
  public Boolean getHeader() {
    return header;
  }

  public void setHeader(Boolean header) {
    this.header = header;
  }


  public InputJsonConversionCSV input(String input) {
    this.input = input;
    return this;
  }

  /**
   * JSON array object
   * @return input
   */
  @javax.annotation.Nonnull
  public String getInput() {
    return input;
  }

  public void setInput(String input) {
    this.input = input;
  }


  public InputJsonConversionCSV omit(String omit) {
    this.omit = omit;
    return this;
  }

  /**
   * Columns to omit (comma separated)
   * @return omit
   */
  @javax.annotation.Nullable
  public String getOmit() {
    return omit;
  }

  public void setOmit(String omit) {
    this.omit = omit;
  }


  public InputJsonConversionCSV order(String order) {
    this.order = order;
    return this;
  }

  /**
   * Column order (comma separated)
   * @return order
   */
  @javax.annotation.Nullable
  public String getOrder() {
    return order;
  }

  public void setOrder(String order) {
    this.order = order;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputJsonConversionCSV inputJsonConversionCSV = (InputJsonConversionCSV) o;
    return Objects.equals(this.header, inputJsonConversionCSV.header) &&
        Objects.equals(this.input, inputJsonConversionCSV.input) &&
        Objects.equals(this.omit, inputJsonConversionCSV.omit) &&
        Objects.equals(this.order, inputJsonConversionCSV.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, input, omit, order);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputJsonConversionCSV {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    omit: ").append(toIndentedString(omit)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("input");
    openapiFields.add("omit");
    openapiFields.add("order");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("header");
    openapiRequiredFields.add("input");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputJsonConversionCSV
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputJsonConversionCSV.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputJsonConversionCSV is not found in the empty JSON string", InputJsonConversionCSV.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputJsonConversionCSV.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputJsonConversionCSV` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InputJsonConversionCSV.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("input").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `input` to be a primitive type in the JSON string but got `%s`", jsonObj.get("input").toString()));
      }
      if ((jsonObj.get("omit") != null && !jsonObj.get("omit").isJsonNull()) && !jsonObj.get("omit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `omit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("omit").toString()));
      }
      if ((jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) && !jsonObj.get("order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputJsonConversionCSV.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputJsonConversionCSV' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputJsonConversionCSV> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputJsonConversionCSV.class));

       return (TypeAdapter<T>) new TypeAdapter<InputJsonConversionCSV>() {
           @Override
           public void write(JsonWriter out, InputJsonConversionCSV value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputJsonConversionCSV read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputJsonConversionCSV given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputJsonConversionCSV
   * @throws IOException if the JSON string is invalid with respect to InputJsonConversionCSV
   */
  public static InputJsonConversionCSV fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputJsonConversionCSV.class);
  }

  /**
   * Convert an instance of InputJsonConversionCSV to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

