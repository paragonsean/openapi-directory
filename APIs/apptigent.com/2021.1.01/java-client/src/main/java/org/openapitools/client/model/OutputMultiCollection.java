/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OutputMultiCollection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:11.265696-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutputMultiCollection {
  public static final String SERIALIZED_NAME_RESULT1 = "result1";
  @SerializedName(SERIALIZED_NAME_RESULT1)
  private List<String> result1 = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULT2 = "result2";
  @SerializedName(SERIALIZED_NAME_RESULT2)
  private List<String> result2 = new ArrayList<>();

  public OutputMultiCollection() {
  }

  public OutputMultiCollection result1(List<String> result1) {
    this.result1 = result1;
    return this;
  }

  public OutputMultiCollection addResult1Item(String result1Item) {
    if (this.result1 == null) {
      this.result1 = new ArrayList<>();
    }
    this.result1.add(result1Item);
    return this;
  }

  /**
   * First collection result
   * @return result1
   */
  @javax.annotation.Nullable
  public List<String> getResult1() {
    return result1;
  }

  public void setResult1(List<String> result1) {
    this.result1 = result1;
  }


  public OutputMultiCollection result2(List<String> result2) {
    this.result2 = result2;
    return this;
  }

  public OutputMultiCollection addResult2Item(String result2Item) {
    if (this.result2 == null) {
      this.result2 = new ArrayList<>();
    }
    this.result2.add(result2Item);
    return this;
  }

  /**
   * Second collection result
   * @return result2
   */
  @javax.annotation.Nullable
  public List<String> getResult2() {
    return result2;
  }

  public void setResult2(List<String> result2) {
    this.result2 = result2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputMultiCollection outputMultiCollection = (OutputMultiCollection) o;
    return Objects.equals(this.result1, outputMultiCollection.result1) &&
        Objects.equals(this.result2, outputMultiCollection.result2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(result1, result2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputMultiCollection {\n");
    sb.append("    result1: ").append(toIndentedString(result1)).append("\n");
    sb.append("    result2: ").append(toIndentedString(result2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("result1");
    openapiFields.add("result2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutputMultiCollection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutputMultiCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutputMultiCollection is not found in the empty JSON string", OutputMultiCollection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutputMultiCollection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutputMultiCollection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("result1") != null && !jsonObj.get("result1").isJsonNull() && !jsonObj.get("result1").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `result1` to be an array in the JSON string but got `%s`", jsonObj.get("result1").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("result2") != null && !jsonObj.get("result2").isJsonNull() && !jsonObj.get("result2").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `result2` to be an array in the JSON string but got `%s`", jsonObj.get("result2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutputMultiCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutputMultiCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutputMultiCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutputMultiCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<OutputMultiCollection>() {
           @Override
           public void write(JsonWriter out, OutputMultiCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutputMultiCollection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutputMultiCollection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutputMultiCollection
   * @throws IOException if the JSON string is invalid with respect to OutputMultiCollection
   */
  public static OutputMultiCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutputMultiCollection.class);
  }

  /**
   * Convert an instance of OutputMultiCollection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

