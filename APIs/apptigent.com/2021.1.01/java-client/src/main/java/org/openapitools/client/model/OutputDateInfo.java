/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OutputDateInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:11.265696-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutputDateInfo {
  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "DayOfWeek";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  private BigDecimal dayOfWeek;

  public static final String SERIALIZED_NAME_DAY_OF_YEAR = "DayOfYear";
  @SerializedName(SERIALIZED_NAME_DAY_OF_YEAR)
  private BigDecimal dayOfYear;

  public static final String SERIALIZED_NAME_MINUTES_IN_DAY = "MinutesInDay";
  @SerializedName(SERIALIZED_NAME_MINUTES_IN_DAY)
  private BigDecimal minutesInDay;

  public static final String SERIALIZED_NAME_SECONDS_IN_DAY = "SecondsInDay";
  @SerializedName(SERIALIZED_NAME_SECONDS_IN_DAY)
  private BigDecimal secondsInDay;

  public static final String SERIALIZED_NAME_TICKS = "Ticks";
  @SerializedName(SERIALIZED_NAME_TICKS)
  private BigDecimal ticks;

  public static final String SERIALIZED_NAME_WEEK_OF_YEAR = "WeekOfYear";
  @SerializedName(SERIALIZED_NAME_WEEK_OF_YEAR)
  private BigDecimal weekOfYear;

  public OutputDateInfo() {
  }

  public OutputDateInfo dayOfWeek(BigDecimal dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  /**
   * DayOfWeek
   * @return dayOfWeek
   */
  @javax.annotation.Nullable
  public BigDecimal getDayOfWeek() {
    return dayOfWeek;
  }

  public void setDayOfWeek(BigDecimal dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }


  public OutputDateInfo dayOfYear(BigDecimal dayOfYear) {
    this.dayOfYear = dayOfYear;
    return this;
  }

  /**
   * DayOfYear
   * @return dayOfYear
   */
  @javax.annotation.Nullable
  public BigDecimal getDayOfYear() {
    return dayOfYear;
  }

  public void setDayOfYear(BigDecimal dayOfYear) {
    this.dayOfYear = dayOfYear;
  }


  public OutputDateInfo minutesInDay(BigDecimal minutesInDay) {
    this.minutesInDay = minutesInDay;
    return this;
  }

  /**
   * MinutesInDay
   * @return minutesInDay
   */
  @javax.annotation.Nullable
  public BigDecimal getMinutesInDay() {
    return minutesInDay;
  }

  public void setMinutesInDay(BigDecimal minutesInDay) {
    this.minutesInDay = minutesInDay;
  }


  public OutputDateInfo secondsInDay(BigDecimal secondsInDay) {
    this.secondsInDay = secondsInDay;
    return this;
  }

  /**
   * SecondsInDay
   * @return secondsInDay
   */
  @javax.annotation.Nullable
  public BigDecimal getSecondsInDay() {
    return secondsInDay;
  }

  public void setSecondsInDay(BigDecimal secondsInDay) {
    this.secondsInDay = secondsInDay;
  }


  public OutputDateInfo ticks(BigDecimal ticks) {
    this.ticks = ticks;
    return this;
  }

  /**
   * Ticks
   * @return ticks
   */
  @javax.annotation.Nullable
  public BigDecimal getTicks() {
    return ticks;
  }

  public void setTicks(BigDecimal ticks) {
    this.ticks = ticks;
  }


  public OutputDateInfo weekOfYear(BigDecimal weekOfYear) {
    this.weekOfYear = weekOfYear;
    return this;
  }

  /**
   * WeekOfYear
   * @return weekOfYear
   */
  @javax.annotation.Nullable
  public BigDecimal getWeekOfYear() {
    return weekOfYear;
  }

  public void setWeekOfYear(BigDecimal weekOfYear) {
    this.weekOfYear = weekOfYear;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputDateInfo outputDateInfo = (OutputDateInfo) o;
    return Objects.equals(this.dayOfWeek, outputDateInfo.dayOfWeek) &&
        Objects.equals(this.dayOfYear, outputDateInfo.dayOfYear) &&
        Objects.equals(this.minutesInDay, outputDateInfo.minutesInDay) &&
        Objects.equals(this.secondsInDay, outputDateInfo.secondsInDay) &&
        Objects.equals(this.ticks, outputDateInfo.ticks) &&
        Objects.equals(this.weekOfYear, outputDateInfo.weekOfYear);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfWeek, dayOfYear, minutesInDay, secondsInDay, ticks, weekOfYear);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputDateInfo {\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    dayOfYear: ").append(toIndentedString(dayOfYear)).append("\n");
    sb.append("    minutesInDay: ").append(toIndentedString(minutesInDay)).append("\n");
    sb.append("    secondsInDay: ").append(toIndentedString(secondsInDay)).append("\n");
    sb.append("    ticks: ").append(toIndentedString(ticks)).append("\n");
    sb.append("    weekOfYear: ").append(toIndentedString(weekOfYear)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DayOfWeek");
    openapiFields.add("DayOfYear");
    openapiFields.add("MinutesInDay");
    openapiFields.add("SecondsInDay");
    openapiFields.add("Ticks");
    openapiFields.add("WeekOfYear");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutputDateInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutputDateInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutputDateInfo is not found in the empty JSON string", OutputDateInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutputDateInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutputDateInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutputDateInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutputDateInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutputDateInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutputDateInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<OutputDateInfo>() {
           @Override
           public void write(JsonWriter out, OutputDateInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutputDateInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutputDateInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutputDateInfo
   * @throws IOException if the JSON string is invalid with respect to OutputDateInfo
   */
  public static OutputDateInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutputDateInfo.class);
  }

  /**
   * Convert an instance of OutputDateInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

