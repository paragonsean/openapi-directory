/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InputCollectionSearch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:11.265696-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputCollectionSearch {
  /**
   * Ignore case when performing comparison
   */
  @JsonAdapter(IgnorecaseEnum.Adapter.class)
  public enum IgnorecaseEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    IgnorecaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IgnorecaseEnum fromValue(String value) {
      for (IgnorecaseEnum b : IgnorecaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IgnorecaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IgnorecaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IgnorecaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IgnorecaseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IgnorecaseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IGNORECASE = "ignorecase";
  @SerializedName(SERIALIZED_NAME_IGNORECASE)
  private IgnorecaseEnum ignorecase;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private List<String> input = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  private String match;

  /**
   * Trim white space from comparison string
   */
  @JsonAdapter(TrimEnum.Adapter.class)
  public enum TrimEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    TrimEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrimEnum fromValue(String value) {
      for (TrimEnum b : TrimEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrimEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrimEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrimEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrimEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrimEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private TrimEnum trim;

  public InputCollectionSearch() {
  }

  public InputCollectionSearch ignorecase(IgnorecaseEnum ignorecase) {
    this.ignorecase = ignorecase;
    return this;
  }

  /**
   * Ignore case when performing comparison
   * @return ignorecase
   */
  @javax.annotation.Nullable
  public IgnorecaseEnum getIgnorecase() {
    return ignorecase;
  }

  public void setIgnorecase(IgnorecaseEnum ignorecase) {
    this.ignorecase = ignorecase;
  }


  public InputCollectionSearch input(List<String> input) {
    this.input = input;
    return this;
  }

  public InputCollectionSearch addInputItem(String inputItem) {
    if (this.input == null) {
      this.input = new ArrayList<>();
    }
    this.input.add(inputItem);
    return this;
  }

  /**
   * Collection of strings to search
   * @return input
   */
  @javax.annotation.Nonnull
  public List<String> getInput() {
    return input;
  }

  public void setInput(List<String> input) {
    this.input = input;
  }


  public InputCollectionSearch match(String match) {
    this.match = match;
    return this;
  }

  /**
   * Text to match
   * @return match
   */
  @javax.annotation.Nonnull
  public String getMatch() {
    return match;
  }

  public void setMatch(String match) {
    this.match = match;
  }


  public InputCollectionSearch trim(TrimEnum trim) {
    this.trim = trim;
    return this;
  }

  /**
   * Trim white space from comparison string
   * @return trim
   */
  @javax.annotation.Nullable
  public TrimEnum getTrim() {
    return trim;
  }

  public void setTrim(TrimEnum trim) {
    this.trim = trim;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputCollectionSearch inputCollectionSearch = (InputCollectionSearch) o;
    return Objects.equals(this.ignorecase, inputCollectionSearch.ignorecase) &&
        Objects.equals(this.input, inputCollectionSearch.input) &&
        Objects.equals(this.match, inputCollectionSearch.match) &&
        Objects.equals(this.trim, inputCollectionSearch.trim);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ignorecase, input, match, trim);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputCollectionSearch {\n");
    sb.append("    ignorecase: ").append(toIndentedString(ignorecase)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ignorecase");
    openapiFields.add("input");
    openapiFields.add("match");
    openapiFields.add("trim");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("input");
    openapiRequiredFields.add("match");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputCollectionSearch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputCollectionSearch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputCollectionSearch is not found in the empty JSON string", InputCollectionSearch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputCollectionSearch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputCollectionSearch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InputCollectionSearch.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ignorecase") != null && !jsonObj.get("ignorecase").isJsonNull()) && !jsonObj.get("ignorecase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignorecase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ignorecase").toString()));
      }
      // validate the optional field `ignorecase`
      if (jsonObj.get("ignorecase") != null && !jsonObj.get("ignorecase").isJsonNull()) {
        IgnorecaseEnum.validateJsonElement(jsonObj.get("ignorecase"));
      }
      // ensure the required json array is present
      if (jsonObj.get("input") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("input").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `input` to be an array in the JSON string but got `%s`", jsonObj.get("input").toString()));
      }
      if (!jsonObj.get("match").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `match` to be a primitive type in the JSON string but got `%s`", jsonObj.get("match").toString()));
      }
      if ((jsonObj.get("trim") != null && !jsonObj.get("trim").isJsonNull()) && !jsonObj.get("trim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trim").toString()));
      }
      // validate the optional field `trim`
      if (jsonObj.get("trim") != null && !jsonObj.get("trim").isJsonNull()) {
        TrimEnum.validateJsonElement(jsonObj.get("trim"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputCollectionSearch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputCollectionSearch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputCollectionSearch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputCollectionSearch.class));

       return (TypeAdapter<T>) new TypeAdapter<InputCollectionSearch>() {
           @Override
           public void write(JsonWriter out, InputCollectionSearch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputCollectionSearch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputCollectionSearch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputCollectionSearch
   * @throws IOException if the JSON string is invalid with respect to InputCollectionSearch
   */
  public static InputCollectionSearch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputCollectionSearch.class);
  }

  /**
   * Convert an instance of InputCollectionSearch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

