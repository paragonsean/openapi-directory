/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InputCalculatePower
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:11.265696-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputCalculatePower {
  public static final String SERIALIZED_NAME_DECIMALS = "decimals";
  @SerializedName(SERIALIZED_NAME_DECIMALS)
  private BigDecimal decimals;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private BigDecimal input;

  public static final String SERIALIZED_NAME_POWER = "power";
  @SerializedName(SERIALIZED_NAME_POWER)
  private BigDecimal power;

  public InputCalculatePower() {
  }

  public InputCalculatePower decimals(BigDecimal decimals) {
    this.decimals = decimals;
    return this;
  }

  /**
   * Round to number of decimal places
   * minimum: 0
   * @return decimals
   */
  @javax.annotation.Nonnull
  public BigDecimal getDecimals() {
    return decimals;
  }

  public void setDecimals(BigDecimal decimals) {
    this.decimals = decimals;
  }


  public InputCalculatePower input(BigDecimal input) {
    this.input = input;
    return this;
  }

  /**
   * Number to raise
   * @return input
   */
  @javax.annotation.Nonnull
  public BigDecimal getInput() {
    return input;
  }

  public void setInput(BigDecimal input) {
    this.input = input;
  }


  public InputCalculatePower power(BigDecimal power) {
    this.power = power;
    return this;
  }

  /**
   * Power
   * @return power
   */
  @javax.annotation.Nonnull
  public BigDecimal getPower() {
    return power;
  }

  public void setPower(BigDecimal power) {
    this.power = power;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputCalculatePower inputCalculatePower = (InputCalculatePower) o;
    return Objects.equals(this.decimals, inputCalculatePower.decimals) &&
        Objects.equals(this.input, inputCalculatePower.input) &&
        Objects.equals(this.power, inputCalculatePower.power);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decimals, input, power);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputCalculatePower {\n");
    sb.append("    decimals: ").append(toIndentedString(decimals)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    power: ").append(toIndentedString(power)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("decimals");
    openapiFields.add("input");
    openapiFields.add("power");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("decimals");
    openapiRequiredFields.add("input");
    openapiRequiredFields.add("power");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputCalculatePower
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputCalculatePower.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputCalculatePower is not found in the empty JSON string", InputCalculatePower.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputCalculatePower.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputCalculatePower` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InputCalculatePower.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputCalculatePower.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputCalculatePower' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputCalculatePower> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputCalculatePower.class));

       return (TypeAdapter<T>) new TypeAdapter<InputCalculatePower>() {
           @Override
           public void write(JsonWriter out, InputCalculatePower value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputCalculatePower read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputCalculatePower given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputCalculatePower
   * @throws IOException if the JSON string is invalid with respect to InputCalculatePower
   */
  public static InputCalculatePower fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputCalculatePower.class);
  }

  /**
   * Convert an instance of InputCalculatePower to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

