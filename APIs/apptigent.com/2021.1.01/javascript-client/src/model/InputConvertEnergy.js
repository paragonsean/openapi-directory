/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InputConvertEnergy model module.
 * @module model/InputConvertEnergy
 * @version 2021.1.01
 */
class InputConvertEnergy {
    /**
     * Constructs a new <code>InputConvertEnergy</code>.
     * @alias module:model/InputConvertEnergy
     * @param input {Number} 
     * @param source {module:model/InputConvertEnergy.SourceEnum} 
     * @param target {module:model/InputConvertEnergy.TargetEnum} 
     */
    constructor(input, source, target) { 
        
        InputConvertEnergy.initialize(this, input, source, target);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, input, source, target) { 
        obj['input'] = input;
        obj['source'] = source;
        obj['target'] = target;
    }

    /**
     * Constructs a <code>InputConvertEnergy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputConvertEnergy} obj Optional instance to populate.
     * @return {module:model/InputConvertEnergy} The populated <code>InputConvertEnergy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputConvertEnergy();

            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputConvertEnergy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputConvertEnergy</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputConvertEnergy.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }

        return true;
    }


}

InputConvertEnergy.RequiredProperties = ["input", "source", "target"];

/**
 * @member {Number} input
 */
InputConvertEnergy.prototype['input'] = undefined;

/**
 * @member {module:model/InputConvertEnergy.SourceEnum} source
 */
InputConvertEnergy.prototype['source'] = undefined;

/**
 * @member {module:model/InputConvertEnergy.TargetEnum} target
 */
InputConvertEnergy.prototype['target'] = undefined;





/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
InputConvertEnergy['SourceEnum'] = {

    /**
     * value: "BritishThermalUnit"
     * @const
     */
    "BritishThermalUnit": "BritishThermalUnit",

    /**
     * value: "Calorie"
     * @const
     */
    "Calorie": "Calorie",

    /**
     * value: "ElectronVolt"
     * @const
     */
    "ElectronVolt": "ElectronVolt",

    /**
     * value: "FootPound"
     * @const
     */
    "FootPound": "FootPound",

    /**
     * value: "GigawattHour"
     * @const
     */
    "GigawattHour": "GigawattHour",

    /**
     * value: "Joule"
     * @const
     */
    "Joule": "Joule",

    /**
     * value: "Kilocalorie"
     * @const
     */
    "Kilocalorie": "Kilocalorie",

    /**
     * value: "Kilojoule"
     * @const
     */
    "Kilojoule": "Kilojoule",

    /**
     * value: "KilowattHour"
     * @const
     */
    "KilowattHour": "KilowattHour",

    /**
     * value: "Megajoule"
     * @const
     */
    "Megajoule": "Megajoule",

    /**
     * value: "MegawattHour"
     * @const
     */
    "MegawattHour": "MegawattHour",

    /**
     * value: "TerawattHour"
     * @const
     */
    "TerawattHour": "TerawattHour",

    /**
     * value: "Therm (EU)"
     * @const
     */
    "Therm (EU)": "Therm (EU)",

    /**
     * value: "Therm (UK)"
     * @const
     */
    "Therm (UK)": "Therm (UK)",

    /**
     * value: "Therm (US)"
     * @const
     */
    "Therm (US)": "Therm (US)",

    /**
     * value: "WattHour"
     * @const
     */
    "WattHour": "WattHour"
};


/**
 * Allowed values for the <code>target</code> property.
 * @enum {String}
 * @readonly
 */
InputConvertEnergy['TargetEnum'] = {

    /**
     * value: "BritishThermalUnit"
     * @const
     */
    "BritishThermalUnit": "BritishThermalUnit",

    /**
     * value: "Calorie"
     * @const
     */
    "Calorie": "Calorie",

    /**
     * value: "ElectronVolt"
     * @const
     */
    "ElectronVolt": "ElectronVolt",

    /**
     * value: "FootPound"
     * @const
     */
    "FootPound": "FootPound",

    /**
     * value: "GigawattHour"
     * @const
     */
    "GigawattHour": "GigawattHour",

    /**
     * value: "Joule"
     * @const
     */
    "Joule": "Joule",

    /**
     * value: "Kilocalorie"
     * @const
     */
    "Kilocalorie": "Kilocalorie",

    /**
     * value: "Kilojoule"
     * @const
     */
    "Kilojoule": "Kilojoule",

    /**
     * value: "KilowattHour"
     * @const
     */
    "KilowattHour": "KilowattHour",

    /**
     * value: "Megajoule"
     * @const
     */
    "Megajoule": "Megajoule",

    /**
     * value: "MegawattHour"
     * @const
     */
    "MegawattHour": "MegawattHour",

    /**
     * value: "TerawattHour"
     * @const
     */
    "TerawattHour": "TerawattHour",

    /**
     * value: "Therm (EU)"
     * @const
     */
    "Therm (EU)": "Therm (EU)",

    /**
     * value: "Therm (UK)"
     * @const
     */
    "Therm (UK)": "Therm (UK)",

    /**
     * value: "Therm (US)"
     * @const
     */
    "Therm (US)": "Therm (US)",

    /**
     * value: "WattHour"
     * @const
     */
    "WattHour": "WattHour"
};



export default InputConvertEnergy;

