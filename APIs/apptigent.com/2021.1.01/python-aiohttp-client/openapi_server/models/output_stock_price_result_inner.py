# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutputStockPriceResultInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, close: float=None, _date: str=None, exchange: str=None, high: float=None, low: float=None, open: float=None, symbol: str=None, volume: float=None):
        """OutputStockPriceResultInner - a model defined in OpenAPI

        :param close: The close of this OutputStockPriceResultInner.
        :param _date: The _date of this OutputStockPriceResultInner.
        :param exchange: The exchange of this OutputStockPriceResultInner.
        :param high: The high of this OutputStockPriceResultInner.
        :param low: The low of this OutputStockPriceResultInner.
        :param open: The open of this OutputStockPriceResultInner.
        :param symbol: The symbol of this OutputStockPriceResultInner.
        :param volume: The volume of this OutputStockPriceResultInner.
        """
        self.openapi_types = {
            'close': float,
            '_date': str,
            'exchange': str,
            'high': float,
            'low': float,
            'open': float,
            'symbol': str,
            'volume': float
        }

        self.attribute_map = {
            'close': 'close',
            '_date': 'date',
            'exchange': 'exchange',
            'high': 'high',
            'low': 'low',
            'open': 'open',
            'symbol': 'symbol',
            'volume': 'volume'
        }

        self._close = close
        self.__date = _date
        self._exchange = exchange
        self._high = high
        self._low = low
        self._open = open
        self._symbol = symbol
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputStockPriceResultInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The outputStockPrice_result_inner of this OutputStockPriceResultInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def close(self):
        """Gets the close of this OutputStockPriceResultInner.

        Close

        :return: The close of this OutputStockPriceResultInner.
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this OutputStockPriceResultInner.

        Close

        :param close: The close of this OutputStockPriceResultInner.
        :type close: float
        """

        self._close = close

    @property
    def _date(self):
        """Gets the _date of this OutputStockPriceResultInner.

        Date

        :return: The _date of this OutputStockPriceResultInner.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this OutputStockPriceResultInner.

        Date

        :param _date: The _date of this OutputStockPriceResultInner.
        :type _date: str
        """

        self.__date = _date

    @property
    def exchange(self):
        """Gets the exchange of this OutputStockPriceResultInner.

        Stock exchange

        :return: The exchange of this OutputStockPriceResultInner.
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this OutputStockPriceResultInner.

        Stock exchange

        :param exchange: The exchange of this OutputStockPriceResultInner.
        :type exchange: str
        """

        self._exchange = exchange

    @property
    def high(self):
        """Gets the high of this OutputStockPriceResultInner.

        High

        :return: The high of this OutputStockPriceResultInner.
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this OutputStockPriceResultInner.

        High

        :param high: The high of this OutputStockPriceResultInner.
        :type high: float
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this OutputStockPriceResultInner.

        Low

        :return: The low of this OutputStockPriceResultInner.
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this OutputStockPriceResultInner.

        Low

        :param low: The low of this OutputStockPriceResultInner.
        :type low: float
        """

        self._low = low

    @property
    def open(self):
        """Gets the open of this OutputStockPriceResultInner.

        Open

        :return: The open of this OutputStockPriceResultInner.
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this OutputStockPriceResultInner.

        Open

        :param open: The open of this OutputStockPriceResultInner.
        :type open: float
        """

        self._open = open

    @property
    def symbol(self):
        """Gets the symbol of this OutputStockPriceResultInner.

        Ticker symbol

        :return: The symbol of this OutputStockPriceResultInner.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this OutputStockPriceResultInner.

        Ticker symbol

        :param symbol: The symbol of this OutputStockPriceResultInner.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def volume(self):
        """Gets the volume of this OutputStockPriceResultInner.

        Volume

        :return: The volume of this OutputStockPriceResultInner.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this OutputStockPriceResultInner.

        Volume

        :param volume: The volume of this OutputStockPriceResultInner.
        :type volume: float
        """

        self._volume = volume
