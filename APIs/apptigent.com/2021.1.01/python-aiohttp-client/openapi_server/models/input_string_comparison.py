# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputStringComparison(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compare: str=None, input: str=None, lower: str=None, trim: str=None):
        """InputStringComparison - a model defined in OpenAPI

        :param compare: The compare of this InputStringComparison.
        :param input: The input of this InputStringComparison.
        :param lower: The lower of this InputStringComparison.
        :param trim: The trim of this InputStringComparison.
        """
        self.openapi_types = {
            'compare': str,
            'input': str,
            'lower': str,
            'trim': str
        }

        self.attribute_map = {
            'compare': 'compare',
            'input': 'input',
            'lower': 'lower',
            'trim': 'trim'
        }

        self._compare = compare
        self._input = input
        self._lower = lower
        self._trim = trim

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputStringComparison':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputStringComparison of this InputStringComparison.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compare(self):
        """Gets the compare of this InputStringComparison.

        Comparison string

        :return: The compare of this InputStringComparison.
        :rtype: str
        """
        return self._compare

    @compare.setter
    def compare(self, compare):
        """Sets the compare of this InputStringComparison.

        Comparison string

        :param compare: The compare of this InputStringComparison.
        :type compare: str
        """
        if compare is None:
            raise ValueError("Invalid value for `compare`, must not be `None`")

        self._compare = compare

    @property
    def input(self):
        """Gets the input of this InputStringComparison.

        Original string

        :return: The input of this InputStringComparison.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputStringComparison.

        Original string

        :param input: The input of this InputStringComparison.
        :type input: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def lower(self):
        """Gets the lower of this InputStringComparison.

        Convert strings to lowercase before comparison

        :return: The lower of this InputStringComparison.
        :rtype: str
        """
        return self._lower

    @lower.setter
    def lower(self, lower):
        """Sets the lower of this InputStringComparison.

        Convert strings to lowercase before comparison

        :param lower: The lower of this InputStringComparison.
        :type lower: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if lower not in allowed_values:
            raise ValueError(
                "Invalid value for `lower` ({0}), must be one of {1}"
                .format(lower, allowed_values)
            )

        self._lower = lower

    @property
    def trim(self):
        """Gets the trim of this InputStringComparison.

        Trim strings before comparison

        :return: The trim of this InputStringComparison.
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this InputStringComparison.

        Trim strings before comparison

        :param trim: The trim of this InputStringComparison.
        :type trim: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if trim not in allowed_values:
            raise ValueError(
                "Invalid value for `trim` ({0}), must be one of {1}"
                .format(trim, allowed_values)
            )

        self._trim = trim
