# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputStringContains(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, find: str=None, input: str=None, lower: str=None):
        """InputStringContains - a model defined in OpenAPI

        :param find: The find of this InputStringContains.
        :param input: The input of this InputStringContains.
        :param lower: The lower of this InputStringContains.
        """
        self.openapi_types = {
            'find': str,
            'input': str,
            'lower': str
        }

        self.attribute_map = {
            'find': 'find',
            'input': 'input',
            'lower': 'lower'
        }

        self._find = find
        self._input = input
        self._lower = lower

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputStringContains':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputStringContains of this InputStringContains.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def find(self):
        """Gets the find of this InputStringContains.

        Text to match

        :return: The find of this InputStringContains.
        :rtype: str
        """
        return self._find

    @find.setter
    def find(self, find):
        """Sets the find of this InputStringContains.

        Text to match

        :param find: The find of this InputStringContains.
        :type find: str
        """
        if find is None:
            raise ValueError("Invalid value for `find`, must not be `None`")

        self._find = find

    @property
    def input(self):
        """Gets the input of this InputStringContains.

        Text to search

        :return: The input of this InputStringContains.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputStringContains.

        Text to search

        :param input: The input of this InputStringContains.
        :type input: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def lower(self):
        """Gets the lower of this InputStringContains.

        Convert strings to lowercase

        :return: The lower of this InputStringContains.
        :rtype: str
        """
        return self._lower

    @lower.setter
    def lower(self, lower):
        """Sets the lower of this InputStringContains.

        Convert strings to lowercase

        :param lower: The lower of this InputStringContains.
        :type lower: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if lower not in allowed_values:
            raise ValueError(
                "Invalid value for `lower` ({0}), must be one of {1}"
                .format(lower, allowed_values)
            )

        self._lower = lower
