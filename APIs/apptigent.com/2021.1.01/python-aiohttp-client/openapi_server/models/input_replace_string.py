# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputReplaceString(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, replacement: str=None, source: str=None, value: str=None):
        """InputReplaceString - a model defined in OpenAPI

        :param replacement: The replacement of this InputReplaceString.
        :param source: The source of this InputReplaceString.
        :param value: The value of this InputReplaceString.
        """
        self.openapi_types = {
            'replacement': str,
            'source': str,
            'value': str
        }

        self.attribute_map = {
            'replacement': 'replacement',
            'source': 'source',
            'value': 'value'
        }

        self._replacement = replacement
        self._source = source
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputReplaceString':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputReplaceString of this InputReplaceString.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def replacement(self):
        """Gets the replacement of this InputReplaceString.

        Replacement text

        :return: The replacement of this InputReplaceString.
        :rtype: str
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement):
        """Sets the replacement of this InputReplaceString.

        Replacement text

        :param replacement: The replacement of this InputReplaceString.
        :type replacement: str
        """
        if replacement is None:
            raise ValueError("Invalid value for `replacement`, must not be `None`")

        self._replacement = replacement

    @property
    def source(self):
        """Gets the source of this InputReplaceString.

        String containing the text to be replaced

        :return: The source of this InputReplaceString.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InputReplaceString.

        String containing the text to be replaced

        :param source: The source of this InputReplaceString.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def value(self):
        """Gets the value of this InputReplaceString.

        Text to replace

        :return: The value of this InputReplaceString.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InputReplaceString.

        Text to replace

        :param value: The value of this InputReplaceString.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
