# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputGenerateHash(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, input: str=None):
        """InputGenerateHash - a model defined in OpenAPI

        :param algorithm: The algorithm of this InputGenerateHash.
        :param input: The input of this InputGenerateHash.
        """
        self.openapi_types = {
            'algorithm': str,
            'input': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'input': 'input'
        }

        self._algorithm = algorithm
        self._input = input

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputGenerateHash':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputGenerateHash of this InputGenerateHash.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this InputGenerateHash.

        Hash algorithm

        :return: The algorithm of this InputGenerateHash.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this InputGenerateHash.

        Hash algorithm

        :param algorithm: The algorithm of this InputGenerateHash.
        :type algorithm: str
        """
        allowed_values = ["MD5", "SHA1", "SHA256", "SHA384", "SHA512"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def input(self):
        """Gets the input of this InputGenerateHash.

        Hash source string

        :return: The input of this InputGenerateHash.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputGenerateHash.

        Hash source string

        :param input: The input of this InputGenerateHash.
        :type input: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input
