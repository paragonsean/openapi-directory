# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputDateTimeDifference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_time1: str=None, date_time2: str=None):
        """InputDateTimeDifference - a model defined in OpenAPI

        :param date_time1: The date_time1 of this InputDateTimeDifference.
        :param date_time2: The date_time2 of this InputDateTimeDifference.
        """
        self.openapi_types = {
            'date_time1': str,
            'date_time2': str
        }

        self.attribute_map = {
            'date_time1': 'dateTime1',
            'date_time2': 'dateTime2'
        }

        self._date_time1 = date_time1
        self._date_time2 = date_time2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputDateTimeDifference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputDateTimeDifference of this InputDateTimeDifference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_time1(self):
        """Gets the date_time1 of this InputDateTimeDifference.

        First date/time value

        :return: The date_time1 of this InputDateTimeDifference.
        :rtype: str
        """
        return self._date_time1

    @date_time1.setter
    def date_time1(self, date_time1):
        """Sets the date_time1 of this InputDateTimeDifference.

        First date/time value

        :param date_time1: The date_time1 of this InputDateTimeDifference.
        :type date_time1: str
        """
        if date_time1 is None:
            raise ValueError("Invalid value for `date_time1`, must not be `None`")

        self._date_time1 = date_time1

    @property
    def date_time2(self):
        """Gets the date_time2 of this InputDateTimeDifference.

        Second date/time value

        :return: The date_time2 of this InputDateTimeDifference.
        :rtype: str
        """
        return self._date_time2

    @date_time2.setter
    def date_time2(self, date_time2):
        """Sets the date_time2 of this InputDateTimeDifference.

        Second date/time value

        :param date_time2: The date_time2 of this InputDateTimeDifference.
        :type date_time2: str
        """
        if date_time2 is None:
            raise ValueError("Invalid value for `date_time2`, must not be `None`")

        self._date_time2 = date_time2
