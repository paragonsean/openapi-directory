# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputCollectionModify(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index: str=None, input: List[str]=None, item: str=None, items: List[str]=None):
        """InputCollectionModify - a model defined in OpenAPI

        :param index: The index of this InputCollectionModify.
        :param input: The input of this InputCollectionModify.
        :param item: The item of this InputCollectionModify.
        :param items: The items of this InputCollectionModify.
        """
        self.openapi_types = {
            'index': str,
            'input': List[str],
            'item': str,
            'items': List[str]
        }

        self.attribute_map = {
            'index': 'index',
            'input': 'input',
            'item': 'item',
            'items': 'items'
        }

        self._index = index
        self._input = input
        self._item = item
        self._items = items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputCollectionModify':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputCollectionModify of this InputCollectionModify.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this InputCollectionModify.

        Index position for operation (leave blank to specify end of collection)

        :return: The index of this InputCollectionModify.
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this InputCollectionModify.

        Index position for operation (leave blank to specify end of collection)

        :param index: The index of this InputCollectionModify.
        :type index: str
        """

        self._index = index

    @property
    def input(self):
        """Gets the input of this InputCollectionModify.

        Collection of values or objects to modify

        :return: The input of this InputCollectionModify.
        :rtype: List[str]
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputCollectionModify.

        Collection of values or objects to modify

        :param input: The input of this InputCollectionModify.
        :type input: List[str]
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def item(self):
        """Gets the item of this InputCollectionModify.

        Item (for multiple items, leave blank and use Items)

        :return: The item of this InputCollectionModify.
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this InputCollectionModify.

        Item (for multiple items, leave blank and use Items)

        :param item: The item of this InputCollectionModify.
        :type item: str
        """

        self._item = item

    @property
    def items(self):
        """Gets the items of this InputCollectionModify.

        Items (Collection, for a single item leave blank and use Item)

        :return: The items of this InputCollectionModify.
        :rtype: List[str]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this InputCollectionModify.

        Items (Collection, for a single item leave blank and use Item)

        :param items: The items of this InputCollectionModify.
        :type items: List[str]
        """

        self._items = items
