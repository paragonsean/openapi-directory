# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputTranslateString(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input: str=None, language: str=None):
        """InputTranslateString - a model defined in OpenAPI

        :param input: The input of this InputTranslateString.
        :param language: The language of this InputTranslateString.
        """
        self.openapi_types = {
            'input': str,
            'language': str
        }

        self.attribute_map = {
            'input': 'input',
            'language': 'language'
        }

        self._input = input
        self._language = language

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputTranslateString':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputTranslateString of this InputTranslateString.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self):
        """Gets the input of this InputTranslateString.

        String containing the text to be translated

        :return: The input of this InputTranslateString.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputTranslateString.

        String containing the text to be translated

        :param input: The input of this InputTranslateString.
        :type input: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def language(self):
        """Gets the language of this InputTranslateString.

        Translation language

        :return: The language of this InputTranslateString.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this InputTranslateString.

        Translation language

        :param language: The language of this InputTranslateString.
        :type language: str
        """
        allowed_values = ["Arabic", "Chinese (Simplified)", "Czech", "Danish", "Dutch", "English", "Finnish", "French", "German", "Greek", "Hindi", "Hungarian", "Italian", "Japanese", "Klingon", "Korean", "Norweigan", "Polish", "Portuguese", "Russian", "Spanish", "Swedish", "Turkish", "Vietnamese", "Welsh"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language
