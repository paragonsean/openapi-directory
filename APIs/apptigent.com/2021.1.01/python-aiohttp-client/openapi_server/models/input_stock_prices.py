# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputStockPrices(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: str=None, exchange: str=None, symbols: str=None):
        """InputStockPrices - a model defined in OpenAPI

        :param _date: The _date of this InputStockPrices.
        :param exchange: The exchange of this InputStockPrices.
        :param symbols: The symbols of this InputStockPrices.
        """
        self.openapi_types = {
            '_date': str,
            'exchange': str,
            'symbols': str
        }

        self.attribute_map = {
            '_date': 'date',
            'exchange': 'exchange',
            'symbols': 'symbols'
        }

        self.__date = _date
        self._exchange = exchange
        self._symbols = symbols

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputStockPrices':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputStockPrices of this InputStockPrices.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this InputStockPrices.

        Date (yyyy-MM-dd, leave empty for latest)

        :return: The _date of this InputStockPrices.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InputStockPrices.

        Date (yyyy-MM-dd, leave empty for latest)

        :param _date: The _date of this InputStockPrices.
        :type _date: str
        """

        self.__date = _date

    @property
    def exchange(self):
        """Gets the exchange of this InputStockPrices.

        Stock exchange

        :return: The exchange of this InputStockPrices.
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this InputStockPrices.

        Stock exchange

        :param exchange: The exchange of this InputStockPrices.
        :type exchange: str
        """
        allowed_values = ["XNYS (New York Stock Exchange)", "XNAS (NASDAQ Stock Exchange)", "XBRU (Euronext Brussels)", "XTSE (Toronto Stock Exchange)", "XCNQ (Candadian Securities Exchange)", "XSHG (Shanghai Stock Exchange)", "XCSE (Copenhagen Stock Exchange)", "XPAR (Euronext Paris)", "XFRA (Deutsche Borse)", "XHKG (Hong Kong Stock Exchange)", "XNSE (National Stock Exchange India)", "XTAE (Tel Aviv Stock Exchange)", "XNGO (Nagoya Stock Exchange)", "XFKA (Fukuoka Stock Exchange)", "XSAP (Sapporo Stock Exchange)", "XMEX (Mexican Stock Exchange)", "XNZE (New Zealand Stock Exchange)", "XLIS (Euronext Lisbon)", "MISX (Moscow Stock Exchange)", "XSES (Singapore Stock Exchange)", "XLON (London Stock Exchange)", "XASE (American Stock Exchange)", "XASX (Australia Stock Exchange)", "XDFM (Dubai Financial Market)", "XBKK (Stock Exchange of Thailand)", "XSWX (SIX Swiss Exchange)", "XSTO (Stockholm Stock Exchange)", "BMEX (Bolsas y Mercados Espa√±oles)", "XJSE (Johannesburg Stock Exchange)"]  # noqa: E501
        if exchange not in allowed_values:
            raise ValueError(
                "Invalid value for `exchange` ({0}), must be one of {1}"
                .format(exchange, allowed_values)
            )

        self._exchange = exchange

    @property
    def symbols(self):
        """Gets the symbols of this InputStockPrices.

        Stock ticker symbols (comma-separated, max 20)

        :return: The symbols of this InputStockPrices.
        :rtype: str
        """
        return self._symbols

    @symbols.setter
    def symbols(self, symbols):
        """Sets the symbols of this InputStockPrices.

        Stock ticker symbols (comma-separated, max 20)

        :param symbols: The symbols of this InputStockPrices.
        :type symbols: str
        """
        if symbols is None:
            raise ValueError("Invalid value for `symbols`, must not be `None`")

        self._symbols = symbols
