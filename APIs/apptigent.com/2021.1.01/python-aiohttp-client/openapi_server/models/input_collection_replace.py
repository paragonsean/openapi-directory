# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputCollectionReplace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_case: str='true', input: List[str]=None, match: str=None, replacement: str=None):
        """InputCollectionReplace - a model defined in OpenAPI

        :param ignore_case: The ignore_case of this InputCollectionReplace.
        :param input: The input of this InputCollectionReplace.
        :param match: The match of this InputCollectionReplace.
        :param replacement: The replacement of this InputCollectionReplace.
        """
        self.openapi_types = {
            'ignore_case': str,
            'input': List[str],
            'match': str,
            'replacement': str
        }

        self.attribute_map = {
            'ignore_case': 'ignoreCase',
            'input': 'input',
            'match': 'match',
            'replacement': 'replacement'
        }

        self._ignore_case = ignore_case
        self._input = input
        self._match = match
        self._replacement = replacement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputCollectionReplace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputCollectionReplace of this InputCollectionReplace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_case(self):
        """Gets the ignore_case of this InputCollectionReplace.

        Ignore case

        :return: The ignore_case of this InputCollectionReplace.
        :rtype: str
        """
        return self._ignore_case

    @ignore_case.setter
    def ignore_case(self, ignore_case):
        """Sets the ignore_case of this InputCollectionReplace.

        Ignore case

        :param ignore_case: The ignore_case of this InputCollectionReplace.
        :type ignore_case: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if ignore_case not in allowed_values:
            raise ValueError(
                "Invalid value for `ignore_case` ({0}), must be one of {1}"
                .format(ignore_case, allowed_values)
            )

        self._ignore_case = ignore_case

    @property
    def input(self):
        """Gets the input of this InputCollectionReplace.

        Collection of strings

        :return: The input of this InputCollectionReplace.
        :rtype: List[str]
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputCollectionReplace.

        Collection of strings

        :param input: The input of this InputCollectionReplace.
        :type input: List[str]
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def match(self):
        """Gets the match of this InputCollectionReplace.

        Match value

        :return: The match of this InputCollectionReplace.
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this InputCollectionReplace.

        Match value

        :param match: The match of this InputCollectionReplace.
        :type match: str
        """
        if match is None:
            raise ValueError("Invalid value for `match`, must not be `None`")

        self._match = match

    @property
    def replacement(self):
        """Gets the replacement of this InputCollectionReplace.

        Replacement value

        :return: The replacement of this InputCollectionReplace.
        :rtype: str
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement):
        """Sets the replacement of this InputCollectionReplace.

        Replacement value

        :param replacement: The replacement of this InputCollectionReplace.
        :type replacement: str
        """
        if replacement is None:
            raise ValueError("Invalid value for `replacement`, must not be `None`")

        self._replacement = replacement
