# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputCollectionSort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input: List[str]=None, order: str='Ascending'):
        """InputCollectionSort - a model defined in OpenAPI

        :param input: The input of this InputCollectionSort.
        :param order: The order of this InputCollectionSort.
        """
        self.openapi_types = {
            'input': List[str],
            'order': str
        }

        self.attribute_map = {
            'input': 'input',
            'order': 'order'
        }

        self._input = input
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputCollectionSort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputCollectionSort of this InputCollectionSort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self):
        """Gets the input of this InputCollectionSort.

        Collection of strings to sort

        :return: The input of this InputCollectionSort.
        :rtype: List[str]
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputCollectionSort.

        Collection of strings to sort

        :param input: The input of this InputCollectionSort.
        :type input: List[str]
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def order(self):
        """Gets the order of this InputCollectionSort.

        Sort order

        :return: The order of this InputCollectionSort.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this InputCollectionSort.

        Sort order

        :param order: The order of this InputCollectionSort.
        :type order: str
        """
        allowed_values = ["Ascending", "Descending"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order
