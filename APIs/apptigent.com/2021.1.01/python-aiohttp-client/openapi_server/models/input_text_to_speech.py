# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputTextToSpeech(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text: str=None, type: str='PlainText', voice: str='en-US, Aria (Female)'):
        """InputTextToSpeech - a model defined in OpenAPI

        :param text: The text of this InputTextToSpeech.
        :param type: The type of this InputTextToSpeech.
        :param voice: The voice of this InputTextToSpeech.
        """
        self.openapi_types = {
            'text': str,
            'type': str,
            'voice': str
        }

        self.attribute_map = {
            'text': 'text',
            'type': 'type',
            'voice': 'voice'
        }

        self._text = text
        self._type = type
        self._voice = voice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputTextToSpeech':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputTextToSpeech of this InputTextToSpeech.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this InputTextToSpeech.

        Text to convert (10,000 characters max)

        :return: The text of this InputTextToSpeech.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this InputTextToSpeech.

        Text to convert (10,000 characters max)

        :param text: The text of this InputTextToSpeech.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def type(self):
        """Gets the type of this InputTextToSpeech.

        Text or file type

        :return: The type of this InputTextToSpeech.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InputTextToSpeech.

        Text or file type

        :param type: The type of this InputTextToSpeech.
        :type type: str
        """
        allowed_values = ["PlainText", "SSML"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def voice(self):
        """Gets the voice of this InputTextToSpeech.

        Voice locale (must match language of input text)

        :return: The voice of this InputTextToSpeech.
        :rtype: str
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this InputTextToSpeech.

        Voice locale (must match language of input text)

        :param voice: The voice of this InputTextToSpeech.
        :type voice: str
        """
        allowed_values = ["ar-EG, Hoda (Female)", "ar-SA, Naayf (Male)", "bg-BG, Ivan (Male)", "ca-ES, Herena (Female)", "cs-CZ, Jakub (Male)", "da-DK, Helle (Female)", "de-AT, Michael (Male)", "de-CH, Karsten (Male)", "de-DE, Hedda (Female)", "de-DE, Stefan (Male)", "el-GR, Stefanos (Male)", "en-AU, Catherine (Female)", "en-AU, Hayley (Female)", "en-CA, Heather (Female)", "en-CA, Linda (Female)", "en-GB, George (Male)", "en-GB, Hazel (Female)", "en-GB, Susan (Female)", "en-IE, Sean (Male)", "en-IN, Heera (Female)", "en-IN, Priya (Female)", "en-IN, Ravi (Male)", "en-US, Aria (Female)", "en-US, Benjamin (Male)", "en-US, Guy (Male)", "en-US, Zira (Female)", "es-ES, Helena (Female)", "es-ES, Laura (Female)", "es-ES, Pablo (Male)", "es-MX, Hilda (Female)", "es-MX, Raul (Male)", "fi-FI, Heidi (Female)", "fr-CA, Caroline (Female)", "fr-CA, Harmonie (Female)", "fr-CH, Guillaume (Male)", "fr-FR, Hortense (Female)", "fr-FR, Julie (Female)", "fr-FR, Paul (Male)", "he-IL, Asaf (Male)", "hi-IN, Hemant (Male)", "hi-IN, Kalpana (Female)", "hr-HR, Matej (Male)", "hu-HU, Szabolcs (Male)", "id-ID, Andika (Male)", "it-IT, Cosimo (Male)", "it-IT, Lucia (Female)", "ja-JP, Ayumi (Female)", "ja-JP, Haruka (Female)", "ja-JP, Ichiro (Male)", "ko-KR, Heami (Female)", "ms-MY, Rizwan (Male)", "nb-NO, Hulda (Female)", "nl-NL, Hanna (Female)", "pl-PL, Paulina (Female)", "pt-BR, Daniel (Male)", "pt-BR, Heloisa (Female)", "pt-PT, Helia (Female)", "ro-RO, Andrei (Male)", "ru-RU, Ekaterina (Female)", "ru-RU, Irina (Female)", "ru-RU, Pavel (Male)", "sk-SK, Filip (Male)", "sl-SI, Lado (Male)", "sv-SE, Hedvig (Female)", "ta-IN, Valluvar (Male)", "te-IN, Chitra (Female)", "th-TH, Pattara (Male)", "tr-TR, Seda (Female)", "vi-VN, An (Male)", "zh-CN, Huihui (Female)", "zh-CN, Kangkang (Male)", "zh-CN, Yaoyao (Female)", "zh-HK, Danny (Male)", "zh-HK, Tracy (Female)", "zh-TW, HanHan (Female)", "zh-TW, Yating (Female)", "zh-TW, Zhiwei (Male)"]  # noqa: E501
        if voice not in allowed_values:
            raise ValueError(
                "Invalid value for `voice` ({0}), must be one of {1}"
                .format(voice, allowed_values)
            )

        self._voice = voice
