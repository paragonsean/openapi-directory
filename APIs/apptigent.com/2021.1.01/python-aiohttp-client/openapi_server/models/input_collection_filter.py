# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputCollectionFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input: List[str]=None, keywords: str=None, match: str='Any'):
        """InputCollectionFilter - a model defined in OpenAPI

        :param input: The input of this InputCollectionFilter.
        :param keywords: The keywords of this InputCollectionFilter.
        :param match: The match of this InputCollectionFilter.
        """
        self.openapi_types = {
            'input': List[str],
            'keywords': str,
            'match': str
        }

        self.attribute_map = {
            'input': 'input',
            'keywords': 'keywords',
            'match': 'match'
        }

        self._input = input
        self._keywords = keywords
        self._match = match

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputCollectionFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputCollectionFilter of this InputCollectionFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self):
        """Gets the input of this InputCollectionFilter.

        Collection of strings to filter

        :return: The input of this InputCollectionFilter.
        :rtype: List[str]
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputCollectionFilter.

        Collection of strings to filter

        :param input: The input of this InputCollectionFilter.
        :type input: List[str]
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def keywords(self):
        """Gets the keywords of this InputCollectionFilter.

        Keywords (separate multiple values with commas)

        :return: The keywords of this InputCollectionFilter.
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this InputCollectionFilter.

        Keywords (separate multiple values with commas)

        :param keywords: The keywords of this InputCollectionFilter.
        :type keywords: str
        """
        if keywords is None:
            raise ValueError("Invalid value for `keywords`, must not be `None`")

        self._keywords = keywords

    @property
    def match(self):
        """Gets the match of this InputCollectionFilter.

        Match type

        :return: The match of this InputCollectionFilter.
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this InputCollectionFilter.

        Match type

        :param match: The match of this InputCollectionFilter.
        :type match: str
        """
        allowed_values = ["Any", "All", "None"]  # noqa: E501
        if match not in allowed_values:
            raise ValueError(
                "Invalid value for `match` ({0}), must be one of {1}"
                .format(match, allowed_values)
            )

        self._match = match
