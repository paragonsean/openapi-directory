# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputCaseConversion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alphacase: str=None, input: str=None):
        """InputCaseConversion - a model defined in OpenAPI

        :param alphacase: The alphacase of this InputCaseConversion.
        :param input: The input of this InputCaseConversion.
        """
        self.openapi_types = {
            'alphacase': str,
            'input': str
        }

        self.attribute_map = {
            'alphacase': 'alphacase',
            'input': 'input'
        }

        self._alphacase = alphacase
        self._input = input

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputCaseConversion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputCaseConversion of this InputCaseConversion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alphacase(self):
        """Gets the alphacase of this InputCaseConversion.

        Case of conversion result

        :return: The alphacase of this InputCaseConversion.
        :rtype: str
        """
        return self._alphacase

    @alphacase.setter
    def alphacase(self, alphacase):
        """Sets the alphacase of this InputCaseConversion.

        Case of conversion result

        :param alphacase: The alphacase of this InputCaseConversion.
        :type alphacase: str
        """
        allowed_values = ["Upper", "Lower", "Title"]  # noqa: E501
        if alphacase not in allowed_values:
            raise ValueError(
                "Invalid value for `alphacase` ({0}), must be one of {1}"
                .format(alphacase, allowed_values)
            )

        self._alphacase = alphacase

    @property
    def input(self):
        """Gets the input of this InputCaseConversion.

        String containing the text to convert

        :return: The input of this InputCaseConversion.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputCaseConversion.

        String containing the text to convert

        :param input: The input of this InputCaseConversion.
        :type input: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input
