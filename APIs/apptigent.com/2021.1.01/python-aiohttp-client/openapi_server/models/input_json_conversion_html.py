# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputJsonConversionHTML(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate: str=None, attributes: str=None, header: bool=True, input: str=None, omit: str=None, order: str=None):
        """InputJsonConversionHTML - a model defined in OpenAPI

        :param alternate: The alternate of this InputJsonConversionHTML.
        :param attributes: The attributes of this InputJsonConversionHTML.
        :param header: The header of this InputJsonConversionHTML.
        :param input: The input of this InputJsonConversionHTML.
        :param omit: The omit of this InputJsonConversionHTML.
        :param order: The order of this InputJsonConversionHTML.
        """
        self.openapi_types = {
            'alternate': str,
            'attributes': str,
            'header': bool,
            'input': str,
            'omit': str,
            'order': str
        }

        self.attribute_map = {
            'alternate': 'alternate',
            'attributes': 'attributes',
            'header': 'header',
            'input': 'input',
            'omit': 'omit',
            'order': 'order'
        }

        self._alternate = alternate
        self._attributes = attributes
        self._header = header
        self._input = input
        self._omit = omit
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputJsonConversionHTML':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputJsonConversionHTML of this InputJsonConversionHTML.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate(self):
        """Gets the alternate of this InputJsonConversionHTML.

        Alternate header row markup

        :return: The alternate of this InputJsonConversionHTML.
        :rtype: str
        """
        return self._alternate

    @alternate.setter
    def alternate(self, alternate):
        """Sets the alternate of this InputJsonConversionHTML.

        Alternate header row markup

        :param alternate: The alternate of this InputJsonConversionHTML.
        :type alternate: str
        """

        self._alternate = alternate

    @property
    def attributes(self):
        """Gets the attributes of this InputJsonConversionHTML.

        Optional table attributes (single quoted values)

        :return: The attributes of this InputJsonConversionHTML.
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this InputJsonConversionHTML.

        Optional table attributes (single quoted values)

        :param attributes: The attributes of this InputJsonConversionHTML.
        :type attributes: str
        """

        self._attributes = attributes

    @property
    def header(self):
        """Gets the header of this InputJsonConversionHTML.

        Include header row

        :return: The header of this InputJsonConversionHTML.
        :rtype: bool
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this InputJsonConversionHTML.

        Include header row

        :param header: The header of this InputJsonConversionHTML.
        :type header: bool
        """
        if header is None:
            raise ValueError("Invalid value for `header`, must not be `None`")

        self._header = header

    @property
    def input(self):
        """Gets the input of this InputJsonConversionHTML.

        JSON array object

        :return: The input of this InputJsonConversionHTML.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputJsonConversionHTML.

        JSON array object

        :param input: The input of this InputJsonConversionHTML.
        :type input: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def omit(self):
        """Gets the omit of this InputJsonConversionHTML.

        Columns to omit (comma separated)

        :return: The omit of this InputJsonConversionHTML.
        :rtype: str
        """
        return self._omit

    @omit.setter
    def omit(self, omit):
        """Sets the omit of this InputJsonConversionHTML.

        Columns to omit (comma separated)

        :param omit: The omit of this InputJsonConversionHTML.
        :type omit: str
        """

        self._omit = omit

    @property
    def order(self):
        """Gets the order of this InputJsonConversionHTML.

        Column order (comma separated)

        :return: The order of this InputJsonConversionHTML.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this InputJsonConversionHTML.

        Column order (comma separated)

        :param order: The order of this InputJsonConversionHTML.
        :type order: str
        """

        self._order = order
