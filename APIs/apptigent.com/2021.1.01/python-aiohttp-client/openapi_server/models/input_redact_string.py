# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputRedactString(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, regex: str=None, source: str=None, value: str=None, values: List[str]=None):
        """InputRedactString - a model defined in OpenAPI

        :param regex: The regex of this InputRedactString.
        :param source: The source of this InputRedactString.
        :param value: The value of this InputRedactString.
        :param values: The values of this InputRedactString.
        """
        self.openapi_types = {
            'regex': str,
            'source': str,
            'value': str,
            'values': List[str]
        }

        self.attribute_map = {
            'regex': 'regex',
            'source': 'source',
            'value': 'value',
            'values': 'values'
        }

        self._regex = regex
        self._source = source
        self._value = value
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputRedactString':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputRedactString of this InputRedactString.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def regex(self):
        """Gets the regex of this InputRedactString.

        Regular expression pattern for matching strings

        :return: The regex of this InputRedactString.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this InputRedactString.

        Regular expression pattern for matching strings

        :param regex: The regex of this InputRedactString.
        :type regex: str
        """

        self._regex = regex

    @property
    def source(self):
        """Gets the source of this InputRedactString.

        String containing the complete text

        :return: The source of this InputRedactString.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InputRedactString.

        String containing the complete text

        :param source: The source of this InputRedactString.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def value(self):
        """Gets the value of this InputRedactString.

        Individual string to redact

        :return: The value of this InputRedactString.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InputRedactString.

        Individual string to redact

        :param value: The value of this InputRedactString.
        :type value: str
        """

        self._value = value

    @property
    def values(self):
        """Gets the values of this InputRedactString.

        Collection of strings to redact

        :return: The values of this InputRedactString.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this InputRedactString.

        Collection of strings to redact

        :param values: The values of this InputRedactString.
        :type values: List[str]
        """

        self._values = values
