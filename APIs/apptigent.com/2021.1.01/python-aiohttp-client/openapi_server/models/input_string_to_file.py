# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputStringToFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension: str='TXT', filename: str=None, input: str=None):
        """InputStringToFile - a model defined in OpenAPI

        :param extension: The extension of this InputStringToFile.
        :param filename: The filename of this InputStringToFile.
        :param input: The input of this InputStringToFile.
        """
        self.openapi_types = {
            'extension': str,
            'filename': str,
            'input': str
        }

        self.attribute_map = {
            'extension': 'extension',
            'filename': 'filename',
            'input': 'input'
        }

        self._extension = extension
        self._filename = filename
        self._input = input

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputStringToFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputStringToFile of this InputStringToFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension(self):
        """Gets the extension of this InputStringToFile.

        File extension

        :return: The extension of this InputStringToFile.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this InputStringToFile.

        File extension

        :param extension: The extension of this InputStringToFile.
        :type extension: str
        """
        allowed_values = ["TXT", "CSV", "HTML", "XML", "CSS", "JSON", "JS"]  # noqa: E501
        if extension not in allowed_values:
            raise ValueError(
                "Invalid value for `extension` ({0}), must be one of {1}"
                .format(extension, allowed_values)
            )

        self._extension = extension

    @property
    def filename(self):
        """Gets the filename of this InputStringToFile.

        Name of file (without extension)

        :return: The filename of this InputStringToFile.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this InputStringToFile.

        Name of file (without extension)

        :param filename: The filename of this InputStringToFile.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")

        self._filename = filename

    @property
    def input(self):
        """Gets the input of this InputStringToFile.

        Text string (body of file)

        :return: The input of this InputStringToFile.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputStringToFile.

        Text string (body of file)

        :param input: The input of this InputStringToFile.
        :type input: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input
