# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputCollectionSearch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignorecase: str=None, input: List[str]=None, match: str=None, trim: str=None):
        """InputCollectionSearch - a model defined in OpenAPI

        :param ignorecase: The ignorecase of this InputCollectionSearch.
        :param input: The input of this InputCollectionSearch.
        :param match: The match of this InputCollectionSearch.
        :param trim: The trim of this InputCollectionSearch.
        """
        self.openapi_types = {
            'ignorecase': str,
            'input': List[str],
            'match': str,
            'trim': str
        }

        self.attribute_map = {
            'ignorecase': 'ignorecase',
            'input': 'input',
            'match': 'match',
            'trim': 'trim'
        }

        self._ignorecase = ignorecase
        self._input = input
        self._match = match
        self._trim = trim

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputCollectionSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputCollectionSearch of this InputCollectionSearch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignorecase(self):
        """Gets the ignorecase of this InputCollectionSearch.

        Ignore case when performing comparison

        :return: The ignorecase of this InputCollectionSearch.
        :rtype: str
        """
        return self._ignorecase

    @ignorecase.setter
    def ignorecase(self, ignorecase):
        """Sets the ignorecase of this InputCollectionSearch.

        Ignore case when performing comparison

        :param ignorecase: The ignorecase of this InputCollectionSearch.
        :type ignorecase: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if ignorecase not in allowed_values:
            raise ValueError(
                "Invalid value for `ignorecase` ({0}), must be one of {1}"
                .format(ignorecase, allowed_values)
            )

        self._ignorecase = ignorecase

    @property
    def input(self):
        """Gets the input of this InputCollectionSearch.

        Collection of strings to search

        :return: The input of this InputCollectionSearch.
        :rtype: List[str]
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputCollectionSearch.

        Collection of strings to search

        :param input: The input of this InputCollectionSearch.
        :type input: List[str]
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def match(self):
        """Gets the match of this InputCollectionSearch.

        Text to match

        :return: The match of this InputCollectionSearch.
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this InputCollectionSearch.

        Text to match

        :param match: The match of this InputCollectionSearch.
        :type match: str
        """
        if match is None:
            raise ValueError("Invalid value for `match`, must not be `None`")

        self._match = match

    @property
    def trim(self):
        """Gets the trim of this InputCollectionSearch.

        Trim white space from comparison string

        :return: The trim of this InputCollectionSearch.
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this InputCollectionSearch.

        Trim white space from comparison string

        :param trim: The trim of this InputCollectionSearch.
        :type trim: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if trim not in allowed_values:
            raise ValueError(
                "Invalid value for `trim` ({0}), must be one of {1}"
                .format(trim, allowed_values)
            )

        self._trim = trim
