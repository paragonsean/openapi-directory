# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputCollectionSearchNumeric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input: List[float]=None, match: float=None, type: str='Integer'):
        """InputCollectionSearchNumeric - a model defined in OpenAPI

        :param input: The input of this InputCollectionSearchNumeric.
        :param match: The match of this InputCollectionSearchNumeric.
        :param type: The type of this InputCollectionSearchNumeric.
        """
        self.openapi_types = {
            'input': List[float],
            'match': float,
            'type': str
        }

        self.attribute_map = {
            'input': 'input',
            'match': 'match',
            'type': 'type'
        }

        self._input = input
        self._match = match
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputCollectionSearchNumeric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputCollectionSearchNumeric of this InputCollectionSearchNumeric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self):
        """Gets the input of this InputCollectionSearchNumeric.

        Collection of strings to search

        :return: The input of this InputCollectionSearchNumeric.
        :rtype: List[float]
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputCollectionSearchNumeric.

        Collection of strings to search

        :param input: The input of this InputCollectionSearchNumeric.
        :type input: List[float]
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def match(self):
        """Gets the match of this InputCollectionSearchNumeric.

        Number to match

        :return: The match of this InputCollectionSearchNumeric.
        :rtype: float
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this InputCollectionSearchNumeric.

        Number to match

        :param match: The match of this InputCollectionSearchNumeric.
        :type match: float
        """
        if match is None:
            raise ValueError("Invalid value for `match`, must not be `None`")

        self._match = match

    @property
    def type(self):
        """Gets the type of this InputCollectionSearchNumeric.

        Type of number - integer or decimal

        :return: The type of this InputCollectionSearchNumeric.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InputCollectionSearchNumeric.

        Type of number - integer or decimal

        :param type: The type of this InputCollectionSearchNumeric.
        :type type: str
        """
        allowed_values = ["Integer", "Decimal"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
