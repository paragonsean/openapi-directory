# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputCollectionSplit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index: str=None, input: List[str]=None, match: str=None):
        """InputCollectionSplit - a model defined in OpenAPI

        :param index: The index of this InputCollectionSplit.
        :param input: The input of this InputCollectionSplit.
        :param match: The match of this InputCollectionSplit.
        """
        self.openapi_types = {
            'index': str,
            'input': List[str],
            'match': str
        }

        self.attribute_map = {
            'index': 'index',
            'input': 'input',
            'match': 'match'
        }

        self._index = index
        self._input = input
        self._match = match

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputCollectionSplit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputCollectionSplit of this InputCollectionSplit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this InputCollectionSplit.

        Index location to split (leave empty to use Match value)

        :return: The index of this InputCollectionSplit.
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this InputCollectionSplit.

        Index location to split (leave empty to use Match value)

        :param index: The index of this InputCollectionSplit.
        :type index: str
        """

        self._index = index

    @property
    def input(self):
        """Gets the input of this InputCollectionSplit.

        Collection of items to split

        :return: The input of this InputCollectionSplit.
        :rtype: List[str]
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputCollectionSplit.

        Collection of items to split

        :param input: The input of this InputCollectionSplit.
        :type input: List[str]
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def match(self):
        """Gets the match of this InputCollectionSplit.

        String to match (explicit, case-insensitive, leave empty to use Index)

        :return: The match of this InputCollectionSplit.
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this InputCollectionSplit.

        String to match (explicit, case-insensitive, leave empty to use Index)

        :param match: The match of this InputCollectionSplit.
        :type match: str
        """

        self._match = match
