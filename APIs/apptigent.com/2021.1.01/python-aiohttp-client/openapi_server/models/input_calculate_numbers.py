# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputCalculateNumbers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, decimals: float=None, input: float=None, value: float=None):
        """InputCalculateNumbers - a model defined in OpenAPI

        :param decimals: The decimals of this InputCalculateNumbers.
        :param input: The input of this InputCalculateNumbers.
        :param value: The value of this InputCalculateNumbers.
        """
        self.openapi_types = {
            'decimals': float,
            'input': float,
            'value': float
        }

        self.attribute_map = {
            'decimals': 'decimals',
            'input': 'input',
            'value': 'value'
        }

        self._decimals = decimals
        self._input = input
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputCalculateNumbers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputCalculateNumbers of this InputCalculateNumbers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def decimals(self):
        """Gets the decimals of this InputCalculateNumbers.

        Round to number of decimal places

        :return: The decimals of this InputCalculateNumbers.
        :rtype: float
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this InputCalculateNumbers.

        Round to number of decimal places

        :param decimals: The decimals of this InputCalculateNumbers.
        :type decimals: float
        """
        if decimals is None:
            raise ValueError("Invalid value for `decimals`, must not be `None`")
        if decimals is not None and decimals < 0:
            raise ValueError("Invalid value for `decimals`, must be a value greater than or equal to `0`")

        self._decimals = decimals

    @property
    def input(self):
        """Gets the input of this InputCalculateNumbers.

        Numeric value

        :return: The input of this InputCalculateNumbers.
        :rtype: float
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputCalculateNumbers.

        Numeric value

        :param input: The input of this InputCalculateNumbers.
        :type input: float
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def value(self):
        """Gets the value of this InputCalculateNumbers.

        Addend, subtrahend, factor, divisor or radicand

        :return: The value of this InputCalculateNumbers.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InputCalculateNumbers.

        Addend, subtrahend, factor, divisor or radicand

        :param value: The value of this InputCalculateNumbers.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
