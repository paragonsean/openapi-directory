# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputCurrencyFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input: float=None, target: str=None):
        """InputCurrencyFormat - a model defined in OpenAPI

        :param input: The input of this InputCurrencyFormat.
        :param target: The target of this InputCurrencyFormat.
        """
        self.openapi_types = {
            'input': float,
            'target': str
        }

        self.attribute_map = {
            'input': 'input',
            'target': 'target'
        }

        self._input = input
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputCurrencyFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputCurrencyFormat of this InputCurrencyFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self):
        """Gets the input of this InputCurrencyFormat.

        Amount to format

        :return: The input of this InputCurrencyFormat.
        :rtype: float
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputCurrencyFormat.

        Amount to format

        :param input: The input of this InputCurrencyFormat.
        :type input: float
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def target(self):
        """Gets the target of this InputCurrencyFormat.


        :return: The target of this InputCurrencyFormat.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this InputCurrencyFormat.


        :param target: The target of this InputCurrencyFormat.
        :type target: str
        """
        allowed_values = ["USD", "AUD", "BGN", "BRL", "CAD", "CHF", "CNY", "CZK", "DKK", "EUR", "GBP", "HKD", "HRK", "HUF", "IDR", "ILS", "INR", "ISK", "JPY", "KRW", "MXN", "MYR", "NOK", "NZD", "PHP", "PLN", "RON", "RUB", "SGD", "SEK", "THB", "TRY", "ZAR"]  # noqa: E501
        if target not in allowed_values:
            raise ValueError(
                "Invalid value for `target` ({0}), must be one of {1}"
                .format(target, allowed_values)
            )

        self._target = target
