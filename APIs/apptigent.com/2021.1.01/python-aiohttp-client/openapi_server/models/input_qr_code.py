# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputQRCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input: str=None, payload: str='Plain Text (string)'):
        """InputQRCode - a model defined in OpenAPI

        :param input: The input of this InputQRCode.
        :param payload: The payload of this InputQRCode.
        """
        self.openapi_types = {
            'input': str,
            'payload': str
        }

        self.attribute_map = {
            'input': 'input',
            'payload': 'payload'
        }

        self._input = input
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputQRCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputQRCode of this InputQRCode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self):
        """Gets the input of this InputQRCode.

        Text value(s) (vertical bar delimited by type)

        :return: The input of this InputQRCode.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputQRCode.

        Text value(s) (vertical bar delimited by type)

        :param input: The input of this InputQRCode.
        :type input: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def payload(self):
        """Gets the payload of this InputQRCode.

        Payload type

        :return: The payload of this InputQRCode.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this InputQRCode.

        Payload type

        :param payload: The payload of this InputQRCode.
        :type payload: str
        """
        allowed_values = ["Plain Text (string)", "Bitcoin Payment (address|amount|label|message)", "Bookmark (url|title)", "Calendar Event (subject|description|location|start|end|allDayEvent['true' or 'false']|format ['universal' or 'iCal'])", "Geolocation (latitude|longitude)", "Mail (recipient|subject|message)", "Phone Number (string)", "SMS (number|message)", "URL (string)", "WiFi (ssid|password|authenticationMode ['WEP', 'WPA' or 'WPA2'])"]  # noqa: E501
        if payload not in allowed_values:
            raise ValueError(
                "Invalid value for `payload` ({0}), must be one of {1}"
                .format(payload, allowed_values)
            )

        self._payload = payload
