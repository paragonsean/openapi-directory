/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputTextToSpeech.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputTextToSpeech::OAIInputTextToSpeech(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputTextToSpeech::OAIInputTextToSpeech() {
    this->initializeModel();
}

OAIInputTextToSpeech::~OAIInputTextToSpeech() {}

void OAIInputTextToSpeech::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_voice_isSet = false;
    m_voice_isValid = false;
}

void OAIInputTextToSpeech::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputTextToSpeech::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_voice_isValid = ::OpenAPI::fromJsonValue(m_voice, json[QString("voice")]);
    m_voice_isSet = !json[QString("voice")].isNull() && m_voice_isValid;
}

QString OAIInputTextToSpeech::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputTextToSpeech::asJsonObject() const {
    QJsonObject obj;
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_voice_isSet) {
        obj.insert(QString("voice"), ::OpenAPI::toJsonValue(m_voice));
    }
    return obj;
}

QString OAIInputTextToSpeech::getText() const {
    return m_text;
}
void OAIInputTextToSpeech::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIInputTextToSpeech::is_text_Set() const{
    return m_text_isSet;
}

bool OAIInputTextToSpeech::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIInputTextToSpeech::getType() const {
    return m_type;
}
void OAIInputTextToSpeech::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInputTextToSpeech::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInputTextToSpeech::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIInputTextToSpeech::getVoice() const {
    return m_voice;
}
void OAIInputTextToSpeech::setVoice(const QString &voice) {
    m_voice = voice;
    m_voice_isSet = true;
}

bool OAIInputTextToSpeech::is_voice_Set() const{
    return m_voice_isSet;
}

bool OAIInputTextToSpeech::is_voice_Valid() const{
    return m_voice_isValid;
}

bool OAIInputTextToSpeech::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputTextToSpeech::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && m_type_isValid && m_voice_isValid && true;
}

} // namespace OpenAPI
