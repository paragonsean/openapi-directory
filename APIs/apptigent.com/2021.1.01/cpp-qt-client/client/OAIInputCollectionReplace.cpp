/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCollectionReplace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCollectionReplace::OAIInputCollectionReplace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCollectionReplace::OAIInputCollectionReplace() {
    this->initializeModel();
}

OAIInputCollectionReplace::~OAIInputCollectionReplace() {}

void OAIInputCollectionReplace::initializeModel() {

    m_ignore_case_isSet = false;
    m_ignore_case_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_replacement_isSet = false;
    m_replacement_isValid = false;
}

void OAIInputCollectionReplace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCollectionReplace::fromJsonObject(QJsonObject json) {

    m_ignore_case_isValid = ::OpenAPI::fromJsonValue(m_ignore_case, json[QString("ignoreCase")]);
    m_ignore_case_isSet = !json[QString("ignoreCase")].isNull() && m_ignore_case_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_replacement_isValid = ::OpenAPI::fromJsonValue(m_replacement, json[QString("replacement")]);
    m_replacement_isSet = !json[QString("replacement")].isNull() && m_replacement_isValid;
}

QString OAIInputCollectionReplace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCollectionReplace::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_case_isSet) {
        obj.insert(QString("ignoreCase"), ::OpenAPI::toJsonValue(m_ignore_case));
    }
    if (m_input.size() > 0) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_match_isSet) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_replacement_isSet) {
        obj.insert(QString("replacement"), ::OpenAPI::toJsonValue(m_replacement));
    }
    return obj;
}

QString OAIInputCollectionReplace::getIgnoreCase() const {
    return m_ignore_case;
}
void OAIInputCollectionReplace::setIgnoreCase(const QString &ignore_case) {
    m_ignore_case = ignore_case;
    m_ignore_case_isSet = true;
}

bool OAIInputCollectionReplace::is_ignore_case_Set() const{
    return m_ignore_case_isSet;
}

bool OAIInputCollectionReplace::is_ignore_case_Valid() const{
    return m_ignore_case_isValid;
}

QList<QString> OAIInputCollectionReplace::getInput() const {
    return m_input;
}
void OAIInputCollectionReplace::setInput(const QList<QString> &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCollectionReplace::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCollectionReplace::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputCollectionReplace::getMatch() const {
    return m_match;
}
void OAIInputCollectionReplace::setMatch(const QString &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIInputCollectionReplace::is_match_Set() const{
    return m_match_isSet;
}

bool OAIInputCollectionReplace::is_match_Valid() const{
    return m_match_isValid;
}

QString OAIInputCollectionReplace::getReplacement() const {
    return m_replacement;
}
void OAIInputCollectionReplace::setReplacement(const QString &replacement) {
    m_replacement = replacement;
    m_replacement_isSet = true;
}

bool OAIInputCollectionReplace::is_replacement_Set() const{
    return m_replacement_isSet;
}

bool OAIInputCollectionReplace::is_replacement_Valid() const{
    return m_replacement_isValid;
}

bool OAIInputCollectionReplace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_case_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCollectionReplace::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ignore_case_isValid && m_input_isValid && m_match_isValid && m_replacement_isValid && true;
}

} // namespace OpenAPI
