/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputTrimString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputTrimString::OAIInputTrimString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputTrimString::OAIInputTrimString() {
    this->initializeModel();
}

OAIInputTrimString::~OAIInputTrimString() {}

void OAIInputTrimString::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIInputTrimString::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputTrimString::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIInputTrimString::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputTrimString::asJsonObject() const {
    QJsonObject obj;
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIInputTrimString::getSource() const {
    return m_source;
}
void OAIInputTrimString::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIInputTrimString::is_source_Set() const{
    return m_source_isSet;
}

bool OAIInputTrimString::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIInputTrimString::getType() const {
    return m_type;
}
void OAIInputTrimString::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInputTrimString::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInputTrimString::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIInputTrimString::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputTrimString::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
