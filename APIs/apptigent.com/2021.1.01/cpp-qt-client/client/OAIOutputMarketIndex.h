/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOutputMarketIndex.h
 *
 * 
 */

#ifndef OAIOutputMarketIndex_H
#define OAIOutputMarketIndex_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOutputMarketIndex : public OAIObject {
public:
    OAIOutputMarketIndex();
    OAIOutputMarketIndex(QString json);
    ~OAIOutputMarketIndex() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAdjClose() const;
    void setAdjClose(const double &adj_close);
    bool is_adj_close_Set() const;
    bool is_adj_close_Valid() const;

    double getAdjHigh() const;
    void setAdjHigh(const double &adj_high);
    bool is_adj_high_Set() const;
    bool is_adj_high_Valid() const;

    double getAdjLow() const;
    void setAdjLow(const double &adj_low);
    bool is_adj_low_Set() const;
    bool is_adj_low_Valid() const;

    double getAdjOpen() const;
    void setAdjOpen(const double &adj_open);
    bool is_adj_open_Set() const;
    bool is_adj_open_Valid() const;

    double getAdjVolume() const;
    void setAdjVolume(const double &adj_volume);
    bool is_adj_volume_Set() const;
    bool is_adj_volume_Valid() const;

    double getClose() const;
    void setClose(const double &close);
    bool is_close_Set() const;
    bool is_close_Valid() const;

    QString getDate() const;
    void setDate(const QString &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    QString getExchange() const;
    void setExchange(const QString &exchange);
    bool is_exchange_Set() const;
    bool is_exchange_Valid() const;

    double getHigh() const;
    void setHigh(const double &high);
    bool is_high_Set() const;
    bool is_high_Valid() const;

    double getLow() const;
    void setLow(const double &low);
    bool is_low_Set() const;
    bool is_low_Valid() const;

    double getOpen() const;
    void setOpen(const double &open);
    bool is_open_Set() const;
    bool is_open_Valid() const;

    QString getSymbol() const;
    void setSymbol(const QString &symbol);
    bool is_symbol_Set() const;
    bool is_symbol_Valid() const;

    double getVolume() const;
    void setVolume(const double &volume);
    bool is_volume_Set() const;
    bool is_volume_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_adj_close;
    bool m_adj_close_isSet;
    bool m_adj_close_isValid;

    double m_adj_high;
    bool m_adj_high_isSet;
    bool m_adj_high_isValid;

    double m_adj_low;
    bool m_adj_low_isSet;
    bool m_adj_low_isValid;

    double m_adj_open;
    bool m_adj_open_isSet;
    bool m_adj_open_isValid;

    double m_adj_volume;
    bool m_adj_volume_isSet;
    bool m_adj_volume_isValid;

    double m_close;
    bool m_close_isSet;
    bool m_close_isValid;

    QString m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    QString m_exchange;
    bool m_exchange_isSet;
    bool m_exchange_isValid;

    double m_high;
    bool m_high_isSet;
    bool m_high_isValid;

    double m_low;
    bool m_low_isSet;
    bool m_low_isValid;

    double m_open;
    bool m_open_isSet;
    bool m_open_isValid;

    QString m_symbol;
    bool m_symbol_isSet;
    bool m_symbol_isValid;

    double m_volume;
    bool m_volume_isSet;
    bool m_volume_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOutputMarketIndex)

#endif // OAIOutputMarketIndex_H
