/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCaseConversion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCaseConversion::OAIInputCaseConversion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCaseConversion::OAIInputCaseConversion() {
    this->initializeModel();
}

OAIInputCaseConversion::~OAIInputCaseConversion() {}

void OAIInputCaseConversion::initializeModel() {

    m_alphacase_isSet = false;
    m_alphacase_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;
}

void OAIInputCaseConversion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCaseConversion::fromJsonObject(QJsonObject json) {

    m_alphacase_isValid = ::OpenAPI::fromJsonValue(m_alphacase, json[QString("alphacase")]);
    m_alphacase_isSet = !json[QString("alphacase")].isNull() && m_alphacase_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;
}

QString OAIInputCaseConversion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCaseConversion::asJsonObject() const {
    QJsonObject obj;
    if (m_alphacase_isSet) {
        obj.insert(QString("alphacase"), ::OpenAPI::toJsonValue(m_alphacase));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    return obj;
}

QString OAIInputCaseConversion::getAlphacase() const {
    return m_alphacase;
}
void OAIInputCaseConversion::setAlphacase(const QString &alphacase) {
    m_alphacase = alphacase;
    m_alphacase_isSet = true;
}

bool OAIInputCaseConversion::is_alphacase_Set() const{
    return m_alphacase_isSet;
}

bool OAIInputCaseConversion::is_alphacase_Valid() const{
    return m_alphacase_isValid;
}

QString OAIInputCaseConversion::getInput() const {
    return m_input;
}
void OAIInputCaseConversion::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCaseConversion::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCaseConversion::is_input_Valid() const{
    return m_input_isValid;
}

bool OAIInputCaseConversion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alphacase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCaseConversion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alphacase_isValid && m_input_isValid && true;
}

} // namespace OpenAPI
