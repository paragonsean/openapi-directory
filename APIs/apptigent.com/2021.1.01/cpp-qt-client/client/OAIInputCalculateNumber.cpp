/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCalculateNumber.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCalculateNumber::OAIInputCalculateNumber(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCalculateNumber::OAIInputCalculateNumber() {
    this->initializeModel();
}

OAIInputCalculateNumber::~OAIInputCalculateNumber() {}

void OAIInputCalculateNumber::initializeModel() {

    m_decimals_isSet = false;
    m_decimals_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;
}

void OAIInputCalculateNumber::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCalculateNumber::fromJsonObject(QJsonObject json) {

    m_decimals_isValid = ::OpenAPI::fromJsonValue(m_decimals, json[QString("decimals")]);
    m_decimals_isSet = !json[QString("decimals")].isNull() && m_decimals_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;
}

QString OAIInputCalculateNumber::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCalculateNumber::asJsonObject() const {
    QJsonObject obj;
    if (m_decimals_isSet) {
        obj.insert(QString("decimals"), ::OpenAPI::toJsonValue(m_decimals));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    return obj;
}

double OAIInputCalculateNumber::getDecimals() const {
    return m_decimals;
}
void OAIInputCalculateNumber::setDecimals(const double &decimals) {
    m_decimals = decimals;
    m_decimals_isSet = true;
}

bool OAIInputCalculateNumber::is_decimals_Set() const{
    return m_decimals_isSet;
}

bool OAIInputCalculateNumber::is_decimals_Valid() const{
    return m_decimals_isValid;
}

double OAIInputCalculateNumber::getInput() const {
    return m_input;
}
void OAIInputCalculateNumber::setInput(const double &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCalculateNumber::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCalculateNumber::is_input_Valid() const{
    return m_input_isValid;
}

bool OAIInputCalculateNumber::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decimals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCalculateNumber::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_decimals_isValid && m_input_isValid && true;
}

} // namespace OpenAPI
