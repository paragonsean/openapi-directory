/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputJsonConversionXML.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputJsonConversionXML::OAIInputJsonConversionXML(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputJsonConversionXML::OAIInputJsonConversionXML() {
    this->initializeModel();
}

OAIInputJsonConversionXML::~OAIInputJsonConversionXML() {}

void OAIInputJsonConversionXML::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;
}

void OAIInputJsonConversionXML::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputJsonConversionXML::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;
}

QString OAIInputJsonConversionXML::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputJsonConversionXML::asJsonObject() const {
    QJsonObject obj;
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_root_isSet) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    return obj;
}

QString OAIInputJsonConversionXML::getInput() const {
    return m_input;
}
void OAIInputJsonConversionXML::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputJsonConversionXML::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputJsonConversionXML::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputJsonConversionXML::getRoot() const {
    return m_root;
}
void OAIInputJsonConversionXML::setRoot(const QString &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIInputJsonConversionXML::is_root_Set() const{
    return m_root_isSet;
}

bool OAIInputJsonConversionXML::is_root_Valid() const{
    return m_root_isValid;
}

bool OAIInputJsonConversionXML::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputJsonConversionXML::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_root_isValid && true;
}

} // namespace OpenAPI
