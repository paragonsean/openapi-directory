/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCollectionSearch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCollectionSearch::OAIInputCollectionSearch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCollectionSearch::OAIInputCollectionSearch() {
    this->initializeModel();
}

OAIInputCollectionSearch::~OAIInputCollectionSearch() {}

void OAIInputCollectionSearch::initializeModel() {

    m_ignorecase_isSet = false;
    m_ignorecase_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;
}

void OAIInputCollectionSearch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCollectionSearch::fromJsonObject(QJsonObject json) {

    m_ignorecase_isValid = ::OpenAPI::fromJsonValue(m_ignorecase, json[QString("ignorecase")]);
    m_ignorecase_isSet = !json[QString("ignorecase")].isNull() && m_ignorecase_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;
}

QString OAIInputCollectionSearch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCollectionSearch::asJsonObject() const {
    QJsonObject obj;
    if (m_ignorecase_isSet) {
        obj.insert(QString("ignorecase"), ::OpenAPI::toJsonValue(m_ignorecase));
    }
    if (m_input.size() > 0) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_match_isSet) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_trim_isSet) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    return obj;
}

QString OAIInputCollectionSearch::getIgnorecase() const {
    return m_ignorecase;
}
void OAIInputCollectionSearch::setIgnorecase(const QString &ignorecase) {
    m_ignorecase = ignorecase;
    m_ignorecase_isSet = true;
}

bool OAIInputCollectionSearch::is_ignorecase_Set() const{
    return m_ignorecase_isSet;
}

bool OAIInputCollectionSearch::is_ignorecase_Valid() const{
    return m_ignorecase_isValid;
}

QList<QString> OAIInputCollectionSearch::getInput() const {
    return m_input;
}
void OAIInputCollectionSearch::setInput(const QList<QString> &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCollectionSearch::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCollectionSearch::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputCollectionSearch::getMatch() const {
    return m_match;
}
void OAIInputCollectionSearch::setMatch(const QString &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIInputCollectionSearch::is_match_Set() const{
    return m_match_isSet;
}

bool OAIInputCollectionSearch::is_match_Valid() const{
    return m_match_isValid;
}

QString OAIInputCollectionSearch::getTrim() const {
    return m_trim;
}
void OAIInputCollectionSearch::setTrim(const QString &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAIInputCollectionSearch::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAIInputCollectionSearch::is_trim_Valid() const{
    return m_trim_isValid;
}

bool OAIInputCollectionSearch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignorecase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCollectionSearch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_match_isValid && true;
}

} // namespace OpenAPI
