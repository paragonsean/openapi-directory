/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputMarketIndex.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputMarketIndex::OAIInputMarketIndex(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputMarketIndex::OAIInputMarketIndex() {
    this->initializeModel();
}

OAIInputMarketIndex::~OAIInputMarketIndex() {}

void OAIInputMarketIndex::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAIInputMarketIndex::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputMarketIndex::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAIInputMarketIndex::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputMarketIndex::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

QString OAIInputMarketIndex::getDate() const {
    return m_date;
}
void OAIInputMarketIndex::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIInputMarketIndex::is_date_Set() const{
    return m_date_isSet;
}

bool OAIInputMarketIndex::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIInputMarketIndex::getSymbol() const {
    return m_symbol;
}
void OAIInputMarketIndex::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIInputMarketIndex::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIInputMarketIndex::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAIInputMarketIndex::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputMarketIndex::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_symbol_isValid && true;
}

} // namespace OpenAPI
