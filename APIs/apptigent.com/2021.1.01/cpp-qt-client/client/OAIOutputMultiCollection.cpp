/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputMultiCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputMultiCollection::OAIOutputMultiCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputMultiCollection::OAIOutputMultiCollection() {
    this->initializeModel();
}

OAIOutputMultiCollection::~OAIOutputMultiCollection() {}

void OAIOutputMultiCollection::initializeModel() {

    m_result1_isSet = false;
    m_result1_isValid = false;

    m_result2_isSet = false;
    m_result2_isValid = false;
}

void OAIOutputMultiCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputMultiCollection::fromJsonObject(QJsonObject json) {

    m_result1_isValid = ::OpenAPI::fromJsonValue(m_result1, json[QString("result1")]);
    m_result1_isSet = !json[QString("result1")].isNull() && m_result1_isValid;

    m_result2_isValid = ::OpenAPI::fromJsonValue(m_result2, json[QString("result2")]);
    m_result2_isSet = !json[QString("result2")].isNull() && m_result2_isValid;
}

QString OAIOutputMultiCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputMultiCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_result1.size() > 0) {
        obj.insert(QString("result1"), ::OpenAPI::toJsonValue(m_result1));
    }
    if (m_result2.size() > 0) {
        obj.insert(QString("result2"), ::OpenAPI::toJsonValue(m_result2));
    }
    return obj;
}

QList<QString> OAIOutputMultiCollection::getResult1() const {
    return m_result1;
}
void OAIOutputMultiCollection::setResult1(const QList<QString> &result1) {
    m_result1 = result1;
    m_result1_isSet = true;
}

bool OAIOutputMultiCollection::is_result1_Set() const{
    return m_result1_isSet;
}

bool OAIOutputMultiCollection::is_result1_Valid() const{
    return m_result1_isValid;
}

QList<QString> OAIOutputMultiCollection::getResult2() const {
    return m_result2;
}
void OAIOutputMultiCollection::setResult2(const QList<QString> &result2) {
    m_result2 = result2;
    m_result2_isSet = true;
}

bool OAIOutputMultiCollection::is_result2_Set() const{
    return m_result2_isSet;
}

bool OAIOutputMultiCollection::is_result2_Valid() const{
    return m_result2_isValid;
}

bool OAIOutputMultiCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_result1.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result2.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputMultiCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
