/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputReplaceString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputReplaceString::OAIInputReplaceString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputReplaceString::OAIInputReplaceString() {
    this->initializeModel();
}

OAIInputReplaceString::~OAIInputReplaceString() {}

void OAIInputReplaceString::initializeModel() {

    m_replacement_isSet = false;
    m_replacement_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIInputReplaceString::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputReplaceString::fromJsonObject(QJsonObject json) {

    m_replacement_isValid = ::OpenAPI::fromJsonValue(m_replacement, json[QString("replacement")]);
    m_replacement_isSet = !json[QString("replacement")].isNull() && m_replacement_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIInputReplaceString::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputReplaceString::asJsonObject() const {
    QJsonObject obj;
    if (m_replacement_isSet) {
        obj.insert(QString("replacement"), ::OpenAPI::toJsonValue(m_replacement));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIInputReplaceString::getReplacement() const {
    return m_replacement;
}
void OAIInputReplaceString::setReplacement(const QString &replacement) {
    m_replacement = replacement;
    m_replacement_isSet = true;
}

bool OAIInputReplaceString::is_replacement_Set() const{
    return m_replacement_isSet;
}

bool OAIInputReplaceString::is_replacement_Valid() const{
    return m_replacement_isValid;
}

QString OAIInputReplaceString::getSource() const {
    return m_source;
}
void OAIInputReplaceString::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIInputReplaceString::is_source_Set() const{
    return m_source_isSet;
}

bool OAIInputReplaceString::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIInputReplaceString::getValue() const {
    return m_value;
}
void OAIInputReplaceString::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIInputReplaceString::is_value_Set() const{
    return m_value_isSet;
}

bool OAIInputReplaceString::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIInputReplaceString::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_replacement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputReplaceString::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_replacement_isValid && m_source_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
