/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCalculatePower.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCalculatePower::OAIInputCalculatePower(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCalculatePower::OAIInputCalculatePower() {
    this->initializeModel();
}

OAIInputCalculatePower::~OAIInputCalculatePower() {}

void OAIInputCalculatePower::initializeModel() {

    m_decimals_isSet = false;
    m_decimals_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_power_isSet = false;
    m_power_isValid = false;
}

void OAIInputCalculatePower::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCalculatePower::fromJsonObject(QJsonObject json) {

    m_decimals_isValid = ::OpenAPI::fromJsonValue(m_decimals, json[QString("decimals")]);
    m_decimals_isSet = !json[QString("decimals")].isNull() && m_decimals_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_power_isValid = ::OpenAPI::fromJsonValue(m_power, json[QString("power")]);
    m_power_isSet = !json[QString("power")].isNull() && m_power_isValid;
}

QString OAIInputCalculatePower::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCalculatePower::asJsonObject() const {
    QJsonObject obj;
    if (m_decimals_isSet) {
        obj.insert(QString("decimals"), ::OpenAPI::toJsonValue(m_decimals));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_power_isSet) {
        obj.insert(QString("power"), ::OpenAPI::toJsonValue(m_power));
    }
    return obj;
}

double OAIInputCalculatePower::getDecimals() const {
    return m_decimals;
}
void OAIInputCalculatePower::setDecimals(const double &decimals) {
    m_decimals = decimals;
    m_decimals_isSet = true;
}

bool OAIInputCalculatePower::is_decimals_Set() const{
    return m_decimals_isSet;
}

bool OAIInputCalculatePower::is_decimals_Valid() const{
    return m_decimals_isValid;
}

double OAIInputCalculatePower::getInput() const {
    return m_input;
}
void OAIInputCalculatePower::setInput(const double &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCalculatePower::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCalculatePower::is_input_Valid() const{
    return m_input_isValid;
}

double OAIInputCalculatePower::getPower() const {
    return m_power;
}
void OAIInputCalculatePower::setPower(const double &power) {
    m_power = power;
    m_power_isSet = true;
}

bool OAIInputCalculatePower::is_power_Set() const{
    return m_power_isSet;
}

bool OAIInputCalculatePower::is_power_Valid() const{
    return m_power_isValid;
}

bool OAIInputCalculatePower::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decimals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCalculatePower::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_decimals_isValid && m_input_isValid && m_power_isValid && true;
}

} // namespace OpenAPI
