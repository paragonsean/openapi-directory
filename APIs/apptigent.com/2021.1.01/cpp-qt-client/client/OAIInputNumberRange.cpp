/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputNumberRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputNumberRange::OAIInputNumberRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputNumberRange::OAIInputNumberRange() {
    this->initializeModel();
}

OAIInputNumberRange::~OAIInputNumberRange() {}

void OAIInputNumberRange::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIInputNumberRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputNumberRange::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIInputNumberRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputNumberRange::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

double OAIInputNumberRange::getEnd() const {
    return m_end;
}
void OAIInputNumberRange::setEnd(const double &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIInputNumberRange::is_end_Set() const{
    return m_end_isSet;
}

bool OAIInputNumberRange::is_end_Valid() const{
    return m_end_isValid;
}

double OAIInputNumberRange::getStart() const {
    return m_start;
}
void OAIInputNumberRange::setStart(const double &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIInputNumberRange::is_start_Set() const{
    return m_start_isSet;
}

bool OAIInputNumberRange::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIInputNumberRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputNumberRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_isValid && m_start_isValid && true;
}

} // namespace OpenAPI
