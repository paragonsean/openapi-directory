/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCurrencyFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCurrencyFormat::OAIInputCurrencyFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCurrencyFormat::OAIInputCurrencyFormat() {
    this->initializeModel();
}

OAIInputCurrencyFormat::~OAIInputCurrencyFormat() {}

void OAIInputCurrencyFormat::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIInputCurrencyFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCurrencyFormat::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIInputCurrencyFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCurrencyFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

double OAIInputCurrencyFormat::getInput() const {
    return m_input;
}
void OAIInputCurrencyFormat::setInput(const double &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCurrencyFormat::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCurrencyFormat::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputCurrencyFormat::getTarget() const {
    return m_target;
}
void OAIInputCurrencyFormat::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIInputCurrencyFormat::is_target_Set() const{
    return m_target_isSet;
}

bool OAIInputCurrencyFormat::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIInputCurrencyFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCurrencyFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_target_isValid && true;
}

} // namespace OpenAPI
