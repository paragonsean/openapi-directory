/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputMarketIndex.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputMarketIndex::OAIOutputMarketIndex(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputMarketIndex::OAIOutputMarketIndex() {
    this->initializeModel();
}

OAIOutputMarketIndex::~OAIOutputMarketIndex() {}

void OAIOutputMarketIndex::initializeModel() {

    m_adj_close_isSet = false;
    m_adj_close_isValid = false;

    m_adj_high_isSet = false;
    m_adj_high_isValid = false;

    m_adj_low_isSet = false;
    m_adj_low_isValid = false;

    m_adj_open_isSet = false;
    m_adj_open_isValid = false;

    m_adj_volume_isSet = false;
    m_adj_volume_isValid = false;

    m_close_isSet = false;
    m_close_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_exchange_isSet = false;
    m_exchange_isValid = false;

    m_high_isSet = false;
    m_high_isValid = false;

    m_low_isSet = false;
    m_low_isValid = false;

    m_open_isSet = false;
    m_open_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAIOutputMarketIndex::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputMarketIndex::fromJsonObject(QJsonObject json) {

    m_adj_close_isValid = ::OpenAPI::fromJsonValue(m_adj_close, json[QString("adj_close")]);
    m_adj_close_isSet = !json[QString("adj_close")].isNull() && m_adj_close_isValid;

    m_adj_high_isValid = ::OpenAPI::fromJsonValue(m_adj_high, json[QString("adj_high")]);
    m_adj_high_isSet = !json[QString("adj_high")].isNull() && m_adj_high_isValid;

    m_adj_low_isValid = ::OpenAPI::fromJsonValue(m_adj_low, json[QString("adj_low")]);
    m_adj_low_isSet = !json[QString("adj_low")].isNull() && m_adj_low_isValid;

    m_adj_open_isValid = ::OpenAPI::fromJsonValue(m_adj_open, json[QString("adj_open")]);
    m_adj_open_isSet = !json[QString("adj_open")].isNull() && m_adj_open_isValid;

    m_adj_volume_isValid = ::OpenAPI::fromJsonValue(m_adj_volume, json[QString("adj_volume")]);
    m_adj_volume_isSet = !json[QString("adj_volume")].isNull() && m_adj_volume_isValid;

    m_close_isValid = ::OpenAPI::fromJsonValue(m_close, json[QString("close")]);
    m_close_isSet = !json[QString("close")].isNull() && m_close_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_exchange_isValid = ::OpenAPI::fromJsonValue(m_exchange, json[QString("exchange")]);
    m_exchange_isSet = !json[QString("exchange")].isNull() && m_exchange_isValid;

    m_high_isValid = ::OpenAPI::fromJsonValue(m_high, json[QString("high")]);
    m_high_isSet = !json[QString("high")].isNull() && m_high_isValid;

    m_low_isValid = ::OpenAPI::fromJsonValue(m_low, json[QString("low")]);
    m_low_isSet = !json[QString("low")].isNull() && m_low_isValid;

    m_open_isValid = ::OpenAPI::fromJsonValue(m_open, json[QString("open")]);
    m_open_isSet = !json[QString("open")].isNull() && m_open_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;
}

QString OAIOutputMarketIndex::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputMarketIndex::asJsonObject() const {
    QJsonObject obj;
    if (m_adj_close_isSet) {
        obj.insert(QString("adj_close"), ::OpenAPI::toJsonValue(m_adj_close));
    }
    if (m_adj_high_isSet) {
        obj.insert(QString("adj_high"), ::OpenAPI::toJsonValue(m_adj_high));
    }
    if (m_adj_low_isSet) {
        obj.insert(QString("adj_low"), ::OpenAPI::toJsonValue(m_adj_low));
    }
    if (m_adj_open_isSet) {
        obj.insert(QString("adj_open"), ::OpenAPI::toJsonValue(m_adj_open));
    }
    if (m_adj_volume_isSet) {
        obj.insert(QString("adj_volume"), ::OpenAPI::toJsonValue(m_adj_volume));
    }
    if (m_close_isSet) {
        obj.insert(QString("close"), ::OpenAPI::toJsonValue(m_close));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_exchange_isSet) {
        obj.insert(QString("exchange"), ::OpenAPI::toJsonValue(m_exchange));
    }
    if (m_high_isSet) {
        obj.insert(QString("high"), ::OpenAPI::toJsonValue(m_high));
    }
    if (m_low_isSet) {
        obj.insert(QString("low"), ::OpenAPI::toJsonValue(m_low));
    }
    if (m_open_isSet) {
        obj.insert(QString("open"), ::OpenAPI::toJsonValue(m_open));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

double OAIOutputMarketIndex::getAdjClose() const {
    return m_adj_close;
}
void OAIOutputMarketIndex::setAdjClose(const double &adj_close) {
    m_adj_close = adj_close;
    m_adj_close_isSet = true;
}

bool OAIOutputMarketIndex::is_adj_close_Set() const{
    return m_adj_close_isSet;
}

bool OAIOutputMarketIndex::is_adj_close_Valid() const{
    return m_adj_close_isValid;
}

double OAIOutputMarketIndex::getAdjHigh() const {
    return m_adj_high;
}
void OAIOutputMarketIndex::setAdjHigh(const double &adj_high) {
    m_adj_high = adj_high;
    m_adj_high_isSet = true;
}

bool OAIOutputMarketIndex::is_adj_high_Set() const{
    return m_adj_high_isSet;
}

bool OAIOutputMarketIndex::is_adj_high_Valid() const{
    return m_adj_high_isValid;
}

double OAIOutputMarketIndex::getAdjLow() const {
    return m_adj_low;
}
void OAIOutputMarketIndex::setAdjLow(const double &adj_low) {
    m_adj_low = adj_low;
    m_adj_low_isSet = true;
}

bool OAIOutputMarketIndex::is_adj_low_Set() const{
    return m_adj_low_isSet;
}

bool OAIOutputMarketIndex::is_adj_low_Valid() const{
    return m_adj_low_isValid;
}

double OAIOutputMarketIndex::getAdjOpen() const {
    return m_adj_open;
}
void OAIOutputMarketIndex::setAdjOpen(const double &adj_open) {
    m_adj_open = adj_open;
    m_adj_open_isSet = true;
}

bool OAIOutputMarketIndex::is_adj_open_Set() const{
    return m_adj_open_isSet;
}

bool OAIOutputMarketIndex::is_adj_open_Valid() const{
    return m_adj_open_isValid;
}

double OAIOutputMarketIndex::getAdjVolume() const {
    return m_adj_volume;
}
void OAIOutputMarketIndex::setAdjVolume(const double &adj_volume) {
    m_adj_volume = adj_volume;
    m_adj_volume_isSet = true;
}

bool OAIOutputMarketIndex::is_adj_volume_Set() const{
    return m_adj_volume_isSet;
}

bool OAIOutputMarketIndex::is_adj_volume_Valid() const{
    return m_adj_volume_isValid;
}

double OAIOutputMarketIndex::getClose() const {
    return m_close;
}
void OAIOutputMarketIndex::setClose(const double &close) {
    m_close = close;
    m_close_isSet = true;
}

bool OAIOutputMarketIndex::is_close_Set() const{
    return m_close_isSet;
}

bool OAIOutputMarketIndex::is_close_Valid() const{
    return m_close_isValid;
}

QString OAIOutputMarketIndex::getDate() const {
    return m_date;
}
void OAIOutputMarketIndex::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIOutputMarketIndex::is_date_Set() const{
    return m_date_isSet;
}

bool OAIOutputMarketIndex::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIOutputMarketIndex::getExchange() const {
    return m_exchange;
}
void OAIOutputMarketIndex::setExchange(const QString &exchange) {
    m_exchange = exchange;
    m_exchange_isSet = true;
}

bool OAIOutputMarketIndex::is_exchange_Set() const{
    return m_exchange_isSet;
}

bool OAIOutputMarketIndex::is_exchange_Valid() const{
    return m_exchange_isValid;
}

double OAIOutputMarketIndex::getHigh() const {
    return m_high;
}
void OAIOutputMarketIndex::setHigh(const double &high) {
    m_high = high;
    m_high_isSet = true;
}

bool OAIOutputMarketIndex::is_high_Set() const{
    return m_high_isSet;
}

bool OAIOutputMarketIndex::is_high_Valid() const{
    return m_high_isValid;
}

double OAIOutputMarketIndex::getLow() const {
    return m_low;
}
void OAIOutputMarketIndex::setLow(const double &low) {
    m_low = low;
    m_low_isSet = true;
}

bool OAIOutputMarketIndex::is_low_Set() const{
    return m_low_isSet;
}

bool OAIOutputMarketIndex::is_low_Valid() const{
    return m_low_isValid;
}

double OAIOutputMarketIndex::getOpen() const {
    return m_open;
}
void OAIOutputMarketIndex::setOpen(const double &open) {
    m_open = open;
    m_open_isSet = true;
}

bool OAIOutputMarketIndex::is_open_Set() const{
    return m_open_isSet;
}

bool OAIOutputMarketIndex::is_open_Valid() const{
    return m_open_isValid;
}

QString OAIOutputMarketIndex::getSymbol() const {
    return m_symbol;
}
void OAIOutputMarketIndex::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIOutputMarketIndex::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIOutputMarketIndex::is_symbol_Valid() const{
    return m_symbol_isValid;
}

double OAIOutputMarketIndex::getVolume() const {
    return m_volume;
}
void OAIOutputMarketIndex::setVolume(const double &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIOutputMarketIndex::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIOutputMarketIndex::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAIOutputMarketIndex::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adj_close_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adj_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adj_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adj_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adj_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputMarketIndex::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
