/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCollectionFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCollectionFilter::OAIInputCollectionFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCollectionFilter::OAIInputCollectionFilter() {
    this->initializeModel();
}

OAIInputCollectionFilter::~OAIInputCollectionFilter() {}

void OAIInputCollectionFilter::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;
}

void OAIInputCollectionFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCollectionFilter::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;
}

QString OAIInputCollectionFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCollectionFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_input.size() > 0) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_keywords_isSet) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_match_isSet) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    return obj;
}

QList<QString> OAIInputCollectionFilter::getInput() const {
    return m_input;
}
void OAIInputCollectionFilter::setInput(const QList<QString> &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCollectionFilter::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCollectionFilter::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputCollectionFilter::getKeywords() const {
    return m_keywords;
}
void OAIInputCollectionFilter::setKeywords(const QString &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIInputCollectionFilter::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIInputCollectionFilter::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAIInputCollectionFilter::getMatch() const {
    return m_match;
}
void OAIInputCollectionFilter::setMatch(const QString &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIInputCollectionFilter::is_match_Set() const{
    return m_match_isSet;
}

bool OAIInputCollectionFilter::is_match_Valid() const{
    return m_match_isValid;
}

bool OAIInputCollectionFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCollectionFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_keywords_isValid && m_match_isValid && true;
}

} // namespace OpenAPI
