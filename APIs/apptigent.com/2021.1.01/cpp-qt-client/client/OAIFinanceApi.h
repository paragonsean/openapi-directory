/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFinanceApi_H
#define OAI_OAIFinanceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInputCurrencyConversion.h"
#include "OAIInputCurrencyFormat.h"
#include "OAIInputMarketIndex.h"
#include "OAIInputStockPrices.h"
#include "OAIOutputMarketIndex.h"
#include "OAIOutputNumber.h"
#include "OAIOutputStockPrice.h"
#include "OAIOutputString.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFinanceApi : public QObject {
    Q_OBJECT

public:
    OAIFinanceApi(const int timeOut = 0);
    ~OAIFinanceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  currency_conversion OAIInputCurrencyConversion [optional]
    */
    virtual void convertCurrency(const ::OpenAPI::OptionalParam<OAIInputCurrencyConversion> &currency_conversion = ::OpenAPI::OptionalParam<OAIInputCurrencyConversion>());

    /**
    * @param[in]  currency_format OAIInputCurrencyFormat [optional]
    */
    virtual void formatCurrency(const ::OpenAPI::OptionalParam<OAIInputCurrencyFormat> &currency_format = ::OpenAPI::OptionalParam<OAIInputCurrencyFormat>());

    /**
    * @param[in]  market_index OAIInputMarketIndex [optional]
    */
    virtual void marketIndex(const ::OpenAPI::OptionalParam<OAIInputMarketIndex> &market_index = ::OpenAPI::OptionalParam<OAIInputMarketIndex>());

    /**
    * @param[in]  stock_prices OAIInputStockPrices [optional]
    */
    virtual void stockPrices(const ::OpenAPI::OptionalParam<OAIInputStockPrices> &stock_prices = ::OpenAPI::OptionalParam<OAIInputStockPrices>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void convertCurrencyCallback(OAIHttpRequestWorker *worker);
    void formatCurrencyCallback(OAIHttpRequestWorker *worker);
    void marketIndexCallback(OAIHttpRequestWorker *worker);
    void stockPricesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void convertCurrencySignal(OAIOutputNumber summary);
    void formatCurrencySignal(OAIOutputString summary);
    void marketIndexSignal(OAIOutputMarketIndex summary);
    void stockPricesSignal(OAIOutputStockPrice summary);


    void convertCurrencySignalFull(OAIHttpRequestWorker *worker, OAIOutputNumber summary);
    void formatCurrencySignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void marketIndexSignalFull(OAIHttpRequestWorker *worker, OAIOutputMarketIndex summary);
    void stockPricesSignalFull(OAIHttpRequestWorker *worker, OAIOutputStockPrice summary);

    Q_DECL_DEPRECATED_X("Use convertCurrencySignalError() instead")
    void convertCurrencySignalE(OAIOutputNumber summary, QNetworkReply::NetworkError error_type, QString error_str);
    void convertCurrencySignalError(OAIOutputNumber summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formatCurrencySignalError() instead")
    void formatCurrencySignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void formatCurrencySignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketIndexSignalError() instead")
    void marketIndexSignalE(OAIOutputMarketIndex summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketIndexSignalError(OAIOutputMarketIndex summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stockPricesSignalError() instead")
    void stockPricesSignalE(OAIOutputStockPrice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stockPricesSignalError(OAIOutputStockPrice summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use convertCurrencySignalErrorFull() instead")
    void convertCurrencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void convertCurrencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formatCurrencySignalErrorFull() instead")
    void formatCurrencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void formatCurrencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketIndexSignalErrorFull() instead")
    void marketIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stockPricesSignalErrorFull() instead")
    void stockPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stockPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
