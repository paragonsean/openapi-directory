/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCollectionConversion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCollectionConversion::OAIInputCollectionConversion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCollectionConversion::OAIInputCollectionConversion() {
    this->initializeModel();
}

OAIInputCollectionConversion::~OAIInputCollectionConversion() {}

void OAIInputCollectionConversion::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIInputCollectionConversion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCollectionConversion::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIInputCollectionConversion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCollectionConversion::asJsonObject() const {
    QJsonObject obj;
    if (m_input.size() > 0) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAIInputCollectionConversion::getInput() const {
    return m_input;
}
void OAIInputCollectionConversion::setInput(const QList<QString> &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCollectionConversion::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCollectionConversion::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputCollectionConversion::getName() const {
    return m_name;
}
void OAIInputCollectionConversion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInputCollectionConversion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInputCollectionConversion::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIInputCollectionConversion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCollectionConversion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
