/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICollectionsApi_H
#define OAI_OAICollectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInputCollectionConversion.h"
#include "OAIInputCollectionConversionXML.h"
#include "OAIInputCollectionCount.h"
#include "OAIInputCollectionFilter.h"
#include "OAIInputCollectionModify.h"
#include "OAIInputCollectionReplace.h"
#include "OAIInputCollectionSearch.h"
#include "OAIInputCollectionSearchNumeric.h"
#include "OAIInputCollectionSort.h"
#include "OAIInputCollectionSplit.h"
#include "OAIOutputCollectionNumber.h"
#include "OAIOutputCollectionResult.h"
#include "OAIOutputCollectionString.h"
#include "OAIOutputMultiCollection.h"
#include "OAIOutputNumber.h"
#include "OAIOutputString.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICollectionsApi : public QObject {
    Q_OBJECT

public:
    OAICollectionsApi(const int timeOut = 0);
    ~OAICollectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  collection_modify OAIInputCollectionModify [optional]
    */
    virtual void addToCollection(const ::OpenAPI::OptionalParam<OAIInputCollectionModify> &collection_modify = ::OpenAPI::OptionalParam<OAIInputCollectionModify>());

    /**
    * @param[in]  collection_search OAIInputCollectionSearchNumeric [optional]
    */
    virtual void collectionContainsNumber(const ::OpenAPI::OptionalParam<OAIInputCollectionSearchNumeric> &collection_search = ::OpenAPI::OptionalParam<OAIInputCollectionSearchNumeric>());

    /**
    * @param[in]  collection_search OAIInputCollectionSearch [optional]
    */
    virtual void collectionContainsString(const ::OpenAPI::OptionalParam<OAIInputCollectionSearch> &collection_search = ::OpenAPI::OptionalParam<OAIInputCollectionSearch>());

    /**
    * @param[in]  collection_search OAIInputCollectionSearch [optional]
    */
    virtual void collectionEndsWithString(const ::OpenAPI::OptionalParam<OAIInputCollectionSearch> &collection_search = ::OpenAPI::OptionalParam<OAIInputCollectionSearch>());

    /**
    * @param[in]  collection_search OAIInputCollectionSearch [optional]
    */
    virtual void collectionStartsWithString(const ::OpenAPI::OptionalParam<OAIInputCollectionSearch> &collection_search = ::OpenAPI::OptionalParam<OAIInputCollectionSearch>());

    /**
    * @param[in]  collection_conversion OAIInputCollectionConversion [optional]
    */
    virtual void collectionToJSON(const ::OpenAPI::OptionalParam<OAIInputCollectionConversion> &collection_conversion = ::OpenAPI::OptionalParam<OAIInputCollectionConversion>());

    /**
    * @param[in]  collection_conversion_xml OAIInputCollectionConversionXML [optional]
    */
    virtual void collectionToXml(const ::OpenAPI::OptionalParam<OAIInputCollectionConversionXML> &collection_conversion_xml = ::OpenAPI::OptionalParam<OAIInputCollectionConversionXML>());

    /**
    * @param[in]  collection_count OAIInputCollectionCount [optional]
    */
    virtual void countCollection(const ::OpenAPI::OptionalParam<OAIInputCollectionCount> &collection_count = ::OpenAPI::OptionalParam<OAIInputCollectionCount>());

    /**
    * @param[in]  collection_filter OAIInputCollectionFilter [optional]
    */
    virtual void filterCollection(const ::OpenAPI::OptionalParam<OAIInputCollectionFilter> &collection_filter = ::OpenAPI::OptionalParam<OAIInputCollectionFilter>());

    /**
    * @param[in]  collection_modify OAIInputCollectionModify [optional]
    */
    virtual void removeFromCollection(const ::OpenAPI::OptionalParam<OAIInputCollectionModify> &collection_modify = ::OpenAPI::OptionalParam<OAIInputCollectionModify>());

    /**
    * @param[in]  collection_replace OAIInputCollectionReplace [optional]
    */
    virtual void replaceValuesInCollection(const ::OpenAPI::OptionalParam<OAIInputCollectionReplace> &collection_replace = ::OpenAPI::OptionalParam<OAIInputCollectionReplace>());

    /**
    * @param[in]  collection_sort OAIInputCollectionSort [optional]
    */
    virtual void sortCollection(const ::OpenAPI::OptionalParam<OAIInputCollectionSort> &collection_sort = ::OpenAPI::OptionalParam<OAIInputCollectionSort>());

    /**
    * @param[in]  collection_split OAIInputCollectionSplit [optional]
    */
    virtual void splitCollection(const ::OpenAPI::OptionalParam<OAIInputCollectionSplit> &collection_split = ::OpenAPI::OptionalParam<OAIInputCollectionSplit>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addToCollectionCallback(OAIHttpRequestWorker *worker);
    void collectionContainsNumberCallback(OAIHttpRequestWorker *worker);
    void collectionContainsStringCallback(OAIHttpRequestWorker *worker);
    void collectionEndsWithStringCallback(OAIHttpRequestWorker *worker);
    void collectionStartsWithStringCallback(OAIHttpRequestWorker *worker);
    void collectionToJSONCallback(OAIHttpRequestWorker *worker);
    void collectionToXmlCallback(OAIHttpRequestWorker *worker);
    void countCollectionCallback(OAIHttpRequestWorker *worker);
    void filterCollectionCallback(OAIHttpRequestWorker *worker);
    void removeFromCollectionCallback(OAIHttpRequestWorker *worker);
    void replaceValuesInCollectionCallback(OAIHttpRequestWorker *worker);
    void sortCollectionCallback(OAIHttpRequestWorker *worker);
    void splitCollectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addToCollectionSignal(OAIOutputCollectionResult summary);
    void collectionContainsNumberSignal(OAIOutputCollectionNumber summary);
    void collectionContainsStringSignal(OAIOutputCollectionString summary);
    void collectionEndsWithStringSignal(OAIOutputCollectionString summary);
    void collectionStartsWithStringSignal(OAIOutputCollectionString summary);
    void collectionToJSONSignal(OAIOutputString summary);
    void collectionToXmlSignal(OAIOutputString summary);
    void countCollectionSignal(OAIOutputNumber summary);
    void filterCollectionSignal(OAIOutputCollectionResult summary);
    void removeFromCollectionSignal(OAIOutputCollectionResult summary);
    void replaceValuesInCollectionSignal(OAIOutputCollectionResult summary);
    void sortCollectionSignal(OAIOutputCollectionResult summary);
    void splitCollectionSignal(OAIOutputMultiCollection summary);


    void addToCollectionSignalFull(OAIHttpRequestWorker *worker, OAIOutputCollectionResult summary);
    void collectionContainsNumberSignalFull(OAIHttpRequestWorker *worker, OAIOutputCollectionNumber summary);
    void collectionContainsStringSignalFull(OAIHttpRequestWorker *worker, OAIOutputCollectionString summary);
    void collectionEndsWithStringSignalFull(OAIHttpRequestWorker *worker, OAIOutputCollectionString summary);
    void collectionStartsWithStringSignalFull(OAIHttpRequestWorker *worker, OAIOutputCollectionString summary);
    void collectionToJSONSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void collectionToXmlSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void countCollectionSignalFull(OAIHttpRequestWorker *worker, OAIOutputNumber summary);
    void filterCollectionSignalFull(OAIHttpRequestWorker *worker, OAIOutputCollectionResult summary);
    void removeFromCollectionSignalFull(OAIHttpRequestWorker *worker, OAIOutputCollectionResult summary);
    void replaceValuesInCollectionSignalFull(OAIHttpRequestWorker *worker, OAIOutputCollectionResult summary);
    void sortCollectionSignalFull(OAIHttpRequestWorker *worker, OAIOutputCollectionResult summary);
    void splitCollectionSignalFull(OAIHttpRequestWorker *worker, OAIOutputMultiCollection summary);

    Q_DECL_DEPRECATED_X("Use addToCollectionSignalError() instead")
    void addToCollectionSignalE(OAIOutputCollectionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addToCollectionSignalError(OAIOutputCollectionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionContainsNumberSignalError() instead")
    void collectionContainsNumberSignalE(OAIOutputCollectionNumber summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionContainsNumberSignalError(OAIOutputCollectionNumber summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionContainsStringSignalError() instead")
    void collectionContainsStringSignalE(OAIOutputCollectionString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionContainsStringSignalError(OAIOutputCollectionString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionEndsWithStringSignalError() instead")
    void collectionEndsWithStringSignalE(OAIOutputCollectionString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionEndsWithStringSignalError(OAIOutputCollectionString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionStartsWithStringSignalError() instead")
    void collectionStartsWithStringSignalE(OAIOutputCollectionString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionStartsWithStringSignalError(OAIOutputCollectionString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionToJSONSignalError() instead")
    void collectionToJSONSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionToJSONSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionToXmlSignalError() instead")
    void collectionToXmlSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionToXmlSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countCollectionSignalError() instead")
    void countCollectionSignalE(OAIOutputNumber summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countCollectionSignalError(OAIOutputNumber summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filterCollectionSignalError() instead")
    void filterCollectionSignalE(OAIOutputCollectionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filterCollectionSignalError(OAIOutputCollectionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFromCollectionSignalError() instead")
    void removeFromCollectionSignalE(OAIOutputCollectionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFromCollectionSignalError(OAIOutputCollectionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceValuesInCollectionSignalError() instead")
    void replaceValuesInCollectionSignalE(OAIOutputCollectionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceValuesInCollectionSignalError(OAIOutputCollectionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sortCollectionSignalError() instead")
    void sortCollectionSignalE(OAIOutputCollectionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sortCollectionSignalError(OAIOutputCollectionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use splitCollectionSignalError() instead")
    void splitCollectionSignalE(OAIOutputMultiCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void splitCollectionSignalError(OAIOutputMultiCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addToCollectionSignalErrorFull() instead")
    void addToCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addToCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionContainsNumberSignalErrorFull() instead")
    void collectionContainsNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionContainsNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionContainsStringSignalErrorFull() instead")
    void collectionContainsStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionContainsStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionEndsWithStringSignalErrorFull() instead")
    void collectionEndsWithStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionEndsWithStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionStartsWithStringSignalErrorFull() instead")
    void collectionStartsWithStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionStartsWithStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionToJSONSignalErrorFull() instead")
    void collectionToJSONSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionToJSONSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionToXmlSignalErrorFull() instead")
    void collectionToXmlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionToXmlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countCollectionSignalErrorFull() instead")
    void countCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filterCollectionSignalErrorFull() instead")
    void filterCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filterCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFromCollectionSignalErrorFull() instead")
    void removeFromCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFromCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceValuesInCollectionSignalErrorFull() instead")
    void replaceValuesInCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceValuesInCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sortCollectionSignalErrorFull() instead")
    void sortCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sortCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use splitCollectionSignalErrorFull() instead")
    void splitCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void splitCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
