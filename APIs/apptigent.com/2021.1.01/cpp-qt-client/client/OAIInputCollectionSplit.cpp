/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCollectionSplit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCollectionSplit::OAIInputCollectionSplit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCollectionSplit::OAIInputCollectionSplit() {
    this->initializeModel();
}

OAIInputCollectionSplit::~OAIInputCollectionSplit() {}

void OAIInputCollectionSplit::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;
}

void OAIInputCollectionSplit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCollectionSplit::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;
}

QString OAIInputCollectionSplit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCollectionSplit::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_input.size() > 0) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_match_isSet) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    return obj;
}

QString OAIInputCollectionSplit::getIndex() const {
    return m_index;
}
void OAIInputCollectionSplit::setIndex(const QString &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIInputCollectionSplit::is_index_Set() const{
    return m_index_isSet;
}

bool OAIInputCollectionSplit::is_index_Valid() const{
    return m_index_isValid;
}

QList<QString> OAIInputCollectionSplit::getInput() const {
    return m_input;
}
void OAIInputCollectionSplit::setInput(const QList<QString> &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCollectionSplit::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCollectionSplit::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputCollectionSplit::getMatch() const {
    return m_match;
}
void OAIInputCollectionSplit::setMatch(const QString &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIInputCollectionSplit::is_match_Set() const{
    return m_match_isSet;
}

bool OAIInputCollectionSplit::is_match_Valid() const{
    return m_match_isValid;
}

bool OAIInputCollectionSplit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCollectionSplit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && true;
}

} // namespace OpenAPI
