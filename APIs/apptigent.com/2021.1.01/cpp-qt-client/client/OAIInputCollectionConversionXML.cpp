/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCollectionConversionXML.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCollectionConversionXML::OAIInputCollectionConversionXML(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCollectionConversionXML::OAIInputCollectionConversionXML() {
    this->initializeModel();
}

OAIInputCollectionConversionXML::~OAIInputCollectionConversionXML() {}

void OAIInputCollectionConversionXML::initializeModel() {

    m_child_isSet = false;
    m_child_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;
}

void OAIInputCollectionConversionXML::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCollectionConversionXML::fromJsonObject(QJsonObject json) {

    m_child_isValid = ::OpenAPI::fromJsonValue(m_child, json[QString("child")]);
    m_child_isSet = !json[QString("child")].isNull() && m_child_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;
}

QString OAIInputCollectionConversionXML::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCollectionConversionXML::asJsonObject() const {
    QJsonObject obj;
    if (m_child_isSet) {
        obj.insert(QString("child"), ::OpenAPI::toJsonValue(m_child));
    }
    if (m_input.size() > 0) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_root_isSet) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    return obj;
}

QString OAIInputCollectionConversionXML::getChild() const {
    return m_child;
}
void OAIInputCollectionConversionXML::setChild(const QString &child) {
    m_child = child;
    m_child_isSet = true;
}

bool OAIInputCollectionConversionXML::is_child_Set() const{
    return m_child_isSet;
}

bool OAIInputCollectionConversionXML::is_child_Valid() const{
    return m_child_isValid;
}

QList<QString> OAIInputCollectionConversionXML::getInput() const {
    return m_input;
}
void OAIInputCollectionConversionXML::setInput(const QList<QString> &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCollectionConversionXML::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCollectionConversionXML::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputCollectionConversionXML::getRoot() const {
    return m_root;
}
void OAIInputCollectionConversionXML::setRoot(const QString &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIInputCollectionConversionXML::is_root_Set() const{
    return m_root_isSet;
}

bool OAIInputCollectionConversionXML::is_root_Valid() const{
    return m_root_isValid;
}

bool OAIInputCollectionConversionXML::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCollectionConversionXML::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_child_isValid && m_input_isValid && m_root_isValid && true;
}

} // namespace OpenAPI
