/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputRedactString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputRedactString::OAIInputRedactString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputRedactString::OAIInputRedactString() {
    this->initializeModel();
}

OAIInputRedactString::~OAIInputRedactString() {}

void OAIInputRedactString::initializeModel() {

    m_regex_isSet = false;
    m_regex_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIInputRedactString::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputRedactString::fromJsonObject(QJsonObject json) {

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIInputRedactString::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputRedactString::asJsonObject() const {
    QJsonObject obj;
    if (m_regex_isSet) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIInputRedactString::getRegex() const {
    return m_regex;
}
void OAIInputRedactString::setRegex(const QString &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIInputRedactString::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIInputRedactString::is_regex_Valid() const{
    return m_regex_isValid;
}

QString OAIInputRedactString::getSource() const {
    return m_source;
}
void OAIInputRedactString::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIInputRedactString::is_source_Set() const{
    return m_source_isSet;
}

bool OAIInputRedactString::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIInputRedactString::getValue() const {
    return m_value;
}
void OAIInputRedactString::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIInputRedactString::is_value_Set() const{
    return m_value_isSet;
}

bool OAIInputRedactString::is_value_Valid() const{
    return m_value_isValid;
}

QList<QString> OAIInputRedactString::getValues() const {
    return m_values;
}
void OAIInputRedactString::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIInputRedactString::is_values_Set() const{
    return m_values_isSet;
}

bool OAIInputRedactString::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIInputRedactString::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputRedactString::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && true;
}

} // namespace OpenAPI
