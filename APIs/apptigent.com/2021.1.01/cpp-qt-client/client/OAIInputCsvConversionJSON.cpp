/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCsvConversionJSON.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCsvConversionJSON::OAIInputCsvConversionJSON(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCsvConversionJSON::OAIInputCsvConversionJSON() {
    this->initializeModel();
}

OAIInputCsvConversionJSON::~OAIInputCsvConversionJSON() {}

void OAIInputCsvConversionJSON::initializeModel() {

    m_header_isSet = false;
    m_header_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;
}

void OAIInputCsvConversionJSON::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCsvConversionJSON::fromJsonObject(QJsonObject json) {

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;
}

QString OAIInputCsvConversionJSON::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCsvConversionJSON::asJsonObject() const {
    QJsonObject obj;
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    return obj;
}

bool OAIInputCsvConversionJSON::isHeader() const {
    return m_header;
}
void OAIInputCsvConversionJSON::setHeader(const bool &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIInputCsvConversionJSON::is_header_Set() const{
    return m_header_isSet;
}

bool OAIInputCsvConversionJSON::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIInputCsvConversionJSON::getInput() const {
    return m_input;
}
void OAIInputCsvConversionJSON::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCsvConversionJSON::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCsvConversionJSON::is_input_Valid() const{
    return m_input_isValid;
}

bool OAIInputCsvConversionJSON::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCsvConversionJSON::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_header_isValid && m_input_isValid && true;
}

} // namespace OpenAPI
