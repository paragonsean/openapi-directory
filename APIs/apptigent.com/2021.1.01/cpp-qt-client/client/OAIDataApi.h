/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataApi_H
#define OAI_OAIDataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInputCsvConversionJSON.h"
#include "OAIInputDataQuery.h"
#include "OAIInputJsonConversionCSV.h"
#include "OAIInputJsonConversionHTML.h"
#include "OAIInputJsonConversionXML.h"
#include "OAIInputXmlConversionJSON.h"
#include "OAIOutputString.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataApi : public QObject {
    Q_OBJECT

public:
    OAIDataApi(const int timeOut = 0);
    ~OAIDataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  csv_conversion_json OAIInputCsvConversionJSON [optional]
    */
    virtual void csvToJson(const ::OpenAPI::OptionalParam<OAIInputCsvConversionJSON> &csv_conversion_json = ::OpenAPI::OptionalParam<OAIInputCsvConversionJSON>());

    /**
    * @param[in]  json_conversion_csv OAIInputJsonConversionCSV [optional]
    */
    virtual void jsonToCsv(const ::OpenAPI::OptionalParam<OAIInputJsonConversionCSV> &json_conversion_csv = ::OpenAPI::OptionalParam<OAIInputJsonConversionCSV>());

    /**
    * @param[in]  json_conversion_html OAIInputJsonConversionHTML [optional]
    */
    virtual void jsonToHtml(const ::OpenAPI::OptionalParam<OAIInputJsonConversionHTML> &json_conversion_html = ::OpenAPI::OptionalParam<OAIInputJsonConversionHTML>());

    /**
    * @param[in]  json_conversion_xml OAIInputJsonConversionXML [optional]
    */
    virtual void jsonToXml(const ::OpenAPI::OptionalParam<OAIInputJsonConversionXML> &json_conversion_xml = ::OpenAPI::OptionalParam<OAIInputJsonConversionXML>());

    /**
    * @param[in]  input_data_query OAIInputDataQuery [optional]
    */
    virtual void queryJson(const ::OpenAPI::OptionalParam<OAIInputDataQuery> &input_data_query = ::OpenAPI::OptionalParam<OAIInputDataQuery>());

    /**
    * @param[in]  input_data_query OAIInputDataQuery [optional]
    */
    virtual void queryXml(const ::OpenAPI::OptionalParam<OAIInputDataQuery> &input_data_query = ::OpenAPI::OptionalParam<OAIInputDataQuery>());

    /**
    * @param[in]  xml_conversion_json OAIInputXmlConversionJSON [optional]
    */
    virtual void xmlToJson(const ::OpenAPI::OptionalParam<OAIInputXmlConversionJSON> &xml_conversion_json = ::OpenAPI::OptionalParam<OAIInputXmlConversionJSON>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void csvToJsonCallback(OAIHttpRequestWorker *worker);
    void jsonToCsvCallback(OAIHttpRequestWorker *worker);
    void jsonToHtmlCallback(OAIHttpRequestWorker *worker);
    void jsonToXmlCallback(OAIHttpRequestWorker *worker);
    void queryJsonCallback(OAIHttpRequestWorker *worker);
    void queryXmlCallback(OAIHttpRequestWorker *worker);
    void xmlToJsonCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void csvToJsonSignal(OAIOutputString summary);
    void jsonToCsvSignal(OAIOutputString summary);
    void jsonToHtmlSignal(OAIOutputString summary);
    void jsonToXmlSignal(OAIOutputString summary);
    void queryJsonSignal(OAIOutputString summary);
    void queryXmlSignal(OAIOutputString summary);
    void xmlToJsonSignal(OAIOutputString summary);


    void csvToJsonSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void jsonToCsvSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void jsonToHtmlSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void jsonToXmlSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void queryJsonSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void queryXmlSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void xmlToJsonSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);

    Q_DECL_DEPRECATED_X("Use csvToJsonSignalError() instead")
    void csvToJsonSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void csvToJsonSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jsonToCsvSignalError() instead")
    void jsonToCsvSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jsonToCsvSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jsonToHtmlSignalError() instead")
    void jsonToHtmlSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jsonToHtmlSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jsonToXmlSignalError() instead")
    void jsonToXmlSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jsonToXmlSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryJsonSignalError() instead")
    void queryJsonSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryJsonSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryXmlSignalError() instead")
    void queryXmlSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryXmlSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xmlToJsonSignalError() instead")
    void xmlToJsonSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void xmlToJsonSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use csvToJsonSignalErrorFull() instead")
    void csvToJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void csvToJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jsonToCsvSignalErrorFull() instead")
    void jsonToCsvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jsonToCsvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jsonToHtmlSignalErrorFull() instead")
    void jsonToHtmlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jsonToHtmlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jsonToXmlSignalErrorFull() instead")
    void jsonToXmlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jsonToXmlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryJsonSignalErrorFull() instead")
    void queryJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryXmlSignalErrorFull() instead")
    void queryXmlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryXmlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xmlToJsonSignalErrorFull() instead")
    void xmlToJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void xmlToJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
