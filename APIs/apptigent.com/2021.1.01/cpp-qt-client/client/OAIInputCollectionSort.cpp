/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCollectionSort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCollectionSort::OAIInputCollectionSort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCollectionSort::OAIInputCollectionSort() {
    this->initializeModel();
}

OAIInputCollectionSort::~OAIInputCollectionSort() {}

void OAIInputCollectionSort::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;
}

void OAIInputCollectionSort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCollectionSort::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;
}

QString OAIInputCollectionSort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCollectionSort::asJsonObject() const {
    QJsonObject obj;
    if (m_input.size() > 0) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    return obj;
}

QList<QString> OAIInputCollectionSort::getInput() const {
    return m_input;
}
void OAIInputCollectionSort::setInput(const QList<QString> &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCollectionSort::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCollectionSort::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputCollectionSort::getOrder() const {
    return m_order;
}
void OAIInputCollectionSort::setOrder(const QString &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIInputCollectionSort::is_order_Set() const{
    return m_order_isSet;
}

bool OAIInputCollectionSort::is_order_Valid() const{
    return m_order_isValid;
}

bool OAIInputCollectionSort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCollectionSort::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_order_isValid && true;
}

} // namespace OpenAPI
