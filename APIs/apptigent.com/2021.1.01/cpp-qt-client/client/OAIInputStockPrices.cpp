/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputStockPrices.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputStockPrices::OAIInputStockPrices(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputStockPrices::OAIInputStockPrices() {
    this->initializeModel();
}

OAIInputStockPrices::~OAIInputStockPrices() {}

void OAIInputStockPrices::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_exchange_isSet = false;
    m_exchange_isValid = false;

    m_symbols_isSet = false;
    m_symbols_isValid = false;
}

void OAIInputStockPrices::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputStockPrices::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_exchange_isValid = ::OpenAPI::fromJsonValue(m_exchange, json[QString("exchange")]);
    m_exchange_isSet = !json[QString("exchange")].isNull() && m_exchange_isValid;

    m_symbols_isValid = ::OpenAPI::fromJsonValue(m_symbols, json[QString("symbols")]);
    m_symbols_isSet = !json[QString("symbols")].isNull() && m_symbols_isValid;
}

QString OAIInputStockPrices::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputStockPrices::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_exchange_isSet) {
        obj.insert(QString("exchange"), ::OpenAPI::toJsonValue(m_exchange));
    }
    if (m_symbols_isSet) {
        obj.insert(QString("symbols"), ::OpenAPI::toJsonValue(m_symbols));
    }
    return obj;
}

QString OAIInputStockPrices::getDate() const {
    return m_date;
}
void OAIInputStockPrices::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIInputStockPrices::is_date_Set() const{
    return m_date_isSet;
}

bool OAIInputStockPrices::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIInputStockPrices::getExchange() const {
    return m_exchange;
}
void OAIInputStockPrices::setExchange(const QString &exchange) {
    m_exchange = exchange;
    m_exchange_isSet = true;
}

bool OAIInputStockPrices::is_exchange_Set() const{
    return m_exchange_isSet;
}

bool OAIInputStockPrices::is_exchange_Valid() const{
    return m_exchange_isValid;
}

QString OAIInputStockPrices::getSymbols() const {
    return m_symbols;
}
void OAIInputStockPrices::setSymbols(const QString &symbols) {
    m_symbols = symbols;
    m_symbols_isSet = true;
}

bool OAIInputStockPrices::is_symbols_Set() const{
    return m_symbols_isSet;
}

bool OAIInputStockPrices::is_symbols_Valid() const{
    return m_symbols_isValid;
}

bool OAIInputStockPrices::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbols_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputStockPrices::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_symbols_isValid && true;
}

} // namespace OpenAPI
