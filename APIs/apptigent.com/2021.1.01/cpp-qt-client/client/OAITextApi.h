/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITextApi_H
#define OAI_OAITextApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDecodeString_request.h"
#include "OAIHttpFileElement.h"
#include "OAIInputCaseConversion.h"
#include "OAIInputGenerateHash.h"
#include "OAIInputGenerateUniqueID.h"
#include "OAIInputJoinStrings.h"
#include "OAIInputRedactString.h"
#include "OAIInputReplaceString.h"
#include "OAIInputSplitString.h"
#include "OAIInputString.h"
#include "OAIInputStringComparison.h"
#include "OAIInputStringContains.h"
#include "OAIInputStringToFile.h"
#include "OAIInputTextToSpeech.h"
#include "OAIInputTranslateString.h"
#include "OAIInputTrimString.h"
#include "OAIInputVerifyHash.h"
#include "OAIOutputBoolean.h"
#include "OAIOutputString.h"
#include "OAIOutputStringArray.h"
#include "OAIShortenLink_request.h"
#include "OAIUrlDecode_request.h"
#include "OAIValidateEmail_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITextApi : public QObject {
    Q_OBJECT

public:
    OAITextApi(const int timeOut = 0);
    ~OAITextApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  string_comparison OAIInputStringComparison [optional]
    */
    virtual void compareStrings(const ::OpenAPI::OptionalParam<OAIInputStringComparison> &string_comparison = ::OpenAPI::OptionalParam<OAIInputStringComparison>());

    /**
    * @param[in]  string_contains OAIInputStringContains [optional]
    */
    virtual void containsString(const ::OpenAPI::OptionalParam<OAIInputStringContains> &string_contains = ::OpenAPI::OptionalParam<OAIInputStringContains>());

    /**
    * @param[in]  case_conversion OAIInputCaseConversion [optional]
    */
    virtual void convertCase(const ::OpenAPI::OptionalParam<OAIInputCaseConversion> &case_conversion = ::OpenAPI::OptionalParam<OAIInputCaseConversion>());

    /**
    * @param[in]  string_input OAIDecodeString_request [optional]
    */
    virtual void decodeString(const ::OpenAPI::OptionalParam<OAIDecodeString_request> &string_input = ::OpenAPI::OptionalParam<OAIDecodeString_request>());

    /**
    * @param[in]  string_input OAIInputString [optional]
    */
    virtual void encodeString(const ::OpenAPI::OptionalParam<OAIInputString> &string_input = ::OpenAPI::OptionalParam<OAIInputString>());

    /**
    * @param[in]  generate_unique_id OAIInputGenerateUniqueID [optional]
    */
    virtual void generateGuid(const ::OpenAPI::OptionalParam<OAIInputGenerateUniqueID> &generate_unique_id = ::OpenAPI::OptionalParam<OAIInputGenerateUniqueID>());

    /**
    * @param[in]  generate_hash OAIInputGenerateHash [optional]
    */
    virtual void generateHash(const ::OpenAPI::OptionalParam<OAIInputGenerateHash> &generate_hash = ::OpenAPI::OptionalParam<OAIInputGenerateHash>());

    /**
    * @param[in]  join_strings OAIInputJoinStrings [optional]
    */
    virtual void joinStrings(const ::OpenAPI::OptionalParam<OAIInputJoinStrings> &join_strings = ::OpenAPI::OptionalParam<OAIInputJoinStrings>());

    /**
    * @param[in]  redact_string OAIInputRedactString [optional]
    */
    virtual void redactString(const ::OpenAPI::OptionalParam<OAIInputRedactString> &redact_string = ::OpenAPI::OptionalParam<OAIInputRedactString>());

    /**
    * @param[in]  replace_string OAIInputReplaceString [optional]
    */
    virtual void replaceString(const ::OpenAPI::OptionalParam<OAIInputReplaceString> &replace_string = ::OpenAPI::OptionalParam<OAIInputReplaceString>());

    /**
    * @param[in]  string_input OAIShortenLink_request [optional]
    */
    virtual void shortenLink(const ::OpenAPI::OptionalParam<OAIShortenLink_request> &string_input = ::OpenAPI::OptionalParam<OAIShortenLink_request>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  language QString [required]
    */
    virtual void speechToText(const OAIHttpFileElement &file, const QString &language);

    /**
    * @param[in]  split_string OAIInputSplitString [optional]
    */
    virtual void splitString(const ::OpenAPI::OptionalParam<OAIInputSplitString> &split_string = ::OpenAPI::OptionalParam<OAIInputSplitString>());

    /**
    * @param[in]  input_string_to_file OAIInputStringToFile [optional]
    */
    virtual void stringToFile(const ::OpenAPI::OptionalParam<OAIInputStringToFile> &input_string_to_file = ::OpenAPI::OptionalParam<OAIInputStringToFile>());

    /**
    * @param[in]  text_to_speech OAIInputTextToSpeech [optional]
    */
    virtual void textToSpeech(const ::OpenAPI::OptionalParam<OAIInputTextToSpeech> &text_to_speech = ::OpenAPI::OptionalParam<OAIInputTextToSpeech>());

    /**
    * @param[in]  translate_string OAIInputTranslateString [optional]
    */
    virtual void translateString(const ::OpenAPI::OptionalParam<OAIInputTranslateString> &translate_string = ::OpenAPI::OptionalParam<OAIInputTranslateString>());

    /**
    * @param[in]  trim_string OAIInputTrimString [optional]
    */
    virtual void trimString(const ::OpenAPI::OptionalParam<OAIInputTrimString> &trim_string = ::OpenAPI::OptionalParam<OAIInputTrimString>());

    /**
    * @param[in]  string_input OAIUrlDecode_request [optional]
    */
    virtual void urlDecode(const ::OpenAPI::OptionalParam<OAIUrlDecode_request> &string_input = ::OpenAPI::OptionalParam<OAIUrlDecode_request>());

    /**
    * @param[in]  string_input OAIInputString [optional]
    */
    virtual void urlEncode(const ::OpenAPI::OptionalParam<OAIInputString> &string_input = ::OpenAPI::OptionalParam<OAIInputString>());

    /**
    * @param[in]  string_input OAIValidateEmail_request [optional]
    */
    virtual void validateEmail(const ::OpenAPI::OptionalParam<OAIValidateEmail_request> &string_input = ::OpenAPI::OptionalParam<OAIValidateEmail_request>());

    /**
    * @param[in]  verify_hash OAIInputVerifyHash [optional]
    */
    virtual void verifyHash(const ::OpenAPI::OptionalParam<OAIInputVerifyHash> &verify_hash = ::OpenAPI::OptionalParam<OAIInputVerifyHash>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void compareStringsCallback(OAIHttpRequestWorker *worker);
    void containsStringCallback(OAIHttpRequestWorker *worker);
    void convertCaseCallback(OAIHttpRequestWorker *worker);
    void decodeStringCallback(OAIHttpRequestWorker *worker);
    void encodeStringCallback(OAIHttpRequestWorker *worker);
    void generateGuidCallback(OAIHttpRequestWorker *worker);
    void generateHashCallback(OAIHttpRequestWorker *worker);
    void joinStringsCallback(OAIHttpRequestWorker *worker);
    void redactStringCallback(OAIHttpRequestWorker *worker);
    void replaceStringCallback(OAIHttpRequestWorker *worker);
    void shortenLinkCallback(OAIHttpRequestWorker *worker);
    void speechToTextCallback(OAIHttpRequestWorker *worker);
    void splitStringCallback(OAIHttpRequestWorker *worker);
    void stringToFileCallback(OAIHttpRequestWorker *worker);
    void textToSpeechCallback(OAIHttpRequestWorker *worker);
    void translateStringCallback(OAIHttpRequestWorker *worker);
    void trimStringCallback(OAIHttpRequestWorker *worker);
    void urlDecodeCallback(OAIHttpRequestWorker *worker);
    void urlEncodeCallback(OAIHttpRequestWorker *worker);
    void validateEmailCallback(OAIHttpRequestWorker *worker);
    void verifyHashCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void compareStringsSignal(OAIOutputString summary);
    void containsStringSignal(OAIOutputString summary);
    void convertCaseSignal(OAIOutputString summary);
    void decodeStringSignal(OAIOutputString summary);
    void encodeStringSignal(OAIOutputString summary);
    void generateGuidSignal(OAIOutputString summary);
    void generateHashSignal(OAIOutputString summary);
    void joinStringsSignal(OAIOutputString summary);
    void redactStringSignal(OAIOutputString summary);
    void replaceStringSignal(OAIOutputString summary);
    void shortenLinkSignal(OAIOutputString summary);
    void speechToTextSignal(OAIOutputString summary);
    void splitStringSignal(OAIOutputStringArray summary);
    void stringToFileSignal(OAIHttpFileElement summary);
    void textToSpeechSignal(OAIHttpFileElement summary);
    void translateStringSignal(OAIOutputString summary);
    void trimStringSignal(OAIOutputString summary);
    void urlDecodeSignal(OAIOutputString summary);
    void urlEncodeSignal(OAIOutputString summary);
    void validateEmailSignal(OAIOutputString summary);
    void verifyHashSignal(OAIOutputBoolean summary);


    void compareStringsSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void containsStringSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void convertCaseSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void decodeStringSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void encodeStringSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void generateGuidSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void generateHashSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void joinStringsSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void redactStringSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void replaceStringSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void shortenLinkSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void speechToTextSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void splitStringSignalFull(OAIHttpRequestWorker *worker, OAIOutputStringArray summary);
    void stringToFileSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void textToSpeechSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void translateStringSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void trimStringSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void urlDecodeSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void urlEncodeSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void validateEmailSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void verifyHashSignalFull(OAIHttpRequestWorker *worker, OAIOutputBoolean summary);

    Q_DECL_DEPRECATED_X("Use compareStringsSignalError() instead")
    void compareStringsSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void compareStringsSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containsStringSignalError() instead")
    void containsStringSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containsStringSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use convertCaseSignalError() instead")
    void convertCaseSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void convertCaseSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use decodeStringSignalError() instead")
    void decodeStringSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void decodeStringSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encodeStringSignalError() instead")
    void encodeStringSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void encodeStringSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGuidSignalError() instead")
    void generateGuidSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGuidSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateHashSignalError() instead")
    void generateHashSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateHashSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use joinStringsSignalError() instead")
    void joinStringsSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void joinStringsSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redactStringSignalError() instead")
    void redactStringSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redactStringSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceStringSignalError() instead")
    void replaceStringSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceStringSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shortenLinkSignalError() instead")
    void shortenLinkSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shortenLinkSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use speechToTextSignalError() instead")
    void speechToTextSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void speechToTextSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use splitStringSignalError() instead")
    void splitStringSignalE(OAIOutputStringArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void splitStringSignalError(OAIOutputStringArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stringToFileSignalError() instead")
    void stringToFileSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stringToFileSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use textToSpeechSignalError() instead")
    void textToSpeechSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void textToSpeechSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateStringSignalError() instead")
    void translateStringSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translateStringSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trimStringSignalError() instead")
    void trimStringSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trimStringSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlDecodeSignalError() instead")
    void urlDecodeSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlDecodeSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlEncodeSignalError() instead")
    void urlEncodeSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlEncodeSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateEmailSignalError() instead")
    void validateEmailSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateEmailSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyHashSignalError() instead")
    void verifyHashSignalE(OAIOutputBoolean summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyHashSignalError(OAIOutputBoolean summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use compareStringsSignalErrorFull() instead")
    void compareStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void compareStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containsStringSignalErrorFull() instead")
    void containsStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containsStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use convertCaseSignalErrorFull() instead")
    void convertCaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void convertCaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use decodeStringSignalErrorFull() instead")
    void decodeStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void decodeStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encodeStringSignalErrorFull() instead")
    void encodeStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void encodeStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateGuidSignalErrorFull() instead")
    void generateGuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateGuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateHashSignalErrorFull() instead")
    void generateHashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateHashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use joinStringsSignalErrorFull() instead")
    void joinStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void joinStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redactStringSignalErrorFull() instead")
    void redactStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redactStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceStringSignalErrorFull() instead")
    void replaceStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shortenLinkSignalErrorFull() instead")
    void shortenLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shortenLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use speechToTextSignalErrorFull() instead")
    void speechToTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void speechToTextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use splitStringSignalErrorFull() instead")
    void splitStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void splitStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stringToFileSignalErrorFull() instead")
    void stringToFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stringToFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use textToSpeechSignalErrorFull() instead")
    void textToSpeechSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void textToSpeechSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateStringSignalErrorFull() instead")
    void translateStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trimStringSignalErrorFull() instead")
    void trimStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trimStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlDecodeSignalErrorFull() instead")
    void urlDecodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlDecodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlEncodeSignalErrorFull() instead")
    void urlEncodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlEncodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateEmailSignalErrorFull() instead")
    void validateEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyHashSignalErrorFull() instead")
    void verifyHashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyHashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
