/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMathApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMathApi::OAIMathApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIMathApi::~OAIMathApi() {
}

void OAIMathApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://connect.apptigent.com/api/utilities"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("calculateAbsolute", defaultConf);
    _serverIndices.insert("calculateAbsolute", 0);
    _serverConfigs.insert("calculateAddition", defaultConf);
    _serverIndices.insert("calculateAddition", 0);
    _serverConfigs.insert("calculateAverage", defaultConf);
    _serverIndices.insert("calculateAverage", 0);
    _serverConfigs.insert("calculateCosine", defaultConf);
    _serverIndices.insert("calculateCosine", 0);
    _serverConfigs.insert("calculateDivision", defaultConf);
    _serverIndices.insert("calculateDivision", 0);
    _serverConfigs.insert("calculateLogarithm", defaultConf);
    _serverIndices.insert("calculateLogarithm", 0);
    _serverConfigs.insert("calculateMedian", defaultConf);
    _serverIndices.insert("calculateMedian", 0);
    _serverConfigs.insert("calculateMinMax", defaultConf);
    _serverIndices.insert("calculateMinMax", 0);
    _serverConfigs.insert("calculateModulo", defaultConf);
    _serverIndices.insert("calculateModulo", 0);
    _serverConfigs.insert("calculateMultiplication", defaultConf);
    _serverIndices.insert("calculateMultiplication", 0);
    _serverConfigs.insert("calculateNthRoot", defaultConf);
    _serverIndices.insert("calculateNthRoot", 0);
    _serverConfigs.insert("calculatePower", defaultConf);
    _serverIndices.insert("calculatePower", 0);
    _serverConfigs.insert("calculateSine", defaultConf);
    _serverIndices.insert("calculateSine", 0);
    _serverConfigs.insert("calculateSquareRoot", defaultConf);
    _serverIndices.insert("calculateSquareRoot", 0);
    _serverConfigs.insert("calculateSubtraction", defaultConf);
    _serverIndices.insert("calculateSubtraction", 0);
    _serverConfigs.insert("calculateSum", defaultConf);
    _serverIndices.insert("calculateSum", 0);
    _serverConfigs.insert("calculateTangent", defaultConf);
    _serverIndices.insert("calculateTangent", 0);
    _serverConfigs.insert("calculateVariance", defaultConf);
    _serverIndices.insert("calculateVariance", 0);
    _serverConfigs.insert("convertAngle", defaultConf);
    _serverIndices.insert("convertAngle", 0);
    _serverConfigs.insert("convertArea", defaultConf);
    _serverIndices.insert("convertArea", 0);
    _serverConfigs.insert("convertDistance", defaultConf);
    _serverIndices.insert("convertDistance", 0);
    _serverConfigs.insert("convertDuration", defaultConf);
    _serverIndices.insert("convertDuration", 0);
    _serverConfigs.insert("convertEnergy", defaultConf);
    _serverIndices.insert("convertEnergy", 0);
    _serverConfigs.insert("convertPower", defaultConf);
    _serverIndices.insert("convertPower", 0);
    _serverConfigs.insert("convertSpeed", defaultConf);
    _serverIndices.insert("convertSpeed", 0);
    _serverConfigs.insert("convertTemperature", defaultConf);
    _serverIndices.insert("convertTemperature", 0);
    _serverConfigs.insert("convertVolume", defaultConf);
    _serverIndices.insert("convertVolume", 0);
    _serverConfigs.insert("convertWeight", defaultConf);
    _serverIndices.insert("convertWeight", 0);
    _serverConfigs.insert("randomNumber", defaultConf);
    _serverIndices.insert("randomNumber", 0);
    _serverConfigs.insert("roundNumber", defaultConf);
    _serverIndices.insert("roundNumber", 0);
    _serverConfigs.insert("standardDeviation", defaultConf);
    _serverIndices.insert("standardDeviation", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIMathApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIMathApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIMathApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIMathApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIMathApi::setUsername(const QString &username) {
    _username = username;
}

void OAIMathApi::setPassword(const QString &password) {
    _password = password;
}


void OAIMathApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIMathApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIMathApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIMathApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMathApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMathApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIMathApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIMathApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIMathApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIMathApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIMathApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIMathApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIMathApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIMathApi::calculateAbsolute(const ::OpenAPI::OptionalParam<OAIInputCalculateNumber> &calculate_number) {
    QString fullPath = QString(_serverConfigs["calculateAbsolute"][_serverIndices.value("calculateAbsolute")].URL()+"/CalculateAbsolute");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_number.hasValue()){

        
        QByteArray output = calculate_number.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateAbsoluteCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateAbsoluteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateAbsoluteSignal(output);
        Q_EMIT calculateAbsoluteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateAbsoluteSignalE(output, error_type, error_str);
        Q_EMIT calculateAbsoluteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateAbsoluteSignalError(output, error_type, error_str);
        Q_EMIT calculateAbsoluteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateAddition(const ::OpenAPI::OptionalParam<OAIInputCalculateNumbers> &calculate_numbers) {
    QString fullPath = QString(_serverConfigs["calculateAddition"][_serverIndices.value("calculateAddition")].URL()+"/CalculateAddition");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_numbers.hasValue()){

        
        QByteArray output = calculate_numbers.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateAdditionCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateAdditionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateAdditionSignal(output);
        Q_EMIT calculateAdditionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateAdditionSignalE(output, error_type, error_str);
        Q_EMIT calculateAdditionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateAdditionSignalError(output, error_type, error_str);
        Q_EMIT calculateAdditionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateAverage(const ::OpenAPI::OptionalParam<OAIInputCalculateSeries> &calculate_series) {
    QString fullPath = QString(_serverConfigs["calculateAverage"][_serverIndices.value("calculateAverage")].URL()+"/CalculateAverage");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_series.hasValue()){

        
        QByteArray output = calculate_series.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateAverageCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateAverageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateAverageSignal(output);
        Q_EMIT calculateAverageSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateAverageSignalE(output, error_type, error_str);
        Q_EMIT calculateAverageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateAverageSignalError(output, error_type, error_str);
        Q_EMIT calculateAverageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateCosine(const ::OpenAPI::OptionalParam<OAIInputCalculateNumber> &calculate_number) {
    QString fullPath = QString(_serverConfigs["calculateCosine"][_serverIndices.value("calculateCosine")].URL()+"/CalculateCosine");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_number.hasValue()){

        
        QByteArray output = calculate_number.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateCosineCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateCosineCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateCosineSignal(output);
        Q_EMIT calculateCosineSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateCosineSignalE(output, error_type, error_str);
        Q_EMIT calculateCosineSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateCosineSignalError(output, error_type, error_str);
        Q_EMIT calculateCosineSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateDivision(const ::OpenAPI::OptionalParam<OAIInputCalculateNumbers> &calculate_numbers) {
    QString fullPath = QString(_serverConfigs["calculateDivision"][_serverIndices.value("calculateDivision")].URL()+"/CalculateDivision");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_numbers.hasValue()){

        
        QByteArray output = calculate_numbers.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateDivisionCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateDivisionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateDivisionSignal(output);
        Q_EMIT calculateDivisionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateDivisionSignalE(output, error_type, error_str);
        Q_EMIT calculateDivisionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateDivisionSignalError(output, error_type, error_str);
        Q_EMIT calculateDivisionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateLogarithm(const ::OpenAPI::OptionalParam<OAIInputCalculateNumber> &calculate_number) {
    QString fullPath = QString(_serverConfigs["calculateLogarithm"][_serverIndices.value("calculateLogarithm")].URL()+"/CalculateLogarithm");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_number.hasValue()){

        
        QByteArray output = calculate_number.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateLogarithmCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateLogarithmCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateLogarithmSignal(output);
        Q_EMIT calculateLogarithmSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateLogarithmSignalE(output, error_type, error_str);
        Q_EMIT calculateLogarithmSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateLogarithmSignalError(output, error_type, error_str);
        Q_EMIT calculateLogarithmSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateMedian(const ::OpenAPI::OptionalParam<OAIInputCalculateSeries> &calculate_series) {
    QString fullPath = QString(_serverConfigs["calculateMedian"][_serverIndices.value("calculateMedian")].URL()+"/CalculateMedian");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_series.hasValue()){

        
        QByteArray output = calculate_series.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateMedianCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateMedianCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateMedianSignal(output);
        Q_EMIT calculateMedianSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateMedianSignalE(output, error_type, error_str);
        Q_EMIT calculateMedianSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateMedianSignalError(output, error_type, error_str);
        Q_EMIT calculateMedianSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateMinMax(const ::OpenAPI::OptionalParam<OAIInputCalculateMinMax> &calculate_series) {
    QString fullPath = QString(_serverConfigs["calculateMinMax"][_serverIndices.value("calculateMinMax")].URL()+"/CalculateMinMax");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_series.hasValue()){

        
        QByteArray output = calculate_series.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateMinMaxCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateMinMaxCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateMinMaxSignal(output);
        Q_EMIT calculateMinMaxSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateMinMaxSignalE(output, error_type, error_str);
        Q_EMIT calculateMinMaxSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateMinMaxSignalError(output, error_type, error_str);
        Q_EMIT calculateMinMaxSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateModulo(const ::OpenAPI::OptionalParam<OAIInputCalculateNumbers> &calculate_numbers) {
    QString fullPath = QString(_serverConfigs["calculateModulo"][_serverIndices.value("calculateModulo")].URL()+"/CalculateModulo");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_numbers.hasValue()){

        
        QByteArray output = calculate_numbers.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateModuloCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateModuloCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateModuloSignal(output);
        Q_EMIT calculateModuloSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateModuloSignalE(output, error_type, error_str);
        Q_EMIT calculateModuloSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateModuloSignalError(output, error_type, error_str);
        Q_EMIT calculateModuloSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateMultiplication(const ::OpenAPI::OptionalParam<OAIInputCalculateNumbers> &calculate_numbers) {
    QString fullPath = QString(_serverConfigs["calculateMultiplication"][_serverIndices.value("calculateMultiplication")].URL()+"/CalculateMultiplication");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_numbers.hasValue()){

        
        QByteArray output = calculate_numbers.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateMultiplicationCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateMultiplicationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateMultiplicationSignal(output);
        Q_EMIT calculateMultiplicationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateMultiplicationSignalE(output, error_type, error_str);
        Q_EMIT calculateMultiplicationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateMultiplicationSignalError(output, error_type, error_str);
        Q_EMIT calculateMultiplicationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateNthRoot(const ::OpenAPI::OptionalParam<OAIInputCalculateNumbers> &calculate_numbers) {
    QString fullPath = QString(_serverConfigs["calculateNthRoot"][_serverIndices.value("calculateNthRoot")].URL()+"/CalculateNthRoot");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_numbers.hasValue()){

        
        QByteArray output = calculate_numbers.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateNthRootCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateNthRootCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateNthRootSignal(output);
        Q_EMIT calculateNthRootSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateNthRootSignalE(output, error_type, error_str);
        Q_EMIT calculateNthRootSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateNthRootSignalError(output, error_type, error_str);
        Q_EMIT calculateNthRootSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculatePower(const ::OpenAPI::OptionalParam<OAIInputCalculatePower> &calculate_power) {
    QString fullPath = QString(_serverConfigs["calculatePower"][_serverIndices.value("calculatePower")].URL()+"/CalculatePower");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_power.hasValue()){

        
        QByteArray output = calculate_power.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculatePowerCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculatePowerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculatePowerSignal(output);
        Q_EMIT calculatePowerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculatePowerSignalE(output, error_type, error_str);
        Q_EMIT calculatePowerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculatePowerSignalError(output, error_type, error_str);
        Q_EMIT calculatePowerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateSine(const ::OpenAPI::OptionalParam<OAIInputCalculateNumber> &calculate_number) {
    QString fullPath = QString(_serverConfigs["calculateSine"][_serverIndices.value("calculateSine")].URL()+"/CalculateSine");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_number.hasValue()){

        
        QByteArray output = calculate_number.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateSineCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateSineCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateSineSignal(output);
        Q_EMIT calculateSineSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateSineSignalE(output, error_type, error_str);
        Q_EMIT calculateSineSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateSineSignalError(output, error_type, error_str);
        Q_EMIT calculateSineSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateSquareRoot(const ::OpenAPI::OptionalParam<OAIInputCalculateNumber> &calculate_number) {
    QString fullPath = QString(_serverConfigs["calculateSquareRoot"][_serverIndices.value("calculateSquareRoot")].URL()+"/CalculateSquareRoot");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_number.hasValue()){

        
        QByteArray output = calculate_number.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateSquareRootCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateSquareRootCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateSquareRootSignal(output);
        Q_EMIT calculateSquareRootSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateSquareRootSignalE(output, error_type, error_str);
        Q_EMIT calculateSquareRootSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateSquareRootSignalError(output, error_type, error_str);
        Q_EMIT calculateSquareRootSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateSubtraction(const ::OpenAPI::OptionalParam<OAIInputCalculateNumbers> &calculate_numbers) {
    QString fullPath = QString(_serverConfigs["calculateSubtraction"][_serverIndices.value("calculateSubtraction")].URL()+"/CalculateSubtraction");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_numbers.hasValue()){

        
        QByteArray output = calculate_numbers.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateSubtractionCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateSubtractionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateSubtractionSignal(output);
        Q_EMIT calculateSubtractionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateSubtractionSignalE(output, error_type, error_str);
        Q_EMIT calculateSubtractionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateSubtractionSignalError(output, error_type, error_str);
        Q_EMIT calculateSubtractionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateSum(const ::OpenAPI::OptionalParam<OAIInputCalculateSeries> &calculate_series) {
    QString fullPath = QString(_serverConfigs["calculateSum"][_serverIndices.value("calculateSum")].URL()+"/CalculateSum");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_series.hasValue()){

        
        QByteArray output = calculate_series.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateSumCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateSumCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateSumSignal(output);
        Q_EMIT calculateSumSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateSumSignalE(output, error_type, error_str);
        Q_EMIT calculateSumSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateSumSignalError(output, error_type, error_str);
        Q_EMIT calculateSumSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateTangent(const ::OpenAPI::OptionalParam<OAIInputCalculateNumber> &calculate_number) {
    QString fullPath = QString(_serverConfigs["calculateTangent"][_serverIndices.value("calculateTangent")].URL()+"/CalculateTangent");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_number.hasValue()){

        
        QByteArray output = calculate_number.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateTangentCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateTangentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateTangentSignal(output);
        Q_EMIT calculateTangentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateTangentSignalE(output, error_type, error_str);
        Q_EMIT calculateTangentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateTangentSignalError(output, error_type, error_str);
        Q_EMIT calculateTangentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::calculateVariance(const ::OpenAPI::OptionalParam<OAIInputCalculateSeries> &calculate_series) {
    QString fullPath = QString(_serverConfigs["calculateVariance"][_serverIndices.value("calculateVariance")].URL()+"/CalculateVariance");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_series.hasValue()){

        
        QByteArray output = calculate_series.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::calculateVarianceCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::calculateVarianceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT calculateVarianceSignal(output);
        Q_EMIT calculateVarianceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT calculateVarianceSignalE(output, error_type, error_str);
        Q_EMIT calculateVarianceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT calculateVarianceSignalError(output, error_type, error_str);
        Q_EMIT calculateVarianceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::convertAngle(const ::OpenAPI::OptionalParam<OAIInputConvertAngle> &convert_angle) {
    QString fullPath = QString(_serverConfigs["convertAngle"][_serverIndices.value("convertAngle")].URL()+"/ConvertAngle");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (convert_angle.hasValue()){

        
        QByteArray output = convert_angle.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::convertAngleCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::convertAngleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT convertAngleSignal(output);
        Q_EMIT convertAngleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT convertAngleSignalE(output, error_type, error_str);
        Q_EMIT convertAngleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT convertAngleSignalError(output, error_type, error_str);
        Q_EMIT convertAngleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::convertArea(const ::OpenAPI::OptionalParam<OAIInputConvertArea> &convert_area) {
    QString fullPath = QString(_serverConfigs["convertArea"][_serverIndices.value("convertArea")].URL()+"/ConvertArea");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (convert_area.hasValue()){

        
        QByteArray output = convert_area.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::convertAreaCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::convertAreaCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT convertAreaSignal(output);
        Q_EMIT convertAreaSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT convertAreaSignalE(output, error_type, error_str);
        Q_EMIT convertAreaSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT convertAreaSignalError(output, error_type, error_str);
        Q_EMIT convertAreaSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::convertDistance(const ::OpenAPI::OptionalParam<OAIInputConvertDistance> &convert_distance) {
    QString fullPath = QString(_serverConfigs["convertDistance"][_serverIndices.value("convertDistance")].URL()+"/ConvertDistance");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (convert_distance.hasValue()){

        
        QByteArray output = convert_distance.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::convertDistanceCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::convertDistanceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT convertDistanceSignal(output);
        Q_EMIT convertDistanceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT convertDistanceSignalE(output, error_type, error_str);
        Q_EMIT convertDistanceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT convertDistanceSignalError(output, error_type, error_str);
        Q_EMIT convertDistanceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::convertDuration(const ::OpenAPI::OptionalParam<OAIInputConvertDuration> &convert_duration) {
    QString fullPath = QString(_serverConfigs["convertDuration"][_serverIndices.value("convertDuration")].URL()+"/ConvertDuration");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (convert_duration.hasValue()){

        
        QByteArray output = convert_duration.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::convertDurationCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::convertDurationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT convertDurationSignal(output);
        Q_EMIT convertDurationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT convertDurationSignalE(output, error_type, error_str);
        Q_EMIT convertDurationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT convertDurationSignalError(output, error_type, error_str);
        Q_EMIT convertDurationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::convertEnergy(const ::OpenAPI::OptionalParam<OAIInputConvertEnergy> &convert_energy) {
    QString fullPath = QString(_serverConfigs["convertEnergy"][_serverIndices.value("convertEnergy")].URL()+"/ConvertEnergy");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (convert_energy.hasValue()){

        
        QByteArray output = convert_energy.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::convertEnergyCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::convertEnergyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT convertEnergySignal(output);
        Q_EMIT convertEnergySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT convertEnergySignalE(output, error_type, error_str);
        Q_EMIT convertEnergySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT convertEnergySignalError(output, error_type, error_str);
        Q_EMIT convertEnergySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::convertPower(const ::OpenAPI::OptionalParam<OAIInputConvertPower> &convert_power) {
    QString fullPath = QString(_serverConfigs["convertPower"][_serverIndices.value("convertPower")].URL()+"/ConvertPower");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (convert_power.hasValue()){

        
        QByteArray output = convert_power.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::convertPowerCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::convertPowerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT convertPowerSignal(output);
        Q_EMIT convertPowerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT convertPowerSignalE(output, error_type, error_str);
        Q_EMIT convertPowerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT convertPowerSignalError(output, error_type, error_str);
        Q_EMIT convertPowerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::convertSpeed(const ::OpenAPI::OptionalParam<OAIInputConvertSpeed> &convert_speed) {
    QString fullPath = QString(_serverConfigs["convertSpeed"][_serverIndices.value("convertSpeed")].URL()+"/ConvertSpeed");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (convert_speed.hasValue()){

        
        QByteArray output = convert_speed.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::convertSpeedCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::convertSpeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT convertSpeedSignal(output);
        Q_EMIT convertSpeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT convertSpeedSignalE(output, error_type, error_str);
        Q_EMIT convertSpeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT convertSpeedSignalError(output, error_type, error_str);
        Q_EMIT convertSpeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::convertTemperature(const ::OpenAPI::OptionalParam<OAIInputConvertTemperature> &convert_temperature) {
    QString fullPath = QString(_serverConfigs["convertTemperature"][_serverIndices.value("convertTemperature")].URL()+"/ConvertTemperature");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (convert_temperature.hasValue()){

        
        QByteArray output = convert_temperature.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::convertTemperatureCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::convertTemperatureCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT convertTemperatureSignal(output);
        Q_EMIT convertTemperatureSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT convertTemperatureSignalE(output, error_type, error_str);
        Q_EMIT convertTemperatureSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT convertTemperatureSignalError(output, error_type, error_str);
        Q_EMIT convertTemperatureSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::convertVolume(const ::OpenAPI::OptionalParam<OAIInputConvertVolume> &convert_volume) {
    QString fullPath = QString(_serverConfigs["convertVolume"][_serverIndices.value("convertVolume")].URL()+"/ConvertVolume");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (convert_volume.hasValue()){

        
        QByteArray output = convert_volume.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::convertVolumeCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::convertVolumeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT convertVolumeSignal(output);
        Q_EMIT convertVolumeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT convertVolumeSignalE(output, error_type, error_str);
        Q_EMIT convertVolumeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT convertVolumeSignalError(output, error_type, error_str);
        Q_EMIT convertVolumeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::convertWeight(const ::OpenAPI::OptionalParam<OAIInputConvertWeight> &convert_weight) {
    QString fullPath = QString(_serverConfigs["convertWeight"][_serverIndices.value("convertWeight")].URL()+"/ConvertWeight");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (convert_weight.hasValue()){

        
        QByteArray output = convert_weight.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::convertWeightCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::convertWeightCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT convertWeightSignal(output);
        Q_EMIT convertWeightSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT convertWeightSignalE(output, error_type, error_str);
        Q_EMIT convertWeightSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT convertWeightSignalError(output, error_type, error_str);
        Q_EMIT convertWeightSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::randomNumber(const ::OpenAPI::OptionalParam<OAIInputNumberRange> &number_range) {
    QString fullPath = QString(_serverConfigs["randomNumber"][_serverIndices.value("randomNumber")].URL()+"/RandomNumber");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (number_range.hasValue()){

        
        QByteArray output = number_range.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::randomNumberCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::randomNumberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT randomNumberSignal(output);
        Q_EMIT randomNumberSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT randomNumberSignalE(output, error_type, error_str);
        Q_EMIT randomNumberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT randomNumberSignalError(output, error_type, error_str);
        Q_EMIT randomNumberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::roundNumber(const ::OpenAPI::OptionalParam<OAIInputCalculateNumber> &calculate_number) {
    QString fullPath = QString(_serverConfigs["roundNumber"][_serverIndices.value("roundNumber")].URL()+"/RoundNumber");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_number.hasValue()){

        
        QByteArray output = calculate_number.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::roundNumberCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::roundNumberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT roundNumberSignal(output);
        Q_EMIT roundNumberSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT roundNumberSignalE(output, error_type, error_str);
        Q_EMIT roundNumberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT roundNumberSignalError(output, error_type, error_str);
        Q_EMIT roundNumberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::standardDeviation(const ::OpenAPI::OptionalParam<OAIInputCalculateSeries> &calculate_series) {
    QString fullPath = QString(_serverConfigs["standardDeviation"][_serverIndices.value("standardDeviation")].URL()+"/StandardDeviation");
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (calculate_series.hasValue()){

        
        QByteArray output = calculate_series.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMathApi::standardDeviationCallback);
    connect(this, &OAIMathApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMathApi::standardDeviationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOutputNumber output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT standardDeviationSignal(output);
        Q_EMIT standardDeviationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT standardDeviationSignalE(output, error_type, error_str);
        Q_EMIT standardDeviationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT standardDeviationSignalError(output, error_type, error_str);
        Q_EMIT standardDeviationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMathApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
