/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputJsonConversionCSV.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputJsonConversionCSV::OAIInputJsonConversionCSV(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputJsonConversionCSV::OAIInputJsonConversionCSV() {
    this->initializeModel();
}

OAIInputJsonConversionCSV::~OAIInputJsonConversionCSV() {}

void OAIInputJsonConversionCSV::initializeModel() {

    m_header_isSet = false;
    m_header_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_omit_isSet = false;
    m_omit_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;
}

void OAIInputJsonConversionCSV::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputJsonConversionCSV::fromJsonObject(QJsonObject json) {

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_omit_isValid = ::OpenAPI::fromJsonValue(m_omit, json[QString("omit")]);
    m_omit_isSet = !json[QString("omit")].isNull() && m_omit_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;
}

QString OAIInputJsonConversionCSV::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputJsonConversionCSV::asJsonObject() const {
    QJsonObject obj;
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_omit_isSet) {
        obj.insert(QString("omit"), ::OpenAPI::toJsonValue(m_omit));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    return obj;
}

bool OAIInputJsonConversionCSV::isHeader() const {
    return m_header;
}
void OAIInputJsonConversionCSV::setHeader(const bool &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIInputJsonConversionCSV::is_header_Set() const{
    return m_header_isSet;
}

bool OAIInputJsonConversionCSV::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIInputJsonConversionCSV::getInput() const {
    return m_input;
}
void OAIInputJsonConversionCSV::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputJsonConversionCSV::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputJsonConversionCSV::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputJsonConversionCSV::getOmit() const {
    return m_omit;
}
void OAIInputJsonConversionCSV::setOmit(const QString &omit) {
    m_omit = omit;
    m_omit_isSet = true;
}

bool OAIInputJsonConversionCSV::is_omit_Set() const{
    return m_omit_isSet;
}

bool OAIInputJsonConversionCSV::is_omit_Valid() const{
    return m_omit_isValid;
}

QString OAIInputJsonConversionCSV::getOrder() const {
    return m_order;
}
void OAIInputJsonConversionCSV::setOrder(const QString &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIInputJsonConversionCSV::is_order_Set() const{
    return m_order_isSet;
}

bool OAIInputJsonConversionCSV::is_order_Valid() const{
    return m_order_isValid;
}

bool OAIInputJsonConversionCSV::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_omit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputJsonConversionCSV::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_header_isValid && m_input_isValid && true;
}

} // namespace OpenAPI
