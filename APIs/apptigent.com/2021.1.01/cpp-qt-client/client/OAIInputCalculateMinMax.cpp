/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCalculateMinMax.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCalculateMinMax::OAIInputCalculateMinMax(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCalculateMinMax::OAIInputCalculateMinMax() {
    this->initializeModel();
}

OAIInputCalculateMinMax::~OAIInputCalculateMinMax() {}

void OAIInputCalculateMinMax::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIInputCalculateMinMax::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCalculateMinMax::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIInputCalculateMinMax::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCalculateMinMax::asJsonObject() const {
    QJsonObject obj;
    if (m_input.size() > 0) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<double> OAIInputCalculateMinMax::getInput() const {
    return m_input;
}
void OAIInputCalculateMinMax::setInput(const QList<double> &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCalculateMinMax::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCalculateMinMax::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputCalculateMinMax::getType() const {
    return m_type;
}
void OAIInputCalculateMinMax::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInputCalculateMinMax::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInputCalculateMinMax::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIInputCalculateMinMax::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCalculateMinMax::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
