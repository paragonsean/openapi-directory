/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilesApi_H
#define OAI_OAIFilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIInputQRCode.h"
#include "OAIOutputString.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilesApi : public QObject {
    Q_OBJECT

public:
    OAIFilesApi(const int timeOut = 0);
    ~OAIFilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  format QString [required]
    */
    virtual void convertImage(const OAIHttpFileElement &file, const QString &format);

    /**
    * @param[in]  height double [required]
    * @param[in]  width double [required]
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  position QString [required]
    */
    virtual void cropImage(const double &height, const double &width, const OAIHttpFileElement &file, const QString &position);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void fileToString(const OAIHttpFileElement &file);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  orientation QString [required]
    */
    virtual void flipImage(const OAIHttpFileElement &file, const QString &orientation);

    /**
    * @param[in]  input_qr_code OAIInputQRCode [optional]
    */
    virtual void generateQRCode(const ::OpenAPI::OptionalParam<OAIInputQRCode> &input_qr_code = ::OpenAPI::OptionalParam<OAIInputQRCode>());

    /**
    * @param[in]  algorithm QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  units QString [required]
    * @param[in]  height double [optional]
    * @param[in]  width double [optional]
    */
    virtual void resizeImage(const QString &algorithm, const OAIHttpFileElement &file, const QString &units, const ::OpenAPI::OptionalParam<double> &height = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &width = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  degrees QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void rotateImage(const QString &degrees, const OAIHttpFileElement &file);

    /**
    * @param[in]  color QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  font QString [required]
    * @param[in]  horizontal QString [required]
    * @param[in]  size double [required]
    * @param[in]  text QString [required]
    * @param[in]  vertical QString [required]
    */
    virtual void watermarkImage(const QString &color, const OAIHttpFileElement &file, const QString &font, const QString &horizontal, const double &size, const QString &text, const QString &vertical);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void convertImageCallback(OAIHttpRequestWorker *worker);
    void cropImageCallback(OAIHttpRequestWorker *worker);
    void fileToStringCallback(OAIHttpRequestWorker *worker);
    void flipImageCallback(OAIHttpRequestWorker *worker);
    void generateQRCodeCallback(OAIHttpRequestWorker *worker);
    void resizeImageCallback(OAIHttpRequestWorker *worker);
    void rotateImageCallback(OAIHttpRequestWorker *worker);
    void watermarkImageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void convertImageSignal(OAIHttpFileElement summary);
    void cropImageSignal(OAIHttpFileElement summary);
    void fileToStringSignal(OAIOutputString summary);
    void flipImageSignal(OAIHttpFileElement summary);
    void generateQRCodeSignal(OAIHttpFileElement summary);
    void resizeImageSignal(OAIHttpFileElement summary);
    void rotateImageSignal(OAIHttpFileElement summary);
    void watermarkImageSignal(OAIHttpFileElement summary);


    void convertImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void cropImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void fileToStringSignalFull(OAIHttpRequestWorker *worker, OAIOutputString summary);
    void flipImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void generateQRCodeSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void resizeImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void rotateImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void watermarkImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use convertImageSignalError() instead")
    void convertImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void convertImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cropImageSignalError() instead")
    void cropImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cropImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileToStringSignalError() instead")
    void fileToStringSignalE(OAIOutputString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileToStringSignalError(OAIOutputString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flipImageSignalError() instead")
    void flipImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flipImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateQRCodeSignalError() instead")
    void generateQRCodeSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateQRCodeSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resizeImageSignalError() instead")
    void resizeImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resizeImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rotateImageSignalError() instead")
    void rotateImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rotateImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watermarkImageSignalError() instead")
    void watermarkImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watermarkImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use convertImageSignalErrorFull() instead")
    void convertImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void convertImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cropImageSignalErrorFull() instead")
    void cropImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cropImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileToStringSignalErrorFull() instead")
    void fileToStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileToStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flipImageSignalErrorFull() instead")
    void flipImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flipImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateQRCodeSignalErrorFull() instead")
    void generateQRCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateQRCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resizeImageSignalErrorFull() instead")
    void resizeImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resizeImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rotateImageSignalErrorFull() instead")
    void rotateImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rotateImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watermarkImageSignalErrorFull() instead")
    void watermarkImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watermarkImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
