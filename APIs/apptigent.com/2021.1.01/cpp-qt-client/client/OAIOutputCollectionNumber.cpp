/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputCollectionNumber.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputCollectionNumber::OAIOutputCollectionNumber(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputCollectionNumber::OAIOutputCollectionNumber() {
    this->initializeModel();
}

OAIOutputCollectionNumber::~OAIOutputCollectionNumber() {}

void OAIOutputCollectionNumber::initializeModel() {

    m_item_isSet = false;
    m_item_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIOutputCollectionNumber::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputCollectionNumber::fromJsonObject(QJsonObject json) {

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIOutputCollectionNumber::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputCollectionNumber::asJsonObject() const {
    QJsonObject obj;
    if (m_item_isSet) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

double OAIOutputCollectionNumber::getItem() const {
    return m_item;
}
void OAIOutputCollectionNumber::setItem(const double &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIOutputCollectionNumber::is_item_Set() const{
    return m_item_isSet;
}

bool OAIOutputCollectionNumber::is_item_Valid() const{
    return m_item_isValid;
}

QList<double> OAIOutputCollectionNumber::getItems() const {
    return m_items;
}
void OAIOutputCollectionNumber::setItems(const QList<double> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIOutputCollectionNumber::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOutputCollectionNumber::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIOutputCollectionNumber::isStatus() const {
    return m_status;
}
void OAIOutputCollectionNumber::setStatus(const bool &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOutputCollectionNumber::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOutputCollectionNumber::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIOutputCollectionNumber::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputCollectionNumber::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
