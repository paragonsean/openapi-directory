/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputStringContains.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputStringContains::OAIInputStringContains(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputStringContains::OAIInputStringContains() {
    this->initializeModel();
}

OAIInputStringContains::~OAIInputStringContains() {}

void OAIInputStringContains::initializeModel() {

    m_find_isSet = false;
    m_find_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_lower_isSet = false;
    m_lower_isValid = false;
}

void OAIInputStringContains::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputStringContains::fromJsonObject(QJsonObject json) {

    m_find_isValid = ::OpenAPI::fromJsonValue(m_find, json[QString("find")]);
    m_find_isSet = !json[QString("find")].isNull() && m_find_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_lower_isValid = ::OpenAPI::fromJsonValue(m_lower, json[QString("lower")]);
    m_lower_isSet = !json[QString("lower")].isNull() && m_lower_isValid;
}

QString OAIInputStringContains::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputStringContains::asJsonObject() const {
    QJsonObject obj;
    if (m_find_isSet) {
        obj.insert(QString("find"), ::OpenAPI::toJsonValue(m_find));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_lower_isSet) {
        obj.insert(QString("lower"), ::OpenAPI::toJsonValue(m_lower));
    }
    return obj;
}

QString OAIInputStringContains::getFind() const {
    return m_find;
}
void OAIInputStringContains::setFind(const QString &find) {
    m_find = find;
    m_find_isSet = true;
}

bool OAIInputStringContains::is_find_Set() const{
    return m_find_isSet;
}

bool OAIInputStringContains::is_find_Valid() const{
    return m_find_isValid;
}

QString OAIInputStringContains::getInput() const {
    return m_input;
}
void OAIInputStringContains::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputStringContains::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputStringContains::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputStringContains::getLower() const {
    return m_lower;
}
void OAIInputStringContains::setLower(const QString &lower) {
    m_lower = lower;
    m_lower_isSet = true;
}

bool OAIInputStringContains::is_lower_Set() const{
    return m_lower_isSet;
}

bool OAIInputStringContains::is_lower_Valid() const{
    return m_lower_isValid;
}

bool OAIInputStringContains::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_find_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputStringContains::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_find_isValid && m_input_isValid && m_lower_isValid && true;
}

} // namespace OpenAPI
