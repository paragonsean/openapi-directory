/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputJoinStrings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputJoinStrings::OAIInputJoinStrings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputJoinStrings::OAIInputJoinStrings() {
    this->initializeModel();
}

OAIInputJoinStrings::~OAIInputJoinStrings() {}

void OAIInputJoinStrings::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_lower_isSet = false;
    m_lower_isValid = false;

    m_separator_isSet = false;
    m_separator_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;
}

void OAIInputJoinStrings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputJoinStrings::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_lower_isValid = ::OpenAPI::fromJsonValue(m_lower, json[QString("lower")]);
    m_lower_isSet = !json[QString("lower")].isNull() && m_lower_isValid;

    m_separator_isValid = ::OpenAPI::fromJsonValue(m_separator, json[QString("separator")]);
    m_separator_isSet = !json[QString("separator")].isNull() && m_separator_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;
}

QString OAIInputJoinStrings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputJoinStrings::asJsonObject() const {
    QJsonObject obj;
    if (m_input.size() > 0) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_lower_isSet) {
        obj.insert(QString("lower"), ::OpenAPI::toJsonValue(m_lower));
    }
    if (m_separator_isSet) {
        obj.insert(QString("separator"), ::OpenAPI::toJsonValue(m_separator));
    }
    if (m_trim_isSet) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    return obj;
}

QList<QString> OAIInputJoinStrings::getInput() const {
    return m_input;
}
void OAIInputJoinStrings::setInput(const QList<QString> &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputJoinStrings::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputJoinStrings::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputJoinStrings::getLower() const {
    return m_lower;
}
void OAIInputJoinStrings::setLower(const QString &lower) {
    m_lower = lower;
    m_lower_isSet = true;
}

bool OAIInputJoinStrings::is_lower_Set() const{
    return m_lower_isSet;
}

bool OAIInputJoinStrings::is_lower_Valid() const{
    return m_lower_isValid;
}

QString OAIInputJoinStrings::getSeparator() const {
    return m_separator;
}
void OAIInputJoinStrings::setSeparator(const QString &separator) {
    m_separator = separator;
    m_separator_isSet = true;
}

bool OAIInputJoinStrings::is_separator_Set() const{
    return m_separator_isSet;
}

bool OAIInputJoinStrings::is_separator_Valid() const{
    return m_separator_isValid;
}

QString OAIInputJoinStrings::getTrim() const {
    return m_trim;
}
void OAIInputJoinStrings::setTrim(const QString &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAIInputJoinStrings::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAIInputJoinStrings::is_trim_Valid() const{
    return m_trim_isValid;
}

bool OAIInputJoinStrings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputJoinStrings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_lower_isValid && m_separator_isValid && m_trim_isValid && true;
}

} // namespace OpenAPI
