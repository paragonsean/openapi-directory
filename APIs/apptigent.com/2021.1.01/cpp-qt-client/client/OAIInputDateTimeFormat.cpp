/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputDateTimeFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputDateTimeFormat::OAIInputDateTimeFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputDateTimeFormat::OAIInputDateTimeFormat() {
    this->initializeModel();
}

OAIInputDateTimeFormat::~OAIInputDateTimeFormat() {}

void OAIInputDateTimeFormat::initializeModel() {

    m_culture_isSet = false;
    m_culture_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;
}

void OAIInputDateTimeFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputDateTimeFormat::fromJsonObject(QJsonObject json) {

    m_culture_isValid = ::OpenAPI::fromJsonValue(m_culture, json[QString("culture")]);
    m_culture_isSet = !json[QString("culture")].isNull() && m_culture_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;
}

QString OAIInputDateTimeFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputDateTimeFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_culture_isSet) {
        obj.insert(QString("culture"), ::OpenAPI::toJsonValue(m_culture));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    return obj;
}

QString OAIInputDateTimeFormat::getCulture() const {
    return m_culture;
}
void OAIInputDateTimeFormat::setCulture(const QString &culture) {
    m_culture = culture;
    m_culture_isSet = true;
}

bool OAIInputDateTimeFormat::is_culture_Set() const{
    return m_culture_isSet;
}

bool OAIInputDateTimeFormat::is_culture_Valid() const{
    return m_culture_isValid;
}

QString OAIInputDateTimeFormat::getFormat() const {
    return m_format;
}
void OAIInputDateTimeFormat::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIInputDateTimeFormat::is_format_Set() const{
    return m_format_isSet;
}

bool OAIInputDateTimeFormat::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIInputDateTimeFormat::getInput() const {
    return m_input;
}
void OAIInputDateTimeFormat::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputDateTimeFormat::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputDateTimeFormat::is_input_Valid() const{
    return m_input_isValid;
}

bool OAIInputDateTimeFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_culture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputDateTimeFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_culture_isValid && m_format_isValid && m_input_isValid && true;
}

} // namespace OpenAPI
