/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputTranslateString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputTranslateString::OAIInputTranslateString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputTranslateString::OAIInputTranslateString() {
    this->initializeModel();
}

OAIInputTranslateString::~OAIInputTranslateString() {}

void OAIInputTranslateString::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;
}

void OAIInputTranslateString::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputTranslateString::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;
}

QString OAIInputTranslateString::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputTranslateString::asJsonObject() const {
    QJsonObject obj;
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    return obj;
}

QString OAIInputTranslateString::getInput() const {
    return m_input;
}
void OAIInputTranslateString::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputTranslateString::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputTranslateString::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputTranslateString::getLanguage() const {
    return m_language;
}
void OAIInputTranslateString::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIInputTranslateString::is_language_Set() const{
    return m_language_isSet;
}

bool OAIInputTranslateString::is_language_Valid() const{
    return m_language_isValid;
}

bool OAIInputTranslateString::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputTranslateString::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_language_isValid && true;
}

} // namespace OpenAPI
