/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOutputDateDifference.h
 *
 * 
 */

#ifndef OAIOutputDateDifference_H
#define OAIOutputDateDifference_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOutputDateDifference : public OAIObject {
public:
    OAIOutputDateDifference();
    OAIOutputDateDifference(QString json);
    ~OAIOutputDateDifference() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getDays() const;
    void setDays(const double &days);
    bool is_days_Set() const;
    bool is_days_Valid() const;

    double getHours() const;
    void setHours(const double &hours);
    bool is_hours_Set() const;
    bool is_hours_Valid() const;

    double getMilliseconds() const;
    void setMilliseconds(const double &milliseconds);
    bool is_milliseconds_Set() const;
    bool is_milliseconds_Valid() const;

    double getMinutes() const;
    void setMinutes(const double &minutes);
    bool is_minutes_Set() const;
    bool is_minutes_Valid() const;

    double getMonths() const;
    void setMonths(const double &months);
    bool is_months_Set() const;
    bool is_months_Valid() const;

    double getTicks() const;
    void setTicks(const double &ticks);
    bool is_ticks_Set() const;
    bool is_ticks_Valid() const;

    double getTotalDays() const;
    void setTotalDays(const double &total_days);
    bool is_total_days_Set() const;
    bool is_total_days_Valid() const;

    double getTotalHours() const;
    void setTotalHours(const double &total_hours);
    bool is_total_hours_Set() const;
    bool is_total_hours_Valid() const;

    double getTotalMilliseconds() const;
    void setTotalMilliseconds(const double &total_milliseconds);
    bool is_total_milliseconds_Set() const;
    bool is_total_milliseconds_Valid() const;

    double getTotalMinutes() const;
    void setTotalMinutes(const double &total_minutes);
    bool is_total_minutes_Set() const;
    bool is_total_minutes_Valid() const;

    double getTotalMonths() const;
    void setTotalMonths(const double &total_months);
    bool is_total_months_Set() const;
    bool is_total_months_Valid() const;

    double getTotalSeconds() const;
    void setTotalSeconds(const double &total_seconds);
    bool is_total_seconds_Set() const;
    bool is_total_seconds_Valid() const;

    double getTotalYears() const;
    void setTotalYears(const double &total_years);
    bool is_total_years_Set() const;
    bool is_total_years_Valid() const;

    double getYears() const;
    void setYears(const double &years);
    bool is_years_Set() const;
    bool is_years_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_days;
    bool m_days_isSet;
    bool m_days_isValid;

    double m_hours;
    bool m_hours_isSet;
    bool m_hours_isValid;

    double m_milliseconds;
    bool m_milliseconds_isSet;
    bool m_milliseconds_isValid;

    double m_minutes;
    bool m_minutes_isSet;
    bool m_minutes_isValid;

    double m_months;
    bool m_months_isSet;
    bool m_months_isValid;

    double m_ticks;
    bool m_ticks_isSet;
    bool m_ticks_isValid;

    double m_total_days;
    bool m_total_days_isSet;
    bool m_total_days_isValid;

    double m_total_hours;
    bool m_total_hours_isSet;
    bool m_total_hours_isValid;

    double m_total_milliseconds;
    bool m_total_milliseconds_isSet;
    bool m_total_milliseconds_isValid;

    double m_total_minutes;
    bool m_total_minutes_isSet;
    bool m_total_minutes_isValid;

    double m_total_months;
    bool m_total_months_isSet;
    bool m_total_months_isValid;

    double m_total_seconds;
    bool m_total_seconds_isSet;
    bool m_total_seconds_isValid;

    double m_total_years;
    bool m_total_years_isSet;
    bool m_total_years_isValid;

    double m_years;
    bool m_years_isSet;
    bool m_years_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOutputDateDifference)

#endif // OAIOutputDateDifference_H
