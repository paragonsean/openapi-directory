/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDecodeString_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDecodeString_request::OAIDecodeString_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDecodeString_request::OAIDecodeString_request() {
    this->initializeModel();
}

OAIDecodeString_request::~OAIDecodeString_request() {}

void OAIDecodeString_request::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIDecodeString_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDecodeString_request::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIDecodeString_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDecodeString_request::asJsonObject() const {
    QJsonObject obj;
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIDecodeString_request::getSource() const {
    return m_source;
}
void OAIDecodeString_request::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDecodeString_request::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDecodeString_request::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIDecodeString_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDecodeString_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && true;
}

} // namespace OpenAPI
