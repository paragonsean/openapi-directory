/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputDateInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputDateInfo::OAIOutputDateInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputDateInfo::OAIOutputDateInfo() {
    this->initializeModel();
}

OAIOutputDateInfo::~OAIOutputDateInfo() {}

void OAIOutputDateInfo::initializeModel() {

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_day_of_year_isSet = false;
    m_day_of_year_isValid = false;

    m_minutes_in_day_isSet = false;
    m_minutes_in_day_isValid = false;

    m_seconds_in_day_isSet = false;
    m_seconds_in_day_isValid = false;

    m_ticks_isSet = false;
    m_ticks_isValid = false;

    m_week_of_year_isSet = false;
    m_week_of_year_isValid = false;
}

void OAIOutputDateInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputDateInfo::fromJsonObject(QJsonObject json) {

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("DayOfWeek")]);
    m_day_of_week_isSet = !json[QString("DayOfWeek")].isNull() && m_day_of_week_isValid;

    m_day_of_year_isValid = ::OpenAPI::fromJsonValue(m_day_of_year, json[QString("DayOfYear")]);
    m_day_of_year_isSet = !json[QString("DayOfYear")].isNull() && m_day_of_year_isValid;

    m_minutes_in_day_isValid = ::OpenAPI::fromJsonValue(m_minutes_in_day, json[QString("MinutesInDay")]);
    m_minutes_in_day_isSet = !json[QString("MinutesInDay")].isNull() && m_minutes_in_day_isValid;

    m_seconds_in_day_isValid = ::OpenAPI::fromJsonValue(m_seconds_in_day, json[QString("SecondsInDay")]);
    m_seconds_in_day_isSet = !json[QString("SecondsInDay")].isNull() && m_seconds_in_day_isValid;

    m_ticks_isValid = ::OpenAPI::fromJsonValue(m_ticks, json[QString("Ticks")]);
    m_ticks_isSet = !json[QString("Ticks")].isNull() && m_ticks_isValid;

    m_week_of_year_isValid = ::OpenAPI::fromJsonValue(m_week_of_year, json[QString("WeekOfYear")]);
    m_week_of_year_isSet = !json[QString("WeekOfYear")].isNull() && m_week_of_year_isValid;
}

QString OAIOutputDateInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputDateInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_week_isSet) {
        obj.insert(QString("DayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_day_of_year_isSet) {
        obj.insert(QString("DayOfYear"), ::OpenAPI::toJsonValue(m_day_of_year));
    }
    if (m_minutes_in_day_isSet) {
        obj.insert(QString("MinutesInDay"), ::OpenAPI::toJsonValue(m_minutes_in_day));
    }
    if (m_seconds_in_day_isSet) {
        obj.insert(QString("SecondsInDay"), ::OpenAPI::toJsonValue(m_seconds_in_day));
    }
    if (m_ticks_isSet) {
        obj.insert(QString("Ticks"), ::OpenAPI::toJsonValue(m_ticks));
    }
    if (m_week_of_year_isSet) {
        obj.insert(QString("WeekOfYear"), ::OpenAPI::toJsonValue(m_week_of_year));
    }
    return obj;
}

double OAIOutputDateInfo::getDayOfWeek() const {
    return m_day_of_week;
}
void OAIOutputDateInfo::setDayOfWeek(const double &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAIOutputDateInfo::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAIOutputDateInfo::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

double OAIOutputDateInfo::getDayOfYear() const {
    return m_day_of_year;
}
void OAIOutputDateInfo::setDayOfYear(const double &day_of_year) {
    m_day_of_year = day_of_year;
    m_day_of_year_isSet = true;
}

bool OAIOutputDateInfo::is_day_of_year_Set() const{
    return m_day_of_year_isSet;
}

bool OAIOutputDateInfo::is_day_of_year_Valid() const{
    return m_day_of_year_isValid;
}

double OAIOutputDateInfo::getMinutesInDay() const {
    return m_minutes_in_day;
}
void OAIOutputDateInfo::setMinutesInDay(const double &minutes_in_day) {
    m_minutes_in_day = minutes_in_day;
    m_minutes_in_day_isSet = true;
}

bool OAIOutputDateInfo::is_minutes_in_day_Set() const{
    return m_minutes_in_day_isSet;
}

bool OAIOutputDateInfo::is_minutes_in_day_Valid() const{
    return m_minutes_in_day_isValid;
}

double OAIOutputDateInfo::getSecondsInDay() const {
    return m_seconds_in_day;
}
void OAIOutputDateInfo::setSecondsInDay(const double &seconds_in_day) {
    m_seconds_in_day = seconds_in_day;
    m_seconds_in_day_isSet = true;
}

bool OAIOutputDateInfo::is_seconds_in_day_Set() const{
    return m_seconds_in_day_isSet;
}

bool OAIOutputDateInfo::is_seconds_in_day_Valid() const{
    return m_seconds_in_day_isValid;
}

double OAIOutputDateInfo::getTicks() const {
    return m_ticks;
}
void OAIOutputDateInfo::setTicks(const double &ticks) {
    m_ticks = ticks;
    m_ticks_isSet = true;
}

bool OAIOutputDateInfo::is_ticks_Set() const{
    return m_ticks_isSet;
}

bool OAIOutputDateInfo::is_ticks_Valid() const{
    return m_ticks_isValid;
}

double OAIOutputDateInfo::getWeekOfYear() const {
    return m_week_of_year;
}
void OAIOutputDateInfo::setWeekOfYear(const double &week_of_year) {
    m_week_of_year = week_of_year;
    m_week_of_year_isSet = true;
}

bool OAIOutputDateInfo::is_week_of_year_Set() const{
    return m_week_of_year_isSet;
}

bool OAIOutputDateInfo::is_week_of_year_Valid() const{
    return m_week_of_year_isValid;
}

bool OAIOutputDateInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes_in_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seconds_in_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_of_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputDateInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
