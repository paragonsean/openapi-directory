/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputVerifyHash.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputVerifyHash::OAIInputVerifyHash(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputVerifyHash::OAIInputVerifyHash() {
    this->initializeModel();
}

OAIInputVerifyHash::~OAIInputVerifyHash() {}

void OAIInputVerifyHash::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;
}

void OAIInputVerifyHash::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputVerifyHash::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;
}

QString OAIInputVerifyHash::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputVerifyHash::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    return obj;
}

QString OAIInputVerifyHash::getAlgorithm() const {
    return m_algorithm;
}
void OAIInputVerifyHash::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIInputVerifyHash::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIInputVerifyHash::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

QString OAIInputVerifyHash::getHash() const {
    return m_hash;
}
void OAIInputVerifyHash::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIInputVerifyHash::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIInputVerifyHash::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAIInputVerifyHash::getInput() const {
    return m_input;
}
void OAIInputVerifyHash::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputVerifyHash::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputVerifyHash::is_input_Valid() const{
    return m_input_isValid;
}

bool OAIInputVerifyHash::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputVerifyHash::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_algorithm_isValid && m_hash_isValid && m_input_isValid && true;
}

} // namespace OpenAPI
