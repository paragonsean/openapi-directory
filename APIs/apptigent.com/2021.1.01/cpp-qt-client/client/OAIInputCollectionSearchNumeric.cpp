/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCollectionSearchNumeric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCollectionSearchNumeric::OAIInputCollectionSearchNumeric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCollectionSearchNumeric::OAIInputCollectionSearchNumeric() {
    this->initializeModel();
}

OAIInputCollectionSearchNumeric::~OAIInputCollectionSearchNumeric() {}

void OAIInputCollectionSearchNumeric::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIInputCollectionSearchNumeric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputCollectionSearchNumeric::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIInputCollectionSearchNumeric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputCollectionSearchNumeric::asJsonObject() const {
    QJsonObject obj;
    if (m_input.size() > 0) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_match_isSet) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<double> OAIInputCollectionSearchNumeric::getInput() const {
    return m_input;
}
void OAIInputCollectionSearchNumeric::setInput(const QList<double> &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputCollectionSearchNumeric::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputCollectionSearchNumeric::is_input_Valid() const{
    return m_input_isValid;
}

double OAIInputCollectionSearchNumeric::getMatch() const {
    return m_match;
}
void OAIInputCollectionSearchNumeric::setMatch(const double &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIInputCollectionSearchNumeric::is_match_Set() const{
    return m_match_isSet;
}

bool OAIInputCollectionSearchNumeric::is_match_Valid() const{
    return m_match_isValid;
}

QString OAIInputCollectionSearchNumeric::getType() const {
    return m_type;
}
void OAIInputCollectionSearchNumeric::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInputCollectionSearchNumeric::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInputCollectionSearchNumeric::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIInputCollectionSearchNumeric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputCollectionSearchNumeric::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_match_isValid && true;
}

} // namespace OpenAPI
