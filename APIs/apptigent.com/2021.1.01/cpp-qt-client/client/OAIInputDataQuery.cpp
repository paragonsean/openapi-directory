/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputDataQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputDataQuery::OAIInputDataQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputDataQuery::OAIInputDataQuery() {
    this->initializeModel();
}

OAIInputDataQuery::~OAIInputDataQuery() {}

void OAIInputDataQuery::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAIInputDataQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputDataQuery::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAIInputDataQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputDataQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

QString OAIInputDataQuery::getInput() const {
    return m_input;
}
void OAIInputDataQuery::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputDataQuery::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputDataQuery::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputDataQuery::getQuery() const {
    return m_query;
}
void OAIInputDataQuery::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIInputDataQuery::is_query_Set() const{
    return m_query_isSet;
}

bool OAIInputDataQuery::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIInputDataQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputDataQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_query_isValid && true;
}

} // namespace OpenAPI
