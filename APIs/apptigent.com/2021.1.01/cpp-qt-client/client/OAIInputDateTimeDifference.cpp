/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputDateTimeDifference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputDateTimeDifference::OAIInputDateTimeDifference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputDateTimeDifference::OAIInputDateTimeDifference() {
    this->initializeModel();
}

OAIInputDateTimeDifference::~OAIInputDateTimeDifference() {}

void OAIInputDateTimeDifference::initializeModel() {

    m_date_time1_isSet = false;
    m_date_time1_isValid = false;

    m_date_time2_isSet = false;
    m_date_time2_isValid = false;
}

void OAIInputDateTimeDifference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputDateTimeDifference::fromJsonObject(QJsonObject json) {

    m_date_time1_isValid = ::OpenAPI::fromJsonValue(m_date_time1, json[QString("dateTime1")]);
    m_date_time1_isSet = !json[QString("dateTime1")].isNull() && m_date_time1_isValid;

    m_date_time2_isValid = ::OpenAPI::fromJsonValue(m_date_time2, json[QString("dateTime2")]);
    m_date_time2_isSet = !json[QString("dateTime2")].isNull() && m_date_time2_isValid;
}

QString OAIInputDateTimeDifference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputDateTimeDifference::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time1_isSet) {
        obj.insert(QString("dateTime1"), ::OpenAPI::toJsonValue(m_date_time1));
    }
    if (m_date_time2_isSet) {
        obj.insert(QString("dateTime2"), ::OpenAPI::toJsonValue(m_date_time2));
    }
    return obj;
}

QString OAIInputDateTimeDifference::getDateTime1() const {
    return m_date_time1;
}
void OAIInputDateTimeDifference::setDateTime1(const QString &date_time1) {
    m_date_time1 = date_time1;
    m_date_time1_isSet = true;
}

bool OAIInputDateTimeDifference::is_date_time1_Set() const{
    return m_date_time1_isSet;
}

bool OAIInputDateTimeDifference::is_date_time1_Valid() const{
    return m_date_time1_isValid;
}

QString OAIInputDateTimeDifference::getDateTime2() const {
    return m_date_time2;
}
void OAIInputDateTimeDifference::setDateTime2(const QString &date_time2) {
    m_date_time2 = date_time2;
    m_date_time2_isSet = true;
}

bool OAIInputDateTimeDifference::is_date_time2_Set() const{
    return m_date_time2_isSet;
}

bool OAIInputDateTimeDifference::is_date_time2_Valid() const{
    return m_date_time2_isValid;
}

bool OAIInputDateTimeDifference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time2_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputDateTimeDifference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_time1_isValid && m_date_time2_isValid && true;
}

} // namespace OpenAPI
