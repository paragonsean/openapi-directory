/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputStringComparison.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputStringComparison::OAIInputStringComparison(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputStringComparison::OAIInputStringComparison() {
    this->initializeModel();
}

OAIInputStringComparison::~OAIInputStringComparison() {}

void OAIInputStringComparison::initializeModel() {

    m_compare_isSet = false;
    m_compare_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_lower_isSet = false;
    m_lower_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;
}

void OAIInputStringComparison::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputStringComparison::fromJsonObject(QJsonObject json) {

    m_compare_isValid = ::OpenAPI::fromJsonValue(m_compare, json[QString("compare")]);
    m_compare_isSet = !json[QString("compare")].isNull() && m_compare_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_lower_isValid = ::OpenAPI::fromJsonValue(m_lower, json[QString("lower")]);
    m_lower_isSet = !json[QString("lower")].isNull() && m_lower_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;
}

QString OAIInputStringComparison::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputStringComparison::asJsonObject() const {
    QJsonObject obj;
    if (m_compare_isSet) {
        obj.insert(QString("compare"), ::OpenAPI::toJsonValue(m_compare));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_lower_isSet) {
        obj.insert(QString("lower"), ::OpenAPI::toJsonValue(m_lower));
    }
    if (m_trim_isSet) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    return obj;
}

QString OAIInputStringComparison::getCompare() const {
    return m_compare;
}
void OAIInputStringComparison::setCompare(const QString &compare) {
    m_compare = compare;
    m_compare_isSet = true;
}

bool OAIInputStringComparison::is_compare_Set() const{
    return m_compare_isSet;
}

bool OAIInputStringComparison::is_compare_Valid() const{
    return m_compare_isValid;
}

QString OAIInputStringComparison::getInput() const {
    return m_input;
}
void OAIInputStringComparison::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputStringComparison::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputStringComparison::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIInputStringComparison::getLower() const {
    return m_lower;
}
void OAIInputStringComparison::setLower(const QString &lower) {
    m_lower = lower;
    m_lower_isSet = true;
}

bool OAIInputStringComparison::is_lower_Set() const{
    return m_lower_isSet;
}

bool OAIInputStringComparison::is_lower_Valid() const{
    return m_lower_isValid;
}

QString OAIInputStringComparison::getTrim() const {
    return m_trim;
}
void OAIInputStringComparison::setTrim(const QString &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAIInputStringComparison::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAIInputStringComparison::is_trim_Valid() const{
    return m_trim_isValid;
}

bool OAIInputStringComparison::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compare_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputStringComparison::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compare_isValid && m_input_isValid && m_lower_isValid && m_trim_isValid && true;
}

} // namespace OpenAPI
