/*
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlateDetails;
import org.openapitools.client.model.RecognizeFile200ResponseProcessingTime;
import org.openapitools.client.model.RegionOfInterest;
import org.openapitools.client.model.Vehicles;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RecognizeFile200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:20.471076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecognizeFile200Response {
  public static final String SERIALIZED_NAME_CREDIT_COST = "credit_cost";
  @SerializedName(SERIALIZED_NAME_CREDIT_COST)
  private Integer creditCost;

  public static final String SERIALIZED_NAME_CREDITS_MONTHLY_TOTAL = "credits_monthly_total";
  @SerializedName(SERIALIZED_NAME_CREDITS_MONTHLY_TOTAL)
  private Integer creditsMonthlyTotal;

  public static final String SERIALIZED_NAME_CREDITS_MONTHLY_USED = "credits_monthly_used";
  @SerializedName(SERIALIZED_NAME_CREDITS_MONTHLY_USED)
  private Integer creditsMonthlyUsed;

  /**
   * Specifies the type of data in this response
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    ALPR_RESULTS("alpr_results"),
    
    ALPR_GROUP("alpr_group"),
    
    HEARTBEAT("heartbeat");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_TYPE = "data_type";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private DataTypeEnum dataType;

  public static final String SERIALIZED_NAME_EPOCH_TIME = "epoch_time";
  @SerializedName(SERIALIZED_NAME_EPOCH_TIME)
  private BigDecimal epochTime;

  public static final String SERIALIZED_NAME_IMG_HEIGHT = "img_height";
  @SerializedName(SERIALIZED_NAME_IMG_HEIGHT)
  private Integer imgHeight;

  public static final String SERIALIZED_NAME_IMG_WIDTH = "img_width";
  @SerializedName(SERIALIZED_NAME_IMG_WIDTH)
  private Integer imgWidth;

  public static final String SERIALIZED_NAME_PROCESSING_TIME = "processing_time";
  @SerializedName(SERIALIZED_NAME_PROCESSING_TIME)
  private RecognizeFile200ResponseProcessingTime processingTime;

  public static final String SERIALIZED_NAME_REGIONS_OF_INTEREST = "regions_of_interest";
  @SerializedName(SERIALIZED_NAME_REGIONS_OF_INTEREST)
  private List<RegionOfInterest> regionsOfInterest = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<PlateDetails> results = new ArrayList<>();

  public static final String SERIALIZED_NAME_VEHICLES = "vehicles";
  @SerializedName(SERIALIZED_NAME_VEHICLES)
  private List<Vehicles> vehicles = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public RecognizeFile200Response() {
  }

  public RecognizeFile200Response creditCost(Integer creditCost) {
    this.creditCost = creditCost;
    return this;
  }

  /**
   * The number of API credits that were used to process this image
   * @return creditCost
   */
  @javax.annotation.Nullable
  public Integer getCreditCost() {
    return creditCost;
  }

  public void setCreditCost(Integer creditCost) {
    this.creditCost = creditCost;
  }


  public RecognizeFile200Response creditsMonthlyTotal(Integer creditsMonthlyTotal) {
    this.creditsMonthlyTotal = creditsMonthlyTotal;
    return this;
  }

  /**
   * The maximum number of API credits available this month according to your plan
   * @return creditsMonthlyTotal
   */
  @javax.annotation.Nullable
  public Integer getCreditsMonthlyTotal() {
    return creditsMonthlyTotal;
  }

  public void setCreditsMonthlyTotal(Integer creditsMonthlyTotal) {
    this.creditsMonthlyTotal = creditsMonthlyTotal;
  }


  public RecognizeFile200Response creditsMonthlyUsed(Integer creditsMonthlyUsed) {
    this.creditsMonthlyUsed = creditsMonthlyUsed;
    return this;
  }

  /**
   * The number of API credits used this month
   * @return creditsMonthlyUsed
   */
  @javax.annotation.Nullable
  public Integer getCreditsMonthlyUsed() {
    return creditsMonthlyUsed;
  }

  public void setCreditsMonthlyUsed(Integer creditsMonthlyUsed) {
    this.creditsMonthlyUsed = creditsMonthlyUsed;
  }


  public RecognizeFile200Response dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Specifies the type of data in this response
   * @return dataType
   */
  @javax.annotation.Nullable
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public RecognizeFile200Response epochTime(BigDecimal epochTime) {
    this.epochTime = epochTime;
    return this;
  }

  /**
   * Epoch time that the image was processed in milliseconds
   * @return epochTime
   */
  @javax.annotation.Nullable
  public BigDecimal getEpochTime() {
    return epochTime;
  }

  public void setEpochTime(BigDecimal epochTime) {
    this.epochTime = epochTime;
  }


  public RecognizeFile200Response imgHeight(Integer imgHeight) {
    this.imgHeight = imgHeight;
    return this;
  }

  /**
   * Height of the input image in pixels
   * @return imgHeight
   */
  @javax.annotation.Nullable
  public Integer getImgHeight() {
    return imgHeight;
  }

  public void setImgHeight(Integer imgHeight) {
    this.imgHeight = imgHeight;
  }


  public RecognizeFile200Response imgWidth(Integer imgWidth) {
    this.imgWidth = imgWidth;
    return this;
  }

  /**
   * Width of the uploaded image in pixels
   * @return imgWidth
   */
  @javax.annotation.Nullable
  public Integer getImgWidth() {
    return imgWidth;
  }

  public void setImgWidth(Integer imgWidth) {
    this.imgWidth = imgWidth;
  }


  public RecognizeFile200Response processingTime(RecognizeFile200ResponseProcessingTime processingTime) {
    this.processingTime = processingTime;
    return this;
  }

  /**
   * Get processingTime
   * @return processingTime
   */
  @javax.annotation.Nullable
  public RecognizeFile200ResponseProcessingTime getProcessingTime() {
    return processingTime;
  }

  public void setProcessingTime(RecognizeFile200ResponseProcessingTime processingTime) {
    this.processingTime = processingTime;
  }


  public RecognizeFile200Response regionsOfInterest(List<RegionOfInterest> regionsOfInterest) {
    this.regionsOfInterest = regionsOfInterest;
    return this;
  }

  public RecognizeFile200Response addRegionsOfInterestItem(RegionOfInterest regionsOfInterestItem) {
    if (this.regionsOfInterest == null) {
      this.regionsOfInterest = new ArrayList<>();
    }
    this.regionsOfInterest.add(regionsOfInterestItem);
    return this;
  }

  /**
   * Describes the areas analyzed in the input image
   * @return regionsOfInterest
   */
  @javax.annotation.Nullable
  public List<RegionOfInterest> getRegionsOfInterest() {
    return regionsOfInterest;
  }

  public void setRegionsOfInterest(List<RegionOfInterest> regionsOfInterest) {
    this.regionsOfInterest = regionsOfInterest;
  }


  public RecognizeFile200Response results(List<PlateDetails> results) {
    this.results = results;
    return this;
  }

  public RecognizeFile200Response addResultsItem(PlateDetails resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

  /**
   * Get results
   * @return results
   */
  @javax.annotation.Nullable
  public List<PlateDetails> getResults() {
    return results;
  }

  public void setResults(List<PlateDetails> results) {
    this.results = results;
  }


  public RecognizeFile200Response vehicles(List<Vehicles> vehicles) {
    this.vehicles = vehicles;
    return this;
  }

  public RecognizeFile200Response addVehiclesItem(Vehicles vehiclesItem) {
    if (this.vehicles == null) {
      this.vehicles = new ArrayList<>();
    }
    this.vehicles.add(vehiclesItem);
    return this;
  }

  /**
   * Describes all vehicles found in the input image
   * @return vehicles
   */
  @javax.annotation.Nullable
  public List<Vehicles> getVehicles() {
    return vehicles;
  }

  public void setVehicles(List<Vehicles> vehicles) {
    this.vehicles = vehicles;
  }


  public RecognizeFile200Response version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * API format version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecognizeFile200Response recognizeFile200Response = (RecognizeFile200Response) o;
    return Objects.equals(this.creditCost, recognizeFile200Response.creditCost) &&
        Objects.equals(this.creditsMonthlyTotal, recognizeFile200Response.creditsMonthlyTotal) &&
        Objects.equals(this.creditsMonthlyUsed, recognizeFile200Response.creditsMonthlyUsed) &&
        Objects.equals(this.dataType, recognizeFile200Response.dataType) &&
        Objects.equals(this.epochTime, recognizeFile200Response.epochTime) &&
        Objects.equals(this.imgHeight, recognizeFile200Response.imgHeight) &&
        Objects.equals(this.imgWidth, recognizeFile200Response.imgWidth) &&
        Objects.equals(this.processingTime, recognizeFile200Response.processingTime) &&
        Objects.equals(this.regionsOfInterest, recognizeFile200Response.regionsOfInterest) &&
        Objects.equals(this.results, recognizeFile200Response.results) &&
        Objects.equals(this.vehicles, recognizeFile200Response.vehicles) &&
        Objects.equals(this.version, recognizeFile200Response.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creditCost, creditsMonthlyTotal, creditsMonthlyUsed, dataType, epochTime, imgHeight, imgWidth, processingTime, regionsOfInterest, results, vehicles, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecognizeFile200Response {\n");
    sb.append("    creditCost: ").append(toIndentedString(creditCost)).append("\n");
    sb.append("    creditsMonthlyTotal: ").append(toIndentedString(creditsMonthlyTotal)).append("\n");
    sb.append("    creditsMonthlyUsed: ").append(toIndentedString(creditsMonthlyUsed)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    epochTime: ").append(toIndentedString(epochTime)).append("\n");
    sb.append("    imgHeight: ").append(toIndentedString(imgHeight)).append("\n");
    sb.append("    imgWidth: ").append(toIndentedString(imgWidth)).append("\n");
    sb.append("    processingTime: ").append(toIndentedString(processingTime)).append("\n");
    sb.append("    regionsOfInterest: ").append(toIndentedString(regionsOfInterest)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    vehicles: ").append(toIndentedString(vehicles)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("credit_cost");
    openapiFields.add("credits_monthly_total");
    openapiFields.add("credits_monthly_used");
    openapiFields.add("data_type");
    openapiFields.add("epoch_time");
    openapiFields.add("img_height");
    openapiFields.add("img_width");
    openapiFields.add("processing_time");
    openapiFields.add("regions_of_interest");
    openapiFields.add("results");
    openapiFields.add("vehicles");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecognizeFile200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecognizeFile200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecognizeFile200Response is not found in the empty JSON string", RecognizeFile200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecognizeFile200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecognizeFile200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("data_type") != null && !jsonObj.get("data_type").isJsonNull()) && !jsonObj.get("data_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_type").toString()));
      }
      // validate the optional field `data_type`
      if (jsonObj.get("data_type") != null && !jsonObj.get("data_type").isJsonNull()) {
        DataTypeEnum.validateJsonElement(jsonObj.get("data_type"));
      }
      // validate the optional field `processing_time`
      if (jsonObj.get("processing_time") != null && !jsonObj.get("processing_time").isJsonNull()) {
        RecognizeFile200ResponseProcessingTime.validateJsonElement(jsonObj.get("processing_time"));
      }
      if (jsonObj.get("regions_of_interest") != null && !jsonObj.get("regions_of_interest").isJsonNull()) {
        JsonArray jsonArrayregionsOfInterest = jsonObj.getAsJsonArray("regions_of_interest");
        if (jsonArrayregionsOfInterest != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regions_of_interest").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regions_of_interest` to be an array in the JSON string but got `%s`", jsonObj.get("regions_of_interest").toString()));
          }

          // validate the optional field `regions_of_interest` (array)
          for (int i = 0; i < jsonArrayregionsOfInterest.size(); i++) {
            RegionOfInterest.validateJsonElement(jsonArrayregionsOfInterest.get(i));
          };
        }
      }
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
        if (jsonArrayresults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
          }

          // validate the optional field `results` (array)
          for (int i = 0; i < jsonArrayresults.size(); i++) {
            PlateDetails.validateJsonElement(jsonArrayresults.get(i));
          };
        }
      }
      if (jsonObj.get("vehicles") != null && !jsonObj.get("vehicles").isJsonNull()) {
        JsonArray jsonArrayvehicles = jsonObj.getAsJsonArray("vehicles");
        if (jsonArrayvehicles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vehicles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vehicles` to be an array in the JSON string but got `%s`", jsonObj.get("vehicles").toString()));
          }

          // validate the optional field `vehicles` (array)
          for (int i = 0; i < jsonArrayvehicles.size(); i++) {
            Vehicles.validateJsonElement(jsonArrayvehicles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecognizeFile200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecognizeFile200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecognizeFile200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecognizeFile200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<RecognizeFile200Response>() {
           @Override
           public void write(JsonWriter out, RecognizeFile200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecognizeFile200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecognizeFile200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecognizeFile200Response
   * @throws IOException if the JSON string is invalid with respect to RecognizeFile200Response
   */
  public static RecognizeFile200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecognizeFile200Response.class);
  }

  /**
   * Convert an instance of RecognizeFile200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

