/*
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlateCandidate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:20.471076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlateCandidate {
  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private BigDecimal confidence;

  public static final String SERIALIZED_NAME_MATCHES_TEMPLATE = "matches_template";
  @SerializedName(SERIALIZED_NAME_MATCHES_TEMPLATE)
  private Integer matchesTemplate;

  public static final String SERIALIZED_NAME_PLATE = "plate";
  @SerializedName(SERIALIZED_NAME_PLATE)
  private String plate;

  public PlateCandidate() {
  }

  public PlateCandidate confidence(BigDecimal confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Confidence percentage that the plate number is correct
   * @return confidence
   */
  @javax.annotation.Nullable
  public BigDecimal getConfidence() {
    return confidence;
  }

  public void setConfidence(BigDecimal confidence) {
    this.confidence = confidence;
  }


  public PlateCandidate matchesTemplate(Integer matchesTemplate) {
    this.matchesTemplate = matchesTemplate;
    return this;
  }

  /**
   * Indicates whether the plate matched a regional text pattern
   * @return matchesTemplate
   */
  @javax.annotation.Nullable
  public Integer getMatchesTemplate() {
    return matchesTemplate;
  }

  public void setMatchesTemplate(Integer matchesTemplate) {
    this.matchesTemplate = matchesTemplate;
  }


  public PlateCandidate plate(String plate) {
    this.plate = plate;
    return this;
  }

  /**
   * Plate number
   * @return plate
   */
  @javax.annotation.Nullable
  public String getPlate() {
    return plate;
  }

  public void setPlate(String plate) {
    this.plate = plate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlateCandidate plateCandidate = (PlateCandidate) o;
    return Objects.equals(this.confidence, plateCandidate.confidence) &&
        Objects.equals(this.matchesTemplate, plateCandidate.matchesTemplate) &&
        Objects.equals(this.plate, plateCandidate.plate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidence, matchesTemplate, plate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlateCandidate {\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    matchesTemplate: ").append(toIndentedString(matchesTemplate)).append("\n");
    sb.append("    plate: ").append(toIndentedString(plate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidence");
    openapiFields.add("matches_template");
    openapiFields.add("plate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlateCandidate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlateCandidate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlateCandidate is not found in the empty JSON string", PlateCandidate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlateCandidate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlateCandidate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("plate") != null && !jsonObj.get("plate").isJsonNull()) && !jsonObj.get("plate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlateCandidate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlateCandidate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlateCandidate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlateCandidate.class));

       return (TypeAdapter<T>) new TypeAdapter<PlateCandidate>() {
           @Override
           public void write(JsonWriter out, PlateCandidate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlateCandidate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlateCandidate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlateCandidate
   * @throws IOException if the JSON string is invalid with respect to PlateCandidate
   */
  public static PlateCandidate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlateCandidate.class);
  }

  /**
   * Convert an instance of PlateCandidate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

