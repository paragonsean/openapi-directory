/*
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VehicleCandidate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VehicleDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:20.471076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VehicleDetails {
  public static final String SERIALIZED_NAME_BODY_TYPE = "body_type";
  @SerializedName(SERIALIZED_NAME_BODY_TYPE)
  private List<VehicleCandidate> bodyType = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private List<VehicleCandidate> color = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private List<VehicleCandidate> make = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAKE_MODEL = "make_model";
  @SerializedName(SERIALIZED_NAME_MAKE_MODEL)
  private List<VehicleCandidate> makeModel = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private List<VehicleCandidate> orientation = new ArrayList<>();

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private List<VehicleCandidate> year = new ArrayList<>();

  public VehicleDetails() {
  }

  public VehicleDetails bodyType(List<VehicleCandidate> bodyType) {
    this.bodyType = bodyType;
    return this;
  }

  public VehicleDetails addBodyTypeItem(VehicleCandidate bodyTypeItem) {
    if (this.bodyType == null) {
      this.bodyType = new ArrayList<>();
    }
    this.bodyType.add(bodyTypeItem);
    return this;
  }

  /**
   * Get bodyType
   * @return bodyType
   */
  @javax.annotation.Nullable
  public List<VehicleCandidate> getBodyType() {
    return bodyType;
  }

  public void setBodyType(List<VehicleCandidate> bodyType) {
    this.bodyType = bodyType;
  }


  public VehicleDetails color(List<VehicleCandidate> color) {
    this.color = color;
    return this;
  }

  public VehicleDetails addColorItem(VehicleCandidate colorItem) {
    if (this.color == null) {
      this.color = new ArrayList<>();
    }
    this.color.add(colorItem);
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public List<VehicleCandidate> getColor() {
    return color;
  }

  public void setColor(List<VehicleCandidate> color) {
    this.color = color;
  }


  public VehicleDetails make(List<VehicleCandidate> make) {
    this.make = make;
    return this;
  }

  public VehicleDetails addMakeItem(VehicleCandidate makeItem) {
    if (this.make == null) {
      this.make = new ArrayList<>();
    }
    this.make.add(makeItem);
    return this;
  }

  /**
   * Get make
   * @return make
   */
  @javax.annotation.Nullable
  public List<VehicleCandidate> getMake() {
    return make;
  }

  public void setMake(List<VehicleCandidate> make) {
    this.make = make;
  }


  public VehicleDetails makeModel(List<VehicleCandidate> makeModel) {
    this.makeModel = makeModel;
    return this;
  }

  public VehicleDetails addMakeModelItem(VehicleCandidate makeModelItem) {
    if (this.makeModel == null) {
      this.makeModel = new ArrayList<>();
    }
    this.makeModel.add(makeModelItem);
    return this;
  }

  /**
   * Get makeModel
   * @return makeModel
   */
  @javax.annotation.Nullable
  public List<VehicleCandidate> getMakeModel() {
    return makeModel;
  }

  public void setMakeModel(List<VehicleCandidate> makeModel) {
    this.makeModel = makeModel;
  }


  public VehicleDetails orientation(List<VehicleCandidate> orientation) {
    this.orientation = orientation;
    return this;
  }

  public VehicleDetails addOrientationItem(VehicleCandidate orientationItem) {
    if (this.orientation == null) {
      this.orientation = new ArrayList<>();
    }
    this.orientation.add(orientationItem);
    return this;
  }

  /**
   * Get orientation
   * @return orientation
   */
  @javax.annotation.Nullable
  public List<VehicleCandidate> getOrientation() {
    return orientation;
  }

  public void setOrientation(List<VehicleCandidate> orientation) {
    this.orientation = orientation;
  }


  public VehicleDetails year(List<VehicleCandidate> year) {
    this.year = year;
    return this;
  }

  public VehicleDetails addYearItem(VehicleCandidate yearItem) {
    if (this.year == null) {
      this.year = new ArrayList<>();
    }
    this.year.add(yearItem);
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public List<VehicleCandidate> getYear() {
    return year;
  }

  public void setYear(List<VehicleCandidate> year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VehicleDetails vehicleDetails = (VehicleDetails) o;
    return Objects.equals(this.bodyType, vehicleDetails.bodyType) &&
        Objects.equals(this.color, vehicleDetails.color) &&
        Objects.equals(this.make, vehicleDetails.make) &&
        Objects.equals(this.makeModel, vehicleDetails.makeModel) &&
        Objects.equals(this.orientation, vehicleDetails.orientation) &&
        Objects.equals(this.year, vehicleDetails.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodyType, color, make, makeModel, orientation, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VehicleDetails {\n");
    sb.append("    bodyType: ").append(toIndentedString(bodyType)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    makeModel: ").append(toIndentedString(makeModel)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body_type");
    openapiFields.add("color");
    openapiFields.add("make");
    openapiFields.add("make_model");
    openapiFields.add("orientation");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VehicleDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VehicleDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VehicleDetails is not found in the empty JSON string", VehicleDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VehicleDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VehicleDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("body_type") != null && !jsonObj.get("body_type").isJsonNull()) {
        JsonArray jsonArraybodyType = jsonObj.getAsJsonArray("body_type");
        if (jsonArraybodyType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("body_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `body_type` to be an array in the JSON string but got `%s`", jsonObj.get("body_type").toString()));
          }

          // validate the optional field `body_type` (array)
          for (int i = 0; i < jsonArraybodyType.size(); i++) {
            VehicleCandidate.validateJsonElement(jsonArraybodyType.get(i));
          };
        }
      }
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        JsonArray jsonArraycolor = jsonObj.getAsJsonArray("color");
        if (jsonArraycolor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `color` to be an array in the JSON string but got `%s`", jsonObj.get("color").toString()));
          }

          // validate the optional field `color` (array)
          for (int i = 0; i < jsonArraycolor.size(); i++) {
            VehicleCandidate.validateJsonElement(jsonArraycolor.get(i));
          };
        }
      }
      if (jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) {
        JsonArray jsonArraymake = jsonObj.getAsJsonArray("make");
        if (jsonArraymake != null) {
          // ensure the json data is an array
          if (!jsonObj.get("make").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `make` to be an array in the JSON string but got `%s`", jsonObj.get("make").toString()));
          }

          // validate the optional field `make` (array)
          for (int i = 0; i < jsonArraymake.size(); i++) {
            VehicleCandidate.validateJsonElement(jsonArraymake.get(i));
          };
        }
      }
      if (jsonObj.get("make_model") != null && !jsonObj.get("make_model").isJsonNull()) {
        JsonArray jsonArraymakeModel = jsonObj.getAsJsonArray("make_model");
        if (jsonArraymakeModel != null) {
          // ensure the json data is an array
          if (!jsonObj.get("make_model").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `make_model` to be an array in the JSON string but got `%s`", jsonObj.get("make_model").toString()));
          }

          // validate the optional field `make_model` (array)
          for (int i = 0; i < jsonArraymakeModel.size(); i++) {
            VehicleCandidate.validateJsonElement(jsonArraymakeModel.get(i));
          };
        }
      }
      if (jsonObj.get("orientation") != null && !jsonObj.get("orientation").isJsonNull()) {
        JsonArray jsonArrayorientation = jsonObj.getAsJsonArray("orientation");
        if (jsonArrayorientation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orientation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orientation` to be an array in the JSON string but got `%s`", jsonObj.get("orientation").toString()));
          }

          // validate the optional field `orientation` (array)
          for (int i = 0; i < jsonArrayorientation.size(); i++) {
            VehicleCandidate.validateJsonElement(jsonArrayorientation.get(i));
          };
        }
      }
      if (jsonObj.get("year") != null && !jsonObj.get("year").isJsonNull()) {
        JsonArray jsonArrayyear = jsonObj.getAsJsonArray("year");
        if (jsonArrayyear != null) {
          // ensure the json data is an array
          if (!jsonObj.get("year").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `year` to be an array in the JSON string but got `%s`", jsonObj.get("year").toString()));
          }

          // validate the optional field `year` (array)
          for (int i = 0; i < jsonArrayyear.size(); i++) {
            VehicleCandidate.validateJsonElement(jsonArrayyear.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VehicleDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VehicleDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VehicleDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VehicleDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VehicleDetails>() {
           @Override
           public void write(JsonWriter out, VehicleDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VehicleDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VehicleDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VehicleDetails
   * @throws IOException if the JSON string is invalid with respect to VehicleDetails
   */
  public static VehicleDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VehicleDetails.class);
  }

  /**
   * Convert an instance of VehicleDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

