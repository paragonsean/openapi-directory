/*
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.GetConfig200Response;
import org.openapitools.client.model.RecognizeFile200Response;
import org.openapitools.client.model.RecognizeFile400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getConfig
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getConfigCall(_callback);

    }

    /**
     * 
     * Get a list of available results for plate and vehicle recognition 
     * @return GetConfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public GetConfig200Response getConfig() throws ApiException {
        ApiResponse<GetConfig200Response> localVarResp = getConfigWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of available results for plate and vehicle recognition 
     * @return ApiResponse&lt;GetConfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetConfig200Response> getConfigWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getConfigValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of available results for plate and vehicle recognition 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigAsync(final ApiCallback<GetConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recognizeBytes
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  (required)
     * @param imageBytes The image file that you wish to analyze encoded in base64  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Ratelimit-Reset - Epoch time when the next period begins <br>  * X-Ratelimit-Remaining - Number of remaining requests allowed during this period <br>  * X-RateLimit-Limit - Maximum number of requests allowed from your IP in a period <br>  </td></tr>
        <tr><td> 400 </td><td> Parameter is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized or invalid secret_key </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Monthly usage limit exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Temporary rate-limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recognizeBytesCall(String secretKey, String country, String imageBytes, Integer recognizeVehicle, Integer returnImage, Integer topn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageBytes;

        // create path and map variables
        String localVarPath = "/recognize_bytes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret_key", secretKey));
        }

        if (recognizeVehicle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recognize_vehicle", recognizeVehicle));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (returnImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_image", returnImage));
        }

        if (topn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topn", topn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recognizeBytesValidateBeforeCall(String secretKey, String country, String imageBytes, Integer recognizeVehicle, Integer returnImage, Integer topn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling recognizeBytes(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling recognizeBytes(Async)");
        }

        // verify the required parameter 'imageBytes' is set
        if (imageBytes == null) {
            throw new ApiException("Missing the required parameter 'imageBytes' when calling recognizeBytes(Async)");
        }

        return recognizeBytesCall(secretKey, country, imageBytes, recognizeVehicle, returnImage, topn, _callback);

    }

    /**
     * 
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  (required)
     * @param imageBytes The image file that you wish to analyze encoded in base64  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @return RecognizeFile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Ratelimit-Reset - Epoch time when the next period begins <br>  * X-Ratelimit-Remaining - Number of remaining requests allowed during this period <br>  * X-RateLimit-Limit - Maximum number of requests allowed from your IP in a period <br>  </td></tr>
        <tr><td> 400 </td><td> Parameter is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized or invalid secret_key </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Monthly usage limit exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Temporary rate-limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public RecognizeFile200Response recognizeBytes(String secretKey, String country, String imageBytes, Integer recognizeVehicle, Integer returnImage, Integer topn) throws ApiException {
        ApiResponse<RecognizeFile200Response> localVarResp = recognizeBytesWithHttpInfo(secretKey, country, imageBytes, recognizeVehicle, returnImage, topn);
        return localVarResp.getData();
    }

    /**
     * 
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  (required)
     * @param imageBytes The image file that you wish to analyze encoded in base64  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @return ApiResponse&lt;RecognizeFile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Ratelimit-Reset - Epoch time when the next period begins <br>  * X-Ratelimit-Remaining - Number of remaining requests allowed during this period <br>  * X-RateLimit-Limit - Maximum number of requests allowed from your IP in a period <br>  </td></tr>
        <tr><td> 400 </td><td> Parameter is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized or invalid secret_key </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Monthly usage limit exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Temporary rate-limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecognizeFile200Response> recognizeBytesWithHttpInfo(String secretKey, String country, String imageBytes, Integer recognizeVehicle, Integer returnImage, Integer topn) throws ApiException {
        okhttp3.Call localVarCall = recognizeBytesValidateBeforeCall(secretKey, country, imageBytes, recognizeVehicle, returnImage, topn, null);
        Type localVarReturnType = new TypeToken<RecognizeFile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  (required)
     * @param imageBytes The image file that you wish to analyze encoded in base64  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Ratelimit-Reset - Epoch time when the next period begins <br>  * X-Ratelimit-Remaining - Number of remaining requests allowed during this period <br>  * X-RateLimit-Limit - Maximum number of requests allowed from your IP in a period <br>  </td></tr>
        <tr><td> 400 </td><td> Parameter is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized or invalid secret_key </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Monthly usage limit exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Temporary rate-limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recognizeBytesAsync(String secretKey, String country, String imageBytes, Integer recognizeVehicle, Integer returnImage, Integer topn, final ApiCallback<RecognizeFile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = recognizeBytesValidateBeforeCall(secretKey, country, imageBytes, recognizeVehicle, returnImage, topn, _callback);
        Type localVarReturnType = new TypeToken<RecognizeFile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recognizeFile
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  (required)
     * @param image The image file that you wish to analyze  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param isCropped When providing a plate or vehicle that is already cropped,   this performs a recognition against the full crop and does not  attempt to localize the plate/vehicle  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Ratelimit-Reset - Epoch time when the next period begins <br>  * X-Ratelimit-Remaining - Number of remaining requests allowed during this period <br>  * X-RateLimit-Limit - Maximum number of requests allowed from your IP in a period <br>  </td></tr>
        <tr><td> 400 </td><td> Parameter is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized or invalid secret_key </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Monthly usage limit exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Temporary rate-limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recognizeFileCall(String secretKey, String country, File image, Integer recognizeVehicle, Integer returnImage, Integer topn, Integer isCropped, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recognize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (image != null) {
            localVarFormParams.put("image", image);
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret_key", secretKey));
        }

        if (recognizeVehicle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recognize_vehicle", recognizeVehicle));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (returnImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_image", returnImage));
        }

        if (topn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topn", topn));
        }

        if (isCropped != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_cropped", isCropped));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recognizeFileValidateBeforeCall(String secretKey, String country, File image, Integer recognizeVehicle, Integer returnImage, Integer topn, Integer isCropped, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling recognizeFile(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling recognizeFile(Async)");
        }

        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling recognizeFile(Async)");
        }

        return recognizeFileCall(secretKey, country, image, recognizeVehicle, returnImage, topn, isCropped, _callback);

    }

    /**
     * 
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  (required)
     * @param image The image file that you wish to analyze  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param isCropped When providing a plate or vehicle that is already cropped,   this performs a recognition against the full crop and does not  attempt to localize the plate/vehicle  (optional, default to 0)
     * @return RecognizeFile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Ratelimit-Reset - Epoch time when the next period begins <br>  * X-Ratelimit-Remaining - Number of remaining requests allowed during this period <br>  * X-RateLimit-Limit - Maximum number of requests allowed from your IP in a period <br>  </td></tr>
        <tr><td> 400 </td><td> Parameter is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized or invalid secret_key </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Monthly usage limit exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Temporary rate-limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public RecognizeFile200Response recognizeFile(String secretKey, String country, File image, Integer recognizeVehicle, Integer returnImage, Integer topn, Integer isCropped) throws ApiException {
        ApiResponse<RecognizeFile200Response> localVarResp = recognizeFileWithHttpInfo(secretKey, country, image, recognizeVehicle, returnImage, topn, isCropped);
        return localVarResp.getData();
    }

    /**
     * 
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  (required)
     * @param image The image file that you wish to analyze  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param isCropped When providing a plate or vehicle that is already cropped,   this performs a recognition against the full crop and does not  attempt to localize the plate/vehicle  (optional, default to 0)
     * @return ApiResponse&lt;RecognizeFile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Ratelimit-Reset - Epoch time when the next period begins <br>  * X-Ratelimit-Remaining - Number of remaining requests allowed during this period <br>  * X-RateLimit-Limit - Maximum number of requests allowed from your IP in a period <br>  </td></tr>
        <tr><td> 400 </td><td> Parameter is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized or invalid secret_key </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Monthly usage limit exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Temporary rate-limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecognizeFile200Response> recognizeFileWithHttpInfo(String secretKey, String country, File image, Integer recognizeVehicle, Integer returnImage, Integer topn, Integer isCropped) throws ApiException {
        okhttp3.Call localVarCall = recognizeFileValidateBeforeCall(secretKey, country, image, recognizeVehicle, returnImage, topn, isCropped, null);
        Type localVarReturnType = new TypeToken<RecognizeFile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  (required)
     * @param image The image file that you wish to analyze  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param isCropped When providing a plate or vehicle that is already cropped,   this performs a recognition against the full crop and does not  attempt to localize the plate/vehicle  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Ratelimit-Reset - Epoch time when the next period begins <br>  * X-Ratelimit-Remaining - Number of remaining requests allowed during this period <br>  * X-RateLimit-Limit - Maximum number of requests allowed from your IP in a period <br>  </td></tr>
        <tr><td> 400 </td><td> Parameter is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized or invalid secret_key </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Monthly usage limit exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Temporary rate-limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recognizeFileAsync(String secretKey, String country, File image, Integer recognizeVehicle, Integer returnImage, Integer topn, Integer isCropped, final ApiCallback<RecognizeFile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = recognizeFileValidateBeforeCall(secretKey, country, image, recognizeVehicle, returnImage, topn, isCropped, _callback);
        Type localVarReturnType = new TypeToken<RecognizeFile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recognizeUrl
     * @param imageUrl A URL to an image that you wish to analyze  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Ratelimit-Reset - Epoch time when the next period begins <br>  * X-Ratelimit-Remaining - Number of remaining requests allowed during this period <br>  * X-RateLimit-Limit - Maximum number of requests allowed from your IP in a period <br>  </td></tr>
        <tr><td> 400 </td><td> Parameter is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized or invalid secret_key </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Monthly usage limit exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Temporary rate-limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recognizeUrlCall(String imageUrl, String secretKey, String country, Integer recognizeVehicle, Integer returnImage, Integer topn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recognize_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_url", imageUrl));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret_key", secretKey));
        }

        if (recognizeVehicle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recognize_vehicle", recognizeVehicle));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (returnImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_image", returnImage));
        }

        if (topn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topn", topn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recognizeUrlValidateBeforeCall(String imageUrl, String secretKey, String country, Integer recognizeVehicle, Integer returnImage, Integer topn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling recognizeUrl(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling recognizeUrl(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling recognizeUrl(Async)");
        }

        return recognizeUrlCall(imageUrl, secretKey, country, recognizeVehicle, returnImage, topn, _callback);

    }

    /**
     * 
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
     * @param imageUrl A URL to an image that you wish to analyze  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @return RecognizeFile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Ratelimit-Reset - Epoch time when the next period begins <br>  * X-Ratelimit-Remaining - Number of remaining requests allowed during this period <br>  * X-RateLimit-Limit - Maximum number of requests allowed from your IP in a period <br>  </td></tr>
        <tr><td> 400 </td><td> Parameter is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized or invalid secret_key </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Monthly usage limit exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Temporary rate-limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public RecognizeFile200Response recognizeUrl(String imageUrl, String secretKey, String country, Integer recognizeVehicle, Integer returnImage, Integer topn) throws ApiException {
        ApiResponse<RecognizeFile200Response> localVarResp = recognizeUrlWithHttpInfo(imageUrl, secretKey, country, recognizeVehicle, returnImage, topn);
        return localVarResp.getData();
    }

    /**
     * 
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
     * @param imageUrl A URL to an image that you wish to analyze  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @return ApiResponse&lt;RecognizeFile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Ratelimit-Reset - Epoch time when the next period begins <br>  * X-Ratelimit-Remaining - Number of remaining requests allowed during this period <br>  * X-RateLimit-Limit - Maximum number of requests allowed from your IP in a period <br>  </td></tr>
        <tr><td> 400 </td><td> Parameter is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized or invalid secret_key </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Monthly usage limit exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Temporary rate-limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecognizeFile200Response> recognizeUrlWithHttpInfo(String imageUrl, String secretKey, String country, Integer recognizeVehicle, Integer returnImage, Integer topn) throws ApiException {
        okhttp3.Call localVarCall = recognizeUrlValidateBeforeCall(imageUrl, secretKey, country, recognizeVehicle, returnImage, topn, null);
        Type localVarReturnType = new TypeToken<RecognizeFile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
     * @param imageUrl A URL to an image that you wish to analyze  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Ratelimit-Reset - Epoch time when the next period begins <br>  * X-Ratelimit-Remaining - Number of remaining requests allowed during this period <br>  * X-RateLimit-Limit - Maximum number of requests allowed from your IP in a period <br>  </td></tr>
        <tr><td> 400 </td><td> Parameter is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized or invalid secret_key </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Monthly usage limit exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Temporary rate-limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recognizeUrlAsync(String imageUrl, String secretKey, String country, Integer recognizeVehicle, Integer returnImage, Integer topn, final ApiCallback<RecognizeFile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = recognizeUrlValidateBeforeCall(imageUrl, secretKey, country, recognizeVehicle, returnImage, topn, _callback);
        Type localVarReturnType = new TypeToken<RecognizeFile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
