/*
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Coordinate;
import org.openapitools.client.model.PlateCandidate;
import org.openapitools.client.model.RegionOfInterest;
import org.openapitools.client.model.VehicleDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlateDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:20.471076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlateDetails {
  public static final String SERIALIZED_NAME_CANDIDATES = "candidates";
  @SerializedName(SERIALIZED_NAME_CANDIDATES)
  private List<PlateCandidate> candidates = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private BigDecimal confidence;

  public static final String SERIALIZED_NAME_COORDINATES = "coordinates";
  @SerializedName(SERIALIZED_NAME_COORDINATES)
  private List<Coordinate> coordinates = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATCHES_TEMPLATE = "matches_template";
  @SerializedName(SERIALIZED_NAME_MATCHES_TEMPLATE)
  private Integer matchesTemplate;

  public static final String SERIALIZED_NAME_PLATE = "plate";
  @SerializedName(SERIALIZED_NAME_PLATE)
  private String plate;

  public static final String SERIALIZED_NAME_PROCESSING_TIME_MS = "processing_time_ms";
  @SerializedName(SERIALIZED_NAME_PROCESSING_TIME_MS)
  private BigDecimal processingTimeMs;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_REGION_CONFIDENCE = "region_confidence";
  @SerializedName(SERIALIZED_NAME_REGION_CONFIDENCE)
  private BigDecimal regionConfidence;

  public static final String SERIALIZED_NAME_REQUESTED_TOPN = "requested_topn";
  @SerializedName(SERIALIZED_NAME_REQUESTED_TOPN)
  private Integer requestedTopn;

  public static final String SERIALIZED_NAME_VEHICLE = "vehicle";
  @SerializedName(SERIALIZED_NAME_VEHICLE)
  private VehicleDetails vehicle;

  public static final String SERIALIZED_NAME_VEHICLE_REGION = "vehicle_region";
  @SerializedName(SERIALIZED_NAME_VEHICLE_REGION)
  private RegionOfInterest vehicleRegion;

  public PlateDetails() {
  }

  public PlateDetails candidates(List<PlateCandidate> candidates) {
    this.candidates = candidates;
    return this;
  }

  public PlateDetails addCandidatesItem(PlateCandidate candidatesItem) {
    if (this.candidates == null) {
      this.candidates = new ArrayList<>();
    }
    this.candidates.add(candidatesItem);
    return this;
  }

  /**
   * All the top N candidates that could be the correct plate number
   * @return candidates
   */
  @javax.annotation.Nullable
  public List<PlateCandidate> getCandidates() {
    return candidates;
  }

  public void setCandidates(List<PlateCandidate> candidates) {
    this.candidates = candidates;
  }


  public PlateDetails confidence(BigDecimal confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Confidence percentage that the plate number is correct
   * @return confidence
   */
  @javax.annotation.Nullable
  public BigDecimal getConfidence() {
    return confidence;
  }

  public void setConfidence(BigDecimal confidence) {
    this.confidence = confidence;
  }


  public PlateDetails coordinates(List<Coordinate> coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  public PlateDetails addCoordinatesItem(Coordinate coordinatesItem) {
    if (this.coordinates == null) {
      this.coordinates = new ArrayList<>();
    }
    this.coordinates.add(coordinatesItem);
    return this;
  }

  /**
   * The X/Y coordinates of the license plate in the image Four coordinates are provided that form a polygon starting from the top-left and moving clockwise ending in the bottom left 
   * @return coordinates
   */
  @javax.annotation.Nullable
  public List<Coordinate> getCoordinates() {
    return coordinates;
  }

  public void setCoordinates(List<Coordinate> coordinates) {
    this.coordinates = coordinates;
  }


  public PlateDetails matchesTemplate(Integer matchesTemplate) {
    this.matchesTemplate = matchesTemplate;
    return this;
  }

  /**
   * Indicates whether the plate matched a regional text pattern
   * @return matchesTemplate
   */
  @javax.annotation.Nullable
  public Integer getMatchesTemplate() {
    return matchesTemplate;
  }

  public void setMatchesTemplate(Integer matchesTemplate) {
    this.matchesTemplate = matchesTemplate;
  }


  public PlateDetails plate(String plate) {
    this.plate = plate;
    return this;
  }

  /**
   * Best plate number for this plate
   * @return plate
   */
  @javax.annotation.Nullable
  public String getPlate() {
    return plate;
  }

  public void setPlate(String plate) {
    this.plate = plate;
  }


  public PlateDetails processingTimeMs(BigDecimal processingTimeMs) {
    this.processingTimeMs = processingTimeMs;
    return this;
  }

  /**
   * Number of milliseconds to process the license plate
   * @return processingTimeMs
   */
  @javax.annotation.Nullable
  public BigDecimal getProcessingTimeMs() {
    return processingTimeMs;
  }

  public void setProcessingTimeMs(BigDecimal processingTimeMs) {
    this.processingTimeMs = processingTimeMs;
  }


  public PlateDetails region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Specified or detected region (e.g., tx for Texas)
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public PlateDetails regionConfidence(BigDecimal regionConfidence) {
    this.regionConfidence = regionConfidence;
    return this;
  }

  /**
   * Confidence percentage that the plate region is correct
   * @return regionConfidence
   */
  @javax.annotation.Nullable
  public BigDecimal getRegionConfidence() {
    return regionConfidence;
  }

  public void setRegionConfidence(BigDecimal regionConfidence) {
    this.regionConfidence = regionConfidence;
  }


  public PlateDetails requestedTopn(Integer requestedTopn) {
    this.requestedTopn = requestedTopn;
    return this;
  }

  /**
   * The max number of results requested
   * @return requestedTopn
   */
  @javax.annotation.Nullable
  public Integer getRequestedTopn() {
    return requestedTopn;
  }

  public void setRequestedTopn(Integer requestedTopn) {
    this.requestedTopn = requestedTopn;
  }


  public PlateDetails vehicle(VehicleDetails vehicle) {
    this.vehicle = vehicle;
    return this;
  }

  /**
   * Get vehicle
   * @return vehicle
   */
  @javax.annotation.Nullable
  public VehicleDetails getVehicle() {
    return vehicle;
  }

  public void setVehicle(VehicleDetails vehicle) {
    this.vehicle = vehicle;
  }


  public PlateDetails vehicleRegion(RegionOfInterest vehicleRegion) {
    this.vehicleRegion = vehicleRegion;
    return this;
  }

  /**
   * Get vehicleRegion
   * @return vehicleRegion
   */
  @javax.annotation.Nullable
  public RegionOfInterest getVehicleRegion() {
    return vehicleRegion;
  }

  public void setVehicleRegion(RegionOfInterest vehicleRegion) {
    this.vehicleRegion = vehicleRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlateDetails plateDetails = (PlateDetails) o;
    return Objects.equals(this.candidates, plateDetails.candidates) &&
        Objects.equals(this.confidence, plateDetails.confidence) &&
        Objects.equals(this.coordinates, plateDetails.coordinates) &&
        Objects.equals(this.matchesTemplate, plateDetails.matchesTemplate) &&
        Objects.equals(this.plate, plateDetails.plate) &&
        Objects.equals(this.processingTimeMs, plateDetails.processingTimeMs) &&
        Objects.equals(this.region, plateDetails.region) &&
        Objects.equals(this.regionConfidence, plateDetails.regionConfidence) &&
        Objects.equals(this.requestedTopn, plateDetails.requestedTopn) &&
        Objects.equals(this.vehicle, plateDetails.vehicle) &&
        Objects.equals(this.vehicleRegion, plateDetails.vehicleRegion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidates, confidence, coordinates, matchesTemplate, plate, processingTimeMs, region, regionConfidence, requestedTopn, vehicle, vehicleRegion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlateDetails {\n");
    sb.append("    candidates: ").append(toIndentedString(candidates)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    matchesTemplate: ").append(toIndentedString(matchesTemplate)).append("\n");
    sb.append("    plate: ").append(toIndentedString(plate)).append("\n");
    sb.append("    processingTimeMs: ").append(toIndentedString(processingTimeMs)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    regionConfidence: ").append(toIndentedString(regionConfidence)).append("\n");
    sb.append("    requestedTopn: ").append(toIndentedString(requestedTopn)).append("\n");
    sb.append("    vehicle: ").append(toIndentedString(vehicle)).append("\n");
    sb.append("    vehicleRegion: ").append(toIndentedString(vehicleRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidates");
    openapiFields.add("confidence");
    openapiFields.add("coordinates");
    openapiFields.add("matches_template");
    openapiFields.add("plate");
    openapiFields.add("processing_time_ms");
    openapiFields.add("region");
    openapiFields.add("region_confidence");
    openapiFields.add("requested_topn");
    openapiFields.add("vehicle");
    openapiFields.add("vehicle_region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlateDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlateDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlateDetails is not found in the empty JSON string", PlateDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlateDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlateDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("candidates") != null && !jsonObj.get("candidates").isJsonNull()) {
        JsonArray jsonArraycandidates = jsonObj.getAsJsonArray("candidates");
        if (jsonArraycandidates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("candidates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `candidates` to be an array in the JSON string but got `%s`", jsonObj.get("candidates").toString()));
          }

          // validate the optional field `candidates` (array)
          for (int i = 0; i < jsonArraycandidates.size(); i++) {
            PlateCandidate.validateJsonElement(jsonArraycandidates.get(i));
          };
        }
      }
      if (jsonObj.get("coordinates") != null && !jsonObj.get("coordinates").isJsonNull()) {
        JsonArray jsonArraycoordinates = jsonObj.getAsJsonArray("coordinates");
        if (jsonArraycoordinates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("coordinates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `coordinates` to be an array in the JSON string but got `%s`", jsonObj.get("coordinates").toString()));
          }

          // validate the optional field `coordinates` (array)
          for (int i = 0; i < jsonArraycoordinates.size(); i++) {
            Coordinate.validateJsonElement(jsonArraycoordinates.get(i));
          };
        }
      }
      if ((jsonObj.get("plate") != null && !jsonObj.get("plate").isJsonNull()) && !jsonObj.get("plate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plate").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // validate the optional field `vehicle`
      if (jsonObj.get("vehicle") != null && !jsonObj.get("vehicle").isJsonNull()) {
        VehicleDetails.validateJsonElement(jsonObj.get("vehicle"));
      }
      // validate the optional field `vehicle_region`
      if (jsonObj.get("vehicle_region") != null && !jsonObj.get("vehicle_region").isJsonNull()) {
        RegionOfInterest.validateJsonElement(jsonObj.get("vehicle_region"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlateDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlateDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlateDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlateDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PlateDetails>() {
           @Override
           public void write(JsonWriter out, PlateDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlateDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlateDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlateDetails
   * @throws IOException if the JSON string is invalid with respect to PlateDetails
   */
  public static PlateDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlateDetails.class);
  }

  /**
   * Convert an instance of PlateDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

