/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Coordinate from './model/Coordinate';
import GetConfig200Response from './model/GetConfig200Response';
import GetConfig200ResponseCountriesInner from './model/GetConfig200ResponseCountriesInner';
import GetConfig200ResponseVehicleLabels from './model/GetConfig200ResponseVehicleLabels';
import PlateCandidate from './model/PlateCandidate';
import PlateDetails from './model/PlateDetails';
import RecognizeFile200Response from './model/RecognizeFile200Response';
import RecognizeFile200ResponseProcessingTime from './model/RecognizeFile200ResponseProcessingTime';
import RecognizeFile400Response from './model/RecognizeFile400Response';
import RegionOfInterest from './model/RegionOfInterest';
import VehicleCandidate from './model/VehicleCandidate';
import VehicleDetails from './model/VehicleDetails';
import Vehicles from './model/Vehicles';
import DefaultApi from './api/DefaultApi';


/**
* The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var OpenAlprCarCheckApi = require('index'); // See note below*.
* var xxxSvc = new OpenAlprCarCheckApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new OpenAlprCarCheckApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new OpenAlprCarCheckApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new OpenAlprCarCheckApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 3.0.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Coordinate model constructor.
     * @property {module:model/Coordinate}
     */
    Coordinate,

    /**
     * The GetConfig200Response model constructor.
     * @property {module:model/GetConfig200Response}
     */
    GetConfig200Response,

    /**
     * The GetConfig200ResponseCountriesInner model constructor.
     * @property {module:model/GetConfig200ResponseCountriesInner}
     */
    GetConfig200ResponseCountriesInner,

    /**
     * The GetConfig200ResponseVehicleLabels model constructor.
     * @property {module:model/GetConfig200ResponseVehicleLabels}
     */
    GetConfig200ResponseVehicleLabels,

    /**
     * The PlateCandidate model constructor.
     * @property {module:model/PlateCandidate}
     */
    PlateCandidate,

    /**
     * The PlateDetails model constructor.
     * @property {module:model/PlateDetails}
     */
    PlateDetails,

    /**
     * The RecognizeFile200Response model constructor.
     * @property {module:model/RecognizeFile200Response}
     */
    RecognizeFile200Response,

    /**
     * The RecognizeFile200ResponseProcessingTime model constructor.
     * @property {module:model/RecognizeFile200ResponseProcessingTime}
     */
    RecognizeFile200ResponseProcessingTime,

    /**
     * The RecognizeFile400Response model constructor.
     * @property {module:model/RecognizeFile400Response}
     */
    RecognizeFile400Response,

    /**
     * The RegionOfInterest model constructor.
     * @property {module:model/RegionOfInterest}
     */
    RegionOfInterest,

    /**
     * The VehicleCandidate model constructor.
     * @property {module:model/VehicleCandidate}
     */
    VehicleCandidate,

    /**
     * The VehicleDetails model constructor.
     * @property {module:model/VehicleDetails}
     */
    VehicleDetails,

    /**
     * The Vehicles model constructor.
     * @property {module:model/Vehicles}
     */
    Vehicles,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
