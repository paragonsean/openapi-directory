/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetConfig200Response from '../model/GetConfig200Response';
import RecognizeFile200Response from '../model/RecognizeFile200Response';
import RecognizeFile400Response from '../model/RecognizeFile400Response';

/**
* Default service.
* @module api/DefaultApi
* @version 3.0.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getConfig operation.
     * @callback module:api/DefaultApi~getConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfig200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of available results for plate and vehicle recognition 
     * @param {module:api/DefaultApi~getConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfig200Response}
     */
    getConfig(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfig200Response;
      return this.apiClient.callApi(
        '/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recognizeBytes operation.
     * @callback module:api/DefaultApi~recognizeBytesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecognizeFile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
     * @param {String} secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ 
     * @param {String} country Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task 
     * @param {String} imageBytes The image file that you wish to analyze encoded in base64 
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [recognizeVehicle = 0)] If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request 
     * @param {module:model/Number} [returnImage = 0)] If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response 
     * @param {Number} [topn = 10)] The number of results you would like to be returned for plate  candidates and vehicle classifications 
     * @param {module:api/DefaultApi~recognizeBytesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecognizeFile200Response}
     */
    recognizeBytes(secretKey, country, imageBytes, opts, callback) {
      opts = opts || {};
      let postBody = imageBytes;
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling recognizeBytes");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling recognizeBytes");
      }
      // verify the required parameter 'imageBytes' is set
      if (imageBytes === undefined || imageBytes === null) {
        throw new Error("Missing the required parameter 'imageBytes' when calling recognizeBytes");
      }

      let pathParams = {
      };
      let queryParams = {
        'secret_key': secretKey,
        'recognize_vehicle': opts['recognizeVehicle'],
        'country': country,
        'return_image': opts['returnImage'],
        'topn': opts['topn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecognizeFile200Response;
      return this.apiClient.callApi(
        '/recognize_bytes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recognizeFile operation.
     * @callback module:api/DefaultApi~recognizeFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecognizeFile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
     * @param {String} secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ 
     * @param {String} country Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task 
     * @param {File} image The image file that you wish to analyze 
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [recognizeVehicle = 0)] If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request 
     * @param {module:model/Number} [returnImage = 0)] If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response 
     * @param {Number} [topn = 10)] The number of results you would like to be returned for plate  candidates and vehicle classifications 
     * @param {module:model/Number} [isCropped = 0)] When providing a plate or vehicle that is already cropped,   this performs a recognition against the full crop and does not  attempt to localize the plate/vehicle 
     * @param {module:api/DefaultApi~recognizeFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecognizeFile200Response}
     */
    recognizeFile(secretKey, country, image, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling recognizeFile");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling recognizeFile");
      }
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling recognizeFile");
      }

      let pathParams = {
      };
      let queryParams = {
        'secret_key': secretKey,
        'recognize_vehicle': opts['recognizeVehicle'],
        'country': country,
        'return_image': opts['returnImage'],
        'topn': opts['topn'],
        'is_cropped': opts['isCropped']
      };
      let headerParams = {
      };
      let formParams = {
        'image': image
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = RecognizeFile200Response;
      return this.apiClient.callApi(
        '/recognize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recognizeUrl operation.
     * @callback module:api/DefaultApi~recognizeUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecognizeFile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
     * @param {String} imageUrl A URL to an image that you wish to analyze 
     * @param {String} secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ 
     * @param {String} country Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task 
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [recognizeVehicle = 0)] If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request 
     * @param {module:model/Number} [returnImage = 0)] If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response 
     * @param {Number} [topn = 10)] The number of results you would like to be returned for plate  candidates and vehicle classifications 
     * @param {module:api/DefaultApi~recognizeUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecognizeFile200Response}
     */
    recognizeUrl(imageUrl, secretKey, country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling recognizeUrl");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling recognizeUrl");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling recognizeUrl");
      }

      let pathParams = {
      };
      let queryParams = {
        'image_url': imageUrl,
        'secret_key': secretKey,
        'recognize_vehicle': opts['recognizeVehicle'],
        'country': country,
        'return_image': opts['returnImage'],
        'topn': opts['topn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecognizeFile200Response;
      return this.apiClient.callApi(
        '/recognize_url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
