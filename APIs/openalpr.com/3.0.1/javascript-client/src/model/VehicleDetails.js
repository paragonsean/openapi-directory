/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VehicleCandidate from './VehicleCandidate';

/**
 * The VehicleDetails model module.
 * @module model/VehicleDetails
 * @version 3.0.1
 */
class VehicleDetails {
    /**
     * Constructs a new <code>VehicleDetails</code>.
     * @alias module:model/VehicleDetails
     */
    constructor() { 
        
        VehicleDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VehicleDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VehicleDetails} obj Optional instance to populate.
     * @return {module:model/VehicleDetails} The populated <code>VehicleDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VehicleDetails();

            if (data.hasOwnProperty('body_type')) {
                obj['body_type'] = ApiClient.convertToType(data['body_type'], [VehicleCandidate]);
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], [VehicleCandidate]);
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], [VehicleCandidate]);
            }
            if (data.hasOwnProperty('make_model')) {
                obj['make_model'] = ApiClient.convertToType(data['make_model'], [VehicleCandidate]);
            }
            if (data.hasOwnProperty('orientation')) {
                obj['orientation'] = ApiClient.convertToType(data['orientation'], [VehicleCandidate]);
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], [VehicleCandidate]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VehicleDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VehicleDetails</code>.
     */
    static validateJSON(data) {
        if (data['body_type']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['body_type'])) {
                throw new Error("Expected the field `body_type` to be an array in the JSON data but got " + data['body_type']);
            }
            // validate the optional field `body_type` (array)
            for (const item of data['body_type']) {
                VehicleCandidate.validateJSON(item);
            };
        }
        if (data['color']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['color'])) {
                throw new Error("Expected the field `color` to be an array in the JSON data but got " + data['color']);
            }
            // validate the optional field `color` (array)
            for (const item of data['color']) {
                VehicleCandidate.validateJSON(item);
            };
        }
        if (data['make']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['make'])) {
                throw new Error("Expected the field `make` to be an array in the JSON data but got " + data['make']);
            }
            // validate the optional field `make` (array)
            for (const item of data['make']) {
                VehicleCandidate.validateJSON(item);
            };
        }
        if (data['make_model']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['make_model'])) {
                throw new Error("Expected the field `make_model` to be an array in the JSON data but got " + data['make_model']);
            }
            // validate the optional field `make_model` (array)
            for (const item of data['make_model']) {
                VehicleCandidate.validateJSON(item);
            };
        }
        if (data['orientation']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orientation'])) {
                throw new Error("Expected the field `orientation` to be an array in the JSON data but got " + data['orientation']);
            }
            // validate the optional field `orientation` (array)
            for (const item of data['orientation']) {
                VehicleCandidate.validateJSON(item);
            };
        }
        if (data['year']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['year'])) {
                throw new Error("Expected the field `year` to be an array in the JSON data but got " + data['year']);
            }
            // validate the optional field `year` (array)
            for (const item of data['year']) {
                VehicleCandidate.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/VehicleCandidate>} body_type
 */
VehicleDetails.prototype['body_type'] = undefined;

/**
 * @member {Array.<module:model/VehicleCandidate>} color
 */
VehicleDetails.prototype['color'] = undefined;

/**
 * @member {Array.<module:model/VehicleCandidate>} make
 */
VehicleDetails.prototype['make'] = undefined;

/**
 * @member {Array.<module:model/VehicleCandidate>} make_model
 */
VehicleDetails.prototype['make_model'] = undefined;

/**
 * @member {Array.<module:model/VehicleCandidate>} orientation
 */
VehicleDetails.prototype['orientation'] = undefined;

/**
 * @member {Array.<module:model/VehicleCandidate>} year
 */
VehicleDetails.prototype['year'] = undefined;






export default VehicleDetails;

