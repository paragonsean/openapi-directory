/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Coordinate from './Coordinate';
import PlateCandidate from './PlateCandidate';
import RegionOfInterest from './RegionOfInterest';
import VehicleDetails from './VehicleDetails';

/**
 * The PlateDetails model module.
 * @module model/PlateDetails
 * @version 3.0.1
 */
class PlateDetails {
    /**
     * Constructs a new <code>PlateDetails</code>.
     * @alias module:model/PlateDetails
     */
    constructor() { 
        
        PlateDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlateDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlateDetails} obj Optional instance to populate.
     * @return {module:model/PlateDetails} The populated <code>PlateDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlateDetails();

            if (data.hasOwnProperty('candidates')) {
                obj['candidates'] = ApiClient.convertToType(data['candidates'], [PlateCandidate]);
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = ApiClient.convertToType(data['coordinates'], [Coordinate]);
            }
            if (data.hasOwnProperty('matches_template')) {
                obj['matches_template'] = ApiClient.convertToType(data['matches_template'], 'Number');
            }
            if (data.hasOwnProperty('plate')) {
                obj['plate'] = ApiClient.convertToType(data['plate'], 'String');
            }
            if (data.hasOwnProperty('processing_time_ms')) {
                obj['processing_time_ms'] = ApiClient.convertToType(data['processing_time_ms'], 'Number');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('region_confidence')) {
                obj['region_confidence'] = ApiClient.convertToType(data['region_confidence'], 'Number');
            }
            if (data.hasOwnProperty('requested_topn')) {
                obj['requested_topn'] = ApiClient.convertToType(data['requested_topn'], 'Number');
            }
            if (data.hasOwnProperty('vehicle')) {
                obj['vehicle'] = VehicleDetails.constructFromObject(data['vehicle']);
            }
            if (data.hasOwnProperty('vehicle_region')) {
                obj['vehicle_region'] = RegionOfInterest.constructFromObject(data['vehicle_region']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlateDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlateDetails</code>.
     */
    static validateJSON(data) {
        if (data['candidates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['candidates'])) {
                throw new Error("Expected the field `candidates` to be an array in the JSON data but got " + data['candidates']);
            }
            // validate the optional field `candidates` (array)
            for (const item of data['candidates']) {
                PlateCandidate.validateJSON(item);
            };
        }
        if (data['coordinates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['coordinates'])) {
                throw new Error("Expected the field `coordinates` to be an array in the JSON data but got " + data['coordinates']);
            }
            // validate the optional field `coordinates` (array)
            for (const item of data['coordinates']) {
                Coordinate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['plate'] && !(typeof data['plate'] === 'string' || data['plate'] instanceof String)) {
            throw new Error("Expected the field `plate` to be a primitive type in the JSON string but got " + data['plate']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // validate the optional field `vehicle`
        if (data['vehicle']) { // data not null
          VehicleDetails.validateJSON(data['vehicle']);
        }
        // validate the optional field `vehicle_region`
        if (data['vehicle_region']) { // data not null
          RegionOfInterest.validateJSON(data['vehicle_region']);
        }

        return true;
    }


}



/**
 * All the top N candidates that could be the correct plate number
 * @member {Array.<module:model/PlateCandidate>} candidates
 */
PlateDetails.prototype['candidates'] = undefined;

/**
 * Confidence percentage that the plate number is correct
 * @member {Number} confidence
 */
PlateDetails.prototype['confidence'] = undefined;

/**
 * The X/Y coordinates of the license plate in the image Four coordinates are provided that form a polygon starting from the top-left and moving clockwise ending in the bottom left 
 * @member {Array.<module:model/Coordinate>} coordinates
 */
PlateDetails.prototype['coordinates'] = undefined;

/**
 * Indicates whether the plate matched a regional text pattern
 * @member {Number} matches_template
 */
PlateDetails.prototype['matches_template'] = undefined;

/**
 * Best plate number for this plate
 * @member {String} plate
 */
PlateDetails.prototype['plate'] = undefined;

/**
 * Number of milliseconds to process the license plate
 * @member {Number} processing_time_ms
 */
PlateDetails.prototype['processing_time_ms'] = undefined;

/**
 * Specified or detected region (e.g., tx for Texas)
 * @member {String} region
 */
PlateDetails.prototype['region'] = undefined;

/**
 * Confidence percentage that the plate region is correct
 * @member {Number} region_confidence
 */
PlateDetails.prototype['region_confidence'] = undefined;

/**
 * The max number of results requested
 * @member {Number} requested_topn
 */
PlateDetails.prototype['requested_topn'] = undefined;

/**
 * @member {module:model/VehicleDetails} vehicle
 */
PlateDetails.prototype['vehicle'] = undefined;

/**
 * @member {module:model/RegionOfInterest} vehicle_region
 */
PlateDetails.prototype['vehicle_region'] = undefined;






export default PlateDetails;

