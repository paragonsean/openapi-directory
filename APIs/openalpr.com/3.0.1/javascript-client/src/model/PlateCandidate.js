/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlateCandidate model module.
 * @module model/PlateCandidate
 * @version 3.0.1
 */
class PlateCandidate {
    /**
     * Constructs a new <code>PlateCandidate</code>.
     * @alias module:model/PlateCandidate
     */
    constructor() { 
        
        PlateCandidate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlateCandidate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlateCandidate} obj Optional instance to populate.
     * @return {module:model/PlateCandidate} The populated <code>PlateCandidate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlateCandidate();

            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('matches_template')) {
                obj['matches_template'] = ApiClient.convertToType(data['matches_template'], 'Number');
            }
            if (data.hasOwnProperty('plate')) {
                obj['plate'] = ApiClient.convertToType(data['plate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlateCandidate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlateCandidate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['plate'] && !(typeof data['plate'] === 'string' || data['plate'] instanceof String)) {
            throw new Error("Expected the field `plate` to be a primitive type in the JSON string but got " + data['plate']);
        }

        return true;
    }


}



/**
 * Confidence percentage that the plate number is correct
 * @member {Number} confidence
 */
PlateCandidate.prototype['confidence'] = undefined;

/**
 * Indicates whether the plate matched a regional text pattern
 * @member {Number} matches_template
 */
PlateCandidate.prototype['matches_template'] = undefined;

/**
 * Plate number
 * @member {String} plate
 */
PlateCandidate.prototype['plate'] = undefined;






export default PlateCandidate;

