/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlateDetails from './PlateDetails';
import RecognizeFile200ResponseProcessingTime from './RecognizeFile200ResponseProcessingTime';
import RegionOfInterest from './RegionOfInterest';
import Vehicles from './Vehicles';

/**
 * The RecognizeFile200Response model module.
 * @module model/RecognizeFile200Response
 * @version 3.0.1
 */
class RecognizeFile200Response {
    /**
     * Constructs a new <code>RecognizeFile200Response</code>.
     * @alias module:model/RecognizeFile200Response
     */
    constructor() { 
        
        RecognizeFile200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecognizeFile200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecognizeFile200Response} obj Optional instance to populate.
     * @return {module:model/RecognizeFile200Response} The populated <code>RecognizeFile200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecognizeFile200Response();

            if (data.hasOwnProperty('credit_cost')) {
                obj['credit_cost'] = ApiClient.convertToType(data['credit_cost'], 'Number');
            }
            if (data.hasOwnProperty('credits_monthly_total')) {
                obj['credits_monthly_total'] = ApiClient.convertToType(data['credits_monthly_total'], 'Number');
            }
            if (data.hasOwnProperty('credits_monthly_used')) {
                obj['credits_monthly_used'] = ApiClient.convertToType(data['credits_monthly_used'], 'Number');
            }
            if (data.hasOwnProperty('data_type')) {
                obj['data_type'] = ApiClient.convertToType(data['data_type'], 'String');
            }
            if (data.hasOwnProperty('epoch_time')) {
                obj['epoch_time'] = ApiClient.convertToType(data['epoch_time'], 'Number');
            }
            if (data.hasOwnProperty('img_height')) {
                obj['img_height'] = ApiClient.convertToType(data['img_height'], 'Number');
            }
            if (data.hasOwnProperty('img_width')) {
                obj['img_width'] = ApiClient.convertToType(data['img_width'], 'Number');
            }
            if (data.hasOwnProperty('processing_time')) {
                obj['processing_time'] = RecognizeFile200ResponseProcessingTime.constructFromObject(data['processing_time']);
            }
            if (data.hasOwnProperty('regions_of_interest')) {
                obj['regions_of_interest'] = ApiClient.convertToType(data['regions_of_interest'], [RegionOfInterest]);
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [PlateDetails]);
            }
            if (data.hasOwnProperty('vehicles')) {
                obj['vehicles'] = ApiClient.convertToType(data['vehicles'], [Vehicles]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecognizeFile200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecognizeFile200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['data_type'] && !(typeof data['data_type'] === 'string' || data['data_type'] instanceof String)) {
            throw new Error("Expected the field `data_type` to be a primitive type in the JSON string but got " + data['data_type']);
        }
        // validate the optional field `processing_time`
        if (data['processing_time']) { // data not null
          RecognizeFile200ResponseProcessingTime.validateJSON(data['processing_time']);
        }
        if (data['regions_of_interest']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regions_of_interest'])) {
                throw new Error("Expected the field `regions_of_interest` to be an array in the JSON data but got " + data['regions_of_interest']);
            }
            // validate the optional field `regions_of_interest` (array)
            for (const item of data['regions_of_interest']) {
                RegionOfInterest.validateJSON(item);
            };
        }
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                PlateDetails.validateJSON(item);
            };
        }
        if (data['vehicles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vehicles'])) {
                throw new Error("Expected the field `vehicles` to be an array in the JSON data but got " + data['vehicles']);
            }
            // validate the optional field `vehicles` (array)
            for (const item of data['vehicles']) {
                Vehicles.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The number of API credits that were used to process this image
 * @member {Number} credit_cost
 */
RecognizeFile200Response.prototype['credit_cost'] = undefined;

/**
 * The maximum number of API credits available this month according to your plan
 * @member {Number} credits_monthly_total
 */
RecognizeFile200Response.prototype['credits_monthly_total'] = undefined;

/**
 * The number of API credits used this month
 * @member {Number} credits_monthly_used
 */
RecognizeFile200Response.prototype['credits_monthly_used'] = undefined;

/**
 * Specifies the type of data in this response
 * @member {module:model/RecognizeFile200Response.DataTypeEnum} data_type
 */
RecognizeFile200Response.prototype['data_type'] = undefined;

/**
 * Epoch time that the image was processed in milliseconds
 * @member {Number} epoch_time
 */
RecognizeFile200Response.prototype['epoch_time'] = undefined;

/**
 * Height of the input image in pixels
 * @member {Number} img_height
 */
RecognizeFile200Response.prototype['img_height'] = undefined;

/**
 * Width of the uploaded image in pixels
 * @member {Number} img_width
 */
RecognizeFile200Response.prototype['img_width'] = undefined;

/**
 * @member {module:model/RecognizeFile200ResponseProcessingTime} processing_time
 */
RecognizeFile200Response.prototype['processing_time'] = undefined;

/**
 * Describes the areas analyzed in the input image
 * @member {Array.<module:model/RegionOfInterest>} regions_of_interest
 */
RecognizeFile200Response.prototype['regions_of_interest'] = undefined;

/**
 * @member {Array.<module:model/PlateDetails>} results
 */
RecognizeFile200Response.prototype['results'] = undefined;

/**
 * Describes all vehicles found in the input image
 * @member {Array.<module:model/Vehicles>} vehicles
 */
RecognizeFile200Response.prototype['vehicles'] = undefined;

/**
 * API format version
 * @member {Number} version
 */
RecognizeFile200Response.prototype['version'] = undefined;





/**
 * Allowed values for the <code>data_type</code> property.
 * @enum {String}
 * @readonly
 */
RecognizeFile200Response['DataTypeEnum'] = {

    /**
     * value: "alpr_results"
     * @const
     */
    "alpr_results": "alpr_results",

    /**
     * value: "alpr_group"
     * @const
     */
    "alpr_group": "alpr_group",

    /**
     * value: "heartbeat"
     * @const
     */
    "heartbeat": "heartbeat"
};



export default RecognizeFile200Response;

