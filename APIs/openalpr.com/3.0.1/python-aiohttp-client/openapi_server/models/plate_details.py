# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.coordinate import Coordinate
from openapi_server.models.plate_candidate import PlateCandidate
from openapi_server.models.region_of_interest import RegionOfInterest
from openapi_server.models.vehicle_details import VehicleDetails
from openapi_server import util


class PlateDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidates: List[PlateCandidate]=None, confidence: float=None, coordinates: List[Coordinate]=None, matches_template: int=None, plate: str=None, processing_time_ms: float=None, region: str=None, region_confidence: float=None, requested_topn: int=None, vehicle: VehicleDetails=None, vehicle_region: RegionOfInterest=None):
        """PlateDetails - a model defined in OpenAPI

        :param candidates: The candidates of this PlateDetails.
        :param confidence: The confidence of this PlateDetails.
        :param coordinates: The coordinates of this PlateDetails.
        :param matches_template: The matches_template of this PlateDetails.
        :param plate: The plate of this PlateDetails.
        :param processing_time_ms: The processing_time_ms of this PlateDetails.
        :param region: The region of this PlateDetails.
        :param region_confidence: The region_confidence of this PlateDetails.
        :param requested_topn: The requested_topn of this PlateDetails.
        :param vehicle: The vehicle of this PlateDetails.
        :param vehicle_region: The vehicle_region of this PlateDetails.
        """
        self.openapi_types = {
            'candidates': List[PlateCandidate],
            'confidence': float,
            'coordinates': List[Coordinate],
            'matches_template': int,
            'plate': str,
            'processing_time_ms': float,
            'region': str,
            'region_confidence': float,
            'requested_topn': int,
            'vehicle': VehicleDetails,
            'vehicle_region': RegionOfInterest
        }

        self.attribute_map = {
            'candidates': 'candidates',
            'confidence': 'confidence',
            'coordinates': 'coordinates',
            'matches_template': 'matches_template',
            'plate': 'plate',
            'processing_time_ms': 'processing_time_ms',
            'region': 'region',
            'region_confidence': 'region_confidence',
            'requested_topn': 'requested_topn',
            'vehicle': 'vehicle',
            'vehicle_region': 'vehicle_region'
        }

        self._candidates = candidates
        self._confidence = confidence
        self._coordinates = coordinates
        self._matches_template = matches_template
        self._plate = plate
        self._processing_time_ms = processing_time_ms
        self._region = region
        self._region_confidence = region_confidence
        self._requested_topn = requested_topn
        self._vehicle = vehicle
        self._vehicle_region = vehicle_region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlateDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The plate_details of this PlateDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidates(self):
        """Gets the candidates of this PlateDetails.

        All the top N candidates that could be the correct plate number

        :return: The candidates of this PlateDetails.
        :rtype: List[PlateCandidate]
        """
        return self._candidates

    @candidates.setter
    def candidates(self, candidates):
        """Sets the candidates of this PlateDetails.

        All the top N candidates that could be the correct plate number

        :param candidates: The candidates of this PlateDetails.
        :type candidates: List[PlateCandidate]
        """

        self._candidates = candidates

    @property
    def confidence(self):
        """Gets the confidence of this PlateDetails.

        Confidence percentage that the plate number is correct

        :return: The confidence of this PlateDetails.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this PlateDetails.

        Confidence percentage that the plate number is correct

        :param confidence: The confidence of this PlateDetails.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def coordinates(self):
        """Gets the coordinates of this PlateDetails.

        The X/Y coordinates of the license plate in the image Four coordinates are provided that form a polygon starting from the top-left and moving clockwise ending in the bottom left 

        :return: The coordinates of this PlateDetails.
        :rtype: List[Coordinate]
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this PlateDetails.

        The X/Y coordinates of the license plate in the image Four coordinates are provided that form a polygon starting from the top-left and moving clockwise ending in the bottom left 

        :param coordinates: The coordinates of this PlateDetails.
        :type coordinates: List[Coordinate]
        """

        self._coordinates = coordinates

    @property
    def matches_template(self):
        """Gets the matches_template of this PlateDetails.

        Indicates whether the plate matched a regional text pattern

        :return: The matches_template of this PlateDetails.
        :rtype: int
        """
        return self._matches_template

    @matches_template.setter
    def matches_template(self, matches_template):
        """Sets the matches_template of this PlateDetails.

        Indicates whether the plate matched a regional text pattern

        :param matches_template: The matches_template of this PlateDetails.
        :type matches_template: int
        """

        self._matches_template = matches_template

    @property
    def plate(self):
        """Gets the plate of this PlateDetails.

        Best plate number for this plate

        :return: The plate of this PlateDetails.
        :rtype: str
        """
        return self._plate

    @plate.setter
    def plate(self, plate):
        """Sets the plate of this PlateDetails.

        Best plate number for this plate

        :param plate: The plate of this PlateDetails.
        :type plate: str
        """

        self._plate = plate

    @property
    def processing_time_ms(self):
        """Gets the processing_time_ms of this PlateDetails.

        Number of milliseconds to process the license plate

        :return: The processing_time_ms of this PlateDetails.
        :rtype: float
        """
        return self._processing_time_ms

    @processing_time_ms.setter
    def processing_time_ms(self, processing_time_ms):
        """Sets the processing_time_ms of this PlateDetails.

        Number of milliseconds to process the license plate

        :param processing_time_ms: The processing_time_ms of this PlateDetails.
        :type processing_time_ms: float
        """

        self._processing_time_ms = processing_time_ms

    @property
    def region(self):
        """Gets the region of this PlateDetails.

        Specified or detected region (e.g., tx for Texas)

        :return: The region of this PlateDetails.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this PlateDetails.

        Specified or detected region (e.g., tx for Texas)

        :param region: The region of this PlateDetails.
        :type region: str
        """

        self._region = region

    @property
    def region_confidence(self):
        """Gets the region_confidence of this PlateDetails.

        Confidence percentage that the plate region is correct

        :return: The region_confidence of this PlateDetails.
        :rtype: float
        """
        return self._region_confidence

    @region_confidence.setter
    def region_confidence(self, region_confidence):
        """Sets the region_confidence of this PlateDetails.

        Confidence percentage that the plate region is correct

        :param region_confidence: The region_confidence of this PlateDetails.
        :type region_confidence: float
        """

        self._region_confidence = region_confidence

    @property
    def requested_topn(self):
        """Gets the requested_topn of this PlateDetails.

        The max number of results requested

        :return: The requested_topn of this PlateDetails.
        :rtype: int
        """
        return self._requested_topn

    @requested_topn.setter
    def requested_topn(self, requested_topn):
        """Sets the requested_topn of this PlateDetails.

        The max number of results requested

        :param requested_topn: The requested_topn of this PlateDetails.
        :type requested_topn: int
        """

        self._requested_topn = requested_topn

    @property
    def vehicle(self):
        """Gets the vehicle of this PlateDetails.


        :return: The vehicle of this PlateDetails.
        :rtype: VehicleDetails
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this PlateDetails.


        :param vehicle: The vehicle of this PlateDetails.
        :type vehicle: VehicleDetails
        """

        self._vehicle = vehicle

    @property
    def vehicle_region(self):
        """Gets the vehicle_region of this PlateDetails.


        :return: The vehicle_region of this PlateDetails.
        :rtype: RegionOfInterest
        """
        return self._vehicle_region

    @vehicle_region.setter
    def vehicle_region(self, vehicle_region):
        """Sets the vehicle_region of this PlateDetails.


        :param vehicle_region: The vehicle_region of this PlateDetails.
        :type vehicle_region: RegionOfInterest
        """

        self._vehicle_region = vehicle_region
