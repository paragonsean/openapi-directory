# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plate_details import PlateDetails
from openapi_server.models.recognize_file200_response_processing_time import RecognizeFile200ResponseProcessingTime
from openapi_server.models.region_of_interest import RegionOfInterest
from openapi_server.models.vehicles import Vehicles
from openapi_server import util


class RecognizeFile200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credit_cost: int=None, credits_monthly_total: int=None, credits_monthly_used: int=None, data_type: str=None, epoch_time: float=None, img_height: int=None, img_width: int=None, processing_time: RecognizeFile200ResponseProcessingTime=None, regions_of_interest: List[RegionOfInterest]=None, results: List[PlateDetails]=None, vehicles: List[Vehicles]=None, version: int=None):
        """RecognizeFile200Response - a model defined in OpenAPI

        :param credit_cost: The credit_cost of this RecognizeFile200Response.
        :param credits_monthly_total: The credits_monthly_total of this RecognizeFile200Response.
        :param credits_monthly_used: The credits_monthly_used of this RecognizeFile200Response.
        :param data_type: The data_type of this RecognizeFile200Response.
        :param epoch_time: The epoch_time of this RecognizeFile200Response.
        :param img_height: The img_height of this RecognizeFile200Response.
        :param img_width: The img_width of this RecognizeFile200Response.
        :param processing_time: The processing_time of this RecognizeFile200Response.
        :param regions_of_interest: The regions_of_interest of this RecognizeFile200Response.
        :param results: The results of this RecognizeFile200Response.
        :param vehicles: The vehicles of this RecognizeFile200Response.
        :param version: The version of this RecognizeFile200Response.
        """
        self.openapi_types = {
            'credit_cost': int,
            'credits_monthly_total': int,
            'credits_monthly_used': int,
            'data_type': str,
            'epoch_time': float,
            'img_height': int,
            'img_width': int,
            'processing_time': RecognizeFile200ResponseProcessingTime,
            'regions_of_interest': List[RegionOfInterest],
            'results': List[PlateDetails],
            'vehicles': List[Vehicles],
            'version': int
        }

        self.attribute_map = {
            'credit_cost': 'credit_cost',
            'credits_monthly_total': 'credits_monthly_total',
            'credits_monthly_used': 'credits_monthly_used',
            'data_type': 'data_type',
            'epoch_time': 'epoch_time',
            'img_height': 'img_height',
            'img_width': 'img_width',
            'processing_time': 'processing_time',
            'regions_of_interest': 'regions_of_interest',
            'results': 'results',
            'vehicles': 'vehicles',
            'version': 'version'
        }

        self._credit_cost = credit_cost
        self._credits_monthly_total = credits_monthly_total
        self._credits_monthly_used = credits_monthly_used
        self._data_type = data_type
        self._epoch_time = epoch_time
        self._img_height = img_height
        self._img_width = img_width
        self._processing_time = processing_time
        self._regions_of_interest = regions_of_interest
        self._results = results
        self._vehicles = vehicles
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecognizeFile200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The recognizeFile_200_response of this RecognizeFile200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credit_cost(self):
        """Gets the credit_cost of this RecognizeFile200Response.

        The number of API credits that were used to process this image

        :return: The credit_cost of this RecognizeFile200Response.
        :rtype: int
        """
        return self._credit_cost

    @credit_cost.setter
    def credit_cost(self, credit_cost):
        """Sets the credit_cost of this RecognizeFile200Response.

        The number of API credits that were used to process this image

        :param credit_cost: The credit_cost of this RecognizeFile200Response.
        :type credit_cost: int
        """

        self._credit_cost = credit_cost

    @property
    def credits_monthly_total(self):
        """Gets the credits_monthly_total of this RecognizeFile200Response.

        The maximum number of API credits available this month according to your plan

        :return: The credits_monthly_total of this RecognizeFile200Response.
        :rtype: int
        """
        return self._credits_monthly_total

    @credits_monthly_total.setter
    def credits_monthly_total(self, credits_monthly_total):
        """Sets the credits_monthly_total of this RecognizeFile200Response.

        The maximum number of API credits available this month according to your plan

        :param credits_monthly_total: The credits_monthly_total of this RecognizeFile200Response.
        :type credits_monthly_total: int
        """

        self._credits_monthly_total = credits_monthly_total

    @property
    def credits_monthly_used(self):
        """Gets the credits_monthly_used of this RecognizeFile200Response.

        The number of API credits used this month

        :return: The credits_monthly_used of this RecognizeFile200Response.
        :rtype: int
        """
        return self._credits_monthly_used

    @credits_monthly_used.setter
    def credits_monthly_used(self, credits_monthly_used):
        """Sets the credits_monthly_used of this RecognizeFile200Response.

        The number of API credits used this month

        :param credits_monthly_used: The credits_monthly_used of this RecognizeFile200Response.
        :type credits_monthly_used: int
        """

        self._credits_monthly_used = credits_monthly_used

    @property
    def data_type(self):
        """Gets the data_type of this RecognizeFile200Response.

        Specifies the type of data in this response

        :return: The data_type of this RecognizeFile200Response.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this RecognizeFile200Response.

        Specifies the type of data in this response

        :param data_type: The data_type of this RecognizeFile200Response.
        :type data_type: str
        """
        allowed_values = ["alpr_results", "alpr_group", "heartbeat"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def epoch_time(self):
        """Gets the epoch_time of this RecognizeFile200Response.

        Epoch time that the image was processed in milliseconds

        :return: The epoch_time of this RecognizeFile200Response.
        :rtype: float
        """
        return self._epoch_time

    @epoch_time.setter
    def epoch_time(self, epoch_time):
        """Sets the epoch_time of this RecognizeFile200Response.

        Epoch time that the image was processed in milliseconds

        :param epoch_time: The epoch_time of this RecognizeFile200Response.
        :type epoch_time: float
        """

        self._epoch_time = epoch_time

    @property
    def img_height(self):
        """Gets the img_height of this RecognizeFile200Response.

        Height of the input image in pixels

        :return: The img_height of this RecognizeFile200Response.
        :rtype: int
        """
        return self._img_height

    @img_height.setter
    def img_height(self, img_height):
        """Sets the img_height of this RecognizeFile200Response.

        Height of the input image in pixels

        :param img_height: The img_height of this RecognizeFile200Response.
        :type img_height: int
        """

        self._img_height = img_height

    @property
    def img_width(self):
        """Gets the img_width of this RecognizeFile200Response.

        Width of the uploaded image in pixels

        :return: The img_width of this RecognizeFile200Response.
        :rtype: int
        """
        return self._img_width

    @img_width.setter
    def img_width(self, img_width):
        """Sets the img_width of this RecognizeFile200Response.

        Width of the uploaded image in pixels

        :param img_width: The img_width of this RecognizeFile200Response.
        :type img_width: int
        """

        self._img_width = img_width

    @property
    def processing_time(self):
        """Gets the processing_time of this RecognizeFile200Response.


        :return: The processing_time of this RecognizeFile200Response.
        :rtype: RecognizeFile200ResponseProcessingTime
        """
        return self._processing_time

    @processing_time.setter
    def processing_time(self, processing_time):
        """Sets the processing_time of this RecognizeFile200Response.


        :param processing_time: The processing_time of this RecognizeFile200Response.
        :type processing_time: RecognizeFile200ResponseProcessingTime
        """

        self._processing_time = processing_time

    @property
    def regions_of_interest(self):
        """Gets the regions_of_interest of this RecognizeFile200Response.

        Describes the areas analyzed in the input image

        :return: The regions_of_interest of this RecognizeFile200Response.
        :rtype: List[RegionOfInterest]
        """
        return self._regions_of_interest

    @regions_of_interest.setter
    def regions_of_interest(self, regions_of_interest):
        """Sets the regions_of_interest of this RecognizeFile200Response.

        Describes the areas analyzed in the input image

        :param regions_of_interest: The regions_of_interest of this RecognizeFile200Response.
        :type regions_of_interest: List[RegionOfInterest]
        """

        self._regions_of_interest = regions_of_interest

    @property
    def results(self):
        """Gets the results of this RecognizeFile200Response.


        :return: The results of this RecognizeFile200Response.
        :rtype: List[PlateDetails]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this RecognizeFile200Response.


        :param results: The results of this RecognizeFile200Response.
        :type results: List[PlateDetails]
        """

        self._results = results

    @property
    def vehicles(self):
        """Gets the vehicles of this RecognizeFile200Response.

        Describes all vehicles found in the input image

        :return: The vehicles of this RecognizeFile200Response.
        :rtype: List[Vehicles]
        """
        return self._vehicles

    @vehicles.setter
    def vehicles(self, vehicles):
        """Sets the vehicles of this RecognizeFile200Response.

        Describes all vehicles found in the input image

        :param vehicles: The vehicles of this RecognizeFile200Response.
        :type vehicles: List[Vehicles]
        """

        self._vehicles = vehicles

    @property
    def version(self):
        """Gets the version of this RecognizeFile200Response.

        API format version

        :return: The version of this RecognizeFile200Response.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RecognizeFile200Response.

        API format version

        :param version: The version of this RecognizeFile200Response.
        :type version: int
        """

        self._version = version
