# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlateCandidate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, matches_template: int=None, plate: str=None):
        """PlateCandidate - a model defined in OpenAPI

        :param confidence: The confidence of this PlateCandidate.
        :param matches_template: The matches_template of this PlateCandidate.
        :param plate: The plate of this PlateCandidate.
        """
        self.openapi_types = {
            'confidence': float,
            'matches_template': int,
            'plate': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'matches_template': 'matches_template',
            'plate': 'plate'
        }

        self._confidence = confidence
        self._matches_template = matches_template
        self._plate = plate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlateCandidate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The plate_candidate of this PlateCandidate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this PlateCandidate.

        Confidence percentage that the plate number is correct

        :return: The confidence of this PlateCandidate.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this PlateCandidate.

        Confidence percentage that the plate number is correct

        :param confidence: The confidence of this PlateCandidate.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def matches_template(self):
        """Gets the matches_template of this PlateCandidate.

        Indicates whether the plate matched a regional text pattern

        :return: The matches_template of this PlateCandidate.
        :rtype: int
        """
        return self._matches_template

    @matches_template.setter
    def matches_template(self, matches_template):
        """Sets the matches_template of this PlateCandidate.

        Indicates whether the plate matched a regional text pattern

        :param matches_template: The matches_template of this PlateCandidate.
        :type matches_template: int
        """

        self._matches_template = matches_template

    @property
    def plate(self):
        """Gets the plate of this PlateCandidate.

        Plate number

        :return: The plate of this PlateCandidate.
        :rtype: str
        """
        return self._plate

    @plate.setter
    def plate(self, plate):
        """Sets the plate of this PlateCandidate.

        Plate number

        :param plate: The plate of this PlateCandidate.
        :type plate: str
        """

        self._plate = plate
