# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vehicle_candidate import VehicleCandidate
from openapi_server import util


class VehicleDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body_type: List[VehicleCandidate]=None, color: List[VehicleCandidate]=None, make: List[VehicleCandidate]=None, make_model: List[VehicleCandidate]=None, orientation: List[VehicleCandidate]=None, year: List[VehicleCandidate]=None):
        """VehicleDetails - a model defined in OpenAPI

        :param body_type: The body_type of this VehicleDetails.
        :param color: The color of this VehicleDetails.
        :param make: The make of this VehicleDetails.
        :param make_model: The make_model of this VehicleDetails.
        :param orientation: The orientation of this VehicleDetails.
        :param year: The year of this VehicleDetails.
        """
        self.openapi_types = {
            'body_type': List[VehicleCandidate],
            'color': List[VehicleCandidate],
            'make': List[VehicleCandidate],
            'make_model': List[VehicleCandidate],
            'orientation': List[VehicleCandidate],
            'year': List[VehicleCandidate]
        }

        self.attribute_map = {
            'body_type': 'body_type',
            'color': 'color',
            'make': 'make',
            'make_model': 'make_model',
            'orientation': 'orientation',
            'year': 'year'
        }

        self._body_type = body_type
        self._color = color
        self._make = make
        self._make_model = make_model
        self._orientation = orientation
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VehicleDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The vehicle_details of this VehicleDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body_type(self):
        """Gets the body_type of this VehicleDetails.


        :return: The body_type of this VehicleDetails.
        :rtype: List[VehicleCandidate]
        """
        return self._body_type

    @body_type.setter
    def body_type(self, body_type):
        """Sets the body_type of this VehicleDetails.


        :param body_type: The body_type of this VehicleDetails.
        :type body_type: List[VehicleCandidate]
        """

        self._body_type = body_type

    @property
    def color(self):
        """Gets the color of this VehicleDetails.


        :return: The color of this VehicleDetails.
        :rtype: List[VehicleCandidate]
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this VehicleDetails.


        :param color: The color of this VehicleDetails.
        :type color: List[VehicleCandidate]
        """

        self._color = color

    @property
    def make(self):
        """Gets the make of this VehicleDetails.


        :return: The make of this VehicleDetails.
        :rtype: List[VehicleCandidate]
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this VehicleDetails.


        :param make: The make of this VehicleDetails.
        :type make: List[VehicleCandidate]
        """

        self._make = make

    @property
    def make_model(self):
        """Gets the make_model of this VehicleDetails.


        :return: The make_model of this VehicleDetails.
        :rtype: List[VehicleCandidate]
        """
        return self._make_model

    @make_model.setter
    def make_model(self, make_model):
        """Sets the make_model of this VehicleDetails.


        :param make_model: The make_model of this VehicleDetails.
        :type make_model: List[VehicleCandidate]
        """

        self._make_model = make_model

    @property
    def orientation(self):
        """Gets the orientation of this VehicleDetails.


        :return: The orientation of this VehicleDetails.
        :rtype: List[VehicleCandidate]
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this VehicleDetails.


        :param orientation: The orientation of this VehicleDetails.
        :type orientation: List[VehicleCandidate]
        """

        self._orientation = orientation

    @property
    def year(self):
        """Gets the year of this VehicleDetails.


        :return: The year of this VehicleDetails.
        :rtype: List[VehicleCandidate]
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this VehicleDetails.


        :param year: The year of this VehicleDetails.
        :type year: List[VehicleCandidate]
        """

        self._year = year
