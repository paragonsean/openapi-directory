/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecognizeFile_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecognizeFile_200_response::OAIRecognizeFile_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecognizeFile_200_response::OAIRecognizeFile_200_response() {
    this->initializeModel();
}

OAIRecognizeFile_200_response::~OAIRecognizeFile_200_response() {}

void OAIRecognizeFile_200_response::initializeModel() {

    m_credit_cost_isSet = false;
    m_credit_cost_isValid = false;

    m_credits_monthly_total_isSet = false;
    m_credits_monthly_total_isValid = false;

    m_credits_monthly_used_isSet = false;
    m_credits_monthly_used_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_epoch_time_isSet = false;
    m_epoch_time_isValid = false;

    m_img_height_isSet = false;
    m_img_height_isValid = false;

    m_img_width_isSet = false;
    m_img_width_isValid = false;

    m_processing_time_isSet = false;
    m_processing_time_isValid = false;

    m_regions_of_interest_isSet = false;
    m_regions_of_interest_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_vehicles_isSet = false;
    m_vehicles_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIRecognizeFile_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecognizeFile_200_response::fromJsonObject(QJsonObject json) {

    m_credit_cost_isValid = ::OpenAPI::fromJsonValue(m_credit_cost, json[QString("credit_cost")]);
    m_credit_cost_isSet = !json[QString("credit_cost")].isNull() && m_credit_cost_isValid;

    m_credits_monthly_total_isValid = ::OpenAPI::fromJsonValue(m_credits_monthly_total, json[QString("credits_monthly_total")]);
    m_credits_monthly_total_isSet = !json[QString("credits_monthly_total")].isNull() && m_credits_monthly_total_isValid;

    m_credits_monthly_used_isValid = ::OpenAPI::fromJsonValue(m_credits_monthly_used, json[QString("credits_monthly_used")]);
    m_credits_monthly_used_isSet = !json[QString("credits_monthly_used")].isNull() && m_credits_monthly_used_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("data_type")]);
    m_data_type_isSet = !json[QString("data_type")].isNull() && m_data_type_isValid;

    m_epoch_time_isValid = ::OpenAPI::fromJsonValue(m_epoch_time, json[QString("epoch_time")]);
    m_epoch_time_isSet = !json[QString("epoch_time")].isNull() && m_epoch_time_isValid;

    m_img_height_isValid = ::OpenAPI::fromJsonValue(m_img_height, json[QString("img_height")]);
    m_img_height_isSet = !json[QString("img_height")].isNull() && m_img_height_isValid;

    m_img_width_isValid = ::OpenAPI::fromJsonValue(m_img_width, json[QString("img_width")]);
    m_img_width_isSet = !json[QString("img_width")].isNull() && m_img_width_isValid;

    m_processing_time_isValid = ::OpenAPI::fromJsonValue(m_processing_time, json[QString("processing_time")]);
    m_processing_time_isSet = !json[QString("processing_time")].isNull() && m_processing_time_isValid;

    m_regions_of_interest_isValid = ::OpenAPI::fromJsonValue(m_regions_of_interest, json[QString("regions_of_interest")]);
    m_regions_of_interest_isSet = !json[QString("regions_of_interest")].isNull() && m_regions_of_interest_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_vehicles_isValid = ::OpenAPI::fromJsonValue(m_vehicles, json[QString("vehicles")]);
    m_vehicles_isSet = !json[QString("vehicles")].isNull() && m_vehicles_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIRecognizeFile_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecognizeFile_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_credit_cost_isSet) {
        obj.insert(QString("credit_cost"), ::OpenAPI::toJsonValue(m_credit_cost));
    }
    if (m_credits_monthly_total_isSet) {
        obj.insert(QString("credits_monthly_total"), ::OpenAPI::toJsonValue(m_credits_monthly_total));
    }
    if (m_credits_monthly_used_isSet) {
        obj.insert(QString("credits_monthly_used"), ::OpenAPI::toJsonValue(m_credits_monthly_used));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("data_type"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_epoch_time_isSet) {
        obj.insert(QString("epoch_time"), ::OpenAPI::toJsonValue(m_epoch_time));
    }
    if (m_img_height_isSet) {
        obj.insert(QString("img_height"), ::OpenAPI::toJsonValue(m_img_height));
    }
    if (m_img_width_isSet) {
        obj.insert(QString("img_width"), ::OpenAPI::toJsonValue(m_img_width));
    }
    if (m_processing_time.isSet()) {
        obj.insert(QString("processing_time"), ::OpenAPI::toJsonValue(m_processing_time));
    }
    if (m_regions_of_interest.size() > 0) {
        obj.insert(QString("regions_of_interest"), ::OpenAPI::toJsonValue(m_regions_of_interest));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_vehicles.size() > 0) {
        obj.insert(QString("vehicles"), ::OpenAPI::toJsonValue(m_vehicles));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

qint32 OAIRecognizeFile_200_response::getCreditCost() const {
    return m_credit_cost;
}
void OAIRecognizeFile_200_response::setCreditCost(const qint32 &credit_cost) {
    m_credit_cost = credit_cost;
    m_credit_cost_isSet = true;
}

bool OAIRecognizeFile_200_response::is_credit_cost_Set() const{
    return m_credit_cost_isSet;
}

bool OAIRecognizeFile_200_response::is_credit_cost_Valid() const{
    return m_credit_cost_isValid;
}

qint32 OAIRecognizeFile_200_response::getCreditsMonthlyTotal() const {
    return m_credits_monthly_total;
}
void OAIRecognizeFile_200_response::setCreditsMonthlyTotal(const qint32 &credits_monthly_total) {
    m_credits_monthly_total = credits_monthly_total;
    m_credits_monthly_total_isSet = true;
}

bool OAIRecognizeFile_200_response::is_credits_monthly_total_Set() const{
    return m_credits_monthly_total_isSet;
}

bool OAIRecognizeFile_200_response::is_credits_monthly_total_Valid() const{
    return m_credits_monthly_total_isValid;
}

qint32 OAIRecognizeFile_200_response::getCreditsMonthlyUsed() const {
    return m_credits_monthly_used;
}
void OAIRecognizeFile_200_response::setCreditsMonthlyUsed(const qint32 &credits_monthly_used) {
    m_credits_monthly_used = credits_monthly_used;
    m_credits_monthly_used_isSet = true;
}

bool OAIRecognizeFile_200_response::is_credits_monthly_used_Set() const{
    return m_credits_monthly_used_isSet;
}

bool OAIRecognizeFile_200_response::is_credits_monthly_used_Valid() const{
    return m_credits_monthly_used_isValid;
}

QString OAIRecognizeFile_200_response::getDataType() const {
    return m_data_type;
}
void OAIRecognizeFile_200_response::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIRecognizeFile_200_response::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIRecognizeFile_200_response::is_data_type_Valid() const{
    return m_data_type_isValid;
}

double OAIRecognizeFile_200_response::getEpochTime() const {
    return m_epoch_time;
}
void OAIRecognizeFile_200_response::setEpochTime(const double &epoch_time) {
    m_epoch_time = epoch_time;
    m_epoch_time_isSet = true;
}

bool OAIRecognizeFile_200_response::is_epoch_time_Set() const{
    return m_epoch_time_isSet;
}

bool OAIRecognizeFile_200_response::is_epoch_time_Valid() const{
    return m_epoch_time_isValid;
}

qint32 OAIRecognizeFile_200_response::getImgHeight() const {
    return m_img_height;
}
void OAIRecognizeFile_200_response::setImgHeight(const qint32 &img_height) {
    m_img_height = img_height;
    m_img_height_isSet = true;
}

bool OAIRecognizeFile_200_response::is_img_height_Set() const{
    return m_img_height_isSet;
}

bool OAIRecognizeFile_200_response::is_img_height_Valid() const{
    return m_img_height_isValid;
}

qint32 OAIRecognizeFile_200_response::getImgWidth() const {
    return m_img_width;
}
void OAIRecognizeFile_200_response::setImgWidth(const qint32 &img_width) {
    m_img_width = img_width;
    m_img_width_isSet = true;
}

bool OAIRecognizeFile_200_response::is_img_width_Set() const{
    return m_img_width_isSet;
}

bool OAIRecognizeFile_200_response::is_img_width_Valid() const{
    return m_img_width_isValid;
}

OAIRecognizeFile_200_response_processing_time OAIRecognizeFile_200_response::getProcessingTime() const {
    return m_processing_time;
}
void OAIRecognizeFile_200_response::setProcessingTime(const OAIRecognizeFile_200_response_processing_time &processing_time) {
    m_processing_time = processing_time;
    m_processing_time_isSet = true;
}

bool OAIRecognizeFile_200_response::is_processing_time_Set() const{
    return m_processing_time_isSet;
}

bool OAIRecognizeFile_200_response::is_processing_time_Valid() const{
    return m_processing_time_isValid;
}

QList<OAIRegion_of_interest> OAIRecognizeFile_200_response::getRegionsOfInterest() const {
    return m_regions_of_interest;
}
void OAIRecognizeFile_200_response::setRegionsOfInterest(const QList<OAIRegion_of_interest> &regions_of_interest) {
    m_regions_of_interest = regions_of_interest;
    m_regions_of_interest_isSet = true;
}

bool OAIRecognizeFile_200_response::is_regions_of_interest_Set() const{
    return m_regions_of_interest_isSet;
}

bool OAIRecognizeFile_200_response::is_regions_of_interest_Valid() const{
    return m_regions_of_interest_isValid;
}

QList<OAIPlate_details> OAIRecognizeFile_200_response::getResults() const {
    return m_results;
}
void OAIRecognizeFile_200_response::setResults(const QList<OAIPlate_details> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIRecognizeFile_200_response::is_results_Set() const{
    return m_results_isSet;
}

bool OAIRecognizeFile_200_response::is_results_Valid() const{
    return m_results_isValid;
}

QList<OAIVehicles> OAIRecognizeFile_200_response::getVehicles() const {
    return m_vehicles;
}
void OAIRecognizeFile_200_response::setVehicles(const QList<OAIVehicles> &vehicles) {
    m_vehicles = vehicles;
    m_vehicles_isSet = true;
}

bool OAIRecognizeFile_200_response::is_vehicles_Set() const{
    return m_vehicles_isSet;
}

bool OAIRecognizeFile_200_response::is_vehicles_Valid() const{
    return m_vehicles_isValid;
}

qint32 OAIRecognizeFile_200_response::getVersion() const {
    return m_version;
}
void OAIRecognizeFile_200_response::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRecognizeFile_200_response::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRecognizeFile_200_response::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIRecognizeFile_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_monthly_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_monthly_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epoch_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_img_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_img_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions_of_interest.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecognizeFile_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
