/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetConfig_200_response_vehicle_labels.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetConfig_200_response_vehicle_labels::OAIGetConfig_200_response_vehicle_labels(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetConfig_200_response_vehicle_labels::OAIGetConfig_200_response_vehicle_labels() {
    this->initializeModel();
}

OAIGetConfig_200_response_vehicle_labels::~OAIGetConfig_200_response_vehicle_labels() {}

void OAIGetConfig_200_response_vehicle_labels::initializeModel() {

    m_bodytype_isSet = false;
    m_bodytype_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_makemodel_isSet = false;
    m_makemodel_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIGetConfig_200_response_vehicle_labels::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetConfig_200_response_vehicle_labels::fromJsonObject(QJsonObject json) {

    m_bodytype_isValid = ::OpenAPI::fromJsonValue(m_bodytype, json[QString("bodytype")]);
    m_bodytype_isSet = !json[QString("bodytype")].isNull() && m_bodytype_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_makemodel_isValid = ::OpenAPI::fromJsonValue(m_makemodel, json[QString("makemodel")]);
    m_makemodel_isSet = !json[QString("makemodel")].isNull() && m_makemodel_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIGetConfig_200_response_vehicle_labels::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetConfig_200_response_vehicle_labels::asJsonObject() const {
    QJsonObject obj;
    if (m_bodytype.size() > 0) {
        obj.insert(QString("bodytype"), ::OpenAPI::toJsonValue(m_bodytype));
    }
    if (m_color.size() > 0) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_make.size() > 0) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_makemodel.size() > 0) {
        obj.insert(QString("makemodel"), ::OpenAPI::toJsonValue(m_makemodel));
    }
    if (m_orientation.size() > 0) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_year.size() > 0) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QList<QString> OAIGetConfig_200_response_vehicle_labels::getBodytype() const {
    return m_bodytype;
}
void OAIGetConfig_200_response_vehicle_labels::setBodytype(const QList<QString> &bodytype) {
    m_bodytype = bodytype;
    m_bodytype_isSet = true;
}

bool OAIGetConfig_200_response_vehicle_labels::is_bodytype_Set() const{
    return m_bodytype_isSet;
}

bool OAIGetConfig_200_response_vehicle_labels::is_bodytype_Valid() const{
    return m_bodytype_isValid;
}

QList<QString> OAIGetConfig_200_response_vehicle_labels::getColor() const {
    return m_color;
}
void OAIGetConfig_200_response_vehicle_labels::setColor(const QList<QString> &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIGetConfig_200_response_vehicle_labels::is_color_Set() const{
    return m_color_isSet;
}

bool OAIGetConfig_200_response_vehicle_labels::is_color_Valid() const{
    return m_color_isValid;
}

QList<QString> OAIGetConfig_200_response_vehicle_labels::getMake() const {
    return m_make;
}
void OAIGetConfig_200_response_vehicle_labels::setMake(const QList<QString> &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIGetConfig_200_response_vehicle_labels::is_make_Set() const{
    return m_make_isSet;
}

bool OAIGetConfig_200_response_vehicle_labels::is_make_Valid() const{
    return m_make_isValid;
}

QList<QString> OAIGetConfig_200_response_vehicle_labels::getMakemodel() const {
    return m_makemodel;
}
void OAIGetConfig_200_response_vehicle_labels::setMakemodel(const QList<QString> &makemodel) {
    m_makemodel = makemodel;
    m_makemodel_isSet = true;
}

bool OAIGetConfig_200_response_vehicle_labels::is_makemodel_Set() const{
    return m_makemodel_isSet;
}

bool OAIGetConfig_200_response_vehicle_labels::is_makemodel_Valid() const{
    return m_makemodel_isValid;
}

QList<QString> OAIGetConfig_200_response_vehicle_labels::getOrientation() const {
    return m_orientation;
}
void OAIGetConfig_200_response_vehicle_labels::setOrientation(const QList<QString> &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAIGetConfig_200_response_vehicle_labels::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAIGetConfig_200_response_vehicle_labels::is_orientation_Valid() const{
    return m_orientation_isValid;
}

QList<QString> OAIGetConfig_200_response_vehicle_labels::getYear() const {
    return m_year;
}
void OAIGetConfig_200_response_vehicle_labels::setYear(const QList<QString> &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIGetConfig_200_response_vehicle_labels::is_year_Set() const{
    return m_year_isSet;
}

bool OAIGetConfig_200_response_vehicle_labels::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIGetConfig_200_response_vehicle_labels::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bodytype.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_color.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_make.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_makemodel.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_year.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetConfig_200_response_vehicle_labels::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
