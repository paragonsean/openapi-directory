/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecognizeFile_200_response.h
 *
 * 
 */

#ifndef OAIRecognizeFile_200_response_H
#define OAIRecognizeFile_200_response_H

#include <QJsonObject>

#include "OAIPlate_details.h"
#include "OAIRecognizeFile_200_response_processing_time.h"
#include "OAIRegion_of_interest.h"
#include "OAIVehicles.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRecognizeFile_200_response_processing_time;
class OAIRegion_of_interest;
class OAIPlate_details;
class OAIVehicles;

class OAIRecognizeFile_200_response : public OAIObject {
public:
    OAIRecognizeFile_200_response();
    OAIRecognizeFile_200_response(QString json);
    ~OAIRecognizeFile_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCreditCost() const;
    void setCreditCost(const qint32 &credit_cost);
    bool is_credit_cost_Set() const;
    bool is_credit_cost_Valid() const;

    qint32 getCreditsMonthlyTotal() const;
    void setCreditsMonthlyTotal(const qint32 &credits_monthly_total);
    bool is_credits_monthly_total_Set() const;
    bool is_credits_monthly_total_Valid() const;

    qint32 getCreditsMonthlyUsed() const;
    void setCreditsMonthlyUsed(const qint32 &credits_monthly_used);
    bool is_credits_monthly_used_Set() const;
    bool is_credits_monthly_used_Valid() const;

    QString getDataType() const;
    void setDataType(const QString &data_type);
    bool is_data_type_Set() const;
    bool is_data_type_Valid() const;

    double getEpochTime() const;
    void setEpochTime(const double &epoch_time);
    bool is_epoch_time_Set() const;
    bool is_epoch_time_Valid() const;

    qint32 getImgHeight() const;
    void setImgHeight(const qint32 &img_height);
    bool is_img_height_Set() const;
    bool is_img_height_Valid() const;

    qint32 getImgWidth() const;
    void setImgWidth(const qint32 &img_width);
    bool is_img_width_Set() const;
    bool is_img_width_Valid() const;

    OAIRecognizeFile_200_response_processing_time getProcessingTime() const;
    void setProcessingTime(const OAIRecognizeFile_200_response_processing_time &processing_time);
    bool is_processing_time_Set() const;
    bool is_processing_time_Valid() const;

    QList<OAIRegion_of_interest> getRegionsOfInterest() const;
    void setRegionsOfInterest(const QList<OAIRegion_of_interest> &regions_of_interest);
    bool is_regions_of_interest_Set() const;
    bool is_regions_of_interest_Valid() const;

    QList<OAIPlate_details> getResults() const;
    void setResults(const QList<OAIPlate_details> &results);
    bool is_results_Set() const;
    bool is_results_Valid() const;

    QList<OAIVehicles> getVehicles() const;
    void setVehicles(const QList<OAIVehicles> &vehicles);
    bool is_vehicles_Set() const;
    bool is_vehicles_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_credit_cost;
    bool m_credit_cost_isSet;
    bool m_credit_cost_isValid;

    qint32 m_credits_monthly_total;
    bool m_credits_monthly_total_isSet;
    bool m_credits_monthly_total_isValid;

    qint32 m_credits_monthly_used;
    bool m_credits_monthly_used_isSet;
    bool m_credits_monthly_used_isValid;

    QString m_data_type;
    bool m_data_type_isSet;
    bool m_data_type_isValid;

    double m_epoch_time;
    bool m_epoch_time_isSet;
    bool m_epoch_time_isValid;

    qint32 m_img_height;
    bool m_img_height_isSet;
    bool m_img_height_isValid;

    qint32 m_img_width;
    bool m_img_width_isSet;
    bool m_img_width_isValid;

    OAIRecognizeFile_200_response_processing_time m_processing_time;
    bool m_processing_time_isSet;
    bool m_processing_time_isValid;

    QList<OAIRegion_of_interest> m_regions_of_interest;
    bool m_regions_of_interest_isSet;
    bool m_regions_of_interest_isValid;

    QList<OAIPlate_details> m_results;
    bool m_results_isSet;
    bool m_results_isValid;

    QList<OAIVehicles> m_vehicles;
    bool m_vehicles_isSet;
    bool m_vehicles_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecognizeFile_200_response)

#endif // OAIRecognizeFile_200_response_H
