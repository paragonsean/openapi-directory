/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlate_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlate_details::OAIPlate_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlate_details::OAIPlate_details() {
    this->initializeModel();
}

OAIPlate_details::~OAIPlate_details() {}

void OAIPlate_details::initializeModel() {

    m_candidates_isSet = false;
    m_candidates_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_matches_template_isSet = false;
    m_matches_template_isValid = false;

    m_plate_isSet = false;
    m_plate_isValid = false;

    m_processing_time_ms_isSet = false;
    m_processing_time_ms_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_region_confidence_isSet = false;
    m_region_confidence_isValid = false;

    m_requested_topn_isSet = false;
    m_requested_topn_isValid = false;

    m_vehicle_isSet = false;
    m_vehicle_isValid = false;

    m_vehicle_region_isSet = false;
    m_vehicle_region_isValid = false;
}

void OAIPlate_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlate_details::fromJsonObject(QJsonObject json) {

    m_candidates_isValid = ::OpenAPI::fromJsonValue(m_candidates, json[QString("candidates")]);
    m_candidates_isSet = !json[QString("candidates")].isNull() && m_candidates_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;

    m_matches_template_isValid = ::OpenAPI::fromJsonValue(m_matches_template, json[QString("matches_template")]);
    m_matches_template_isSet = !json[QString("matches_template")].isNull() && m_matches_template_isValid;

    m_plate_isValid = ::OpenAPI::fromJsonValue(m_plate, json[QString("plate")]);
    m_plate_isSet = !json[QString("plate")].isNull() && m_plate_isValid;

    m_processing_time_ms_isValid = ::OpenAPI::fromJsonValue(m_processing_time_ms, json[QString("processing_time_ms")]);
    m_processing_time_ms_isSet = !json[QString("processing_time_ms")].isNull() && m_processing_time_ms_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_region_confidence_isValid = ::OpenAPI::fromJsonValue(m_region_confidence, json[QString("region_confidence")]);
    m_region_confidence_isSet = !json[QString("region_confidence")].isNull() && m_region_confidence_isValid;

    m_requested_topn_isValid = ::OpenAPI::fromJsonValue(m_requested_topn, json[QString("requested_topn")]);
    m_requested_topn_isSet = !json[QString("requested_topn")].isNull() && m_requested_topn_isValid;

    m_vehicle_isValid = ::OpenAPI::fromJsonValue(m_vehicle, json[QString("vehicle")]);
    m_vehicle_isSet = !json[QString("vehicle")].isNull() && m_vehicle_isValid;

    m_vehicle_region_isValid = ::OpenAPI::fromJsonValue(m_vehicle_region, json[QString("vehicle_region")]);
    m_vehicle_region_isSet = !json[QString("vehicle_region")].isNull() && m_vehicle_region_isValid;
}

QString OAIPlate_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlate_details::asJsonObject() const {
    QJsonObject obj;
    if (m_candidates.size() > 0) {
        obj.insert(QString("candidates"), ::OpenAPI::toJsonValue(m_candidates));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_coordinates.size() > 0) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_matches_template_isSet) {
        obj.insert(QString("matches_template"), ::OpenAPI::toJsonValue(m_matches_template));
    }
    if (m_plate_isSet) {
        obj.insert(QString("plate"), ::OpenAPI::toJsonValue(m_plate));
    }
    if (m_processing_time_ms_isSet) {
        obj.insert(QString("processing_time_ms"), ::OpenAPI::toJsonValue(m_processing_time_ms));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_region_confidence_isSet) {
        obj.insert(QString("region_confidence"), ::OpenAPI::toJsonValue(m_region_confidence));
    }
    if (m_requested_topn_isSet) {
        obj.insert(QString("requested_topn"), ::OpenAPI::toJsonValue(m_requested_topn));
    }
    if (m_vehicle.isSet()) {
        obj.insert(QString("vehicle"), ::OpenAPI::toJsonValue(m_vehicle));
    }
    if (m_vehicle_region.isSet()) {
        obj.insert(QString("vehicle_region"), ::OpenAPI::toJsonValue(m_vehicle_region));
    }
    return obj;
}

QList<OAIPlate_candidate> OAIPlate_details::getCandidates() const {
    return m_candidates;
}
void OAIPlate_details::setCandidates(const QList<OAIPlate_candidate> &candidates) {
    m_candidates = candidates;
    m_candidates_isSet = true;
}

bool OAIPlate_details::is_candidates_Set() const{
    return m_candidates_isSet;
}

bool OAIPlate_details::is_candidates_Valid() const{
    return m_candidates_isValid;
}

double OAIPlate_details::getConfidence() const {
    return m_confidence;
}
void OAIPlate_details::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIPlate_details::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIPlate_details::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QList<OAICoordinate> OAIPlate_details::getCoordinates() const {
    return m_coordinates;
}
void OAIPlate_details::setCoordinates(const QList<OAICoordinate> &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAIPlate_details::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAIPlate_details::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

qint32 OAIPlate_details::getMatchesTemplate() const {
    return m_matches_template;
}
void OAIPlate_details::setMatchesTemplate(const qint32 &matches_template) {
    m_matches_template = matches_template;
    m_matches_template_isSet = true;
}

bool OAIPlate_details::is_matches_template_Set() const{
    return m_matches_template_isSet;
}

bool OAIPlate_details::is_matches_template_Valid() const{
    return m_matches_template_isValid;
}

QString OAIPlate_details::getPlate() const {
    return m_plate;
}
void OAIPlate_details::setPlate(const QString &plate) {
    m_plate = plate;
    m_plate_isSet = true;
}

bool OAIPlate_details::is_plate_Set() const{
    return m_plate_isSet;
}

bool OAIPlate_details::is_plate_Valid() const{
    return m_plate_isValid;
}

double OAIPlate_details::getProcessingTimeMs() const {
    return m_processing_time_ms;
}
void OAIPlate_details::setProcessingTimeMs(const double &processing_time_ms) {
    m_processing_time_ms = processing_time_ms;
    m_processing_time_ms_isSet = true;
}

bool OAIPlate_details::is_processing_time_ms_Set() const{
    return m_processing_time_ms_isSet;
}

bool OAIPlate_details::is_processing_time_ms_Valid() const{
    return m_processing_time_ms_isValid;
}

QString OAIPlate_details::getRegion() const {
    return m_region;
}
void OAIPlate_details::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIPlate_details::is_region_Set() const{
    return m_region_isSet;
}

bool OAIPlate_details::is_region_Valid() const{
    return m_region_isValid;
}

double OAIPlate_details::getRegionConfidence() const {
    return m_region_confidence;
}
void OAIPlate_details::setRegionConfidence(const double &region_confidence) {
    m_region_confidence = region_confidence;
    m_region_confidence_isSet = true;
}

bool OAIPlate_details::is_region_confidence_Set() const{
    return m_region_confidence_isSet;
}

bool OAIPlate_details::is_region_confidence_Valid() const{
    return m_region_confidence_isValid;
}

qint32 OAIPlate_details::getRequestedTopn() const {
    return m_requested_topn;
}
void OAIPlate_details::setRequestedTopn(const qint32 &requested_topn) {
    m_requested_topn = requested_topn;
    m_requested_topn_isSet = true;
}

bool OAIPlate_details::is_requested_topn_Set() const{
    return m_requested_topn_isSet;
}

bool OAIPlate_details::is_requested_topn_Valid() const{
    return m_requested_topn_isValid;
}

OAIVehicle_details OAIPlate_details::getVehicle() const {
    return m_vehicle;
}
void OAIPlate_details::setVehicle(const OAIVehicle_details &vehicle) {
    m_vehicle = vehicle;
    m_vehicle_isSet = true;
}

bool OAIPlate_details::is_vehicle_Set() const{
    return m_vehicle_isSet;
}

bool OAIPlate_details::is_vehicle_Valid() const{
    return m_vehicle_isValid;
}

OAIRegion_of_interest OAIPlate_details::getVehicleRegion() const {
    return m_vehicle_region;
}
void OAIPlate_details::setVehicleRegion(const OAIRegion_of_interest &vehicle_region) {
    m_vehicle_region = vehicle_region;
    m_vehicle_region_isSet = true;
}

bool OAIPlate_details::is_vehicle_region_Set() const{
    return m_vehicle_region_isSet;
}

bool OAIPlate_details::is_vehicle_region_Valid() const{
    return m_vehicle_region_isValid;
}

bool OAIPlate_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_topn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle_region.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlate_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
