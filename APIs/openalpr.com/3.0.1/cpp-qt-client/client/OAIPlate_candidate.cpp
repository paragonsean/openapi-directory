/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlate_candidate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlate_candidate::OAIPlate_candidate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlate_candidate::OAIPlate_candidate() {
    this->initializeModel();
}

OAIPlate_candidate::~OAIPlate_candidate() {}

void OAIPlate_candidate::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_matches_template_isSet = false;
    m_matches_template_isValid = false;

    m_plate_isSet = false;
    m_plate_isValid = false;
}

void OAIPlate_candidate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlate_candidate::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_matches_template_isValid = ::OpenAPI::fromJsonValue(m_matches_template, json[QString("matches_template")]);
    m_matches_template_isSet = !json[QString("matches_template")].isNull() && m_matches_template_isValid;

    m_plate_isValid = ::OpenAPI::fromJsonValue(m_plate, json[QString("plate")]);
    m_plate_isSet = !json[QString("plate")].isNull() && m_plate_isValid;
}

QString OAIPlate_candidate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlate_candidate::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_matches_template_isSet) {
        obj.insert(QString("matches_template"), ::OpenAPI::toJsonValue(m_matches_template));
    }
    if (m_plate_isSet) {
        obj.insert(QString("plate"), ::OpenAPI::toJsonValue(m_plate));
    }
    return obj;
}

double OAIPlate_candidate::getConfidence() const {
    return m_confidence;
}
void OAIPlate_candidate::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIPlate_candidate::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIPlate_candidate::is_confidence_Valid() const{
    return m_confidence_isValid;
}

qint32 OAIPlate_candidate::getMatchesTemplate() const {
    return m_matches_template;
}
void OAIPlate_candidate::setMatchesTemplate(const qint32 &matches_template) {
    m_matches_template = matches_template;
    m_matches_template_isSet = true;
}

bool OAIPlate_candidate::is_matches_template_Set() const{
    return m_matches_template_isSet;
}

bool OAIPlate_candidate::is_matches_template_Valid() const{
    return m_matches_template_isValid;
}

QString OAIPlate_candidate::getPlate() const {
    return m_plate;
}
void OAIPlate_candidate::setPlate(const QString &plate) {
    m_plate = plate;
    m_plate_isSet = true;
}

bool OAIPlate_candidate::is_plate_Set() const{
    return m_plate_isSet;
}

bool OAIPlate_candidate::is_plate_Valid() const{
    return m_plate_isValid;
}

bool OAIPlate_candidate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlate_candidate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
