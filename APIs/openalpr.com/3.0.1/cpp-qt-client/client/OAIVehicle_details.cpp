/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVehicle_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVehicle_details::OAIVehicle_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVehicle_details::OAIVehicle_details() {
    this->initializeModel();
}

OAIVehicle_details::~OAIVehicle_details() {}

void OAIVehicle_details::initializeModel() {

    m_body_type_isSet = false;
    m_body_type_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_make_model_isSet = false;
    m_make_model_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIVehicle_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVehicle_details::fromJsonObject(QJsonObject json) {

    m_body_type_isValid = ::OpenAPI::fromJsonValue(m_body_type, json[QString("body_type")]);
    m_body_type_isSet = !json[QString("body_type")].isNull() && m_body_type_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_make_model_isValid = ::OpenAPI::fromJsonValue(m_make_model, json[QString("make_model")]);
    m_make_model_isSet = !json[QString("make_model")].isNull() && m_make_model_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIVehicle_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVehicle_details::asJsonObject() const {
    QJsonObject obj;
    if (m_body_type.size() > 0) {
        obj.insert(QString("body_type"), ::OpenAPI::toJsonValue(m_body_type));
    }
    if (m_color.size() > 0) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_make.size() > 0) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_make_model.size() > 0) {
        obj.insert(QString("make_model"), ::OpenAPI::toJsonValue(m_make_model));
    }
    if (m_orientation.size() > 0) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_year.size() > 0) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QList<OAIVehicle_candidate> OAIVehicle_details::getBodyType() const {
    return m_body_type;
}
void OAIVehicle_details::setBodyType(const QList<OAIVehicle_candidate> &body_type) {
    m_body_type = body_type;
    m_body_type_isSet = true;
}

bool OAIVehicle_details::is_body_type_Set() const{
    return m_body_type_isSet;
}

bool OAIVehicle_details::is_body_type_Valid() const{
    return m_body_type_isValid;
}

QList<OAIVehicle_candidate> OAIVehicle_details::getColor() const {
    return m_color;
}
void OAIVehicle_details::setColor(const QList<OAIVehicle_candidate> &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIVehicle_details::is_color_Set() const{
    return m_color_isSet;
}

bool OAIVehicle_details::is_color_Valid() const{
    return m_color_isValid;
}

QList<OAIVehicle_candidate> OAIVehicle_details::getMake() const {
    return m_make;
}
void OAIVehicle_details::setMake(const QList<OAIVehicle_candidate> &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIVehicle_details::is_make_Set() const{
    return m_make_isSet;
}

bool OAIVehicle_details::is_make_Valid() const{
    return m_make_isValid;
}

QList<OAIVehicle_candidate> OAIVehicle_details::getMakeModel() const {
    return m_make_model;
}
void OAIVehicle_details::setMakeModel(const QList<OAIVehicle_candidate> &make_model) {
    m_make_model = make_model;
    m_make_model_isSet = true;
}

bool OAIVehicle_details::is_make_model_Set() const{
    return m_make_model_isSet;
}

bool OAIVehicle_details::is_make_model_Valid() const{
    return m_make_model_isValid;
}

QList<OAIVehicle_candidate> OAIVehicle_details::getOrientation() const {
    return m_orientation;
}
void OAIVehicle_details::setOrientation(const QList<OAIVehicle_candidate> &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAIVehicle_details::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAIVehicle_details::is_orientation_Valid() const{
    return m_orientation_isValid;
}

QList<OAIVehicle_candidate> OAIVehicle_details::getYear() const {
    return m_year;
}
void OAIVehicle_details::setYear(const QList<OAIVehicle_candidate> &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIVehicle_details::is_year_Set() const{
    return m_year_isSet;
}

bool OAIVehicle_details::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIVehicle_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_color.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_make.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_make_model.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_year.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVehicle_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
