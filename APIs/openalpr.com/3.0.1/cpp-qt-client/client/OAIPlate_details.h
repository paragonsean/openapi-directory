/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlate_details.h
 *
 * 
 */

#ifndef OAIPlate_details_H
#define OAIPlate_details_H

#include <QJsonObject>

#include "OAICoordinate.h"
#include "OAIPlate_candidate.h"
#include "OAIRegion_of_interest.h"
#include "OAIVehicle_details.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPlate_candidate;
class OAICoordinate;
class OAIVehicle_details;
class OAIRegion_of_interest;

class OAIPlate_details : public OAIObject {
public:
    OAIPlate_details();
    OAIPlate_details(QString json);
    ~OAIPlate_details() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIPlate_candidate> getCandidates() const;
    void setCandidates(const QList<OAIPlate_candidate> &candidates);
    bool is_candidates_Set() const;
    bool is_candidates_Valid() const;

    double getConfidence() const;
    void setConfidence(const double &confidence);
    bool is_confidence_Set() const;
    bool is_confidence_Valid() const;

    QList<OAICoordinate> getCoordinates() const;
    void setCoordinates(const QList<OAICoordinate> &coordinates);
    bool is_coordinates_Set() const;
    bool is_coordinates_Valid() const;

    qint32 getMatchesTemplate() const;
    void setMatchesTemplate(const qint32 &matches_template);
    bool is_matches_template_Set() const;
    bool is_matches_template_Valid() const;

    QString getPlate() const;
    void setPlate(const QString &plate);
    bool is_plate_Set() const;
    bool is_plate_Valid() const;

    double getProcessingTimeMs() const;
    void setProcessingTimeMs(const double &processing_time_ms);
    bool is_processing_time_ms_Set() const;
    bool is_processing_time_ms_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    double getRegionConfidence() const;
    void setRegionConfidence(const double &region_confidence);
    bool is_region_confidence_Set() const;
    bool is_region_confidence_Valid() const;

    qint32 getRequestedTopn() const;
    void setRequestedTopn(const qint32 &requested_topn);
    bool is_requested_topn_Set() const;
    bool is_requested_topn_Valid() const;

    OAIVehicle_details getVehicle() const;
    void setVehicle(const OAIVehicle_details &vehicle);
    bool is_vehicle_Set() const;
    bool is_vehicle_Valid() const;

    OAIRegion_of_interest getVehicleRegion() const;
    void setVehicleRegion(const OAIRegion_of_interest &vehicle_region);
    bool is_vehicle_region_Set() const;
    bool is_vehicle_region_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIPlate_candidate> m_candidates;
    bool m_candidates_isSet;
    bool m_candidates_isValid;

    double m_confidence;
    bool m_confidence_isSet;
    bool m_confidence_isValid;

    QList<OAICoordinate> m_coordinates;
    bool m_coordinates_isSet;
    bool m_coordinates_isValid;

    qint32 m_matches_template;
    bool m_matches_template_isSet;
    bool m_matches_template_isValid;

    QString m_plate;
    bool m_plate_isSet;
    bool m_plate_isValid;

    double m_processing_time_ms;
    bool m_processing_time_ms_isSet;
    bool m_processing_time_ms_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    double m_region_confidence;
    bool m_region_confidence_isSet;
    bool m_region_confidence_isValid;

    qint32 m_requested_topn;
    bool m_requested_topn_isSet;
    bool m_requested_topn_isValid;

    OAIVehicle_details m_vehicle;
    bool m_vehicle_isSet;
    bool m_vehicle_isValid;

    OAIRegion_of_interest m_vehicle_region;
    bool m_vehicle_region_isSet;
    bool m_vehicle_region_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlate_details)

#endif // OAIPlate_details_H
