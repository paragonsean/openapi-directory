/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetConfig_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetConfig_200_response::OAIGetConfig_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetConfig_200_response::OAIGetConfig_200_response() {
    this->initializeModel();
}

OAIGetConfig_200_response::~OAIGetConfig_200_response() {}

void OAIGetConfig_200_response::initializeModel() {

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_vehicle_labels_isSet = false;
    m_vehicle_labels_isValid = false;
}

void OAIGetConfig_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetConfig_200_response::fromJsonObject(QJsonObject json) {

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;

    m_vehicle_labels_isValid = ::OpenAPI::fromJsonValue(m_vehicle_labels, json[QString("vehicle_labels")]);
    m_vehicle_labels_isSet = !json[QString("vehicle_labels")].isNull() && m_vehicle_labels_isValid;
}

QString OAIGetConfig_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetConfig_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    if (m_vehicle_labels.isSet()) {
        obj.insert(QString("vehicle_labels"), ::OpenAPI::toJsonValue(m_vehicle_labels));
    }
    return obj;
}

QList<OAIGetConfig_200_response_countries_inner> OAIGetConfig_200_response::getCountries() const {
    return m_countries;
}
void OAIGetConfig_200_response::setCountries(const QList<OAIGetConfig_200_response_countries_inner> &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAIGetConfig_200_response::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAIGetConfig_200_response::is_countries_Valid() const{
    return m_countries_isValid;
}

OAIGetConfig_200_response_vehicle_labels OAIGetConfig_200_response::getVehicleLabels() const {
    return m_vehicle_labels;
}
void OAIGetConfig_200_response::setVehicleLabels(const OAIGetConfig_200_response_vehicle_labels &vehicle_labels) {
    m_vehicle_labels = vehicle_labels;
    m_vehicle_labels_isSet = true;
}

bool OAIGetConfig_200_response::is_vehicle_labels_Set() const{
    return m_vehicle_labels_isSet;
}

bool OAIGetConfig_200_response::is_vehicle_labels_Valid() const{
    return m_vehicle_labels_isValid;
}

bool OAIGetConfig_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetConfig_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
