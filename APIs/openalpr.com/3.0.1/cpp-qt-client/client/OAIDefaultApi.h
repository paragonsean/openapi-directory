/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetConfig_200_response.h"
#include "OAIHttpFileElement.h"
#include "OAIRecognizeFile_200_response.h"
#include "OAIRecognizeFile_400_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getConfig();

    /**
    * @param[in]  secret_key QString [required]
    * @param[in]  country QString [required]
    * @param[in]  image_bytes QString [required]
    * @param[in]  recognize_vehicle qint32 [optional]
    * @param[in]  return_image qint32 [optional]
    * @param[in]  topn qint32 [optional]
    */
    virtual void recognizeBytes(const QString &secret_key, const QString &country, const QString &image_bytes, const ::OpenAPI::OptionalParam<qint32> &recognize_vehicle = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &return_image = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &topn = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  secret_key QString [required]
    * @param[in]  country QString [required]
    * @param[in]  image OAIHttpFileElement [required]
    * @param[in]  recognize_vehicle qint32 [optional]
    * @param[in]  return_image qint32 [optional]
    * @param[in]  topn qint32 [optional]
    * @param[in]  is_cropped qint32 [optional]
    */
    virtual void recognizeFile(const QString &secret_key, const QString &country, const OAIHttpFileElement &image, const ::OpenAPI::OptionalParam<qint32> &recognize_vehicle = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &return_image = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &topn = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &is_cropped = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  image_url QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  country QString [required]
    * @param[in]  recognize_vehicle qint32 [optional]
    * @param[in]  return_image qint32 [optional]
    * @param[in]  topn qint32 [optional]
    */
    virtual void recognizeUrl(const QString &image_url, const QString &secret_key, const QString &country, const ::OpenAPI::OptionalParam<qint32> &recognize_vehicle = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &return_image = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &topn = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getConfigCallback(OAIHttpRequestWorker *worker);
    void recognizeBytesCallback(OAIHttpRequestWorker *worker);
    void recognizeFileCallback(OAIHttpRequestWorker *worker);
    void recognizeUrlCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getConfigSignal(OAIGetConfig_200_response summary);
    void recognizeBytesSignal(OAIRecognizeFile_200_response summary);
    void recognizeFileSignal(OAIRecognizeFile_200_response summary);
    void recognizeUrlSignal(OAIRecognizeFile_200_response summary);


    void getConfigSignalFull(OAIHttpRequestWorker *worker, OAIGetConfig_200_response summary);
    void recognizeBytesSignalFull(OAIHttpRequestWorker *worker, OAIRecognizeFile_200_response summary);
    void recognizeFileSignalFull(OAIHttpRequestWorker *worker, OAIRecognizeFile_200_response summary);
    void recognizeUrlSignalFull(OAIHttpRequestWorker *worker, OAIRecognizeFile_200_response summary);

    Q_DECL_DEPRECATED_X("Use getConfigSignalError() instead")
    void getConfigSignalE(OAIGetConfig_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigSignalError(OAIGetConfig_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizeBytesSignalError() instead")
    void recognizeBytesSignalE(OAIRecognizeFile_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recognizeBytesSignalError(OAIRecognizeFile_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizeFileSignalError() instead")
    void recognizeFileSignalE(OAIRecognizeFile_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recognizeFileSignalError(OAIRecognizeFile_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizeUrlSignalError() instead")
    void recognizeUrlSignalE(OAIRecognizeFile_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recognizeUrlSignalError(OAIRecognizeFile_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getConfigSignalErrorFull() instead")
    void getConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizeBytesSignalErrorFull() instead")
    void recognizeBytesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recognizeBytesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizeFileSignalErrorFull() instead")
    void recognizeFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recognizeFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizeUrlSignalErrorFull() instead")
    void recognizeUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recognizeUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
