/**
 * OpenALPR CarCheck API
 * The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecognizeFile_200_response_processing_time.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecognizeFile_200_response_processing_time::OAIRecognizeFile_200_response_processing_time(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecognizeFile_200_response_processing_time::OAIRecognizeFile_200_response_processing_time() {
    this->initializeModel();
}

OAIRecognizeFile_200_response_processing_time::~OAIRecognizeFile_200_response_processing_time() {}

void OAIRecognizeFile_200_response_processing_time::initializeModel() {

    m_plates_isSet = false;
    m_plates_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_vehicles_isSet = false;
    m_vehicles_isValid = false;
}

void OAIRecognizeFile_200_response_processing_time::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecognizeFile_200_response_processing_time::fromJsonObject(QJsonObject json) {

    m_plates_isValid = ::OpenAPI::fromJsonValue(m_plates, json[QString("plates")]);
    m_plates_isSet = !json[QString("plates")].isNull() && m_plates_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_vehicles_isValid = ::OpenAPI::fromJsonValue(m_vehicles, json[QString("vehicles")]);
    m_vehicles_isSet = !json[QString("vehicles")].isNull() && m_vehicles_isValid;
}

QString OAIRecognizeFile_200_response_processing_time::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecognizeFile_200_response_processing_time::asJsonObject() const {
    QJsonObject obj;
    if (m_plates_isSet) {
        obj.insert(QString("plates"), ::OpenAPI::toJsonValue(m_plates));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_vehicles_isSet) {
        obj.insert(QString("vehicles"), ::OpenAPI::toJsonValue(m_vehicles));
    }
    return obj;
}

double OAIRecognizeFile_200_response_processing_time::getPlates() const {
    return m_plates;
}
void OAIRecognizeFile_200_response_processing_time::setPlates(const double &plates) {
    m_plates = plates;
    m_plates_isSet = true;
}

bool OAIRecognizeFile_200_response_processing_time::is_plates_Set() const{
    return m_plates_isSet;
}

bool OAIRecognizeFile_200_response_processing_time::is_plates_Valid() const{
    return m_plates_isValid;
}

double OAIRecognizeFile_200_response_processing_time::getTotal() const {
    return m_total;
}
void OAIRecognizeFile_200_response_processing_time::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIRecognizeFile_200_response_processing_time::is_total_Set() const{
    return m_total_isSet;
}

bool OAIRecognizeFile_200_response_processing_time::is_total_Valid() const{
    return m_total_isValid;
}

double OAIRecognizeFile_200_response_processing_time::getVehicles() const {
    return m_vehicles;
}
void OAIRecognizeFile_200_response_processing_time::setVehicles(const double &vehicles) {
    m_vehicles = vehicles;
    m_vehicles_isSet = true;
}

bool OAIRecognizeFile_200_response_processing_time::is_vehicles_Set() const{
    return m_vehicles_isSet;
}

bool OAIRecognizeFile_200_response_processing_time::is_vehicles_Valid() const{
    return m_vehicles_isValid;
}

bool OAIRecognizeFile_200_response_processing_time::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_plates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicles_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecognizeFile_200_response_processing_time::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
