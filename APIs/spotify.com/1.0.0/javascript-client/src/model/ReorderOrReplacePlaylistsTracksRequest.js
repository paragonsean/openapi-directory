/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReorderOrReplacePlaylistsTracksRequest model module.
 * @module model/ReorderOrReplacePlaylistsTracksRequest
 * @version 1.0.0
 */
class ReorderOrReplacePlaylistsTracksRequest {
    /**
     * Constructs a new <code>ReorderOrReplacePlaylistsTracksRequest</code>.
     * @alias module:model/ReorderOrReplacePlaylistsTracksRequest
     * @extends Object
     */
    constructor() { 
        
        ReorderOrReplacePlaylistsTracksRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReorderOrReplacePlaylistsTracksRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReorderOrReplacePlaylistsTracksRequest} obj Optional instance to populate.
     * @return {module:model/ReorderOrReplacePlaylistsTracksRequest} The populated <code>ReorderOrReplacePlaylistsTracksRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReorderOrReplacePlaylistsTracksRequest();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('insert_before')) {
                obj['insert_before'] = ApiClient.convertToType(data['insert_before'], 'Number');
            }
            if (data.hasOwnProperty('range_length')) {
                obj['range_length'] = ApiClient.convertToType(data['range_length'], 'Number');
            }
            if (data.hasOwnProperty('range_start')) {
                obj['range_start'] = ApiClient.convertToType(data['range_start'], 'Number');
            }
            if (data.hasOwnProperty('snapshot_id')) {
                obj['snapshot_id'] = ApiClient.convertToType(data['snapshot_id'], 'String');
            }
            if (data.hasOwnProperty('uris')) {
                obj['uris'] = ApiClient.convertToType(data['uris'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReorderOrReplacePlaylistsTracksRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReorderOrReplacePlaylistsTracksRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['snapshot_id'] && !(typeof data['snapshot_id'] === 'string' || data['snapshot_id'] instanceof String)) {
            throw new Error("Expected the field `snapshot_id` to be a primitive type in the JSON string but got " + data['snapshot_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['uris'])) {
            throw new Error("Expected the field `uris` to be an array in the JSON data but got " + data['uris']);
        }

        return true;
    }


}



/**
 * The position where the items should be inserted.<br/>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br/>Examples:<br/>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br/>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0. 
 * @member {Number} insert_before
 */
ReorderOrReplacePlaylistsTracksRequest.prototype['insert_before'] = undefined;

/**
 * The amount of items to be reordered. Defaults to 1 if not set.<br/>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br/>Example:<br/>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2. 
 * @member {Number} range_length
 */
ReorderOrReplacePlaylistsTracksRequest.prototype['range_length'] = undefined;

/**
 * The position of the first item to be reordered. 
 * @member {Number} range_start
 */
ReorderOrReplacePlaylistsTracksRequest.prototype['range_start'] = undefined;

/**
 * The playlist's snapshot ID against which you want to make the changes. 
 * @member {String} snapshot_id
 */
ReorderOrReplacePlaylistsTracksRequest.prototype['snapshot_id'] = undefined;

/**
 * @member {Array.<String>} uris
 */
ReorderOrReplacePlaylistsTracksRequest.prototype['uris'] = undefined;






export default ReorderOrReplacePlaylistsTracksRequest;

