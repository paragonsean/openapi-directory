/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArtistObject from './ArtistObject';
import EpisodeObject from './EpisodeObject';
import EpisodeRestrictionObject from './EpisodeRestrictionObject';
import ExternalIdObject from './ExternalIdObject';
import ExternalUrlObject from './ExternalUrlObject';
import ImageObject from './ImageObject';
import ResumePointObject from './ResumePointObject';
import SimplifiedAlbumObject from './SimplifiedAlbumObject';
import SimplifiedShowObject from './SimplifiedShowObject';
import TrackObject from './TrackObject';

/**
 * The PlaylistTrackObjectTrack model module.
 * @module model/PlaylistTrackObjectTrack
 * @version 1.0.0
 */
class PlaylistTrackObjectTrack {
    /**
     * Constructs a new <code>PlaylistTrackObjectTrack</code>.
     * Information about the track or episode.
     * @alias module:model/PlaylistTrackObjectTrack
     * @param {(module:model/EpisodeObject|module:model/TrackObject)} instance The actual instance to initialize PlaylistTrackObjectTrack.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "TrackObject") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TrackObject.validateJSON(instance); // throw an exception if no match
                // create TrackObject from JS object
                this.actualInstance = TrackObject.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TrackObject
            errorMessages.push("Failed to construct TrackObject: " + err)
        }

        try {
            if (typeof instance === "EpisodeObject") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                EpisodeObject.validateJSON(instance); // throw an exception if no match
                // create EpisodeObject from JS object
                this.actualInstance = EpisodeObject.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EpisodeObject
            errorMessages.push("Failed to construct EpisodeObject: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `PlaylistTrackObjectTrack` with oneOf schemas EpisodeObject, TrackObject. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `PlaylistTrackObjectTrack` with oneOf schemas EpisodeObject, TrackObject. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PlaylistTrackObjectTrack</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlaylistTrackObjectTrack} obj Optional instance to populate.
     * @return {module:model/PlaylistTrackObjectTrack} The populated <code>PlaylistTrackObjectTrack</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PlaylistTrackObjectTrack(data);
    }

    /**
     * Gets the actual instance, which can be <code>EpisodeObject</code>, <code>TrackObject</code>.
     * @return {(module:model/EpisodeObject|module:model/TrackObject)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>EpisodeObject</code>, <code>TrackObject</code>.
     * @param {(module:model/EpisodeObject|module:model/TrackObject)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PlaylistTrackObjectTrack.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PlaylistTrackObjectTrack from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PlaylistTrackObjectTrack} An instance of PlaylistTrackObjectTrack.
     */
    static fromJSON = function(json_string){
        return PlaylistTrackObjectTrack.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The album on which the track appears. The album object includes a link in `href` to full information about the album. 
 * @member {module:model/SimplifiedAlbumObject} album
 */
PlaylistTrackObjectTrack.prototype['album'] = undefined;

/**
 * The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist. 
 * @member {Array.<module:model/ArtistObject>} artists
 */
PlaylistTrackObjectTrack.prototype['artists'] = undefined;

/**
 * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
 * @member {Array.<String>} available_markets
 */
PlaylistTrackObjectTrack.prototype['available_markets'] = undefined;

/**
 * The disc number (usually `1` unless the album consists of more than one disc). 
 * @member {Number} disc_number
 */
PlaylistTrackObjectTrack.prototype['disc_number'] = undefined;

/**
 * The episode length in milliseconds. 
 * @member {Number} duration_ms
 */
PlaylistTrackObjectTrack.prototype['duration_ms'] = undefined;

/**
 * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
 * @member {Boolean} explicit
 */
PlaylistTrackObjectTrack.prototype['explicit'] = undefined;

/**
 * Known external IDs for the track. 
 * @member {module:model/ExternalIdObject} external_ids
 */
PlaylistTrackObjectTrack.prototype['external_ids'] = undefined;

/**
 * External URLs for this episode. 
 * @member {module:model/ExternalUrlObject} external_urls
 */
PlaylistTrackObjectTrack.prototype['external_urls'] = undefined;

/**
 * A link to the Web API endpoint providing full details of the episode. 
 * @member {String} href
 */
PlaylistTrackObjectTrack.prototype['href'] = undefined;

/**
 * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
 * @member {String} id
 */
PlaylistTrackObjectTrack.prototype['id'] = undefined;

/**
 * Whether or not the track is from a local file. 
 * @member {Boolean} is_local
 */
PlaylistTrackObjectTrack.prototype['is_local'] = undefined;

/**
 * True if the episode is playable in the given market. Otherwise false. 
 * @member {Boolean} is_playable
 */
PlaylistTrackObjectTrack.prototype['is_playable'] = undefined;

/**
 * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track. 
 * @member {Object} linked_from
 */
PlaylistTrackObjectTrack.prototype['linked_from'] = undefined;

/**
 * The name of the episode. 
 * @member {String} name
 */
PlaylistTrackObjectTrack.prototype['name'] = undefined;

/**
 * The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._ 
 * @member {Number} popularity
 */
PlaylistTrackObjectTrack.prototype['popularity'] = undefined;

/**
 * A link to a 30 second preview (MP3 format) of the track. Can be `null` 
 * @member {String} preview_url
 */
PlaylistTrackObjectTrack.prototype['preview_url'] = undefined;

/**
 * Included in the response when a content restriction is applied. 
 * @member {module:model/EpisodeRestrictionObject} restrictions
 */
PlaylistTrackObjectTrack.prototype['restrictions'] = undefined;

/**
 * The number of the track. If an album has several discs, the track number is the number on the specified disc. 
 * @member {Number} track_number
 */
PlaylistTrackObjectTrack.prototype['track_number'] = undefined;

/**
 * The object type: \"track\". 
 * @member {module:model/PlaylistTrackObjectTrack.TypeEnum} type
 */
PlaylistTrackObjectTrack.prototype['type'] = undefined;

/**
 * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
 * @member {String} uri
 */
PlaylistTrackObjectTrack.prototype['uri'] = undefined;

/**
 * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
 * @member {String} audio_preview_url
 */
PlaylistTrackObjectTrack.prototype['audio_preview_url'] = undefined;

/**
 * A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
 * @member {String} description
 */
PlaylistTrackObjectTrack.prototype['description'] = undefined;

/**
 * A description of the episode. This field may contain HTML tags. 
 * @member {String} html_description
 */
PlaylistTrackObjectTrack.prototype['html_description'] = undefined;

/**
 * The cover art for the episode in various sizes, widest first. 
 * @member {Array.<module:model/ImageObject>} images
 */
PlaylistTrackObjectTrack.prototype['images'] = undefined;

/**
 * True if the episode is hosted outside of Spotify's CDN. 
 * @member {Boolean} is_externally_hosted
 */
PlaylistTrackObjectTrack.prototype['is_externally_hosted'] = undefined;

/**
 * The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead. 
 * @member {String} language
 */
PlaylistTrackObjectTrack.prototype['language'] = undefined;

/**
 * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
 * @member {Array.<String>} languages
 */
PlaylistTrackObjectTrack.prototype['languages'] = undefined;

/**
 * The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
 * @member {String} release_date
 */
PlaylistTrackObjectTrack.prototype['release_date'] = undefined;

/**
 * The precision with which `release_date` value is known. 
 * @member {module:model/PlaylistTrackObjectTrack.ReleaseDatePrecisionEnum} release_date_precision
 */
PlaylistTrackObjectTrack.prototype['release_date_precision'] = undefined;

/**
 * The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'. 
 * @member {module:model/ResumePointObject} resume_point
 */
PlaylistTrackObjectTrack.prototype['resume_point'] = undefined;

/**
 * @member {module:model/SimplifiedShowObject} show
 */
PlaylistTrackObjectTrack.prototype['show'] = undefined;


PlaylistTrackObjectTrack.OneOf = ["EpisodeObject", "TrackObject"];

export default PlaylistTrackObjectTrack;

