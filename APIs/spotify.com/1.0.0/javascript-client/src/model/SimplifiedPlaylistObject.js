/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalUrlObject from './ExternalUrlObject';
import ImageObject from './ImageObject';
import PlaylistOwnerObject from './PlaylistOwnerObject';
import PlaylistTracksRefObject from './PlaylistTracksRefObject';

/**
 * The SimplifiedPlaylistObject model module.
 * @module model/SimplifiedPlaylistObject
 * @version 1.0.0
 */
class SimplifiedPlaylistObject {
    /**
     * Constructs a new <code>SimplifiedPlaylistObject</code>.
     * @alias module:model/SimplifiedPlaylistObject
     */
    constructor() { 
        
        SimplifiedPlaylistObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SimplifiedPlaylistObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimplifiedPlaylistObject} obj Optional instance to populate.
     * @return {module:model/SimplifiedPlaylistObject} The populated <code>SimplifiedPlaylistObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimplifiedPlaylistObject();

            if (data.hasOwnProperty('collaborative')) {
                obj['collaborative'] = ApiClient.convertToType(data['collaborative'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('external_urls')) {
                obj['external_urls'] = ApiClient.convertToType(data['external_urls'], ExternalUrlObject);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [ImageObject]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], PlaylistOwnerObject);
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('snapshot_id')) {
                obj['snapshot_id'] = ApiClient.convertToType(data['snapshot_id'], 'String');
            }
            if (data.hasOwnProperty('tracks')) {
                obj['tracks'] = ApiClient.convertToType(data['tracks'], PlaylistTracksRefObject);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimplifiedPlaylistObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimplifiedPlaylistObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `external_urls`
        if (data['external_urls']) { // data not null
          ExternalUrlObject.validateJSON(data['external_urls']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                ImageObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          PlaylistOwnerObject.validateJSON(data['owner']);
        }
        // ensure the json data is a string
        if (data['snapshot_id'] && !(typeof data['snapshot_id'] === 'string' || data['snapshot_id'] instanceof String)) {
            throw new Error("Expected the field `snapshot_id` to be a primitive type in the JSON string but got " + data['snapshot_id']);
        }
        // validate the optional field `tracks`
        if (data['tracks']) { // data not null
          PlaylistTracksRefObject.validateJSON(data['tracks']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * `true` if the owner allows other users to modify the playlist. 
 * @member {Boolean} collaborative
 */
SimplifiedPlaylistObject.prototype['collaborative'] = undefined;

/**
 * The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`. 
 * @member {String} description
 */
SimplifiedPlaylistObject.prototype['description'] = undefined;

/**
 * Known external URLs for this playlist. 
 * @member {module:model/ExternalUrlObject} external_urls
 */
SimplifiedPlaylistObject.prototype['external_urls'] = undefined;

/**
 * A link to the Web API endpoint providing full details of the playlist. 
 * @member {String} href
 */
SimplifiedPlaylistObject.prototype['href'] = undefined;

/**
 * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 
 * @member {String} id
 */
SimplifiedPlaylistObject.prototype['id'] = undefined;

/**
 * Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._ 
 * @member {Array.<module:model/ImageObject>} images
 */
SimplifiedPlaylistObject.prototype['images'] = undefined;

/**
 * The name of the playlist. 
 * @member {String} name
 */
SimplifiedPlaylistObject.prototype['name'] = undefined;

/**
 * The user who owns the playlist 
 * @member {module:model/PlaylistOwnerObject} owner
 */
SimplifiedPlaylistObject.prototype['owner'] = undefined;

/**
 * The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists) 
 * @member {Boolean} public
 */
SimplifiedPlaylistObject.prototype['public'] = undefined;

/**
 * The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version 
 * @member {String} snapshot_id
 */
SimplifiedPlaylistObject.prototype['snapshot_id'] = undefined;

/**
 * A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available. 
 * @member {module:model/PlaylistTracksRefObject} tracks
 */
SimplifiedPlaylistObject.prototype['tracks'] = undefined;

/**
 * The object type: \"playlist\" 
 * @member {String} type
 */
SimplifiedPlaylistObject.prototype['type'] = undefined;

/**
 * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 
 * @member {String} uri
 */
SimplifiedPlaylistObject.prototype['uri'] = undefined;






export default SimplifiedPlaylistObject;

