/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CurrentlyPlayingContextObject from '../model/CurrentlyPlayingContextObject';
import CursorPagingPlayHistoryObject from '../model/CursorPagingPlayHistoryObject';
import GetAUsersAvailableDevices200Response from '../model/GetAUsersAvailableDevices200Response';
import GetMultipleAlbums401Response from '../model/GetMultipleAlbums401Response';
import QueueObject from '../model/QueueObject';
import StartAUsersPlaybackRequest from '../model/StartAUsersPlaybackRequest';
import TransferAUsersPlaybackRequest from '../model/TransferAUsersPlaybackRequest';

/**
* Player service.
* @module api/PlayerApi
* @version 1.0.0
*/
export default class PlayerApi {

    /**
    * Constructs a new PlayerApi. 
    * @alias module:api/PlayerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addToQueue operation.
     * @callback module:api/PlayerApi~addToQueueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Item to Playback Queue 
     * Add an item to the end of the user's current playback queue. 
     * @param {String} uri 
     * @param {Object} opts Optional parameters
     * @param {String} [deviceId] 
     * @param {module:api/PlayerApi~addToQueueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addToQueue(uri, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling addToQueue");
      }

      let pathParams = {
      };
      let queryParams = {
        'uri': uri,
        'device_id': opts['deviceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/player/queue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAUsersAvailableDevices operation.
     * @callback module:api/PlayerApi~getAUsersAvailableDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAUsersAvailableDevices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Available Devices 
     * Get information about a user’s available devices. 
     * @param {module:api/PlayerApi~getAUsersAvailableDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAUsersAvailableDevices200Response}
     */
    getAUsersAvailableDevices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAUsersAvailableDevices200Response;
      return this.apiClient.callApi(
        '/me/player/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInformationAboutTheUsersCurrentPlayback operation.
     * @callback module:api/PlayerApi~getInformationAboutTheUsersCurrentPlaybackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrentlyPlayingContextObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Playback State 
     * Get information about the user’s current playback state, including track or episode, progress, and active device. 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {String} [additionalTypes] 
     * @param {module:api/PlayerApi~getInformationAboutTheUsersCurrentPlaybackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrentlyPlayingContextObject}
     */
    getInformationAboutTheUsersCurrentPlayback(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'market': opts['market'],
        'additional_types': opts['additionalTypes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurrentlyPlayingContextObject;
      return this.apiClient.callApi(
        '/me/player', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueue operation.
     * @callback module:api/PlayerApi~getQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the User's Queue 
     * Get the list of objects that make up the user's queue. 
     * @param {module:api/PlayerApi~getQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueObject}
     */
    getQueue(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueueObject;
      return this.apiClient.callApi(
        '/me/player/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentlyPlayed operation.
     * @callback module:api/PlayerApi~getRecentlyPlayedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CursorPagingPlayHistoryObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recently Played Tracks 
     * Get tracks from the current user's recently played tracks. _**Note**: Currently doesn't support podcast episodes._ 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] 
     * @param {Number} [after] 
     * @param {Number} [before] 
     * @param {module:api/PlayerApi~getRecentlyPlayedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CursorPagingPlayHistoryObject}
     */
    getRecentlyPlayed(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'after': opts['after'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CursorPagingPlayHistoryObject;
      return this.apiClient.callApi(
        '/me/player/recently-played', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTheUsersCurrentlyPlayingTrack operation.
     * @callback module:api/PlayerApi~getTheUsersCurrentlyPlayingTrackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrentlyPlayingContextObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Currently Playing Track 
     * Get the object currently being played on the user's Spotify account. 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {String} [additionalTypes] 
     * @param {module:api/PlayerApi~getTheUsersCurrentlyPlayingTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrentlyPlayingContextObject}
     */
    getTheUsersCurrentlyPlayingTrack(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'market': opts['market'],
        'additional_types': opts['additionalTypes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurrentlyPlayingContextObject;
      return this.apiClient.callApi(
        '/me/player/currently-playing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pauseAUsersPlayback operation.
     * @callback module:api/PlayerApi~pauseAUsersPlaybackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause Playback 
     * Pause playback on the user's account. 
     * @param {Object} opts Optional parameters
     * @param {String} [deviceId] 
     * @param {module:api/PlayerApi~pauseAUsersPlaybackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pauseAUsersPlayback(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'device_id': opts['deviceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/player/pause', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seekToPositionInCurrentlyPlayingTrack operation.
     * @callback module:api/PlayerApi~seekToPositionInCurrentlyPlayingTrackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Seek To Position 
     * Seeks to the given position in the user’s currently playing track. 
     * @param {Number} positionMs 
     * @param {Object} opts Optional parameters
     * @param {String} [deviceId] 
     * @param {module:api/PlayerApi~seekToPositionInCurrentlyPlayingTrackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    seekToPositionInCurrentlyPlayingTrack(positionMs, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'positionMs' is set
      if (positionMs === undefined || positionMs === null) {
        throw new Error("Missing the required parameter 'positionMs' when calling seekToPositionInCurrentlyPlayingTrack");
      }

      let pathParams = {
      };
      let queryParams = {
        'position_ms': positionMs,
        'device_id': opts['deviceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/player/seek', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRepeatModeOnUsersPlayback operation.
     * @callback module:api/PlayerApi~setRepeatModeOnUsersPlaybackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Repeat Mode 
     * Set the repeat mode for the user's playback. Options are repeat-track, repeat-context, and off. 
     * @param {String} state 
     * @param {Object} opts Optional parameters
     * @param {String} [deviceId] 
     * @param {module:api/PlayerApi~setRepeatModeOnUsersPlaybackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setRepeatModeOnUsersPlayback(state, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling setRepeatModeOnUsersPlayback");
      }

      let pathParams = {
      };
      let queryParams = {
        'state': state,
        'device_id': opts['deviceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/player/repeat', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setVolumeForUsersPlayback operation.
     * @callback module:api/PlayerApi~setVolumeForUsersPlaybackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Playback Volume 
     * Set the volume for the user’s current playback device. 
     * @param {Number} volumePercent 
     * @param {Object} opts Optional parameters
     * @param {String} [deviceId] 
     * @param {module:api/PlayerApi~setVolumeForUsersPlaybackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setVolumeForUsersPlayback(volumePercent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumePercent' is set
      if (volumePercent === undefined || volumePercent === null) {
        throw new Error("Missing the required parameter 'volumePercent' when calling setVolumeForUsersPlayback");
      }

      let pathParams = {
      };
      let queryParams = {
        'volume_percent': volumePercent,
        'device_id': opts['deviceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/player/volume', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the skipUsersPlaybackToNextTrack operation.
     * @callback module:api/PlayerApi~skipUsersPlaybackToNextTrackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Skip To Next 
     * Skips to next track in the user’s queue. 
     * @param {Object} opts Optional parameters
     * @param {String} [deviceId] 
     * @param {module:api/PlayerApi~skipUsersPlaybackToNextTrackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    skipUsersPlaybackToNextTrack(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'device_id': opts['deviceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/player/next', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the skipUsersPlaybackToPreviousTrack operation.
     * @callback module:api/PlayerApi~skipUsersPlaybackToPreviousTrackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Skip To Previous 
     * Skips to previous track in the user’s queue. 
     * @param {Object} opts Optional parameters
     * @param {String} [deviceId] 
     * @param {module:api/PlayerApi~skipUsersPlaybackToPreviousTrackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    skipUsersPlaybackToPreviousTrack(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'device_id': opts['deviceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/player/previous', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startAUsersPlayback operation.
     * @callback module:api/PlayerApi~startAUsersPlaybackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start/Resume Playback 
     * Start a new context or resume current playback on the user's active device. 
     * @param {Object} opts Optional parameters
     * @param {String} [deviceId] 
     * @param {module:model/StartAUsersPlaybackRequest} [startAUsersPlaybackRequest] 
     * @param {module:api/PlayerApi~startAUsersPlaybackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startAUsersPlayback(opts, callback) {
      opts = opts || {};
      let postBody = opts['startAUsersPlaybackRequest'];

      let pathParams = {
      };
      let queryParams = {
        'device_id': opts['deviceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/player/play', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the toggleShuffleForUsersPlayback operation.
     * @callback module:api/PlayerApi~toggleShuffleForUsersPlaybackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Toggle Playback Shuffle 
     * Toggle shuffle on or off for user’s playback. 
     * @param {Boolean} state 
     * @param {Object} opts Optional parameters
     * @param {String} [deviceId] 
     * @param {module:api/PlayerApi~toggleShuffleForUsersPlaybackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    toggleShuffleForUsersPlayback(state, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling toggleShuffleForUsersPlayback");
      }

      let pathParams = {
      };
      let queryParams = {
        'state': state,
        'device_id': opts['deviceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/player/shuffle', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferAUsersPlayback operation.
     * @callback module:api/PlayerApi~transferAUsersPlaybackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer Playback 
     * Transfer playback to a new device and determine if it should start playing. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TransferAUsersPlaybackRequest} [transferAUsersPlaybackRequest] 
     * @param {module:api/PlayerApi~transferAUsersPlaybackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transferAUsersPlayback(opts, callback) {
      opts = opts || {};
      let postBody = opts['transferAUsersPlaybackRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/player', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
