/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddTracksToPlaylistRequest from '../model/AddTracksToPlaylistRequest';
import ChangePlaylistDetailsRequest from '../model/ChangePlaylistDetailsRequest';
import CreatePlaylistRequest from '../model/CreatePlaylistRequest';
import FollowPlaylistRequest from '../model/FollowPlaylistRequest';
import GetMultipleAlbums401Response from '../model/GetMultipleAlbums401Response';
import ImageObject from '../model/ImageObject';
import PagingFeaturedPlaylistObject from '../model/PagingFeaturedPlaylistObject';
import PagingPlaylistObject from '../model/PagingPlaylistObject';
import PagingPlaylistTrackObject from '../model/PagingPlaylistTrackObject';
import PlaylistObject from '../model/PlaylistObject';
import RemoveTracksPlaylistRequest from '../model/RemoveTracksPlaylistRequest';
import ReorderOrReplacePlaylistsTracks200Response from '../model/ReorderOrReplacePlaylistsTracks200Response';
import ReorderOrReplacePlaylistsTracksRequest from '../model/ReorderOrReplacePlaylistsTracksRequest';

/**
* Playlists service.
* @module api/PlaylistsApi
* @version 1.0.0
*/
export default class PlaylistsApi {

    /**
    * Constructs a new PlaylistsApi. 
    * @alias module:api/PlaylistsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTracksToPlaylist operation.
     * @callback module:api/PlaylistsApi~addTracksToPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReorderOrReplacePlaylistsTracks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Items to Playlist 
     * Add one or more items to a user's playlist. 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {Number} [position] 
     * @param {String} [uris] 
     * @param {module:model/AddTracksToPlaylistRequest} [addTracksToPlaylistRequest] 
     * @param {module:api/PlaylistsApi~addTracksToPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReorderOrReplacePlaylistsTracks200Response}
     */
    addTracksToPlaylist(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = opts['addTracksToPlaylistRequest'];
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling addTracksToPlaylist");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
        'position': opts['position'],
        'uris': opts['uris']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReorderOrReplacePlaylistsTracks200Response;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/tracks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePlaylistDetails operation.
     * @callback module:api/PlaylistsApi~changePlaylistDetailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Playlist Details 
     * Change a playlist's name and public/private state. (The user must, of course, own the playlist.) 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePlaylistDetailsRequest} [changePlaylistDetailsRequest] 
     * @param {module:api/PlaylistsApi~changePlaylistDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePlaylistDetails(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changePlaylistDetailsRequest'];
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling changePlaylistDetails");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkIfUserFollowsPlaylist_0 operation.
     * @callback module:api/PlaylistsApi~checkIfUserFollowsPlaylist_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if Users Follow Playlist 
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @param {String} playlistId 
     * @param {String} ids 
     * @param {module:api/PlaylistsApi~checkIfUserFollowsPlaylist_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkIfUserFollowsPlaylist_0(playlistId, ids, callback) {
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling checkIfUserFollowsPlaylist_0");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkIfUserFollowsPlaylist_0");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/followers/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPlaylist operation.
     * @callback module:api/PlaylistsApi~createPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Playlist 
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePlaylistRequest} [createPlaylistRequest] 
     * @param {module:api/PlaylistsApi~createPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistObject}
     */
    createPlaylist(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createPlaylistRequest'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createPlaylist");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlaylistObject;
      return this.apiClient.callApi(
        '/users/{user_id}/playlists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the followPlaylist_0 operation.
     * @callback module:api/PlaylistsApi~followPlaylist_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow Playlist 
     * Add the current user as a follower of a playlist. 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {module:model/FollowPlaylistRequest} [followPlaylistRequest] 
     * @param {module:api/PlaylistsApi~followPlaylist_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    followPlaylist_0(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = opts['followPlaylistRequest'];
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling followPlaylist_0");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/followers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getACategoriesPlaylists operation.
     * @callback module:api/PlaylistsApi~getACategoriesPlaylistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingFeaturedPlaylistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Category's Playlists 
     * Get a list of Spotify playlists tagged with a particular category. 
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {String} [country] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/PlaylistsApi~getACategoriesPlaylistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingFeaturedPlaylistObject}
     */
    getACategoriesPlaylists(categoryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getACategoriesPlaylists");
      }

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
        'country': opts['country'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingFeaturedPlaylistObject;
      return this.apiClient.callApi(
        '/browse/categories/{category_id}/playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAListOfCurrentUsersPlaylists operation.
     * @callback module:api/PlaylistsApi~getAListOfCurrentUsersPlaylistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingPlaylistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Current User's Playlists 
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/PlaylistsApi~getAListOfCurrentUsersPlaylistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingPlaylistObject}
     */
    getAListOfCurrentUsersPlaylists(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingPlaylistObject;
      return this.apiClient.callApi(
        '/me/playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeaturedPlaylists operation.
     * @callback module:api/PlaylistsApi~getFeaturedPlaylistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingFeaturedPlaylistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Featured Playlists 
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab). 
     * @param {Object} opts Optional parameters
     * @param {String} [country] 
     * @param {String} [locale] 
     * @param {String} [timestamp] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/PlaylistsApi~getFeaturedPlaylistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingFeaturedPlaylistObject}
     */
    getFeaturedPlaylists(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'country': opts['country'],
        'locale': opts['locale'],
        'timestamp': opts['timestamp'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingFeaturedPlaylistObject;
      return this.apiClient.callApi(
        '/browse/featured-playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListUsersPlaylists operation.
     * @callback module:api/PlaylistsApi~getListUsersPlaylistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingPlaylistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Playlists 
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/PlaylistsApi~getListUsersPlaylistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingPlaylistObject}
     */
    getListUsersPlaylists(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getListUsersPlaylists");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingPlaylistObject;
      return this.apiClient.callApi(
        '/users/{user_id}/playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylist operation.
     * @callback module:api/PlaylistsApi~getPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Playlist 
     * Get a playlist owned by a Spotify user. 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {String} [fields] 
     * @param {String} [additionalTypes] 
     * @param {module:api/PlaylistsApi~getPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistObject}
     */
    getPlaylist(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getPlaylist");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
        'market': opts['market'],
        'fields': opts['fields'],
        'additional_types': opts['additionalTypes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlaylistObject;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylistCover operation.
     * @callback module:api/PlaylistsApi~getPlaylistCoverCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Playlist Cover Image 
     * Get the current image associated with a specific playlist. 
     * @param {String} playlistId 
     * @param {module:api/PlaylistsApi~getPlaylistCoverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageObject>}
     */
    getPlaylistCover(playlistId, callback) {
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getPlaylistCover");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ImageObject];
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylistsTracks operation.
     * @callback module:api/PlaylistsApi~getPlaylistsTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingPlaylistTrackObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Playlist Items 
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {String} [fields] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {String} [additionalTypes] 
     * @param {module:api/PlaylistsApi~getPlaylistsTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingPlaylistTrackObject}
     */
    getPlaylistsTracks(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getPlaylistsTracks");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
        'market': opts['market'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'additional_types': opts['additionalTypes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingPlaylistTrackObject;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTracksPlaylist operation.
     * @callback module:api/PlaylistsApi~removeTracksPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReorderOrReplacePlaylistsTracks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Playlist Items 
     * Remove one or more items from a user's playlist. 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
     * @param {module:api/PlaylistsApi~removeTracksPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReorderOrReplacePlaylistsTracks200Response}
     */
    removeTracksPlaylist(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeTracksPlaylistRequest'];
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling removeTracksPlaylist");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReorderOrReplacePlaylistsTracks200Response;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/tracks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reorderOrReplacePlaylistsTracks operation.
     * @callback module:api/PlaylistsApi~reorderOrReplacePlaylistsTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReorderOrReplacePlaylistsTracks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Playlist Items 
     * Either reorder or replace items in a playlist depending on the request's parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body. To replace items, include `uris` as either a query parameter or in the request's body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can't be applied together in a single request. 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {String} [uris] 
     * @param {module:model/ReorderOrReplacePlaylistsTracksRequest} [reorderOrReplacePlaylistsTracksRequest] 
     * @param {module:api/PlaylistsApi~reorderOrReplacePlaylistsTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReorderOrReplacePlaylistsTracks200Response}
     */
    reorderOrReplacePlaylistsTracks(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = opts['reorderOrReplacePlaylistsTracksRequest'];
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling reorderOrReplacePlaylistsTracks");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
        'uris': opts['uris']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReorderOrReplacePlaylistsTracks200Response;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/tracks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unfollowPlaylist_0 operation.
     * @callback module:api/PlaylistsApi~unfollowPlaylist_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow Playlist 
     * Remove the current user as a follower of a playlist. 
     * @param {String} playlistId 
     * @param {module:api/PlaylistsApi~unfollowPlaylist_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    unfollowPlaylist_0(playlistId, callback) {
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling unfollowPlaylist_0");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/followers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadCustomPlaylistCover operation.
     * @callback module:api/PlaylistsApi~uploadCustomPlaylistCoverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Custom Playlist Cover Image 
     * Replace the image used to represent a specific playlist. 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {Blob} [body] 
     * @param {module:api/PlaylistsApi~uploadCustomPlaylistCoverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadCustomPlaylistCover(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling uploadCustomPlaylistCover");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['image/jpeg'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/images', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
