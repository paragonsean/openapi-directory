/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddTracksToPlaylistRequest from '../model/AddTracksToPlaylistRequest';
import AudioAnalysisObject from '../model/AudioAnalysisObject';
import AudioFeaturesObject from '../model/AudioFeaturesObject';
import GetAnArtistsTopTracks200Response from '../model/GetAnArtistsTopTracks200Response';
import GetMultipleAlbums401Response from '../model/GetMultipleAlbums401Response';
import GetSeveralAudioFeatures200Response from '../model/GetSeveralAudioFeatures200Response';
import GetUsersTopArtistsAndTracks200Response from '../model/GetUsersTopArtistsAndTracks200Response';
import PagingPlaylistTrackObject from '../model/PagingPlaylistTrackObject';
import PagingSavedTrackObject from '../model/PagingSavedTrackObject';
import PagingSimplifiedTrackObject from '../model/PagingSimplifiedTrackObject';
import RecommendationsObject from '../model/RecommendationsObject';
import RemoveTracksPlaylistRequest from '../model/RemoveTracksPlaylistRequest';
import ReorderOrReplacePlaylistsTracks200Response from '../model/ReorderOrReplacePlaylistsTracks200Response';
import ReorderOrReplacePlaylistsTracksRequest from '../model/ReorderOrReplacePlaylistsTracksRequest';
import SaveAlbumsUserRequest from '../model/SaveAlbumsUserRequest';
import SaveTracksUserRequest from '../model/SaveTracksUserRequest';
import TrackObject from '../model/TrackObject';

/**
* Tracks service.
* @module api/TracksApi
* @version 1.0.0
*/
export default class TracksApi {

    /**
    * Constructs a new TracksApi. 
    * @alias module:api/TracksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTracksToPlaylist_0 operation.
     * @callback module:api/TracksApi~addTracksToPlaylist_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReorderOrReplacePlaylistsTracks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Items to Playlist 
     * Add one or more items to a user's playlist. 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {Number} [position] 
     * @param {String} [uris] 
     * @param {module:model/AddTracksToPlaylistRequest} [addTracksToPlaylistRequest] 
     * @param {module:api/TracksApi~addTracksToPlaylist_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReorderOrReplacePlaylistsTracks200Response}
     */
    addTracksToPlaylist_0(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = opts['addTracksToPlaylistRequest'];
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling addTracksToPlaylist_0");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
        'position': opts['position'],
        'uris': opts['uris']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReorderOrReplacePlaylistsTracks200Response;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/tracks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkUsersSavedTracks operation.
     * @callback module:api/TracksApi~checkUsersSavedTracksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check User's Saved Tracks 
     * Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library. 
     * @param {String} ids 
     * @param {module:api/TracksApi~checkUsersSavedTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkUsersSavedTracks(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkUsersSavedTracks");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/me/tracks/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnAlbumsTracks_0 operation.
     * @callback module:api/TracksApi~getAnAlbumsTracks_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSimplifiedTrackObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Album Tracks 
     * Get Spotify catalog information about an albumâ€™s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/TracksApi~getAnAlbumsTracks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSimplifiedTrackObject}
     */
    getAnAlbumsTracks_0(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnAlbumsTracks_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'market': opts['market'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSimplifiedTrackObject;
      return this.apiClient.callApi(
        '/albums/{id}/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnArtistsTopTracks_0 operation.
     * @callback module:api/TracksApi~getAnArtistsTopTracks_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAnArtistsTopTracks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artist's Top Tracks 
     * Get Spotify catalog information about an artist's top tracks by country. 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {module:api/TracksApi~getAnArtistsTopTracks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAnArtistsTopTracks200Response}
     */
    getAnArtistsTopTracks_0(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnArtistsTopTracks_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'market': opts['market']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAnArtistsTopTracks200Response;
      return this.apiClient.callApi(
        '/artists/{id}/top-tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAudioAnalysis operation.
     * @callback module:api/TracksApi~getAudioAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AudioAnalysisObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Track's Audio Analysis 
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the trackâ€™s structure and musical content, including rhythm, pitch, and timbre. 
     * @param {String} id 
     * @param {module:api/TracksApi~getAudioAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AudioAnalysisObject}
     */
    getAudioAnalysis(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAudioAnalysis");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AudioAnalysisObject;
      return this.apiClient.callApi(
        '/audio-analysis/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAudioFeatures operation.
     * @callback module:api/TracksApi~getAudioFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AudioFeaturesObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Track's Audio Features 
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     * @param {String} id 
     * @param {module:api/TracksApi~getAudioFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AudioFeaturesObject}
     */
    getAudioFeatures(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAudioFeatures");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AudioFeaturesObject;
      return this.apiClient.callApi(
        '/audio-features/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylistsTracks_0 operation.
     * @callback module:api/TracksApi~getPlaylistsTracks_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingPlaylistTrackObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Playlist Items 
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {String} [fields] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {String} [additionalTypes] 
     * @param {module:api/TracksApi~getPlaylistsTracks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingPlaylistTrackObject}
     */
    getPlaylistsTracks_0(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getPlaylistsTracks_0");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
        'market': opts['market'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'additional_types': opts['additionalTypes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingPlaylistTrackObject;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendations operation.
     * @callback module:api/TracksApi~getRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendationsObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recommendations 
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     * @param {String} seedArtists 
     * @param {String} seedGenres 
     * @param {String} seedTracks 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] 
     * @param {String} [market] 
     * @param {Number} [minAcousticness] 
     * @param {Number} [maxAcousticness] 
     * @param {Number} [targetAcousticness] 
     * @param {Number} [minDanceability] 
     * @param {Number} [maxDanceability] 
     * @param {Number} [targetDanceability] 
     * @param {Number} [minDurationMs] 
     * @param {Number} [maxDurationMs] 
     * @param {Number} [targetDurationMs] 
     * @param {Number} [minEnergy] 
     * @param {Number} [maxEnergy] 
     * @param {Number} [targetEnergy] 
     * @param {Number} [minInstrumentalness] 
     * @param {Number} [maxInstrumentalness] 
     * @param {Number} [targetInstrumentalness] 
     * @param {Number} [minKey] 
     * @param {Number} [maxKey] 
     * @param {Number} [targetKey] 
     * @param {Number} [minLiveness] 
     * @param {Number} [maxLiveness] 
     * @param {Number} [targetLiveness] 
     * @param {Number} [minLoudness] 
     * @param {Number} [maxLoudness] 
     * @param {Number} [targetLoudness] 
     * @param {Number} [minMode] 
     * @param {Number} [maxMode] 
     * @param {Number} [targetMode] 
     * @param {Number} [minPopularity] 
     * @param {Number} [maxPopularity] 
     * @param {Number} [targetPopularity] 
     * @param {Number} [minSpeechiness] 
     * @param {Number} [maxSpeechiness] 
     * @param {Number} [targetSpeechiness] 
     * @param {Number} [minTempo] 
     * @param {Number} [maxTempo] 
     * @param {Number} [targetTempo] 
     * @param {Number} [minTimeSignature] 
     * @param {Number} [maxTimeSignature] 
     * @param {Number} [targetTimeSignature] 
     * @param {Number} [minValence] 
     * @param {Number} [maxValence] 
     * @param {Number} [targetValence] 
     * @param {module:api/TracksApi~getRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendationsObject}
     */
    getRecommendations(seedArtists, seedGenres, seedTracks, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'seedArtists' is set
      if (seedArtists === undefined || seedArtists === null) {
        throw new Error("Missing the required parameter 'seedArtists' when calling getRecommendations");
      }
      // verify the required parameter 'seedGenres' is set
      if (seedGenres === undefined || seedGenres === null) {
        throw new Error("Missing the required parameter 'seedGenres' when calling getRecommendations");
      }
      // verify the required parameter 'seedTracks' is set
      if (seedTracks === undefined || seedTracks === null) {
        throw new Error("Missing the required parameter 'seedTracks' when calling getRecommendations");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'market': opts['market'],
        'seed_artists': seedArtists,
        'seed_genres': seedGenres,
        'seed_tracks': seedTracks,
        'min_acousticness': opts['minAcousticness'],
        'max_acousticness': opts['maxAcousticness'],
        'target_acousticness': opts['targetAcousticness'],
        'min_danceability': opts['minDanceability'],
        'max_danceability': opts['maxDanceability'],
        'target_danceability': opts['targetDanceability'],
        'min_duration_ms': opts['minDurationMs'],
        'max_duration_ms': opts['maxDurationMs'],
        'target_duration_ms': opts['targetDurationMs'],
        'min_energy': opts['minEnergy'],
        'max_energy': opts['maxEnergy'],
        'target_energy': opts['targetEnergy'],
        'min_instrumentalness': opts['minInstrumentalness'],
        'max_instrumentalness': opts['maxInstrumentalness'],
        'target_instrumentalness': opts['targetInstrumentalness'],
        'min_key': opts['minKey'],
        'max_key': opts['maxKey'],
        'target_key': opts['targetKey'],
        'min_liveness': opts['minLiveness'],
        'max_liveness': opts['maxLiveness'],
        'target_liveness': opts['targetLiveness'],
        'min_loudness': opts['minLoudness'],
        'max_loudness': opts['maxLoudness'],
        'target_loudness': opts['targetLoudness'],
        'min_mode': opts['minMode'],
        'max_mode': opts['maxMode'],
        'target_mode': opts['targetMode'],
        'min_popularity': opts['minPopularity'],
        'max_popularity': opts['maxPopularity'],
        'target_popularity': opts['targetPopularity'],
        'min_speechiness': opts['minSpeechiness'],
        'max_speechiness': opts['maxSpeechiness'],
        'target_speechiness': opts['targetSpeechiness'],
        'min_tempo': opts['minTempo'],
        'max_tempo': opts['maxTempo'],
        'target_tempo': opts['targetTempo'],
        'min_time_signature': opts['minTimeSignature'],
        'max_time_signature': opts['maxTimeSignature'],
        'target_time_signature': opts['targetTimeSignature'],
        'min_valence': opts['minValence'],
        'max_valence': opts['maxValence'],
        'target_valence': opts['targetValence']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecommendationsObject;
      return this.apiClient.callApi(
        '/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeveralAudioFeatures operation.
     * @callback module:api/TracksApi~getSeveralAudioFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSeveralAudioFeatures200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tracks' Audio Features 
     * Get audio features for multiple tracks based on their Spotify IDs. 
     * @param {String} ids 
     * @param {module:api/TracksApi~getSeveralAudioFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSeveralAudioFeatures200Response}
     */
    getSeveralAudioFeatures(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getSeveralAudioFeatures");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSeveralAudioFeatures200Response;
      return this.apiClient.callApi(
        '/audio-features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeveralTracks operation.
     * @callback module:api/TracksApi~getSeveralTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAnArtistsTopTracks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Several Tracks 
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {module:api/TracksApi~getSeveralTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAnArtistsTopTracks200Response}
     */
    getSeveralTracks(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getSeveralTracks");
      }

      let pathParams = {
      };
      let queryParams = {
        'market': opts['market'],
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAnArtistsTopTracks200Response;
      return this.apiClient.callApi(
        '/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrack operation.
     * @callback module:api/TracksApi~getTrackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Track 
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {module:api/TracksApi~getTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackObject}
     */
    getTrack(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTrack");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'market': opts['market']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackObject;
      return this.apiClient.callApi(
        '/tracks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersSavedTracks operation.
     * @callback module:api/TracksApi~getUsersSavedTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSavedTrackObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Saved Tracks 
     * Get a list of the songs saved in the current Spotify user's 'Your Music' library. 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/TracksApi~getUsersSavedTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSavedTrackObject}
     */
    getUsersSavedTracks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'market': opts['market'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSavedTrackObject;
      return this.apiClient.callApi(
        '/me/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersTopArtistsAndTracks_0 operation.
     * @callback module:api/TracksApi~getUsersTopArtistsAndTracks_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUsersTopArtistsAndTracks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Top Items 
     * Get the current user's top artists or tracks based on calculated affinity. 
     * @param {module:model/String} type 
     * @param {Object} opts Optional parameters
     * @param {String} [timeRange = 'medium_term')] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/TracksApi~getUsersTopArtistsAndTracks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUsersTopArtistsAndTracks200Response}
     */
    getUsersTopArtistsAndTracks_0(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getUsersTopArtistsAndTracks_0");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'time_range': opts['timeRange'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUsersTopArtistsAndTracks200Response;
      return this.apiClient.callApi(
        '/me/top/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTracksPlaylist_0 operation.
     * @callback module:api/TracksApi~removeTracksPlaylist_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReorderOrReplacePlaylistsTracks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Playlist Items 
     * Remove one or more items from a user's playlist. 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
     * @param {module:api/TracksApi~removeTracksPlaylist_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReorderOrReplacePlaylistsTracks200Response}
     */
    removeTracksPlaylist_0(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeTracksPlaylistRequest'];
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling removeTracksPlaylist_0");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReorderOrReplacePlaylistsTracks200Response;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/tracks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTracksUser operation.
     * @callback module:api/TracksApi~removeTracksUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove User's Saved Tracks 
     * Remove one or more tracks from the current user's 'Your Music' library. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {module:api/TracksApi~removeTracksUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeTracksUser(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveAlbumsUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling removeTracksUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/tracks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reorderOrReplacePlaylistsTracks_0 operation.
     * @callback module:api/TracksApi~reorderOrReplacePlaylistsTracks_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReorderOrReplacePlaylistsTracks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Playlist Items 
     * Either reorder or replace items in a playlist depending on the request's parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body. To replace items, include `uris` as either a query parameter or in the request's body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can't be applied together in a single request. 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {String} [uris] 
     * @param {module:model/ReorderOrReplacePlaylistsTracksRequest} [reorderOrReplacePlaylistsTracksRequest] 
     * @param {module:api/TracksApi~reorderOrReplacePlaylistsTracks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReorderOrReplacePlaylistsTracks200Response}
     */
    reorderOrReplacePlaylistsTracks_0(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = opts['reorderOrReplacePlaylistsTracksRequest'];
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling reorderOrReplacePlaylistsTracks_0");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
        'uris': opts['uris']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReorderOrReplacePlaylistsTracks200Response;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/tracks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveTracksUser operation.
     * @callback module:api/TracksApi~saveTracksUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Tracks for Current User 
     * Save one or more tracks to the current user's 'Your Music' library. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveTracksUserRequest} [saveTracksUserRequest] 
     * @param {module:api/TracksApi~saveTracksUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveTracksUser(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveTracksUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling saveTracksUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/tracks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
