/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlbumObject from '../model/AlbumObject';
import GetMultipleAlbums200Response from '../model/GetMultipleAlbums200Response';
import GetMultipleAlbums401Response from '../model/GetMultipleAlbums401Response';
import GetNewReleases200Response from '../model/GetNewReleases200Response';
import PagingSavedAlbumObject from '../model/PagingSavedAlbumObject';
import PagingSimplifiedAlbumObject from '../model/PagingSimplifiedAlbumObject';
import PagingSimplifiedTrackObject from '../model/PagingSimplifiedTrackObject';
import SaveAlbumsUserRequest from '../model/SaveAlbumsUserRequest';

/**
* Albums service.
* @module api/AlbumsApi
* @version 1.0.0
*/
export default class AlbumsApi {

    /**
    * Constructs a new AlbumsApi. 
    * @alias module:api/AlbumsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkUsersSavedAlbums operation.
     * @callback module:api/AlbumsApi~checkUsersSavedAlbumsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check User's Saved Albums 
     * Check if one or more albums is already saved in the current Spotify user's 'Your Music' library. 
     * @param {String} ids 
     * @param {module:api/AlbumsApi~checkUsersSavedAlbumsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkUsersSavedAlbums(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkUsersSavedAlbums");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/me/albums/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnAlbum operation.
     * @callback module:api/AlbumsApi~getAnAlbumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlbumObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Album 
     * Get Spotify catalog information for a single album. 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {module:api/AlbumsApi~getAnAlbumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlbumObject}
     */
    getAnAlbum(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnAlbum");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'market': opts['market']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlbumObject;
      return this.apiClient.callApi(
        '/albums/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnAlbumsTracks operation.
     * @callback module:api/AlbumsApi~getAnAlbumsTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSimplifiedTrackObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Album Tracks 
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/AlbumsApi~getAnAlbumsTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSimplifiedTrackObject}
     */
    getAnAlbumsTracks(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnAlbumsTracks");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'market': opts['market'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSimplifiedTrackObject;
      return this.apiClient.callApi(
        '/albums/{id}/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnArtistsAlbums_0 operation.
     * @callback module:api/AlbumsApi~getAnArtistsAlbums_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSimplifiedAlbumObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artist's Albums 
     * Get Spotify catalog information about an artist's albums. 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [includeGroups] 
     * @param {String} [market] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/AlbumsApi~getAnArtistsAlbums_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSimplifiedAlbumObject}
     */
    getAnArtistsAlbums_0(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnArtistsAlbums_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_groups': opts['includeGroups'],
        'market': opts['market'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSimplifiedAlbumObject;
      return this.apiClient.callApi(
        '/artists/{id}/albums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultipleAlbums operation.
     * @callback module:api/AlbumsApi~getMultipleAlbumsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMultipleAlbums200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Several Albums 
     * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {module:api/AlbumsApi~getMultipleAlbumsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMultipleAlbums200Response}
     */
    getMultipleAlbums(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getMultipleAlbums");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids,
        'market': opts['market']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMultipleAlbums200Response;
      return this.apiClient.callApi(
        '/albums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewReleases operation.
     * @callback module:api/AlbumsApi~getNewReleasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNewReleases200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get New Releases 
     * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
     * @param {Object} opts Optional parameters
     * @param {String} [country] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/AlbumsApi~getNewReleasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNewReleases200Response}
     */
    getNewReleases(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'country': opts['country'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNewReleases200Response;
      return this.apiClient.callApi(
        '/browse/new-releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersSavedAlbums operation.
     * @callback module:api/AlbumsApi~getUsersSavedAlbumsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSavedAlbumObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Saved Albums 
     * Get a list of the albums saved in the current Spotify user's 'Your Music' library. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {String} [market] 
     * @param {module:api/AlbumsApi~getUsersSavedAlbumsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSavedAlbumObject}
     */
    getUsersSavedAlbums(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'market': opts['market']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSavedAlbumObject;
      return this.apiClient.callApi(
        '/me/albums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAlbumsUser operation.
     * @callback module:api/AlbumsApi~removeAlbumsUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Users' Saved Albums 
     * Remove one or more albums from the current user's 'Your Music' library. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {module:api/AlbumsApi~removeAlbumsUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAlbumsUser(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveAlbumsUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling removeAlbumsUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/albums', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAlbumsUser operation.
     * @callback module:api/AlbumsApi~saveAlbumsUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Albums for Current User 
     * Save one or more albums to the current user's 'Your Music' library. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {module:api/AlbumsApi~saveAlbumsUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveAlbumsUser(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveAlbumsUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling saveAlbumsUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/albums', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
