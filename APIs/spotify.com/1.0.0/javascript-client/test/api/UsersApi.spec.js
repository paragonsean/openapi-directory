/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpotifyWebApi);
  }
}(this, function(expect, SpotifyWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpotifyWebApi.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('checkCurrentUserFollows', function() {
      it('should call checkCurrentUserFollows successfully', function(done) {
        //uncomment below and update the code to test checkCurrentUserFollows
        //instance.checkCurrentUserFollows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkIfUserFollowsPlaylist', function() {
      it('should call checkIfUserFollowsPlaylist successfully', function(done) {
        //uncomment below and update the code to test checkIfUserFollowsPlaylist
        //instance.checkIfUserFollowsPlaylist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('followArtistsUsers', function() {
      it('should call followArtistsUsers successfully', function(done) {
        //uncomment below and update the code to test followArtistsUsers
        //instance.followArtistsUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('followPlaylist', function() {
      it('should call followPlaylist successfully', function(done) {
        //uncomment below and update the code to test followPlaylist
        //instance.followPlaylist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCurrentUsersProfile', function() {
      it('should call getCurrentUsersProfile successfully', function(done) {
        //uncomment below and update the code to test getCurrentUsersProfile
        //instance.getCurrentUsersProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFollowed', function() {
      it('should call getFollowed successfully', function(done) {
        //uncomment below and update the code to test getFollowed
        //instance.getFollowed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListUsersPlaylists_0', function() {
      it('should call getListUsersPlaylists_0 successfully', function(done) {
        //uncomment below and update the code to test getListUsersPlaylists_0
        //instance.getListUsersPlaylists_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUsersProfile', function() {
      it('should call getUsersProfile successfully', function(done) {
        //uncomment below and update the code to test getUsersProfile
        //instance.getUsersProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUsersTopArtistsAndTracks', function() {
      it('should call getUsersTopArtistsAndTracks successfully', function(done) {
        //uncomment below and update the code to test getUsersTopArtistsAndTracks
        //instance.getUsersTopArtistsAndTracks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unfollowArtistsUsers', function() {
      it('should call unfollowArtistsUsers successfully', function(done) {
        //uncomment below and update the code to test unfollowArtistsUsers
        //instance.unfollowArtistsUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unfollowPlaylist', function() {
      it('should call unfollowPlaylist successfully', function(done) {
        //uncomment below and update the code to test unfollowPlaylist
        //instance.unfollowPlaylist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
