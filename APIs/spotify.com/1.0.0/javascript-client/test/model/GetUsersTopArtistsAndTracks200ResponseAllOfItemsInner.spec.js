/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpotifyWebApi);
  }
}(this, function(expect, SpotifyWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner', function() {
    it('should create an instance of GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner', function() {
      // uncomment below and update the code to test GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be.a(SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner);
    });

    it('should have the property externalUrls (base name: "external_urls")', function() {
      // uncomment below and update the code to test the property externalUrls
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property followers (base name: "followers")', function() {
      // uncomment below and update the code to test the property followers
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property genres (base name: "genres")', function() {
      // uncomment below and update the code to test the property genres
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property href (base name: "href")', function() {
      // uncomment below and update the code to test the property href
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property images (base name: "images")', function() {
      // uncomment below and update the code to test the property images
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property popularity (base name: "popularity")', function() {
      // uncomment below and update the code to test the property popularity
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property uri (base name: "uri")', function() {
      // uncomment below and update the code to test the property uri
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property album (base name: "album")', function() {
      // uncomment below and update the code to test the property album
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property artists (base name: "artists")', function() {
      // uncomment below and update the code to test the property artists
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property availableMarkets (base name: "available_markets")', function() {
      // uncomment below and update the code to test the property availableMarkets
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property discNumber (base name: "disc_number")', function() {
      // uncomment below and update the code to test the property discNumber
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property durationMs (base name: "duration_ms")', function() {
      // uncomment below and update the code to test the property durationMs
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property explicit (base name: "explicit")', function() {
      // uncomment below and update the code to test the property explicit
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property externalIds (base name: "external_ids")', function() {
      // uncomment below and update the code to test the property externalIds
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property isLocal (base name: "is_local")', function() {
      // uncomment below and update the code to test the property isLocal
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property isPlayable (base name: "is_playable")', function() {
      // uncomment below and update the code to test the property isPlayable
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property linkedFrom (base name: "linked_from")', function() {
      // uncomment below and update the code to test the property linkedFrom
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property previewUrl (base name: "preview_url")', function() {
      // uncomment below and update the code to test the property previewUrl
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property restrictions (base name: "restrictions")', function() {
      // uncomment below and update the code to test the property restrictions
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property trackNumber (base name: "track_number")', function() {
      // uncomment below and update the code to test the property trackNumber
      //var instance = new SpotifyWebApi.GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner();
      //expect(instance).to.be();
    });

  });

}));
