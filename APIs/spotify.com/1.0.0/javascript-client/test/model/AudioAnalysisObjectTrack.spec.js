/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpotifyWebApi);
  }
}(this, function(expect, SpotifyWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AudioAnalysisObjectTrack', function() {
    it('should create an instance of AudioAnalysisObjectTrack', function() {
      // uncomment below and update the code to test AudioAnalysisObjectTrack
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be.a(SpotifyWebApi.AudioAnalysisObjectTrack);
    });

    it('should have the property analysisChannels (base name: "analysis_channels")', function() {
      // uncomment below and update the code to test the property analysisChannels
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property analysisSampleRate (base name: "analysis_sample_rate")', function() {
      // uncomment below and update the code to test the property analysisSampleRate
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property codeVersion (base name: "code_version")', function() {
      // uncomment below and update the code to test the property codeVersion
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property codestring (base name: "codestring")', function() {
      // uncomment below and update the code to test the property codestring
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property echoprintVersion (base name: "echoprint_version")', function() {
      // uncomment below and update the code to test the property echoprintVersion
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property echoprintstring (base name: "echoprintstring")', function() {
      // uncomment below and update the code to test the property echoprintstring
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property endOfFadeIn (base name: "end_of_fade_in")', function() {
      // uncomment below and update the code to test the property endOfFadeIn
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property key (base name: "key")', function() {
      // uncomment below and update the code to test the property key
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property keyConfidence (base name: "key_confidence")', function() {
      // uncomment below and update the code to test the property keyConfidence
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property loudness (base name: "loudness")', function() {
      // uncomment below and update the code to test the property loudness
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property mode (base name: "mode")', function() {
      // uncomment below and update the code to test the property mode
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property modeConfidence (base name: "mode_confidence")', function() {
      // uncomment below and update the code to test the property modeConfidence
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property numSamples (base name: "num_samples")', function() {
      // uncomment below and update the code to test the property numSamples
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property offsetSeconds (base name: "offset_seconds")', function() {
      // uncomment below and update the code to test the property offsetSeconds
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property rhythmVersion (base name: "rhythm_version")', function() {
      // uncomment below and update the code to test the property rhythmVersion
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property rhythmstring (base name: "rhythmstring")', function() {
      // uncomment below and update the code to test the property rhythmstring
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property sampleMd5 (base name: "sample_md5")', function() {
      // uncomment below and update the code to test the property sampleMd5
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property startOfFadeOut (base name: "start_of_fade_out")', function() {
      // uncomment below and update the code to test the property startOfFadeOut
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property synchVersion (base name: "synch_version")', function() {
      // uncomment below and update the code to test the property synchVersion
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property synchstring (base name: "synchstring")', function() {
      // uncomment below and update the code to test the property synchstring
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property tempo (base name: "tempo")', function() {
      // uncomment below and update the code to test the property tempo
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property tempoConfidence (base name: "tempo_confidence")', function() {
      // uncomment below and update the code to test the property tempoConfidence
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property timeSignature (base name: "time_signature")', function() {
      // uncomment below and update the code to test the property timeSignature
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property timeSignatureConfidence (base name: "time_signature_confidence")', function() {
      // uncomment below and update the code to test the property timeSignatureConfidence
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

    it('should have the property windowSeconds (base name: "window_seconds")', function() {
      // uncomment below and update the code to test the property windowSeconds
      //var instance = new SpotifyWebApi.AudioAnalysisObjectTrack();
      //expect(instance).to.be();
    });

  });

}));
