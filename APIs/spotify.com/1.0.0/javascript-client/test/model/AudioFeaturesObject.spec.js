/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpotifyWebApi);
  }
}(this, function(expect, SpotifyWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpotifyWebApi.AudioFeaturesObject();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AudioFeaturesObject', function() {
    it('should create an instance of AudioFeaturesObject', function() {
      // uncomment below and update the code to test AudioFeaturesObject
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be.a(SpotifyWebApi.AudioFeaturesObject);
    });

    it('should have the property acousticness (base name: "acousticness")', function() {
      // uncomment below and update the code to test the property acousticness
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property analysisUrl (base name: "analysis_url")', function() {
      // uncomment below and update the code to test the property analysisUrl
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property danceability (base name: "danceability")', function() {
      // uncomment below and update the code to test the property danceability
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property durationMs (base name: "duration_ms")', function() {
      // uncomment below and update the code to test the property durationMs
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property energy (base name: "energy")', function() {
      // uncomment below and update the code to test the property energy
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property instrumentalness (base name: "instrumentalness")', function() {
      // uncomment below and update the code to test the property instrumentalness
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property key (base name: "key")', function() {
      // uncomment below and update the code to test the property key
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property liveness (base name: "liveness")', function() {
      // uncomment below and update the code to test the property liveness
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property loudness (base name: "loudness")', function() {
      // uncomment below and update the code to test the property loudness
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property mode (base name: "mode")', function() {
      // uncomment below and update the code to test the property mode
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property speechiness (base name: "speechiness")', function() {
      // uncomment below and update the code to test the property speechiness
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property tempo (base name: "tempo")', function() {
      // uncomment below and update the code to test the property tempo
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property timeSignature (base name: "time_signature")', function() {
      // uncomment below and update the code to test the property timeSignature
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property trackHref (base name: "track_href")', function() {
      // uncomment below and update the code to test the property trackHref
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property uri (base name: "uri")', function() {
      // uncomment below and update the code to test the property uri
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

    it('should have the property valence (base name: "valence")', function() {
      // uncomment below and update the code to test the property valence
      //var instance = new SpotifyWebApi.AudioFeaturesObject();
      //expect(instance).to.be();
    });

  });

}));
