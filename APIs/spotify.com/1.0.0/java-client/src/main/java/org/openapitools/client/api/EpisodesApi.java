/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EpisodeObject;
import org.openapitools.client.model.GetMultipleAlbums401Response;
import org.openapitools.client.model.GetMultipleEpisodes200Response;
import org.openapitools.client.model.PagingSavedEpisodeObject;
import org.openapitools.client.model.PagingSimplifiedEpisodeObject;
import org.openapitools.client.model.RemoveEpisodesUserRequest;
import org.openapitools.client.model.SaveEpisodesUserRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EpisodesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EpisodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EpisodesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkUsersSavedEpisodes
     * @param ids  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkUsersSavedEpisodesCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/episodes/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkUsersSavedEpisodesValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkUsersSavedEpisodes(Async)");
        }

        return checkUsersSavedEpisodesCall(ids, _callback);

    }

    /**
     * Check User&#39;s Saved Episodes 
     * Check if one or more episodes is already saved in the current Spotify user&#39;s &#39;Your Episodes&#39; library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     * @param ids  (required)
     * @return List&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public List<Boolean> checkUsersSavedEpisodes(String ids) throws ApiException {
        ApiResponse<List<Boolean>> localVarResp = checkUsersSavedEpisodesWithHttpInfo(ids);
        return localVarResp.getData();
    }

    /**
     * Check User&#39;s Saved Episodes 
     * Check if one or more episodes is already saved in the current Spotify user&#39;s &#39;Your Episodes&#39; library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     * @param ids  (required)
     * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Boolean>> checkUsersSavedEpisodesWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = checkUsersSavedEpisodesValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check User&#39;s Saved Episodes  (asynchronously)
     * Check if one or more episodes is already saved in the current Spotify user&#39;s &#39;Your Episodes&#39; library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     * @param ids  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkUsersSavedEpisodesAsync(String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkUsersSavedEpisodesValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAShowsEpisodes_0
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAShowsEpisodes_0Call(String id, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shows/{id}/episodes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAShowsEpisodes_0ValidateBeforeCall(String id, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAShowsEpisodes_0(Async)");
        }

        return getAShowsEpisodes_0Call(id, market, limit, offset, _callback);

    }

    /**
     * Get Show Episodes 
     * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingSimplifiedEpisodeObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingSimplifiedEpisodeObject getAShowsEpisodes_0(String id, String market, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingSimplifiedEpisodeObject> localVarResp = getAShowsEpisodes_0WithHttpInfo(id, market, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get Show Episodes 
     * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingSimplifiedEpisodeObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingSimplifiedEpisodeObject> getAShowsEpisodes_0WithHttpInfo(String id, String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAShowsEpisodes_0ValidateBeforeCall(id, market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSimplifiedEpisodeObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Show Episodes  (asynchronously)
     * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAShowsEpisodes_0Async(String id, String market, Integer limit, Integer offset, final ApiCallback<PagingSimplifiedEpisodeObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAShowsEpisodes_0ValidateBeforeCall(id, market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSimplifiedEpisodeObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnEpisode
     * @param id  (required)
     * @param market  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An episode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnEpisodeCall(String id, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/episodes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnEpisodeValidateBeforeCall(String id, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnEpisode(Async)");
        }

        return getAnEpisodeCall(id, market, _callback);

    }

    /**
     * Get Episode 
     * Get Spotify catalog information for a single episode identified by its unique Spotify ID. 
     * @param id  (required)
     * @param market  (optional)
     * @return EpisodeObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An episode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public EpisodeObject getAnEpisode(String id, String market) throws ApiException {
        ApiResponse<EpisodeObject> localVarResp = getAnEpisodeWithHttpInfo(id, market);
        return localVarResp.getData();
    }

    /**
     * Get Episode 
     * Get Spotify catalog information for a single episode identified by its unique Spotify ID. 
     * @param id  (required)
     * @param market  (optional)
     * @return ApiResponse&lt;EpisodeObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An episode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EpisodeObject> getAnEpisodeWithHttpInfo(String id, String market) throws ApiException {
        okhttp3.Call localVarCall = getAnEpisodeValidateBeforeCall(id, market, null);
        Type localVarReturnType = new TypeToken<EpisodeObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Episode  (asynchronously)
     * Get Spotify catalog information for a single episode identified by its unique Spotify ID. 
     * @param id  (required)
     * @param market  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An episode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnEpisodeAsync(String id, String market, final ApiCallback<EpisodeObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnEpisodeValidateBeforeCall(id, market, _callback);
        Type localVarReturnType = new TypeToken<EpisodeObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMultipleEpisodes
     * @param ids  (required)
     * @param market  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of episodes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultipleEpisodesCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/episodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleEpisodesValidateBeforeCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getMultipleEpisodes(Async)");
        }

        return getMultipleEpisodesCall(ids, market, _callback);

    }

    /**
     * Get Several Episodes 
     * Get Spotify catalog information for several episodes based on their Spotify IDs. 
     * @param ids  (required)
     * @param market  (optional)
     * @return GetMultipleEpisodes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of episodes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetMultipleEpisodes200Response getMultipleEpisodes(String ids, String market) throws ApiException {
        ApiResponse<GetMultipleEpisodes200Response> localVarResp = getMultipleEpisodesWithHttpInfo(ids, market);
        return localVarResp.getData();
    }

    /**
     * Get Several Episodes 
     * Get Spotify catalog information for several episodes based on their Spotify IDs. 
     * @param ids  (required)
     * @param market  (optional)
     * @return ApiResponse&lt;GetMultipleEpisodes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of episodes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMultipleEpisodes200Response> getMultipleEpisodesWithHttpInfo(String ids, String market) throws ApiException {
        okhttp3.Call localVarCall = getMultipleEpisodesValidateBeforeCall(ids, market, null);
        Type localVarReturnType = new TypeToken<GetMultipleEpisodes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Several Episodes  (asynchronously)
     * Get Spotify catalog information for several episodes based on their Spotify IDs. 
     * @param ids  (required)
     * @param market  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of episodes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultipleEpisodesAsync(String ids, String market, final ApiCallback<GetMultipleEpisodes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleEpisodesValidateBeforeCall(ids, market, _callback);
        Type localVarReturnType = new TypeToken<GetMultipleEpisodes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersSavedEpisodes
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersSavedEpisodesCall(String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/episodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersSavedEpisodesValidateBeforeCall(String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getUsersSavedEpisodesCall(market, limit, offset, _callback);

    }

    /**
     * Get User&#39;s Saved Episodes 
     * Get a list of the episodes saved in the current Spotify user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingSavedEpisodeObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingSavedEpisodeObject getUsersSavedEpisodes(String market, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingSavedEpisodeObject> localVarResp = getUsersSavedEpisodesWithHttpInfo(market, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get User&#39;s Saved Episodes 
     * Get a list of the episodes saved in the current Spotify user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingSavedEpisodeObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingSavedEpisodeObject> getUsersSavedEpisodesWithHttpInfo(String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getUsersSavedEpisodesValidateBeforeCall(market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSavedEpisodeObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User&#39;s Saved Episodes  (asynchronously)
     * Get a list of the episodes saved in the current Spotify user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersSavedEpisodesAsync(String market, Integer limit, Integer offset, final ApiCallback<PagingSavedEpisodeObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersSavedEpisodesValidateBeforeCall(market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSavedEpisodeObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeEpisodesUser
     * @param ids  (required)
     * @param removeEpisodesUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Episode removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeEpisodesUserCall(String ids, RemoveEpisodesUserRequest removeEpisodesUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeEpisodesUserRequest;

        // create path and map variables
        String localVarPath = "/me/episodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEpisodesUserValidateBeforeCall(String ids, RemoveEpisodesUserRequest removeEpisodesUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeEpisodesUser(Async)");
        }

        return removeEpisodesUserCall(ids, removeEpisodesUserRequest, _callback);

    }

    /**
     * Remove User&#39;s Saved Episodes 
     * Remove one or more episodes from the current user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param ids  (required)
     * @param removeEpisodesUserRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Episode removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public void removeEpisodesUser(String ids, RemoveEpisodesUserRequest removeEpisodesUserRequest) throws ApiException {
        removeEpisodesUserWithHttpInfo(ids, removeEpisodesUserRequest);
    }

    /**
     * Remove User&#39;s Saved Episodes 
     * Remove one or more episodes from the current user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param ids  (required)
     * @param removeEpisodesUserRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Episode removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeEpisodesUserWithHttpInfo(String ids, RemoveEpisodesUserRequest removeEpisodesUserRequest) throws ApiException {
        okhttp3.Call localVarCall = removeEpisodesUserValidateBeforeCall(ids, removeEpisodesUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove User&#39;s Saved Episodes  (asynchronously)
     * Remove one or more episodes from the current user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param ids  (required)
     * @param removeEpisodesUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Episode removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeEpisodesUserAsync(String ids, RemoveEpisodesUserRequest removeEpisodesUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEpisodesUserValidateBeforeCall(ids, removeEpisodesUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveEpisodesUser
     * @param ids  (required)
     * @param saveEpisodesUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Episode saved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveEpisodesUserCall(String ids, SaveEpisodesUserRequest saveEpisodesUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveEpisodesUserRequest;

        // create path and map variables
        String localVarPath = "/me/episodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveEpisodesUserValidateBeforeCall(String ids, SaveEpisodesUserRequest saveEpisodesUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling saveEpisodesUser(Async)");
        }

        return saveEpisodesUserCall(ids, saveEpisodesUserRequest, _callback);

    }

    /**
     * Save Episodes for Current User 
     * Save one or more episodes to the current user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param ids  (required)
     * @param saveEpisodesUserRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Episode saved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public void saveEpisodesUser(String ids, SaveEpisodesUserRequest saveEpisodesUserRequest) throws ApiException {
        saveEpisodesUserWithHttpInfo(ids, saveEpisodesUserRequest);
    }

    /**
     * Save Episodes for Current User 
     * Save one or more episodes to the current user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param ids  (required)
     * @param saveEpisodesUserRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Episode saved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveEpisodesUserWithHttpInfo(String ids, SaveEpisodesUserRequest saveEpisodesUserRequest) throws ApiException {
        okhttp3.Call localVarCall = saveEpisodesUserValidateBeforeCall(ids, saveEpisodesUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save Episodes for Current User  (asynchronously)
     * Save one or more episodes to the current user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param ids  (required)
     * @param saveEpisodesUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Episode saved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveEpisodesUserAsync(String ids, SaveEpisodesUserRequest saveEpisodesUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveEpisodesUserValidateBeforeCall(ids, saveEpisodesUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
