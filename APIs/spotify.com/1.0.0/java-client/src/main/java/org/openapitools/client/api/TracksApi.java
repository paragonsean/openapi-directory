/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddTracksToPlaylistRequest;
import org.openapitools.client.model.AudioAnalysisObject;
import org.openapitools.client.model.AudioFeaturesObject;
import java.math.BigDecimal;
import org.openapitools.client.model.GetAnArtistsTopTracks200Response;
import org.openapitools.client.model.GetMultipleAlbums401Response;
import org.openapitools.client.model.GetSeveralAudioFeatures200Response;
import org.openapitools.client.model.GetUsersTopArtistsAndTracks200Response;
import org.openapitools.client.model.PagingPlaylistTrackObject;
import org.openapitools.client.model.PagingSavedTrackObject;
import org.openapitools.client.model.PagingSimplifiedTrackObject;
import org.openapitools.client.model.RecommendationsObject;
import org.openapitools.client.model.RemoveTracksPlaylistRequest;
import org.openapitools.client.model.ReorderOrReplacePlaylistsTracks200Response;
import org.openapitools.client.model.ReorderOrReplacePlaylistsTracksRequest;
import org.openapitools.client.model.SaveAlbumsUserRequest;
import org.openapitools.client.model.SaveTracksUserRequest;
import org.openapitools.client.model.TrackObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TracksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TracksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TracksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addTracksToPlaylist_0
     * @param playlistId  (required)
     * @param position  (optional)
     * @param uris  (optional)
     * @param addTracksToPlaylistRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTracksToPlaylist_0Call(String playlistId, Integer position, String uris, AddTracksToPlaylistRequest addTracksToPlaylistRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTracksToPlaylistRequest;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTracksToPlaylist_0ValidateBeforeCall(String playlistId, Integer position, String uris, AddTracksToPlaylistRequest addTracksToPlaylistRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling addTracksToPlaylist_0(Async)");
        }

        return addTracksToPlaylist_0Call(playlistId, position, uris, addTracksToPlaylistRequest, _callback);

    }

    /**
     * Add Items to Playlist 
     * Add one or more items to a user&#39;s playlist. 
     * @param playlistId  (required)
     * @param position  (optional)
     * @param uris  (optional)
     * @param addTracksToPlaylistRequest  (optional)
     * @return ReorderOrReplacePlaylistsTracks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ReorderOrReplacePlaylistsTracks200Response addTracksToPlaylist_0(String playlistId, Integer position, String uris, AddTracksToPlaylistRequest addTracksToPlaylistRequest) throws ApiException {
        ApiResponse<ReorderOrReplacePlaylistsTracks200Response> localVarResp = addTracksToPlaylist_0WithHttpInfo(playlistId, position, uris, addTracksToPlaylistRequest);
        return localVarResp.getData();
    }

    /**
     * Add Items to Playlist 
     * Add one or more items to a user&#39;s playlist. 
     * @param playlistId  (required)
     * @param position  (optional)
     * @param uris  (optional)
     * @param addTracksToPlaylistRequest  (optional)
     * @return ApiResponse&lt;ReorderOrReplacePlaylistsTracks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReorderOrReplacePlaylistsTracks200Response> addTracksToPlaylist_0WithHttpInfo(String playlistId, Integer position, String uris, AddTracksToPlaylistRequest addTracksToPlaylistRequest) throws ApiException {
        okhttp3.Call localVarCall = addTracksToPlaylist_0ValidateBeforeCall(playlistId, position, uris, addTracksToPlaylistRequest, null);
        Type localVarReturnType = new TypeToken<ReorderOrReplacePlaylistsTracks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Items to Playlist  (asynchronously)
     * Add one or more items to a user&#39;s playlist. 
     * @param playlistId  (required)
     * @param position  (optional)
     * @param uris  (optional)
     * @param addTracksToPlaylistRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTracksToPlaylist_0Async(String playlistId, Integer position, String uris, AddTracksToPlaylistRequest addTracksToPlaylistRequest, final ApiCallback<ReorderOrReplacePlaylistsTracks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTracksToPlaylist_0ValidateBeforeCall(playlistId, position, uris, addTracksToPlaylistRequest, _callback);
        Type localVarReturnType = new TypeToken<ReorderOrReplacePlaylistsTracks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkUsersSavedTracks
     * @param ids  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkUsersSavedTracksCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/tracks/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkUsersSavedTracksValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkUsersSavedTracks(Async)");
        }

        return checkUsersSavedTracksCall(ids, _callback);

    }

    /**
     * Check User&#39;s Saved Tracks 
     * Check if one or more tracks is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return List&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public List<Boolean> checkUsersSavedTracks(String ids) throws ApiException {
        ApiResponse<List<Boolean>> localVarResp = checkUsersSavedTracksWithHttpInfo(ids);
        return localVarResp.getData();
    }

    /**
     * Check User&#39;s Saved Tracks 
     * Check if one or more tracks is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Boolean>> checkUsersSavedTracksWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = checkUsersSavedTracksValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check User&#39;s Saved Tracks  (asynchronously)
     * Check if one or more tracks is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkUsersSavedTracksAsync(String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkUsersSavedTracksValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnAlbumsTracks_0
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnAlbumsTracks_0Call(String id, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/albums/{id}/tracks"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnAlbumsTracks_0ValidateBeforeCall(String id, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnAlbumsTracks_0(Async)");
        }

        return getAnAlbumsTracks_0Call(id, market, limit, offset, _callback);

    }

    /**
     * Get Album Tracks 
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingSimplifiedTrackObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingSimplifiedTrackObject getAnAlbumsTracks_0(String id, String market, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingSimplifiedTrackObject> localVarResp = getAnAlbumsTracks_0WithHttpInfo(id, market, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get Album Tracks 
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingSimplifiedTrackObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingSimplifiedTrackObject> getAnAlbumsTracks_0WithHttpInfo(String id, String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAnAlbumsTracks_0ValidateBeforeCall(id, market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSimplifiedTrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Album Tracks  (asynchronously)
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnAlbumsTracks_0Async(String id, String market, Integer limit, Integer offset, final ApiCallback<PagingSimplifiedTrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnAlbumsTracks_0ValidateBeforeCall(id, market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSimplifiedTrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnArtistsTopTracks_0
     * @param id  (required)
     * @param market  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnArtistsTopTracks_0Call(String id, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artists/{id}/top-tracks"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnArtistsTopTracks_0ValidateBeforeCall(String id, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnArtistsTopTracks_0(Async)");
        }

        return getAnArtistsTopTracks_0Call(id, market, _callback);

    }

    /**
     * Get Artist&#39;s Top Tracks 
     * Get Spotify catalog information about an artist&#39;s top tracks by country. 
     * @param id  (required)
     * @param market  (optional)
     * @return GetAnArtistsTopTracks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAnArtistsTopTracks200Response getAnArtistsTopTracks_0(String id, String market) throws ApiException {
        ApiResponse<GetAnArtistsTopTracks200Response> localVarResp = getAnArtistsTopTracks_0WithHttpInfo(id, market);
        return localVarResp.getData();
    }

    /**
     * Get Artist&#39;s Top Tracks 
     * Get Spotify catalog information about an artist&#39;s top tracks by country. 
     * @param id  (required)
     * @param market  (optional)
     * @return ApiResponse&lt;GetAnArtistsTopTracks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAnArtistsTopTracks200Response> getAnArtistsTopTracks_0WithHttpInfo(String id, String market) throws ApiException {
        okhttp3.Call localVarCall = getAnArtistsTopTracks_0ValidateBeforeCall(id, market, null);
        Type localVarReturnType = new TypeToken<GetAnArtistsTopTracks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Artist&#39;s Top Tracks  (asynchronously)
     * Get Spotify catalog information about an artist&#39;s top tracks by country. 
     * @param id  (required)
     * @param market  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnArtistsTopTracks_0Async(String id, String market, final ApiCallback<GetAnArtistsTopTracks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnArtistsTopTracks_0ValidateBeforeCall(id, market, _callback);
        Type localVarReturnType = new TypeToken<GetAnArtistsTopTracks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAudioAnalysis
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audio analysis for one track </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudioAnalysisCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audio-analysis/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudioAnalysisValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAudioAnalysis(Async)");
        }

        return getAudioAnalysisCall(id, _callback);

    }

    /**
     * Get Track&#39;s Audio Analysis 
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
     * @param id  (required)
     * @return AudioAnalysisObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audio analysis for one track </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public AudioAnalysisObject getAudioAnalysis(String id) throws ApiException {
        ApiResponse<AudioAnalysisObject> localVarResp = getAudioAnalysisWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Track&#39;s Audio Analysis 
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
     * @param id  (required)
     * @return ApiResponse&lt;AudioAnalysisObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audio analysis for one track </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudioAnalysisObject> getAudioAnalysisWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getAudioAnalysisValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AudioAnalysisObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Track&#39;s Audio Analysis  (asynchronously)
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audio analysis for one track </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudioAnalysisAsync(String id, final ApiCallback<AudioAnalysisObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudioAnalysisValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AudioAnalysisObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAudioFeatures
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audio features for one track </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudioFeaturesCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audio-features/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudioFeaturesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAudioFeatures(Async)");
        }

        return getAudioFeaturesCall(id, _callback);

    }

    /**
     * Get Track&#39;s Audio Features 
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @return AudioFeaturesObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audio features for one track </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public AudioFeaturesObject getAudioFeatures(String id) throws ApiException {
        ApiResponse<AudioFeaturesObject> localVarResp = getAudioFeaturesWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Track&#39;s Audio Features 
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @return ApiResponse&lt;AudioFeaturesObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audio features for one track </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudioFeaturesObject> getAudioFeaturesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getAudioFeaturesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AudioFeaturesObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Track&#39;s Audio Features  (asynchronously)
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audio features for one track </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudioFeaturesAsync(String id, final ApiCallback<AudioFeaturesObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudioFeaturesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AudioFeaturesObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlaylistsTracks_0
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistsTracks_0Call(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (additionalTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("additional_types", additionalTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistsTracks_0ValidateBeforeCall(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylistsTracks_0(Async)");
        }

        return getPlaylistsTracks_0Call(playlistId, market, fields, limit, offset, additionalTypes, _callback);

    }

    /**
     * Get Playlist Items 
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @return PagingPlaylistTrackObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingPlaylistTrackObject getPlaylistsTracks_0(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes) throws ApiException {
        ApiResponse<PagingPlaylistTrackObject> localVarResp = getPlaylistsTracks_0WithHttpInfo(playlistId, market, fields, limit, offset, additionalTypes);
        return localVarResp.getData();
    }

    /**
     * Get Playlist Items 
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @return ApiResponse&lt;PagingPlaylistTrackObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingPlaylistTrackObject> getPlaylistsTracks_0WithHttpInfo(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistsTracks_0ValidateBeforeCall(playlistId, market, fields, limit, offset, additionalTypes, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistTrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Playlist Items  (asynchronously)
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistsTracks_0Async(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback<PagingPlaylistTrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistsTracks_0ValidateBeforeCall(playlistId, market, fields, limit, offset, additionalTypes, _callback);
        Type localVarReturnType = new TypeToken<PagingPlaylistTrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecommendations
     * @param seedArtists  (required)
     * @param seedGenres  (required)
     * @param seedTracks  (required)
     * @param limit  (optional, default to 20)
     * @param market  (optional)
     * @param minAcousticness  (optional)
     * @param maxAcousticness  (optional)
     * @param targetAcousticness  (optional)
     * @param minDanceability  (optional)
     * @param maxDanceability  (optional)
     * @param targetDanceability  (optional)
     * @param minDurationMs  (optional)
     * @param maxDurationMs  (optional)
     * @param targetDurationMs  (optional)
     * @param minEnergy  (optional)
     * @param maxEnergy  (optional)
     * @param targetEnergy  (optional)
     * @param minInstrumentalness  (optional)
     * @param maxInstrumentalness  (optional)
     * @param targetInstrumentalness  (optional)
     * @param minKey  (optional)
     * @param maxKey  (optional)
     * @param targetKey  (optional)
     * @param minLiveness  (optional)
     * @param maxLiveness  (optional)
     * @param targetLiveness  (optional)
     * @param minLoudness  (optional)
     * @param maxLoudness  (optional)
     * @param targetLoudness  (optional)
     * @param minMode  (optional)
     * @param maxMode  (optional)
     * @param targetMode  (optional)
     * @param minPopularity  (optional)
     * @param maxPopularity  (optional)
     * @param targetPopularity  (optional)
     * @param minSpeechiness  (optional)
     * @param maxSpeechiness  (optional)
     * @param targetSpeechiness  (optional)
     * @param minTempo  (optional)
     * @param maxTempo  (optional)
     * @param targetTempo  (optional)
     * @param minTimeSignature  (optional)
     * @param maxTimeSignature  (optional)
     * @param targetTimeSignature  (optional)
     * @param minValence  (optional)
     * @param maxValence  (optional)
     * @param targetValence  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of recommendations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecommendationsCall(String seedArtists, String seedGenres, String seedTracks, Integer limit, String market, BigDecimal minAcousticness, BigDecimal maxAcousticness, BigDecimal targetAcousticness, BigDecimal minDanceability, BigDecimal maxDanceability, BigDecimal targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, BigDecimal minEnergy, BigDecimal maxEnergy, BigDecimal targetEnergy, BigDecimal minInstrumentalness, BigDecimal maxInstrumentalness, BigDecimal targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, BigDecimal minLiveness, BigDecimal maxLiveness, BigDecimal targetLiveness, BigDecimal minLoudness, BigDecimal maxLoudness, BigDecimal targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, BigDecimal minSpeechiness, BigDecimal maxSpeechiness, BigDecimal targetSpeechiness, BigDecimal minTempo, BigDecimal maxTempo, BigDecimal targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, BigDecimal minValence, BigDecimal maxValence, BigDecimal targetValence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recommendations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (seedArtists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seed_artists", seedArtists));
        }

        if (seedGenres != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seed_genres", seedGenres));
        }

        if (seedTracks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seed_tracks", seedTracks));
        }

        if (minAcousticness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_acousticness", minAcousticness));
        }

        if (maxAcousticness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_acousticness", maxAcousticness));
        }

        if (targetAcousticness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_acousticness", targetAcousticness));
        }

        if (minDanceability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_danceability", minDanceability));
        }

        if (maxDanceability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_danceability", maxDanceability));
        }

        if (targetDanceability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_danceability", targetDanceability));
        }

        if (minDurationMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_duration_ms", minDurationMs));
        }

        if (maxDurationMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_duration_ms", maxDurationMs));
        }

        if (targetDurationMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_duration_ms", targetDurationMs));
        }

        if (minEnergy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_energy", minEnergy));
        }

        if (maxEnergy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_energy", maxEnergy));
        }

        if (targetEnergy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_energy", targetEnergy));
        }

        if (minInstrumentalness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_instrumentalness", minInstrumentalness));
        }

        if (maxInstrumentalness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_instrumentalness", maxInstrumentalness));
        }

        if (targetInstrumentalness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_instrumentalness", targetInstrumentalness));
        }

        if (minKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_key", minKey));
        }

        if (maxKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_key", maxKey));
        }

        if (targetKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_key", targetKey));
        }

        if (minLiveness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_liveness", minLiveness));
        }

        if (maxLiveness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_liveness", maxLiveness));
        }

        if (targetLiveness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_liveness", targetLiveness));
        }

        if (minLoudness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_loudness", minLoudness));
        }

        if (maxLoudness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_loudness", maxLoudness));
        }

        if (targetLoudness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_loudness", targetLoudness));
        }

        if (minMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_mode", minMode));
        }

        if (maxMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_mode", maxMode));
        }

        if (targetMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_mode", targetMode));
        }

        if (minPopularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_popularity", minPopularity));
        }

        if (maxPopularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_popularity", maxPopularity));
        }

        if (targetPopularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_popularity", targetPopularity));
        }

        if (minSpeechiness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_speechiness", minSpeechiness));
        }

        if (maxSpeechiness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_speechiness", maxSpeechiness));
        }

        if (targetSpeechiness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_speechiness", targetSpeechiness));
        }

        if (minTempo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_tempo", minTempo));
        }

        if (maxTempo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_tempo", maxTempo));
        }

        if (targetTempo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_tempo", targetTempo));
        }

        if (minTimeSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_time_signature", minTimeSignature));
        }

        if (maxTimeSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_time_signature", maxTimeSignature));
        }

        if (targetTimeSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_time_signature", targetTimeSignature));
        }

        if (minValence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_valence", minValence));
        }

        if (maxValence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_valence", maxValence));
        }

        if (targetValence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_valence", targetValence));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecommendationsValidateBeforeCall(String seedArtists, String seedGenres, String seedTracks, Integer limit, String market, BigDecimal minAcousticness, BigDecimal maxAcousticness, BigDecimal targetAcousticness, BigDecimal minDanceability, BigDecimal maxDanceability, BigDecimal targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, BigDecimal minEnergy, BigDecimal maxEnergy, BigDecimal targetEnergy, BigDecimal minInstrumentalness, BigDecimal maxInstrumentalness, BigDecimal targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, BigDecimal minLiveness, BigDecimal maxLiveness, BigDecimal targetLiveness, BigDecimal minLoudness, BigDecimal maxLoudness, BigDecimal targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, BigDecimal minSpeechiness, BigDecimal maxSpeechiness, BigDecimal targetSpeechiness, BigDecimal minTempo, BigDecimal maxTempo, BigDecimal targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, BigDecimal minValence, BigDecimal maxValence, BigDecimal targetValence, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seedArtists' is set
        if (seedArtists == null) {
            throw new ApiException("Missing the required parameter 'seedArtists' when calling getRecommendations(Async)");
        }

        // verify the required parameter 'seedGenres' is set
        if (seedGenres == null) {
            throw new ApiException("Missing the required parameter 'seedGenres' when calling getRecommendations(Async)");
        }

        // verify the required parameter 'seedTracks' is set
        if (seedTracks == null) {
            throw new ApiException("Missing the required parameter 'seedTracks' when calling getRecommendations(Async)");
        }

        return getRecommendationsCall(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, _callback);

    }

    /**
     * Get Recommendations 
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     * @param seedArtists  (required)
     * @param seedGenres  (required)
     * @param seedTracks  (required)
     * @param limit  (optional, default to 20)
     * @param market  (optional)
     * @param minAcousticness  (optional)
     * @param maxAcousticness  (optional)
     * @param targetAcousticness  (optional)
     * @param minDanceability  (optional)
     * @param maxDanceability  (optional)
     * @param targetDanceability  (optional)
     * @param minDurationMs  (optional)
     * @param maxDurationMs  (optional)
     * @param targetDurationMs  (optional)
     * @param minEnergy  (optional)
     * @param maxEnergy  (optional)
     * @param targetEnergy  (optional)
     * @param minInstrumentalness  (optional)
     * @param maxInstrumentalness  (optional)
     * @param targetInstrumentalness  (optional)
     * @param minKey  (optional)
     * @param maxKey  (optional)
     * @param targetKey  (optional)
     * @param minLiveness  (optional)
     * @param maxLiveness  (optional)
     * @param targetLiveness  (optional)
     * @param minLoudness  (optional)
     * @param maxLoudness  (optional)
     * @param targetLoudness  (optional)
     * @param minMode  (optional)
     * @param maxMode  (optional)
     * @param targetMode  (optional)
     * @param minPopularity  (optional)
     * @param maxPopularity  (optional)
     * @param targetPopularity  (optional)
     * @param minSpeechiness  (optional)
     * @param maxSpeechiness  (optional)
     * @param targetSpeechiness  (optional)
     * @param minTempo  (optional)
     * @param maxTempo  (optional)
     * @param targetTempo  (optional)
     * @param minTimeSignature  (optional)
     * @param maxTimeSignature  (optional)
     * @param targetTimeSignature  (optional)
     * @param minValence  (optional)
     * @param maxValence  (optional)
     * @param targetValence  (optional)
     * @return RecommendationsObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of recommendations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public RecommendationsObject getRecommendations(String seedArtists, String seedGenres, String seedTracks, Integer limit, String market, BigDecimal minAcousticness, BigDecimal maxAcousticness, BigDecimal targetAcousticness, BigDecimal minDanceability, BigDecimal maxDanceability, BigDecimal targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, BigDecimal minEnergy, BigDecimal maxEnergy, BigDecimal targetEnergy, BigDecimal minInstrumentalness, BigDecimal maxInstrumentalness, BigDecimal targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, BigDecimal minLiveness, BigDecimal maxLiveness, BigDecimal targetLiveness, BigDecimal minLoudness, BigDecimal maxLoudness, BigDecimal targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, BigDecimal minSpeechiness, BigDecimal maxSpeechiness, BigDecimal targetSpeechiness, BigDecimal minTempo, BigDecimal maxTempo, BigDecimal targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, BigDecimal minValence, BigDecimal maxValence, BigDecimal targetValence) throws ApiException {
        ApiResponse<RecommendationsObject> localVarResp = getRecommendationsWithHttpInfo(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence);
        return localVarResp.getData();
    }

    /**
     * Get Recommendations 
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     * @param seedArtists  (required)
     * @param seedGenres  (required)
     * @param seedTracks  (required)
     * @param limit  (optional, default to 20)
     * @param market  (optional)
     * @param minAcousticness  (optional)
     * @param maxAcousticness  (optional)
     * @param targetAcousticness  (optional)
     * @param minDanceability  (optional)
     * @param maxDanceability  (optional)
     * @param targetDanceability  (optional)
     * @param minDurationMs  (optional)
     * @param maxDurationMs  (optional)
     * @param targetDurationMs  (optional)
     * @param minEnergy  (optional)
     * @param maxEnergy  (optional)
     * @param targetEnergy  (optional)
     * @param minInstrumentalness  (optional)
     * @param maxInstrumentalness  (optional)
     * @param targetInstrumentalness  (optional)
     * @param minKey  (optional)
     * @param maxKey  (optional)
     * @param targetKey  (optional)
     * @param minLiveness  (optional)
     * @param maxLiveness  (optional)
     * @param targetLiveness  (optional)
     * @param minLoudness  (optional)
     * @param maxLoudness  (optional)
     * @param targetLoudness  (optional)
     * @param minMode  (optional)
     * @param maxMode  (optional)
     * @param targetMode  (optional)
     * @param minPopularity  (optional)
     * @param maxPopularity  (optional)
     * @param targetPopularity  (optional)
     * @param minSpeechiness  (optional)
     * @param maxSpeechiness  (optional)
     * @param targetSpeechiness  (optional)
     * @param minTempo  (optional)
     * @param maxTempo  (optional)
     * @param targetTempo  (optional)
     * @param minTimeSignature  (optional)
     * @param maxTimeSignature  (optional)
     * @param targetTimeSignature  (optional)
     * @param minValence  (optional)
     * @param maxValence  (optional)
     * @param targetValence  (optional)
     * @return ApiResponse&lt;RecommendationsObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of recommendations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecommendationsObject> getRecommendationsWithHttpInfo(String seedArtists, String seedGenres, String seedTracks, Integer limit, String market, BigDecimal minAcousticness, BigDecimal maxAcousticness, BigDecimal targetAcousticness, BigDecimal minDanceability, BigDecimal maxDanceability, BigDecimal targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, BigDecimal minEnergy, BigDecimal maxEnergy, BigDecimal targetEnergy, BigDecimal minInstrumentalness, BigDecimal maxInstrumentalness, BigDecimal targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, BigDecimal minLiveness, BigDecimal maxLiveness, BigDecimal targetLiveness, BigDecimal minLoudness, BigDecimal maxLoudness, BigDecimal targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, BigDecimal minSpeechiness, BigDecimal maxSpeechiness, BigDecimal targetSpeechiness, BigDecimal minTempo, BigDecimal maxTempo, BigDecimal targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, BigDecimal minValence, BigDecimal maxValence, BigDecimal targetValence) throws ApiException {
        okhttp3.Call localVarCall = getRecommendationsValidateBeforeCall(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, null);
        Type localVarReturnType = new TypeToken<RecommendationsObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recommendations  (asynchronously)
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     * @param seedArtists  (required)
     * @param seedGenres  (required)
     * @param seedTracks  (required)
     * @param limit  (optional, default to 20)
     * @param market  (optional)
     * @param minAcousticness  (optional)
     * @param maxAcousticness  (optional)
     * @param targetAcousticness  (optional)
     * @param minDanceability  (optional)
     * @param maxDanceability  (optional)
     * @param targetDanceability  (optional)
     * @param minDurationMs  (optional)
     * @param maxDurationMs  (optional)
     * @param targetDurationMs  (optional)
     * @param minEnergy  (optional)
     * @param maxEnergy  (optional)
     * @param targetEnergy  (optional)
     * @param minInstrumentalness  (optional)
     * @param maxInstrumentalness  (optional)
     * @param targetInstrumentalness  (optional)
     * @param minKey  (optional)
     * @param maxKey  (optional)
     * @param targetKey  (optional)
     * @param minLiveness  (optional)
     * @param maxLiveness  (optional)
     * @param targetLiveness  (optional)
     * @param minLoudness  (optional)
     * @param maxLoudness  (optional)
     * @param targetLoudness  (optional)
     * @param minMode  (optional)
     * @param maxMode  (optional)
     * @param targetMode  (optional)
     * @param minPopularity  (optional)
     * @param maxPopularity  (optional)
     * @param targetPopularity  (optional)
     * @param minSpeechiness  (optional)
     * @param maxSpeechiness  (optional)
     * @param targetSpeechiness  (optional)
     * @param minTempo  (optional)
     * @param maxTempo  (optional)
     * @param targetTempo  (optional)
     * @param minTimeSignature  (optional)
     * @param maxTimeSignature  (optional)
     * @param targetTimeSignature  (optional)
     * @param minValence  (optional)
     * @param maxValence  (optional)
     * @param targetValence  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of recommendations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecommendationsAsync(String seedArtists, String seedGenres, String seedTracks, Integer limit, String market, BigDecimal minAcousticness, BigDecimal maxAcousticness, BigDecimal targetAcousticness, BigDecimal minDanceability, BigDecimal maxDanceability, BigDecimal targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, BigDecimal minEnergy, BigDecimal maxEnergy, BigDecimal targetEnergy, BigDecimal minInstrumentalness, BigDecimal maxInstrumentalness, BigDecimal targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, BigDecimal minLiveness, BigDecimal maxLiveness, BigDecimal targetLiveness, BigDecimal minLoudness, BigDecimal maxLoudness, BigDecimal targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, BigDecimal minSpeechiness, BigDecimal maxSpeechiness, BigDecimal targetSpeechiness, BigDecimal minTempo, BigDecimal maxTempo, BigDecimal targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, BigDecimal minValence, BigDecimal maxValence, BigDecimal targetValence, final ApiCallback<RecommendationsObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecommendationsValidateBeforeCall(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, _callback);
        Type localVarReturnType = new TypeToken<RecommendationsObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSeveralAudioFeatures
     * @param ids  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of audio features </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSeveralAudioFeaturesCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audio-features";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeveralAudioFeaturesValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getSeveralAudioFeatures(Async)");
        }

        return getSeveralAudioFeaturesCall(ids, _callback);

    }

    /**
     * Get Tracks&#39; Audio Features 
     * Get audio features for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @return GetSeveralAudioFeatures200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of audio features </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetSeveralAudioFeatures200Response getSeveralAudioFeatures(String ids) throws ApiException {
        ApiResponse<GetSeveralAudioFeatures200Response> localVarResp = getSeveralAudioFeaturesWithHttpInfo(ids);
        return localVarResp.getData();
    }

    /**
     * Get Tracks&#39; Audio Features 
     * Get audio features for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @return ApiResponse&lt;GetSeveralAudioFeatures200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of audio features </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSeveralAudioFeatures200Response> getSeveralAudioFeaturesWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = getSeveralAudioFeaturesValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<GetSeveralAudioFeatures200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Tracks&#39; Audio Features  (asynchronously)
     * Get audio features for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of audio features </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSeveralAudioFeaturesAsync(String ids, final ApiCallback<GetSeveralAudioFeatures200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSeveralAudioFeaturesValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<GetSeveralAudioFeatures200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSeveralTracks
     * @param ids  (required)
     * @param market  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSeveralTracksCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeveralTracksValidateBeforeCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getSeveralTracks(Async)");
        }

        return getSeveralTracksCall(ids, market, _callback);

    }

    /**
     * Get Several Tracks 
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @param market  (optional)
     * @return GetAnArtistsTopTracks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAnArtistsTopTracks200Response getSeveralTracks(String ids, String market) throws ApiException {
        ApiResponse<GetAnArtistsTopTracks200Response> localVarResp = getSeveralTracksWithHttpInfo(ids, market);
        return localVarResp.getData();
    }

    /**
     * Get Several Tracks 
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @param market  (optional)
     * @return ApiResponse&lt;GetAnArtistsTopTracks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAnArtistsTopTracks200Response> getSeveralTracksWithHttpInfo(String ids, String market) throws ApiException {
        okhttp3.Call localVarCall = getSeveralTracksValidateBeforeCall(ids, market, null);
        Type localVarReturnType = new TypeToken<GetAnArtistsTopTracks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Several Tracks  (asynchronously)
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @param market  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSeveralTracksAsync(String ids, String market, final ApiCallback<GetAnArtistsTopTracks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSeveralTracksValidateBeforeCall(ids, market, _callback);
        Type localVarReturnType = new TypeToken<GetAnArtistsTopTracks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrack
     * @param id  (required)
     * @param market  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A track </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackCall(String id, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tracks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackValidateBeforeCall(String id, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTrack(Async)");
        }

        return getTrackCall(id, market, _callback);

    }

    /**
     * Get Track 
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @param market  (optional)
     * @return TrackObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A track </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public TrackObject getTrack(String id, String market) throws ApiException {
        ApiResponse<TrackObject> localVarResp = getTrackWithHttpInfo(id, market);
        return localVarResp.getData();
    }

    /**
     * Get Track 
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @param market  (optional)
     * @return ApiResponse&lt;TrackObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A track </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackObject> getTrackWithHttpInfo(String id, String market) throws ApiException {
        okhttp3.Call localVarCall = getTrackValidateBeforeCall(id, market, null);
        Type localVarReturnType = new TypeToken<TrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Track  (asynchronously)
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @param market  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A track </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackAsync(String id, String market, final ApiCallback<TrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackValidateBeforeCall(id, market, _callback);
        Type localVarReturnType = new TypeToken<TrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersSavedTracks
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersSavedTracksCall(String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersSavedTracksValidateBeforeCall(String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getUsersSavedTracksCall(market, limit, offset, _callback);

    }

    /**
     * Get User&#39;s Saved Tracks 
     * Get a list of the songs saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingSavedTrackObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingSavedTrackObject getUsersSavedTracks(String market, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingSavedTrackObject> localVarResp = getUsersSavedTracksWithHttpInfo(market, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get User&#39;s Saved Tracks 
     * Get a list of the songs saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingSavedTrackObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingSavedTrackObject> getUsersSavedTracksWithHttpInfo(String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getUsersSavedTracksValidateBeforeCall(market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSavedTrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User&#39;s Saved Tracks  (asynchronously)
     * Get a list of the songs saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersSavedTracksAsync(String market, Integer limit, Integer offset, final ApiCallback<PagingSavedTrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersSavedTracksValidateBeforeCall(market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSavedTrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersTopArtistsAndTracks_0
     * @param type  (required)
     * @param timeRange  (optional, default to medium_term)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersTopArtistsAndTracks_0Call(String type, String timeRange, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/top/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_range", timeRange));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersTopArtistsAndTracks_0ValidateBeforeCall(String type, String timeRange, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getUsersTopArtistsAndTracks_0(Async)");
        }

        return getUsersTopArtistsAndTracks_0Call(type, timeRange, limit, offset, _callback);

    }

    /**
     * Get User&#39;s Top Items 
     * Get the current user&#39;s top artists or tracks based on calculated affinity. 
     * @param type  (required)
     * @param timeRange  (optional, default to medium_term)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return GetUsersTopArtistsAndTracks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetUsersTopArtistsAndTracks200Response getUsersTopArtistsAndTracks_0(String type, String timeRange, Integer limit, Integer offset) throws ApiException {
        ApiResponse<GetUsersTopArtistsAndTracks200Response> localVarResp = getUsersTopArtistsAndTracks_0WithHttpInfo(type, timeRange, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get User&#39;s Top Items 
     * Get the current user&#39;s top artists or tracks based on calculated affinity. 
     * @param type  (required)
     * @param timeRange  (optional, default to medium_term)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;GetUsersTopArtistsAndTracks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUsersTopArtistsAndTracks200Response> getUsersTopArtistsAndTracks_0WithHttpInfo(String type, String timeRange, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getUsersTopArtistsAndTracks_0ValidateBeforeCall(type, timeRange, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetUsersTopArtistsAndTracks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User&#39;s Top Items  (asynchronously)
     * Get the current user&#39;s top artists or tracks based on calculated affinity. 
     * @param type  (required)
     * @param timeRange  (optional, default to medium_term)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersTopArtistsAndTracks_0Async(String type, String timeRange, Integer limit, Integer offset, final ApiCallback<GetUsersTopArtistsAndTracks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersTopArtistsAndTracks_0ValidateBeforeCall(type, timeRange, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetUsersTopArtistsAndTracks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeTracksPlaylist_0
     * @param playlistId  (required)
     * @param removeTracksPlaylistRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTracksPlaylist_0Call(String playlistId, RemoveTracksPlaylistRequest removeTracksPlaylistRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeTracksPlaylistRequest;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTracksPlaylist_0ValidateBeforeCall(String playlistId, RemoveTracksPlaylistRequest removeTracksPlaylistRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling removeTracksPlaylist_0(Async)");
        }

        return removeTracksPlaylist_0Call(playlistId, removeTracksPlaylistRequest, _callback);

    }

    /**
     * Remove Playlist Items 
     * Remove one or more items from a user&#39;s playlist. 
     * @param playlistId  (required)
     * @param removeTracksPlaylistRequest  (optional)
     * @return ReorderOrReplacePlaylistsTracks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ReorderOrReplacePlaylistsTracks200Response removeTracksPlaylist_0(String playlistId, RemoveTracksPlaylistRequest removeTracksPlaylistRequest) throws ApiException {
        ApiResponse<ReorderOrReplacePlaylistsTracks200Response> localVarResp = removeTracksPlaylist_0WithHttpInfo(playlistId, removeTracksPlaylistRequest);
        return localVarResp.getData();
    }

    /**
     * Remove Playlist Items 
     * Remove one or more items from a user&#39;s playlist. 
     * @param playlistId  (required)
     * @param removeTracksPlaylistRequest  (optional)
     * @return ApiResponse&lt;ReorderOrReplacePlaylistsTracks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReorderOrReplacePlaylistsTracks200Response> removeTracksPlaylist_0WithHttpInfo(String playlistId, RemoveTracksPlaylistRequest removeTracksPlaylistRequest) throws ApiException {
        okhttp3.Call localVarCall = removeTracksPlaylist_0ValidateBeforeCall(playlistId, removeTracksPlaylistRequest, null);
        Type localVarReturnType = new TypeToken<ReorderOrReplacePlaylistsTracks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Playlist Items  (asynchronously)
     * Remove one or more items from a user&#39;s playlist. 
     * @param playlistId  (required)
     * @param removeTracksPlaylistRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTracksPlaylist_0Async(String playlistId, RemoveTracksPlaylistRequest removeTracksPlaylistRequest, final ApiCallback<ReorderOrReplacePlaylistsTracks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTracksPlaylist_0ValidateBeforeCall(playlistId, removeTracksPlaylistRequest, _callback);
        Type localVarReturnType = new TypeToken<ReorderOrReplacePlaylistsTracks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeTracksUser
     * @param ids  (required)
     * @param saveAlbumsUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTracksUserCall(String ids, SaveAlbumsUserRequest saveAlbumsUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveAlbumsUserRequest;

        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTracksUserValidateBeforeCall(String ids, SaveAlbumsUserRequest saveAlbumsUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeTracksUser(Async)");
        }

        return removeTracksUserCall(ids, saveAlbumsUserRequest, _callback);

    }

    /**
     * Remove User&#39;s Saved Tracks 
     * Remove one or more tracks from the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param saveAlbumsUserRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public void removeTracksUser(String ids, SaveAlbumsUserRequest saveAlbumsUserRequest) throws ApiException {
        removeTracksUserWithHttpInfo(ids, saveAlbumsUserRequest);
    }

    /**
     * Remove User&#39;s Saved Tracks 
     * Remove one or more tracks from the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param saveAlbumsUserRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeTracksUserWithHttpInfo(String ids, SaveAlbumsUserRequest saveAlbumsUserRequest) throws ApiException {
        okhttp3.Call localVarCall = removeTracksUserValidateBeforeCall(ids, saveAlbumsUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove User&#39;s Saved Tracks  (asynchronously)
     * Remove one or more tracks from the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param saveAlbumsUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTracksUserAsync(String ids, SaveAlbumsUserRequest saveAlbumsUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTracksUserValidateBeforeCall(ids, saveAlbumsUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reorderOrReplacePlaylistsTracks_0
     * @param playlistId  (required)
     * @param uris  (optional)
     * @param reorderOrReplacePlaylistsTracksRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reorderOrReplacePlaylistsTracks_0Call(String playlistId, String uris, ReorderOrReplacePlaylistsTracksRequest reorderOrReplacePlaylistsTracksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reorderOrReplacePlaylistsTracksRequest;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reorderOrReplacePlaylistsTracks_0ValidateBeforeCall(String playlistId, String uris, ReorderOrReplacePlaylistsTracksRequest reorderOrReplacePlaylistsTracksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling reorderOrReplacePlaylistsTracks_0(Async)");
        }

        return reorderOrReplacePlaylistsTracks_0Call(playlistId, uris, reorderOrReplacePlaylistsTracksRequest, _callback);

    }

    /**
     * Update Playlist Items 
     * Either reorder or replace items in a playlist depending on the request&#39;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#39;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#39;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#39;t be applied together in a single request. 
     * @param playlistId  (required)
     * @param uris  (optional)
     * @param reorderOrReplacePlaylistsTracksRequest  (optional)
     * @return ReorderOrReplacePlaylistsTracks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ReorderOrReplacePlaylistsTracks200Response reorderOrReplacePlaylistsTracks_0(String playlistId, String uris, ReorderOrReplacePlaylistsTracksRequest reorderOrReplacePlaylistsTracksRequest) throws ApiException {
        ApiResponse<ReorderOrReplacePlaylistsTracks200Response> localVarResp = reorderOrReplacePlaylistsTracks_0WithHttpInfo(playlistId, uris, reorderOrReplacePlaylistsTracksRequest);
        return localVarResp.getData();
    }

    /**
     * Update Playlist Items 
     * Either reorder or replace items in a playlist depending on the request&#39;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#39;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#39;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#39;t be applied together in a single request. 
     * @param playlistId  (required)
     * @param uris  (optional)
     * @param reorderOrReplacePlaylistsTracksRequest  (optional)
     * @return ApiResponse&lt;ReorderOrReplacePlaylistsTracks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReorderOrReplacePlaylistsTracks200Response> reorderOrReplacePlaylistsTracks_0WithHttpInfo(String playlistId, String uris, ReorderOrReplacePlaylistsTracksRequest reorderOrReplacePlaylistsTracksRequest) throws ApiException {
        okhttp3.Call localVarCall = reorderOrReplacePlaylistsTracks_0ValidateBeforeCall(playlistId, uris, reorderOrReplacePlaylistsTracksRequest, null);
        Type localVarReturnType = new TypeToken<ReorderOrReplacePlaylistsTracks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Playlist Items  (asynchronously)
     * Either reorder or replace items in a playlist depending on the request&#39;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#39;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#39;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#39;t be applied together in a single request. 
     * @param playlistId  (required)
     * @param uris  (optional)
     * @param reorderOrReplacePlaylistsTracksRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reorderOrReplacePlaylistsTracks_0Async(String playlistId, String uris, ReorderOrReplacePlaylistsTracksRequest reorderOrReplacePlaylistsTracksRequest, final ApiCallback<ReorderOrReplacePlaylistsTracks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reorderOrReplacePlaylistsTracks_0ValidateBeforeCall(playlistId, uris, reorderOrReplacePlaylistsTracksRequest, _callback);
        Type localVarReturnType = new TypeToken<ReorderOrReplacePlaylistsTracks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveTracksUser
     * @param ids  (required)
     * @param saveTracksUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveTracksUserCall(String ids, SaveTracksUserRequest saveTracksUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveTracksUserRequest;

        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveTracksUserValidateBeforeCall(String ids, SaveTracksUserRequest saveTracksUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling saveTracksUser(Async)");
        }

        return saveTracksUserCall(ids, saveTracksUserRequest, _callback);

    }

    /**
     * Save Tracks for Current User 
     * Save one or more tracks to the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param saveTracksUserRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public void saveTracksUser(String ids, SaveTracksUserRequest saveTracksUserRequest) throws ApiException {
        saveTracksUserWithHttpInfo(ids, saveTracksUserRequest);
    }

    /**
     * Save Tracks for Current User 
     * Save one or more tracks to the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param saveTracksUserRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveTracksUserWithHttpInfo(String ids, SaveTracksUserRequest saveTracksUserRequest) throws ApiException {
        okhttp3.Call localVarCall = saveTracksUserValidateBeforeCall(ids, saveTracksUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save Tracks for Current User  (asynchronously)
     * Save one or more tracks to the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param saveTracksUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveTracksUserAsync(String ids, SaveTracksUserRequest saveTracksUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveTracksUserValidateBeforeCall(ids, saveTracksUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
