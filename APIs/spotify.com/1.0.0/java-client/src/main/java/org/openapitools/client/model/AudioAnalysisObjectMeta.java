/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AudioAnalysisObjectMeta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:01.158028-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioAnalysisObjectMeta {
  public static final String SERIALIZED_NAME_ANALYSIS_TIME = "analysis_time";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_TIME)
  private BigDecimal analysisTime;

  public static final String SERIALIZED_NAME_ANALYZER_VERSION = "analyzer_version";
  @SerializedName(SERIALIZED_NAME_ANALYZER_VERSION)
  private String analyzerVersion;

  public static final String SERIALIZED_NAME_DETAILED_STATUS = "detailed_status";
  @SerializedName(SERIALIZED_NAME_DETAILED_STATUS)
  private String detailedStatus;

  public static final String SERIALIZED_NAME_INPUT_PROCESS = "input_process";
  @SerializedName(SERIALIZED_NAME_INPUT_PROCESS)
  private String inputProcess;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public AudioAnalysisObjectMeta() {
  }

  public AudioAnalysisObjectMeta analysisTime(BigDecimal analysisTime) {
    this.analysisTime = analysisTime;
    return this;
  }

  /**
   * The amount of time taken to analyze this track.
   * @return analysisTime
   */
  @javax.annotation.Nullable
  public BigDecimal getAnalysisTime() {
    return analysisTime;
  }

  public void setAnalysisTime(BigDecimal analysisTime) {
    this.analysisTime = analysisTime;
  }


  public AudioAnalysisObjectMeta analyzerVersion(String analyzerVersion) {
    this.analyzerVersion = analyzerVersion;
    return this;
  }

  /**
   * The version of the Analyzer used to analyze this track.
   * @return analyzerVersion
   */
  @javax.annotation.Nullable
  public String getAnalyzerVersion() {
    return analyzerVersion;
  }

  public void setAnalyzerVersion(String analyzerVersion) {
    this.analyzerVersion = analyzerVersion;
  }


  public AudioAnalysisObjectMeta detailedStatus(String detailedStatus) {
    this.detailedStatus = detailedStatus;
    return this;
  }

  /**
   * A detailed status code for this track. If analysis data is missing, this code may explain why.
   * @return detailedStatus
   */
  @javax.annotation.Nullable
  public String getDetailedStatus() {
    return detailedStatus;
  }

  public void setDetailedStatus(String detailedStatus) {
    this.detailedStatus = detailedStatus;
  }


  public AudioAnalysisObjectMeta inputProcess(String inputProcess) {
    this.inputProcess = inputProcess;
    return this;
  }

  /**
   * The method used to read the track&#39;s audio data.
   * @return inputProcess
   */
  @javax.annotation.Nullable
  public String getInputProcess() {
    return inputProcess;
  }

  public void setInputProcess(String inputProcess) {
    this.inputProcess = inputProcess;
  }


  public AudioAnalysisObjectMeta platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * The platform used to read the track&#39;s audio data.
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public AudioAnalysisObjectMeta statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * The return code of the analyzer process. 0 if successful, 1 if any errors occurred.
   * @return statusCode
   */
  @javax.annotation.Nullable
  public Integer getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  public AudioAnalysisObjectMeta timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * The Unix timestamp (in seconds) at which this track was analyzed.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioAnalysisObjectMeta audioAnalysisObjectMeta = (AudioAnalysisObjectMeta) o;
    return Objects.equals(this.analysisTime, audioAnalysisObjectMeta.analysisTime) &&
        Objects.equals(this.analyzerVersion, audioAnalysisObjectMeta.analyzerVersion) &&
        Objects.equals(this.detailedStatus, audioAnalysisObjectMeta.detailedStatus) &&
        Objects.equals(this.inputProcess, audioAnalysisObjectMeta.inputProcess) &&
        Objects.equals(this.platform, audioAnalysisObjectMeta.platform) &&
        Objects.equals(this.statusCode, audioAnalysisObjectMeta.statusCode) &&
        Objects.equals(this.timestamp, audioAnalysisObjectMeta.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisTime, analyzerVersion, detailedStatus, inputProcess, platform, statusCode, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioAnalysisObjectMeta {\n");
    sb.append("    analysisTime: ").append(toIndentedString(analysisTime)).append("\n");
    sb.append("    analyzerVersion: ").append(toIndentedString(analyzerVersion)).append("\n");
    sb.append("    detailedStatus: ").append(toIndentedString(detailedStatus)).append("\n");
    sb.append("    inputProcess: ").append(toIndentedString(inputProcess)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysis_time");
    openapiFields.add("analyzer_version");
    openapiFields.add("detailed_status");
    openapiFields.add("input_process");
    openapiFields.add("platform");
    openapiFields.add("status_code");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioAnalysisObjectMeta
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioAnalysisObjectMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioAnalysisObjectMeta is not found in the empty JSON string", AudioAnalysisObjectMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioAnalysisObjectMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioAnalysisObjectMeta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("analyzer_version") != null && !jsonObj.get("analyzer_version").isJsonNull()) && !jsonObj.get("analyzer_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analyzer_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analyzer_version").toString()));
      }
      if ((jsonObj.get("detailed_status") != null && !jsonObj.get("detailed_status").isJsonNull()) && !jsonObj.get("detailed_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailed_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailed_status").toString()));
      }
      if ((jsonObj.get("input_process") != null && !jsonObj.get("input_process").isJsonNull()) && !jsonObj.get("input_process").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_process` to be a primitive type in the JSON string but got `%s`", jsonObj.get("input_process").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioAnalysisObjectMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioAnalysisObjectMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioAnalysisObjectMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioAnalysisObjectMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioAnalysisObjectMeta>() {
           @Override
           public void write(JsonWriter out, AudioAnalysisObjectMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioAnalysisObjectMeta read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioAnalysisObjectMeta given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioAnalysisObjectMeta
   * @throws IOException if the JSON string is invalid with respect to AudioAnalysisObjectMeta
   */
  public static AudioAnalysisObjectMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioAnalysisObjectMeta.class);
  }

  /**
   * Convert an instance of AudioAnalysisObjectMeta to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

