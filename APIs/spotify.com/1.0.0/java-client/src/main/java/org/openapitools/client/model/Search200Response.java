/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PagingArtistObject;
import org.openapitools.client.model.PagingPlaylistObject;
import org.openapitools.client.model.PagingSimplifiedAlbumObject;
import org.openapitools.client.model.PagingSimplifiedAudiobookObject;
import org.openapitools.client.model.PagingSimplifiedEpisodeObject;
import org.openapitools.client.model.PagingSimplifiedShowObject;
import org.openapitools.client.model.PagingTrackObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Search200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:01.158028-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Search200Response {
  public static final String SERIALIZED_NAME_ALBUMS = "albums";
  @SerializedName(SERIALIZED_NAME_ALBUMS)
  private PagingSimplifiedAlbumObject albums;

  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private PagingArtistObject artists;

  public static final String SERIALIZED_NAME_AUDIOBOOKS = "audiobooks";
  @SerializedName(SERIALIZED_NAME_AUDIOBOOKS)
  private PagingSimplifiedAudiobookObject audiobooks;

  public static final String SERIALIZED_NAME_EPISODES = "episodes";
  @SerializedName(SERIALIZED_NAME_EPISODES)
  private PagingSimplifiedEpisodeObject episodes;

  public static final String SERIALIZED_NAME_PLAYLISTS = "playlists";
  @SerializedName(SERIALIZED_NAME_PLAYLISTS)
  private PagingPlaylistObject playlists;

  public static final String SERIALIZED_NAME_SHOWS = "shows";
  @SerializedName(SERIALIZED_NAME_SHOWS)
  private PagingSimplifiedShowObject shows;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private PagingTrackObject tracks;

  public Search200Response() {
  }

  public Search200Response albums(PagingSimplifiedAlbumObject albums) {
    this.albums = albums;
    return this;
  }

  /**
   * Get albums
   * @return albums
   */
  @javax.annotation.Nullable
  public PagingSimplifiedAlbumObject getAlbums() {
    return albums;
  }

  public void setAlbums(PagingSimplifiedAlbumObject albums) {
    this.albums = albums;
  }


  public Search200Response artists(PagingArtistObject artists) {
    this.artists = artists;
    return this;
  }

  /**
   * Get artists
   * @return artists
   */
  @javax.annotation.Nullable
  public PagingArtistObject getArtists() {
    return artists;
  }

  public void setArtists(PagingArtistObject artists) {
    this.artists = artists;
  }


  public Search200Response audiobooks(PagingSimplifiedAudiobookObject audiobooks) {
    this.audiobooks = audiobooks;
    return this;
  }

  /**
   * Get audiobooks
   * @return audiobooks
   */
  @javax.annotation.Nullable
  public PagingSimplifiedAudiobookObject getAudiobooks() {
    return audiobooks;
  }

  public void setAudiobooks(PagingSimplifiedAudiobookObject audiobooks) {
    this.audiobooks = audiobooks;
  }


  public Search200Response episodes(PagingSimplifiedEpisodeObject episodes) {
    this.episodes = episodes;
    return this;
  }

  /**
   * Get episodes
   * @return episodes
   */
  @javax.annotation.Nullable
  public PagingSimplifiedEpisodeObject getEpisodes() {
    return episodes;
  }

  public void setEpisodes(PagingSimplifiedEpisodeObject episodes) {
    this.episodes = episodes;
  }


  public Search200Response playlists(PagingPlaylistObject playlists) {
    this.playlists = playlists;
    return this;
  }

  /**
   * Get playlists
   * @return playlists
   */
  @javax.annotation.Nullable
  public PagingPlaylistObject getPlaylists() {
    return playlists;
  }

  public void setPlaylists(PagingPlaylistObject playlists) {
    this.playlists = playlists;
  }


  public Search200Response shows(PagingSimplifiedShowObject shows) {
    this.shows = shows;
    return this;
  }

  /**
   * Get shows
   * @return shows
   */
  @javax.annotation.Nullable
  public PagingSimplifiedShowObject getShows() {
    return shows;
  }

  public void setShows(PagingSimplifiedShowObject shows) {
    this.shows = shows;
  }


  public Search200Response tracks(PagingTrackObject tracks) {
    this.tracks = tracks;
    return this;
  }

  /**
   * Get tracks
   * @return tracks
   */
  @javax.annotation.Nullable
  public PagingTrackObject getTracks() {
    return tracks;
  }

  public void setTracks(PagingTrackObject tracks) {
    this.tracks = tracks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Search200Response search200Response = (Search200Response) o;
    return Objects.equals(this.albums, search200Response.albums) &&
        Objects.equals(this.artists, search200Response.artists) &&
        Objects.equals(this.audiobooks, search200Response.audiobooks) &&
        Objects.equals(this.episodes, search200Response.episodes) &&
        Objects.equals(this.playlists, search200Response.playlists) &&
        Objects.equals(this.shows, search200Response.shows) &&
        Objects.equals(this.tracks, search200Response.tracks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(albums, artists, audiobooks, episodes, playlists, shows, tracks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Search200Response {\n");
    sb.append("    albums: ").append(toIndentedString(albums)).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    audiobooks: ").append(toIndentedString(audiobooks)).append("\n");
    sb.append("    episodes: ").append(toIndentedString(episodes)).append("\n");
    sb.append("    playlists: ").append(toIndentedString(playlists)).append("\n");
    sb.append("    shows: ").append(toIndentedString(shows)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("albums");
    openapiFields.add("artists");
    openapiFields.add("audiobooks");
    openapiFields.add("episodes");
    openapiFields.add("playlists");
    openapiFields.add("shows");
    openapiFields.add("tracks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Search200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Search200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Search200Response is not found in the empty JSON string", Search200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Search200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Search200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `albums`
      if (jsonObj.get("albums") != null && !jsonObj.get("albums").isJsonNull()) {
        PagingSimplifiedAlbumObject.validateJsonElement(jsonObj.get("albums"));
      }
      // validate the optional field `artists`
      if (jsonObj.get("artists") != null && !jsonObj.get("artists").isJsonNull()) {
        PagingArtistObject.validateJsonElement(jsonObj.get("artists"));
      }
      // validate the optional field `audiobooks`
      if (jsonObj.get("audiobooks") != null && !jsonObj.get("audiobooks").isJsonNull()) {
        PagingSimplifiedAudiobookObject.validateJsonElement(jsonObj.get("audiobooks"));
      }
      // validate the optional field `episodes`
      if (jsonObj.get("episodes") != null && !jsonObj.get("episodes").isJsonNull()) {
        PagingSimplifiedEpisodeObject.validateJsonElement(jsonObj.get("episodes"));
      }
      // validate the optional field `playlists`
      if (jsonObj.get("playlists") != null && !jsonObj.get("playlists").isJsonNull()) {
        PagingPlaylistObject.validateJsonElement(jsonObj.get("playlists"));
      }
      // validate the optional field `shows`
      if (jsonObj.get("shows") != null && !jsonObj.get("shows").isJsonNull()) {
        PagingSimplifiedShowObject.validateJsonElement(jsonObj.get("shows"));
      }
      // validate the optional field `tracks`
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull()) {
        PagingTrackObject.validateJsonElement(jsonObj.get("tracks"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Search200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Search200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Search200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Search200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Search200Response>() {
           @Override
           public void write(JsonWriter out, Search200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Search200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Search200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Search200Response
   * @throws IOException if the JSON string is invalid with respect to Search200Response
   */
  public static Search200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Search200Response.class);
  }

  /**
   * Convert an instance of Search200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

