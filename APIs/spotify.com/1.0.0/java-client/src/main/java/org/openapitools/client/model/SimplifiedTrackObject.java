/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExternalUrlObject;
import org.openapitools.client.model.LinkedTrackObject;
import org.openapitools.client.model.SimplifiedArtistObject;
import org.openapitools.client.model.TrackRestrictionObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimplifiedTrackObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:01.158028-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimplifiedTrackObject {
  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<SimplifiedArtistObject> artists = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_MARKETS = "available_markets";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_MARKETS)
  private List<String> availableMarkets = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISC_NUMBER = "disc_number";
  @SerializedName(SERIALIZED_NAME_DISC_NUMBER)
  private Integer discNumber;

  public static final String SERIALIZED_NAME_DURATION_MS = "duration_ms";
  @SerializedName(SERIALIZED_NAME_DURATION_MS)
  private Integer durationMs;

  public static final String SERIALIZED_NAME_EXPLICIT = "explicit";
  @SerializedName(SERIALIZED_NAME_EXPLICIT)
  private Boolean explicit;

  public static final String SERIALIZED_NAME_EXTERNAL_URLS = "external_urls";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URLS)
  private ExternalUrlObject externalUrls;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_LOCAL = "is_local";
  @SerializedName(SERIALIZED_NAME_IS_LOCAL)
  private Boolean isLocal;

  public static final String SERIALIZED_NAME_IS_PLAYABLE = "is_playable";
  @SerializedName(SERIALIZED_NAME_IS_PLAYABLE)
  private Boolean isPlayable;

  public static final String SERIALIZED_NAME_LINKED_FROM = "linked_from";
  @SerializedName(SERIALIZED_NAME_LINKED_FROM)
  private LinkedTrackObject linkedFrom;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREVIEW_URL = "preview_url";
  @SerializedName(SERIALIZED_NAME_PREVIEW_URL)
  private String previewUrl;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private TrackRestrictionObject restrictions;

  public static final String SERIALIZED_NAME_TRACK_NUMBER = "track_number";
  @SerializedName(SERIALIZED_NAME_TRACK_NUMBER)
  private Integer trackNumber;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public SimplifiedTrackObject() {
  }

  public SimplifiedTrackObject artists(List<SimplifiedArtistObject> artists) {
    this.artists = artists;
    return this;
  }

  public SimplifiedTrackObject addArtistsItem(SimplifiedArtistObject artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<>();
    }
    this.artists.add(artistsItem);
    return this;
  }

  /**
   * The artists who performed the track. Each artist object includes a link in &#x60;href&#x60; to more detailed information about the artist.
   * @return artists
   */
  @javax.annotation.Nullable
  public List<SimplifiedArtistObject> getArtists() {
    return artists;
  }

  public void setArtists(List<SimplifiedArtistObject> artists) {
    this.artists = artists;
  }


  public SimplifiedTrackObject availableMarkets(List<String> availableMarkets) {
    this.availableMarkets = availableMarkets;
    return this;
  }

  public SimplifiedTrackObject addAvailableMarketsItem(String availableMarketsItem) {
    if (this.availableMarkets == null) {
      this.availableMarkets = new ArrayList<>();
    }
    this.availableMarkets.add(availableMarketsItem);
    return this;
  }

  /**
   * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
   * @return availableMarkets
   */
  @javax.annotation.Nullable
  public List<String> getAvailableMarkets() {
    return availableMarkets;
  }

  public void setAvailableMarkets(List<String> availableMarkets) {
    this.availableMarkets = availableMarkets;
  }


  public SimplifiedTrackObject discNumber(Integer discNumber) {
    this.discNumber = discNumber;
    return this;
  }

  /**
   * The disc number (usually &#x60;1&#x60; unless the album consists of more than one disc).
   * @return discNumber
   */
  @javax.annotation.Nullable
  public Integer getDiscNumber() {
    return discNumber;
  }

  public void setDiscNumber(Integer discNumber) {
    this.discNumber = discNumber;
  }


  public SimplifiedTrackObject durationMs(Integer durationMs) {
    this.durationMs = durationMs;
    return this;
  }

  /**
   * The track length in milliseconds.
   * @return durationMs
   */
  @javax.annotation.Nullable
  public Integer getDurationMs() {
    return durationMs;
  }

  public void setDurationMs(Integer durationMs) {
    this.durationMs = durationMs;
  }


  public SimplifiedTrackObject explicit(Boolean explicit) {
    this.explicit = explicit;
    return this;
  }

  /**
   * Whether or not the track has explicit lyrics ( &#x60;true&#x60; &#x3D; yes it does; &#x60;false&#x60; &#x3D; no it does not OR unknown).
   * @return explicit
   */
  @javax.annotation.Nullable
  public Boolean getExplicit() {
    return explicit;
  }

  public void setExplicit(Boolean explicit) {
    this.explicit = explicit;
  }


  public SimplifiedTrackObject externalUrls(ExternalUrlObject externalUrls) {
    this.externalUrls = externalUrls;
    return this;
  }

  /**
   * External URLs for this track. 
   * @return externalUrls
   */
  @javax.annotation.Nullable
  public ExternalUrlObject getExternalUrls() {
    return externalUrls;
  }

  public void setExternalUrls(ExternalUrlObject externalUrls) {
    this.externalUrls = externalUrls;
  }


  public SimplifiedTrackObject href(String href) {
    this.href = href;
    return this;
  }

  /**
   * A link to the Web API endpoint providing full details of the track.
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public SimplifiedTrackObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SimplifiedTrackObject isLocal(Boolean isLocal) {
    this.isLocal = isLocal;
    return this;
  }

  /**
   * Whether or not the track is from a local file. 
   * @return isLocal
   */
  @javax.annotation.Nullable
  public Boolean getIsLocal() {
    return isLocal;
  }

  public void setIsLocal(Boolean isLocal) {
    this.isLocal = isLocal;
  }


  public SimplifiedTrackObject isPlayable(Boolean isPlayable) {
    this.isPlayable = isPlayable;
    return this;
  }

  /**
   * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If &#x60;true&#x60;, the track is playable in the given market. Otherwise &#x60;false&#x60;. 
   * @return isPlayable
   */
  @javax.annotation.Nullable
  public Boolean getIsPlayable() {
    return isPlayable;
  }

  public void setIsPlayable(Boolean isPlayable) {
    this.isPlayable = isPlayable;
  }


  public SimplifiedTrackObject linkedFrom(LinkedTrackObject linkedFrom) {
    this.linkedFrom = linkedFrom;
    return this;
  }

  /**
   * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the &#x60;linked_from&#x60; object contains information about the originally requested track.
   * @return linkedFrom
   */
  @javax.annotation.Nullable
  public LinkedTrackObject getLinkedFrom() {
    return linkedFrom;
  }

  public void setLinkedFrom(LinkedTrackObject linkedFrom) {
    this.linkedFrom = linkedFrom;
  }


  public SimplifiedTrackObject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the track.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SimplifiedTrackObject previewUrl(String previewUrl) {
    this.previewUrl = previewUrl;
    return this;
  }

  /**
   * A URL to a 30 second preview (MP3 format) of the track. 
   * @return previewUrl
   */
  @javax.annotation.Nullable
  public String getPreviewUrl() {
    return previewUrl;
  }

  public void setPreviewUrl(String previewUrl) {
    this.previewUrl = previewUrl;
  }


  public SimplifiedTrackObject restrictions(TrackRestrictionObject restrictions) {
    this.restrictions = restrictions;
    return this;
  }

  /**
   * Included in the response when a content restriction is applied. 
   * @return restrictions
   */
  @javax.annotation.Nullable
  public TrackRestrictionObject getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(TrackRestrictionObject restrictions) {
    this.restrictions = restrictions;
  }


  public SimplifiedTrackObject trackNumber(Integer trackNumber) {
    this.trackNumber = trackNumber;
    return this;
  }

  /**
   * The number of the track. If an album has several discs, the track number is the number on the specified disc. 
   * @return trackNumber
   */
  @javax.annotation.Nullable
  public Integer getTrackNumber() {
    return trackNumber;
  }

  public void setTrackNumber(Integer trackNumber) {
    this.trackNumber = trackNumber;
  }


  public SimplifiedTrackObject type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The object type: \&quot;track\&quot;. 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public SimplifiedTrackObject uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimplifiedTrackObject simplifiedTrackObject = (SimplifiedTrackObject) o;
    return Objects.equals(this.artists, simplifiedTrackObject.artists) &&
        Objects.equals(this.availableMarkets, simplifiedTrackObject.availableMarkets) &&
        Objects.equals(this.discNumber, simplifiedTrackObject.discNumber) &&
        Objects.equals(this.durationMs, simplifiedTrackObject.durationMs) &&
        Objects.equals(this.explicit, simplifiedTrackObject.explicit) &&
        Objects.equals(this.externalUrls, simplifiedTrackObject.externalUrls) &&
        Objects.equals(this.href, simplifiedTrackObject.href) &&
        Objects.equals(this.id, simplifiedTrackObject.id) &&
        Objects.equals(this.isLocal, simplifiedTrackObject.isLocal) &&
        Objects.equals(this.isPlayable, simplifiedTrackObject.isPlayable) &&
        Objects.equals(this.linkedFrom, simplifiedTrackObject.linkedFrom) &&
        Objects.equals(this.name, simplifiedTrackObject.name) &&
        Objects.equals(this.previewUrl, simplifiedTrackObject.previewUrl) &&
        Objects.equals(this.restrictions, simplifiedTrackObject.restrictions) &&
        Objects.equals(this.trackNumber, simplifiedTrackObject.trackNumber) &&
        Objects.equals(this.type, simplifiedTrackObject.type) &&
        Objects.equals(this.uri, simplifiedTrackObject.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artists, availableMarkets, discNumber, durationMs, explicit, externalUrls, href, id, isLocal, isPlayable, linkedFrom, name, previewUrl, restrictions, trackNumber, type, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimplifiedTrackObject {\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    availableMarkets: ").append(toIndentedString(availableMarkets)).append("\n");
    sb.append("    discNumber: ").append(toIndentedString(discNumber)).append("\n");
    sb.append("    durationMs: ").append(toIndentedString(durationMs)).append("\n");
    sb.append("    explicit: ").append(toIndentedString(explicit)).append("\n");
    sb.append("    externalUrls: ").append(toIndentedString(externalUrls)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isLocal: ").append(toIndentedString(isLocal)).append("\n");
    sb.append("    isPlayable: ").append(toIndentedString(isPlayable)).append("\n");
    sb.append("    linkedFrom: ").append(toIndentedString(linkedFrom)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    previewUrl: ").append(toIndentedString(previewUrl)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    trackNumber: ").append(toIndentedString(trackNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artists");
    openapiFields.add("available_markets");
    openapiFields.add("disc_number");
    openapiFields.add("duration_ms");
    openapiFields.add("explicit");
    openapiFields.add("external_urls");
    openapiFields.add("href");
    openapiFields.add("id");
    openapiFields.add("is_local");
    openapiFields.add("is_playable");
    openapiFields.add("linked_from");
    openapiFields.add("name");
    openapiFields.add("preview_url");
    openapiFields.add("restrictions");
    openapiFields.add("track_number");
    openapiFields.add("type");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimplifiedTrackObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimplifiedTrackObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimplifiedTrackObject is not found in the empty JSON string", SimplifiedTrackObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimplifiedTrackObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimplifiedTrackObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("artists") != null && !jsonObj.get("artists").isJsonNull()) {
        JsonArray jsonArrayartists = jsonObj.getAsJsonArray("artists");
        if (jsonArrayartists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artists` to be an array in the JSON string but got `%s`", jsonObj.get("artists").toString()));
          }

          // validate the optional field `artists` (array)
          for (int i = 0; i < jsonArrayartists.size(); i++) {
            SimplifiedArtistObject.validateJsonElement(jsonArrayartists.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("available_markets") != null && !jsonObj.get("available_markets").isJsonNull() && !jsonObj.get("available_markets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_markets` to be an array in the JSON string but got `%s`", jsonObj.get("available_markets").toString()));
      }
      // validate the optional field `external_urls`
      if (jsonObj.get("external_urls") != null && !jsonObj.get("external_urls").isJsonNull()) {
        ExternalUrlObject.validateJsonElement(jsonObj.get("external_urls"));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `linked_from`
      if (jsonObj.get("linked_from") != null && !jsonObj.get("linked_from").isJsonNull()) {
        LinkedTrackObject.validateJsonElement(jsonObj.get("linked_from"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("preview_url") != null && !jsonObj.get("preview_url").isJsonNull()) && !jsonObj.get("preview_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preview_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preview_url").toString()));
      }
      // validate the optional field `restrictions`
      if (jsonObj.get("restrictions") != null && !jsonObj.get("restrictions").isJsonNull()) {
        TrackRestrictionObject.validateJsonElement(jsonObj.get("restrictions"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimplifiedTrackObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimplifiedTrackObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimplifiedTrackObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimplifiedTrackObject.class));

       return (TypeAdapter<T>) new TypeAdapter<SimplifiedTrackObject>() {
           @Override
           public void write(JsonWriter out, SimplifiedTrackObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimplifiedTrackObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimplifiedTrackObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimplifiedTrackObject
   * @throws IOException if the JSON string is invalid with respect to SimplifiedTrackObject
   */
  public static SimplifiedTrackObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimplifiedTrackObject.class);
  }

  /**
   * Convert an instance of SimplifiedTrackObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

