# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copyright_object import CopyrightObject
from openapi_server.models.external_url_object import ExternalUrlObject
from openapi_server.models.image_object import ImageObject
from openapi_server import util


class SimplifiedShowObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_markets: List[str]=None, copyrights: List[CopyrightObject]=None, description: str=None, explicit: bool=None, external_urls: ExternalUrlObject=None, href: str=None, html_description: str=None, id: str=None, images: List[ImageObject]=None, is_externally_hosted: bool=None, languages: List[str]=None, media_type: str=None, name: str=None, publisher: str=None, total_episodes: int=None, type: str=None, uri: str=None):
        """SimplifiedShowObject - a model defined in OpenAPI

        :param available_markets: The available_markets of this SimplifiedShowObject.
        :param copyrights: The copyrights of this SimplifiedShowObject.
        :param description: The description of this SimplifiedShowObject.
        :param explicit: The explicit of this SimplifiedShowObject.
        :param external_urls: The external_urls of this SimplifiedShowObject.
        :param href: The href of this SimplifiedShowObject.
        :param html_description: The html_description of this SimplifiedShowObject.
        :param id: The id of this SimplifiedShowObject.
        :param images: The images of this SimplifiedShowObject.
        :param is_externally_hosted: The is_externally_hosted of this SimplifiedShowObject.
        :param languages: The languages of this SimplifiedShowObject.
        :param media_type: The media_type of this SimplifiedShowObject.
        :param name: The name of this SimplifiedShowObject.
        :param publisher: The publisher of this SimplifiedShowObject.
        :param total_episodes: The total_episodes of this SimplifiedShowObject.
        :param type: The type of this SimplifiedShowObject.
        :param uri: The uri of this SimplifiedShowObject.
        """
        self.openapi_types = {
            'available_markets': List[str],
            'copyrights': List[CopyrightObject],
            'description': str,
            'explicit': bool,
            'external_urls': ExternalUrlObject,
            'href': str,
            'html_description': str,
            'id': str,
            'images': List[ImageObject],
            'is_externally_hosted': bool,
            'languages': List[str],
            'media_type': str,
            'name': str,
            'publisher': str,
            'total_episodes': int,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'available_markets': 'available_markets',
            'copyrights': 'copyrights',
            'description': 'description',
            'explicit': 'explicit',
            'external_urls': 'external_urls',
            'href': 'href',
            'html_description': 'html_description',
            'id': 'id',
            'images': 'images',
            'is_externally_hosted': 'is_externally_hosted',
            'languages': 'languages',
            'media_type': 'media_type',
            'name': 'name',
            'publisher': 'publisher',
            'total_episodes': 'total_episodes',
            'type': 'type',
            'uri': 'uri'
        }

        self._available_markets = available_markets
        self._copyrights = copyrights
        self._description = description
        self._explicit = explicit
        self._external_urls = external_urls
        self._href = href
        self._html_description = html_description
        self._id = id
        self._images = images
        self._is_externally_hosted = is_externally_hosted
        self._languages = languages
        self._media_type = media_type
        self._name = name
        self._publisher = publisher
        self._total_episodes = total_episodes
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimplifiedShowObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SimplifiedShowObject of this SimplifiedShowObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_markets(self):
        """Gets the available_markets of this SimplifiedShowObject.

        A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 

        :return: The available_markets of this SimplifiedShowObject.
        :rtype: List[str]
        """
        return self._available_markets

    @available_markets.setter
    def available_markets(self, available_markets):
        """Sets the available_markets of this SimplifiedShowObject.

        A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 

        :param available_markets: The available_markets of this SimplifiedShowObject.
        :type available_markets: List[str]
        """
        if available_markets is None:
            raise ValueError("Invalid value for `available_markets`, must not be `None`")

        self._available_markets = available_markets

    @property
    def copyrights(self):
        """Gets the copyrights of this SimplifiedShowObject.

        The copyright statements of the show. 

        :return: The copyrights of this SimplifiedShowObject.
        :rtype: List[CopyrightObject]
        """
        return self._copyrights

    @copyrights.setter
    def copyrights(self, copyrights):
        """Sets the copyrights of this SimplifiedShowObject.

        The copyright statements of the show. 

        :param copyrights: The copyrights of this SimplifiedShowObject.
        :type copyrights: List[CopyrightObject]
        """
        if copyrights is None:
            raise ValueError("Invalid value for `copyrights`, must not be `None`")

        self._copyrights = copyrights

    @property
    def description(self):
        """Gets the description of this SimplifiedShowObject.

        A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 

        :return: The description of this SimplifiedShowObject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SimplifiedShowObject.

        A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 

        :param description: The description of this SimplifiedShowObject.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def explicit(self):
        """Gets the explicit of this SimplifiedShowObject.

        Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 

        :return: The explicit of this SimplifiedShowObject.
        :rtype: bool
        """
        return self._explicit

    @explicit.setter
    def explicit(self, explicit):
        """Sets the explicit of this SimplifiedShowObject.

        Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 

        :param explicit: The explicit of this SimplifiedShowObject.
        :type explicit: bool
        """
        if explicit is None:
            raise ValueError("Invalid value for `explicit`, must not be `None`")

        self._explicit = explicit

    @property
    def external_urls(self):
        """Gets the external_urls of this SimplifiedShowObject.

        External URLs for this show. 

        :return: The external_urls of this SimplifiedShowObject.
        :rtype: ExternalUrlObject
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this SimplifiedShowObject.

        External URLs for this show. 

        :param external_urls: The external_urls of this SimplifiedShowObject.
        :type external_urls: ExternalUrlObject
        """
        if external_urls is None:
            raise ValueError("Invalid value for `external_urls`, must not be `None`")

        self._external_urls = external_urls

    @property
    def href(self):
        """Gets the href of this SimplifiedShowObject.

        A link to the Web API endpoint providing full details of the show. 

        :return: The href of this SimplifiedShowObject.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SimplifiedShowObject.

        A link to the Web API endpoint providing full details of the show. 

        :param href: The href of this SimplifiedShowObject.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def html_description(self):
        """Gets the html_description of this SimplifiedShowObject.

        A description of the show. This field may contain HTML tags. 

        :return: The html_description of this SimplifiedShowObject.
        :rtype: str
        """
        return self._html_description

    @html_description.setter
    def html_description(self, html_description):
        """Sets the html_description of this SimplifiedShowObject.

        A description of the show. This field may contain HTML tags. 

        :param html_description: The html_description of this SimplifiedShowObject.
        :type html_description: str
        """
        if html_description is None:
            raise ValueError("Invalid value for `html_description`, must not be `None`")

        self._html_description = html_description

    @property
    def id(self):
        """Gets the id of this SimplifiedShowObject.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 

        :return: The id of this SimplifiedShowObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimplifiedShowObject.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 

        :param id: The id of this SimplifiedShowObject.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this SimplifiedShowObject.

        The cover art for the show in various sizes, widest first. 

        :return: The images of this SimplifiedShowObject.
        :rtype: List[ImageObject]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this SimplifiedShowObject.

        The cover art for the show in various sizes, widest first. 

        :param images: The images of this SimplifiedShowObject.
        :type images: List[ImageObject]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def is_externally_hosted(self):
        """Gets the is_externally_hosted of this SimplifiedShowObject.

        True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases. 

        :return: The is_externally_hosted of this SimplifiedShowObject.
        :rtype: bool
        """
        return self._is_externally_hosted

    @is_externally_hosted.setter
    def is_externally_hosted(self, is_externally_hosted):
        """Sets the is_externally_hosted of this SimplifiedShowObject.

        True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases. 

        :param is_externally_hosted: The is_externally_hosted of this SimplifiedShowObject.
        :type is_externally_hosted: bool
        """
        if is_externally_hosted is None:
            raise ValueError("Invalid value for `is_externally_hosted`, must not be `None`")

        self._is_externally_hosted = is_externally_hosted

    @property
    def languages(self):
        """Gets the languages of this SimplifiedShowObject.

        A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 

        :return: The languages of this SimplifiedShowObject.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this SimplifiedShowObject.

        A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 

        :param languages: The languages of this SimplifiedShowObject.
        :type languages: List[str]
        """
        if languages is None:
            raise ValueError("Invalid value for `languages`, must not be `None`")

        self._languages = languages

    @property
    def media_type(self):
        """Gets the media_type of this SimplifiedShowObject.

        The media type of the show. 

        :return: The media_type of this SimplifiedShowObject.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this SimplifiedShowObject.

        The media type of the show. 

        :param media_type: The media_type of this SimplifiedShowObject.
        :type media_type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")

        self._media_type = media_type

    @property
    def name(self):
        """Gets the name of this SimplifiedShowObject.

        The name of the episode. 

        :return: The name of this SimplifiedShowObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimplifiedShowObject.

        The name of the episode. 

        :param name: The name of this SimplifiedShowObject.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def publisher(self):
        """Gets the publisher of this SimplifiedShowObject.

        The publisher of the show. 

        :return: The publisher of this SimplifiedShowObject.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this SimplifiedShowObject.

        The publisher of the show. 

        :param publisher: The publisher of this SimplifiedShowObject.
        :type publisher: str
        """
        if publisher is None:
            raise ValueError("Invalid value for `publisher`, must not be `None`")

        self._publisher = publisher

    @property
    def total_episodes(self):
        """Gets the total_episodes of this SimplifiedShowObject.

        The total number of episodes in the show. 

        :return: The total_episodes of this SimplifiedShowObject.
        :rtype: int
        """
        return self._total_episodes

    @total_episodes.setter
    def total_episodes(self, total_episodes):
        """Sets the total_episodes of this SimplifiedShowObject.

        The total number of episodes in the show. 

        :param total_episodes: The total_episodes of this SimplifiedShowObject.
        :type total_episodes: int
        """
        if total_episodes is None:
            raise ValueError("Invalid value for `total_episodes`, must not be `None`")

        self._total_episodes = total_episodes

    @property
    def type(self):
        """Gets the type of this SimplifiedShowObject.

        The object type. 

        :return: The type of this SimplifiedShowObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimplifiedShowObject.

        The object type. 

        :param type: The type of this SimplifiedShowObject.
        :type type: str
        """
        allowed_values = ["show"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this SimplifiedShowObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 

        :return: The uri of this SimplifiedShowObject.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this SimplifiedShowObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 

        :param uri: The uri of this SimplifiedShowObject.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
