# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.album_object import AlbumObject
from openapi_server import util


class GetMultipleAlbums200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, albums: List[AlbumObject]=None):
        """GetMultipleAlbums200Response - a model defined in OpenAPI

        :param albums: The albums of this GetMultipleAlbums200Response.
        """
        self.openapi_types = {
            'albums': List[AlbumObject]
        }

        self.attribute_map = {
            'albums': 'albums'
        }

        self._albums = albums

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMultipleAlbums200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_multiple_albums_200_response of this GetMultipleAlbums200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def albums(self):
        """Gets the albums of this GetMultipleAlbums200Response.


        :return: The albums of this GetMultipleAlbums200Response.
        :rtype: List[AlbumObject]
        """
        return self._albums

    @albums.setter
    def albums(self, albums):
        """Sets the albums of this GetMultipleAlbums200Response.


        :param albums: The albums of this GetMultipleAlbums200Response.
        :type albums: List[AlbumObject]
        """
        if albums is None:
            raise ValueError("Invalid value for `albums`, must not be `None`")

        self._albums = albums
