# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artist_object import ArtistObject
from openapi_server.models.episode_object import EpisodeObject
from openapi_server.models.episode_restriction_object import EpisodeRestrictionObject
from openapi_server.models.external_id_object import ExternalIdObject
from openapi_server.models.external_url_object import ExternalUrlObject
from openapi_server.models.image_object import ImageObject
from openapi_server.models.resume_point_object import ResumePointObject
from openapi_server.models.simplified_album_object import SimplifiedAlbumObject
from openapi_server.models.simplified_show_object import SimplifiedShowObject
from openapi_server.models.track_object import TrackObject
from openapi_server import util


class PlaylistTrackObjectTrack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, album: SimplifiedAlbumObject=None, artists: List[ArtistObject]=None, available_markets: List[str]=None, disc_number: int=None, duration_ms: int=None, explicit: bool=None, external_ids: ExternalIdObject=None, external_urls: ExternalUrlObject=None, href: str=None, id: str=None, is_local: bool=None, is_playable: bool=None, linked_from: object=None, name: str=None, popularity: int=None, preview_url: str=None, restrictions: EpisodeRestrictionObject=None, track_number: int=None, type: str=None, uri: str=None, audio_preview_url: str=None, description: str=None, html_description: str=None, images: List[ImageObject]=None, is_externally_hosted: bool=None, language: str=None, languages: List[str]=None, release_date: str=None, release_date_precision: str=None, resume_point: ResumePointObject=None, show: SimplifiedShowObject=None):
        """PlaylistTrackObjectTrack - a model defined in OpenAPI

        :param album: The album of this PlaylistTrackObjectTrack.
        :param artists: The artists of this PlaylistTrackObjectTrack.
        :param available_markets: The available_markets of this PlaylistTrackObjectTrack.
        :param disc_number: The disc_number of this PlaylistTrackObjectTrack.
        :param duration_ms: The duration_ms of this PlaylistTrackObjectTrack.
        :param explicit: The explicit of this PlaylistTrackObjectTrack.
        :param external_ids: The external_ids of this PlaylistTrackObjectTrack.
        :param external_urls: The external_urls of this PlaylistTrackObjectTrack.
        :param href: The href of this PlaylistTrackObjectTrack.
        :param id: The id of this PlaylistTrackObjectTrack.
        :param is_local: The is_local of this PlaylistTrackObjectTrack.
        :param is_playable: The is_playable of this PlaylistTrackObjectTrack.
        :param linked_from: The linked_from of this PlaylistTrackObjectTrack.
        :param name: The name of this PlaylistTrackObjectTrack.
        :param popularity: The popularity of this PlaylistTrackObjectTrack.
        :param preview_url: The preview_url of this PlaylistTrackObjectTrack.
        :param restrictions: The restrictions of this PlaylistTrackObjectTrack.
        :param track_number: The track_number of this PlaylistTrackObjectTrack.
        :param type: The type of this PlaylistTrackObjectTrack.
        :param uri: The uri of this PlaylistTrackObjectTrack.
        :param audio_preview_url: The audio_preview_url of this PlaylistTrackObjectTrack.
        :param description: The description of this PlaylistTrackObjectTrack.
        :param html_description: The html_description of this PlaylistTrackObjectTrack.
        :param images: The images of this PlaylistTrackObjectTrack.
        :param is_externally_hosted: The is_externally_hosted of this PlaylistTrackObjectTrack.
        :param language: The language of this PlaylistTrackObjectTrack.
        :param languages: The languages of this PlaylistTrackObjectTrack.
        :param release_date: The release_date of this PlaylistTrackObjectTrack.
        :param release_date_precision: The release_date_precision of this PlaylistTrackObjectTrack.
        :param resume_point: The resume_point of this PlaylistTrackObjectTrack.
        :param show: The show of this PlaylistTrackObjectTrack.
        """
        self.openapi_types = {
            'album': SimplifiedAlbumObject,
            'artists': List[ArtistObject],
            'available_markets': List[str],
            'disc_number': int,
            'duration_ms': int,
            'explicit': bool,
            'external_ids': ExternalIdObject,
            'external_urls': ExternalUrlObject,
            'href': str,
            'id': str,
            'is_local': bool,
            'is_playable': bool,
            'linked_from': object,
            'name': str,
            'popularity': int,
            'preview_url': str,
            'restrictions': EpisodeRestrictionObject,
            'track_number': int,
            'type': str,
            'uri': str,
            'audio_preview_url': str,
            'description': str,
            'html_description': str,
            'images': List[ImageObject],
            'is_externally_hosted': bool,
            'language': str,
            'languages': List[str],
            'release_date': str,
            'release_date_precision': str,
            'resume_point': ResumePointObject,
            'show': SimplifiedShowObject
        }

        self.attribute_map = {
            'album': 'album',
            'artists': 'artists',
            'available_markets': 'available_markets',
            'disc_number': 'disc_number',
            'duration_ms': 'duration_ms',
            'explicit': 'explicit',
            'external_ids': 'external_ids',
            'external_urls': 'external_urls',
            'href': 'href',
            'id': 'id',
            'is_local': 'is_local',
            'is_playable': 'is_playable',
            'linked_from': 'linked_from',
            'name': 'name',
            'popularity': 'popularity',
            'preview_url': 'preview_url',
            'restrictions': 'restrictions',
            'track_number': 'track_number',
            'type': 'type',
            'uri': 'uri',
            'audio_preview_url': 'audio_preview_url',
            'description': 'description',
            'html_description': 'html_description',
            'images': 'images',
            'is_externally_hosted': 'is_externally_hosted',
            'language': 'language',
            'languages': 'languages',
            'release_date': 'release_date',
            'release_date_precision': 'release_date_precision',
            'resume_point': 'resume_point',
            'show': 'show'
        }

        self._album = album
        self._artists = artists
        self._available_markets = available_markets
        self._disc_number = disc_number
        self._duration_ms = duration_ms
        self._explicit = explicit
        self._external_ids = external_ids
        self._external_urls = external_urls
        self._href = href
        self._id = id
        self._is_local = is_local
        self._is_playable = is_playable
        self._linked_from = linked_from
        self._name = name
        self._popularity = popularity
        self._preview_url = preview_url
        self._restrictions = restrictions
        self._track_number = track_number
        self._type = type
        self._uri = uri
        self._audio_preview_url = audio_preview_url
        self._description = description
        self._html_description = html_description
        self._images = images
        self._is_externally_hosted = is_externally_hosted
        self._language = language
        self._languages = languages
        self._release_date = release_date
        self._release_date_precision = release_date_precision
        self._resume_point = resume_point
        self._show = show

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaylistTrackObjectTrack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaylistTrackObject_track of this PlaylistTrackObjectTrack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def album(self):
        """Gets the album of this PlaylistTrackObjectTrack.

        The album on which the track appears. The album object includes a link in `href` to full information about the album. 

        :return: The album of this PlaylistTrackObjectTrack.
        :rtype: SimplifiedAlbumObject
        """
        return self._album

    @album.setter
    def album(self, album):
        """Sets the album of this PlaylistTrackObjectTrack.

        The album on which the track appears. The album object includes a link in `href` to full information about the album. 

        :param album: The album of this PlaylistTrackObjectTrack.
        :type album: SimplifiedAlbumObject
        """

        self._album = album

    @property
    def artists(self):
        """Gets the artists of this PlaylistTrackObjectTrack.

        The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist. 

        :return: The artists of this PlaylistTrackObjectTrack.
        :rtype: List[ArtistObject]
        """
        return self._artists

    @artists.setter
    def artists(self, artists):
        """Sets the artists of this PlaylistTrackObjectTrack.

        The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist. 

        :param artists: The artists of this PlaylistTrackObjectTrack.
        :type artists: List[ArtistObject]
        """

        self._artists = artists

    @property
    def available_markets(self):
        """Gets the available_markets of this PlaylistTrackObjectTrack.

        A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 

        :return: The available_markets of this PlaylistTrackObjectTrack.
        :rtype: List[str]
        """
        return self._available_markets

    @available_markets.setter
    def available_markets(self, available_markets):
        """Sets the available_markets of this PlaylistTrackObjectTrack.

        A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 

        :param available_markets: The available_markets of this PlaylistTrackObjectTrack.
        :type available_markets: List[str]
        """

        self._available_markets = available_markets

    @property
    def disc_number(self):
        """Gets the disc_number of this PlaylistTrackObjectTrack.

        The disc number (usually `1` unless the album consists of more than one disc). 

        :return: The disc_number of this PlaylistTrackObjectTrack.
        :rtype: int
        """
        return self._disc_number

    @disc_number.setter
    def disc_number(self, disc_number):
        """Sets the disc_number of this PlaylistTrackObjectTrack.

        The disc number (usually `1` unless the album consists of more than one disc). 

        :param disc_number: The disc_number of this PlaylistTrackObjectTrack.
        :type disc_number: int
        """

        self._disc_number = disc_number

    @property
    def duration_ms(self):
        """Gets the duration_ms of this PlaylistTrackObjectTrack.

        The episode length in milliseconds. 

        :return: The duration_ms of this PlaylistTrackObjectTrack.
        :rtype: int
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this PlaylistTrackObjectTrack.

        The episode length in milliseconds. 

        :param duration_ms: The duration_ms of this PlaylistTrackObjectTrack.
        :type duration_ms: int
        """
        if duration_ms is None:
            raise ValueError("Invalid value for `duration_ms`, must not be `None`")

        self._duration_ms = duration_ms

    @property
    def explicit(self):
        """Gets the explicit of this PlaylistTrackObjectTrack.

        Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 

        :return: The explicit of this PlaylistTrackObjectTrack.
        :rtype: bool
        """
        return self._explicit

    @explicit.setter
    def explicit(self, explicit):
        """Sets the explicit of this PlaylistTrackObjectTrack.

        Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 

        :param explicit: The explicit of this PlaylistTrackObjectTrack.
        :type explicit: bool
        """
        if explicit is None:
            raise ValueError("Invalid value for `explicit`, must not be `None`")

        self._explicit = explicit

    @property
    def external_ids(self):
        """Gets the external_ids of this PlaylistTrackObjectTrack.

        Known external IDs for the track. 

        :return: The external_ids of this PlaylistTrackObjectTrack.
        :rtype: ExternalIdObject
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this PlaylistTrackObjectTrack.

        Known external IDs for the track. 

        :param external_ids: The external_ids of this PlaylistTrackObjectTrack.
        :type external_ids: ExternalIdObject
        """

        self._external_ids = external_ids

    @property
    def external_urls(self):
        """Gets the external_urls of this PlaylistTrackObjectTrack.

        External URLs for this episode. 

        :return: The external_urls of this PlaylistTrackObjectTrack.
        :rtype: ExternalUrlObject
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this PlaylistTrackObjectTrack.

        External URLs for this episode. 

        :param external_urls: The external_urls of this PlaylistTrackObjectTrack.
        :type external_urls: ExternalUrlObject
        """
        if external_urls is None:
            raise ValueError("Invalid value for `external_urls`, must not be `None`")

        self._external_urls = external_urls

    @property
    def href(self):
        """Gets the href of this PlaylistTrackObjectTrack.

        A link to the Web API endpoint providing full details of the episode. 

        :return: The href of this PlaylistTrackObjectTrack.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PlaylistTrackObjectTrack.

        A link to the Web API endpoint providing full details of the episode. 

        :param href: The href of this PlaylistTrackObjectTrack.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def id(self):
        """Gets the id of this PlaylistTrackObjectTrack.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 

        :return: The id of this PlaylistTrackObjectTrack.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaylistTrackObjectTrack.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 

        :param id: The id of this PlaylistTrackObjectTrack.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_local(self):
        """Gets the is_local of this PlaylistTrackObjectTrack.

        Whether or not the track is from a local file. 

        :return: The is_local of this PlaylistTrackObjectTrack.
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this PlaylistTrackObjectTrack.

        Whether or not the track is from a local file. 

        :param is_local: The is_local of this PlaylistTrackObjectTrack.
        :type is_local: bool
        """

        self._is_local = is_local

    @property
    def is_playable(self):
        """Gets the is_playable of this PlaylistTrackObjectTrack.

        True if the episode is playable in the given market. Otherwise false. 

        :return: The is_playable of this PlaylistTrackObjectTrack.
        :rtype: bool
        """
        return self._is_playable

    @is_playable.setter
    def is_playable(self, is_playable):
        """Sets the is_playable of this PlaylistTrackObjectTrack.

        True if the episode is playable in the given market. Otherwise false. 

        :param is_playable: The is_playable of this PlaylistTrackObjectTrack.
        :type is_playable: bool
        """
        if is_playable is None:
            raise ValueError("Invalid value for `is_playable`, must not be `None`")

        self._is_playable = is_playable

    @property
    def linked_from(self):
        """Gets the linked_from of this PlaylistTrackObjectTrack.

        Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track. 

        :return: The linked_from of this PlaylistTrackObjectTrack.
        :rtype: object
        """
        return self._linked_from

    @linked_from.setter
    def linked_from(self, linked_from):
        """Sets the linked_from of this PlaylistTrackObjectTrack.

        Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track. 

        :param linked_from: The linked_from of this PlaylistTrackObjectTrack.
        :type linked_from: object
        """

        self._linked_from = linked_from

    @property
    def name(self):
        """Gets the name of this PlaylistTrackObjectTrack.

        The name of the episode. 

        :return: The name of this PlaylistTrackObjectTrack.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlaylistTrackObjectTrack.

        The name of the episode. 

        :param name: The name of this PlaylistTrackObjectTrack.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def popularity(self):
        """Gets the popularity of this PlaylistTrackObjectTrack.

        The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._ 

        :return: The popularity of this PlaylistTrackObjectTrack.
        :rtype: int
        """
        return self._popularity

    @popularity.setter
    def popularity(self, popularity):
        """Sets the popularity of this PlaylistTrackObjectTrack.

        The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._ 

        :param popularity: The popularity of this PlaylistTrackObjectTrack.
        :type popularity: int
        """

        self._popularity = popularity

    @property
    def preview_url(self):
        """Gets the preview_url of this PlaylistTrackObjectTrack.

        A link to a 30 second preview (MP3 format) of the track. Can be `null` 

        :return: The preview_url of this PlaylistTrackObjectTrack.
        :rtype: str
        """
        return self._preview_url

    @preview_url.setter
    def preview_url(self, preview_url):
        """Sets the preview_url of this PlaylistTrackObjectTrack.

        A link to a 30 second preview (MP3 format) of the track. Can be `null` 

        :param preview_url: The preview_url of this PlaylistTrackObjectTrack.
        :type preview_url: str
        """

        self._preview_url = preview_url

    @property
    def restrictions(self):
        """Gets the restrictions of this PlaylistTrackObjectTrack.

        Included in the response when a content restriction is applied. 

        :return: The restrictions of this PlaylistTrackObjectTrack.
        :rtype: EpisodeRestrictionObject
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this PlaylistTrackObjectTrack.

        Included in the response when a content restriction is applied. 

        :param restrictions: The restrictions of this PlaylistTrackObjectTrack.
        :type restrictions: EpisodeRestrictionObject
        """

        self._restrictions = restrictions

    @property
    def track_number(self):
        """Gets the track_number of this PlaylistTrackObjectTrack.

        The number of the track. If an album has several discs, the track number is the number on the specified disc. 

        :return: The track_number of this PlaylistTrackObjectTrack.
        :rtype: int
        """
        return self._track_number

    @track_number.setter
    def track_number(self, track_number):
        """Sets the track_number of this PlaylistTrackObjectTrack.

        The number of the track. If an album has several discs, the track number is the number on the specified disc. 

        :param track_number: The track_number of this PlaylistTrackObjectTrack.
        :type track_number: int
        """

        self._track_number = track_number

    @property
    def type(self):
        """Gets the type of this PlaylistTrackObjectTrack.

        The object type: \"track\". 

        :return: The type of this PlaylistTrackObjectTrack.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlaylistTrackObjectTrack.

        The object type: \"track\". 

        :param type: The type of this PlaylistTrackObjectTrack.
        :type type: str
        """
        allowed_values = ["track", "episode"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this PlaylistTrackObjectTrack.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 

        :return: The uri of this PlaylistTrackObjectTrack.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PlaylistTrackObjectTrack.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 

        :param uri: The uri of this PlaylistTrackObjectTrack.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def audio_preview_url(self):
        """Gets the audio_preview_url of this PlaylistTrackObjectTrack.

        A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 

        :return: The audio_preview_url of this PlaylistTrackObjectTrack.
        :rtype: str
        """
        return self._audio_preview_url

    @audio_preview_url.setter
    def audio_preview_url(self, audio_preview_url):
        """Sets the audio_preview_url of this PlaylistTrackObjectTrack.

        A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 

        :param audio_preview_url: The audio_preview_url of this PlaylistTrackObjectTrack.
        :type audio_preview_url: str
        """
        if audio_preview_url is None:
            raise ValueError("Invalid value for `audio_preview_url`, must not be `None`")

        self._audio_preview_url = audio_preview_url

    @property
    def description(self):
        """Gets the description of this PlaylistTrackObjectTrack.

        A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 

        :return: The description of this PlaylistTrackObjectTrack.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlaylistTrackObjectTrack.

        A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 

        :param description: The description of this PlaylistTrackObjectTrack.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def html_description(self):
        """Gets the html_description of this PlaylistTrackObjectTrack.

        A description of the episode. This field may contain HTML tags. 

        :return: The html_description of this PlaylistTrackObjectTrack.
        :rtype: str
        """
        return self._html_description

    @html_description.setter
    def html_description(self, html_description):
        """Sets the html_description of this PlaylistTrackObjectTrack.

        A description of the episode. This field may contain HTML tags. 

        :param html_description: The html_description of this PlaylistTrackObjectTrack.
        :type html_description: str
        """
        if html_description is None:
            raise ValueError("Invalid value for `html_description`, must not be `None`")

        self._html_description = html_description

    @property
    def images(self):
        """Gets the images of this PlaylistTrackObjectTrack.

        The cover art for the episode in various sizes, widest first. 

        :return: The images of this PlaylistTrackObjectTrack.
        :rtype: List[ImageObject]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PlaylistTrackObjectTrack.

        The cover art for the episode in various sizes, widest first. 

        :param images: The images of this PlaylistTrackObjectTrack.
        :type images: List[ImageObject]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def is_externally_hosted(self):
        """Gets the is_externally_hosted of this PlaylistTrackObjectTrack.

        True if the episode is hosted outside of Spotify's CDN. 

        :return: The is_externally_hosted of this PlaylistTrackObjectTrack.
        :rtype: bool
        """
        return self._is_externally_hosted

    @is_externally_hosted.setter
    def is_externally_hosted(self, is_externally_hosted):
        """Sets the is_externally_hosted of this PlaylistTrackObjectTrack.

        True if the episode is hosted outside of Spotify's CDN. 

        :param is_externally_hosted: The is_externally_hosted of this PlaylistTrackObjectTrack.
        :type is_externally_hosted: bool
        """
        if is_externally_hosted is None:
            raise ValueError("Invalid value for `is_externally_hosted`, must not be `None`")

        self._is_externally_hosted = is_externally_hosted

    @property
    def language(self):
        """Gets the language of this PlaylistTrackObjectTrack.

        The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead. 

        :return: The language of this PlaylistTrackObjectTrack.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PlaylistTrackObjectTrack.

        The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead. 

        :param language: The language of this PlaylistTrackObjectTrack.
        :type language: str
        """

        self._language = language

    @property
    def languages(self):
        """Gets the languages of this PlaylistTrackObjectTrack.

        A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 

        :return: The languages of this PlaylistTrackObjectTrack.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this PlaylistTrackObjectTrack.

        A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 

        :param languages: The languages of this PlaylistTrackObjectTrack.
        :type languages: List[str]
        """
        if languages is None:
            raise ValueError("Invalid value for `languages`, must not be `None`")

        self._languages = languages

    @property
    def release_date(self):
        """Gets the release_date of this PlaylistTrackObjectTrack.

        The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 

        :return: The release_date of this PlaylistTrackObjectTrack.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this PlaylistTrackObjectTrack.

        The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 

        :param release_date: The release_date of this PlaylistTrackObjectTrack.
        :type release_date: str
        """
        if release_date is None:
            raise ValueError("Invalid value for `release_date`, must not be `None`")

        self._release_date = release_date

    @property
    def release_date_precision(self):
        """Gets the release_date_precision of this PlaylistTrackObjectTrack.

        The precision with which `release_date` value is known. 

        :return: The release_date_precision of this PlaylistTrackObjectTrack.
        :rtype: str
        """
        return self._release_date_precision

    @release_date_precision.setter
    def release_date_precision(self, release_date_precision):
        """Sets the release_date_precision of this PlaylistTrackObjectTrack.

        The precision with which `release_date` value is known. 

        :param release_date_precision: The release_date_precision of this PlaylistTrackObjectTrack.
        :type release_date_precision: str
        """
        allowed_values = ["year", "month", "day"]  # noqa: E501
        if release_date_precision not in allowed_values:
            raise ValueError(
                "Invalid value for `release_date_precision` ({0}), must be one of {1}"
                .format(release_date_precision, allowed_values)
            )

        self._release_date_precision = release_date_precision

    @property
    def resume_point(self):
        """Gets the resume_point of this PlaylistTrackObjectTrack.

        The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'. 

        :return: The resume_point of this PlaylistTrackObjectTrack.
        :rtype: ResumePointObject
        """
        return self._resume_point

    @resume_point.setter
    def resume_point(self, resume_point):
        """Sets the resume_point of this PlaylistTrackObjectTrack.

        The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'. 

        :param resume_point: The resume_point of this PlaylistTrackObjectTrack.
        :type resume_point: ResumePointObject
        """
        if resume_point is None:
            raise ValueError("Invalid value for `resume_point`, must not be `None`")

        self._resume_point = resume_point

    @property
    def show(self):
        """Gets the show of this PlaylistTrackObjectTrack.


        :return: The show of this PlaylistTrackObjectTrack.
        :rtype: SimplifiedShowObject
        """
        return self._show

    @show.setter
    def show(self, show):
        """Sets the show of this PlaylistTrackObjectTrack.


        :param show: The show of this PlaylistTrackObjectTrack.
        :type show: SimplifiedShowObject
        """
        if show is None:
            raise ValueError("Invalid value for `show`, must not be `None`")

        self._show = show
