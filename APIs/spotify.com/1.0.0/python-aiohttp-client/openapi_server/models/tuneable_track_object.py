# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TuneableTrackObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acousticness: float=None, danceability: float=None, duration_ms: int=None, energy: float=None, instrumentalness: float=None, key: int=None, liveness: float=None, loudness: float=None, mode: int=None, popularity: float=None, speechiness: float=None, tempo: float=None, time_signature: int=None, valence: float=None):
        """TuneableTrackObject - a model defined in OpenAPI

        :param acousticness: The acousticness of this TuneableTrackObject.
        :param danceability: The danceability of this TuneableTrackObject.
        :param duration_ms: The duration_ms of this TuneableTrackObject.
        :param energy: The energy of this TuneableTrackObject.
        :param instrumentalness: The instrumentalness of this TuneableTrackObject.
        :param key: The key of this TuneableTrackObject.
        :param liveness: The liveness of this TuneableTrackObject.
        :param loudness: The loudness of this TuneableTrackObject.
        :param mode: The mode of this TuneableTrackObject.
        :param popularity: The popularity of this TuneableTrackObject.
        :param speechiness: The speechiness of this TuneableTrackObject.
        :param tempo: The tempo of this TuneableTrackObject.
        :param time_signature: The time_signature of this TuneableTrackObject.
        :param valence: The valence of this TuneableTrackObject.
        """
        self.openapi_types = {
            'acousticness': float,
            'danceability': float,
            'duration_ms': int,
            'energy': float,
            'instrumentalness': float,
            'key': int,
            'liveness': float,
            'loudness': float,
            'mode': int,
            'popularity': float,
            'speechiness': float,
            'tempo': float,
            'time_signature': int,
            'valence': float
        }

        self.attribute_map = {
            'acousticness': 'acousticness',
            'danceability': 'danceability',
            'duration_ms': 'duration_ms',
            'energy': 'energy',
            'instrumentalness': 'instrumentalness',
            'key': 'key',
            'liveness': 'liveness',
            'loudness': 'loudness',
            'mode': 'mode',
            'popularity': 'popularity',
            'speechiness': 'speechiness',
            'tempo': 'tempo',
            'time_signature': 'time_signature',
            'valence': 'valence'
        }

        self._acousticness = acousticness
        self._danceability = danceability
        self._duration_ms = duration_ms
        self._energy = energy
        self._instrumentalness = instrumentalness
        self._key = key
        self._liveness = liveness
        self._loudness = loudness
        self._mode = mode
        self._popularity = popularity
        self._speechiness = speechiness
        self._tempo = tempo
        self._time_signature = time_signature
        self._valence = valence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TuneableTrackObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TuneableTrackObject of this TuneableTrackObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acousticness(self):
        """Gets the acousticness of this TuneableTrackObject.

        A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. 

        :return: The acousticness of this TuneableTrackObject.
        :rtype: float
        """
        return self._acousticness

    @acousticness.setter
    def acousticness(self, acousticness):
        """Sets the acousticness of this TuneableTrackObject.

        A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. 

        :param acousticness: The acousticness of this TuneableTrackObject.
        :type acousticness: float
        """

        self._acousticness = acousticness

    @property
    def danceability(self):
        """Gets the danceability of this TuneableTrackObject.

        Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. 

        :return: The danceability of this TuneableTrackObject.
        :rtype: float
        """
        return self._danceability

    @danceability.setter
    def danceability(self, danceability):
        """Sets the danceability of this TuneableTrackObject.

        Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. 

        :param danceability: The danceability of this TuneableTrackObject.
        :type danceability: float
        """

        self._danceability = danceability

    @property
    def duration_ms(self):
        """Gets the duration_ms of this TuneableTrackObject.

        The duration of the track in milliseconds. 

        :return: The duration_ms of this TuneableTrackObject.
        :rtype: int
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this TuneableTrackObject.

        The duration of the track in milliseconds. 

        :param duration_ms: The duration_ms of this TuneableTrackObject.
        :type duration_ms: int
        """

        self._duration_ms = duration_ms

    @property
    def energy(self):
        """Gets the energy of this TuneableTrackObject.

        Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. 

        :return: The energy of this TuneableTrackObject.
        :rtype: float
        """
        return self._energy

    @energy.setter
    def energy(self, energy):
        """Sets the energy of this TuneableTrackObject.

        Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. 

        :param energy: The energy of this TuneableTrackObject.
        :type energy: float
        """

        self._energy = energy

    @property
    def instrumentalness(self):
        """Gets the instrumentalness of this TuneableTrackObject.

        Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. 

        :return: The instrumentalness of this TuneableTrackObject.
        :rtype: float
        """
        return self._instrumentalness

    @instrumentalness.setter
    def instrumentalness(self, instrumentalness):
        """Sets the instrumentalness of this TuneableTrackObject.

        Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. 

        :param instrumentalness: The instrumentalness of this TuneableTrackObject.
        :type instrumentalness: float
        """

        self._instrumentalness = instrumentalness

    @property
    def key(self):
        """Gets the key of this TuneableTrackObject.

        The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. 

        :return: The key of this TuneableTrackObject.
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TuneableTrackObject.

        The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. 

        :param key: The key of this TuneableTrackObject.
        :type key: int
        """
        if key is not None and key > 11:
            raise ValueError("Invalid value for `key`, must be a value less than or equal to `11`")
        if key is not None and key < -1:
            raise ValueError("Invalid value for `key`, must be a value greater than or equal to `-1`")

        self._key = key

    @property
    def liveness(self):
        """Gets the liveness of this TuneableTrackObject.

        Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live. 

        :return: The liveness of this TuneableTrackObject.
        :rtype: float
        """
        return self._liveness

    @liveness.setter
    def liveness(self, liveness):
        """Sets the liveness of this TuneableTrackObject.

        Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live. 

        :param liveness: The liveness of this TuneableTrackObject.
        :type liveness: float
        """

        self._liveness = liveness

    @property
    def loudness(self):
        """Gets the loudness of this TuneableTrackObject.

        The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 

        :return: The loudness of this TuneableTrackObject.
        :rtype: float
        """
        return self._loudness

    @loudness.setter
    def loudness(self, loudness):
        """Sets the loudness of this TuneableTrackObject.

        The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 

        :param loudness: The loudness of this TuneableTrackObject.
        :type loudness: float
        """

        self._loudness = loudness

    @property
    def mode(self):
        """Gets the mode of this TuneableTrackObject.

        Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 

        :return: The mode of this TuneableTrackObject.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this TuneableTrackObject.

        Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 

        :param mode: The mode of this TuneableTrackObject.
        :type mode: int
        """

        self._mode = mode

    @property
    def popularity(self):
        """Gets the popularity of this TuneableTrackObject.

        The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. _**Note**: When applying track relinking via the `market` parameter, it is expected to find relinked tracks with popularities that do not match `min_*`, `max_*`and `target_*` popularities. These relinked tracks are accurate replacements for unplayable tracks with the expected popularity scores. Original, non-relinked tracks are available via the `linked_from` attribute of the [relinked track response](/documentation/web-api/concepts/track-relinking)._ 

        :return: The popularity of this TuneableTrackObject.
        :rtype: float
        """
        return self._popularity

    @popularity.setter
    def popularity(self, popularity):
        """Sets the popularity of this TuneableTrackObject.

        The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. _**Note**: When applying track relinking via the `market` parameter, it is expected to find relinked tracks with popularities that do not match `min_*`, `max_*`and `target_*` popularities. These relinked tracks are accurate replacements for unplayable tracks with the expected popularity scores. Original, non-relinked tracks are available via the `linked_from` attribute of the [relinked track response](/documentation/web-api/concepts/track-relinking)._ 

        :param popularity: The popularity of this TuneableTrackObject.
        :type popularity: float
        """

        self._popularity = popularity

    @property
    def speechiness(self):
        """Gets the speechiness of this TuneableTrackObject.

        Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. 

        :return: The speechiness of this TuneableTrackObject.
        :rtype: float
        """
        return self._speechiness

    @speechiness.setter
    def speechiness(self, speechiness):
        """Sets the speechiness of this TuneableTrackObject.

        Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. 

        :param speechiness: The speechiness of this TuneableTrackObject.
        :type speechiness: float
        """

        self._speechiness = speechiness

    @property
    def tempo(self):
        """Gets the tempo of this TuneableTrackObject.

        The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 

        :return: The tempo of this TuneableTrackObject.
        :rtype: float
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo):
        """Sets the tempo of this TuneableTrackObject.

        The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 

        :param tempo: The tempo of this TuneableTrackObject.
        :type tempo: float
        """

        self._tempo = tempo

    @property
    def time_signature(self):
        """Gets the time_signature of this TuneableTrackObject.

        An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".

        :return: The time_signature of this TuneableTrackObject.
        :rtype: int
        """
        return self._time_signature

    @time_signature.setter
    def time_signature(self, time_signature):
        """Sets the time_signature of this TuneableTrackObject.

        An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".

        :param time_signature: The time_signature of this TuneableTrackObject.
        :type time_signature: int
        """
        if time_signature is not None and time_signature > 7:
            raise ValueError("Invalid value for `time_signature`, must be a value less than or equal to `7`")
        if time_signature is not None and time_signature < 3:
            raise ValueError("Invalid value for `time_signature`, must be a value greater than or equal to `3`")

        self._time_signature = time_signature

    @property
    def valence(self):
        """Gets the valence of this TuneableTrackObject.

        A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). 

        :return: The valence of this TuneableTrackObject.
        :rtype: float
        """
        return self._valence

    @valence.setter
    def valence(self, valence):
        """Sets the valence of this TuneableTrackObject.

        A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). 

        :param valence: The valence of this TuneableTrackObject.
        :type valence: float
        """

        self._valence = valence
