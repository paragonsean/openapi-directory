# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_url_object import ExternalUrlObject
from openapi_server.models.linked_track_object import LinkedTrackObject
from openapi_server.models.simplified_artist_object import SimplifiedArtistObject
from openapi_server.models.track_restriction_object import TrackRestrictionObject
from openapi_server import util


class SimplifiedTrackObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artists: List[SimplifiedArtistObject]=None, available_markets: List[str]=None, disc_number: int=None, duration_ms: int=None, explicit: bool=None, external_urls: ExternalUrlObject=None, href: str=None, id: str=None, is_local: bool=None, is_playable: bool=None, linked_from: LinkedTrackObject=None, name: str=None, preview_url: str=None, restrictions: TrackRestrictionObject=None, track_number: int=None, type: str=None, uri: str=None):
        """SimplifiedTrackObject - a model defined in OpenAPI

        :param artists: The artists of this SimplifiedTrackObject.
        :param available_markets: The available_markets of this SimplifiedTrackObject.
        :param disc_number: The disc_number of this SimplifiedTrackObject.
        :param duration_ms: The duration_ms of this SimplifiedTrackObject.
        :param explicit: The explicit of this SimplifiedTrackObject.
        :param external_urls: The external_urls of this SimplifiedTrackObject.
        :param href: The href of this SimplifiedTrackObject.
        :param id: The id of this SimplifiedTrackObject.
        :param is_local: The is_local of this SimplifiedTrackObject.
        :param is_playable: The is_playable of this SimplifiedTrackObject.
        :param linked_from: The linked_from of this SimplifiedTrackObject.
        :param name: The name of this SimplifiedTrackObject.
        :param preview_url: The preview_url of this SimplifiedTrackObject.
        :param restrictions: The restrictions of this SimplifiedTrackObject.
        :param track_number: The track_number of this SimplifiedTrackObject.
        :param type: The type of this SimplifiedTrackObject.
        :param uri: The uri of this SimplifiedTrackObject.
        """
        self.openapi_types = {
            'artists': List[SimplifiedArtistObject],
            'available_markets': List[str],
            'disc_number': int,
            'duration_ms': int,
            'explicit': bool,
            'external_urls': ExternalUrlObject,
            'href': str,
            'id': str,
            'is_local': bool,
            'is_playable': bool,
            'linked_from': LinkedTrackObject,
            'name': str,
            'preview_url': str,
            'restrictions': TrackRestrictionObject,
            'track_number': int,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'artists': 'artists',
            'available_markets': 'available_markets',
            'disc_number': 'disc_number',
            'duration_ms': 'duration_ms',
            'explicit': 'explicit',
            'external_urls': 'external_urls',
            'href': 'href',
            'id': 'id',
            'is_local': 'is_local',
            'is_playable': 'is_playable',
            'linked_from': 'linked_from',
            'name': 'name',
            'preview_url': 'preview_url',
            'restrictions': 'restrictions',
            'track_number': 'track_number',
            'type': 'type',
            'uri': 'uri'
        }

        self._artists = artists
        self._available_markets = available_markets
        self._disc_number = disc_number
        self._duration_ms = duration_ms
        self._explicit = explicit
        self._external_urls = external_urls
        self._href = href
        self._id = id
        self._is_local = is_local
        self._is_playable = is_playable
        self._linked_from = linked_from
        self._name = name
        self._preview_url = preview_url
        self._restrictions = restrictions
        self._track_number = track_number
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimplifiedTrackObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SimplifiedTrackObject of this SimplifiedTrackObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artists(self):
        """Gets the artists of this SimplifiedTrackObject.

        The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.

        :return: The artists of this SimplifiedTrackObject.
        :rtype: List[SimplifiedArtistObject]
        """
        return self._artists

    @artists.setter
    def artists(self, artists):
        """Sets the artists of this SimplifiedTrackObject.

        The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.

        :param artists: The artists of this SimplifiedTrackObject.
        :type artists: List[SimplifiedArtistObject]
        """

        self._artists = artists

    @property
    def available_markets(self):
        """Gets the available_markets of this SimplifiedTrackObject.

        A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 

        :return: The available_markets of this SimplifiedTrackObject.
        :rtype: List[str]
        """
        return self._available_markets

    @available_markets.setter
    def available_markets(self, available_markets):
        """Sets the available_markets of this SimplifiedTrackObject.

        A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 

        :param available_markets: The available_markets of this SimplifiedTrackObject.
        :type available_markets: List[str]
        """

        self._available_markets = available_markets

    @property
    def disc_number(self):
        """Gets the disc_number of this SimplifiedTrackObject.

        The disc number (usually `1` unless the album consists of more than one disc).

        :return: The disc_number of this SimplifiedTrackObject.
        :rtype: int
        """
        return self._disc_number

    @disc_number.setter
    def disc_number(self, disc_number):
        """Sets the disc_number of this SimplifiedTrackObject.

        The disc number (usually `1` unless the album consists of more than one disc).

        :param disc_number: The disc_number of this SimplifiedTrackObject.
        :type disc_number: int
        """

        self._disc_number = disc_number

    @property
    def duration_ms(self):
        """Gets the duration_ms of this SimplifiedTrackObject.

        The track length in milliseconds.

        :return: The duration_ms of this SimplifiedTrackObject.
        :rtype: int
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this SimplifiedTrackObject.

        The track length in milliseconds.

        :param duration_ms: The duration_ms of this SimplifiedTrackObject.
        :type duration_ms: int
        """

        self._duration_ms = duration_ms

    @property
    def explicit(self):
        """Gets the explicit of this SimplifiedTrackObject.

        Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).

        :return: The explicit of this SimplifiedTrackObject.
        :rtype: bool
        """
        return self._explicit

    @explicit.setter
    def explicit(self, explicit):
        """Sets the explicit of this SimplifiedTrackObject.

        Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).

        :param explicit: The explicit of this SimplifiedTrackObject.
        :type explicit: bool
        """

        self._explicit = explicit

    @property
    def external_urls(self):
        """Gets the external_urls of this SimplifiedTrackObject.

        External URLs for this track. 

        :return: The external_urls of this SimplifiedTrackObject.
        :rtype: ExternalUrlObject
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this SimplifiedTrackObject.

        External URLs for this track. 

        :param external_urls: The external_urls of this SimplifiedTrackObject.
        :type external_urls: ExternalUrlObject
        """

        self._external_urls = external_urls

    @property
    def href(self):
        """Gets the href of this SimplifiedTrackObject.

        A link to the Web API endpoint providing full details of the track.

        :return: The href of this SimplifiedTrackObject.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SimplifiedTrackObject.

        A link to the Web API endpoint providing full details of the track.

        :param href: The href of this SimplifiedTrackObject.
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this SimplifiedTrackObject.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 

        :return: The id of this SimplifiedTrackObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimplifiedTrackObject.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 

        :param id: The id of this SimplifiedTrackObject.
        :type id: str
        """

        self._id = id

    @property
    def is_local(self):
        """Gets the is_local of this SimplifiedTrackObject.

        Whether or not the track is from a local file. 

        :return: The is_local of this SimplifiedTrackObject.
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this SimplifiedTrackObject.

        Whether or not the track is from a local file. 

        :param is_local: The is_local of this SimplifiedTrackObject.
        :type is_local: bool
        """

        self._is_local = is_local

    @property
    def is_playable(self):
        """Gets the is_playable of this SimplifiedTrackObject.

        Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`. 

        :return: The is_playable of this SimplifiedTrackObject.
        :rtype: bool
        """
        return self._is_playable

    @is_playable.setter
    def is_playable(self, is_playable):
        """Sets the is_playable of this SimplifiedTrackObject.

        Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`. 

        :param is_playable: The is_playable of this SimplifiedTrackObject.
        :type is_playable: bool
        """

        self._is_playable = is_playable

    @property
    def linked_from(self):
        """Gets the linked_from of this SimplifiedTrackObject.

        Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.

        :return: The linked_from of this SimplifiedTrackObject.
        :rtype: LinkedTrackObject
        """
        return self._linked_from

    @linked_from.setter
    def linked_from(self, linked_from):
        """Sets the linked_from of this SimplifiedTrackObject.

        Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.

        :param linked_from: The linked_from of this SimplifiedTrackObject.
        :type linked_from: LinkedTrackObject
        """

        self._linked_from = linked_from

    @property
    def name(self):
        """Gets the name of this SimplifiedTrackObject.

        The name of the track.

        :return: The name of this SimplifiedTrackObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimplifiedTrackObject.

        The name of the track.

        :param name: The name of this SimplifiedTrackObject.
        :type name: str
        """

        self._name = name

    @property
    def preview_url(self):
        """Gets the preview_url of this SimplifiedTrackObject.

        A URL to a 30 second preview (MP3 format) of the track. 

        :return: The preview_url of this SimplifiedTrackObject.
        :rtype: str
        """
        return self._preview_url

    @preview_url.setter
    def preview_url(self, preview_url):
        """Sets the preview_url of this SimplifiedTrackObject.

        A URL to a 30 second preview (MP3 format) of the track. 

        :param preview_url: The preview_url of this SimplifiedTrackObject.
        :type preview_url: str
        """

        self._preview_url = preview_url

    @property
    def restrictions(self):
        """Gets the restrictions of this SimplifiedTrackObject.

        Included in the response when a content restriction is applied. 

        :return: The restrictions of this SimplifiedTrackObject.
        :rtype: TrackRestrictionObject
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this SimplifiedTrackObject.

        Included in the response when a content restriction is applied. 

        :param restrictions: The restrictions of this SimplifiedTrackObject.
        :type restrictions: TrackRestrictionObject
        """

        self._restrictions = restrictions

    @property
    def track_number(self):
        """Gets the track_number of this SimplifiedTrackObject.

        The number of the track. If an album has several discs, the track number is the number on the specified disc. 

        :return: The track_number of this SimplifiedTrackObject.
        :rtype: int
        """
        return self._track_number

    @track_number.setter
    def track_number(self, track_number):
        """Sets the track_number of this SimplifiedTrackObject.

        The number of the track. If an album has several discs, the track number is the number on the specified disc. 

        :param track_number: The track_number of this SimplifiedTrackObject.
        :type track_number: int
        """

        self._track_number = track_number

    @property
    def type(self):
        """Gets the type of this SimplifiedTrackObject.

        The object type: \"track\". 

        :return: The type of this SimplifiedTrackObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimplifiedTrackObject.

        The object type: \"track\". 

        :param type: The type of this SimplifiedTrackObject.
        :type type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this SimplifiedTrackObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 

        :return: The uri of this SimplifiedTrackObject.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this SimplifiedTrackObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 

        :param uri: The uri of this SimplifiedTrackObject.
        :type uri: str
        """

        self._uri = uri
