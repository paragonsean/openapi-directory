# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeIntervalObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, duration: float=None, start: float=None):
        """TimeIntervalObject - a model defined in OpenAPI

        :param confidence: The confidence of this TimeIntervalObject.
        :param duration: The duration of this TimeIntervalObject.
        :param start: The start of this TimeIntervalObject.
        """
        self.openapi_types = {
            'confidence': float,
            'duration': float,
            'start': float
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'duration': 'duration',
            'start': 'start'
        }

        self._confidence = confidence
        self._duration = duration
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeIntervalObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeIntervalObject of this TimeIntervalObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this TimeIntervalObject.

        The confidence, from 0.0 to 1.0, of the reliability of the interval.

        :return: The confidence of this TimeIntervalObject.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this TimeIntervalObject.

        The confidence, from 0.0 to 1.0, of the reliability of the interval.

        :param confidence: The confidence of this TimeIntervalObject.
        :type confidence: float
        """
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence

    @property
    def duration(self):
        """Gets the duration of this TimeIntervalObject.

        The duration (in seconds) of the time interval.

        :return: The duration of this TimeIntervalObject.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TimeIntervalObject.

        The duration (in seconds) of the time interval.

        :param duration: The duration of this TimeIntervalObject.
        :type duration: float
        """

        self._duration = duration

    @property
    def start(self):
        """Gets the start of this TimeIntervalObject.

        The starting point (in seconds) of the time interval.

        :return: The start of this TimeIntervalObject.
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TimeIntervalObject.

        The starting point (in seconds) of the time interval.

        :param start: The start of this TimeIntervalObject.
        :type start: float
        """

        self._start = start
