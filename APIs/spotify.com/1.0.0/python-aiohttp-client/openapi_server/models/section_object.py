# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SectionObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, duration: float=None, key: int=None, key_confidence: float=None, loudness: float=None, mode: float=None, mode_confidence: float=None, start: float=None, tempo: float=None, tempo_confidence: float=None, time_signature: int=None, time_signature_confidence: float=None):
        """SectionObject - a model defined in OpenAPI

        :param confidence: The confidence of this SectionObject.
        :param duration: The duration of this SectionObject.
        :param key: The key of this SectionObject.
        :param key_confidence: The key_confidence of this SectionObject.
        :param loudness: The loudness of this SectionObject.
        :param mode: The mode of this SectionObject.
        :param mode_confidence: The mode_confidence of this SectionObject.
        :param start: The start of this SectionObject.
        :param tempo: The tempo of this SectionObject.
        :param tempo_confidence: The tempo_confidence of this SectionObject.
        :param time_signature: The time_signature of this SectionObject.
        :param time_signature_confidence: The time_signature_confidence of this SectionObject.
        """
        self.openapi_types = {
            'confidence': float,
            'duration': float,
            'key': int,
            'key_confidence': float,
            'loudness': float,
            'mode': float,
            'mode_confidence': float,
            'start': float,
            'tempo': float,
            'tempo_confidence': float,
            'time_signature': int,
            'time_signature_confidence': float
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'duration': 'duration',
            'key': 'key',
            'key_confidence': 'key_confidence',
            'loudness': 'loudness',
            'mode': 'mode',
            'mode_confidence': 'mode_confidence',
            'start': 'start',
            'tempo': 'tempo',
            'tempo_confidence': 'tempo_confidence',
            'time_signature': 'time_signature',
            'time_signature_confidence': 'time_signature_confidence'
        }

        self._confidence = confidence
        self._duration = duration
        self._key = key
        self._key_confidence = key_confidence
        self._loudness = loudness
        self._mode = mode
        self._mode_confidence = mode_confidence
        self._start = start
        self._tempo = tempo
        self._tempo_confidence = tempo_confidence
        self._time_signature = time_signature
        self._time_signature_confidence = time_signature_confidence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SectionObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SectionObject of this SectionObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the section's \"designation\".

        :return: The confidence of this SectionObject.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the section's \"designation\".

        :param confidence: The confidence of this SectionObject.
        :type confidence: float
        """
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence

    @property
    def duration(self):
        """Gets the duration of this SectionObject.

        The duration (in seconds) of the section.

        :return: The duration of this SectionObject.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SectionObject.

        The duration (in seconds) of the section.

        :param duration: The duration of this SectionObject.
        :type duration: float
        """

        self._duration = duration

    @property
    def key(self):
        """Gets the key of this SectionObject.

        The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.

        :return: The key of this SectionObject.
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SectionObject.

        The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.

        :param key: The key of this SectionObject.
        :type key: int
        """

        self._key = key

    @property
    def key_confidence(self):
        """Gets the key_confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.

        :return: The key_confidence of this SectionObject.
        :rtype: float
        """
        return self._key_confidence

    @key_confidence.setter
    def key_confidence(self, key_confidence):
        """Sets the key_confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.

        :param key_confidence: The key_confidence of this SectionObject.
        :type key_confidence: float
        """
        if key_confidence is not None and key_confidence > 1:
            raise ValueError("Invalid value for `key_confidence`, must be a value less than or equal to `1`")
        if key_confidence is not None and key_confidence < 0:
            raise ValueError("Invalid value for `key_confidence`, must be a value greater than or equal to `0`")

        self._key_confidence = key_confidence

    @property
    def loudness(self):
        """Gets the loudness of this SectionObject.

        The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.

        :return: The loudness of this SectionObject.
        :rtype: float
        """
        return self._loudness

    @loudness.setter
    def loudness(self, loudness):
        """Sets the loudness of this SectionObject.

        The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.

        :param loudness: The loudness of this SectionObject.
        :type loudness: float
        """

        self._loudness = loudness

    @property
    def mode(self):
        """Gets the mode of this SectionObject.

        Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.

        :return: The mode of this SectionObject.
        :rtype: float
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this SectionObject.

        Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.

        :param mode: The mode of this SectionObject.
        :type mode: float
        """
        allowed_values = [-1, 0, 1]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def mode_confidence(self):
        """Gets the mode_confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the `mode`.

        :return: The mode_confidence of this SectionObject.
        :rtype: float
        """
        return self._mode_confidence

    @mode_confidence.setter
    def mode_confidence(self, mode_confidence):
        """Sets the mode_confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the `mode`.

        :param mode_confidence: The mode_confidence of this SectionObject.
        :type mode_confidence: float
        """
        if mode_confidence is not None and mode_confidence > 1:
            raise ValueError("Invalid value for `mode_confidence`, must be a value less than or equal to `1`")
        if mode_confidence is not None and mode_confidence < 0:
            raise ValueError("Invalid value for `mode_confidence`, must be a value greater than or equal to `0`")

        self._mode_confidence = mode_confidence

    @property
    def start(self):
        """Gets the start of this SectionObject.

        The starting point (in seconds) of the section.

        :return: The start of this SectionObject.
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SectionObject.

        The starting point (in seconds) of the section.

        :param start: The start of this SectionObject.
        :type start: float
        """

        self._start = start

    @property
    def tempo(self):
        """Gets the tempo of this SectionObject.

        The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.

        :return: The tempo of this SectionObject.
        :rtype: float
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo):
        """Sets the tempo of this SectionObject.

        The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.

        :param tempo: The tempo of this SectionObject.
        :type tempo: float
        """

        self._tempo = tempo

    @property
    def tempo_confidence(self):
        """Gets the tempo_confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field.

        :return: The tempo_confidence of this SectionObject.
        :rtype: float
        """
        return self._tempo_confidence

    @tempo_confidence.setter
    def tempo_confidence(self, tempo_confidence):
        """Sets the tempo_confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field.

        :param tempo_confidence: The tempo_confidence of this SectionObject.
        :type tempo_confidence: float
        """
        if tempo_confidence is not None and tempo_confidence > 1:
            raise ValueError("Invalid value for `tempo_confidence`, must be a value less than or equal to `1`")
        if tempo_confidence is not None and tempo_confidence < 0:
            raise ValueError("Invalid value for `tempo_confidence`, must be a value greater than or equal to `0`")

        self._tempo_confidence = tempo_confidence

    @property
    def time_signature(self):
        """Gets the time_signature of this SectionObject.

        An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".

        :return: The time_signature of this SectionObject.
        :rtype: int
        """
        return self._time_signature

    @time_signature.setter
    def time_signature(self, time_signature):
        """Sets the time_signature of this SectionObject.

        An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".

        :param time_signature: The time_signature of this SectionObject.
        :type time_signature: int
        """
        if time_signature is not None and time_signature > 7:
            raise ValueError("Invalid value for `time_signature`, must be a value less than or equal to `7`")
        if time_signature is not None and time_signature < 3:
            raise ValueError("Invalid value for `time_signature`, must be a value greater than or equal to `3`")

        self._time_signature = time_signature

    @property
    def time_signature_confidence(self):
        """Gets the time_signature_confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.

        :return: The time_signature_confidence of this SectionObject.
        :rtype: float
        """
        return self._time_signature_confidence

    @time_signature_confidence.setter
    def time_signature_confidence(self, time_signature_confidence):
        """Sets the time_signature_confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.

        :param time_signature_confidence: The time_signature_confidence of this SectionObject.
        :type time_signature_confidence: float
        """
        if time_signature_confidence is not None and time_signature_confidence > 1:
            raise ValueError("Invalid value for `time_signature_confidence`, must be a value less than or equal to `1`")
        if time_signature_confidence is not None and time_signature_confidence < 0:
            raise ValueError("Invalid value for `time_signature_confidence`, must be a value greater than or equal to `0`")

        self._time_signature_confidence = time_signature_confidence
