# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.remove_tracks_playlist_request_tracks_inner import RemoveTracksPlaylistRequestTracksInner
from openapi_server import util


class RemoveTracksPlaylistRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, snapshot_id: str=None, tracks: List[RemoveTracksPlaylistRequestTracksInner]=None):
        """RemoveTracksPlaylistRequest - a model defined in OpenAPI

        :param snapshot_id: The snapshot_id of this RemoveTracksPlaylistRequest.
        :param tracks: The tracks of this RemoveTracksPlaylistRequest.
        """
        self.openapi_types = {
            'snapshot_id': str,
            'tracks': List[RemoveTracksPlaylistRequestTracksInner]
        }

        self.attribute_map = {
            'snapshot_id': 'snapshot_id',
            'tracks': 'tracks'
        }

        self._snapshot_id = snapshot_id
        self._tracks = tracks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveTracksPlaylistRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The remove_tracks_playlist_request of this RemoveTracksPlaylistRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this RemoveTracksPlaylistRequest.

        The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist. 

        :return: The snapshot_id of this RemoveTracksPlaylistRequest.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this RemoveTracksPlaylistRequest.

        The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist. 

        :param snapshot_id: The snapshot_id of this RemoveTracksPlaylistRequest.
        :type snapshot_id: str
        """

        self._snapshot_id = snapshot_id

    @property
    def tracks(self):
        """Gets the tracks of this RemoveTracksPlaylistRequest.

        An array of objects containing [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or episodes to remove. For example: `{ \"tracks\": [{ \"uri\": \"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\" },{ \"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\" }] }`. A maximum of 100 objects can be sent at once. 

        :return: The tracks of this RemoveTracksPlaylistRequest.
        :rtype: List[RemoveTracksPlaylistRequestTracksInner]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this RemoveTracksPlaylistRequest.

        An array of objects containing [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or episodes to remove. For example: `{ \"tracks\": [{ \"uri\": \"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\" },{ \"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\" }] }`. A maximum of 100 objects can be sent at once. 

        :param tracks: The tracks of this RemoveTracksPlaylistRequest.
        :type tracks: List[RemoveTracksPlaylistRequestTracksInner]
        """
        if tracks is None:
            raise ValueError("Invalid value for `tracks`, must not be `None`")

        self._tracks = tracks
