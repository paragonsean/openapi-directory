# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.paging_simplified_album_object import PagingSimplifiedAlbumObject
from openapi_server import util


class GetNewReleases200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, albums: PagingSimplifiedAlbumObject=None):
        """GetNewReleases200Response - a model defined in OpenAPI

        :param albums: The albums of this GetNewReleases200Response.
        """
        self.openapi_types = {
            'albums': PagingSimplifiedAlbumObject
        }

        self.attribute_map = {
            'albums': 'albums'
        }

        self._albums = albums

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNewReleases200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_new_releases_200_response of this GetNewReleases200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def albums(self):
        """Gets the albums of this GetNewReleases200Response.


        :return: The albums of this GetNewReleases200Response.
        :rtype: PagingSimplifiedAlbumObject
        """
        return self._albums

    @albums.setter
    def albums(self, albums):
        """Sets the albums of this GetNewReleases200Response.


        :param albums: The albums of this GetNewReleases200Response.
        :type albums: PagingSimplifiedAlbumObject
        """
        if albums is None:
            raise ValueError("Invalid value for `albums`, must not be `None`")

        self._albums = albums
