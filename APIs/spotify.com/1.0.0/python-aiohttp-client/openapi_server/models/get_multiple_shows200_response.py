# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simplified_show_object import SimplifiedShowObject
from openapi_server import util


class GetMultipleShows200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shows: List[SimplifiedShowObject]=None):
        """GetMultipleShows200Response - a model defined in OpenAPI

        :param shows: The shows of this GetMultipleShows200Response.
        """
        self.openapi_types = {
            'shows': List[SimplifiedShowObject]
        }

        self.attribute_map = {
            'shows': 'shows'
        }

        self._shows = shows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMultipleShows200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_multiple_shows_200_response of this GetMultipleShows200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shows(self):
        """Gets the shows of this GetMultipleShows200Response.


        :return: The shows of this GetMultipleShows200Response.
        :rtype: List[SimplifiedShowObject]
        """
        return self._shows

    @shows.setter
    def shows(self, shows):
        """Sets the shows of this GetMultipleShows200Response.


        :param shows: The shows of this GetMultipleShows200Response.
        :type shows: List[SimplifiedShowObject]
        """
        if shows is None:
            raise ValueError("Invalid value for `shows`, must not be `None`")

        self._shows = shows
