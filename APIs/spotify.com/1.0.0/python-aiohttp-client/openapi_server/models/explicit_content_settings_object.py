# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExplicitContentSettingsObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_enabled: bool=None, filter_locked: bool=None):
        """ExplicitContentSettingsObject - a model defined in OpenAPI

        :param filter_enabled: The filter_enabled of this ExplicitContentSettingsObject.
        :param filter_locked: The filter_locked of this ExplicitContentSettingsObject.
        """
        self.openapi_types = {
            'filter_enabled': bool,
            'filter_locked': bool
        }

        self.attribute_map = {
            'filter_enabled': 'filter_enabled',
            'filter_locked': 'filter_locked'
        }

        self._filter_enabled = filter_enabled
        self._filter_locked = filter_locked

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExplicitContentSettingsObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExplicitContentSettingsObject of this ExplicitContentSettingsObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_enabled(self):
        """Gets the filter_enabled of this ExplicitContentSettingsObject.

        When `true`, indicates that explicit content should not be played. 

        :return: The filter_enabled of this ExplicitContentSettingsObject.
        :rtype: bool
        """
        return self._filter_enabled

    @filter_enabled.setter
    def filter_enabled(self, filter_enabled):
        """Sets the filter_enabled of this ExplicitContentSettingsObject.

        When `true`, indicates that explicit content should not be played. 

        :param filter_enabled: The filter_enabled of this ExplicitContentSettingsObject.
        :type filter_enabled: bool
        """

        self._filter_enabled = filter_enabled

    @property
    def filter_locked(self):
        """Gets the filter_locked of this ExplicitContentSettingsObject.

        When `true`, indicates that the explicit content setting is locked and can't be changed by the user. 

        :return: The filter_locked of this ExplicitContentSettingsObject.
        :rtype: bool
        """
        return self._filter_locked

    @filter_locked.setter
    def filter_locked(self, filter_locked):
        """Sets the filter_locked of this ExplicitContentSettingsObject.

        When `true`, indicates that the explicit content setting is locked and can't be changed by the user. 

        :param filter_locked: The filter_locked of this ExplicitContentSettingsObject.
        :type filter_locked: bool
        """

        self._filter_locked = filter_locked
