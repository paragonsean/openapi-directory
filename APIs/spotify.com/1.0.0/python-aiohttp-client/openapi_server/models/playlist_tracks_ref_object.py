# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlaylistTracksRefObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, total: int=None):
        """PlaylistTracksRefObject - a model defined in OpenAPI

        :param href: The href of this PlaylistTracksRefObject.
        :param total: The total of this PlaylistTracksRefObject.
        """
        self.openapi_types = {
            'href': str,
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'total': 'total'
        }

        self._href = href
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaylistTracksRefObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaylistTracksRefObject of this PlaylistTracksRefObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this PlaylistTracksRefObject.

        A link to the Web API endpoint where full details of the playlist's tracks can be retrieved. 

        :return: The href of this PlaylistTracksRefObject.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PlaylistTracksRefObject.

        A link to the Web API endpoint where full details of the playlist's tracks can be retrieved. 

        :param href: The href of this PlaylistTracksRefObject.
        :type href: str
        """

        self._href = href

    @property
    def total(self):
        """Gets the total of this PlaylistTracksRefObject.

        Number of tracks in the playlist. 

        :return: The total of this PlaylistTracksRefObject.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PlaylistTracksRefObject.

        Number of tracks in the playlist. 

        :param total: The total of this PlaylistTracksRefObject.
        :type total: int
        """

        self._total = total
