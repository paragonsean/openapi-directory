# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chapter_restriction_object import ChapterRestrictionObject
from openapi_server.models.external_url_object import ExternalUrlObject
from openapi_server.models.image_object import ImageObject
from openapi_server.models.resume_point_object import ResumePointObject
from openapi_server import util


class SimplifiedChapterObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_preview_url: str=None, available_markets: List[str]=None, chapter_number: int=None, description: str=None, duration_ms: int=None, explicit: bool=None, external_urls: ExternalUrlObject=None, href: str=None, html_description: str=None, id: str=None, images: List[ImageObject]=None, is_playable: bool=None, languages: List[str]=None, name: str=None, release_date: str=None, release_date_precision: str=None, restrictions: ChapterRestrictionObject=None, resume_point: ResumePointObject=None, type: str=None, uri: str=None):
        """SimplifiedChapterObject - a model defined in OpenAPI

        :param audio_preview_url: The audio_preview_url of this SimplifiedChapterObject.
        :param available_markets: The available_markets of this SimplifiedChapterObject.
        :param chapter_number: The chapter_number of this SimplifiedChapterObject.
        :param description: The description of this SimplifiedChapterObject.
        :param duration_ms: The duration_ms of this SimplifiedChapterObject.
        :param explicit: The explicit of this SimplifiedChapterObject.
        :param external_urls: The external_urls of this SimplifiedChapterObject.
        :param href: The href of this SimplifiedChapterObject.
        :param html_description: The html_description of this SimplifiedChapterObject.
        :param id: The id of this SimplifiedChapterObject.
        :param images: The images of this SimplifiedChapterObject.
        :param is_playable: The is_playable of this SimplifiedChapterObject.
        :param languages: The languages of this SimplifiedChapterObject.
        :param name: The name of this SimplifiedChapterObject.
        :param release_date: The release_date of this SimplifiedChapterObject.
        :param release_date_precision: The release_date_precision of this SimplifiedChapterObject.
        :param restrictions: The restrictions of this SimplifiedChapterObject.
        :param resume_point: The resume_point of this SimplifiedChapterObject.
        :param type: The type of this SimplifiedChapterObject.
        :param uri: The uri of this SimplifiedChapterObject.
        """
        self.openapi_types = {
            'audio_preview_url': str,
            'available_markets': List[str],
            'chapter_number': int,
            'description': str,
            'duration_ms': int,
            'explicit': bool,
            'external_urls': ExternalUrlObject,
            'href': str,
            'html_description': str,
            'id': str,
            'images': List[ImageObject],
            'is_playable': bool,
            'languages': List[str],
            'name': str,
            'release_date': str,
            'release_date_precision': str,
            'restrictions': ChapterRestrictionObject,
            'resume_point': ResumePointObject,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'audio_preview_url': 'audio_preview_url',
            'available_markets': 'available_markets',
            'chapter_number': 'chapter_number',
            'description': 'description',
            'duration_ms': 'duration_ms',
            'explicit': 'explicit',
            'external_urls': 'external_urls',
            'href': 'href',
            'html_description': 'html_description',
            'id': 'id',
            'images': 'images',
            'is_playable': 'is_playable',
            'languages': 'languages',
            'name': 'name',
            'release_date': 'release_date',
            'release_date_precision': 'release_date_precision',
            'restrictions': 'restrictions',
            'resume_point': 'resume_point',
            'type': 'type',
            'uri': 'uri'
        }

        self._audio_preview_url = audio_preview_url
        self._available_markets = available_markets
        self._chapter_number = chapter_number
        self._description = description
        self._duration_ms = duration_ms
        self._explicit = explicit
        self._external_urls = external_urls
        self._href = href
        self._html_description = html_description
        self._id = id
        self._images = images
        self._is_playable = is_playable
        self._languages = languages
        self._name = name
        self._release_date = release_date
        self._release_date_precision = release_date_precision
        self._restrictions = restrictions
        self._resume_point = resume_point
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimplifiedChapterObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SimplifiedChapterObject of this SimplifiedChapterObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_preview_url(self):
        """Gets the audio_preview_url of this SimplifiedChapterObject.

        A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 

        :return: The audio_preview_url of this SimplifiedChapterObject.
        :rtype: str
        """
        return self._audio_preview_url

    @audio_preview_url.setter
    def audio_preview_url(self, audio_preview_url):
        """Sets the audio_preview_url of this SimplifiedChapterObject.

        A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 

        :param audio_preview_url: The audio_preview_url of this SimplifiedChapterObject.
        :type audio_preview_url: str
        """
        if audio_preview_url is None:
            raise ValueError("Invalid value for `audio_preview_url`, must not be `None`")

        self._audio_preview_url = audio_preview_url

    @property
    def available_markets(self):
        """Gets the available_markets of this SimplifiedChapterObject.

        A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 

        :return: The available_markets of this SimplifiedChapterObject.
        :rtype: List[str]
        """
        return self._available_markets

    @available_markets.setter
    def available_markets(self, available_markets):
        """Sets the available_markets of this SimplifiedChapterObject.

        A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 

        :param available_markets: The available_markets of this SimplifiedChapterObject.
        :type available_markets: List[str]
        """

        self._available_markets = available_markets

    @property
    def chapter_number(self):
        """Gets the chapter_number of this SimplifiedChapterObject.

        The number of the chapter 

        :return: The chapter_number of this SimplifiedChapterObject.
        :rtype: int
        """
        return self._chapter_number

    @chapter_number.setter
    def chapter_number(self, chapter_number):
        """Sets the chapter_number of this SimplifiedChapterObject.

        The number of the chapter 

        :param chapter_number: The chapter_number of this SimplifiedChapterObject.
        :type chapter_number: int
        """
        if chapter_number is None:
            raise ValueError("Invalid value for `chapter_number`, must not be `None`")

        self._chapter_number = chapter_number

    @property
    def description(self):
        """Gets the description of this SimplifiedChapterObject.

        A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 

        :return: The description of this SimplifiedChapterObject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SimplifiedChapterObject.

        A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 

        :param description: The description of this SimplifiedChapterObject.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def duration_ms(self):
        """Gets the duration_ms of this SimplifiedChapterObject.

        The episode length in milliseconds. 

        :return: The duration_ms of this SimplifiedChapterObject.
        :rtype: int
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this SimplifiedChapterObject.

        The episode length in milliseconds. 

        :param duration_ms: The duration_ms of this SimplifiedChapterObject.
        :type duration_ms: int
        """
        if duration_ms is None:
            raise ValueError("Invalid value for `duration_ms`, must not be `None`")

        self._duration_ms = duration_ms

    @property
    def explicit(self):
        """Gets the explicit of this SimplifiedChapterObject.

        Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 

        :return: The explicit of this SimplifiedChapterObject.
        :rtype: bool
        """
        return self._explicit

    @explicit.setter
    def explicit(self, explicit):
        """Sets the explicit of this SimplifiedChapterObject.

        Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 

        :param explicit: The explicit of this SimplifiedChapterObject.
        :type explicit: bool
        """
        if explicit is None:
            raise ValueError("Invalid value for `explicit`, must not be `None`")

        self._explicit = explicit

    @property
    def external_urls(self):
        """Gets the external_urls of this SimplifiedChapterObject.

        External URLs for this episode. 

        :return: The external_urls of this SimplifiedChapterObject.
        :rtype: ExternalUrlObject
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this SimplifiedChapterObject.

        External URLs for this episode. 

        :param external_urls: The external_urls of this SimplifiedChapterObject.
        :type external_urls: ExternalUrlObject
        """
        if external_urls is None:
            raise ValueError("Invalid value for `external_urls`, must not be `None`")

        self._external_urls = external_urls

    @property
    def href(self):
        """Gets the href of this SimplifiedChapterObject.

        A link to the Web API endpoint providing full details of the episode. 

        :return: The href of this SimplifiedChapterObject.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SimplifiedChapterObject.

        A link to the Web API endpoint providing full details of the episode. 

        :param href: The href of this SimplifiedChapterObject.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def html_description(self):
        """Gets the html_description of this SimplifiedChapterObject.

        A description of the episode. This field may contain HTML tags. 

        :return: The html_description of this SimplifiedChapterObject.
        :rtype: str
        """
        return self._html_description

    @html_description.setter
    def html_description(self, html_description):
        """Sets the html_description of this SimplifiedChapterObject.

        A description of the episode. This field may contain HTML tags. 

        :param html_description: The html_description of this SimplifiedChapterObject.
        :type html_description: str
        """
        if html_description is None:
            raise ValueError("Invalid value for `html_description`, must not be `None`")

        self._html_description = html_description

    @property
    def id(self):
        """Gets the id of this SimplifiedChapterObject.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 

        :return: The id of this SimplifiedChapterObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimplifiedChapterObject.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 

        :param id: The id of this SimplifiedChapterObject.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this SimplifiedChapterObject.

        The cover art for the episode in various sizes, widest first. 

        :return: The images of this SimplifiedChapterObject.
        :rtype: List[ImageObject]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this SimplifiedChapterObject.

        The cover art for the episode in various sizes, widest first. 

        :param images: The images of this SimplifiedChapterObject.
        :type images: List[ImageObject]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def is_playable(self):
        """Gets the is_playable of this SimplifiedChapterObject.

        True if the episode is playable in the given market. Otherwise false. 

        :return: The is_playable of this SimplifiedChapterObject.
        :rtype: bool
        """
        return self._is_playable

    @is_playable.setter
    def is_playable(self, is_playable):
        """Sets the is_playable of this SimplifiedChapterObject.

        True if the episode is playable in the given market. Otherwise false. 

        :param is_playable: The is_playable of this SimplifiedChapterObject.
        :type is_playable: bool
        """
        if is_playable is None:
            raise ValueError("Invalid value for `is_playable`, must not be `None`")

        self._is_playable = is_playable

    @property
    def languages(self):
        """Gets the languages of this SimplifiedChapterObject.

        A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 

        :return: The languages of this SimplifiedChapterObject.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this SimplifiedChapterObject.

        A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 

        :param languages: The languages of this SimplifiedChapterObject.
        :type languages: List[str]
        """
        if languages is None:
            raise ValueError("Invalid value for `languages`, must not be `None`")

        self._languages = languages

    @property
    def name(self):
        """Gets the name of this SimplifiedChapterObject.

        The name of the episode. 

        :return: The name of this SimplifiedChapterObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimplifiedChapterObject.

        The name of the episode. 

        :param name: The name of this SimplifiedChapterObject.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def release_date(self):
        """Gets the release_date of this SimplifiedChapterObject.

        The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 

        :return: The release_date of this SimplifiedChapterObject.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this SimplifiedChapterObject.

        The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 

        :param release_date: The release_date of this SimplifiedChapterObject.
        :type release_date: str
        """
        if release_date is None:
            raise ValueError("Invalid value for `release_date`, must not be `None`")

        self._release_date = release_date

    @property
    def release_date_precision(self):
        """Gets the release_date_precision of this SimplifiedChapterObject.

        The precision with which `release_date` value is known. 

        :return: The release_date_precision of this SimplifiedChapterObject.
        :rtype: str
        """
        return self._release_date_precision

    @release_date_precision.setter
    def release_date_precision(self, release_date_precision):
        """Sets the release_date_precision of this SimplifiedChapterObject.

        The precision with which `release_date` value is known. 

        :param release_date_precision: The release_date_precision of this SimplifiedChapterObject.
        :type release_date_precision: str
        """
        allowed_values = ["year", "month", "day"]  # noqa: E501
        if release_date_precision not in allowed_values:
            raise ValueError(
                "Invalid value for `release_date_precision` ({0}), must be one of {1}"
                .format(release_date_precision, allowed_values)
            )

        self._release_date_precision = release_date_precision

    @property
    def restrictions(self):
        """Gets the restrictions of this SimplifiedChapterObject.

        Included in the response when a content restriction is applied. 

        :return: The restrictions of this SimplifiedChapterObject.
        :rtype: ChapterRestrictionObject
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this SimplifiedChapterObject.

        Included in the response when a content restriction is applied. 

        :param restrictions: The restrictions of this SimplifiedChapterObject.
        :type restrictions: ChapterRestrictionObject
        """

        self._restrictions = restrictions

    @property
    def resume_point(self):
        """Gets the resume_point of this SimplifiedChapterObject.

        The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'. 

        :return: The resume_point of this SimplifiedChapterObject.
        :rtype: ResumePointObject
        """
        return self._resume_point

    @resume_point.setter
    def resume_point(self, resume_point):
        """Sets the resume_point of this SimplifiedChapterObject.

        The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'. 

        :param resume_point: The resume_point of this SimplifiedChapterObject.
        :type resume_point: ResumePointObject
        """
        if resume_point is None:
            raise ValueError("Invalid value for `resume_point`, must not be `None`")

        self._resume_point = resume_point

    @property
    def type(self):
        """Gets the type of this SimplifiedChapterObject.

        The object type. 

        :return: The type of this SimplifiedChapterObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimplifiedChapterObject.

        The object type. 

        :param type: The type of this SimplifiedChapterObject.
        :type type: str
        """
        allowed_values = ["episode"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this SimplifiedChapterObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 

        :return: The uri of this SimplifiedChapterObject.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this SimplifiedChapterObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 

        :param uri: The uri of this SimplifiedChapterObject.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
