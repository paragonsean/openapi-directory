# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cursor_object import CursorObject
from openapi_server import util


class CursorPagingObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cursors: CursorObject=None, href: str=None, limit: int=None, next: str=None, total: int=None):
        """CursorPagingObject - a model defined in OpenAPI

        :param cursors: The cursors of this CursorPagingObject.
        :param href: The href of this CursorPagingObject.
        :param limit: The limit of this CursorPagingObject.
        :param next: The next of this CursorPagingObject.
        :param total: The total of this CursorPagingObject.
        """
        self.openapi_types = {
            'cursors': CursorObject,
            'href': str,
            'limit': int,
            'next': str,
            'total': int
        }

        self.attribute_map = {
            'cursors': 'cursors',
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'total': 'total'
        }

        self._cursors = cursors
        self._href = href
        self._limit = limit
        self._next = next
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CursorPagingObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CursorPagingObject of this CursorPagingObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cursors(self):
        """Gets the cursors of this CursorPagingObject.

        The cursors used to find the next set of items.

        :return: The cursors of this CursorPagingObject.
        :rtype: CursorObject
        """
        return self._cursors

    @cursors.setter
    def cursors(self, cursors):
        """Sets the cursors of this CursorPagingObject.

        The cursors used to find the next set of items.

        :param cursors: The cursors of this CursorPagingObject.
        :type cursors: CursorObject
        """

        self._cursors = cursors

    @property
    def href(self):
        """Gets the href of this CursorPagingObject.

        A link to the Web API endpoint returning the full result of the request.

        :return: The href of this CursorPagingObject.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this CursorPagingObject.

        A link to the Web API endpoint returning the full result of the request.

        :param href: The href of this CursorPagingObject.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this CursorPagingObject.

        The maximum number of items in the response (as set in the query or by default).

        :return: The limit of this CursorPagingObject.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this CursorPagingObject.

        The maximum number of items in the response (as set in the query or by default).

        :param limit: The limit of this CursorPagingObject.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this CursorPagingObject.

        URL to the next page of items. ( `null` if none)

        :return: The next of this CursorPagingObject.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this CursorPagingObject.

        URL to the next page of items. ( `null` if none)

        :param next: The next of this CursorPagingObject.
        :type next: str
        """

        self._next = next

    @property
    def total(self):
        """Gets the total of this CursorPagingObject.

        The total number of items available to return.

        :return: The total of this CursorPagingObject.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CursorPagingObject.

        The total number of items available to return.

        :param total: The total of this CursorPagingObject.
        :type total: int
        """

        self._total = total
