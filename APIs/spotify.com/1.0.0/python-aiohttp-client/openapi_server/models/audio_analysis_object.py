# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_analysis_object_meta import AudioAnalysisObjectMeta
from openapi_server.models.audio_analysis_object_track import AudioAnalysisObjectTrack
from openapi_server.models.section_object import SectionObject
from openapi_server.models.segment_object import SegmentObject
from openapi_server.models.time_interval_object import TimeIntervalObject
from openapi_server import util


class AudioAnalysisObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bars: List[TimeIntervalObject]=None, beats: List[TimeIntervalObject]=None, meta: AudioAnalysisObjectMeta=None, sections: List[SectionObject]=None, segments: List[SegmentObject]=None, tatums: List[TimeIntervalObject]=None, track: AudioAnalysisObjectTrack=None):
        """AudioAnalysisObject - a model defined in OpenAPI

        :param bars: The bars of this AudioAnalysisObject.
        :param beats: The beats of this AudioAnalysisObject.
        :param meta: The meta of this AudioAnalysisObject.
        :param sections: The sections of this AudioAnalysisObject.
        :param segments: The segments of this AudioAnalysisObject.
        :param tatums: The tatums of this AudioAnalysisObject.
        :param track: The track of this AudioAnalysisObject.
        """
        self.openapi_types = {
            'bars': List[TimeIntervalObject],
            'beats': List[TimeIntervalObject],
            'meta': AudioAnalysisObjectMeta,
            'sections': List[SectionObject],
            'segments': List[SegmentObject],
            'tatums': List[TimeIntervalObject],
            'track': AudioAnalysisObjectTrack
        }

        self.attribute_map = {
            'bars': 'bars',
            'beats': 'beats',
            'meta': 'meta',
            'sections': 'sections',
            'segments': 'segments',
            'tatums': 'tatums',
            'track': 'track'
        }

        self._bars = bars
        self._beats = beats
        self._meta = meta
        self._sections = sections
        self._segments = segments
        self._tatums = tatums
        self._track = track

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioAnalysisObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioAnalysisObject of this AudioAnalysisObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bars(self):
        """Gets the bars of this AudioAnalysisObject.

        The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.

        :return: The bars of this AudioAnalysisObject.
        :rtype: List[TimeIntervalObject]
        """
        return self._bars

    @bars.setter
    def bars(self, bars):
        """Sets the bars of this AudioAnalysisObject.

        The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.

        :param bars: The bars of this AudioAnalysisObject.
        :type bars: List[TimeIntervalObject]
        """

        self._bars = bars

    @property
    def beats(self):
        """Gets the beats of this AudioAnalysisObject.

        The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.

        :return: The beats of this AudioAnalysisObject.
        :rtype: List[TimeIntervalObject]
        """
        return self._beats

    @beats.setter
    def beats(self, beats):
        """Sets the beats of this AudioAnalysisObject.

        The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.

        :param beats: The beats of this AudioAnalysisObject.
        :type beats: List[TimeIntervalObject]
        """

        self._beats = beats

    @property
    def meta(self):
        """Gets the meta of this AudioAnalysisObject.


        :return: The meta of this AudioAnalysisObject.
        :rtype: AudioAnalysisObjectMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this AudioAnalysisObject.


        :param meta: The meta of this AudioAnalysisObject.
        :type meta: AudioAnalysisObjectMeta
        """

        self._meta = meta

    @property
    def sections(self):
        """Gets the sections of this AudioAnalysisObject.

        Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.

        :return: The sections of this AudioAnalysisObject.
        :rtype: List[SectionObject]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this AudioAnalysisObject.

        Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.

        :param sections: The sections of this AudioAnalysisObject.
        :type sections: List[SectionObject]
        """

        self._sections = sections

    @property
    def segments(self):
        """Gets the segments of this AudioAnalysisObject.

        Each segment contains a roughly conisistent sound throughout its duration.

        :return: The segments of this AudioAnalysisObject.
        :rtype: List[SegmentObject]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this AudioAnalysisObject.

        Each segment contains a roughly conisistent sound throughout its duration.

        :param segments: The segments of this AudioAnalysisObject.
        :type segments: List[SegmentObject]
        """

        self._segments = segments

    @property
    def tatums(self):
        """Gets the tatums of this AudioAnalysisObject.

        A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).

        :return: The tatums of this AudioAnalysisObject.
        :rtype: List[TimeIntervalObject]
        """
        return self._tatums

    @tatums.setter
    def tatums(self, tatums):
        """Sets the tatums of this AudioAnalysisObject.

        A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).

        :param tatums: The tatums of this AudioAnalysisObject.
        :type tatums: List[TimeIntervalObject]
        """

        self._tatums = tatums

    @property
    def track(self):
        """Gets the track of this AudioAnalysisObject.


        :return: The track of this AudioAnalysisObject.
        :rtype: AudioAnalysisObjectTrack
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this AudioAnalysisObject.


        :param track: The track of this AudioAnalysisObject.
        :type track: AudioAnalysisObjectTrack
        """

        self._track = track
