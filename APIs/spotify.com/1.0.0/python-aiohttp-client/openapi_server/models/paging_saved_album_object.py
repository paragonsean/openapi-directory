# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.saved_album_object import SavedAlbumObject
from openapi_server import util


class PagingSavedAlbumObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, next: str=None, offset: int=None, previous: str=None, total: int=None, items: List[SavedAlbumObject]=None):
        """PagingSavedAlbumObject - a model defined in OpenAPI

        :param href: The href of this PagingSavedAlbumObject.
        :param limit: The limit of this PagingSavedAlbumObject.
        :param next: The next of this PagingSavedAlbumObject.
        :param offset: The offset of this PagingSavedAlbumObject.
        :param previous: The previous of this PagingSavedAlbumObject.
        :param total: The total of this PagingSavedAlbumObject.
        :param items: The items of this PagingSavedAlbumObject.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'previous': str,
            'total': int,
            'items': List[SavedAlbumObject]
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'previous': 'previous',
            'total': 'total',
            'items': 'items'
        }

        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._previous = previous
        self._total = total
        self._items = items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PagingSavedAlbumObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PagingSavedAlbumObject of this PagingSavedAlbumObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this PagingSavedAlbumObject.

        A link to the Web API endpoint returning the full result of the request 

        :return: The href of this PagingSavedAlbumObject.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PagingSavedAlbumObject.

        A link to the Web API endpoint returning the full result of the request 

        :param href: The href of this PagingSavedAlbumObject.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this PagingSavedAlbumObject.

        The maximum number of items in the response (as set in the query or by default). 

        :return: The limit of this PagingSavedAlbumObject.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PagingSavedAlbumObject.

        The maximum number of items in the response (as set in the query or by default). 

        :param limit: The limit of this PagingSavedAlbumObject.
        :type limit: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this PagingSavedAlbumObject.

        URL to the next page of items. ( `null` if none) 

        :return: The next of this PagingSavedAlbumObject.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PagingSavedAlbumObject.

        URL to the next page of items. ( `null` if none) 

        :param next: The next of this PagingSavedAlbumObject.
        :type next: str
        """
        if next is None:
            raise ValueError("Invalid value for `next`, must not be `None`")

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this PagingSavedAlbumObject.

        The offset of the items returned (as set in the query or by default) 

        :return: The offset of this PagingSavedAlbumObject.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PagingSavedAlbumObject.

        The offset of the items returned (as set in the query or by default) 

        :param offset: The offset of this PagingSavedAlbumObject.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def previous(self):
        """Gets the previous of this PagingSavedAlbumObject.

        URL to the previous page of items. ( `null` if none) 

        :return: The previous of this PagingSavedAlbumObject.
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this PagingSavedAlbumObject.

        URL to the previous page of items. ( `null` if none) 

        :param previous: The previous of this PagingSavedAlbumObject.
        :type previous: str
        """
        if previous is None:
            raise ValueError("Invalid value for `previous`, must not be `None`")

        self._previous = previous

    @property
    def total(self):
        """Gets the total of this PagingSavedAlbumObject.

        The total number of items available to return. 

        :return: The total of this PagingSavedAlbumObject.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PagingSavedAlbumObject.

        The total number of items available to return. 

        :param total: The total of this PagingSavedAlbumObject.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def items(self):
        """Gets the items of this PagingSavedAlbumObject.


        :return: The items of this PagingSavedAlbumObject.
        :rtype: List[SavedAlbumObject]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PagingSavedAlbumObject.


        :param items: The items of this PagingSavedAlbumObject.
        :type items: List[SavedAlbumObject]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items
