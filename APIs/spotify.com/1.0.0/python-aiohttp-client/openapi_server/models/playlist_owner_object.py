# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_url_object import ExternalUrlObject
from openapi_server.models.followers_object import FollowersObject
from openapi_server import util


class PlaylistOwnerObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_urls: ExternalUrlObject=None, followers: FollowersObject=None, href: str=None, id: str=None, type: str=None, uri: str=None, display_name: str=None):
        """PlaylistOwnerObject - a model defined in OpenAPI

        :param external_urls: The external_urls of this PlaylistOwnerObject.
        :param followers: The followers of this PlaylistOwnerObject.
        :param href: The href of this PlaylistOwnerObject.
        :param id: The id of this PlaylistOwnerObject.
        :param type: The type of this PlaylistOwnerObject.
        :param uri: The uri of this PlaylistOwnerObject.
        :param display_name: The display_name of this PlaylistOwnerObject.
        """
        self.openapi_types = {
            'external_urls': ExternalUrlObject,
            'followers': FollowersObject,
            'href': str,
            'id': str,
            'type': str,
            'uri': str,
            'display_name': str
        }

        self.attribute_map = {
            'external_urls': 'external_urls',
            'followers': 'followers',
            'href': 'href',
            'id': 'id',
            'type': 'type',
            'uri': 'uri',
            'display_name': 'display_name'
        }

        self._external_urls = external_urls
        self._followers = followers
        self._href = href
        self._id = id
        self._type = type
        self._uri = uri
        self._display_name = display_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaylistOwnerObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaylistOwnerObject of this PlaylistOwnerObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_urls(self):
        """Gets the external_urls of this PlaylistOwnerObject.

        Known public external URLs for this user. 

        :return: The external_urls of this PlaylistOwnerObject.
        :rtype: ExternalUrlObject
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this PlaylistOwnerObject.

        Known public external URLs for this user. 

        :param external_urls: The external_urls of this PlaylistOwnerObject.
        :type external_urls: ExternalUrlObject
        """

        self._external_urls = external_urls

    @property
    def followers(self):
        """Gets the followers of this PlaylistOwnerObject.

        Information about the followers of this user. 

        :return: The followers of this PlaylistOwnerObject.
        :rtype: FollowersObject
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this PlaylistOwnerObject.

        Information about the followers of this user. 

        :param followers: The followers of this PlaylistOwnerObject.
        :type followers: FollowersObject
        """

        self._followers = followers

    @property
    def href(self):
        """Gets the href of this PlaylistOwnerObject.

        A link to the Web API endpoint for this user. 

        :return: The href of this PlaylistOwnerObject.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PlaylistOwnerObject.

        A link to the Web API endpoint for this user. 

        :param href: The href of this PlaylistOwnerObject.
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this PlaylistOwnerObject.

        The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user. 

        :return: The id of this PlaylistOwnerObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaylistOwnerObject.

        The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user. 

        :param id: The id of this PlaylistOwnerObject.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this PlaylistOwnerObject.

        The object type. 

        :return: The type of this PlaylistOwnerObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlaylistOwnerObject.

        The object type. 

        :param type: The type of this PlaylistOwnerObject.
        :type type: str
        """
        allowed_values = ["user"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this PlaylistOwnerObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user. 

        :return: The uri of this PlaylistOwnerObject.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PlaylistOwnerObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user. 

        :param uri: The uri of this PlaylistOwnerObject.
        :type uri: str
        """

        self._uri = uri

    @property
    def display_name(self):
        """Gets the display_name of this PlaylistOwnerObject.

        The name displayed on the user's profile. `null` if not available. 

        :return: The display_name of this PlaylistOwnerObject.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PlaylistOwnerObject.

        The name displayed on the user's profile. `null` if not available. 

        :param display_name: The display_name of this PlaylistOwnerObject.
        :type display_name: str
        """

        self._display_name = display_name
