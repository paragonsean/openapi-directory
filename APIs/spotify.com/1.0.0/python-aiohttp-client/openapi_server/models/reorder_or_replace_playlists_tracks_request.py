# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReorderOrReplacePlaylistsTracksRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insert_before: int=None, range_length: int=None, range_start: int=None, snapshot_id: str=None, uris: List[str]=None):
        """ReorderOrReplacePlaylistsTracksRequest - a model defined in OpenAPI

        :param insert_before: The insert_before of this ReorderOrReplacePlaylistsTracksRequest.
        :param range_length: The range_length of this ReorderOrReplacePlaylistsTracksRequest.
        :param range_start: The range_start of this ReorderOrReplacePlaylistsTracksRequest.
        :param snapshot_id: The snapshot_id of this ReorderOrReplacePlaylistsTracksRequest.
        :param uris: The uris of this ReorderOrReplacePlaylistsTracksRequest.
        """
        self.openapi_types = {
            'insert_before': int,
            'range_length': int,
            'range_start': int,
            'snapshot_id': str,
            'uris': List[str]
        }

        self.attribute_map = {
            'insert_before': 'insert_before',
            'range_length': 'range_length',
            'range_start': 'range_start',
            'snapshot_id': 'snapshot_id',
            'uris': 'uris'
        }

        self._insert_before = insert_before
        self._range_length = range_length
        self._range_start = range_start
        self._snapshot_id = snapshot_id
        self._uris = uris

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReorderOrReplacePlaylistsTracksRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reorder_or_replace_playlists_tracks_request of this ReorderOrReplacePlaylistsTracksRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insert_before(self):
        """Gets the insert_before of this ReorderOrReplacePlaylistsTracksRequest.

        The position where the items should be inserted.<br/>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br/>Examples:<br/>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br/>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0. 

        :return: The insert_before of this ReorderOrReplacePlaylistsTracksRequest.
        :rtype: int
        """
        return self._insert_before

    @insert_before.setter
    def insert_before(self, insert_before):
        """Sets the insert_before of this ReorderOrReplacePlaylistsTracksRequest.

        The position where the items should be inserted.<br/>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br/>Examples:<br/>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br/>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0. 

        :param insert_before: The insert_before of this ReorderOrReplacePlaylistsTracksRequest.
        :type insert_before: int
        """

        self._insert_before = insert_before

    @property
    def range_length(self):
        """Gets the range_length of this ReorderOrReplacePlaylistsTracksRequest.

        The amount of items to be reordered. Defaults to 1 if not set.<br/>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br/>Example:<br/>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2. 

        :return: The range_length of this ReorderOrReplacePlaylistsTracksRequest.
        :rtype: int
        """
        return self._range_length

    @range_length.setter
    def range_length(self, range_length):
        """Sets the range_length of this ReorderOrReplacePlaylistsTracksRequest.

        The amount of items to be reordered. Defaults to 1 if not set.<br/>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br/>Example:<br/>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2. 

        :param range_length: The range_length of this ReorderOrReplacePlaylistsTracksRequest.
        :type range_length: int
        """

        self._range_length = range_length

    @property
    def range_start(self):
        """Gets the range_start of this ReorderOrReplacePlaylistsTracksRequest.

        The position of the first item to be reordered. 

        :return: The range_start of this ReorderOrReplacePlaylistsTracksRequest.
        :rtype: int
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """Sets the range_start of this ReorderOrReplacePlaylistsTracksRequest.

        The position of the first item to be reordered. 

        :param range_start: The range_start of this ReorderOrReplacePlaylistsTracksRequest.
        :type range_start: int
        """

        self._range_start = range_start

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this ReorderOrReplacePlaylistsTracksRequest.

        The playlist's snapshot ID against which you want to make the changes. 

        :return: The snapshot_id of this ReorderOrReplacePlaylistsTracksRequest.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this ReorderOrReplacePlaylistsTracksRequest.

        The playlist's snapshot ID against which you want to make the changes. 

        :param snapshot_id: The snapshot_id of this ReorderOrReplacePlaylistsTracksRequest.
        :type snapshot_id: str
        """

        self._snapshot_id = snapshot_id

    @property
    def uris(self):
        """Gets the uris of this ReorderOrReplacePlaylistsTracksRequest.


        :return: The uris of this ReorderOrReplacePlaylistsTracksRequest.
        :rtype: List[str]
        """
        return self._uris

    @uris.setter
    def uris(self, uris):
        """Sets the uris of this ReorderOrReplacePlaylistsTracksRequest.


        :param uris: The uris of this ReorderOrReplacePlaylistsTracksRequest.
        :type uris: List[str]
        """

        self._uris = uris
