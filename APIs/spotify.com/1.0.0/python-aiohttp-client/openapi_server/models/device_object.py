# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_active: bool=None, is_private_session: bool=None, is_restricted: bool=None, name: str=None, type: str=None, volume_percent: int=None):
        """DeviceObject - a model defined in OpenAPI

        :param id: The id of this DeviceObject.
        :param is_active: The is_active of this DeviceObject.
        :param is_private_session: The is_private_session of this DeviceObject.
        :param is_restricted: The is_restricted of this DeviceObject.
        :param name: The name of this DeviceObject.
        :param type: The type of this DeviceObject.
        :param volume_percent: The volume_percent of this DeviceObject.
        """
        self.openapi_types = {
            'id': str,
            'is_active': bool,
            'is_private_session': bool,
            'is_restricted': bool,
            'name': str,
            'type': str,
            'volume_percent': int
        }

        self.attribute_map = {
            'id': 'id',
            'is_active': 'is_active',
            'is_private_session': 'is_private_session',
            'is_restricted': 'is_restricted',
            'name': 'name',
            'type': 'type',
            'volume_percent': 'volume_percent'
        }

        self._id = id
        self._is_active = is_active
        self._is_private_session = is_private_session
        self._is_restricted = is_restricted
        self._name = name
        self._type = type
        self._volume_percent = volume_percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceObject of this DeviceObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DeviceObject.

        The device ID.

        :return: The id of this DeviceObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceObject.

        The device ID.

        :param id: The id of this DeviceObject.
        :type id: str
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this DeviceObject.

        If this device is the currently active device.

        :return: The is_active of this DeviceObject.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this DeviceObject.

        If this device is the currently active device.

        :param is_active: The is_active of this DeviceObject.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_private_session(self):
        """Gets the is_private_session of this DeviceObject.

        If this device is currently in a private session.

        :return: The is_private_session of this DeviceObject.
        :rtype: bool
        """
        return self._is_private_session

    @is_private_session.setter
    def is_private_session(self, is_private_session):
        """Sets the is_private_session of this DeviceObject.

        If this device is currently in a private session.

        :param is_private_session: The is_private_session of this DeviceObject.
        :type is_private_session: bool
        """

        self._is_private_session = is_private_session

    @property
    def is_restricted(self):
        """Gets the is_restricted of this DeviceObject.

        Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.

        :return: The is_restricted of this DeviceObject.
        :rtype: bool
        """
        return self._is_restricted

    @is_restricted.setter
    def is_restricted(self, is_restricted):
        """Sets the is_restricted of this DeviceObject.

        Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.

        :param is_restricted: The is_restricted of this DeviceObject.
        :type is_restricted: bool
        """

        self._is_restricted = is_restricted

    @property
    def name(self):
        """Gets the name of this DeviceObject.

        A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\"Loudest speaker\\\") and some devices have a generic name associated with the manufacturer or device model.

        :return: The name of this DeviceObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceObject.

        A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\"Loudest speaker\\\") and some devices have a generic name associated with the manufacturer or device model.

        :param name: The name of this DeviceObject.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this DeviceObject.

        Device type, such as \"computer\", \"smartphone\" or \"speaker\".

        :return: The type of this DeviceObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeviceObject.

        Device type, such as \"computer\", \"smartphone\" or \"speaker\".

        :param type: The type of this DeviceObject.
        :type type: str
        """

        self._type = type

    @property
    def volume_percent(self):
        """Gets the volume_percent of this DeviceObject.

        The current volume in percent.

        :return: The volume_percent of this DeviceObject.
        :rtype: int
        """
        return self._volume_percent

    @volume_percent.setter
    def volume_percent(self, volume_percent):
        """Sets the volume_percent of this DeviceObject.

        The current volume in percent.

        :param volume_percent: The volume_percent of this DeviceObject.
        :type volume_percent: int
        """
        if volume_percent is not None and volume_percent > 100:
            raise ValueError("Invalid value for `volume_percent`, must be a value less than or equal to `100`")
        if volume_percent is not None and volume_percent < 0:
            raise ValueError("Invalid value for `volume_percent`, must be a value greater than or equal to `0`")

        self._volume_percent = volume_percent
