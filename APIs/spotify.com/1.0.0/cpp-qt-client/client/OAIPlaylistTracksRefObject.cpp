/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylistTracksRefObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylistTracksRefObject::OAIPlaylistTracksRefObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylistTracksRefObject::OAIPlaylistTracksRefObject() {
    this->initializeModel();
}

OAIPlaylistTracksRefObject::~OAIPlaylistTracksRefObject() {}

void OAIPlaylistTracksRefObject::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIPlaylistTracksRefObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylistTracksRefObject::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIPlaylistTracksRefObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylistTracksRefObject::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QString OAIPlaylistTracksRefObject::getHref() const {
    return m_href;
}
void OAIPlaylistTracksRefObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIPlaylistTracksRefObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAIPlaylistTracksRefObject::is_href_Valid() const{
    return m_href_isValid;
}

qint32 OAIPlaylistTracksRefObject::getTotal() const {
    return m_total;
}
void OAIPlaylistTracksRefObject::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPlaylistTracksRefObject::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPlaylistTracksRefObject::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIPlaylistTracksRefObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylistTracksRefObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
