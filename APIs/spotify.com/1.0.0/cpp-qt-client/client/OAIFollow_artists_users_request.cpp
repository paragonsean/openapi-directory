/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFollow_artists_users_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFollow_artists_users_request::OAIFollow_artists_users_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFollow_artists_users_request::OAIFollow_artists_users_request() {
    this->initializeModel();
}

OAIFollow_artists_users_request::~OAIFollow_artists_users_request() {}

void OAIFollow_artists_users_request::initializeModel() {

    m_ids_isSet = false;
    m_ids_isValid = false;
}

void OAIFollow_artists_users_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFollow_artists_users_request::fromJsonObject(QJsonObject json) {

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;
}

QString OAIFollow_artists_users_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFollow_artists_users_request::asJsonObject() const {
    QJsonObject obj;
    if (m_ids.size() > 0) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    return obj;
}

QList<QString> OAIFollow_artists_users_request::getIds() const {
    return m_ids;
}
void OAIFollow_artists_users_request::setIds(const QList<QString> &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIFollow_artists_users_request::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIFollow_artists_users_request::is_ids_Valid() const{
    return m_ids_isValid;
}

bool OAIFollow_artists_users_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFollow_artists_users_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ids_isValid && true;
}

} // namespace OpenAPI
