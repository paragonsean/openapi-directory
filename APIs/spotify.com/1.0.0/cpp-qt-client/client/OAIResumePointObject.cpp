/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResumePointObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResumePointObject::OAIResumePointObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResumePointObject::OAIResumePointObject() {
    this->initializeModel();
}

OAIResumePointObject::~OAIResumePointObject() {}

void OAIResumePointObject::initializeModel() {

    m_fully_played_isSet = false;
    m_fully_played_isValid = false;

    m_resume_position_ms_isSet = false;
    m_resume_position_ms_isValid = false;
}

void OAIResumePointObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResumePointObject::fromJsonObject(QJsonObject json) {

    m_fully_played_isValid = ::OpenAPI::fromJsonValue(m_fully_played, json[QString("fully_played")]);
    m_fully_played_isSet = !json[QString("fully_played")].isNull() && m_fully_played_isValid;

    m_resume_position_ms_isValid = ::OpenAPI::fromJsonValue(m_resume_position_ms, json[QString("resume_position_ms")]);
    m_resume_position_ms_isSet = !json[QString("resume_position_ms")].isNull() && m_resume_position_ms_isValid;
}

QString OAIResumePointObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResumePointObject::asJsonObject() const {
    QJsonObject obj;
    if (m_fully_played_isSet) {
        obj.insert(QString("fully_played"), ::OpenAPI::toJsonValue(m_fully_played));
    }
    if (m_resume_position_ms_isSet) {
        obj.insert(QString("resume_position_ms"), ::OpenAPI::toJsonValue(m_resume_position_ms));
    }
    return obj;
}

bool OAIResumePointObject::isFullyPlayed() const {
    return m_fully_played;
}
void OAIResumePointObject::setFullyPlayed(const bool &fully_played) {
    m_fully_played = fully_played;
    m_fully_played_isSet = true;
}

bool OAIResumePointObject::is_fully_played_Set() const{
    return m_fully_played_isSet;
}

bool OAIResumePointObject::is_fully_played_Valid() const{
    return m_fully_played_isValid;
}

qint32 OAIResumePointObject::getResumePositionMs() const {
    return m_resume_position_ms;
}
void OAIResumePointObject::setResumePositionMs(const qint32 &resume_position_ms) {
    m_resume_position_ms = resume_position_ms;
    m_resume_position_ms_isSet = true;
}

bool OAIResumePointObject::is_resume_position_ms_Set() const{
    return m_resume_position_ms_isSet;
}

bool OAIResumePointObject::is_resume_position_ms_Valid() const{
    return m_resume_position_ms_isValid;
}

bool OAIResumePointObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fully_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_position_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResumePointObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
