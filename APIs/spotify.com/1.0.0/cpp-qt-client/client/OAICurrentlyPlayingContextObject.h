/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICurrentlyPlayingContextObject.h
 *
 * 
 */

#ifndef OAICurrentlyPlayingContextObject_H
#define OAICurrentlyPlayingContextObject_H

#include <QJsonObject>

#include "OAIContextObject.h"
#include "OAICurrentlyPlayingContextObject_item.h"
#include "OAIDeviceObject.h"
#include "OAIDisallowsObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDisallowsObject;
class OAIContextObject;
class OAIDeviceObject;
class OAICurrentlyPlayingContextObject_item;

class OAICurrentlyPlayingContextObject : public OAIObject {
public:
    OAICurrentlyPlayingContextObject();
    OAICurrentlyPlayingContextObject(QString json);
    ~OAICurrentlyPlayingContextObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDisallowsObject getActions() const;
    void setActions(const OAIDisallowsObject &actions);
    bool is_actions_Set() const;
    bool is_actions_Valid() const;

    OAIContextObject getContext() const;
    void setContext(const OAIContextObject &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    QString getCurrentlyPlayingType() const;
    void setCurrentlyPlayingType(const QString &currently_playing_type);
    bool is_currently_playing_type_Set() const;
    bool is_currently_playing_type_Valid() const;

    OAIDeviceObject getDevice() const;
    void setDevice(const OAIDeviceObject &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    bool isIsPlaying() const;
    void setIsPlaying(const bool &is_playing);
    bool is_is_playing_Set() const;
    bool is_is_playing_Valid() const;

    OAICurrentlyPlayingContextObject_item getItem() const;
    void setItem(const OAICurrentlyPlayingContextObject_item &item);
    bool is_item_Set() const;
    bool is_item_Valid() const;

    qint32 getProgressMs() const;
    void setProgressMs(const qint32 &progress_ms);
    bool is_progress_ms_Set() const;
    bool is_progress_ms_Valid() const;

    QString getRepeatState() const;
    void setRepeatState(const QString &repeat_state);
    bool is_repeat_state_Set() const;
    bool is_repeat_state_Valid() const;

    bool isShuffleState() const;
    void setShuffleState(const bool &shuffle_state);
    bool is_shuffle_state_Set() const;
    bool is_shuffle_state_Valid() const;

    qint32 getTimestamp() const;
    void setTimestamp(const qint32 &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDisallowsObject m_actions;
    bool m_actions_isSet;
    bool m_actions_isValid;

    OAIContextObject m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    QString m_currently_playing_type;
    bool m_currently_playing_type_isSet;
    bool m_currently_playing_type_isValid;

    OAIDeviceObject m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    bool m_is_playing;
    bool m_is_playing_isSet;
    bool m_is_playing_isValid;

    OAICurrentlyPlayingContextObject_item m_item;
    bool m_item_isSet;
    bool m_item_isValid;

    qint32 m_progress_ms;
    bool m_progress_ms_isSet;
    bool m_progress_ms_isValid;

    QString m_repeat_state;
    bool m_repeat_state_isSet;
    bool m_repeat_state_isValid;

    bool m_shuffle_state;
    bool m_shuffle_state_isSet;
    bool m_shuffle_state_isValid;

    qint32 m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICurrentlyPlayingContextObject)

#endif // OAICurrentlyPlayingContextObject_H
