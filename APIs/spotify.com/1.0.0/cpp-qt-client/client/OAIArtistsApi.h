/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIArtistsApi_H
#define OAI_OAIArtistsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArtistObject.h"
#include "OAIFollow_artists_users_request.h"
#include "OAIGet_an_artists_top_tracks_200_response.h"
#include "OAIGet_followed_200_response.h"
#include "OAIGet_multiple_albums_401_response.h"
#include "OAIGet_multiple_artists_200_response.h"
#include "OAIPagingSimplifiedAlbumObject.h"
#include "OAIUnfollow_artists_users_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIArtistsApi : public QObject {
    Q_OBJECT

public:
    OAIArtistsApi(const int timeOut = 0);
    ~OAIArtistsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type QString [required]
    * @param[in]  ids QString [required]
    */
    virtual void checkCurrentUserFollows(const QString &type, const QString &ids);

    /**
    * @param[in]  type QString [required]
    * @param[in]  ids QString [required]
    * @param[in]  oai_follow_artists_users_request OAIFollow_artists_users_request [optional]
    */
    virtual void followArtistsUsers(const QString &type, const QString &ids, const ::OpenAPI::OptionalParam<OAIFollow_artists_users_request> &oai_follow_artists_users_request = ::OpenAPI::OptionalParam<OAIFollow_artists_users_request>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAnArtist(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_groups QString [optional]
    * @param[in]  market QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getAnArtistsAlbums(const QString &id, const ::OpenAPI::OptionalParam<QString> &include_groups = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAnArtistsRelatedArtists(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  market QString [optional]
    */
    virtual void getAnArtistsTopTracks(const QString &id, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  after QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getFollowed(const QString &type, const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ids QString [required]
    */
    virtual void getMultipleArtists(const QString &ids);

    /**
    * @param[in]  type QString [required]
    * @param[in]  ids QString [required]
    * @param[in]  oai_unfollow_artists_users_request OAIUnfollow_artists_users_request [optional]
    */
    virtual void unfollowArtistsUsers(const QString &type, const QString &ids, const ::OpenAPI::OptionalParam<OAIUnfollow_artists_users_request> &oai_unfollow_artists_users_request = ::OpenAPI::OptionalParam<OAIUnfollow_artists_users_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkCurrentUserFollowsCallback(OAIHttpRequestWorker *worker);
    void followArtistsUsersCallback(OAIHttpRequestWorker *worker);
    void getAnArtistCallback(OAIHttpRequestWorker *worker);
    void getAnArtistsAlbumsCallback(OAIHttpRequestWorker *worker);
    void getAnArtistsRelatedArtistsCallback(OAIHttpRequestWorker *worker);
    void getAnArtistsTopTracksCallback(OAIHttpRequestWorker *worker);
    void getFollowedCallback(OAIHttpRequestWorker *worker);
    void getMultipleArtistsCallback(OAIHttpRequestWorker *worker);
    void unfollowArtistsUsersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkCurrentUserFollowsSignal(QList<bool> summary);
    void followArtistsUsersSignal();
    void getAnArtistSignal(OAIArtistObject summary);
    void getAnArtistsAlbumsSignal(OAIPagingSimplifiedAlbumObject summary);
    void getAnArtistsRelatedArtistsSignal(OAIGet_multiple_artists_200_response summary);
    void getAnArtistsTopTracksSignal(OAIGet_an_artists_top_tracks_200_response summary);
    void getFollowedSignal(OAIGet_followed_200_response summary);
    void getMultipleArtistsSignal(OAIGet_multiple_artists_200_response summary);
    void unfollowArtistsUsersSignal();


    void checkCurrentUserFollowsSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void followArtistsUsersSignalFull(OAIHttpRequestWorker *worker);
    void getAnArtistSignalFull(OAIHttpRequestWorker *worker, OAIArtistObject summary);
    void getAnArtistsAlbumsSignalFull(OAIHttpRequestWorker *worker, OAIPagingSimplifiedAlbumObject summary);
    void getAnArtistsRelatedArtistsSignalFull(OAIHttpRequestWorker *worker, OAIGet_multiple_artists_200_response summary);
    void getAnArtistsTopTracksSignalFull(OAIHttpRequestWorker *worker, OAIGet_an_artists_top_tracks_200_response summary);
    void getFollowedSignalFull(OAIHttpRequestWorker *worker, OAIGet_followed_200_response summary);
    void getMultipleArtistsSignalFull(OAIHttpRequestWorker *worker, OAIGet_multiple_artists_200_response summary);
    void unfollowArtistsUsersSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use checkCurrentUserFollowsSignalError() instead")
    void checkCurrentUserFollowsSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkCurrentUserFollowsSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followArtistsUsersSignalError() instead")
    void followArtistsUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void followArtistsUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnArtistSignalError() instead")
    void getAnArtistSignalE(OAIArtistObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnArtistSignalError(OAIArtistObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnArtistsAlbumsSignalError() instead")
    void getAnArtistsAlbumsSignalE(OAIPagingSimplifiedAlbumObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnArtistsAlbumsSignalError(OAIPagingSimplifiedAlbumObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnArtistsRelatedArtistsSignalError() instead")
    void getAnArtistsRelatedArtistsSignalE(OAIGet_multiple_artists_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnArtistsRelatedArtistsSignalError(OAIGet_multiple_artists_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnArtistsTopTracksSignalError() instead")
    void getAnArtistsTopTracksSignalE(OAIGet_an_artists_top_tracks_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnArtistsTopTracksSignalError(OAIGet_an_artists_top_tracks_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFollowedSignalError() instead")
    void getFollowedSignalE(OAIGet_followed_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFollowedSignalError(OAIGet_followed_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultipleArtistsSignalError() instead")
    void getMultipleArtistsSignalE(OAIGet_multiple_artists_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultipleArtistsSignalError(OAIGet_multiple_artists_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowArtistsUsersSignalError() instead")
    void unfollowArtistsUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowArtistsUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkCurrentUserFollowsSignalErrorFull() instead")
    void checkCurrentUserFollowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkCurrentUserFollowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followArtistsUsersSignalErrorFull() instead")
    void followArtistsUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followArtistsUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnArtistSignalErrorFull() instead")
    void getAnArtistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnArtistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnArtistsAlbumsSignalErrorFull() instead")
    void getAnArtistsAlbumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnArtistsAlbumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnArtistsRelatedArtistsSignalErrorFull() instead")
    void getAnArtistsRelatedArtistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnArtistsRelatedArtistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnArtistsTopTracksSignalErrorFull() instead")
    void getAnArtistsTopTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnArtistsTopTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFollowedSignalErrorFull() instead")
    void getFollowedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFollowedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultipleArtistsSignalErrorFull() instead")
    void getMultipleArtistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultipleArtistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowArtistsUsersSignalErrorFull() instead")
    void unfollowArtistsUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowArtistsUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
