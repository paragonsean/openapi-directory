/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransfer_a_users_playback_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransfer_a_users_playback_request::OAITransfer_a_users_playback_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransfer_a_users_playback_request::OAITransfer_a_users_playback_request() {
    this->initializeModel();
}

OAITransfer_a_users_playback_request::~OAITransfer_a_users_playback_request() {}

void OAITransfer_a_users_playback_request::initializeModel() {

    m_device_ids_isSet = false;
    m_device_ids_isValid = false;

    m_play_isSet = false;
    m_play_isValid = false;
}

void OAITransfer_a_users_playback_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransfer_a_users_playback_request::fromJsonObject(QJsonObject json) {

    m_device_ids_isValid = ::OpenAPI::fromJsonValue(m_device_ids, json[QString("device_ids")]);
    m_device_ids_isSet = !json[QString("device_ids")].isNull() && m_device_ids_isValid;

    m_play_isValid = ::OpenAPI::fromJsonValue(m_play, json[QString("play")]);
    m_play_isSet = !json[QString("play")].isNull() && m_play_isValid;
}

QString OAITransfer_a_users_playback_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransfer_a_users_playback_request::asJsonObject() const {
    QJsonObject obj;
    if (m_device_ids.size() > 0) {
        obj.insert(QString("device_ids"), ::OpenAPI::toJsonValue(m_device_ids));
    }
    if (m_play.size() > 0) {
        obj.insert(QString("play"), ::OpenAPI::toJsonValue(m_play));
    }
    return obj;
}

QList<QString> OAITransfer_a_users_playback_request::getDeviceIds() const {
    return m_device_ids;
}
void OAITransfer_a_users_playback_request::setDeviceIds(const QList<QString> &device_ids) {
    m_device_ids = device_ids;
    m_device_ids_isSet = true;
}

bool OAITransfer_a_users_playback_request::is_device_ids_Set() const{
    return m_device_ids_isSet;
}

bool OAITransfer_a_users_playback_request::is_device_ids_Valid() const{
    return m_device_ids_isValid;
}

QMap<QString, QJsonValue> OAITransfer_a_users_playback_request::getPlay() const {
    return m_play;
}
void OAITransfer_a_users_playback_request::setPlay(const QMap<QString, QJsonValue> &play) {
    m_play = play;
    m_play_isSet = true;
}

bool OAITransfer_a_users_playback_request::is_play_Set() const{
    return m_play_isSet;
}

bool OAITransfer_a_users_playback_request::is_play_Valid() const{
    return m_play_isValid;
}

bool OAITransfer_a_users_playback_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_play.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransfer_a_users_playback_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_ids_isValid && true;
}

} // namespace OpenAPI
