/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICursorObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICursorObject::OAICursorObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICursorObject::OAICursorObject() {
    this->initializeModel();
}

OAICursorObject::~OAICursorObject() {}

void OAICursorObject::initializeModel() {

    m_after_isSet = false;
    m_after_isValid = false;

    m_before_isSet = false;
    m_before_isValid = false;
}

void OAICursorObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICursorObject::fromJsonObject(QJsonObject json) {

    m_after_isValid = ::OpenAPI::fromJsonValue(m_after, json[QString("after")]);
    m_after_isSet = !json[QString("after")].isNull() && m_after_isValid;

    m_before_isValid = ::OpenAPI::fromJsonValue(m_before, json[QString("before")]);
    m_before_isSet = !json[QString("before")].isNull() && m_before_isValid;
}

QString OAICursorObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICursorObject::asJsonObject() const {
    QJsonObject obj;
    if (m_after_isSet) {
        obj.insert(QString("after"), ::OpenAPI::toJsonValue(m_after));
    }
    if (m_before_isSet) {
        obj.insert(QString("before"), ::OpenAPI::toJsonValue(m_before));
    }
    return obj;
}

QString OAICursorObject::getAfter() const {
    return m_after;
}
void OAICursorObject::setAfter(const QString &after) {
    m_after = after;
    m_after_isSet = true;
}

bool OAICursorObject::is_after_Set() const{
    return m_after_isSet;
}

bool OAICursorObject::is_after_Valid() const{
    return m_after_isValid;
}

QString OAICursorObject::getBefore() const {
    return m_before;
}
void OAICursorObject::setBefore(const QString &before) {
    m_before = before;
    m_before_isSet = true;
}

bool OAICursorObject::is_before_Set() const{
    return m_before_isSet;
}

bool OAICursorObject::is_before_Valid() const{
    return m_before_isValid;
}

bool OAICursorObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICursorObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
