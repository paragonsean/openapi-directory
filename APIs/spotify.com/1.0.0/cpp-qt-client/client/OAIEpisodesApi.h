/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEpisodesApi_H
#define OAI_OAIEpisodesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEpisodeObject.h"
#include "OAIGet_multiple_albums_401_response.h"
#include "OAIGet_multiple_episodes_200_response.h"
#include "OAIPagingSavedEpisodeObject.h"
#include "OAIPagingSimplifiedEpisodeObject.h"
#include "OAIRemove_episodes_user_request.h"
#include "OAISave_episodes_user_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEpisodesApi : public QObject {
    Q_OBJECT

public:
    OAIEpisodesApi(const int timeOut = 0);
    ~OAIEpisodesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ids QString [required]
    */
    virtual void checkUsersSavedEpisodes(const QString &ids);

    /**
    * @param[in]  id QString [required]
    * @param[in]  market QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getAShowsEpisodes(const QString &id, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  market QString [optional]
    */
    virtual void getAnEpisode(const QString &id, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  market QString [optional]
    */
    virtual void getMultipleEpisodes(const QString &ids, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getUsersSavedEpisodes(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  oai_remove_episodes_user_request OAIRemove_episodes_user_request [optional]
    */
    virtual void removeEpisodesUser(const QString &ids, const ::OpenAPI::OptionalParam<OAIRemove_episodes_user_request> &oai_remove_episodes_user_request = ::OpenAPI::OptionalParam<OAIRemove_episodes_user_request>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  oai_save_episodes_user_request OAISave_episodes_user_request [optional]
    */
    virtual void saveEpisodesUser(const QString &ids, const ::OpenAPI::OptionalParam<OAISave_episodes_user_request> &oai_save_episodes_user_request = ::OpenAPI::OptionalParam<OAISave_episodes_user_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkUsersSavedEpisodesCallback(OAIHttpRequestWorker *worker);
    void getAShowsEpisodesCallback(OAIHttpRequestWorker *worker);
    void getAnEpisodeCallback(OAIHttpRequestWorker *worker);
    void getMultipleEpisodesCallback(OAIHttpRequestWorker *worker);
    void getUsersSavedEpisodesCallback(OAIHttpRequestWorker *worker);
    void removeEpisodesUserCallback(OAIHttpRequestWorker *worker);
    void saveEpisodesUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkUsersSavedEpisodesSignal(QList<bool> summary);
    void getAShowsEpisodesSignal(OAIPagingSimplifiedEpisodeObject summary);
    void getAnEpisodeSignal(OAIEpisodeObject summary);
    void getMultipleEpisodesSignal(OAIGet_multiple_episodes_200_response summary);
    void getUsersSavedEpisodesSignal(OAIPagingSavedEpisodeObject summary);
    void removeEpisodesUserSignal();
    void saveEpisodesUserSignal();


    void checkUsersSavedEpisodesSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void getAShowsEpisodesSignalFull(OAIHttpRequestWorker *worker, OAIPagingSimplifiedEpisodeObject summary);
    void getAnEpisodeSignalFull(OAIHttpRequestWorker *worker, OAIEpisodeObject summary);
    void getMultipleEpisodesSignalFull(OAIHttpRequestWorker *worker, OAIGet_multiple_episodes_200_response summary);
    void getUsersSavedEpisodesSignalFull(OAIHttpRequestWorker *worker, OAIPagingSavedEpisodeObject summary);
    void removeEpisodesUserSignalFull(OAIHttpRequestWorker *worker);
    void saveEpisodesUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use checkUsersSavedEpisodesSignalError() instead")
    void checkUsersSavedEpisodesSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedEpisodesSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAShowsEpisodesSignalError() instead")
    void getAShowsEpisodesSignalE(OAIPagingSimplifiedEpisodeObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAShowsEpisodesSignalError(OAIPagingSimplifiedEpisodeObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnEpisodeSignalError() instead")
    void getAnEpisodeSignalE(OAIEpisodeObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnEpisodeSignalError(OAIEpisodeObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultipleEpisodesSignalError() instead")
    void getMultipleEpisodesSignalE(OAIGet_multiple_episodes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultipleEpisodesSignalError(OAIGet_multiple_episodes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedEpisodesSignalError() instead")
    void getUsersSavedEpisodesSignalE(OAIPagingSavedEpisodeObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedEpisodesSignalError(OAIPagingSavedEpisodeObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeEpisodesUserSignalError() instead")
    void removeEpisodesUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeEpisodesUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveEpisodesUserSignalError() instead")
    void saveEpisodesUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveEpisodesUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkUsersSavedEpisodesSignalErrorFull() instead")
    void checkUsersSavedEpisodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedEpisodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAShowsEpisodesSignalErrorFull() instead")
    void getAShowsEpisodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAShowsEpisodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnEpisodeSignalErrorFull() instead")
    void getAnEpisodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnEpisodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultipleEpisodesSignalErrorFull() instead")
    void getMultipleEpisodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultipleEpisodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedEpisodesSignalErrorFull() instead")
    void getUsersSavedEpisodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedEpisodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeEpisodesUserSignalErrorFull() instead")
    void removeEpisodesUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeEpisodesUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveEpisodesUserSignalErrorFull() instead")
    void saveEpisodesUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveEpisodesUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
