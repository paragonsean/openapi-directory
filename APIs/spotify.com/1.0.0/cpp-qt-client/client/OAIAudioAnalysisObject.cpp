/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioAnalysisObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioAnalysisObject::OAIAudioAnalysisObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioAnalysisObject::OAIAudioAnalysisObject() {
    this->initializeModel();
}

OAIAudioAnalysisObject::~OAIAudioAnalysisObject() {}

void OAIAudioAnalysisObject::initializeModel() {

    m_bars_isSet = false;
    m_bars_isValid = false;

    m_beats_isSet = false;
    m_beats_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_sections_isSet = false;
    m_sections_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;

    m_tatums_isSet = false;
    m_tatums_isValid = false;

    m_track_isSet = false;
    m_track_isValid = false;
}

void OAIAudioAnalysisObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioAnalysisObject::fromJsonObject(QJsonObject json) {

    m_bars_isValid = ::OpenAPI::fromJsonValue(m_bars, json[QString("bars")]);
    m_bars_isSet = !json[QString("bars")].isNull() && m_bars_isValid;

    m_beats_isValid = ::OpenAPI::fromJsonValue(m_beats, json[QString("beats")]);
    m_beats_isSet = !json[QString("beats")].isNull() && m_beats_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_sections_isValid = ::OpenAPI::fromJsonValue(m_sections, json[QString("sections")]);
    m_sections_isSet = !json[QString("sections")].isNull() && m_sections_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;

    m_tatums_isValid = ::OpenAPI::fromJsonValue(m_tatums, json[QString("tatums")]);
    m_tatums_isSet = !json[QString("tatums")].isNull() && m_tatums_isValid;

    m_track_isValid = ::OpenAPI::fromJsonValue(m_track, json[QString("track")]);
    m_track_isSet = !json[QString("track")].isNull() && m_track_isValid;
}

QString OAIAudioAnalysisObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioAnalysisObject::asJsonObject() const {
    QJsonObject obj;
    if (m_bars.size() > 0) {
        obj.insert(QString("bars"), ::OpenAPI::toJsonValue(m_bars));
    }
    if (m_beats.size() > 0) {
        obj.insert(QString("beats"), ::OpenAPI::toJsonValue(m_beats));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_sections.size() > 0) {
        obj.insert(QString("sections"), ::OpenAPI::toJsonValue(m_sections));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    if (m_tatums.size() > 0) {
        obj.insert(QString("tatums"), ::OpenAPI::toJsonValue(m_tatums));
    }
    if (m_track.isSet()) {
        obj.insert(QString("track"), ::OpenAPI::toJsonValue(m_track));
    }
    return obj;
}

QList<OAITimeIntervalObject> OAIAudioAnalysisObject::getBars() const {
    return m_bars;
}
void OAIAudioAnalysisObject::setBars(const QList<OAITimeIntervalObject> &bars) {
    m_bars = bars;
    m_bars_isSet = true;
}

bool OAIAudioAnalysisObject::is_bars_Set() const{
    return m_bars_isSet;
}

bool OAIAudioAnalysisObject::is_bars_Valid() const{
    return m_bars_isValid;
}

QList<OAITimeIntervalObject> OAIAudioAnalysisObject::getBeats() const {
    return m_beats;
}
void OAIAudioAnalysisObject::setBeats(const QList<OAITimeIntervalObject> &beats) {
    m_beats = beats;
    m_beats_isSet = true;
}

bool OAIAudioAnalysisObject::is_beats_Set() const{
    return m_beats_isSet;
}

bool OAIAudioAnalysisObject::is_beats_Valid() const{
    return m_beats_isValid;
}

OAIAudioAnalysisObject_meta OAIAudioAnalysisObject::getMeta() const {
    return m_meta;
}
void OAIAudioAnalysisObject::setMeta(const OAIAudioAnalysisObject_meta &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIAudioAnalysisObject::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIAudioAnalysisObject::is_meta_Valid() const{
    return m_meta_isValid;
}

QList<OAISectionObject> OAIAudioAnalysisObject::getSections() const {
    return m_sections;
}
void OAIAudioAnalysisObject::setSections(const QList<OAISectionObject> &sections) {
    m_sections = sections;
    m_sections_isSet = true;
}

bool OAIAudioAnalysisObject::is_sections_Set() const{
    return m_sections_isSet;
}

bool OAIAudioAnalysisObject::is_sections_Valid() const{
    return m_sections_isValid;
}

QList<OAISegmentObject> OAIAudioAnalysisObject::getSegments() const {
    return m_segments;
}
void OAIAudioAnalysisObject::setSegments(const QList<OAISegmentObject> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIAudioAnalysisObject::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIAudioAnalysisObject::is_segments_Valid() const{
    return m_segments_isValid;
}

QList<OAITimeIntervalObject> OAIAudioAnalysisObject::getTatums() const {
    return m_tatums;
}
void OAIAudioAnalysisObject::setTatums(const QList<OAITimeIntervalObject> &tatums) {
    m_tatums = tatums;
    m_tatums_isSet = true;
}

bool OAIAudioAnalysisObject::is_tatums_Set() const{
    return m_tatums_isSet;
}

bool OAIAudioAnalysisObject::is_tatums_Valid() const{
    return m_tatums_isValid;
}

OAIAudioAnalysisObject_track OAIAudioAnalysisObject::getTrack() const {
    return m_track;
}
void OAIAudioAnalysisObject::setTrack(const OAIAudioAnalysisObject_track &track) {
    m_track = track;
    m_track_isSet = true;
}

bool OAIAudioAnalysisObject::is_track_Set() const{
    return m_track_isSet;
}

bool OAIAudioAnalysisObject::is_track_Valid() const{
    return m_track_isValid;
}

bool OAIAudioAnalysisObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bars.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_beats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tatums.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_track.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioAnalysisObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
