/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISectionObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISectionObject::OAISectionObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISectionObject::OAISectionObject() {
    this->initializeModel();
}

OAISectionObject::~OAISectionObject() {}

void OAISectionObject::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_key_confidence_isSet = false;
    m_key_confidence_isValid = false;

    m_loudness_isSet = false;
    m_loudness_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_mode_confidence_isSet = false;
    m_mode_confidence_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_tempo_isSet = false;
    m_tempo_isValid = false;

    m_tempo_confidence_isSet = false;
    m_tempo_confidence_isValid = false;

    m_time_signature_isSet = false;
    m_time_signature_isValid = false;

    m_time_signature_confidence_isSet = false;
    m_time_signature_confidence_isValid = false;
}

void OAISectionObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISectionObject::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_key_confidence_isValid = ::OpenAPI::fromJsonValue(m_key_confidence, json[QString("key_confidence")]);
    m_key_confidence_isSet = !json[QString("key_confidence")].isNull() && m_key_confidence_isValid;

    m_loudness_isValid = ::OpenAPI::fromJsonValue(m_loudness, json[QString("loudness")]);
    m_loudness_isSet = !json[QString("loudness")].isNull() && m_loudness_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_mode_confidence_isValid = ::OpenAPI::fromJsonValue(m_mode_confidence, json[QString("mode_confidence")]);
    m_mode_confidence_isSet = !json[QString("mode_confidence")].isNull() && m_mode_confidence_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_tempo_isValid = ::OpenAPI::fromJsonValue(m_tempo, json[QString("tempo")]);
    m_tempo_isSet = !json[QString("tempo")].isNull() && m_tempo_isValid;

    m_tempo_confidence_isValid = ::OpenAPI::fromJsonValue(m_tempo_confidence, json[QString("tempo_confidence")]);
    m_tempo_confidence_isSet = !json[QString("tempo_confidence")].isNull() && m_tempo_confidence_isValid;

    m_time_signature_isValid = ::OpenAPI::fromJsonValue(m_time_signature, json[QString("time_signature")]);
    m_time_signature_isSet = !json[QString("time_signature")].isNull() && m_time_signature_isValid;

    m_time_signature_confidence_isValid = ::OpenAPI::fromJsonValue(m_time_signature_confidence, json[QString("time_signature_confidence")]);
    m_time_signature_confidence_isSet = !json[QString("time_signature_confidence")].isNull() && m_time_signature_confidence_isValid;
}

QString OAISectionObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISectionObject::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_key_confidence_isSet) {
        obj.insert(QString("key_confidence"), ::OpenAPI::toJsonValue(m_key_confidence));
    }
    if (m_loudness_isSet) {
        obj.insert(QString("loudness"), ::OpenAPI::toJsonValue(m_loudness));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_mode_confidence_isSet) {
        obj.insert(QString("mode_confidence"), ::OpenAPI::toJsonValue(m_mode_confidence));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_tempo_isSet) {
        obj.insert(QString("tempo"), ::OpenAPI::toJsonValue(m_tempo));
    }
    if (m_tempo_confidence_isSet) {
        obj.insert(QString("tempo_confidence"), ::OpenAPI::toJsonValue(m_tempo_confidence));
    }
    if (m_time_signature_isSet) {
        obj.insert(QString("time_signature"), ::OpenAPI::toJsonValue(m_time_signature));
    }
    if (m_time_signature_confidence_isSet) {
        obj.insert(QString("time_signature_confidence"), ::OpenAPI::toJsonValue(m_time_signature_confidence));
    }
    return obj;
}

double OAISectionObject::getConfidence() const {
    return m_confidence;
}
void OAISectionObject::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAISectionObject::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAISectionObject::is_confidence_Valid() const{
    return m_confidence_isValid;
}

double OAISectionObject::getDuration() const {
    return m_duration;
}
void OAISectionObject::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAISectionObject::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAISectionObject::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAISectionObject::getKey() const {
    return m_key;
}
void OAISectionObject::setKey(const qint32 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISectionObject::is_key_Set() const{
    return m_key_isSet;
}

bool OAISectionObject::is_key_Valid() const{
    return m_key_isValid;
}

double OAISectionObject::getKeyConfidence() const {
    return m_key_confidence;
}
void OAISectionObject::setKeyConfidence(const double &key_confidence) {
    m_key_confidence = key_confidence;
    m_key_confidence_isSet = true;
}

bool OAISectionObject::is_key_confidence_Set() const{
    return m_key_confidence_isSet;
}

bool OAISectionObject::is_key_confidence_Valid() const{
    return m_key_confidence_isValid;
}

double OAISectionObject::getLoudness() const {
    return m_loudness;
}
void OAISectionObject::setLoudness(const double &loudness) {
    m_loudness = loudness;
    m_loudness_isSet = true;
}

bool OAISectionObject::is_loudness_Set() const{
    return m_loudness_isSet;
}

bool OAISectionObject::is_loudness_Valid() const{
    return m_loudness_isValid;
}

double OAISectionObject::getMode() const {
    return m_mode;
}
void OAISectionObject::setMode(const double &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAISectionObject::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAISectionObject::is_mode_Valid() const{
    return m_mode_isValid;
}

double OAISectionObject::getModeConfidence() const {
    return m_mode_confidence;
}
void OAISectionObject::setModeConfidence(const double &mode_confidence) {
    m_mode_confidence = mode_confidence;
    m_mode_confidence_isSet = true;
}

bool OAISectionObject::is_mode_confidence_Set() const{
    return m_mode_confidence_isSet;
}

bool OAISectionObject::is_mode_confidence_Valid() const{
    return m_mode_confidence_isValid;
}

double OAISectionObject::getStart() const {
    return m_start;
}
void OAISectionObject::setStart(const double &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAISectionObject::is_start_Set() const{
    return m_start_isSet;
}

bool OAISectionObject::is_start_Valid() const{
    return m_start_isValid;
}

double OAISectionObject::getTempo() const {
    return m_tempo;
}
void OAISectionObject::setTempo(const double &tempo) {
    m_tempo = tempo;
    m_tempo_isSet = true;
}

bool OAISectionObject::is_tempo_Set() const{
    return m_tempo_isSet;
}

bool OAISectionObject::is_tempo_Valid() const{
    return m_tempo_isValid;
}

double OAISectionObject::getTempoConfidence() const {
    return m_tempo_confidence;
}
void OAISectionObject::setTempoConfidence(const double &tempo_confidence) {
    m_tempo_confidence = tempo_confidence;
    m_tempo_confidence_isSet = true;
}

bool OAISectionObject::is_tempo_confidence_Set() const{
    return m_tempo_confidence_isSet;
}

bool OAISectionObject::is_tempo_confidence_Valid() const{
    return m_tempo_confidence_isValid;
}

qint32 OAISectionObject::getTimeSignature() const {
    return m_time_signature;
}
void OAISectionObject::setTimeSignature(const qint32 &time_signature) {
    m_time_signature = time_signature;
    m_time_signature_isSet = true;
}

bool OAISectionObject::is_time_signature_Set() const{
    return m_time_signature_isSet;
}

bool OAISectionObject::is_time_signature_Valid() const{
    return m_time_signature_isValid;
}

double OAISectionObject::getTimeSignatureConfidence() const {
    return m_time_signature_confidence;
}
void OAISectionObject::setTimeSignatureConfidence(const double &time_signature_confidence) {
    m_time_signature_confidence = time_signature_confidence;
    m_time_signature_confidence_isSet = true;
}

bool OAISectionObject::is_time_signature_confidence_Set() const{
    return m_time_signature_confidence_isSet;
}

bool OAISectionObject::is_time_signature_confidence_Valid() const{
    return m_time_signature_confidence_isValid;
}

bool OAISectionObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loudness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tempo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tempo_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_signature_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISectionObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
