/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerErrorReasons.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerErrorReasons::OAIPlayerErrorReasons(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerErrorReasons::OAIPlayerErrorReasons() {
    this->initializeModel();
}

OAIPlayerErrorReasons::~OAIPlayerErrorReasons() {}

void OAIPlayerErrorReasons::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPlayerErrorReasons::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPlayerErrorReasons::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NO_PREV_TRACK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::NO_PREV_TRACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_NEXT_TRACK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::NO_NEXT_TRACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_SPECIFIC_TRACK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::NO_SPECIFIC_TRACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALREADY_PAUSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::ALREADY_PAUSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_PAUSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::NOT_PAUSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_PLAYING_LOCALLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::NOT_PLAYING_LOCALLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_PLAYING_TRACK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::NOT_PLAYING_TRACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_PLAYING_CONTEXT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::NOT_PLAYING_CONTEXT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENDLESS_CONTEXT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::ENDLESS_CONTEXT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONTEXT_DISALLOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::CONTEXT_DISALLOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALREADY_PLAYING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::ALREADY_PLAYING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RATE_LIMITED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::RATE_LIMITED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOTE_CONTROL_DISALLOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::REMOTE_CONTROL_DISALLOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEVICE_NOT_CONTROLLABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::DEVICE_NOT_CONTROLLABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VOLUME_CONTROL_DISALLOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::VOLUME_CONTROL_DISALLOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_ACTIVE_DEVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::NO_ACTIVE_DEVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PREMIUM_REQUIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::PREMIUM_REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayerErrorReasons::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPlayerErrorReasons::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPlayerErrorReasons::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPlayerErrorReasons::NO_PREV_TRACK:
            val = "NO_PREV_TRACK";
            break;
        case eOAIPlayerErrorReasons::NO_NEXT_TRACK:
            val = "NO_NEXT_TRACK";
            break;
        case eOAIPlayerErrorReasons::NO_SPECIFIC_TRACK:
            val = "NO_SPECIFIC_TRACK";
            break;
        case eOAIPlayerErrorReasons::ALREADY_PAUSED:
            val = "ALREADY_PAUSED";
            break;
        case eOAIPlayerErrorReasons::NOT_PAUSED:
            val = "NOT_PAUSED";
            break;
        case eOAIPlayerErrorReasons::NOT_PLAYING_LOCALLY:
            val = "NOT_PLAYING_LOCALLY";
            break;
        case eOAIPlayerErrorReasons::NOT_PLAYING_TRACK:
            val = "NOT_PLAYING_TRACK";
            break;
        case eOAIPlayerErrorReasons::NOT_PLAYING_CONTEXT:
            val = "NOT_PLAYING_CONTEXT";
            break;
        case eOAIPlayerErrorReasons::ENDLESS_CONTEXT:
            val = "ENDLESS_CONTEXT";
            break;
        case eOAIPlayerErrorReasons::CONTEXT_DISALLOW:
            val = "CONTEXT_DISALLOW";
            break;
        case eOAIPlayerErrorReasons::ALREADY_PLAYING:
            val = "ALREADY_PLAYING";
            break;
        case eOAIPlayerErrorReasons::RATE_LIMITED:
            val = "RATE_LIMITED";
            break;
        case eOAIPlayerErrorReasons::REMOTE_CONTROL_DISALLOW:
            val = "REMOTE_CONTROL_DISALLOW";
            break;
        case eOAIPlayerErrorReasons::DEVICE_NOT_CONTROLLABLE:
            val = "DEVICE_NOT_CONTROLLABLE";
            break;
        case eOAIPlayerErrorReasons::VOLUME_CONTROL_DISALLOW:
            val = "VOLUME_CONTROL_DISALLOW";
            break;
        case eOAIPlayerErrorReasons::NO_ACTIVE_DEVICE:
            val = "NO_ACTIVE_DEVICE";
            break;
        case eOAIPlayerErrorReasons::PREMIUM_REQUIRED:
            val = "PREMIUM_REQUIRED";
            break;
        case eOAIPlayerErrorReasons::UNKNOWN:
            val = "UNKNOWN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPlayerErrorReasons::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPlayerErrorReasons::eOAIPlayerErrorReasons OAIPlayerErrorReasons::getValue() const {
    return m_value;
}

void OAIPlayerErrorReasons::setValue(const OAIPlayerErrorReasons::eOAIPlayerErrorReasons& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPlayerErrorReasons::isSet() const {
    
    return m_value_isSet;
}

bool OAIPlayerErrorReasons::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
