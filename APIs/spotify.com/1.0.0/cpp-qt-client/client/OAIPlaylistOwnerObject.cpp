/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylistOwnerObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylistOwnerObject::OAIPlaylistOwnerObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylistOwnerObject::OAIPlaylistOwnerObject() {
    this->initializeModel();
}

OAIPlaylistOwnerObject::~OAIPlaylistOwnerObject() {}

void OAIPlaylistOwnerObject::initializeModel() {

    m_external_urls_isSet = false;
    m_external_urls_isValid = false;

    m_followers_isSet = false;
    m_followers_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;
}

void OAIPlaylistOwnerObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylistOwnerObject::fromJsonObject(QJsonObject json) {

    m_external_urls_isValid = ::OpenAPI::fromJsonValue(m_external_urls, json[QString("external_urls")]);
    m_external_urls_isSet = !json[QString("external_urls")].isNull() && m_external_urls_isValid;

    m_followers_isValid = ::OpenAPI::fromJsonValue(m_followers, json[QString("followers")]);
    m_followers_isSet = !json[QString("followers")].isNull() && m_followers_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;
}

QString OAIPlaylistOwnerObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylistOwnerObject::asJsonObject() const {
    QJsonObject obj;
    if (m_external_urls.isSet()) {
        obj.insert(QString("external_urls"), ::OpenAPI::toJsonValue(m_external_urls));
    }
    if (m_followers.isSet()) {
        obj.insert(QString("followers"), ::OpenAPI::toJsonValue(m_followers));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    return obj;
}

OAIExternalUrlObject OAIPlaylistOwnerObject::getExternalUrls() const {
    return m_external_urls;
}
void OAIPlaylistOwnerObject::setExternalUrls(const OAIExternalUrlObject &external_urls) {
    m_external_urls = external_urls;
    m_external_urls_isSet = true;
}

bool OAIPlaylistOwnerObject::is_external_urls_Set() const{
    return m_external_urls_isSet;
}

bool OAIPlaylistOwnerObject::is_external_urls_Valid() const{
    return m_external_urls_isValid;
}

OAIFollowersObject OAIPlaylistOwnerObject::getFollowers() const {
    return m_followers;
}
void OAIPlaylistOwnerObject::setFollowers(const OAIFollowersObject &followers) {
    m_followers = followers;
    m_followers_isSet = true;
}

bool OAIPlaylistOwnerObject::is_followers_Set() const{
    return m_followers_isSet;
}

bool OAIPlaylistOwnerObject::is_followers_Valid() const{
    return m_followers_isValid;
}

QString OAIPlaylistOwnerObject::getHref() const {
    return m_href;
}
void OAIPlaylistOwnerObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIPlaylistOwnerObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAIPlaylistOwnerObject::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIPlaylistOwnerObject::getId() const {
    return m_id;
}
void OAIPlaylistOwnerObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlaylistOwnerObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlaylistOwnerObject::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlaylistOwnerObject::getType() const {
    return m_type;
}
void OAIPlaylistOwnerObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlaylistOwnerObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlaylistOwnerObject::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPlaylistOwnerObject::getUri() const {
    return m_uri;
}
void OAIPlaylistOwnerObject::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPlaylistOwnerObject::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPlaylistOwnerObject::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIPlaylistOwnerObject::getDisplayName() const {
    return m_display_name;
}
void OAIPlaylistOwnerObject::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPlaylistOwnerObject::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPlaylistOwnerObject::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIPlaylistOwnerObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylistOwnerObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
