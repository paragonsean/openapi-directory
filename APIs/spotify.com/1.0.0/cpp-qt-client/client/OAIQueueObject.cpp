/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueueObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueueObject::OAIQueueObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueueObject::OAIQueueObject() {
    this->initializeModel();
}

OAIQueueObject::~OAIQueueObject() {}

void OAIQueueObject::initializeModel() {

    m_currently_playing_isSet = false;
    m_currently_playing_isValid = false;

    m_queue_isSet = false;
    m_queue_isValid = false;
}

void OAIQueueObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueueObject::fromJsonObject(QJsonObject json) {

    m_currently_playing_isValid = ::OpenAPI::fromJsonValue(m_currently_playing, json[QString("currently_playing")]);
    m_currently_playing_isSet = !json[QString("currently_playing")].isNull() && m_currently_playing_isValid;

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("queue")]);
    m_queue_isSet = !json[QString("queue")].isNull() && m_queue_isValid;
}

QString OAIQueueObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueueObject::asJsonObject() const {
    QJsonObject obj;
    if (m_currently_playing.isSet()) {
        obj.insert(QString("currently_playing"), ::OpenAPI::toJsonValue(m_currently_playing));
    }
    if (m_queue.size() > 0) {
        obj.insert(QString("queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    return obj;
}

OAICurrentlyPlayingContextObject_item OAIQueueObject::getCurrentlyPlaying() const {
    return m_currently_playing;
}
void OAIQueueObject::setCurrentlyPlaying(const OAICurrentlyPlayingContextObject_item &currently_playing) {
    m_currently_playing = currently_playing;
    m_currently_playing_isSet = true;
}

bool OAIQueueObject::is_currently_playing_Set() const{
    return m_currently_playing_isSet;
}

bool OAIQueueObject::is_currently_playing_Valid() const{
    return m_currently_playing_isValid;
}

QList<OAIQueueObject_queue_inner> OAIQueueObject::getQueue() const {
    return m_queue;
}
void OAIQueueObject::setQueue(const QList<OAIQueueObject_queue_inner> &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAIQueueObject::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAIQueueObject::is_queue_Valid() const{
    return m_queue_isValid;
}

bool OAIQueueObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currently_playing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueueObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
