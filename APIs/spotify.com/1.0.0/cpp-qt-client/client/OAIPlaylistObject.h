/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlaylistObject.h
 *
 * 
 */

#ifndef OAIPlaylistObject_H
#define OAIPlaylistObject_H

#include <QJsonObject>

#include "OAIExternalUrlObject.h"
#include "OAIFollowersObject.h"
#include "OAIImageObject.h"
#include "OAIPagingPlaylistTrackObject.h"
#include "OAIPlaylistOwnerObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExternalUrlObject;
class OAIFollowersObject;
class OAIImageObject;
class OAIPlaylistOwnerObject;
class OAIPagingPlaylistTrackObject;

class OAIPlaylistObject : public OAIObject {
public:
    OAIPlaylistObject();
    OAIPlaylistObject(QString json);
    ~OAIPlaylistObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCollaborative() const;
    void setCollaborative(const bool &collaborative);
    bool is_collaborative_Set() const;
    bool is_collaborative_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIExternalUrlObject getExternalUrls() const;
    void setExternalUrls(const OAIExternalUrlObject &external_urls);
    bool is_external_urls_Set() const;
    bool is_external_urls_Valid() const;

    OAIFollowersObject getFollowers() const;
    void setFollowers(const OAIFollowersObject &followers);
    bool is_followers_Set() const;
    bool is_followers_Valid() const;

    QString getHref() const;
    void setHref(const QString &href);
    bool is_href_Set() const;
    bool is_href_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIImageObject> getImages() const;
    void setImages(const QList<OAIImageObject> &images);
    bool is_images_Set() const;
    bool is_images_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIPlaylistOwnerObject getOwner() const;
    void setOwner(const OAIPlaylistOwnerObject &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    bool isRPublic() const;
    void setRPublic(const bool &r_public);
    bool is_r_public_Set() const;
    bool is_r_public_Valid() const;

    QString getSnapshotId() const;
    void setSnapshotId(const QString &snapshot_id);
    bool is_snapshot_id_Set() const;
    bool is_snapshot_id_Valid() const;

    OAIPagingPlaylistTrackObject getTracks() const;
    void setTracks(const OAIPagingPlaylistTrackObject &tracks);
    bool is_tracks_Set() const;
    bool is_tracks_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUri() const;
    void setUri(const QString &uri);
    bool is_uri_Set() const;
    bool is_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_collaborative;
    bool m_collaborative_isSet;
    bool m_collaborative_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIExternalUrlObject m_external_urls;
    bool m_external_urls_isSet;
    bool m_external_urls_isValid;

    OAIFollowersObject m_followers;
    bool m_followers_isSet;
    bool m_followers_isValid;

    QString m_href;
    bool m_href_isSet;
    bool m_href_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIImageObject> m_images;
    bool m_images_isSet;
    bool m_images_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIPlaylistOwnerObject m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    bool m_r_public;
    bool m_r_public_isSet;
    bool m_r_public_isValid;

    QString m_snapshot_id;
    bool m_snapshot_id_isSet;
    bool m_snapshot_id_isValid;

    OAIPagingPlaylistTrackObject m_tracks;
    bool m_tracks_isSet;
    bool m_tracks_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_uri;
    bool m_uri_isSet;
    bool m_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlaylistObject)

#endif // OAIPlaylistObject_H
