/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageObject::OAIImageObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageObject::OAIImageObject() {
    this->initializeModel();
}

OAIImageObject::~OAIImageObject() {}

void OAIImageObject::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIImageObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageObject::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIImageObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageObject::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIImageObject::getHeight() const {
    return m_height;
}
void OAIImageObject::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIImageObject::is_height_Set() const{
    return m_height_isSet;
}

bool OAIImageObject::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIImageObject::getUrl() const {
    return m_url;
}
void OAIImageObject::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIImageObject::is_url_Set() const{
    return m_url_isSet;
}

bool OAIImageObject::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIImageObject::getWidth() const {
    return m_width;
}
void OAIImageObject::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIImageObject::is_width_Set() const{
    return m_width_isSet;
}

bool OAIImageObject::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIImageObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_height_isValid && m_url_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
