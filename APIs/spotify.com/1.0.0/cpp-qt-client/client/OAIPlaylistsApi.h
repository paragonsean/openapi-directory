/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPlaylistsApi_H
#define OAI_OAIPlaylistsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdd_tracks_to_playlist_request.h"
#include "OAIChange_playlist_details_request.h"
#include "OAICreate_playlist_request.h"
#include "OAIFollow_playlist_request.h"
#include "OAIGet_multiple_albums_401_response.h"
#include "OAIImageObject.h"
#include "OAIPagingFeaturedPlaylistObject.h"
#include "OAIPagingPlaylistObject.h"
#include "OAIPagingPlaylistTrackObject.h"
#include "OAIPlaylistObject.h"
#include "OAIRemove_tracks_playlist_request.h"
#include "OAIReorder_or_replace_playlists_tracks_200_response.h"
#include "OAIReorder_or_replace_playlists_tracks_request.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPlaylistsApi : public QObject {
    Q_OBJECT

public:
    OAIPlaylistsApi(const int timeOut = 0);
    ~OAIPlaylistsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  position qint32 [optional]
    * @param[in]  uris QString [optional]
    * @param[in]  oai_add_tracks_to_playlist_request OAIAdd_tracks_to_playlist_request [optional]
    */
    virtual void addTracksToPlaylist(const QString &playlist_id, const ::OpenAPI::OptionalParam<qint32> &position = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &uris = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAdd_tracks_to_playlist_request> &oai_add_tracks_to_playlist_request = ::OpenAPI::OptionalParam<OAIAdd_tracks_to_playlist_request>());

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  oai_change_playlist_details_request OAIChange_playlist_details_request [optional]
    */
    virtual void changePlaylistDetails(const QString &playlist_id, const ::OpenAPI::OptionalParam<OAIChange_playlist_details_request> &oai_change_playlist_details_request = ::OpenAPI::OptionalParam<OAIChange_playlist_details_request>());

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  ids QString [required]
    */
    virtual void checkIfUserFollowsPlaylist(const QString &playlist_id, const QString &ids);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_create_playlist_request OAICreate_playlist_request [optional]
    */
    virtual void createPlaylist(const QString &user_id, const ::OpenAPI::OptionalParam<OAICreate_playlist_request> &oai_create_playlist_request = ::OpenAPI::OptionalParam<OAICreate_playlist_request>());

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  oai_follow_playlist_request OAIFollow_playlist_request [optional]
    */
    virtual void followPlaylist(const QString &playlist_id, const ::OpenAPI::OptionalParam<OAIFollow_playlist_request> &oai_follow_playlist_request = ::OpenAPI::OptionalParam<OAIFollow_playlist_request>());

    /**
    * @param[in]  category_id QString [required]
    * @param[in]  country QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getACategoriesPlaylists(const QString &category_id, const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getAListOfCurrentUsersPlaylists(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  country QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  timestamp QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getFeaturedPlaylists(const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getListUsersPlaylists(const QString &user_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  market QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  additional_types QString [optional]
    */
    virtual void getPlaylist(const QString &playlist_id, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &additional_types = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  playlist_id QString [required]
    */
    virtual void getPlaylistCover(const QString &playlist_id);

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  market QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  additional_types QString [optional]
    */
    virtual void getPlaylistsTracks(const QString &playlist_id, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &additional_types = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  oai_remove_tracks_playlist_request OAIRemove_tracks_playlist_request [optional]
    */
    virtual void removeTracksPlaylist(const QString &playlist_id, const ::OpenAPI::OptionalParam<OAIRemove_tracks_playlist_request> &oai_remove_tracks_playlist_request = ::OpenAPI::OptionalParam<OAIRemove_tracks_playlist_request>());

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  uris QString [optional]
    * @param[in]  oai_reorder_or_replace_playlists_tracks_request OAIReorder_or_replace_playlists_tracks_request [optional]
    */
    virtual void reorderOrReplacePlaylistsTracks(const QString &playlist_id, const ::OpenAPI::OptionalParam<QString> &uris = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIReorder_or_replace_playlists_tracks_request> &oai_reorder_or_replace_playlists_tracks_request = ::OpenAPI::OptionalParam<OAIReorder_or_replace_playlists_tracks_request>());

    /**
    * @param[in]  playlist_id QString [required]
    */
    virtual void unfollowPlaylist(const QString &playlist_id);

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  body QByteArray [optional]
    */
    virtual void uploadCustomPlaylistCover(const QString &playlist_id, const ::OpenAPI::OptionalParam<QByteArray> &body = ::OpenAPI::OptionalParam<QByteArray>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addTracksToPlaylistCallback(OAIHttpRequestWorker *worker);
    void changePlaylistDetailsCallback(OAIHttpRequestWorker *worker);
    void checkIfUserFollowsPlaylistCallback(OAIHttpRequestWorker *worker);
    void createPlaylistCallback(OAIHttpRequestWorker *worker);
    void followPlaylistCallback(OAIHttpRequestWorker *worker);
    void getACategoriesPlaylistsCallback(OAIHttpRequestWorker *worker);
    void getAListOfCurrentUsersPlaylistsCallback(OAIHttpRequestWorker *worker);
    void getFeaturedPlaylistsCallback(OAIHttpRequestWorker *worker);
    void getListUsersPlaylistsCallback(OAIHttpRequestWorker *worker);
    void getPlaylistCallback(OAIHttpRequestWorker *worker);
    void getPlaylistCoverCallback(OAIHttpRequestWorker *worker);
    void getPlaylistsTracksCallback(OAIHttpRequestWorker *worker);
    void removeTracksPlaylistCallback(OAIHttpRequestWorker *worker);
    void reorderOrReplacePlaylistsTracksCallback(OAIHttpRequestWorker *worker);
    void unfollowPlaylistCallback(OAIHttpRequestWorker *worker);
    void uploadCustomPlaylistCoverCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addTracksToPlaylistSignal(OAIReorder_or_replace_playlists_tracks_200_response summary);
    void changePlaylistDetailsSignal();
    void checkIfUserFollowsPlaylistSignal(QList<bool> summary);
    void createPlaylistSignal(OAIPlaylistObject summary);
    void followPlaylistSignal();
    void getACategoriesPlaylistsSignal(OAIPagingFeaturedPlaylistObject summary);
    void getAListOfCurrentUsersPlaylistsSignal(OAIPagingPlaylistObject summary);
    void getFeaturedPlaylistsSignal(OAIPagingFeaturedPlaylistObject summary);
    void getListUsersPlaylistsSignal(OAIPagingPlaylistObject summary);
    void getPlaylistSignal(OAIPlaylistObject summary);
    void getPlaylistCoverSignal(QList<OAIImageObject> summary);
    void getPlaylistsTracksSignal(OAIPagingPlaylistTrackObject summary);
    void removeTracksPlaylistSignal(OAIReorder_or_replace_playlists_tracks_200_response summary);
    void reorderOrReplacePlaylistsTracksSignal(OAIReorder_or_replace_playlists_tracks_200_response summary);
    void unfollowPlaylistSignal();
    void uploadCustomPlaylistCoverSignal();


    void addTracksToPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIReorder_or_replace_playlists_tracks_200_response summary);
    void changePlaylistDetailsSignalFull(OAIHttpRequestWorker *worker);
    void checkIfUserFollowsPlaylistSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void createPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIPlaylistObject summary);
    void followPlaylistSignalFull(OAIHttpRequestWorker *worker);
    void getACategoriesPlaylistsSignalFull(OAIHttpRequestWorker *worker, OAIPagingFeaturedPlaylistObject summary);
    void getAListOfCurrentUsersPlaylistsSignalFull(OAIHttpRequestWorker *worker, OAIPagingPlaylistObject summary);
    void getFeaturedPlaylistsSignalFull(OAIHttpRequestWorker *worker, OAIPagingFeaturedPlaylistObject summary);
    void getListUsersPlaylistsSignalFull(OAIHttpRequestWorker *worker, OAIPagingPlaylistObject summary);
    void getPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIPlaylistObject summary);
    void getPlaylistCoverSignalFull(OAIHttpRequestWorker *worker, QList<OAIImageObject> summary);
    void getPlaylistsTracksSignalFull(OAIHttpRequestWorker *worker, OAIPagingPlaylistTrackObject summary);
    void removeTracksPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIReorder_or_replace_playlists_tracks_200_response summary);
    void reorderOrReplacePlaylistsTracksSignalFull(OAIHttpRequestWorker *worker, OAIReorder_or_replace_playlists_tracks_200_response summary);
    void unfollowPlaylistSignalFull(OAIHttpRequestWorker *worker);
    void uploadCustomPlaylistCoverSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addTracksToPlaylistSignalError() instead")
    void addTracksToPlaylistSignalE(OAIReorder_or_replace_playlists_tracks_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTracksToPlaylistSignalError(OAIReorder_or_replace_playlists_tracks_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePlaylistDetailsSignalError() instead")
    void changePlaylistDetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changePlaylistDetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkIfUserFollowsPlaylistSignalError() instead")
    void checkIfUserFollowsPlaylistSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserFollowsPlaylistSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPlaylistSignalError() instead")
    void createPlaylistSignalE(OAIPlaylistObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPlaylistSignalError(OAIPlaylistObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followPlaylistSignalError() instead")
    void followPlaylistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void followPlaylistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getACategoriesPlaylistsSignalError() instead")
    void getACategoriesPlaylistsSignalE(OAIPagingFeaturedPlaylistObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getACategoriesPlaylistsSignalError(OAIPagingFeaturedPlaylistObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAListOfCurrentUsersPlaylistsSignalError() instead")
    void getAListOfCurrentUsersPlaylistsSignalE(OAIPagingPlaylistObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAListOfCurrentUsersPlaylistsSignalError(OAIPagingPlaylistObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedPlaylistsSignalError() instead")
    void getFeaturedPlaylistsSignalE(OAIPagingFeaturedPlaylistObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedPlaylistsSignalError(OAIPagingFeaturedPlaylistObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListUsersPlaylistsSignalError() instead")
    void getListUsersPlaylistsSignalE(OAIPagingPlaylistObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getListUsersPlaylistsSignalError(OAIPagingPlaylistObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlaylistSignalError() instead")
    void getPlaylistSignalE(OAIPlaylistObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlaylistSignalError(OAIPlaylistObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlaylistCoverSignalError() instead")
    void getPlaylistCoverSignalE(QList<OAIImageObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlaylistCoverSignalError(QList<OAIImageObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlaylistsTracksSignalError() instead")
    void getPlaylistsTracksSignalE(OAIPagingPlaylistTrackObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlaylistsTracksSignalError(OAIPagingPlaylistTrackObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTracksPlaylistSignalError() instead")
    void removeTracksPlaylistSignalE(OAIReorder_or_replace_playlists_tracks_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeTracksPlaylistSignalError(OAIReorder_or_replace_playlists_tracks_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reorderOrReplacePlaylistsTracksSignalError() instead")
    void reorderOrReplacePlaylistsTracksSignalE(OAIReorder_or_replace_playlists_tracks_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reorderOrReplacePlaylistsTracksSignalError(OAIReorder_or_replace_playlists_tracks_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowPlaylistSignalError() instead")
    void unfollowPlaylistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowPlaylistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadCustomPlaylistCoverSignalError() instead")
    void uploadCustomPlaylistCoverSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uploadCustomPlaylistCoverSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addTracksToPlaylistSignalErrorFull() instead")
    void addTracksToPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTracksToPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePlaylistDetailsSignalErrorFull() instead")
    void changePlaylistDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePlaylistDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkIfUserFollowsPlaylistSignalErrorFull() instead")
    void checkIfUserFollowsPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserFollowsPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPlaylistSignalErrorFull() instead")
    void createPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followPlaylistSignalErrorFull() instead")
    void followPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getACategoriesPlaylistsSignalErrorFull() instead")
    void getACategoriesPlaylistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getACategoriesPlaylistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAListOfCurrentUsersPlaylistsSignalErrorFull() instead")
    void getAListOfCurrentUsersPlaylistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAListOfCurrentUsersPlaylistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedPlaylistsSignalErrorFull() instead")
    void getFeaturedPlaylistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedPlaylistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListUsersPlaylistsSignalErrorFull() instead")
    void getListUsersPlaylistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListUsersPlaylistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlaylistSignalErrorFull() instead")
    void getPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlaylistCoverSignalErrorFull() instead")
    void getPlaylistCoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlaylistCoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlaylistsTracksSignalErrorFull() instead")
    void getPlaylistsTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlaylistsTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTracksPlaylistSignalErrorFull() instead")
    void removeTracksPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeTracksPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reorderOrReplacePlaylistsTracksSignalErrorFull() instead")
    void reorderOrReplacePlaylistsTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reorderOrReplacePlaylistsTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowPlaylistSignalErrorFull() instead")
    void unfollowPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadCustomPlaylistCoverSignalErrorFull() instead")
    void uploadCustomPlaylistCoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadCustomPlaylistCoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
