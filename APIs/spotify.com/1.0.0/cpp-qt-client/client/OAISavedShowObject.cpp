/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavedShowObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavedShowObject::OAISavedShowObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavedShowObject::OAISavedShowObject() {
    this->initializeModel();
}

OAISavedShowObject::~OAISavedShowObject() {}

void OAISavedShowObject::initializeModel() {

    m_added_at_isSet = false;
    m_added_at_isValid = false;

    m_show_isSet = false;
    m_show_isValid = false;
}

void OAISavedShowObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavedShowObject::fromJsonObject(QJsonObject json) {

    m_added_at_isValid = ::OpenAPI::fromJsonValue(m_added_at, json[QString("added_at")]);
    m_added_at_isSet = !json[QString("added_at")].isNull() && m_added_at_isValid;

    m_show_isValid = ::OpenAPI::fromJsonValue(m_show, json[QString("show")]);
    m_show_isSet = !json[QString("show")].isNull() && m_show_isValid;
}

QString OAISavedShowObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavedShowObject::asJsonObject() const {
    QJsonObject obj;
    if (m_added_at_isSet) {
        obj.insert(QString("added_at"), ::OpenAPI::toJsonValue(m_added_at));
    }
    if (m_show.isSet()) {
        obj.insert(QString("show"), ::OpenAPI::toJsonValue(m_show));
    }
    return obj;
}

QDateTime OAISavedShowObject::getAddedAt() const {
    return m_added_at;
}
void OAISavedShowObject::setAddedAt(const QDateTime &added_at) {
    m_added_at = added_at;
    m_added_at_isSet = true;
}

bool OAISavedShowObject::is_added_at_Set() const{
    return m_added_at_isSet;
}

bool OAISavedShowObject::is_added_at_Valid() const{
    return m_added_at_isValid;
}

OAISimplifiedShowObject OAISavedShowObject::getShow() const {
    return m_show;
}
void OAISavedShowObject::setShow(const OAISimplifiedShowObject &show) {
    m_show = show;
    m_show_isSet = true;
}

bool OAISavedShowObject::is_show_Set() const{
    return m_show_isSet;
}

bool OAISavedShowObject::is_show_Valid() const{
    return m_show_isValid;
}

bool OAISavedShowObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavedShowObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
