/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagingSimplifiedChapterObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagingSimplifiedChapterObject::OAIPagingSimplifiedChapterObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagingSimplifiedChapterObject::OAIPagingSimplifiedChapterObject() {
    this->initializeModel();
}

OAIPagingSimplifiedChapterObject::~OAIPagingSimplifiedChapterObject() {}

void OAIPagingSimplifiedChapterObject::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_previous_isSet = false;
    m_previous_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;
}

void OAIPagingSimplifiedChapterObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagingSimplifiedChapterObject::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_previous_isValid = ::OpenAPI::fromJsonValue(m_previous, json[QString("previous")]);
    m_previous_isSet = !json[QString("previous")].isNull() && m_previous_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;
}

QString OAIPagingSimplifiedChapterObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagingSimplifiedChapterObject::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_previous_isSet) {
        obj.insert(QString("previous"), ::OpenAPI::toJsonValue(m_previous));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    return obj;
}

QString OAIPagingSimplifiedChapterObject::getHref() const {
    return m_href;
}
void OAIPagingSimplifiedChapterObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIPagingSimplifiedChapterObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAIPagingSimplifiedChapterObject::is_href_Valid() const{
    return m_href_isValid;
}

qint32 OAIPagingSimplifiedChapterObject::getLimit() const {
    return m_limit;
}
void OAIPagingSimplifiedChapterObject::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIPagingSimplifiedChapterObject::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIPagingSimplifiedChapterObject::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIPagingSimplifiedChapterObject::getNext() const {
    return m_next;
}
void OAIPagingSimplifiedChapterObject::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAIPagingSimplifiedChapterObject::is_next_Set() const{
    return m_next_isSet;
}

bool OAIPagingSimplifiedChapterObject::is_next_Valid() const{
    return m_next_isValid;
}

qint32 OAIPagingSimplifiedChapterObject::getOffset() const {
    return m_offset;
}
void OAIPagingSimplifiedChapterObject::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIPagingSimplifiedChapterObject::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIPagingSimplifiedChapterObject::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIPagingSimplifiedChapterObject::getPrevious() const {
    return m_previous;
}
void OAIPagingSimplifiedChapterObject::setPrevious(const QString &previous) {
    m_previous = previous;
    m_previous_isSet = true;
}

bool OAIPagingSimplifiedChapterObject::is_previous_Set() const{
    return m_previous_isSet;
}

bool OAIPagingSimplifiedChapterObject::is_previous_Valid() const{
    return m_previous_isValid;
}

qint32 OAIPagingSimplifiedChapterObject::getTotal() const {
    return m_total;
}
void OAIPagingSimplifiedChapterObject::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPagingSimplifiedChapterObject::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPagingSimplifiedChapterObject::is_total_Valid() const{
    return m_total_isValid;
}

QList<OAISimplifiedChapterObject> OAIPagingSimplifiedChapterObject::getItems() const {
    return m_items;
}
void OAIPagingSimplifiedChapterObject::setItems(const QList<OAISimplifiedChapterObject> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIPagingSimplifiedChapterObject::is_items_Set() const{
    return m_items_isSet;
}

bool OAIPagingSimplifiedChapterObject::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIPagingSimplifiedChapterObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagingSimplifiedChapterObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && m_limit_isValid && m_next_isValid && m_offset_isValid && m_previous_isValid && m_total_isValid && m_items_isValid && true;
}

} // namespace OpenAPI
