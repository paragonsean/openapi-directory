/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPlayerApi_H
#define OAI_OAIPlayerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICurrentlyPlayingContextObject.h"
#include "OAICursorPagingPlayHistoryObject.h"
#include "OAIGet_a_users_available_devices_200_response.h"
#include "OAIGet_multiple_albums_401_response.h"
#include "OAIQueueObject.h"
#include "OAIStart_a_users_playback_request.h"
#include "OAITransfer_a_users_playback_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPlayerApi : public QObject {
    Q_OBJECT

public:
    OAIPlayerApi(const int timeOut = 0);
    ~OAIPlayerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  uri QString [required]
    * @param[in]  device_id QString [optional]
    */
    virtual void addToQueue(const QString &uri, const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>());


    virtual void getAUsersAvailableDevices();

    /**
    * @param[in]  market QString [optional]
    * @param[in]  additional_types QString [optional]
    */
    virtual void getInformationAboutTheUsersCurrentPlayback(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &additional_types = ::OpenAPI::OptionalParam<QString>());


    virtual void getQueue();

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  after qint32 [optional]
    * @param[in]  before qint32 [optional]
    */
    virtual void getRecentlyPlayed(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &after = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &before = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  market QString [optional]
    * @param[in]  additional_types QString [optional]
    */
    virtual void getTheUsersCurrentlyPlayingTrack(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &additional_types = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_id QString [optional]
    */
    virtual void pauseAUsersPlayback(const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  position_ms qint32 [required]
    * @param[in]  device_id QString [optional]
    */
    virtual void seekToPositionInCurrentlyPlayingTrack(const qint32 &position_ms, const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  state QString [required]
    * @param[in]  device_id QString [optional]
    */
    virtual void setRepeatModeOnUsersPlayback(const QString &state, const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  volume_percent qint32 [required]
    * @param[in]  device_id QString [optional]
    */
    virtual void setVolumeForUsersPlayback(const qint32 &volume_percent, const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_id QString [optional]
    */
    virtual void skipUsersPlaybackToNextTrack(const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_id QString [optional]
    */
    virtual void skipUsersPlaybackToPreviousTrack(const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_id QString [optional]
    * @param[in]  oai_start_a_users_playback_request OAIStart_a_users_playback_request [optional]
    */
    virtual void startAUsersPlayback(const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStart_a_users_playback_request> &oai_start_a_users_playback_request = ::OpenAPI::OptionalParam<OAIStart_a_users_playback_request>());

    /**
    * @param[in]  state bool [required]
    * @param[in]  device_id QString [optional]
    */
    virtual void toggleShuffleForUsersPlayback(const bool &state, const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_transfer_a_users_playback_request OAITransfer_a_users_playback_request [optional]
    */
    virtual void transferAUsersPlayback(const ::OpenAPI::OptionalParam<OAITransfer_a_users_playback_request> &oai_transfer_a_users_playback_request = ::OpenAPI::OptionalParam<OAITransfer_a_users_playback_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addToQueueCallback(OAIHttpRequestWorker *worker);
    void getAUsersAvailableDevicesCallback(OAIHttpRequestWorker *worker);
    void getInformationAboutTheUsersCurrentPlaybackCallback(OAIHttpRequestWorker *worker);
    void getQueueCallback(OAIHttpRequestWorker *worker);
    void getRecentlyPlayedCallback(OAIHttpRequestWorker *worker);
    void getTheUsersCurrentlyPlayingTrackCallback(OAIHttpRequestWorker *worker);
    void pauseAUsersPlaybackCallback(OAIHttpRequestWorker *worker);
    void seekToPositionInCurrentlyPlayingTrackCallback(OAIHttpRequestWorker *worker);
    void setRepeatModeOnUsersPlaybackCallback(OAIHttpRequestWorker *worker);
    void setVolumeForUsersPlaybackCallback(OAIHttpRequestWorker *worker);
    void skipUsersPlaybackToNextTrackCallback(OAIHttpRequestWorker *worker);
    void skipUsersPlaybackToPreviousTrackCallback(OAIHttpRequestWorker *worker);
    void startAUsersPlaybackCallback(OAIHttpRequestWorker *worker);
    void toggleShuffleForUsersPlaybackCallback(OAIHttpRequestWorker *worker);
    void transferAUsersPlaybackCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addToQueueSignal();
    void getAUsersAvailableDevicesSignal(OAIGet_a_users_available_devices_200_response summary);
    void getInformationAboutTheUsersCurrentPlaybackSignal(OAICurrentlyPlayingContextObject summary);
    void getQueueSignal(OAIQueueObject summary);
    void getRecentlyPlayedSignal(OAICursorPagingPlayHistoryObject summary);
    void getTheUsersCurrentlyPlayingTrackSignal(OAICurrentlyPlayingContextObject summary);
    void pauseAUsersPlaybackSignal();
    void seekToPositionInCurrentlyPlayingTrackSignal();
    void setRepeatModeOnUsersPlaybackSignal();
    void setVolumeForUsersPlaybackSignal();
    void skipUsersPlaybackToNextTrackSignal();
    void skipUsersPlaybackToPreviousTrackSignal();
    void startAUsersPlaybackSignal();
    void toggleShuffleForUsersPlaybackSignal();
    void transferAUsersPlaybackSignal();


    void addToQueueSignalFull(OAIHttpRequestWorker *worker);
    void getAUsersAvailableDevicesSignalFull(OAIHttpRequestWorker *worker, OAIGet_a_users_available_devices_200_response summary);
    void getInformationAboutTheUsersCurrentPlaybackSignalFull(OAIHttpRequestWorker *worker, OAICurrentlyPlayingContextObject summary);
    void getQueueSignalFull(OAIHttpRequestWorker *worker, OAIQueueObject summary);
    void getRecentlyPlayedSignalFull(OAIHttpRequestWorker *worker, OAICursorPagingPlayHistoryObject summary);
    void getTheUsersCurrentlyPlayingTrackSignalFull(OAIHttpRequestWorker *worker, OAICurrentlyPlayingContextObject summary);
    void pauseAUsersPlaybackSignalFull(OAIHttpRequestWorker *worker);
    void seekToPositionInCurrentlyPlayingTrackSignalFull(OAIHttpRequestWorker *worker);
    void setRepeatModeOnUsersPlaybackSignalFull(OAIHttpRequestWorker *worker);
    void setVolumeForUsersPlaybackSignalFull(OAIHttpRequestWorker *worker);
    void skipUsersPlaybackToNextTrackSignalFull(OAIHttpRequestWorker *worker);
    void skipUsersPlaybackToPreviousTrackSignalFull(OAIHttpRequestWorker *worker);
    void startAUsersPlaybackSignalFull(OAIHttpRequestWorker *worker);
    void toggleShuffleForUsersPlaybackSignalFull(OAIHttpRequestWorker *worker);
    void transferAUsersPlaybackSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addToQueueSignalError() instead")
    void addToQueueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addToQueueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAUsersAvailableDevicesSignalError() instead")
    void getAUsersAvailableDevicesSignalE(OAIGet_a_users_available_devices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAUsersAvailableDevicesSignalError(OAIGet_a_users_available_devices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInformationAboutTheUsersCurrentPlaybackSignalError() instead")
    void getInformationAboutTheUsersCurrentPlaybackSignalE(OAICurrentlyPlayingContextObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInformationAboutTheUsersCurrentPlaybackSignalError(OAICurrentlyPlayingContextObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueueSignalError() instead")
    void getQueueSignalE(OAIQueueObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueueSignalError(OAIQueueObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentlyPlayedSignalError() instead")
    void getRecentlyPlayedSignalE(OAICursorPagingPlayHistoryObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentlyPlayedSignalError(OAICursorPagingPlayHistoryObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTheUsersCurrentlyPlayingTrackSignalError() instead")
    void getTheUsersCurrentlyPlayingTrackSignalE(OAICurrentlyPlayingContextObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTheUsersCurrentlyPlayingTrackSignalError(OAICurrentlyPlayingContextObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pauseAUsersPlaybackSignalError() instead")
    void pauseAUsersPlaybackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pauseAUsersPlaybackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seekToPositionInCurrentlyPlayingTrackSignalError() instead")
    void seekToPositionInCurrentlyPlayingTrackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void seekToPositionInCurrentlyPlayingTrackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRepeatModeOnUsersPlaybackSignalError() instead")
    void setRepeatModeOnUsersPlaybackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRepeatModeOnUsersPlaybackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setVolumeForUsersPlaybackSignalError() instead")
    void setVolumeForUsersPlaybackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setVolumeForUsersPlaybackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skipUsersPlaybackToNextTrackSignalError() instead")
    void skipUsersPlaybackToNextTrackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void skipUsersPlaybackToNextTrackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skipUsersPlaybackToPreviousTrackSignalError() instead")
    void skipUsersPlaybackToPreviousTrackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void skipUsersPlaybackToPreviousTrackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAUsersPlaybackSignalError() instead")
    void startAUsersPlaybackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startAUsersPlaybackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use toggleShuffleForUsersPlaybackSignalError() instead")
    void toggleShuffleForUsersPlaybackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void toggleShuffleForUsersPlaybackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferAUsersPlaybackSignalError() instead")
    void transferAUsersPlaybackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transferAUsersPlaybackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addToQueueSignalErrorFull() instead")
    void addToQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addToQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAUsersAvailableDevicesSignalErrorFull() instead")
    void getAUsersAvailableDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAUsersAvailableDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInformationAboutTheUsersCurrentPlaybackSignalErrorFull() instead")
    void getInformationAboutTheUsersCurrentPlaybackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInformationAboutTheUsersCurrentPlaybackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueueSignalErrorFull() instead")
    void getQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentlyPlayedSignalErrorFull() instead")
    void getRecentlyPlayedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentlyPlayedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTheUsersCurrentlyPlayingTrackSignalErrorFull() instead")
    void getTheUsersCurrentlyPlayingTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTheUsersCurrentlyPlayingTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pauseAUsersPlaybackSignalErrorFull() instead")
    void pauseAUsersPlaybackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pauseAUsersPlaybackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seekToPositionInCurrentlyPlayingTrackSignalErrorFull() instead")
    void seekToPositionInCurrentlyPlayingTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void seekToPositionInCurrentlyPlayingTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRepeatModeOnUsersPlaybackSignalErrorFull() instead")
    void setRepeatModeOnUsersPlaybackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRepeatModeOnUsersPlaybackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setVolumeForUsersPlaybackSignalErrorFull() instead")
    void setVolumeForUsersPlaybackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setVolumeForUsersPlaybackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skipUsersPlaybackToNextTrackSignalErrorFull() instead")
    void skipUsersPlaybackToNextTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skipUsersPlaybackToNextTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skipUsersPlaybackToPreviousTrackSignalErrorFull() instead")
    void skipUsersPlaybackToPreviousTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skipUsersPlaybackToPreviousTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAUsersPlaybackSignalErrorFull() instead")
    void startAUsersPlaybackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startAUsersPlaybackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use toggleShuffleForUsersPlaybackSignalErrorFull() instead")
    void toggleShuffleForUsersPlaybackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void toggleShuffleForUsersPlaybackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferAUsersPlaybackSignalErrorFull() instead")
    void transferAUsersPlaybackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferAUsersPlaybackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
