/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReorder_or_replace_playlists_tracks_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReorder_or_replace_playlists_tracks_200_response::OAIReorder_or_replace_playlists_tracks_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReorder_or_replace_playlists_tracks_200_response::OAIReorder_or_replace_playlists_tracks_200_response() {
    this->initializeModel();
}

OAIReorder_or_replace_playlists_tracks_200_response::~OAIReorder_or_replace_playlists_tracks_200_response() {}

void OAIReorder_or_replace_playlists_tracks_200_response::initializeModel() {

    m_snapshot_id_isSet = false;
    m_snapshot_id_isValid = false;
}

void OAIReorder_or_replace_playlists_tracks_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReorder_or_replace_playlists_tracks_200_response::fromJsonObject(QJsonObject json) {

    m_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_id, json[QString("snapshot_id")]);
    m_snapshot_id_isSet = !json[QString("snapshot_id")].isNull() && m_snapshot_id_isValid;
}

QString OAIReorder_or_replace_playlists_tracks_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReorder_or_replace_playlists_tracks_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_snapshot_id_isSet) {
        obj.insert(QString("snapshot_id"), ::OpenAPI::toJsonValue(m_snapshot_id));
    }
    return obj;
}

QString OAIReorder_or_replace_playlists_tracks_200_response::getSnapshotId() const {
    return m_snapshot_id;
}
void OAIReorder_or_replace_playlists_tracks_200_response::setSnapshotId(const QString &snapshot_id) {
    m_snapshot_id = snapshot_id;
    m_snapshot_id_isSet = true;
}

bool OAIReorder_or_replace_playlists_tracks_200_response::is_snapshot_id_Set() const{
    return m_snapshot_id_isSet;
}

bool OAIReorder_or_replace_playlists_tracks_200_response::is_snapshot_id_Valid() const{
    return m_snapshot_id_isValid;
}

bool OAIReorder_or_replace_playlists_tracks_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReorder_or_replace_playlists_tracks_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
