/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_200_response::OAISearch_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_200_response::OAISearch_200_response() {
    this->initializeModel();
}

OAISearch_200_response::~OAISearch_200_response() {}

void OAISearch_200_response::initializeModel() {

    m_albums_isSet = false;
    m_albums_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_audiobooks_isSet = false;
    m_audiobooks_isValid = false;

    m_episodes_isSet = false;
    m_episodes_isValid = false;

    m_playlists_isSet = false;
    m_playlists_isValid = false;

    m_shows_isSet = false;
    m_shows_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;
}

void OAISearch_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_200_response::fromJsonObject(QJsonObject json) {

    m_albums_isValid = ::OpenAPI::fromJsonValue(m_albums, json[QString("albums")]);
    m_albums_isSet = !json[QString("albums")].isNull() && m_albums_isValid;

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_audiobooks_isValid = ::OpenAPI::fromJsonValue(m_audiobooks, json[QString("audiobooks")]);
    m_audiobooks_isSet = !json[QString("audiobooks")].isNull() && m_audiobooks_isValid;

    m_episodes_isValid = ::OpenAPI::fromJsonValue(m_episodes, json[QString("episodes")]);
    m_episodes_isSet = !json[QString("episodes")].isNull() && m_episodes_isValid;

    m_playlists_isValid = ::OpenAPI::fromJsonValue(m_playlists, json[QString("playlists")]);
    m_playlists_isSet = !json[QString("playlists")].isNull() && m_playlists_isValid;

    m_shows_isValid = ::OpenAPI::fromJsonValue(m_shows, json[QString("shows")]);
    m_shows_isSet = !json[QString("shows")].isNull() && m_shows_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;
}

QString OAISearch_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_albums.isSet()) {
        obj.insert(QString("albums"), ::OpenAPI::toJsonValue(m_albums));
    }
    if (m_artists.isSet()) {
        obj.insert(QString("artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    if (m_audiobooks.isSet()) {
        obj.insert(QString("audiobooks"), ::OpenAPI::toJsonValue(m_audiobooks));
    }
    if (m_episodes.isSet()) {
        obj.insert(QString("episodes"), ::OpenAPI::toJsonValue(m_episodes));
    }
    if (m_playlists.isSet()) {
        obj.insert(QString("playlists"), ::OpenAPI::toJsonValue(m_playlists));
    }
    if (m_shows.isSet()) {
        obj.insert(QString("shows"), ::OpenAPI::toJsonValue(m_shows));
    }
    if (m_tracks.isSet()) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    return obj;
}

OAIPagingSimplifiedAlbumObject OAISearch_200_response::getAlbums() const {
    return m_albums;
}
void OAISearch_200_response::setAlbums(const OAIPagingSimplifiedAlbumObject &albums) {
    m_albums = albums;
    m_albums_isSet = true;
}

bool OAISearch_200_response::is_albums_Set() const{
    return m_albums_isSet;
}

bool OAISearch_200_response::is_albums_Valid() const{
    return m_albums_isValid;
}

OAIPagingArtistObject OAISearch_200_response::getArtists() const {
    return m_artists;
}
void OAISearch_200_response::setArtists(const OAIPagingArtistObject &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAISearch_200_response::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAISearch_200_response::is_artists_Valid() const{
    return m_artists_isValid;
}

OAIPagingSimplifiedAudiobookObject OAISearch_200_response::getAudiobooks() const {
    return m_audiobooks;
}
void OAISearch_200_response::setAudiobooks(const OAIPagingSimplifiedAudiobookObject &audiobooks) {
    m_audiobooks = audiobooks;
    m_audiobooks_isSet = true;
}

bool OAISearch_200_response::is_audiobooks_Set() const{
    return m_audiobooks_isSet;
}

bool OAISearch_200_response::is_audiobooks_Valid() const{
    return m_audiobooks_isValid;
}

OAIPagingSimplifiedEpisodeObject OAISearch_200_response::getEpisodes() const {
    return m_episodes;
}
void OAISearch_200_response::setEpisodes(const OAIPagingSimplifiedEpisodeObject &episodes) {
    m_episodes = episodes;
    m_episodes_isSet = true;
}

bool OAISearch_200_response::is_episodes_Set() const{
    return m_episodes_isSet;
}

bool OAISearch_200_response::is_episodes_Valid() const{
    return m_episodes_isValid;
}

OAIPagingPlaylistObject OAISearch_200_response::getPlaylists() const {
    return m_playlists;
}
void OAISearch_200_response::setPlaylists(const OAIPagingPlaylistObject &playlists) {
    m_playlists = playlists;
    m_playlists_isSet = true;
}

bool OAISearch_200_response::is_playlists_Set() const{
    return m_playlists_isSet;
}

bool OAISearch_200_response::is_playlists_Valid() const{
    return m_playlists_isValid;
}

OAIPagingSimplifiedShowObject OAISearch_200_response::getShows() const {
    return m_shows;
}
void OAISearch_200_response::setShows(const OAIPagingSimplifiedShowObject &shows) {
    m_shows = shows;
    m_shows_isSet = true;
}

bool OAISearch_200_response::is_shows_Set() const{
    return m_shows_isSet;
}

bool OAISearch_200_response::is_shows_Valid() const{
    return m_shows_isValid;
}

OAIPagingTrackObject OAISearch_200_response::getTracks() const {
    return m_tracks;
}
void OAISearch_200_response::setTracks(const OAIPagingTrackObject &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAISearch_200_response::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAISearch_200_response::is_tracks_Valid() const{
    return m_tracks_isValid;
}

bool OAISearch_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_albums.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audiobooks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_episodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlists.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
