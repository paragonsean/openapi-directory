/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerErrorObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerErrorObject::OAIPlayerErrorObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerErrorObject::OAIPlayerErrorObject() {
    this->initializeModel();
}

OAIPlayerErrorObject::~OAIPlayerErrorObject() {}

void OAIPlayerErrorObject::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPlayerErrorObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerErrorObject::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPlayerErrorObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerErrorObject::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_reason.isSet()) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPlayerErrorObject::getMessage() const {
    return m_message;
}
void OAIPlayerErrorObject::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPlayerErrorObject::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPlayerErrorObject::is_message_Valid() const{
    return m_message_isValid;
}

OAIPlayerErrorReasons OAIPlayerErrorObject::getReason() const {
    return m_reason;
}
void OAIPlayerErrorObject::setReason(const OAIPlayerErrorReasons &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIPlayerErrorObject::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIPlayerErrorObject::is_reason_Valid() const{
    return m_reason_isValid;
}

qint32 OAIPlayerErrorObject::getStatus() const {
    return m_status;
}
void OAIPlayerErrorObject::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPlayerErrorObject::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPlayerErrorObject::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPlayerErrorObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerErrorObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
