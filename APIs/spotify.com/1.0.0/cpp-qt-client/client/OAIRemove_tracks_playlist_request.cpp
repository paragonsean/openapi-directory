/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemove_tracks_playlist_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemove_tracks_playlist_request::OAIRemove_tracks_playlist_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemove_tracks_playlist_request::OAIRemove_tracks_playlist_request() {
    this->initializeModel();
}

OAIRemove_tracks_playlist_request::~OAIRemove_tracks_playlist_request() {}

void OAIRemove_tracks_playlist_request::initializeModel() {

    m_snapshot_id_isSet = false;
    m_snapshot_id_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;
}

void OAIRemove_tracks_playlist_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemove_tracks_playlist_request::fromJsonObject(QJsonObject json) {

    m_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_id, json[QString("snapshot_id")]);
    m_snapshot_id_isSet = !json[QString("snapshot_id")].isNull() && m_snapshot_id_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;
}

QString OAIRemove_tracks_playlist_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemove_tracks_playlist_request::asJsonObject() const {
    QJsonObject obj;
    if (m_snapshot_id_isSet) {
        obj.insert(QString("snapshot_id"), ::OpenAPI::toJsonValue(m_snapshot_id));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    return obj;
}

QString OAIRemove_tracks_playlist_request::getSnapshotId() const {
    return m_snapshot_id;
}
void OAIRemove_tracks_playlist_request::setSnapshotId(const QString &snapshot_id) {
    m_snapshot_id = snapshot_id;
    m_snapshot_id_isSet = true;
}

bool OAIRemove_tracks_playlist_request::is_snapshot_id_Set() const{
    return m_snapshot_id_isSet;
}

bool OAIRemove_tracks_playlist_request::is_snapshot_id_Valid() const{
    return m_snapshot_id_isValid;
}

QList<OAIRemove_tracks_playlist_request_tracks_inner> OAIRemove_tracks_playlist_request::getTracks() const {
    return m_tracks;
}
void OAIRemove_tracks_playlist_request::setTracks(const QList<OAIRemove_tracks_playlist_request_tracks_inner> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIRemove_tracks_playlist_request::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIRemove_tracks_playlist_request::is_tracks_Valid() const{
    return m_tracks_isValid;
}

bool OAIRemove_tracks_playlist_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemove_tracks_playlist_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tracks_isValid && true;
}

} // namespace OpenAPI
