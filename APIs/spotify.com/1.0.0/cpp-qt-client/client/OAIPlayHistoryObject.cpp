/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayHistoryObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayHistoryObject::OAIPlayHistoryObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayHistoryObject::OAIPlayHistoryObject() {
    this->initializeModel();
}

OAIPlayHistoryObject::~OAIPlayHistoryObject() {}

void OAIPlayHistoryObject::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_played_at_isSet = false;
    m_played_at_isValid = false;

    m_track_isSet = false;
    m_track_isValid = false;
}

void OAIPlayHistoryObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayHistoryObject::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_played_at_isValid = ::OpenAPI::fromJsonValue(m_played_at, json[QString("played_at")]);
    m_played_at_isSet = !json[QString("played_at")].isNull() && m_played_at_isValid;

    m_track_isValid = ::OpenAPI::fromJsonValue(m_track, json[QString("track")]);
    m_track_isSet = !json[QString("track")].isNull() && m_track_isValid;
}

QString OAIPlayHistoryObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayHistoryObject::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_played_at_isSet) {
        obj.insert(QString("played_at"), ::OpenAPI::toJsonValue(m_played_at));
    }
    if (m_track.isSet()) {
        obj.insert(QString("track"), ::OpenAPI::toJsonValue(m_track));
    }
    return obj;
}

OAIContextObject OAIPlayHistoryObject::getContext() const {
    return m_context;
}
void OAIPlayHistoryObject::setContext(const OAIContextObject &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIPlayHistoryObject::is_context_Set() const{
    return m_context_isSet;
}

bool OAIPlayHistoryObject::is_context_Valid() const{
    return m_context_isValid;
}

QDateTime OAIPlayHistoryObject::getPlayedAt() const {
    return m_played_at;
}
void OAIPlayHistoryObject::setPlayedAt(const QDateTime &played_at) {
    m_played_at = played_at;
    m_played_at_isSet = true;
}

bool OAIPlayHistoryObject::is_played_at_Set() const{
    return m_played_at_isSet;
}

bool OAIPlayHistoryObject::is_played_at_Valid() const{
    return m_played_at_isValid;
}

OAITrackObject OAIPlayHistoryObject::getTrack() const {
    return m_track;
}
void OAIPlayHistoryObject::setTrack(const OAITrackObject &track) {
    m_track = track;
    m_track_isSet = true;
}

bool OAIPlayHistoryObject::is_track_Set() const{
    return m_track_isSet;
}

bool OAIPlayHistoryObject::is_track_Valid() const{
    return m_track_isValid;
}

bool OAIPlayHistoryObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_played_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayHistoryObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
