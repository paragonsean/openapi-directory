/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecommendationSeedObject.h
 *
 * 
 */

#ifndef OAIRecommendationSeedObject_H
#define OAIRecommendationSeedObject_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRecommendationSeedObject : public OAIObject {
public:
    OAIRecommendationSeedObject();
    OAIRecommendationSeedObject(QString json);
    ~OAIRecommendationSeedObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAfterFilteringSize() const;
    void setAfterFilteringSize(const qint32 &after_filtering_size);
    bool is_after_filtering_size_Set() const;
    bool is_after_filtering_size_Valid() const;

    qint32 getAfterRelinkingSize() const;
    void setAfterRelinkingSize(const qint32 &after_relinking_size);
    bool is_after_relinking_size_Set() const;
    bool is_after_relinking_size_Valid() const;

    QString getHref() const;
    void setHref(const QString &href);
    bool is_href_Set() const;
    bool is_href_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getInitialPoolSize() const;
    void setInitialPoolSize(const qint32 &initial_pool_size);
    bool is_initial_pool_size_Set() const;
    bool is_initial_pool_size_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_after_filtering_size;
    bool m_after_filtering_size_isSet;
    bool m_after_filtering_size_isValid;

    qint32 m_after_relinking_size;
    bool m_after_relinking_size_isSet;
    bool m_after_relinking_size_isValid;

    QString m_href;
    bool m_href_isSet;
    bool m_href_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_initial_pool_size;
    bool m_initial_pool_size_isSet;
    bool m_initial_pool_size_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecommendationSeedObject)

#endif // OAIRecommendationSeedObject_H
