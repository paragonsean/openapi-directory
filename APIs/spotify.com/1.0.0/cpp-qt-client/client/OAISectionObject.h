/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISectionObject.h
 *
 * 
 */

#ifndef OAISectionObject_H
#define OAISectionObject_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISectionObject : public OAIObject {
public:
    OAISectionObject();
    OAISectionObject(QString json);
    ~OAISectionObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getConfidence() const;
    void setConfidence(const double &confidence);
    bool is_confidence_Set() const;
    bool is_confidence_Valid() const;

    double getDuration() const;
    void setDuration(const double &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    qint32 getKey() const;
    void setKey(const qint32 &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    double getKeyConfidence() const;
    void setKeyConfidence(const double &key_confidence);
    bool is_key_confidence_Set() const;
    bool is_key_confidence_Valid() const;

    double getLoudness() const;
    void setLoudness(const double &loudness);
    bool is_loudness_Set() const;
    bool is_loudness_Valid() const;

    double getMode() const;
    void setMode(const double &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    double getModeConfidence() const;
    void setModeConfidence(const double &mode_confidence);
    bool is_mode_confidence_Set() const;
    bool is_mode_confidence_Valid() const;

    double getStart() const;
    void setStart(const double &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    double getTempo() const;
    void setTempo(const double &tempo);
    bool is_tempo_Set() const;
    bool is_tempo_Valid() const;

    double getTempoConfidence() const;
    void setTempoConfidence(const double &tempo_confidence);
    bool is_tempo_confidence_Set() const;
    bool is_tempo_confidence_Valid() const;

    qint32 getTimeSignature() const;
    void setTimeSignature(const qint32 &time_signature);
    bool is_time_signature_Set() const;
    bool is_time_signature_Valid() const;

    double getTimeSignatureConfidence() const;
    void setTimeSignatureConfidence(const double &time_signature_confidence);
    bool is_time_signature_confidence_Set() const;
    bool is_time_signature_confidence_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_confidence;
    bool m_confidence_isSet;
    bool m_confidence_isValid;

    double m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    qint32 m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    double m_key_confidence;
    bool m_key_confidence_isSet;
    bool m_key_confidence_isValid;

    double m_loudness;
    bool m_loudness_isSet;
    bool m_loudness_isValid;

    double m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    double m_mode_confidence;
    bool m_mode_confidence_isSet;
    bool m_mode_confidence_isValid;

    double m_start;
    bool m_start_isSet;
    bool m_start_isValid;

    double m_tempo;
    bool m_tempo_isSet;
    bool m_tempo_isValid;

    double m_tempo_confidence;
    bool m_tempo_confidence_isSet;
    bool m_tempo_confidence_isValid;

    qint32 m_time_signature;
    bool m_time_signature_isSet;
    bool m_time_signature_isValid;

    double m_time_signature_confidence;
    bool m_time_signature_confidence_isSet;
    bool m_time_signature_confidence_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISectionObject)

#endif // OAISectionObject_H
