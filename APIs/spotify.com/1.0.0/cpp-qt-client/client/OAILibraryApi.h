/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILibraryApi_H
#define OAI_OAILibraryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChange_playlist_details_request.h"
#include "OAICreate_playlist_request.h"
#include "OAIFollow_artists_users_request.h"
#include "OAIGet_followed_200_response.h"
#include "OAIGet_multiple_albums_401_response.h"
#include "OAIGet_users_top_artists_and_tracks_200_response.h"
#include "OAIPagingPlaylistObject.h"
#include "OAIPagingSavedAlbumObject.h"
#include "OAIPagingSavedEpisodeObject.h"
#include "OAIPagingSavedShowObject.h"
#include "OAIPagingSavedTrackObject.h"
#include "OAIPagingSimplifiedAudiobookObject.h"
#include "OAIPlaylistObject.h"
#include "OAIRemove_episodes_user_request.h"
#include "OAISave_albums_user_request.h"
#include "OAISave_episodes_user_request.h"
#include "OAISave_tracks_user_request.h"
#include "OAIUnfollow_artists_users_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILibraryApi : public QObject {
    Q_OBJECT

public:
    OAILibraryApi(const int timeOut = 0);
    ~OAILibraryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  oai_change_playlist_details_request OAIChange_playlist_details_request [optional]
    */
    virtual void changePlaylistDetails(const QString &playlist_id, const ::OpenAPI::OptionalParam<OAIChange_playlist_details_request> &oai_change_playlist_details_request = ::OpenAPI::OptionalParam<OAIChange_playlist_details_request>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  ids QString [required]
    */
    virtual void checkCurrentUserFollows(const QString &type, const QString &ids);

    /**
    * @param[in]  ids QString [required]
    */
    virtual void checkUsersSavedAlbums(const QString &ids);

    /**
    * @param[in]  ids QString [required]
    */
    virtual void checkUsersSavedAudiobooks(const QString &ids);

    /**
    * @param[in]  ids QString [required]
    */
    virtual void checkUsersSavedEpisodes(const QString &ids);

    /**
    * @param[in]  ids QString [required]
    */
    virtual void checkUsersSavedShows(const QString &ids);

    /**
    * @param[in]  ids QString [required]
    */
    virtual void checkUsersSavedTracks(const QString &ids);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_create_playlist_request OAICreate_playlist_request [optional]
    */
    virtual void createPlaylist(const QString &user_id, const ::OpenAPI::OptionalParam<OAICreate_playlist_request> &oai_create_playlist_request = ::OpenAPI::OptionalParam<OAICreate_playlist_request>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  ids QString [required]
    * @param[in]  oai_follow_artists_users_request OAIFollow_artists_users_request [optional]
    */
    virtual void followArtistsUsers(const QString &type, const QString &ids, const ::OpenAPI::OptionalParam<OAIFollow_artists_users_request> &oai_follow_artists_users_request = ::OpenAPI::OptionalParam<OAIFollow_artists_users_request>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getAListOfCurrentUsersPlaylists(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  after QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getFollowed(const QString &type, const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  market QString [optional]
    */
    virtual void getUsersSavedAlbums(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getUsersSavedAudiobooks(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  market QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getUsersSavedEpisodes(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getUsersSavedShows(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  market QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getUsersSavedTracks(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  time_range QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getUsersTopArtistsAndTracks(const QString &type, const ::OpenAPI::OptionalParam<QString> &time_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  oai_save_albums_user_request OAISave_albums_user_request [optional]
    */
    virtual void removeAlbumsUser(const QString &ids, const ::OpenAPI::OptionalParam<OAISave_albums_user_request> &oai_save_albums_user_request = ::OpenAPI::OptionalParam<OAISave_albums_user_request>());

    /**
    * @param[in]  ids QString [required]
    */
    virtual void removeAudiobooksUser(const QString &ids);

    /**
    * @param[in]  ids QString [required]
    * @param[in]  oai_remove_episodes_user_request OAIRemove_episodes_user_request [optional]
    */
    virtual void removeEpisodesUser(const QString &ids, const ::OpenAPI::OptionalParam<OAIRemove_episodes_user_request> &oai_remove_episodes_user_request = ::OpenAPI::OptionalParam<OAIRemove_episodes_user_request>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  market QString [optional]
    */
    virtual void removeShowsUser(const QString &ids, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  oai_save_albums_user_request OAISave_albums_user_request [optional]
    */
    virtual void removeTracksUser(const QString &ids, const ::OpenAPI::OptionalParam<OAISave_albums_user_request> &oai_save_albums_user_request = ::OpenAPI::OptionalParam<OAISave_albums_user_request>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  oai_save_albums_user_request OAISave_albums_user_request [optional]
    */
    virtual void saveAlbumsUser(const QString &ids, const ::OpenAPI::OptionalParam<OAISave_albums_user_request> &oai_save_albums_user_request = ::OpenAPI::OptionalParam<OAISave_albums_user_request>());

    /**
    * @param[in]  ids QString [required]
    */
    virtual void saveAudiobooksUser(const QString &ids);

    /**
    * @param[in]  ids QString [required]
    * @param[in]  oai_save_episodes_user_request OAISave_episodes_user_request [optional]
    */
    virtual void saveEpisodesUser(const QString &ids, const ::OpenAPI::OptionalParam<OAISave_episodes_user_request> &oai_save_episodes_user_request = ::OpenAPI::OptionalParam<OAISave_episodes_user_request>());

    /**
    * @param[in]  ids QString [required]
    */
    virtual void saveShowsUser(const QString &ids);

    /**
    * @param[in]  ids QString [required]
    * @param[in]  oai_save_tracks_user_request OAISave_tracks_user_request [optional]
    */
    virtual void saveTracksUser(const QString &ids, const ::OpenAPI::OptionalParam<OAISave_tracks_user_request> &oai_save_tracks_user_request = ::OpenAPI::OptionalParam<OAISave_tracks_user_request>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  ids QString [required]
    * @param[in]  oai_unfollow_artists_users_request OAIUnfollow_artists_users_request [optional]
    */
    virtual void unfollowArtistsUsers(const QString &type, const QString &ids, const ::OpenAPI::OptionalParam<OAIUnfollow_artists_users_request> &oai_unfollow_artists_users_request = ::OpenAPI::OptionalParam<OAIUnfollow_artists_users_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changePlaylistDetailsCallback(OAIHttpRequestWorker *worker);
    void checkCurrentUserFollowsCallback(OAIHttpRequestWorker *worker);
    void checkUsersSavedAlbumsCallback(OAIHttpRequestWorker *worker);
    void checkUsersSavedAudiobooksCallback(OAIHttpRequestWorker *worker);
    void checkUsersSavedEpisodesCallback(OAIHttpRequestWorker *worker);
    void checkUsersSavedShowsCallback(OAIHttpRequestWorker *worker);
    void checkUsersSavedTracksCallback(OAIHttpRequestWorker *worker);
    void createPlaylistCallback(OAIHttpRequestWorker *worker);
    void followArtistsUsersCallback(OAIHttpRequestWorker *worker);
    void getAListOfCurrentUsersPlaylistsCallback(OAIHttpRequestWorker *worker);
    void getFollowedCallback(OAIHttpRequestWorker *worker);
    void getUsersSavedAlbumsCallback(OAIHttpRequestWorker *worker);
    void getUsersSavedAudiobooksCallback(OAIHttpRequestWorker *worker);
    void getUsersSavedEpisodesCallback(OAIHttpRequestWorker *worker);
    void getUsersSavedShowsCallback(OAIHttpRequestWorker *worker);
    void getUsersSavedTracksCallback(OAIHttpRequestWorker *worker);
    void getUsersTopArtistsAndTracksCallback(OAIHttpRequestWorker *worker);
    void removeAlbumsUserCallback(OAIHttpRequestWorker *worker);
    void removeAudiobooksUserCallback(OAIHttpRequestWorker *worker);
    void removeEpisodesUserCallback(OAIHttpRequestWorker *worker);
    void removeShowsUserCallback(OAIHttpRequestWorker *worker);
    void removeTracksUserCallback(OAIHttpRequestWorker *worker);
    void saveAlbumsUserCallback(OAIHttpRequestWorker *worker);
    void saveAudiobooksUserCallback(OAIHttpRequestWorker *worker);
    void saveEpisodesUserCallback(OAIHttpRequestWorker *worker);
    void saveShowsUserCallback(OAIHttpRequestWorker *worker);
    void saveTracksUserCallback(OAIHttpRequestWorker *worker);
    void unfollowArtistsUsersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changePlaylistDetailsSignal();
    void checkCurrentUserFollowsSignal(QList<bool> summary);
    void checkUsersSavedAlbumsSignal(QList<bool> summary);
    void checkUsersSavedAudiobooksSignal(QList<bool> summary);
    void checkUsersSavedEpisodesSignal(QList<bool> summary);
    void checkUsersSavedShowsSignal(QList<bool> summary);
    void checkUsersSavedTracksSignal(QList<bool> summary);
    void createPlaylistSignal(OAIPlaylistObject summary);
    void followArtistsUsersSignal();
    void getAListOfCurrentUsersPlaylistsSignal(OAIPagingPlaylistObject summary);
    void getFollowedSignal(OAIGet_followed_200_response summary);
    void getUsersSavedAlbumsSignal(OAIPagingSavedAlbumObject summary);
    void getUsersSavedAudiobooksSignal(OAIPagingSimplifiedAudiobookObject summary);
    void getUsersSavedEpisodesSignal(OAIPagingSavedEpisodeObject summary);
    void getUsersSavedShowsSignal(OAIPagingSavedShowObject summary);
    void getUsersSavedTracksSignal(OAIPagingSavedTrackObject summary);
    void getUsersTopArtistsAndTracksSignal(OAIGet_users_top_artists_and_tracks_200_response summary);
    void removeAlbumsUserSignal();
    void removeAudiobooksUserSignal();
    void removeEpisodesUserSignal();
    void removeShowsUserSignal();
    void removeTracksUserSignal();
    void saveAlbumsUserSignal();
    void saveAudiobooksUserSignal();
    void saveEpisodesUserSignal();
    void saveShowsUserSignal();
    void saveTracksUserSignal();
    void unfollowArtistsUsersSignal();


    void changePlaylistDetailsSignalFull(OAIHttpRequestWorker *worker);
    void checkCurrentUserFollowsSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void checkUsersSavedAlbumsSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void checkUsersSavedAudiobooksSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void checkUsersSavedEpisodesSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void checkUsersSavedShowsSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void checkUsersSavedTracksSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void createPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIPlaylistObject summary);
    void followArtistsUsersSignalFull(OAIHttpRequestWorker *worker);
    void getAListOfCurrentUsersPlaylistsSignalFull(OAIHttpRequestWorker *worker, OAIPagingPlaylistObject summary);
    void getFollowedSignalFull(OAIHttpRequestWorker *worker, OAIGet_followed_200_response summary);
    void getUsersSavedAlbumsSignalFull(OAIHttpRequestWorker *worker, OAIPagingSavedAlbumObject summary);
    void getUsersSavedAudiobooksSignalFull(OAIHttpRequestWorker *worker, OAIPagingSimplifiedAudiobookObject summary);
    void getUsersSavedEpisodesSignalFull(OAIHttpRequestWorker *worker, OAIPagingSavedEpisodeObject summary);
    void getUsersSavedShowsSignalFull(OAIHttpRequestWorker *worker, OAIPagingSavedShowObject summary);
    void getUsersSavedTracksSignalFull(OAIHttpRequestWorker *worker, OAIPagingSavedTrackObject summary);
    void getUsersTopArtistsAndTracksSignalFull(OAIHttpRequestWorker *worker, OAIGet_users_top_artists_and_tracks_200_response summary);
    void removeAlbumsUserSignalFull(OAIHttpRequestWorker *worker);
    void removeAudiobooksUserSignalFull(OAIHttpRequestWorker *worker);
    void removeEpisodesUserSignalFull(OAIHttpRequestWorker *worker);
    void removeShowsUserSignalFull(OAIHttpRequestWorker *worker);
    void removeTracksUserSignalFull(OAIHttpRequestWorker *worker);
    void saveAlbumsUserSignalFull(OAIHttpRequestWorker *worker);
    void saveAudiobooksUserSignalFull(OAIHttpRequestWorker *worker);
    void saveEpisodesUserSignalFull(OAIHttpRequestWorker *worker);
    void saveShowsUserSignalFull(OAIHttpRequestWorker *worker);
    void saveTracksUserSignalFull(OAIHttpRequestWorker *worker);
    void unfollowArtistsUsersSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use changePlaylistDetailsSignalError() instead")
    void changePlaylistDetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changePlaylistDetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkCurrentUserFollowsSignalError() instead")
    void checkCurrentUserFollowsSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkCurrentUserFollowsSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkUsersSavedAlbumsSignalError() instead")
    void checkUsersSavedAlbumsSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedAlbumsSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkUsersSavedAudiobooksSignalError() instead")
    void checkUsersSavedAudiobooksSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedAudiobooksSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkUsersSavedEpisodesSignalError() instead")
    void checkUsersSavedEpisodesSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedEpisodesSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkUsersSavedShowsSignalError() instead")
    void checkUsersSavedShowsSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedShowsSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkUsersSavedTracksSignalError() instead")
    void checkUsersSavedTracksSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedTracksSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPlaylistSignalError() instead")
    void createPlaylistSignalE(OAIPlaylistObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPlaylistSignalError(OAIPlaylistObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followArtistsUsersSignalError() instead")
    void followArtistsUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void followArtistsUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAListOfCurrentUsersPlaylistsSignalError() instead")
    void getAListOfCurrentUsersPlaylistsSignalE(OAIPagingPlaylistObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAListOfCurrentUsersPlaylistsSignalError(OAIPagingPlaylistObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFollowedSignalError() instead")
    void getFollowedSignalE(OAIGet_followed_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFollowedSignalError(OAIGet_followed_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedAlbumsSignalError() instead")
    void getUsersSavedAlbumsSignalE(OAIPagingSavedAlbumObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedAlbumsSignalError(OAIPagingSavedAlbumObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedAudiobooksSignalError() instead")
    void getUsersSavedAudiobooksSignalE(OAIPagingSimplifiedAudiobookObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedAudiobooksSignalError(OAIPagingSimplifiedAudiobookObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedEpisodesSignalError() instead")
    void getUsersSavedEpisodesSignalE(OAIPagingSavedEpisodeObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedEpisodesSignalError(OAIPagingSavedEpisodeObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedShowsSignalError() instead")
    void getUsersSavedShowsSignalE(OAIPagingSavedShowObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedShowsSignalError(OAIPagingSavedShowObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedTracksSignalError() instead")
    void getUsersSavedTracksSignalE(OAIPagingSavedTrackObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedTracksSignalError(OAIPagingSavedTrackObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersTopArtistsAndTracksSignalError() instead")
    void getUsersTopArtistsAndTracksSignalE(OAIGet_users_top_artists_and_tracks_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersTopArtistsAndTracksSignalError(OAIGet_users_top_artists_and_tracks_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAlbumsUserSignalError() instead")
    void removeAlbumsUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAlbumsUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAudiobooksUserSignalError() instead")
    void removeAudiobooksUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAudiobooksUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeEpisodesUserSignalError() instead")
    void removeEpisodesUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeEpisodesUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeShowsUserSignalError() instead")
    void removeShowsUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeShowsUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTracksUserSignalError() instead")
    void removeTracksUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeTracksUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveAlbumsUserSignalError() instead")
    void saveAlbumsUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveAlbumsUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveAudiobooksUserSignalError() instead")
    void saveAudiobooksUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveAudiobooksUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveEpisodesUserSignalError() instead")
    void saveEpisodesUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveEpisodesUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveShowsUserSignalError() instead")
    void saveShowsUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveShowsUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveTracksUserSignalError() instead")
    void saveTracksUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveTracksUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowArtistsUsersSignalError() instead")
    void unfollowArtistsUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowArtistsUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changePlaylistDetailsSignalErrorFull() instead")
    void changePlaylistDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePlaylistDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkCurrentUserFollowsSignalErrorFull() instead")
    void checkCurrentUserFollowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkCurrentUserFollowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkUsersSavedAlbumsSignalErrorFull() instead")
    void checkUsersSavedAlbumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedAlbumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkUsersSavedAudiobooksSignalErrorFull() instead")
    void checkUsersSavedAudiobooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedAudiobooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkUsersSavedEpisodesSignalErrorFull() instead")
    void checkUsersSavedEpisodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedEpisodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkUsersSavedShowsSignalErrorFull() instead")
    void checkUsersSavedShowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedShowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkUsersSavedTracksSignalErrorFull() instead")
    void checkUsersSavedTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPlaylistSignalErrorFull() instead")
    void createPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followArtistsUsersSignalErrorFull() instead")
    void followArtistsUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followArtistsUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAListOfCurrentUsersPlaylistsSignalErrorFull() instead")
    void getAListOfCurrentUsersPlaylistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAListOfCurrentUsersPlaylistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFollowedSignalErrorFull() instead")
    void getFollowedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFollowedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedAlbumsSignalErrorFull() instead")
    void getUsersSavedAlbumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedAlbumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedAudiobooksSignalErrorFull() instead")
    void getUsersSavedAudiobooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedAudiobooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedEpisodesSignalErrorFull() instead")
    void getUsersSavedEpisodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedEpisodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedShowsSignalErrorFull() instead")
    void getUsersSavedShowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedShowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedTracksSignalErrorFull() instead")
    void getUsersSavedTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersTopArtistsAndTracksSignalErrorFull() instead")
    void getUsersTopArtistsAndTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersTopArtistsAndTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAlbumsUserSignalErrorFull() instead")
    void removeAlbumsUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAlbumsUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAudiobooksUserSignalErrorFull() instead")
    void removeAudiobooksUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAudiobooksUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeEpisodesUserSignalErrorFull() instead")
    void removeEpisodesUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeEpisodesUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeShowsUserSignalErrorFull() instead")
    void removeShowsUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeShowsUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTracksUserSignalErrorFull() instead")
    void removeTracksUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeTracksUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveAlbumsUserSignalErrorFull() instead")
    void saveAlbumsUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveAlbumsUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveAudiobooksUserSignalErrorFull() instead")
    void saveAudiobooksUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveAudiobooksUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveEpisodesUserSignalErrorFull() instead")
    void saveEpisodesUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveEpisodesUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveShowsUserSignalErrorFull() instead")
    void saveShowsUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveShowsUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveTracksUserSignalErrorFull() instead")
    void saveTracksUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveTracksUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowArtistsUsersSignalErrorFull() instead")
    void unfollowArtistsUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowArtistsUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
