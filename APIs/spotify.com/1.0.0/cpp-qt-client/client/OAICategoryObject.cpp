/**
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryObject::OAICategoryObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryObject::OAICategoryObject() {
    this->initializeModel();
}

OAICategoryObject::~OAICategoryObject() {}

void OAICategoryObject::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_icons_isSet = false;
    m_icons_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICategoryObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryObject::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_icons_isValid = ::OpenAPI::fromJsonValue(m_icons, json[QString("icons")]);
    m_icons_isSet = !json[QString("icons")].isNull() && m_icons_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICategoryObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryObject::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_icons.size() > 0) {
        obj.insert(QString("icons"), ::OpenAPI::toJsonValue(m_icons));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAICategoryObject::getHref() const {
    return m_href;
}
void OAICategoryObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAICategoryObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAICategoryObject::is_href_Valid() const{
    return m_href_isValid;
}

QList<OAIImageObject> OAICategoryObject::getIcons() const {
    return m_icons;
}
void OAICategoryObject::setIcons(const QList<OAIImageObject> &icons) {
    m_icons = icons;
    m_icons_isSet = true;
}

bool OAICategoryObject::is_icons_Set() const{
    return m_icons_isSet;
}

bool OAICategoryObject::is_icons_Valid() const{
    return m_icons_isValid;
}

QString OAICategoryObject::getId() const {
    return m_id;
}
void OAICategoryObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategoryObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategoryObject::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICategoryObject::getName() const {
    return m_name;
}
void OAICategoryObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICategoryObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategoryObject::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICategoryObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && m_icons_isValid && m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
