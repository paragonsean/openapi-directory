/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ArtistObject;
import org.openapitools.client.model.FollowArtistsUsersRequest;
import org.openapitools.client.model.GetAnArtistsTopTracks200Response;
import org.openapitools.client.model.GetFollowed200Response;
import org.openapitools.client.model.GetMultipleAlbums401Response;
import org.openapitools.client.model.GetMultipleArtists200Response;
import org.openapitools.client.model.PagingArtistObject;
import org.openapitools.client.model.PagingSimplifiedAlbumObject;
import org.openapitools.client.model.UnfollowArtistsUsersRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ArtistsApi
 */
@Disabled
public class ArtistsApiTest {

    private final ArtistsApi api = new ArtistsApi();

    /**
     * Check If User Follows Artists or Users 
     *
     * Check to see if the current user is following one or more artists or other Spotify users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkCurrentUserFollows_0Test() throws ApiException {
        String type = null;
        String ids = null;
        List<Boolean> response = api.checkCurrentUserFollows_0(type, ids);
        // TODO: test validations
    }

    /**
     * Follow Artists or Users 
     *
     * Add the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followArtistsUsers_0Test() throws ApiException {
        String type = null;
        String ids = null;
        FollowArtistsUsersRequest followArtistsUsersRequest = null;
        api.followArtistsUsers_0(type, ids, followArtistsUsersRequest);
        // TODO: test validations
    }

    /**
     * Get Artist 
     *
     * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnArtistTest() throws ApiException {
        String id = null;
        ArtistObject response = api.getAnArtist(id);
        // TODO: test validations
    }

    /**
     * Get Artist&#39;s Albums 
     *
     * Get Spotify catalog information about an artist&#39;s albums. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnArtistsAlbumsTest() throws ApiException {
        String id = null;
        String includeGroups = null;
        String market = null;
        Integer limit = null;
        Integer offset = null;
        PagingSimplifiedAlbumObject response = api.getAnArtistsAlbums(id, includeGroups, market, limit, offset);
        // TODO: test validations
    }

    /**
     * Get Artist&#39;s Related Artists 
     *
     * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community&#39;s [listening history](http://news.spotify.com/se/2010/02/03/related-artists/). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnArtistsRelatedArtistsTest() throws ApiException {
        String id = null;
        GetMultipleArtists200Response response = api.getAnArtistsRelatedArtists(id);
        // TODO: test validations
    }

    /**
     * Get Artist&#39;s Top Tracks 
     *
     * Get Spotify catalog information about an artist&#39;s top tracks by country. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnArtistsTopTracksTest() throws ApiException {
        String id = null;
        String market = null;
        GetAnArtistsTopTracks200Response response = api.getAnArtistsTopTracks(id, market);
        // TODO: test validations
    }

    /**
     * Get Followed Artists 
     *
     * Get the current user&#39;s followed artists. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFollowed_1Test() throws ApiException {
        String type = null;
        String after = null;
        Integer limit = null;
        GetFollowed200Response response = api.getFollowed_1(type, after, limit);
        // TODO: test validations
    }

    /**
     * Get Several Artists 
     *
     * Get Spotify catalog information for several artists based on their Spotify IDs. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMultipleArtistsTest() throws ApiException {
        String ids = null;
        GetMultipleArtists200Response response = api.getMultipleArtists(ids);
        // TODO: test validations
    }

    /**
     * Get User&#39;s Top Artists 
     *
     * Get the current user&#39;s top artists based on calculated affinity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTopArtists_0Test() throws ApiException {
        String timeRange = null;
        Integer limit = null;
        Integer offset = null;
        PagingArtistObject response = api.getUsersTopArtists_0(timeRange, limit, offset);
        // TODO: test validations
    }

    /**
     * Unfollow Artists or Users 
     *
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unfollowArtistsUsers_0Test() throws ApiException {
        String type = null;
        String ids = null;
        UnfollowArtistsUsersRequest unfollowArtistsUsersRequest = null;
        api.unfollowArtistsUsers_0(type, ids, unfollowArtistsUsersRequest);
        // TODO: test validations
    }

}
