/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChangePlaylistDetailsRequest;
import org.openapitools.client.model.CreatePlaylistRequest;
import org.openapitools.client.model.FollowArtistsUsersRequest;
import org.openapitools.client.model.GetFollowed200Response;
import org.openapitools.client.model.GetMultipleAlbums401Response;
import org.openapitools.client.model.PagingArtistObject;
import org.openapitools.client.model.PagingPlaylistObject;
import org.openapitools.client.model.PagingSavedAlbumObject;
import org.openapitools.client.model.PagingSavedAudiobookObject;
import org.openapitools.client.model.PagingSavedEpisodeObject;
import org.openapitools.client.model.PagingSavedShowObject;
import org.openapitools.client.model.PagingSavedTrackObject;
import org.openapitools.client.model.PagingTrackObject;
import org.openapitools.client.model.PlaylistObject;
import org.openapitools.client.model.RemoveEpisodesUserRequest;
import org.openapitools.client.model.SaveAlbumsUserRequest;
import org.openapitools.client.model.SaveEpisodesUserRequest;
import org.openapitools.client.model.SaveShowsUserRequest;
import org.openapitools.client.model.SaveTracksUserRequest;
import org.openapitools.client.model.UnfollowArtistsUsersRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LibraryApi
 */
@Disabled
public class LibraryApiTest {

    private final LibraryApi api = new LibraryApi();

    /**
     * Change Playlist Details 
     *
     * Change a playlist&#39;s name and public/private state. (The user must, of course, own the playlist.) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changePlaylistDetails_0Test() throws ApiException {
        String playlistId = null;
        ChangePlaylistDetailsRequest changePlaylistDetailsRequest = null;
        api.changePlaylistDetails_0(playlistId, changePlaylistDetailsRequest);
        // TODO: test validations
    }

    /**
     * Check If User Follows Artists or Users 
     *
     * Check to see if the current user is following one or more artists or other Spotify users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkCurrentUserFollows_1Test() throws ApiException {
        String type = null;
        String ids = null;
        List<Boolean> response = api.checkCurrentUserFollows_1(type, ids);
        // TODO: test validations
    }

    /**
     * Check User&#39;s Saved Albums 
     *
     * Check if one or more albums is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkUsersSavedAlbums_0Test() throws ApiException {
        String ids = null;
        List<Boolean> response = api.checkUsersSavedAlbums_0(ids);
        // TODO: test validations
    }

    /**
     * Check User&#39;s Saved Audiobooks 
     *
     * Check if one or more audiobooks are already saved in the current Spotify user&#39;s library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkUsersSavedAudiobooks_0Test() throws ApiException {
        String ids = null;
        List<Boolean> response = api.checkUsersSavedAudiobooks_0(ids);
        // TODO: test validations
    }

    /**
     * Check User&#39;s Saved Episodes 
     *
     * Check if one or more episodes is already saved in the current Spotify user&#39;s &#39;Your Episodes&#39; library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkUsersSavedEpisodes_0Test() throws ApiException {
        String ids = null;
        List<Boolean> response = api.checkUsersSavedEpisodes_0(ids);
        // TODO: test validations
    }

    /**
     * Check User&#39;s Saved Shows 
     *
     * Check if one or more shows is already saved in the current Spotify user&#39;s library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkUsersSavedShows_0Test() throws ApiException {
        String ids = null;
        List<Boolean> response = api.checkUsersSavedShows_0(ids);
        // TODO: test validations
    }

    /**
     * Check User&#39;s Saved Tracks 
     *
     * Check if one or more tracks is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkUsersSavedTracks_0Test() throws ApiException {
        String ids = null;
        List<Boolean> response = api.checkUsersSavedTracks_0(ids);
        // TODO: test validations
    }

    /**
     * Create Playlist 
     *
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPlaylist_0Test() throws ApiException {
        String userId = null;
        CreatePlaylistRequest createPlaylistRequest = null;
        PlaylistObject response = api.createPlaylist_0(userId, createPlaylistRequest);
        // TODO: test validations
    }

    /**
     * Follow Artists or Users 
     *
     * Add the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followArtistsUsers_1Test() throws ApiException {
        String type = null;
        String ids = null;
        FollowArtistsUsersRequest followArtistsUsersRequest = null;
        api.followArtistsUsers_1(type, ids, followArtistsUsersRequest);
        // TODO: test validations
    }

    /**
     * Get Current User&#39;s Playlists 
     *
     * Get a list of the playlists owned or followed by the current Spotify user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAListOfCurrentUsersPlaylists_0Test() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PagingPlaylistObject response = api.getAListOfCurrentUsersPlaylists_0(limit, offset);
        // TODO: test validations
    }

    /**
     * Get Followed Artists 
     *
     * Get the current user&#39;s followed artists. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFollowed_0Test() throws ApiException {
        String type = null;
        String after = null;
        Integer limit = null;
        GetFollowed200Response response = api.getFollowed_0(type, after, limit);
        // TODO: test validations
    }

    /**
     * Get User&#39;s Saved Albums 
     *
     * Get a list of the albums saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersSavedAlbums_0Test() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String market = null;
        PagingSavedAlbumObject response = api.getUsersSavedAlbums_0(limit, offset, market);
        // TODO: test validations
    }

    /**
     * Get User&#39;s Saved Audiobooks 
     *
     * Get a list of the audiobooks saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersSavedAudiobooks_0Test() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PagingSavedAudiobookObject response = api.getUsersSavedAudiobooks_0(limit, offset);
        // TODO: test validations
    }

    /**
     * Get User&#39;s Saved Episodes 
     *
     * Get a list of the episodes saved in the current Spotify user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersSavedEpisodes_0Test() throws ApiException {
        String market = null;
        Integer limit = null;
        Integer offset = null;
        PagingSavedEpisodeObject response = api.getUsersSavedEpisodes_0(market, limit, offset);
        // TODO: test validations
    }

    /**
     * Get User&#39;s Saved Shows 
     *
     * Get a list of shows saved in the current Spotify user&#39;s library. Optional parameters can be used to limit the number of shows returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersSavedShows_0Test() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PagingSavedShowObject response = api.getUsersSavedShows_0(limit, offset);
        // TODO: test validations
    }

    /**
     * Get User&#39;s Saved Tracks 
     *
     * Get a list of the songs saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersSavedTracks_0Test() throws ApiException {
        String market = null;
        Integer limit = null;
        Integer offset = null;
        PagingSavedTrackObject response = api.getUsersSavedTracks_0(market, limit, offset);
        // TODO: test validations
    }

    /**
     * Get User&#39;s Top Artists 
     *
     * Get the current user&#39;s top artists based on calculated affinity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTopArtists_1Test() throws ApiException {
        String timeRange = null;
        Integer limit = null;
        Integer offset = null;
        PagingArtistObject response = api.getUsersTopArtists_1(timeRange, limit, offset);
        // TODO: test validations
    }

    /**
     * Get User&#39;s Top Tracks 
     *
     * Get the current user&#39;s top tracks based on calculated affinity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTopTracks_1Test() throws ApiException {
        String timeRange = null;
        Integer limit = null;
        Integer offset = null;
        PagingTrackObject response = api.getUsersTopTracks_1(timeRange, limit, offset);
        // TODO: test validations
    }

    /**
     * Remove Users&#39; Saved Albums 
     *
     * Remove one or more albums from the current user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAlbumsUser_0Test() throws ApiException {
        String ids = null;
        SaveAlbumsUserRequest saveAlbumsUserRequest = null;
        api.removeAlbumsUser_0(ids, saveAlbumsUserRequest);
        // TODO: test validations
    }

    /**
     * Remove User&#39;s Saved Audiobooks 
     *
     * Remove one or more audiobooks from the Spotify user&#39;s library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAudiobooksUser_0Test() throws ApiException {
        String ids = null;
        api.removeAudiobooksUser_0(ids);
        // TODO: test validations
    }

    /**
     * Remove User&#39;s Saved Episodes 
     *
     * Remove one or more episodes from the current user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeEpisodesUser_0Test() throws ApiException {
        String ids = null;
        RemoveEpisodesUserRequest removeEpisodesUserRequest = null;
        api.removeEpisodesUser_0(ids, removeEpisodesUserRequest);
        // TODO: test validations
    }

    /**
     * Remove User&#39;s Saved Shows 
     *
     * Delete one or more shows from current Spotify user&#39;s library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeShowsUser_0Test() throws ApiException {
        String ids = null;
        String market = null;
        SaveShowsUserRequest saveShowsUserRequest = null;
        api.removeShowsUser_0(ids, market, saveShowsUserRequest);
        // TODO: test validations
    }

    /**
     * Remove User&#39;s Saved Tracks 
     *
     * Remove one or more tracks from the current user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTracksUser_0Test() throws ApiException {
        String ids = null;
        SaveAlbumsUserRequest saveAlbumsUserRequest = null;
        api.removeTracksUser_0(ids, saveAlbumsUserRequest);
        // TODO: test validations
    }

    /**
     * Save Albums for Current User 
     *
     * Save one or more albums to the current user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveAlbumsUser_0Test() throws ApiException {
        String ids = null;
        SaveAlbumsUserRequest saveAlbumsUserRequest = null;
        api.saveAlbumsUser_0(ids, saveAlbumsUserRequest);
        // TODO: test validations
    }

    /**
     * Save Audiobooks for Current User 
     *
     * Save one or more audiobooks to the current Spotify user&#39;s library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveAudiobooksUser_0Test() throws ApiException {
        String ids = null;
        api.saveAudiobooksUser_0(ids);
        // TODO: test validations
    }

    /**
     * Save Episodes for Current User 
     *
     * Save one or more episodes to the current user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveEpisodesUser_0Test() throws ApiException {
        String ids = null;
        SaveEpisodesUserRequest saveEpisodesUserRequest = null;
        api.saveEpisodesUser_0(ids, saveEpisodesUserRequest);
        // TODO: test validations
    }

    /**
     * Save Shows for Current User 
     *
     * Save one or more shows to current Spotify user&#39;s library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveShowsUser_0Test() throws ApiException {
        String ids = null;
        SaveShowsUserRequest saveShowsUserRequest = null;
        api.saveShowsUser_0(ids, saveShowsUserRequest);
        // TODO: test validations
    }

    /**
     * Save Tracks for Current User 
     *
     * Save one or more tracks to the current user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveTracksUser_0Test() throws ApiException {
        String ids = null;
        SaveTracksUserRequest saveTracksUserRequest = null;
        api.saveTracksUser_0(ids, saveTracksUserRequest);
        // TODO: test validations
    }

    /**
     * Unfollow Artists or Users 
     *
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unfollowArtistsUsers_1Test() throws ApiException {
        String type = null;
        String ids = null;
        UnfollowArtistsUsersRequest unfollowArtistsUsersRequest = null;
        api.unfollowArtistsUsers_1(type, ids, unfollowArtistsUsersRequest);
        // TODO: test validations
    }

}
