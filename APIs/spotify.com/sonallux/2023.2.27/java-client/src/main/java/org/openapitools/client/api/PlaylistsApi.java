/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddTracksToPlaylistRequest;
import org.openapitools.client.model.ChangePlaylistDetailsRequest;
import org.openapitools.client.model.CreatePlaylistRequest;
import org.openapitools.client.model.FollowPlaylistRequest;
import org.openapitools.client.model.GetMultipleAlbums401Response;
import org.openapitools.client.model.ImageObject;
import org.openapitools.client.model.PagingFeaturedPlaylistObject;
import org.openapitools.client.model.PagingPlaylistObject;
import org.openapitools.client.model.PagingPlaylistTrackObject;
import org.openapitools.client.model.PlaylistObject;
import org.openapitools.client.model.RemoveTracksPlaylistRequest;
import org.openapitools.client.model.ReorderOrReplacePlaylistsTracks200Response;
import org.openapitools.client.model.ReorderOrReplacePlaylistsTracksRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaylistsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlaylistsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaylistsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addTracksToPlaylist
     * @param playlistId  (required)
     * @param position  (optional)
     * @param uris  (optional)
     * @param addTracksToPlaylistRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTracksToPlaylistCall(String playlistId, Integer position, String uris, AddTracksToPlaylistRequest addTracksToPlaylistRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTracksToPlaylistRequest;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTracksToPlaylistValidateBeforeCall(String playlistId, Integer position, String uris, AddTracksToPlaylistRequest addTracksToPlaylistRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling addTracksToPlaylist(Async)");
        }

        return addTracksToPlaylistCall(playlistId, position, uris, addTracksToPlaylistRequest, _callback);

    }

    /**
     * Add Items to Playlist 
     * Add one or more items to a user&#39;s playlist. 
     * @param playlistId  (required)
     * @param position  (optional)
     * @param uris  (optional)
     * @param addTracksToPlaylistRequest  (optional)
     * @return ReorderOrReplacePlaylistsTracks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ReorderOrReplacePlaylistsTracks200Response addTracksToPlaylist(String playlistId, Integer position, String uris, AddTracksToPlaylistRequest addTracksToPlaylistRequest) throws ApiException {
        ApiResponse<ReorderOrReplacePlaylistsTracks200Response> localVarResp = addTracksToPlaylistWithHttpInfo(playlistId, position, uris, addTracksToPlaylistRequest);
        return localVarResp.getData();
    }

    /**
     * Add Items to Playlist 
     * Add one or more items to a user&#39;s playlist. 
     * @param playlistId  (required)
     * @param position  (optional)
     * @param uris  (optional)
     * @param addTracksToPlaylistRequest  (optional)
     * @return ApiResponse&lt;ReorderOrReplacePlaylistsTracks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReorderOrReplacePlaylistsTracks200Response> addTracksToPlaylistWithHttpInfo(String playlistId, Integer position, String uris, AddTracksToPlaylistRequest addTracksToPlaylistRequest) throws ApiException {
        okhttp3.Call localVarCall = addTracksToPlaylistValidateBeforeCall(playlistId, position, uris, addTracksToPlaylistRequest, null);
        Type localVarReturnType = new TypeToken<ReorderOrReplacePlaylistsTracks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Items to Playlist  (asynchronously)
     * Add one or more items to a user&#39;s playlist. 
     * @param playlistId  (required)
     * @param position  (optional)
     * @param uris  (optional)
     * @param addTracksToPlaylistRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTracksToPlaylistAsync(String playlistId, Integer position, String uris, AddTracksToPlaylistRequest addTracksToPlaylistRequest, final ApiCallback<ReorderOrReplacePlaylistsTracks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTracksToPlaylistValidateBeforeCall(playlistId, position, uris, addTracksToPlaylistRequest, _callback);
        Type localVarReturnType = new TypeToken<ReorderOrReplacePlaylistsTracks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changePlaylistDetails
     * @param playlistId  (required)
     * @param changePlaylistDetailsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePlaylistDetailsCall(String playlistId, ChangePlaylistDetailsRequest changePlaylistDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePlaylistDetailsRequest;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePlaylistDetailsValidateBeforeCall(String playlistId, ChangePlaylistDetailsRequest changePlaylistDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling changePlaylistDetails(Async)");
        }

        return changePlaylistDetailsCall(playlistId, changePlaylistDetailsRequest, _callback);

    }

    /**
     * Change Playlist Details 
     * Change a playlist&#39;s name and public/private state. (The user must, of course, own the playlist.) 
     * @param playlistId  (required)
     * @param changePlaylistDetailsRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public void changePlaylistDetails(String playlistId, ChangePlaylistDetailsRequest changePlaylistDetailsRequest) throws ApiException {
        changePlaylistDetailsWithHttpInfo(playlistId, changePlaylistDetailsRequest);
    }

    /**
     * Change Playlist Details 
     * Change a playlist&#39;s name and public/private state. (The user must, of course, own the playlist.) 
     * @param playlistId  (required)
     * @param changePlaylistDetailsRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changePlaylistDetailsWithHttpInfo(String playlistId, ChangePlaylistDetailsRequest changePlaylistDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = changePlaylistDetailsValidateBeforeCall(playlistId, changePlaylistDetailsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change Playlist Details  (asynchronously)
     * Change a playlist&#39;s name and public/private state. (The user must, of course, own the playlist.) 
     * @param playlistId  (required)
     * @param changePlaylistDetailsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePlaylistDetailsAsync(String playlistId, ChangePlaylistDetailsRequest changePlaylistDetailsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePlaylistDetailsValidateBeforeCall(playlistId, changePlaylistDetailsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkIfUserFollowsPlaylist_0
     * @param playlistId  (required)
     * @param ids  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserFollowsPlaylist_0Call(String playlistId, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/followers/contains"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfUserFollowsPlaylist_0ValidateBeforeCall(String playlistId, String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling checkIfUserFollowsPlaylist_0(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkIfUserFollowsPlaylist_0(Async)");
        }

        return checkIfUserFollowsPlaylist_0Call(playlistId, ids, _callback);

    }

    /**
     * Check if Users Follow Playlist 
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @param playlistId  (required)
     * @param ids  (required)
     * @return List&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public List<Boolean> checkIfUserFollowsPlaylist_0(String playlistId, String ids) throws ApiException {
        ApiResponse<List<Boolean>> localVarResp = checkIfUserFollowsPlaylist_0WithHttpInfo(playlistId, ids);
        return localVarResp.getData();
    }

    /**
     * Check if Users Follow Playlist 
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @param playlistId  (required)
     * @param ids  (required)
     * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Boolean>> checkIfUserFollowsPlaylist_0WithHttpInfo(String playlistId, String ids) throws ApiException {
        okhttp3.Call localVarCall = checkIfUserFollowsPlaylist_0ValidateBeforeCall(playlistId, ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if Users Follow Playlist  (asynchronously)
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @param playlistId  (required)
     * @param ids  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserFollowsPlaylist_0Async(String playlistId, String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfUserFollowsPlaylist_0ValidateBeforeCall(playlistId, ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPlaylist
     * @param userId  (required)
     * @param createPlaylistRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPlaylistCall(String userId, CreatePlaylistRequest createPlaylistRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPlaylistRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/playlists"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPlaylistValidateBeforeCall(String userId, CreatePlaylistRequest createPlaylistRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createPlaylist(Async)");
        }

        return createPlaylistCall(userId, createPlaylistRequest, _callback);

    }

    /**
     * Create Playlist 
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
     * @param userId  (required)
     * @param createPlaylistRequest  (optional)
     * @return PlaylistObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PlaylistObject createPlaylist(String userId, CreatePlaylistRequest createPlaylistRequest) throws ApiException {
        ApiResponse<PlaylistObject> localVarResp = createPlaylistWithHttpInfo(userId, createPlaylistRequest);
        return localVarResp.getData();
    }

    /**
     * Create Playlist 
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
     * @param userId  (required)
     * @param createPlaylistRequest  (optional)
     * @return ApiResponse&lt;PlaylistObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaylistObject> createPlaylistWithHttpInfo(String userId, CreatePlaylistRequest createPlaylistRequest) throws ApiException {
        okhttp3.Call localVarCall = createPlaylistValidateBeforeCall(userId, createPlaylistRequest, null);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Playlist  (asynchronously)
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
     * @param userId  (required)
     * @param createPlaylistRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPlaylistAsync(String userId, CreatePlaylistRequest createPlaylistRequest, final ApiCallback<PlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPlaylistValidateBeforeCall(userId, createPlaylistRequest, _callback);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for followPlaylist_0
     * @param playlistId  (required)
     * @param followPlaylistRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call followPlaylist_0Call(String playlistId, FollowPlaylistRequest followPlaylistRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = followPlaylistRequest;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/followers"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followPlaylist_0ValidateBeforeCall(String playlistId, FollowPlaylistRequest followPlaylistRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling followPlaylist_0(Async)");
        }

        return followPlaylist_0Call(playlistId, followPlaylistRequest, _callback);

    }

    /**
     * Follow Playlist 
     * Add the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @param followPlaylistRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public void followPlaylist_0(String playlistId, FollowPlaylistRequest followPlaylistRequest) throws ApiException {
        followPlaylist_0WithHttpInfo(playlistId, followPlaylistRequest);
    }

    /**
     * Follow Playlist 
     * Add the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @param followPlaylistRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> followPlaylist_0WithHttpInfo(String playlistId, FollowPlaylistRequest followPlaylistRequest) throws ApiException {
        okhttp3.Call localVarCall = followPlaylist_0ValidateBeforeCall(playlistId, followPlaylistRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Follow Playlist  (asynchronously)
     * Add the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @param followPlaylistRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call followPlaylist_0Async(String playlistId, FollowPlaylistRequest followPlaylistRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followPlaylist_0ValidateBeforeCall(playlistId, followPlaylistRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getACategoriesPlaylists
     * @param categoryId  (required)
     * @param country  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getACategoriesPlaylistsCall(String categoryId, String country, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browse/categories/{category_id}/playlists"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getACategoriesPlaylistsValidateBeforeCall(String categoryId, String country, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getACategoriesPlaylists(Async)");
        }

        return getACategoriesPlaylistsCall(categoryId, country, limit, offset, _callback);

    }

    /**
     * Get Category&#39;s Playlists 
     * Get a list of Spotify playlists tagged with a particular category. 
     * @param categoryId  (required)
     * @param country  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingFeaturedPlaylistObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingFeaturedPlaylistObject getACategoriesPlaylists(String categoryId, String country, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingFeaturedPlaylistObject> localVarResp = getACategoriesPlaylistsWithHttpInfo(categoryId, country, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get Category&#39;s Playlists 
     * Get a list of Spotify playlists tagged with a particular category. 
     * @param categoryId  (required)
     * @param country  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingFeaturedPlaylistObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingFeaturedPlaylistObject> getACategoriesPlaylistsWithHttpInfo(String categoryId, String country, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getACategoriesPlaylistsValidateBeforeCall(categoryId, country, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Category&#39;s Playlists  (asynchronously)
     * Get a list of Spotify playlists tagged with a particular category. 
     * @param categoryId  (required)
     * @param country  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getACategoriesPlaylistsAsync(String categoryId, String country, Integer limit, Integer offset, final ApiCallback<PagingFeaturedPlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getACategoriesPlaylistsValidateBeforeCall(categoryId, country, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAListOfCurrentUsersPlaylists
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAListOfCurrentUsersPlaylistsCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAListOfCurrentUsersPlaylistsValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getAListOfCurrentUsersPlaylistsCall(limit, offset, _callback);

    }

    /**
     * Get Current User&#39;s Playlists 
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingPlaylistObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingPlaylistObject getAListOfCurrentUsersPlaylists(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingPlaylistObject> localVarResp = getAListOfCurrentUsersPlaylistsWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get Current User&#39;s Playlists 
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingPlaylistObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingPlaylistObject> getAListOfCurrentUsersPlaylistsWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAListOfCurrentUsersPlaylistsValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Current User&#39;s Playlists  (asynchronously)
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAListOfCurrentUsersPlaylistsAsync(Integer limit, Integer offset, final ApiCallback<PagingPlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAListOfCurrentUsersPlaylistsValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeaturedPlaylists
     * @param country  (optional)
     * @param locale  (optional)
     * @param timestamp  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedPlaylistsCall(String country, String locale, String timestamp, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browse/featured-playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeaturedPlaylistsValidateBeforeCall(String country, String locale, String timestamp, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getFeaturedPlaylistsCall(country, locale, timestamp, limit, offset, _callback);

    }

    /**
     * Get Featured Playlists 
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player&#39;s &#39;Browse&#39; tab). 
     * @param country  (optional)
     * @param locale  (optional)
     * @param timestamp  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingFeaturedPlaylistObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingFeaturedPlaylistObject getFeaturedPlaylists(String country, String locale, String timestamp, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingFeaturedPlaylistObject> localVarResp = getFeaturedPlaylistsWithHttpInfo(country, locale, timestamp, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get Featured Playlists 
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player&#39;s &#39;Browse&#39; tab). 
     * @param country  (optional)
     * @param locale  (optional)
     * @param timestamp  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingFeaturedPlaylistObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingFeaturedPlaylistObject> getFeaturedPlaylistsWithHttpInfo(String country, String locale, String timestamp, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getFeaturedPlaylistsValidateBeforeCall(country, locale, timestamp, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Featured Playlists  (asynchronously)
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player&#39;s &#39;Browse&#39; tab). 
     * @param country  (optional)
     * @param locale  (optional)
     * @param timestamp  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedPlaylistsAsync(String country, String locale, String timestamp, Integer limit, Integer offset, final ApiCallback<PagingFeaturedPlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeaturedPlaylistsValidateBeforeCall(country, locale, timestamp, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListUsersPlaylists
     * @param userId  (required)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListUsersPlaylistsCall(String userId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/playlists"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListUsersPlaylistsValidateBeforeCall(String userId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getListUsersPlaylists(Async)");
        }

        return getListUsersPlaylistsCall(userId, limit, offset, _callback);

    }

    /**
     * Get User&#39;s Playlists 
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @param userId  (required)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingPlaylistObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingPlaylistObject getListUsersPlaylists(String userId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingPlaylistObject> localVarResp = getListUsersPlaylistsWithHttpInfo(userId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get User&#39;s Playlists 
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @param userId  (required)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingPlaylistObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingPlaylistObject> getListUsersPlaylistsWithHttpInfo(String userId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getListUsersPlaylistsValidateBeforeCall(userId, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User&#39;s Playlists  (asynchronously)
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @param userId  (required)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListUsersPlaylistsAsync(String userId, Integer limit, Integer offset, final ApiCallback<PagingPlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListUsersPlaylistsValidateBeforeCall(userId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlaylist
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param additionalTypes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistCall(String playlistId, String market, String fields, String additionalTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (additionalTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("additional_types", additionalTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistValidateBeforeCall(String playlistId, String market, String fields, String additionalTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylist(Async)");
        }

        return getPlaylistCall(playlistId, market, fields, additionalTypes, _callback);

    }

    /**
     * Get Playlist 
     * Get a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param additionalTypes  (optional)
     * @return PlaylistObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PlaylistObject getPlaylist(String playlistId, String market, String fields, String additionalTypes) throws ApiException {
        ApiResponse<PlaylistObject> localVarResp = getPlaylistWithHttpInfo(playlistId, market, fields, additionalTypes);
        return localVarResp.getData();
    }

    /**
     * Get Playlist 
     * Get a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param additionalTypes  (optional)
     * @return ApiResponse&lt;PlaylistObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaylistObject> getPlaylistWithHttpInfo(String playlistId, String market, String fields, String additionalTypes) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistValidateBeforeCall(playlistId, market, fields, additionalTypes, null);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Playlist  (asynchronously)
     * Get a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param additionalTypes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistAsync(String playlistId, String market, String fields, String additionalTypes, final ApiCallback<PlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistValidateBeforeCall(playlistId, market, fields, additionalTypes, _callback);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlaylistCover
     * @param playlistId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of images </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistCoverCall(String playlistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/images"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistCoverValidateBeforeCall(String playlistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylistCover(Async)");
        }

        return getPlaylistCoverCall(playlistId, _callback);

    }

    /**
     * Get Playlist Cover Image 
     * Get the current image associated with a specific playlist. 
     * @param playlistId  (required)
     * @return List&lt;ImageObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of images </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public List<ImageObject> getPlaylistCover(String playlistId) throws ApiException {
        ApiResponse<List<ImageObject>> localVarResp = getPlaylistCoverWithHttpInfo(playlistId);
        return localVarResp.getData();
    }

    /**
     * Get Playlist Cover Image 
     * Get the current image associated with a specific playlist. 
     * @param playlistId  (required)
     * @return ApiResponse&lt;List&lt;ImageObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of images </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ImageObject>> getPlaylistCoverWithHttpInfo(String playlistId) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistCoverValidateBeforeCall(playlistId, null);
        Type localVarReturnType = new TypeToken<List<ImageObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Playlist Cover Image  (asynchronously)
     * Get the current image associated with a specific playlist. 
     * @param playlistId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of images </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistCoverAsync(String playlistId, final ApiCallback<List<ImageObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistCoverValidateBeforeCall(playlistId, _callback);
        Type localVarReturnType = new TypeToken<List<ImageObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlaylistsTracks
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistsTracksCall(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (additionalTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("additional_types", additionalTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistsTracksValidateBeforeCall(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylistsTracks(Async)");
        }

        return getPlaylistsTracksCall(playlistId, market, fields, limit, offset, additionalTypes, _callback);

    }

    /**
     * Get Playlist Items 
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @return PagingPlaylistTrackObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingPlaylistTrackObject getPlaylistsTracks(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes) throws ApiException {
        ApiResponse<PagingPlaylistTrackObject> localVarResp = getPlaylistsTracksWithHttpInfo(playlistId, market, fields, limit, offset, additionalTypes);
        return localVarResp.getData();
    }

    /**
     * Get Playlist Items 
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @return ApiResponse&lt;PagingPlaylistTrackObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingPlaylistTrackObject> getPlaylistsTracksWithHttpInfo(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistsTracksValidateBeforeCall(playlistId, market, fields, limit, offset, additionalTypes, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistTrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Playlist Items  (asynchronously)
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistsTracksAsync(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback<PagingPlaylistTrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistsTracksValidateBeforeCall(playlistId, market, fields, limit, offset, additionalTypes, _callback);
        Type localVarReturnType = new TypeToken<PagingPlaylistTrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeTracksPlaylist
     * @param playlistId  (required)
     * @param removeTracksPlaylistRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTracksPlaylistCall(String playlistId, RemoveTracksPlaylistRequest removeTracksPlaylistRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeTracksPlaylistRequest;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTracksPlaylistValidateBeforeCall(String playlistId, RemoveTracksPlaylistRequest removeTracksPlaylistRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling removeTracksPlaylist(Async)");
        }

        return removeTracksPlaylistCall(playlistId, removeTracksPlaylistRequest, _callback);

    }

    /**
     * Remove Playlist Items 
     * Remove one or more items from a user&#39;s playlist. 
     * @param playlistId  (required)
     * @param removeTracksPlaylistRequest  (optional)
     * @return ReorderOrReplacePlaylistsTracks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ReorderOrReplacePlaylistsTracks200Response removeTracksPlaylist(String playlistId, RemoveTracksPlaylistRequest removeTracksPlaylistRequest) throws ApiException {
        ApiResponse<ReorderOrReplacePlaylistsTracks200Response> localVarResp = removeTracksPlaylistWithHttpInfo(playlistId, removeTracksPlaylistRequest);
        return localVarResp.getData();
    }

    /**
     * Remove Playlist Items 
     * Remove one or more items from a user&#39;s playlist. 
     * @param playlistId  (required)
     * @param removeTracksPlaylistRequest  (optional)
     * @return ApiResponse&lt;ReorderOrReplacePlaylistsTracks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReorderOrReplacePlaylistsTracks200Response> removeTracksPlaylistWithHttpInfo(String playlistId, RemoveTracksPlaylistRequest removeTracksPlaylistRequest) throws ApiException {
        okhttp3.Call localVarCall = removeTracksPlaylistValidateBeforeCall(playlistId, removeTracksPlaylistRequest, null);
        Type localVarReturnType = new TypeToken<ReorderOrReplacePlaylistsTracks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Playlist Items  (asynchronously)
     * Remove one or more items from a user&#39;s playlist. 
     * @param playlistId  (required)
     * @param removeTracksPlaylistRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTracksPlaylistAsync(String playlistId, RemoveTracksPlaylistRequest removeTracksPlaylistRequest, final ApiCallback<ReorderOrReplacePlaylistsTracks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTracksPlaylistValidateBeforeCall(playlistId, removeTracksPlaylistRequest, _callback);
        Type localVarReturnType = new TypeToken<ReorderOrReplacePlaylistsTracks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reorderOrReplacePlaylistsTracks
     * @param playlistId  (required)
     * @param uris  (optional)
     * @param reorderOrReplacePlaylistsTracksRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reorderOrReplacePlaylistsTracksCall(String playlistId, String uris, ReorderOrReplacePlaylistsTracksRequest reorderOrReplacePlaylistsTracksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reorderOrReplacePlaylistsTracksRequest;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reorderOrReplacePlaylistsTracksValidateBeforeCall(String playlistId, String uris, ReorderOrReplacePlaylistsTracksRequest reorderOrReplacePlaylistsTracksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling reorderOrReplacePlaylistsTracks(Async)");
        }

        return reorderOrReplacePlaylistsTracksCall(playlistId, uris, reorderOrReplacePlaylistsTracksRequest, _callback);

    }

    /**
     * Update Playlist Items 
     * Either reorder or replace items in a playlist depending on the request&#39;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#39;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#39;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#39;t be applied together in a single request. 
     * @param playlistId  (required)
     * @param uris  (optional)
     * @param reorderOrReplacePlaylistsTracksRequest  (optional)
     * @return ReorderOrReplacePlaylistsTracks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ReorderOrReplacePlaylistsTracks200Response reorderOrReplacePlaylistsTracks(String playlistId, String uris, ReorderOrReplacePlaylistsTracksRequest reorderOrReplacePlaylistsTracksRequest) throws ApiException {
        ApiResponse<ReorderOrReplacePlaylistsTracks200Response> localVarResp = reorderOrReplacePlaylistsTracksWithHttpInfo(playlistId, uris, reorderOrReplacePlaylistsTracksRequest);
        return localVarResp.getData();
    }

    /**
     * Update Playlist Items 
     * Either reorder or replace items in a playlist depending on the request&#39;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#39;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#39;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#39;t be applied together in a single request. 
     * @param playlistId  (required)
     * @param uris  (optional)
     * @param reorderOrReplacePlaylistsTracksRequest  (optional)
     * @return ApiResponse&lt;ReorderOrReplacePlaylistsTracks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReorderOrReplacePlaylistsTracks200Response> reorderOrReplacePlaylistsTracksWithHttpInfo(String playlistId, String uris, ReorderOrReplacePlaylistsTracksRequest reorderOrReplacePlaylistsTracksRequest) throws ApiException {
        okhttp3.Call localVarCall = reorderOrReplacePlaylistsTracksValidateBeforeCall(playlistId, uris, reorderOrReplacePlaylistsTracksRequest, null);
        Type localVarReturnType = new TypeToken<ReorderOrReplacePlaylistsTracks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Playlist Items  (asynchronously)
     * Either reorder or replace items in a playlist depending on the request&#39;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#39;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#39;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#39;t be applied together in a single request. 
     * @param playlistId  (required)
     * @param uris  (optional)
     * @param reorderOrReplacePlaylistsTracksRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reorderOrReplacePlaylistsTracksAsync(String playlistId, String uris, ReorderOrReplacePlaylistsTracksRequest reorderOrReplacePlaylistsTracksRequest, final ApiCallback<ReorderOrReplacePlaylistsTracks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reorderOrReplacePlaylistsTracksValidateBeforeCall(playlistId, uris, reorderOrReplacePlaylistsTracksRequest, _callback);
        Type localVarReturnType = new TypeToken<ReorderOrReplacePlaylistsTracks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unfollowPlaylist_0
     * @param playlistId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unfollowPlaylist_0Call(String playlistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/followers"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfollowPlaylist_0ValidateBeforeCall(String playlistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling unfollowPlaylist_0(Async)");
        }

        return unfollowPlaylist_0Call(playlistId, _callback);

    }

    /**
     * Unfollow Playlist 
     * Remove the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public void unfollowPlaylist_0(String playlistId) throws ApiException {
        unfollowPlaylist_0WithHttpInfo(playlistId);
    }

    /**
     * Unfollow Playlist 
     * Remove the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unfollowPlaylist_0WithHttpInfo(String playlistId) throws ApiException {
        okhttp3.Call localVarCall = unfollowPlaylist_0ValidateBeforeCall(playlistId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unfollow Playlist  (asynchronously)
     * Remove the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unfollowPlaylist_0Async(String playlistId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfollowPlaylist_0ValidateBeforeCall(playlistId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadCustomPlaylistCover
     * @param playlistId  (required)
     * @param body The new cover image of the playlist as a Base64 encoded JPEG image. Maximum payload size is 256KB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image uploaded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCustomPlaylistCoverCall(String playlistId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/images"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "image/jpeg"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadCustomPlaylistCoverValidateBeforeCall(String playlistId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling uploadCustomPlaylistCover(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uploadCustomPlaylistCover(Async)");
        }

        return uploadCustomPlaylistCoverCall(playlistId, body, _callback);

    }

    /**
     * Add Custom Playlist Cover Image 
     * Replace the image used to represent a specific playlist. 
     * @param playlistId  (required)
     * @param body The new cover image of the playlist as a Base64 encoded JPEG image. Maximum payload size is 256KB. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image uploaded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public void uploadCustomPlaylistCover(String playlistId, String body) throws ApiException {
        uploadCustomPlaylistCoverWithHttpInfo(playlistId, body);
    }

    /**
     * Add Custom Playlist Cover Image 
     * Replace the image used to represent a specific playlist. 
     * @param playlistId  (required)
     * @param body The new cover image of the playlist as a Base64 encoded JPEG image. Maximum payload size is 256KB. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image uploaded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadCustomPlaylistCoverWithHttpInfo(String playlistId, String body) throws ApiException {
        okhttp3.Call localVarCall = uploadCustomPlaylistCoverValidateBeforeCall(playlistId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add Custom Playlist Cover Image  (asynchronously)
     * Replace the image used to represent a specific playlist. 
     * @param playlistId  (required)
     * @param body The new cover image of the playlist as a Base64 encoded JPEG image. Maximum payload size is 256KB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image uploaded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCustomPlaylistCoverAsync(String playlistId, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadCustomPlaylistCoverValidateBeforeCall(playlistId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
