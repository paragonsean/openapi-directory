/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SectionObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:56.088414-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SectionObject {
  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private BigDecimal confidence;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Integer key;

  public static final String SERIALIZED_NAME_KEY_CONFIDENCE = "key_confidence";
  @SerializedName(SERIALIZED_NAME_KEY_CONFIDENCE)
  private BigDecimal keyConfidence;

  public static final String SERIALIZED_NAME_LOUDNESS = "loudness";
  @SerializedName(SERIALIZED_NAME_LOUDNESS)
  private BigDecimal loudness;

  /**
   * Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \&quot;minor\&quot;, a 1 for \&quot;major\&quot;, or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    NUMBER_MINUS_1(new BigDecimal("-1")),
    
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    ModeEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(BigDecimal value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(new BigDecimal(value));
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(new BigDecimal(value));
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_MODE_CONFIDENCE = "mode_confidence";
  @SerializedName(SERIALIZED_NAME_MODE_CONFIDENCE)
  private BigDecimal modeConfidence;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private BigDecimal start;

  public static final String SERIALIZED_NAME_TEMPO = "tempo";
  @SerializedName(SERIALIZED_NAME_TEMPO)
  private BigDecimal tempo;

  public static final String SERIALIZED_NAME_TEMPO_CONFIDENCE = "tempo_confidence";
  @SerializedName(SERIALIZED_NAME_TEMPO_CONFIDENCE)
  private BigDecimal tempoConfidence;

  public static final String SERIALIZED_NAME_TIME_SIGNATURE = "time_signature";
  @SerializedName(SERIALIZED_NAME_TIME_SIGNATURE)
  private Integer timeSignature;

  public static final String SERIALIZED_NAME_TIME_SIGNATURE_CONFIDENCE = "time_signature_confidence";
  @SerializedName(SERIALIZED_NAME_TIME_SIGNATURE_CONFIDENCE)
  private BigDecimal timeSignatureConfidence;

  public SectionObject() {
  }

  public SectionObject confidence(BigDecimal confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * The confidence, from 0.0 to 1.0, of the reliability of the section&#39;s \&quot;designation\&quot;.
   * minimum: 0
   * maximum: 1
   * @return confidence
   */
  @javax.annotation.Nullable
  public BigDecimal getConfidence() {
    return confidence;
  }

  public void setConfidence(BigDecimal confidence) {
    this.confidence = confidence;
  }


  public SectionObject duration(BigDecimal duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration (in seconds) of the section.
   * @return duration
   */
  @javax.annotation.Nullable
  public BigDecimal getDuration() {
    return duration;
  }

  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public SectionObject key(Integer key) {
    this.key = key;
    return this;
  }

  /**
   * The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 &#x3D; C, 1 &#x3D; C♯/D♭, 2 &#x3D; D, and so on). If no key was detected, the value is -1.
   * @return key
   */
  @javax.annotation.Nullable
  public Integer getKey() {
    return key;
  }

  public void setKey(Integer key) {
    this.key = key;
  }


  public SectionObject keyConfidence(BigDecimal keyConfidence) {
    this.keyConfidence = keyConfidence;
    return this;
  }

  /**
   * The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.
   * minimum: 0
   * maximum: 1
   * @return keyConfidence
   */
  @javax.annotation.Nullable
  public BigDecimal getKeyConfidence() {
    return keyConfidence;
  }

  public void setKeyConfidence(BigDecimal keyConfidence) {
    this.keyConfidence = keyConfidence;
  }


  public SectionObject loudness(BigDecimal loudness) {
    this.loudness = loudness;
    return this;
  }

  /**
   * The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.
   * @return loudness
   */
  @javax.annotation.Nullable
  public BigDecimal getLoudness() {
    return loudness;
  }

  public void setLoudness(BigDecimal loudness) {
    this.loudness = loudness;
  }


  public SectionObject mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \&quot;minor\&quot;, a 1 for \&quot;major\&quot;, or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public SectionObject modeConfidence(BigDecimal modeConfidence) {
    this.modeConfidence = modeConfidence;
    return this;
  }

  /**
   * The confidence, from 0.0 to 1.0, of the reliability of the &#x60;mode&#x60;.
   * minimum: 0
   * maximum: 1
   * @return modeConfidence
   */
  @javax.annotation.Nullable
  public BigDecimal getModeConfidence() {
    return modeConfidence;
  }

  public void setModeConfidence(BigDecimal modeConfidence) {
    this.modeConfidence = modeConfidence;
  }


  public SectionObject start(BigDecimal start) {
    this.start = start;
    return this;
  }

  /**
   * The starting point (in seconds) of the section.
   * @return start
   */
  @javax.annotation.Nullable
  public BigDecimal getStart() {
    return start;
  }

  public void setStart(BigDecimal start) {
    this.start = start;
  }


  public SectionObject tempo(BigDecimal tempo) {
    this.tempo = tempo;
    return this;
  }

  /**
   * The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
   * @return tempo
   */
  @javax.annotation.Nullable
  public BigDecimal getTempo() {
    return tempo;
  }

  public void setTempo(BigDecimal tempo) {
    this.tempo = tempo;
  }


  public SectionObject tempoConfidence(BigDecimal tempoConfidence) {
    this.tempoConfidence = tempoConfidence;
    return this;
  }

  /**
   * The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don&#39;t contain tempo (like pure speech) which would correspond to a low value in this field.
   * minimum: 0
   * maximum: 1
   * @return tempoConfidence
   */
  @javax.annotation.Nullable
  public BigDecimal getTempoConfidence() {
    return tempoConfidence;
  }

  public void setTempoConfidence(BigDecimal tempoConfidence) {
    this.tempoConfidence = tempoConfidence;
  }


  public SectionObject timeSignature(Integer timeSignature) {
    this.timeSignature = timeSignature;
    return this;
  }

  /**
   * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \&quot;3/4\&quot;, to \&quot;7/4\&quot;.
   * minimum: 3
   * maximum: 7
   * @return timeSignature
   */
  @javax.annotation.Nullable
  public Integer getTimeSignature() {
    return timeSignature;
  }

  public void setTimeSignature(Integer timeSignature) {
    this.timeSignature = timeSignature;
  }


  public SectionObject timeSignatureConfidence(BigDecimal timeSignatureConfidence) {
    this.timeSignatureConfidence = timeSignatureConfidence;
    return this;
  }

  /**
   * The confidence, from 0.0 to 1.0, of the reliability of the &#x60;time_signature&#x60;. Sections with time signature changes may correspond to low values in this field.
   * minimum: 0
   * maximum: 1
   * @return timeSignatureConfidence
   */
  @javax.annotation.Nullable
  public BigDecimal getTimeSignatureConfidence() {
    return timeSignatureConfidence;
  }

  public void setTimeSignatureConfidence(BigDecimal timeSignatureConfidence) {
    this.timeSignatureConfidence = timeSignatureConfidence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SectionObject sectionObject = (SectionObject) o;
    return Objects.equals(this.confidence, sectionObject.confidence) &&
        Objects.equals(this.duration, sectionObject.duration) &&
        Objects.equals(this.key, sectionObject.key) &&
        Objects.equals(this.keyConfidence, sectionObject.keyConfidence) &&
        Objects.equals(this.loudness, sectionObject.loudness) &&
        Objects.equals(this.mode, sectionObject.mode) &&
        Objects.equals(this.modeConfidence, sectionObject.modeConfidence) &&
        Objects.equals(this.start, sectionObject.start) &&
        Objects.equals(this.tempo, sectionObject.tempo) &&
        Objects.equals(this.tempoConfidence, sectionObject.tempoConfidence) &&
        Objects.equals(this.timeSignature, sectionObject.timeSignature) &&
        Objects.equals(this.timeSignatureConfidence, sectionObject.timeSignatureConfidence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidence, duration, key, keyConfidence, loudness, mode, modeConfidence, start, tempo, tempoConfidence, timeSignature, timeSignatureConfidence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SectionObject {\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    keyConfidence: ").append(toIndentedString(keyConfidence)).append("\n");
    sb.append("    loudness: ").append(toIndentedString(loudness)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    modeConfidence: ").append(toIndentedString(modeConfidence)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    tempo: ").append(toIndentedString(tempo)).append("\n");
    sb.append("    tempoConfidence: ").append(toIndentedString(tempoConfidence)).append("\n");
    sb.append("    timeSignature: ").append(toIndentedString(timeSignature)).append("\n");
    sb.append("    timeSignatureConfidence: ").append(toIndentedString(timeSignatureConfidence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidence");
    openapiFields.add("duration");
    openapiFields.add("key");
    openapiFields.add("key_confidence");
    openapiFields.add("loudness");
    openapiFields.add("mode");
    openapiFields.add("mode_confidence");
    openapiFields.add("start");
    openapiFields.add("tempo");
    openapiFields.add("tempo_confidence");
    openapiFields.add("time_signature");
    openapiFields.add("time_signature_confidence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SectionObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SectionObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SectionObject is not found in the empty JSON string", SectionObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SectionObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SectionObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SectionObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SectionObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SectionObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SectionObject.class));

       return (TypeAdapter<T>) new TypeAdapter<SectionObject>() {
           @Override
           public void write(JsonWriter out, SectionObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SectionObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SectionObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SectionObject
   * @throws IOException if the JSON string is invalid with respect to SectionObject
   */
  public static SectionObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SectionObject.class);
  }

  /**
   * Convert an instance of SectionObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

