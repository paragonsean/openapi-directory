/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RecommendationSeedObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:56.088414-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationSeedObject {
  public static final String SERIALIZED_NAME_AFTER_FILTERING_SIZE = "afterFilteringSize";
  @SerializedName(SERIALIZED_NAME_AFTER_FILTERING_SIZE)
  private Integer afterFilteringSize;

  public static final String SERIALIZED_NAME_AFTER_RELINKING_SIZE = "afterRelinkingSize";
  @SerializedName(SERIALIZED_NAME_AFTER_RELINKING_SIZE)
  private Integer afterRelinkingSize;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INITIAL_POOL_SIZE = "initialPoolSize";
  @SerializedName(SERIALIZED_NAME_INITIAL_POOL_SIZE)
  private Integer initialPoolSize;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public RecommendationSeedObject() {
  }

  public RecommendationSeedObject afterFilteringSize(Integer afterFilteringSize) {
    this.afterFilteringSize = afterFilteringSize;
    return this;
  }

  /**
   * The number of tracks available after min\\_\\* and max\\_\\* filters have been applied. 
   * @return afterFilteringSize
   */
  @javax.annotation.Nullable
  public Integer getAfterFilteringSize() {
    return afterFilteringSize;
  }

  public void setAfterFilteringSize(Integer afterFilteringSize) {
    this.afterFilteringSize = afterFilteringSize;
  }


  public RecommendationSeedObject afterRelinkingSize(Integer afterRelinkingSize) {
    this.afterRelinkingSize = afterRelinkingSize;
    return this;
  }

  /**
   * The number of tracks available after relinking for regional availability. 
   * @return afterRelinkingSize
   */
  @javax.annotation.Nullable
  public Integer getAfterRelinkingSize() {
    return afterRelinkingSize;
  }

  public void setAfterRelinkingSize(Integer afterRelinkingSize) {
    this.afterRelinkingSize = afterRelinkingSize;
  }


  public RecommendationSeedObject href(String href) {
    this.href = href;
    return this;
  }

  /**
   * A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be &#x60;null&#x60;. 
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public RecommendationSeedObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id used to select this seed. This will be the same as the string used in the &#x60;seed_artists&#x60;, &#x60;seed_tracks&#x60; or &#x60;seed_genres&#x60; parameter. 
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RecommendationSeedObject initialPoolSize(Integer initialPoolSize) {
    this.initialPoolSize = initialPoolSize;
    return this;
  }

  /**
   * The number of recommended tracks available for this seed. 
   * @return initialPoolSize
   */
  @javax.annotation.Nullable
  public Integer getInitialPoolSize() {
    return initialPoolSize;
  }

  public void setInitialPoolSize(Integer initialPoolSize) {
    this.initialPoolSize = initialPoolSize;
  }


  public RecommendationSeedObject type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The entity type of this seed. One of &#x60;artist&#x60;, &#x60;track&#x60; or &#x60;genre&#x60;. 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationSeedObject recommendationSeedObject = (RecommendationSeedObject) o;
    return Objects.equals(this.afterFilteringSize, recommendationSeedObject.afterFilteringSize) &&
        Objects.equals(this.afterRelinkingSize, recommendationSeedObject.afterRelinkingSize) &&
        Objects.equals(this.href, recommendationSeedObject.href) &&
        Objects.equals(this.id, recommendationSeedObject.id) &&
        Objects.equals(this.initialPoolSize, recommendationSeedObject.initialPoolSize) &&
        Objects.equals(this.type, recommendationSeedObject.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(afterFilteringSize, afterRelinkingSize, href, id, initialPoolSize, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationSeedObject {\n");
    sb.append("    afterFilteringSize: ").append(toIndentedString(afterFilteringSize)).append("\n");
    sb.append("    afterRelinkingSize: ").append(toIndentedString(afterRelinkingSize)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initialPoolSize: ").append(toIndentedString(initialPoolSize)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("afterFilteringSize");
    openapiFields.add("afterRelinkingSize");
    openapiFields.add("href");
    openapiFields.add("id");
    openapiFields.add("initialPoolSize");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationSeedObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationSeedObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationSeedObject is not found in the empty JSON string", RecommendationSeedObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationSeedObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationSeedObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationSeedObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationSeedObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationSeedObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationSeedObject.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationSeedObject>() {
           @Override
           public void write(JsonWriter out, RecommendationSeedObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationSeedObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationSeedObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationSeedObject
   * @throws IOException if the JSON string is invalid with respect to RecommendationSeedObject
   */
  public static RecommendationSeedObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationSeedObject.class);
  }

  /**
   * Convert an instance of RecommendationSeedObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

