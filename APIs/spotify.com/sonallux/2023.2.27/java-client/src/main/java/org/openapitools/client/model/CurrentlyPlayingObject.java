/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContextObject;
import org.openapitools.client.model.CurrentlyPlayingContextObjectItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CurrentlyPlayingObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:56.088414-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CurrentlyPlayingObject {
  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private ContextObject context;

  public static final String SERIALIZED_NAME_CURRENTLY_PLAYING_TYPE = "currently_playing_type";
  @SerializedName(SERIALIZED_NAME_CURRENTLY_PLAYING_TYPE)
  private String currentlyPlayingType;

  public static final String SERIALIZED_NAME_IS_PLAYING = "is_playing";
  @SerializedName(SERIALIZED_NAME_IS_PLAYING)
  private Boolean isPlaying;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private CurrentlyPlayingContextObjectItem item;

  public static final String SERIALIZED_NAME_PROGRESS_MS = "progress_ms";
  @SerializedName(SERIALIZED_NAME_PROGRESS_MS)
  private Integer progressMs;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public CurrentlyPlayingObject() {
  }

  public CurrentlyPlayingObject context(ContextObject context) {
    this.context = context;
    return this;
  }

  /**
   * A Context Object. Can be &#x60;null&#x60;.
   * @return context
   */
  @javax.annotation.Nullable
  public ContextObject getContext() {
    return context;
  }

  public void setContext(ContextObject context) {
    this.context = context;
  }


  public CurrentlyPlayingObject currentlyPlayingType(String currentlyPlayingType) {
    this.currentlyPlayingType = currentlyPlayingType;
    return this;
  }

  /**
   * The object type of the currently playing item. Can be one of &#x60;track&#x60;, &#x60;episode&#x60;, &#x60;ad&#x60; or &#x60;unknown&#x60;. 
   * @return currentlyPlayingType
   */
  @javax.annotation.Nullable
  public String getCurrentlyPlayingType() {
    return currentlyPlayingType;
  }

  public void setCurrentlyPlayingType(String currentlyPlayingType) {
    this.currentlyPlayingType = currentlyPlayingType;
  }


  public CurrentlyPlayingObject isPlaying(Boolean isPlaying) {
    this.isPlaying = isPlaying;
    return this;
  }

  /**
   * If something is currently playing, return &#x60;true&#x60;.
   * @return isPlaying
   */
  @javax.annotation.Nullable
  public Boolean getIsPlaying() {
    return isPlaying;
  }

  public void setIsPlaying(Boolean isPlaying) {
    this.isPlaying = isPlaying;
  }


  public CurrentlyPlayingObject item(CurrentlyPlayingContextObjectItem item) {
    this.item = item;
    return this;
  }

  /**
   * Get item
   * @return item
   */
  @javax.annotation.Nullable
  public CurrentlyPlayingContextObjectItem getItem() {
    return item;
  }

  public void setItem(CurrentlyPlayingContextObjectItem item) {
    this.item = item;
  }


  public CurrentlyPlayingObject progressMs(Integer progressMs) {
    this.progressMs = progressMs;
    return this;
  }

  /**
   * Progress into the currently playing track or episode. Can be &#x60;null&#x60;.
   * @return progressMs
   */
  @javax.annotation.Nullable
  public Integer getProgressMs() {
    return progressMs;
  }

  public void setProgressMs(Integer progressMs) {
    this.progressMs = progressMs;
  }


  public CurrentlyPlayingObject timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Unix Millisecond Timestamp when data was fetched
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentlyPlayingObject currentlyPlayingObject = (CurrentlyPlayingObject) o;
    return Objects.equals(this.context, currentlyPlayingObject.context) &&
        Objects.equals(this.currentlyPlayingType, currentlyPlayingObject.currentlyPlayingType) &&
        Objects.equals(this.isPlaying, currentlyPlayingObject.isPlaying) &&
        Objects.equals(this.item, currentlyPlayingObject.item) &&
        Objects.equals(this.progressMs, currentlyPlayingObject.progressMs) &&
        Objects.equals(this.timestamp, currentlyPlayingObject.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, currentlyPlayingType, isPlaying, item, progressMs, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentlyPlayingObject {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    currentlyPlayingType: ").append(toIndentedString(currentlyPlayingType)).append("\n");
    sb.append("    isPlaying: ").append(toIndentedString(isPlaying)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    progressMs: ").append(toIndentedString(progressMs)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("context");
    openapiFields.add("currently_playing_type");
    openapiFields.add("is_playing");
    openapiFields.add("item");
    openapiFields.add("progress_ms");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CurrentlyPlayingObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CurrentlyPlayingObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrentlyPlayingObject is not found in the empty JSON string", CurrentlyPlayingObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CurrentlyPlayingObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrentlyPlayingObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        ContextObject.validateJsonElement(jsonObj.get("context"));
      }
      if ((jsonObj.get("currently_playing_type") != null && !jsonObj.get("currently_playing_type").isJsonNull()) && !jsonObj.get("currently_playing_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currently_playing_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currently_playing_type").toString()));
      }
      // validate the optional field `item`
      if (jsonObj.get("item") != null && !jsonObj.get("item").isJsonNull()) {
        CurrentlyPlayingContextObjectItem.validateJsonElement(jsonObj.get("item"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrentlyPlayingObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrentlyPlayingObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrentlyPlayingObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrentlyPlayingObject.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrentlyPlayingObject>() {
           @Override
           public void write(JsonWriter out, CurrentlyPlayingObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrentlyPlayingObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CurrentlyPlayingObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurrentlyPlayingObject
   * @throws IOException if the JSON string is invalid with respect to CurrentlyPlayingObject
   */
  public static CurrentlyPlayingObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrentlyPlayingObject.class);
  }

  /**
   * Convert an instance of CurrentlyPlayingObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

