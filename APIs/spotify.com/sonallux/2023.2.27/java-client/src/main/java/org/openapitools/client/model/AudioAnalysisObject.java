/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AudioAnalysisObjectMeta;
import org.openapitools.client.model.AudioAnalysisObjectTrack;
import org.openapitools.client.model.SectionObject;
import org.openapitools.client.model.SegmentObject;
import org.openapitools.client.model.TimeIntervalObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AudioAnalysisObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:56.088414-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioAnalysisObject {
  public static final String SERIALIZED_NAME_BARS = "bars";
  @SerializedName(SERIALIZED_NAME_BARS)
  private List<TimeIntervalObject> bars = new ArrayList<>();

  public static final String SERIALIZED_NAME_BEATS = "beats";
  @SerializedName(SERIALIZED_NAME_BEATS)
  private List<TimeIntervalObject> beats = new ArrayList<>();

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private AudioAnalysisObjectMeta meta;

  public static final String SERIALIZED_NAME_SECTIONS = "sections";
  @SerializedName(SERIALIZED_NAME_SECTIONS)
  private List<SectionObject> sections = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private List<SegmentObject> segments = new ArrayList<>();

  public static final String SERIALIZED_NAME_TATUMS = "tatums";
  @SerializedName(SERIALIZED_NAME_TATUMS)
  private List<TimeIntervalObject> tatums = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACK = "track";
  @SerializedName(SERIALIZED_NAME_TRACK)
  private AudioAnalysisObjectTrack track;

  public AudioAnalysisObject() {
  }

  public AudioAnalysisObject bars(List<TimeIntervalObject> bars) {
    this.bars = bars;
    return this;
  }

  public AudioAnalysisObject addBarsItem(TimeIntervalObject barsItem) {
    if (this.bars == null) {
      this.bars = new ArrayList<>();
    }
    this.bars.add(barsItem);
    return this;
  }

  /**
   * The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.
   * @return bars
   */
  @javax.annotation.Nullable
  public List<TimeIntervalObject> getBars() {
    return bars;
  }

  public void setBars(List<TimeIntervalObject> bars) {
    this.bars = bars;
  }


  public AudioAnalysisObject beats(List<TimeIntervalObject> beats) {
    this.beats = beats;
    return this;
  }

  public AudioAnalysisObject addBeatsItem(TimeIntervalObject beatsItem) {
    if (this.beats == null) {
      this.beats = new ArrayList<>();
    }
    this.beats.add(beatsItem);
    return this;
  }

  /**
   * The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.
   * @return beats
   */
  @javax.annotation.Nullable
  public List<TimeIntervalObject> getBeats() {
    return beats;
  }

  public void setBeats(List<TimeIntervalObject> beats) {
    this.beats = beats;
  }


  public AudioAnalysisObject meta(AudioAnalysisObjectMeta meta) {
    this.meta = meta;
    return this;
  }

  /**
   * Get meta
   * @return meta
   */
  @javax.annotation.Nullable
  public AudioAnalysisObjectMeta getMeta() {
    return meta;
  }

  public void setMeta(AudioAnalysisObjectMeta meta) {
    this.meta = meta;
  }


  public AudioAnalysisObject sections(List<SectionObject> sections) {
    this.sections = sections;
    return this;
  }

  public AudioAnalysisObject addSectionsItem(SectionObject sectionsItem) {
    if (this.sections == null) {
      this.sections = new ArrayList<>();
    }
    this.sections.add(sectionsItem);
    return this;
  }

  /**
   * Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.
   * @return sections
   */
  @javax.annotation.Nullable
  public List<SectionObject> getSections() {
    return sections;
  }

  public void setSections(List<SectionObject> sections) {
    this.sections = sections;
  }


  public AudioAnalysisObject segments(List<SegmentObject> segments) {
    this.segments = segments;
    return this;
  }

  public AudioAnalysisObject addSegmentsItem(SegmentObject segmentsItem) {
    if (this.segments == null) {
      this.segments = new ArrayList<>();
    }
    this.segments.add(segmentsItem);
    return this;
  }

  /**
   * Each segment contains a roughly conisistent sound throughout its duration.
   * @return segments
   */
  @javax.annotation.Nullable
  public List<SegmentObject> getSegments() {
    return segments;
  }

  public void setSegments(List<SegmentObject> segments) {
    this.segments = segments;
  }


  public AudioAnalysisObject tatums(List<TimeIntervalObject> tatums) {
    this.tatums = tatums;
    return this;
  }

  public AudioAnalysisObject addTatumsItem(TimeIntervalObject tatumsItem) {
    if (this.tatums == null) {
      this.tatums = new ArrayList<>();
    }
    this.tatums.add(tatumsItem);
    return this;
  }

  /**
   * A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).
   * @return tatums
   */
  @javax.annotation.Nullable
  public List<TimeIntervalObject> getTatums() {
    return tatums;
  }

  public void setTatums(List<TimeIntervalObject> tatums) {
    this.tatums = tatums;
  }


  public AudioAnalysisObject track(AudioAnalysisObjectTrack track) {
    this.track = track;
    return this;
  }

  /**
   * Get track
   * @return track
   */
  @javax.annotation.Nullable
  public AudioAnalysisObjectTrack getTrack() {
    return track;
  }

  public void setTrack(AudioAnalysisObjectTrack track) {
    this.track = track;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioAnalysisObject audioAnalysisObject = (AudioAnalysisObject) o;
    return Objects.equals(this.bars, audioAnalysisObject.bars) &&
        Objects.equals(this.beats, audioAnalysisObject.beats) &&
        Objects.equals(this.meta, audioAnalysisObject.meta) &&
        Objects.equals(this.sections, audioAnalysisObject.sections) &&
        Objects.equals(this.segments, audioAnalysisObject.segments) &&
        Objects.equals(this.tatums, audioAnalysisObject.tatums) &&
        Objects.equals(this.track, audioAnalysisObject.track);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bars, beats, meta, sections, segments, tatums, track);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioAnalysisObject {\n");
    sb.append("    bars: ").append(toIndentedString(bars)).append("\n");
    sb.append("    beats: ").append(toIndentedString(beats)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    tatums: ").append(toIndentedString(tatums)).append("\n");
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bars");
    openapiFields.add("beats");
    openapiFields.add("meta");
    openapiFields.add("sections");
    openapiFields.add("segments");
    openapiFields.add("tatums");
    openapiFields.add("track");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioAnalysisObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioAnalysisObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioAnalysisObject is not found in the empty JSON string", AudioAnalysisObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioAnalysisObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioAnalysisObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bars") != null && !jsonObj.get("bars").isJsonNull()) {
        JsonArray jsonArraybars = jsonObj.getAsJsonArray("bars");
        if (jsonArraybars != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bars").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bars` to be an array in the JSON string but got `%s`", jsonObj.get("bars").toString()));
          }

          // validate the optional field `bars` (array)
          for (int i = 0; i < jsonArraybars.size(); i++) {
            TimeIntervalObject.validateJsonElement(jsonArraybars.get(i));
          };
        }
      }
      if (jsonObj.get("beats") != null && !jsonObj.get("beats").isJsonNull()) {
        JsonArray jsonArraybeats = jsonObj.getAsJsonArray("beats");
        if (jsonArraybeats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("beats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `beats` to be an array in the JSON string but got `%s`", jsonObj.get("beats").toString()));
          }

          // validate the optional field `beats` (array)
          for (int i = 0; i < jsonArraybeats.size(); i++) {
            TimeIntervalObject.validateJsonElement(jsonArraybeats.get(i));
          };
        }
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        AudioAnalysisObjectMeta.validateJsonElement(jsonObj.get("meta"));
      }
      if (jsonObj.get("sections") != null && !jsonObj.get("sections").isJsonNull()) {
        JsonArray jsonArraysections = jsonObj.getAsJsonArray("sections");
        if (jsonArraysections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sections` to be an array in the JSON string but got `%s`", jsonObj.get("sections").toString()));
          }

          // validate the optional field `sections` (array)
          for (int i = 0; i < jsonArraysections.size(); i++) {
            SectionObject.validateJsonElement(jsonArraysections.get(i));
          };
        }
      }
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull()) {
        JsonArray jsonArraysegments = jsonObj.getAsJsonArray("segments");
        if (jsonArraysegments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("segments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `segments` to be an array in the JSON string but got `%s`", jsonObj.get("segments").toString()));
          }

          // validate the optional field `segments` (array)
          for (int i = 0; i < jsonArraysegments.size(); i++) {
            SegmentObject.validateJsonElement(jsonArraysegments.get(i));
          };
        }
      }
      if (jsonObj.get("tatums") != null && !jsonObj.get("tatums").isJsonNull()) {
        JsonArray jsonArraytatums = jsonObj.getAsJsonArray("tatums");
        if (jsonArraytatums != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tatums").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tatums` to be an array in the JSON string but got `%s`", jsonObj.get("tatums").toString()));
          }

          // validate the optional field `tatums` (array)
          for (int i = 0; i < jsonArraytatums.size(); i++) {
            TimeIntervalObject.validateJsonElement(jsonArraytatums.get(i));
          };
        }
      }
      // validate the optional field `track`
      if (jsonObj.get("track") != null && !jsonObj.get("track").isJsonNull()) {
        AudioAnalysisObjectTrack.validateJsonElement(jsonObj.get("track"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioAnalysisObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioAnalysisObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioAnalysisObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioAnalysisObject.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioAnalysisObject>() {
           @Override
           public void write(JsonWriter out, AudioAnalysisObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioAnalysisObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioAnalysisObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioAnalysisObject
   * @throws IOException if the JSON string is invalid with respect to AudioAnalysisObject
   */
  public static AudioAnalysisObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioAnalysisObject.class);
  }

  /**
   * Convert an instance of AudioAnalysisObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

