/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthorObject;
import org.openapitools.client.model.CopyrightObject;
import org.openapitools.client.model.ExternalUrlObject;
import org.openapitools.client.model.ImageObject;
import org.openapitools.client.model.NarratorObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimplifiedAudiobookObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:56.088414-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimplifiedAudiobookObject {
  public static final String SERIALIZED_NAME_AUTHORS = "authors";
  @SerializedName(SERIALIZED_NAME_AUTHORS)
  private List<AuthorObject> authors = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_MARKETS = "available_markets";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_MARKETS)
  private List<String> availableMarkets = new ArrayList<>();

  public static final String SERIALIZED_NAME_COPYRIGHTS = "copyrights";
  @SerializedName(SERIALIZED_NAME_COPYRIGHTS)
  private List<CopyrightObject> copyrights = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EDITION = "edition";
  @SerializedName(SERIALIZED_NAME_EDITION)
  private String edition;

  public static final String SERIALIZED_NAME_EXPLICIT = "explicit";
  @SerializedName(SERIALIZED_NAME_EXPLICIT)
  private Boolean explicit;

  public static final String SERIALIZED_NAME_EXTERNAL_URLS = "external_urls";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URLS)
  private ExternalUrlObject externalUrls;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_HTML_DESCRIPTION = "html_description";
  @SerializedName(SERIALIZED_NAME_HTML_DESCRIPTION)
  private String htmlDescription;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<ImageObject> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private List<String> languages = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NARRATORS = "narrators";
  @SerializedName(SERIALIZED_NAME_NARRATORS)
  private List<NarratorObject> narrators = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_TOTAL_CHAPTERS = "total_chapters";
  @SerializedName(SERIALIZED_NAME_TOTAL_CHAPTERS)
  private Integer totalChapters;

  /**
   * The object type. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    AUDIOBOOK("audiobook");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public SimplifiedAudiobookObject() {
  }

  public SimplifiedAudiobookObject authors(List<AuthorObject> authors) {
    this.authors = authors;
    return this;
  }

  public SimplifiedAudiobookObject addAuthorsItem(AuthorObject authorsItem) {
    if (this.authors == null) {
      this.authors = new ArrayList<>();
    }
    this.authors.add(authorsItem);
    return this;
  }

  /**
   * The author(s) for the audiobook. 
   * @return authors
   */
  @javax.annotation.Nonnull
  public List<AuthorObject> getAuthors() {
    return authors;
  }

  public void setAuthors(List<AuthorObject> authors) {
    this.authors = authors;
  }


  public SimplifiedAudiobookObject availableMarkets(List<String> availableMarkets) {
    this.availableMarkets = availableMarkets;
    return this;
  }

  public SimplifiedAudiobookObject addAvailableMarketsItem(String availableMarketsItem) {
    if (this.availableMarkets == null) {
      this.availableMarkets = new ArrayList<>();
    }
    this.availableMarkets.add(availableMarketsItem);
    return this;
  }

  /**
   * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
   * @return availableMarkets
   */
  @javax.annotation.Nonnull
  public List<String> getAvailableMarkets() {
    return availableMarkets;
  }

  public void setAvailableMarkets(List<String> availableMarkets) {
    this.availableMarkets = availableMarkets;
  }


  public SimplifiedAudiobookObject copyrights(List<CopyrightObject> copyrights) {
    this.copyrights = copyrights;
    return this;
  }

  public SimplifiedAudiobookObject addCopyrightsItem(CopyrightObject copyrightsItem) {
    if (this.copyrights == null) {
      this.copyrights = new ArrayList<>();
    }
    this.copyrights.add(copyrightsItem);
    return this;
  }

  /**
   * The copyright statements of the audiobook. 
   * @return copyrights
   */
  @javax.annotation.Nonnull
  public List<CopyrightObject> getCopyrights() {
    return copyrights;
  }

  public void setCopyrights(List<CopyrightObject> copyrights) {
    this.copyrights = copyrights;
  }


  public SimplifiedAudiobookObject description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the audiobook. HTML tags are stripped away from this field, use &#x60;html_description&#x60; field in case HTML tags are needed. 
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SimplifiedAudiobookObject edition(String edition) {
    this.edition = edition;
    return this;
  }

  /**
   * The edition of the audiobook. 
   * @return edition
   */
  @javax.annotation.Nullable
  public String getEdition() {
    return edition;
  }

  public void setEdition(String edition) {
    this.edition = edition;
  }


  public SimplifiedAudiobookObject explicit(Boolean explicit) {
    this.explicit = explicit;
    return this;
  }

  /**
   * Whether or not the audiobook has explicit content (true &#x3D; yes it does; false &#x3D; no it does not OR unknown). 
   * @return explicit
   */
  @javax.annotation.Nonnull
  public Boolean getExplicit() {
    return explicit;
  }

  public void setExplicit(Boolean explicit) {
    this.explicit = explicit;
  }


  public SimplifiedAudiobookObject externalUrls(ExternalUrlObject externalUrls) {
    this.externalUrls = externalUrls;
    return this;
  }

  /**
   * External URLs for this audiobook. 
   * @return externalUrls
   */
  @javax.annotation.Nonnull
  public ExternalUrlObject getExternalUrls() {
    return externalUrls;
  }

  public void setExternalUrls(ExternalUrlObject externalUrls) {
    this.externalUrls = externalUrls;
  }


  public SimplifiedAudiobookObject href(String href) {
    this.href = href;
    return this;
  }

  /**
   * A link to the Web API endpoint providing full details of the audiobook. 
   * @return href
   */
  @javax.annotation.Nonnull
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public SimplifiedAudiobookObject htmlDescription(String htmlDescription) {
    this.htmlDescription = htmlDescription;
    return this;
  }

  /**
   * A description of the audiobook. This field may contain HTML tags. 
   * @return htmlDescription
   */
  @javax.annotation.Nonnull
  public String getHtmlDescription() {
    return htmlDescription;
  }

  public void setHtmlDescription(String htmlDescription) {
    this.htmlDescription = htmlDescription;
  }


  public SimplifiedAudiobookObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SimplifiedAudiobookObject images(List<ImageObject> images) {
    this.images = images;
    return this;
  }

  public SimplifiedAudiobookObject addImagesItem(ImageObject imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * The cover art for the audiobook in various sizes, widest first. 
   * @return images
   */
  @javax.annotation.Nonnull
  public List<ImageObject> getImages() {
    return images;
  }

  public void setImages(List<ImageObject> images) {
    this.images = images;
  }


  public SimplifiedAudiobookObject languages(List<String> languages) {
    this.languages = languages;
    return this;
  }

  public SimplifiedAudiobookObject addLanguagesItem(String languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<>();
    }
    this.languages.add(languagesItem);
    return this;
  }

  /**
   * A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
   * @return languages
   */
  @javax.annotation.Nonnull
  public List<String> getLanguages() {
    return languages;
  }

  public void setLanguages(List<String> languages) {
    this.languages = languages;
  }


  public SimplifiedAudiobookObject mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * The media type of the audiobook. 
   * @return mediaType
   */
  @javax.annotation.Nonnull
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public SimplifiedAudiobookObject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the audiobook. 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SimplifiedAudiobookObject narrators(List<NarratorObject> narrators) {
    this.narrators = narrators;
    return this;
  }

  public SimplifiedAudiobookObject addNarratorsItem(NarratorObject narratorsItem) {
    if (this.narrators == null) {
      this.narrators = new ArrayList<>();
    }
    this.narrators.add(narratorsItem);
    return this;
  }

  /**
   * The narrator(s) for the audiobook. 
   * @return narrators
   */
  @javax.annotation.Nonnull
  public List<NarratorObject> getNarrators() {
    return narrators;
  }

  public void setNarrators(List<NarratorObject> narrators) {
    this.narrators = narrators;
  }


  public SimplifiedAudiobookObject publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * The publisher of the audiobook. 
   * @return publisher
   */
  @javax.annotation.Nonnull
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public SimplifiedAudiobookObject totalChapters(Integer totalChapters) {
    this.totalChapters = totalChapters;
    return this;
  }

  /**
   * The number of chapters in this audiobook. 
   * @return totalChapters
   */
  @javax.annotation.Nonnull
  public Integer getTotalChapters() {
    return totalChapters;
  }

  public void setTotalChapters(Integer totalChapters) {
    this.totalChapters = totalChapters;
  }


  public SimplifiedAudiobookObject type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The object type. 
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public SimplifiedAudiobookObject uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimplifiedAudiobookObject simplifiedAudiobookObject = (SimplifiedAudiobookObject) o;
    return Objects.equals(this.authors, simplifiedAudiobookObject.authors) &&
        Objects.equals(this.availableMarkets, simplifiedAudiobookObject.availableMarkets) &&
        Objects.equals(this.copyrights, simplifiedAudiobookObject.copyrights) &&
        Objects.equals(this.description, simplifiedAudiobookObject.description) &&
        Objects.equals(this.edition, simplifiedAudiobookObject.edition) &&
        Objects.equals(this.explicit, simplifiedAudiobookObject.explicit) &&
        Objects.equals(this.externalUrls, simplifiedAudiobookObject.externalUrls) &&
        Objects.equals(this.href, simplifiedAudiobookObject.href) &&
        Objects.equals(this.htmlDescription, simplifiedAudiobookObject.htmlDescription) &&
        Objects.equals(this.id, simplifiedAudiobookObject.id) &&
        Objects.equals(this.images, simplifiedAudiobookObject.images) &&
        Objects.equals(this.languages, simplifiedAudiobookObject.languages) &&
        Objects.equals(this.mediaType, simplifiedAudiobookObject.mediaType) &&
        Objects.equals(this.name, simplifiedAudiobookObject.name) &&
        Objects.equals(this.narrators, simplifiedAudiobookObject.narrators) &&
        Objects.equals(this.publisher, simplifiedAudiobookObject.publisher) &&
        Objects.equals(this.totalChapters, simplifiedAudiobookObject.totalChapters) &&
        Objects.equals(this.type, simplifiedAudiobookObject.type) &&
        Objects.equals(this.uri, simplifiedAudiobookObject.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authors, availableMarkets, copyrights, description, edition, explicit, externalUrls, href, htmlDescription, id, images, languages, mediaType, name, narrators, publisher, totalChapters, type, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimplifiedAudiobookObject {\n");
    sb.append("    authors: ").append(toIndentedString(authors)).append("\n");
    sb.append("    availableMarkets: ").append(toIndentedString(availableMarkets)).append("\n");
    sb.append("    copyrights: ").append(toIndentedString(copyrights)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    edition: ").append(toIndentedString(edition)).append("\n");
    sb.append("    explicit: ").append(toIndentedString(explicit)).append("\n");
    sb.append("    externalUrls: ").append(toIndentedString(externalUrls)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    htmlDescription: ").append(toIndentedString(htmlDescription)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    narrators: ").append(toIndentedString(narrators)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    totalChapters: ").append(toIndentedString(totalChapters)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authors");
    openapiFields.add("available_markets");
    openapiFields.add("copyrights");
    openapiFields.add("description");
    openapiFields.add("edition");
    openapiFields.add("explicit");
    openapiFields.add("external_urls");
    openapiFields.add("href");
    openapiFields.add("html_description");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("languages");
    openapiFields.add("media_type");
    openapiFields.add("name");
    openapiFields.add("narrators");
    openapiFields.add("publisher");
    openapiFields.add("total_chapters");
    openapiFields.add("type");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authors");
    openapiRequiredFields.add("available_markets");
    openapiRequiredFields.add("copyrights");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("explicit");
    openapiRequiredFields.add("external_urls");
    openapiRequiredFields.add("href");
    openapiRequiredFields.add("html_description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("languages");
    openapiRequiredFields.add("media_type");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("narrators");
    openapiRequiredFields.add("publisher");
    openapiRequiredFields.add("total_chapters");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimplifiedAudiobookObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimplifiedAudiobookObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimplifiedAudiobookObject is not found in the empty JSON string", SimplifiedAudiobookObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimplifiedAudiobookObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimplifiedAudiobookObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimplifiedAudiobookObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("authors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authors` to be an array in the JSON string but got `%s`", jsonObj.get("authors").toString()));
      }

      JsonArray jsonArrayauthors = jsonObj.getAsJsonArray("authors");
      // validate the required field `authors` (array)
      for (int i = 0; i < jsonArrayauthors.size(); i++) {
        AuthorObject.validateJsonElement(jsonArrayauthors.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("available_markets") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("available_markets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_markets` to be an array in the JSON string but got `%s`", jsonObj.get("available_markets").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("copyrights").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `copyrights` to be an array in the JSON string but got `%s`", jsonObj.get("copyrights").toString()));
      }

      JsonArray jsonArraycopyrights = jsonObj.getAsJsonArray("copyrights");
      // validate the required field `copyrights` (array)
      for (int i = 0; i < jsonArraycopyrights.size(); i++) {
        CopyrightObject.validateJsonElement(jsonArraycopyrights.get(i));
      };
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("edition") != null && !jsonObj.get("edition").isJsonNull()) && !jsonObj.get("edition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edition").toString()));
      }
      // validate the required field `external_urls`
      ExternalUrlObject.validateJsonElement(jsonObj.get("external_urls"));
      if (!jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if (!jsonObj.get("html_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        ImageObject.validateJsonElement(jsonArrayimages.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("languages") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages` to be an array in the JSON string but got `%s`", jsonObj.get("languages").toString()));
      }
      if (!jsonObj.get("media_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_type").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("narrators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `narrators` to be an array in the JSON string but got `%s`", jsonObj.get("narrators").toString()));
      }

      JsonArray jsonArraynarrators = jsonObj.getAsJsonArray("narrators");
      // validate the required field `narrators` (array)
      for (int i = 0; i < jsonArraynarrators.size(); i++) {
        NarratorObject.validateJsonElement(jsonArraynarrators.get(i));
      };
      if (!jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimplifiedAudiobookObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimplifiedAudiobookObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimplifiedAudiobookObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimplifiedAudiobookObject.class));

       return (TypeAdapter<T>) new TypeAdapter<SimplifiedAudiobookObject>() {
           @Override
           public void write(JsonWriter out, SimplifiedAudiobookObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimplifiedAudiobookObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimplifiedAudiobookObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimplifiedAudiobookObject
   * @throws IOException if the JSON string is invalid with respect to SimplifiedAudiobookObject
   */
  public static SimplifiedAudiobookObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimplifiedAudiobookObject.class);
  }

  /**
   * Convert an instance of SimplifiedAudiobookObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

