/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AudiobookObject from '../model/AudiobookObject';
import GetMultipleAlbums401Response from '../model/GetMultipleAlbums401Response';
import GetMultipleAudiobooks200Response from '../model/GetMultipleAudiobooks200Response';
import PagingSavedAudiobookObject from '../model/PagingSavedAudiobookObject';
import PagingSimplifiedChapterObject from '../model/PagingSimplifiedChapterObject';

/**
* Audiobooks service.
* @module api/AudiobooksApi
* @version 2023.2.27
*/
export default class AudiobooksApi {

    /**
    * Constructs a new AudiobooksApi. 
    * @alias module:api/AudiobooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkUsersSavedAudiobooks operation.
     * @callback module:api/AudiobooksApi~checkUsersSavedAudiobooksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check User's Saved Audiobooks 
     * Check if one or more audiobooks are already saved in the current Spotify user's library. 
     * @param {String} ids 
     * @param {module:api/AudiobooksApi~checkUsersSavedAudiobooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkUsersSavedAudiobooks(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkUsersSavedAudiobooks");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/me/audiobooks/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnAudiobook operation.
     * @callback module:api/AudiobooksApi~getAnAudiobookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AudiobookObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Audiobook 
     * Get Spotify catalog information for a single audiobook.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {module:api/AudiobooksApi~getAnAudiobookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AudiobookObject}
     */
    getAnAudiobook(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnAudiobook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'market': opts['market']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AudiobookObject;
      return this.apiClient.callApi(
        '/audiobooks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAudiobookChapters operation.
     * @callback module:api/AudiobooksApi~getAudiobookChaptersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSimplifiedChapterObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Audiobook Chapters 
     * Get Spotify catalog information about an audiobook's chapters.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/AudiobooksApi~getAudiobookChaptersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSimplifiedChapterObject}
     */
    getAudiobookChapters(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAudiobookChapters");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'market': opts['market'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSimplifiedChapterObject;
      return this.apiClient.callApi(
        '/audiobooks/{id}/chapters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultipleAudiobooks operation.
     * @callback module:api/AudiobooksApi~getMultipleAudiobooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMultipleAudiobooks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Several Audiobooks 
     * Get Spotify catalog information for several audiobooks identified by their Spotify IDs.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {module:api/AudiobooksApi~getMultipleAudiobooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMultipleAudiobooks200Response}
     */
    getMultipleAudiobooks(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getMultipleAudiobooks");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids,
        'market': opts['market']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMultipleAudiobooks200Response;
      return this.apiClient.callApi(
        '/audiobooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersSavedAudiobooks operation.
     * @callback module:api/AudiobooksApi~getUsersSavedAudiobooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSavedAudiobookObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Saved Audiobooks 
     * Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/AudiobooksApi~getUsersSavedAudiobooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSavedAudiobookObject}
     */
    getUsersSavedAudiobooks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSavedAudiobookObject;
      return this.apiClient.callApi(
        '/me/audiobooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAudiobooksUser operation.
     * @callback module:api/AudiobooksApi~removeAudiobooksUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove User's Saved Audiobooks 
     * Remove one or more audiobooks from the Spotify user's library. 
     * @param {String} ids 
     * @param {module:api/AudiobooksApi~removeAudiobooksUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAudiobooksUser(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling removeAudiobooksUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/audiobooks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAudiobooksUser operation.
     * @callback module:api/AudiobooksApi~saveAudiobooksUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Audiobooks for Current User 
     * Save one or more audiobooks to the current Spotify user's library. 
     * @param {String} ids 
     * @param {module:api/AudiobooksApi~saveAudiobooksUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveAudiobooksUser(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling saveAudiobooksUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/audiobooks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
