/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtistObject from '../model/ArtistObject';
import FollowArtistsUsersRequest from '../model/FollowArtistsUsersRequest';
import GetAnArtistsTopTracks200Response from '../model/GetAnArtistsTopTracks200Response';
import GetFollowed200Response from '../model/GetFollowed200Response';
import GetMultipleAlbums401Response from '../model/GetMultipleAlbums401Response';
import GetMultipleArtists200Response from '../model/GetMultipleArtists200Response';
import PagingArtistObject from '../model/PagingArtistObject';
import PagingSimplifiedAlbumObject from '../model/PagingSimplifiedAlbumObject';
import UnfollowArtistsUsersRequest from '../model/UnfollowArtistsUsersRequest';

/**
* Artists service.
* @module api/ArtistsApi
* @version 2023.2.27
*/
export default class ArtistsApi {

    /**
    * Constructs a new ArtistsApi. 
    * @alias module:api/ArtistsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkCurrentUserFollows_0 operation.
     * @callback module:api/ArtistsApi~checkCurrentUserFollows_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check If User Follows Artists or Users 
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @param {module:model/String} type 
     * @param {String} ids 
     * @param {module:api/ArtistsApi~checkCurrentUserFollows_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkCurrentUserFollows_0(type, ids, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling checkCurrentUserFollows_0");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkCurrentUserFollows_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/me/following/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the followArtistsUsers_0 operation.
     * @callback module:api/ArtistsApi~followArtistsUsers_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow Artists or Users 
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @param {module:model/String} type 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/FollowArtistsUsersRequest} [followArtistsUsersRequest] 
     * @param {module:api/ArtistsApi~followArtistsUsers_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    followArtistsUsers_0(type, ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['followArtistsUsersRequest'];
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling followArtistsUsers_0");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling followArtistsUsers_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/following', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnArtist operation.
     * @callback module:api/ArtistsApi~getAnArtistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artist 
     * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
     * @param {String} id 
     * @param {module:api/ArtistsApi~getAnArtistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtistObject}
     */
    getAnArtist(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnArtist");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtistObject;
      return this.apiClient.callApi(
        '/artists/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnArtistsAlbums operation.
     * @callback module:api/ArtistsApi~getAnArtistsAlbumsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSimplifiedAlbumObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artist's Albums 
     * Get Spotify catalog information about an artist's albums. 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [includeGroups] 
     * @param {String} [market] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/ArtistsApi~getAnArtistsAlbumsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSimplifiedAlbumObject}
     */
    getAnArtistsAlbums(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnArtistsAlbums");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_groups': opts['includeGroups'],
        'market': opts['market'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSimplifiedAlbumObject;
      return this.apiClient.callApi(
        '/artists/{id}/albums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnArtistsRelatedArtists operation.
     * @callback module:api/ArtistsApi~getAnArtistsRelatedArtistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMultipleArtists200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artist's Related Artists 
     * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's [listening history](http://news.spotify.com/se/2010/02/03/related-artists/). 
     * @param {String} id 
     * @param {module:api/ArtistsApi~getAnArtistsRelatedArtistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMultipleArtists200Response}
     */
    getAnArtistsRelatedArtists(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnArtistsRelatedArtists");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMultipleArtists200Response;
      return this.apiClient.callApi(
        '/artists/{id}/related-artists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnArtistsTopTracks operation.
     * @callback module:api/ArtistsApi~getAnArtistsTopTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAnArtistsTopTracks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artist's Top Tracks 
     * Get Spotify catalog information about an artist's top tracks by country. 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {module:api/ArtistsApi~getAnArtistsTopTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAnArtistsTopTracks200Response}
     */
    getAnArtistsTopTracks(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnArtistsTopTracks");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'market': opts['market']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAnArtistsTopTracks200Response;
      return this.apiClient.callApi(
        '/artists/{id}/top-tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFollowed_1 operation.
     * @callback module:api/ArtistsApi~getFollowed_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFollowed200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Followed Artists 
     * Get the current user's followed artists. 
     * @param {module:model/String} type 
     * @param {Object} opts Optional parameters
     * @param {String} [after] 
     * @param {Number} [limit = 20)] 
     * @param {module:api/ArtistsApi~getFollowed_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFollowed200Response}
     */
    getFollowed_1(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getFollowed_1");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'after': opts['after'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFollowed200Response;
      return this.apiClient.callApi(
        '/me/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultipleArtists operation.
     * @callback module:api/ArtistsApi~getMultipleArtistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMultipleArtists200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Several Artists 
     * Get Spotify catalog information for several artists based on their Spotify IDs. 
     * @param {String} ids 
     * @param {module:api/ArtistsApi~getMultipleArtistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMultipleArtists200Response}
     */
    getMultipleArtists(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getMultipleArtists");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMultipleArtists200Response;
      return this.apiClient.callApi(
        '/artists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersTopArtists_0 operation.
     * @callback module:api/ArtistsApi~getUsersTopArtists_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingArtistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Top Artists 
     * Get the current user's top artists based on calculated affinity. 
     * @param {Object} opts Optional parameters
     * @param {String} [timeRange = 'medium_term')] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/ArtistsApi~getUsersTopArtists_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingArtistObject}
     */
    getUsersTopArtists_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'time_range': opts['timeRange'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingArtistObject;
      return this.apiClient.callApi(
        '/me/top/artists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unfollowArtistsUsers_0 operation.
     * @callback module:api/ArtistsApi~unfollowArtistsUsers_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow Artists or Users 
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @param {module:model/String} type 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
     * @param {module:api/ArtistsApi~unfollowArtistsUsers_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    unfollowArtistsUsers_0(type, ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['unfollowArtistsUsersRequest'];
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling unfollowArtistsUsers_0");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling unfollowArtistsUsers_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/following', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
