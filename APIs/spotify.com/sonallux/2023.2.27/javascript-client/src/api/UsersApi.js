/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FollowArtistsUsersRequest from '../model/FollowArtistsUsersRequest';
import FollowPlaylistRequest from '../model/FollowPlaylistRequest';
import GetFollowed200Response from '../model/GetFollowed200Response';
import GetMultipleAlbums401Response from '../model/GetMultipleAlbums401Response';
import PagingArtistObject from '../model/PagingArtistObject';
import PagingPlaylistObject from '../model/PagingPlaylistObject';
import PagingTrackObject from '../model/PagingTrackObject';
import PrivateUserObject from '../model/PrivateUserObject';
import PublicUserObject from '../model/PublicUserObject';
import UnfollowArtistsUsersRequest from '../model/UnfollowArtistsUsersRequest';

/**
* Users service.
* @module api/UsersApi
* @version 2023.2.27
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkCurrentUserFollows operation.
     * @callback module:api/UsersApi~checkCurrentUserFollowsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check If User Follows Artists or Users 
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @param {module:model/String} type 
     * @param {String} ids 
     * @param {module:api/UsersApi~checkCurrentUserFollowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkCurrentUserFollows(type, ids, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling checkCurrentUserFollows");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkCurrentUserFollows");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/me/following/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkIfUserFollowsPlaylist operation.
     * @callback module:api/UsersApi~checkIfUserFollowsPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if Users Follow Playlist 
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @param {String} playlistId 
     * @param {String} ids 
     * @param {module:api/UsersApi~checkIfUserFollowsPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkIfUserFollowsPlaylist(playlistId, ids, callback) {
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling checkIfUserFollowsPlaylist");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkIfUserFollowsPlaylist");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/followers/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the followArtistsUsers operation.
     * @callback module:api/UsersApi~followArtistsUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow Artists or Users 
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @param {module:model/String} type 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/FollowArtistsUsersRequest} [followArtistsUsersRequest] 
     * @param {module:api/UsersApi~followArtistsUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    followArtistsUsers(type, ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['followArtistsUsersRequest'];
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling followArtistsUsers");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling followArtistsUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/following', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the followPlaylist operation.
     * @callback module:api/UsersApi~followPlaylistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow Playlist 
     * Add the current user as a follower of a playlist. 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {module:model/FollowPlaylistRequest} [followPlaylistRequest] 
     * @param {module:api/UsersApi~followPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    followPlaylist(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = opts['followPlaylistRequest'];
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling followPlaylist");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/followers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentUsersProfile operation.
     * @callback module:api/UsersApi~getCurrentUsersProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateUserObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Current User's Profile 
     * Get detailed profile information about the current user (including the current user's username). 
     * @param {module:api/UsersApi~getCurrentUsersProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateUserObject}
     */
    getCurrentUsersProfile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateUserObject;
      return this.apiClient.callApi(
        '/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFollowed operation.
     * @callback module:api/UsersApi~getFollowedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFollowed200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Followed Artists 
     * Get the current user's followed artists. 
     * @param {module:model/String} type 
     * @param {Object} opts Optional parameters
     * @param {String} [after] 
     * @param {Number} [limit = 20)] 
     * @param {module:api/UsersApi~getFollowedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFollowed200Response}
     */
    getFollowed(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getFollowed");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'after': opts['after'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFollowed200Response;
      return this.apiClient.callApi(
        '/me/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListUsersPlaylists_0 operation.
     * @callback module:api/UsersApi~getListUsersPlaylists_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingPlaylistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Playlists 
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/UsersApi~getListUsersPlaylists_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingPlaylistObject}
     */
    getListUsersPlaylists_0(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getListUsersPlaylists_0");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingPlaylistObject;
      return this.apiClient.callApi(
        '/users/{user_id}/playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersProfile operation.
     * @callback module:api/UsersApi~getUsersProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicUserObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Profile 
     * Get public profile information about a Spotify user. 
     * @param {String} userId 
     * @param {module:api/UsersApi~getUsersProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicUserObject}
     */
    getUsersProfile(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUsersProfile");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicUserObject;
      return this.apiClient.callApi(
        '/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersTopArtists operation.
     * @callback module:api/UsersApi~getUsersTopArtistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingArtistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Top Artists 
     * Get the current user's top artists based on calculated affinity. 
     * @param {Object} opts Optional parameters
     * @param {String} [timeRange = 'medium_term')] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/UsersApi~getUsersTopArtistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingArtistObject}
     */
    getUsersTopArtists(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'time_range': opts['timeRange'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingArtistObject;
      return this.apiClient.callApi(
        '/me/top/artists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersTopTracks operation.
     * @callback module:api/UsersApi~getUsersTopTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingTrackObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Top Tracks 
     * Get the current user's top tracks based on calculated affinity. 
     * @param {Object} opts Optional parameters
     * @param {String} [timeRange = 'medium_term')] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/UsersApi~getUsersTopTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingTrackObject}
     */
    getUsersTopTracks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'time_range': opts['timeRange'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingTrackObject;
      return this.apiClient.callApi(
        '/me/top/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unfollowArtistsUsers operation.
     * @callback module:api/UsersApi~unfollowArtistsUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow Artists or Users 
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @param {module:model/String} type 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
     * @param {module:api/UsersApi~unfollowArtistsUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unfollowArtistsUsers(type, ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['unfollowArtistsUsersRequest'];
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling unfollowArtistsUsers");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling unfollowArtistsUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/following', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unfollowPlaylist operation.
     * @callback module:api/UsersApi~unfollowPlaylistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow Playlist 
     * Remove the current user as a follower of a playlist. 
     * @param {String} playlistId 
     * @param {module:api/UsersApi~unfollowPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unfollowPlaylist(playlistId, callback) {
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling unfollowPlaylist");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}/followers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
