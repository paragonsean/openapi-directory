/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangePlaylistDetailsRequest from '../model/ChangePlaylistDetailsRequest';
import CreatePlaylistRequest from '../model/CreatePlaylistRequest';
import FollowArtistsUsersRequest from '../model/FollowArtistsUsersRequest';
import GetFollowed200Response from '../model/GetFollowed200Response';
import GetMultipleAlbums401Response from '../model/GetMultipleAlbums401Response';
import PagingArtistObject from '../model/PagingArtistObject';
import PagingPlaylistObject from '../model/PagingPlaylistObject';
import PagingSavedAlbumObject from '../model/PagingSavedAlbumObject';
import PagingSavedAudiobookObject from '../model/PagingSavedAudiobookObject';
import PagingSavedEpisodeObject from '../model/PagingSavedEpisodeObject';
import PagingSavedShowObject from '../model/PagingSavedShowObject';
import PagingSavedTrackObject from '../model/PagingSavedTrackObject';
import PagingTrackObject from '../model/PagingTrackObject';
import PlaylistObject from '../model/PlaylistObject';
import RemoveEpisodesUserRequest from '../model/RemoveEpisodesUserRequest';
import SaveAlbumsUserRequest from '../model/SaveAlbumsUserRequest';
import SaveEpisodesUserRequest from '../model/SaveEpisodesUserRequest';
import SaveShowsUserRequest from '../model/SaveShowsUserRequest';
import SaveTracksUserRequest from '../model/SaveTracksUserRequest';
import UnfollowArtistsUsersRequest from '../model/UnfollowArtistsUsersRequest';

/**
* Library service.
* @module api/LibraryApi
* @version 2023.2.27
*/
export default class LibraryApi {

    /**
    * Constructs a new LibraryApi. 
    * @alias module:api/LibraryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changePlaylistDetails_0 operation.
     * @callback module:api/LibraryApi~changePlaylistDetails_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Playlist Details 
     * Change a playlist's name and public/private state. (The user must, of course, own the playlist.) 
     * @param {String} playlistId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePlaylistDetailsRequest} [changePlaylistDetailsRequest] 
     * @param {module:api/LibraryApi~changePlaylistDetails_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    changePlaylistDetails_0(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changePlaylistDetailsRequest'];
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling changePlaylistDetails_0");
      }

      let pathParams = {
        'playlist_id': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/playlists/{playlist_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkCurrentUserFollows_1 operation.
     * @callback module:api/LibraryApi~checkCurrentUserFollows_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check If User Follows Artists or Users 
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @param {module:model/String} type 
     * @param {String} ids 
     * @param {module:api/LibraryApi~checkCurrentUserFollows_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkCurrentUserFollows_1(type, ids, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling checkCurrentUserFollows_1");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkCurrentUserFollows_1");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/me/following/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkUsersSavedAlbums_0 operation.
     * @callback module:api/LibraryApi~checkUsersSavedAlbums_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check User's Saved Albums 
     * Check if one or more albums is already saved in the current Spotify user's 'Your Music' library. 
     * @param {String} ids 
     * @param {module:api/LibraryApi~checkUsersSavedAlbums_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkUsersSavedAlbums_0(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkUsersSavedAlbums_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/me/albums/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkUsersSavedAudiobooks_0 operation.
     * @callback module:api/LibraryApi~checkUsersSavedAudiobooks_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check User's Saved Audiobooks 
     * Check if one or more audiobooks are already saved in the current Spotify user's library. 
     * @param {String} ids 
     * @param {module:api/LibraryApi~checkUsersSavedAudiobooks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkUsersSavedAudiobooks_0(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkUsersSavedAudiobooks_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/me/audiobooks/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkUsersSavedEpisodes_0 operation.
     * @callback module:api/LibraryApi~checkUsersSavedEpisodes_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check User's Saved Episodes 
     * Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     * @param {String} ids 
     * @param {module:api/LibraryApi~checkUsersSavedEpisodes_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkUsersSavedEpisodes_0(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkUsersSavedEpisodes_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/me/episodes/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkUsersSavedShows_0 operation.
     * @callback module:api/LibraryApi~checkUsersSavedShows_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check User's Saved Shows 
     * Check if one or more shows is already saved in the current Spotify user's library. 
     * @param {String} ids 
     * @param {module:api/LibraryApi~checkUsersSavedShows_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkUsersSavedShows_0(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkUsersSavedShows_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/me/shows/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkUsersSavedTracks_0 operation.
     * @callback module:api/LibraryApi~checkUsersSavedTracks_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check User's Saved Tracks 
     * Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library. 
     * @param {String} ids 
     * @param {module:api/LibraryApi~checkUsersSavedTracks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkUsersSavedTracks_0(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkUsersSavedTracks_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/me/tracks/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPlaylist_0 operation.
     * @callback module:api/LibraryApi~createPlaylist_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Playlist 
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePlaylistRequest} [createPlaylistRequest] 
     * @param {module:api/LibraryApi~createPlaylist_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistObject}
     */
    createPlaylist_0(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createPlaylistRequest'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createPlaylist_0");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlaylistObject;
      return this.apiClient.callApi(
        '/users/{user_id}/playlists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the followArtistsUsers_1 operation.
     * @callback module:api/LibraryApi~followArtistsUsers_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow Artists or Users 
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @param {module:model/String} type 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/FollowArtistsUsersRequest} [followArtistsUsersRequest] 
     * @param {module:api/LibraryApi~followArtistsUsers_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    followArtistsUsers_1(type, ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['followArtistsUsersRequest'];
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling followArtistsUsers_1");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling followArtistsUsers_1");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/following', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAListOfCurrentUsersPlaylists_0 operation.
     * @callback module:api/LibraryApi~getAListOfCurrentUsersPlaylists_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingPlaylistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Current User's Playlists 
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/LibraryApi~getAListOfCurrentUsersPlaylists_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingPlaylistObject}
     */
    getAListOfCurrentUsersPlaylists_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingPlaylistObject;
      return this.apiClient.callApi(
        '/me/playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFollowed_0 operation.
     * @callback module:api/LibraryApi~getFollowed_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFollowed200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Followed Artists 
     * Get the current user's followed artists. 
     * @param {module:model/String} type 
     * @param {Object} opts Optional parameters
     * @param {String} [after] 
     * @param {Number} [limit = 20)] 
     * @param {module:api/LibraryApi~getFollowed_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFollowed200Response}
     */
    getFollowed_0(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getFollowed_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'after': opts['after'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFollowed200Response;
      return this.apiClient.callApi(
        '/me/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersSavedAlbums_0 operation.
     * @callback module:api/LibraryApi~getUsersSavedAlbums_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSavedAlbumObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Saved Albums 
     * Get a list of the albums saved in the current Spotify user's 'Your Music' library. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {String} [market] 
     * @param {module:api/LibraryApi~getUsersSavedAlbums_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSavedAlbumObject}
     */
    getUsersSavedAlbums_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'market': opts['market']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSavedAlbumObject;
      return this.apiClient.callApi(
        '/me/albums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersSavedAudiobooks_0 operation.
     * @callback module:api/LibraryApi~getUsersSavedAudiobooks_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSavedAudiobookObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Saved Audiobooks 
     * Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/LibraryApi~getUsersSavedAudiobooks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSavedAudiobookObject}
     */
    getUsersSavedAudiobooks_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSavedAudiobookObject;
      return this.apiClient.callApi(
        '/me/audiobooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersSavedEpisodes_0 operation.
     * @callback module:api/LibraryApi~getUsersSavedEpisodes_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSavedEpisodeObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Saved Episodes 
     * Get a list of the episodes saved in the current Spotify user's library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/LibraryApi~getUsersSavedEpisodes_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSavedEpisodeObject}
     */
    getUsersSavedEpisodes_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'market': opts['market'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSavedEpisodeObject;
      return this.apiClient.callApi(
        '/me/episodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersSavedShows_0 operation.
     * @callback module:api/LibraryApi~getUsersSavedShows_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSavedShowObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Saved Shows 
     * Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/LibraryApi~getUsersSavedShows_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSavedShowObject}
     */
    getUsersSavedShows_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSavedShowObject;
      return this.apiClient.callApi(
        '/me/shows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersSavedTracks_0 operation.
     * @callback module:api/LibraryApi~getUsersSavedTracks_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSavedTrackObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Saved Tracks 
     * Get a list of the songs saved in the current Spotify user's 'Your Music' library. 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/LibraryApi~getUsersSavedTracks_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSavedTrackObject}
     */
    getUsersSavedTracks_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'market': opts['market'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSavedTrackObject;
      return this.apiClient.callApi(
        '/me/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersTopArtists_1 operation.
     * @callback module:api/LibraryApi~getUsersTopArtists_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingArtistObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Top Artists 
     * Get the current user's top artists based on calculated affinity. 
     * @param {Object} opts Optional parameters
     * @param {String} [timeRange = 'medium_term')] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/LibraryApi~getUsersTopArtists_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingArtistObject}
     */
    getUsersTopArtists_1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'time_range': opts['timeRange'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingArtistObject;
      return this.apiClient.callApi(
        '/me/top/artists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersTopTracks_1 operation.
     * @callback module:api/LibraryApi~getUsersTopTracks_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingTrackObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Top Tracks 
     * Get the current user's top tracks based on calculated affinity. 
     * @param {Object} opts Optional parameters
     * @param {String} [timeRange = 'medium_term')] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/LibraryApi~getUsersTopTracks_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingTrackObject}
     */
    getUsersTopTracks_1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'time_range': opts['timeRange'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingTrackObject;
      return this.apiClient.callApi(
        '/me/top/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAlbumsUser_0 operation.
     * @callback module:api/LibraryApi~removeAlbumsUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Users' Saved Albums 
     * Remove one or more albums from the current user's 'Your Music' library. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {module:api/LibraryApi~removeAlbumsUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAlbumsUser_0(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveAlbumsUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling removeAlbumsUser_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/albums', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAudiobooksUser_0 operation.
     * @callback module:api/LibraryApi~removeAudiobooksUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove User's Saved Audiobooks 
     * Remove one or more audiobooks from the Spotify user's library. 
     * @param {String} ids 
     * @param {module:api/LibraryApi~removeAudiobooksUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAudiobooksUser_0(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling removeAudiobooksUser_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/audiobooks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeEpisodesUser_0 operation.
     * @callback module:api/LibraryApi~removeEpisodesUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove User's Saved Episodes 
     * Remove one or more episodes from the current user's library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/RemoveEpisodesUserRequest} [removeEpisodesUserRequest] 
     * @param {module:api/LibraryApi~removeEpisodesUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    removeEpisodesUser_0(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeEpisodesUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling removeEpisodesUser_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/episodes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeShowsUser_0 operation.
     * @callback module:api/LibraryApi~removeShowsUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove User's Saved Shows 
     * Delete one or more shows from current Spotify user's library. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {module:model/SaveShowsUserRequest} [saveShowsUserRequest] 
     * @param {module:api/LibraryApi~removeShowsUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    removeShowsUser_0(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveShowsUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling removeShowsUser_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids,
        'market': opts['market']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/shows', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTracksUser_0 operation.
     * @callback module:api/LibraryApi~removeTracksUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove User's Saved Tracks 
     * Remove one or more tracks from the current user's 'Your Music' library. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {module:api/LibraryApi~removeTracksUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    removeTracksUser_0(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveAlbumsUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling removeTracksUser_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/tracks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAlbumsUser_0 operation.
     * @callback module:api/LibraryApi~saveAlbumsUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Albums for Current User 
     * Save one or more albums to the current user's 'Your Music' library. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {module:api/LibraryApi~saveAlbumsUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    saveAlbumsUser_0(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveAlbumsUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling saveAlbumsUser_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/albums', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAudiobooksUser_0 operation.
     * @callback module:api/LibraryApi~saveAudiobooksUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Audiobooks for Current User 
     * Save one or more audiobooks to the current Spotify user's library. 
     * @param {String} ids 
     * @param {module:api/LibraryApi~saveAudiobooksUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    saveAudiobooksUser_0(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling saveAudiobooksUser_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/audiobooks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveEpisodesUser_0 operation.
     * @callback module:api/LibraryApi~saveEpisodesUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Episodes for Current User 
     * Save one or more episodes to the current user's library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveEpisodesUserRequest} [saveEpisodesUserRequest] 
     * @param {module:api/LibraryApi~saveEpisodesUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    saveEpisodesUser_0(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveEpisodesUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling saveEpisodesUser_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/episodes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveShowsUser_0 operation.
     * @callback module:api/LibraryApi~saveShowsUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Shows for Current User 
     * Save one or more shows to current Spotify user's library. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveShowsUserRequest} [saveShowsUserRequest] 
     * @param {module:api/LibraryApi~saveShowsUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    saveShowsUser_0(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveShowsUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling saveShowsUser_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/shows', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveTracksUser_0 operation.
     * @callback module:api/LibraryApi~saveTracksUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Tracks for Current User 
     * Save one or more tracks to the current user's 'Your Music' library. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveTracksUserRequest} [saveTracksUserRequest] 
     * @param {module:api/LibraryApi~saveTracksUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    saveTracksUser_0(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveTracksUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling saveTracksUser_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/tracks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unfollowArtistsUsers_1 operation.
     * @callback module:api/LibraryApi~unfollowArtistsUsers_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow Artists or Users 
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @param {module:model/String} type 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
     * @param {module:api/LibraryApi~unfollowArtistsUsers_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    unfollowArtistsUsers_1(type, ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['unfollowArtistsUsersRequest'];
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling unfollowArtistsUsers_1");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling unfollowArtistsUsers_1");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/following', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
