/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetMultipleAlbums401Response from '../model/GetMultipleAlbums401Response';
import GetMultipleShows200Response from '../model/GetMultipleShows200Response';
import PagingSavedShowObject from '../model/PagingSavedShowObject';
import PagingSimplifiedEpisodeObject from '../model/PagingSimplifiedEpisodeObject';
import SaveShowsUserRequest from '../model/SaveShowsUserRequest';
import ShowObject from '../model/ShowObject';

/**
* Shows service.
* @module api/ShowsApi
* @version 2023.2.27
*/
export default class ShowsApi {

    /**
    * Constructs a new ShowsApi. 
    * @alias module:api/ShowsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkUsersSavedShows operation.
     * @callback module:api/ShowsApi~checkUsersSavedShowsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Boolean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check User's Saved Shows 
     * Check if one or more shows is already saved in the current Spotify user's library. 
     * @param {String} ids 
     * @param {module:api/ShowsApi~checkUsersSavedShowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Boolean>}
     */
    checkUsersSavedShows(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling checkUsersSavedShows");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Boolean'];
      return this.apiClient.callApi(
        '/me/shows/contains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAShow operation.
     * @callback module:api/ShowsApi~getAShowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Show 
     * Get Spotify catalog information for a single show identified by its unique Spotify ID. 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {module:api/ShowsApi~getAShowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowObject}
     */
    getAShow(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAShow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'market': opts['market']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowObject;
      return this.apiClient.callApi(
        '/shows/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAShowsEpisodes operation.
     * @callback module:api/ShowsApi~getAShowsEpisodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSimplifiedEpisodeObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Show Episodes 
     * Get Spotify catalog information about an showâ€™s episodes. Optional parameters can be used to limit the number of episodes returned. 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/ShowsApi~getAShowsEpisodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSimplifiedEpisodeObject}
     */
    getAShowsEpisodes(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAShowsEpisodes");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'market': opts['market'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSimplifiedEpisodeObject;
      return this.apiClient.callApi(
        '/shows/{id}/episodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultipleShows operation.
     * @callback module:api/ShowsApi~getMultipleShowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMultipleShows200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Several Shows 
     * Get Spotify catalog information for several shows based on their Spotify IDs. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {module:api/ShowsApi~getMultipleShowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMultipleShows200Response}
     */
    getMultipleShows(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getMultipleShows");
      }

      let pathParams = {
      };
      let queryParams = {
        'market': opts['market'],
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMultipleShows200Response;
      return this.apiClient.callApi(
        '/shows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersSavedShows operation.
     * @callback module:api/ShowsApi~getUsersSavedShowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagingSavedShowObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Saved Shows 
     * Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/ShowsApi~getUsersSavedShowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagingSavedShowObject}
     */
    getUsersSavedShows(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagingSavedShowObject;
      return this.apiClient.callApi(
        '/me/shows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeShowsUser operation.
     * @callback module:api/ShowsApi~removeShowsUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove User's Saved Shows 
     * Delete one or more shows from current Spotify user's library. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {String} [market] 
     * @param {module:model/SaveShowsUserRequest} [saveShowsUserRequest] 
     * @param {module:api/ShowsApi~removeShowsUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeShowsUser(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveShowsUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling removeShowsUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids,
        'market': opts['market']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/shows', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveShowsUser operation.
     * @callback module:api/ShowsApi~saveShowsUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Shows for Current User 
     * Save one or more shows to current Spotify user's library. 
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveShowsUserRequest} [saveShowsUserRequest] 
     * @param {module:api/ShowsApi~saveShowsUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveShowsUser(ids, opts, callback) {
      opts = opts || {};
      let postBody = opts['saveShowsUserRequest'];
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling saveShowsUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_2_0'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/shows', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
