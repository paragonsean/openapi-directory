/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlbumBase from './AlbumBase';
import AlbumRestrictionObject from './AlbumRestrictionObject';
import ExternalUrlObject from './ExternalUrlObject';
import ImageObject from './ImageObject';
import SimplifiedArtistObject from './SimplifiedArtistObject';

/**
 * The SimplifiedAlbumObject model module.
 * @module model/SimplifiedAlbumObject
 * @version 2023.2.27
 */
class SimplifiedAlbumObject {
    /**
     * Constructs a new <code>SimplifiedAlbumObject</code>.
     * @alias module:model/SimplifiedAlbumObject
     * @implements module:model/AlbumBase
     * @param albumType {module:model/SimplifiedAlbumObject.AlbumTypeEnum} The type of the album. 
     * @param availableMarkets {Array.<String>} The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
     * @param externalUrls {module:model/ExternalUrlObject} Known external URLs for this album. 
     * @param href {String} A link to the Web API endpoint providing full details of the album. 
     * @param id {String} The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @param images {Array.<module:model/ImageObject>} The cover art for the album in various sizes, widest first. 
     * @param name {String} The name of the album. In case of an album takedown, the value may be an empty string. 
     * @param releaseDate {String} The date the album was first released. 
     * @param releaseDatePrecision {module:model/SimplifiedAlbumObject.ReleaseDatePrecisionEnum} The precision with which `release_date` value is known. 
     * @param totalTracks {Number} The number of tracks in the album.
     * @param type {module:model/SimplifiedAlbumObject.TypeEnum} The object type. 
     * @param uri {String} The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @param artists {Array.<module:model/SimplifiedArtistObject>} The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. 
     */
    constructor(albumType, availableMarkets, externalUrls, href, id, images, name, releaseDate, releaseDatePrecision, totalTracks, type, uri, artists) { 
        AlbumBase.initialize(this, albumType, availableMarkets, externalUrls, href, id, images, name, releaseDate, releaseDatePrecision, totalTracks, type, uri);
        SimplifiedAlbumObject.initialize(this, albumType, availableMarkets, externalUrls, href, id, images, name, releaseDate, releaseDatePrecision, totalTracks, type, uri, artists);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, albumType, availableMarkets, externalUrls, href, id, images, name, releaseDate, releaseDatePrecision, totalTracks, type, uri, artists) { 
        obj['album_type'] = albumType;
        obj['available_markets'] = availableMarkets;
        obj['external_urls'] = externalUrls;
        obj['href'] = href;
        obj['id'] = id;
        obj['images'] = images;
        obj['name'] = name;
        obj['release_date'] = releaseDate;
        obj['release_date_precision'] = releaseDatePrecision;
        obj['total_tracks'] = totalTracks;
        obj['type'] = type;
        obj['uri'] = uri;
        obj['artists'] = artists;
    }

    /**
     * Constructs a <code>SimplifiedAlbumObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimplifiedAlbumObject} obj Optional instance to populate.
     * @return {module:model/SimplifiedAlbumObject} The populated <code>SimplifiedAlbumObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimplifiedAlbumObject();
            AlbumBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('album_type')) {
                obj['album_type'] = ApiClient.convertToType(data['album_type'], 'String');
            }
            if (data.hasOwnProperty('available_markets')) {
                obj['available_markets'] = ApiClient.convertToType(data['available_markets'], ['String']);
            }
            if (data.hasOwnProperty('external_urls')) {
                obj['external_urls'] = ApiClient.convertToType(data['external_urls'], ExternalUrlObject);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [ImageObject]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('release_date')) {
                obj['release_date'] = ApiClient.convertToType(data['release_date'], 'String');
            }
            if (data.hasOwnProperty('release_date_precision')) {
                obj['release_date_precision'] = ApiClient.convertToType(data['release_date_precision'], 'String');
            }
            if (data.hasOwnProperty('restrictions')) {
                obj['restrictions'] = ApiClient.convertToType(data['restrictions'], AlbumRestrictionObject);
            }
            if (data.hasOwnProperty('total_tracks')) {
                obj['total_tracks'] = ApiClient.convertToType(data['total_tracks'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('album_group')) {
                obj['album_group'] = ApiClient.convertToType(data['album_group'], 'String');
            }
            if (data.hasOwnProperty('artists')) {
                obj['artists'] = ApiClient.convertToType(data['artists'], [SimplifiedArtistObject]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimplifiedAlbumObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimplifiedAlbumObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SimplifiedAlbumObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['album_type'] && !(typeof data['album_type'] === 'string' || data['album_type'] instanceof String)) {
            throw new Error("Expected the field `album_type` to be a primitive type in the JSON string but got " + data['album_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['available_markets'])) {
            throw new Error("Expected the field `available_markets` to be an array in the JSON data but got " + data['available_markets']);
        }
        // validate the optional field `external_urls`
        if (data['external_urls']) { // data not null
          ExternalUrlObject.validateJSON(data['external_urls']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                ImageObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['release_date'] && !(typeof data['release_date'] === 'string' || data['release_date'] instanceof String)) {
            throw new Error("Expected the field `release_date` to be a primitive type in the JSON string but got " + data['release_date']);
        }
        // ensure the json data is a string
        if (data['release_date_precision'] && !(typeof data['release_date_precision'] === 'string' || data['release_date_precision'] instanceof String)) {
            throw new Error("Expected the field `release_date_precision` to be a primitive type in the JSON string but got " + data['release_date_precision']);
        }
        // validate the optional field `restrictions`
        if (data['restrictions']) { // data not null
          AlbumRestrictionObject.validateJSON(data['restrictions']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // ensure the json data is a string
        if (data['album_group'] && !(typeof data['album_group'] === 'string' || data['album_group'] instanceof String)) {
            throw new Error("Expected the field `album_group` to be a primitive type in the JSON string but got " + data['album_group']);
        }
        if (data['artists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artists'])) {
                throw new Error("Expected the field `artists` to be an array in the JSON data but got " + data['artists']);
            }
            // validate the optional field `artists` (array)
            for (const item of data['artists']) {
                SimplifiedArtistObject.validateJSON(item);
            };
        }

        return true;
    }


}

SimplifiedAlbumObject.RequiredProperties = ["album_type", "available_markets", "external_urls", "href", "id", "images", "name", "release_date", "release_date_precision", "total_tracks", "type", "uri", "artists"];

/**
 * The type of the album. 
 * @member {module:model/SimplifiedAlbumObject.AlbumTypeEnum} album_type
 */
SimplifiedAlbumObject.prototype['album_type'] = undefined;

/**
 * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
 * @member {Array.<String>} available_markets
 */
SimplifiedAlbumObject.prototype['available_markets'] = undefined;

/**
 * Known external URLs for this album. 
 * @member {module:model/ExternalUrlObject} external_urls
 */
SimplifiedAlbumObject.prototype['external_urls'] = undefined;

/**
 * A link to the Web API endpoint providing full details of the album. 
 * @member {String} href
 */
SimplifiedAlbumObject.prototype['href'] = undefined;

/**
 * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
 * @member {String} id
 */
SimplifiedAlbumObject.prototype['id'] = undefined;

/**
 * The cover art for the album in various sizes, widest first. 
 * @member {Array.<module:model/ImageObject>} images
 */
SimplifiedAlbumObject.prototype['images'] = undefined;

/**
 * The name of the album. In case of an album takedown, the value may be an empty string. 
 * @member {String} name
 */
SimplifiedAlbumObject.prototype['name'] = undefined;

/**
 * The date the album was first released. 
 * @member {String} release_date
 */
SimplifiedAlbumObject.prototype['release_date'] = undefined;

/**
 * The precision with which `release_date` value is known. 
 * @member {module:model/SimplifiedAlbumObject.ReleaseDatePrecisionEnum} release_date_precision
 */
SimplifiedAlbumObject.prototype['release_date_precision'] = undefined;

/**
 * Included in the response when a content restriction is applied. 
 * @member {module:model/AlbumRestrictionObject} restrictions
 */
SimplifiedAlbumObject.prototype['restrictions'] = undefined;

/**
 * The number of tracks in the album.
 * @member {Number} total_tracks
 */
SimplifiedAlbumObject.prototype['total_tracks'] = undefined;

/**
 * The object type. 
 * @member {module:model/SimplifiedAlbumObject.TypeEnum} type
 */
SimplifiedAlbumObject.prototype['type'] = undefined;

/**
 * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
 * @member {String} uri
 */
SimplifiedAlbumObject.prototype['uri'] = undefined;

/**
 * The field is present when getting an artist's albums. Compare to album_type this field represents relationship between the artist and the album. 
 * @member {module:model/SimplifiedAlbumObject.AlbumGroupEnum} album_group
 */
SimplifiedAlbumObject.prototype['album_group'] = undefined;

/**
 * The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. 
 * @member {Array.<module:model/SimplifiedArtistObject>} artists
 */
SimplifiedAlbumObject.prototype['artists'] = undefined;


// Implement AlbumBase interface:
/**
 * The type of the album. 
 * @member {module:model/AlbumBase.AlbumTypeEnum} album_type
 */
AlbumBase.prototype['album_type'] = undefined;
/**
 * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
 * @member {Array.<String>} available_markets
 */
AlbumBase.prototype['available_markets'] = undefined;
/**
 * Known external URLs for this album. 
 * @member {module:model/ExternalUrlObject} external_urls
 */
AlbumBase.prototype['external_urls'] = undefined;
/**
 * A link to the Web API endpoint providing full details of the album. 
 * @member {String} href
 */
AlbumBase.prototype['href'] = undefined;
/**
 * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
 * @member {String} id
 */
AlbumBase.prototype['id'] = undefined;
/**
 * The cover art for the album in various sizes, widest first. 
 * @member {Array.<module:model/ImageObject>} images
 */
AlbumBase.prototype['images'] = undefined;
/**
 * The name of the album. In case of an album takedown, the value may be an empty string. 
 * @member {String} name
 */
AlbumBase.prototype['name'] = undefined;
/**
 * The date the album was first released. 
 * @member {String} release_date
 */
AlbumBase.prototype['release_date'] = undefined;
/**
 * The precision with which `release_date` value is known. 
 * @member {module:model/AlbumBase.ReleaseDatePrecisionEnum} release_date_precision
 */
AlbumBase.prototype['release_date_precision'] = undefined;
/**
 * Included in the response when a content restriction is applied. 
 * @member {module:model/AlbumRestrictionObject} restrictions
 */
AlbumBase.prototype['restrictions'] = undefined;
/**
 * The number of tracks in the album.
 * @member {Number} total_tracks
 */
AlbumBase.prototype['total_tracks'] = undefined;
/**
 * The object type. 
 * @member {module:model/AlbumBase.TypeEnum} type
 */
AlbumBase.prototype['type'] = undefined;
/**
 * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
 * @member {String} uri
 */
AlbumBase.prototype['uri'] = undefined;



/**
 * Allowed values for the <code>album_type</code> property.
 * @enum {String}
 * @readonly
 */
SimplifiedAlbumObject['AlbumTypeEnum'] = {

    /**
     * value: "album"
     * @const
     */
    "album": "album",

    /**
     * value: "single"
     * @const
     */
    "single": "single",

    /**
     * value: "compilation"
     * @const
     */
    "compilation": "compilation"
};


/**
 * Allowed values for the <code>release_date_precision</code> property.
 * @enum {String}
 * @readonly
 */
SimplifiedAlbumObject['ReleaseDatePrecisionEnum'] = {

    /**
     * value: "year"
     * @const
     */
    "year": "year",

    /**
     * value: "month"
     * @const
     */
    "month": "month",

    /**
     * value: "day"
     * @const
     */
    "day": "day"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SimplifiedAlbumObject['TypeEnum'] = {

    /**
     * value: "album"
     * @const
     */
    "album": "album"
};


/**
 * Allowed values for the <code>album_group</code> property.
 * @enum {String}
 * @readonly
 */
SimplifiedAlbumObject['AlbumGroupEnum'] = {

    /**
     * value: "album"
     * @const
     */
    "album": "album",

    /**
     * value: "single"
     * @const
     */
    "single": "single",

    /**
     * value: "compilation"
     * @const
     */
    "compilation": "compilation",

    /**
     * value: "appears_on"
     * @const
     */
    "appears_on": "appears_on"
};



export default SimplifiedAlbumObject;

