/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CopyrightObject from './CopyrightObject';
import ExternalUrlObject from './ExternalUrlObject';
import ImageObject from './ImageObject';
import ShowBase from './ShowBase';

/**
 * The SimplifiedShowObject model module.
 * @module model/SimplifiedShowObject
 * @version 2023.2.27
 */
class SimplifiedShowObject {
    /**
     * Constructs a new <code>SimplifiedShowObject</code>.
     * @alias module:model/SimplifiedShowObject
     * @implements module:model/ShowBase
     * @param availableMarkets {Array.<String>} A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @param copyrights {Array.<module:model/CopyrightObject>} The copyright statements of the show. 
     * @param description {String} A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @param explicit {Boolean} Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @param externalUrls {module:model/ExternalUrlObject} External URLs for this show. 
     * @param href {String} A link to the Web API endpoint providing full details of the show. 
     * @param htmlDescription {String} A description of the show. This field may contain HTML tags. 
     * @param id {String} The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @param images {Array.<module:model/ImageObject>} The cover art for the show in various sizes, widest first. 
     * @param isExternallyHosted {Boolean} True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases. 
     * @param languages {Array.<String>} A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @param mediaType {String} The media type of the show. 
     * @param name {String} The name of the episode. 
     * @param publisher {String} The publisher of the show. 
     * @param totalEpisodes {Number} The total number of episodes in the show. 
     * @param type {module:model/SimplifiedShowObject.TypeEnum} The object type. 
     * @param uri {String} The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     */
    constructor(availableMarkets, copyrights, description, explicit, externalUrls, href, htmlDescription, id, images, isExternallyHosted, languages, mediaType, name, publisher, totalEpisodes, type, uri) { 
        ShowBase.initialize(this, availableMarkets, copyrights, description, explicit, externalUrls, href, htmlDescription, id, images, isExternallyHosted, languages, mediaType, name, publisher, totalEpisodes, type, uri);
        SimplifiedShowObject.initialize(this, availableMarkets, copyrights, description, explicit, externalUrls, href, htmlDescription, id, images, isExternallyHosted, languages, mediaType, name, publisher, totalEpisodes, type, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, availableMarkets, copyrights, description, explicit, externalUrls, href, htmlDescription, id, images, isExternallyHosted, languages, mediaType, name, publisher, totalEpisodes, type, uri) { 
        obj['available_markets'] = availableMarkets;
        obj['copyrights'] = copyrights;
        obj['description'] = description;
        obj['explicit'] = explicit;
        obj['external_urls'] = externalUrls;
        obj['href'] = href;
        obj['html_description'] = htmlDescription;
        obj['id'] = id;
        obj['images'] = images;
        obj['is_externally_hosted'] = isExternallyHosted;
        obj['languages'] = languages;
        obj['media_type'] = mediaType;
        obj['name'] = name;
        obj['publisher'] = publisher;
        obj['total_episodes'] = totalEpisodes;
        obj['type'] = type;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>SimplifiedShowObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimplifiedShowObject} obj Optional instance to populate.
     * @return {module:model/SimplifiedShowObject} The populated <code>SimplifiedShowObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimplifiedShowObject();
            ShowBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('available_markets')) {
                obj['available_markets'] = ApiClient.convertToType(data['available_markets'], ['String']);
            }
            if (data.hasOwnProperty('copyrights')) {
                obj['copyrights'] = ApiClient.convertToType(data['copyrights'], [CopyrightObject]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('explicit')) {
                obj['explicit'] = ApiClient.convertToType(data['explicit'], 'Boolean');
            }
            if (data.hasOwnProperty('external_urls')) {
                obj['external_urls'] = ApiClient.convertToType(data['external_urls'], ExternalUrlObject);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('html_description')) {
                obj['html_description'] = ApiClient.convertToType(data['html_description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [ImageObject]);
            }
            if (data.hasOwnProperty('is_externally_hosted')) {
                obj['is_externally_hosted'] = ApiClient.convertToType(data['is_externally_hosted'], 'Boolean');
            }
            if (data.hasOwnProperty('languages')) {
                obj['languages'] = ApiClient.convertToType(data['languages'], ['String']);
            }
            if (data.hasOwnProperty('media_type')) {
                obj['media_type'] = ApiClient.convertToType(data['media_type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
            if (data.hasOwnProperty('total_episodes')) {
                obj['total_episodes'] = ApiClient.convertToType(data['total_episodes'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimplifiedShowObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimplifiedShowObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SimplifiedShowObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['available_markets'])) {
            throw new Error("Expected the field `available_markets` to be an array in the JSON data but got " + data['available_markets']);
        }
        if (data['copyrights']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['copyrights'])) {
                throw new Error("Expected the field `copyrights` to be an array in the JSON data but got " + data['copyrights']);
            }
            // validate the optional field `copyrights` (array)
            for (const item of data['copyrights']) {
                CopyrightObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `external_urls`
        if (data['external_urls']) { // data not null
          ExternalUrlObject.validateJSON(data['external_urls']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['html_description'] && !(typeof data['html_description'] === 'string' || data['html_description'] instanceof String)) {
            throw new Error("Expected the field `html_description` to be a primitive type in the JSON string but got " + data['html_description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                ImageObject.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['languages'])) {
            throw new Error("Expected the field `languages` to be an array in the JSON data but got " + data['languages']);
        }
        // ensure the json data is a string
        if (data['media_type'] && !(typeof data['media_type'] === 'string' || data['media_type'] instanceof String)) {
            throw new Error("Expected the field `media_type` to be a primitive type in the JSON string but got " + data['media_type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
            throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

SimplifiedShowObject.RequiredProperties = ["available_markets", "copyrights", "description", "explicit", "external_urls", "href", "html_description", "id", "images", "is_externally_hosted", "languages", "media_type", "name", "publisher", "total_episodes", "type", "uri"];

/**
 * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
 * @member {Array.<String>} available_markets
 */
SimplifiedShowObject.prototype['available_markets'] = undefined;

/**
 * The copyright statements of the show. 
 * @member {Array.<module:model/CopyrightObject>} copyrights
 */
SimplifiedShowObject.prototype['copyrights'] = undefined;

/**
 * A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
 * @member {String} description
 */
SimplifiedShowObject.prototype['description'] = undefined;

/**
 * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
 * @member {Boolean} explicit
 */
SimplifiedShowObject.prototype['explicit'] = undefined;

/**
 * External URLs for this show. 
 * @member {module:model/ExternalUrlObject} external_urls
 */
SimplifiedShowObject.prototype['external_urls'] = undefined;

/**
 * A link to the Web API endpoint providing full details of the show. 
 * @member {String} href
 */
SimplifiedShowObject.prototype['href'] = undefined;

/**
 * A description of the show. This field may contain HTML tags. 
 * @member {String} html_description
 */
SimplifiedShowObject.prototype['html_description'] = undefined;

/**
 * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
 * @member {String} id
 */
SimplifiedShowObject.prototype['id'] = undefined;

/**
 * The cover art for the show in various sizes, widest first. 
 * @member {Array.<module:model/ImageObject>} images
 */
SimplifiedShowObject.prototype['images'] = undefined;

/**
 * True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases. 
 * @member {Boolean} is_externally_hosted
 */
SimplifiedShowObject.prototype['is_externally_hosted'] = undefined;

/**
 * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
 * @member {Array.<String>} languages
 */
SimplifiedShowObject.prototype['languages'] = undefined;

/**
 * The media type of the show. 
 * @member {String} media_type
 */
SimplifiedShowObject.prototype['media_type'] = undefined;

/**
 * The name of the episode. 
 * @member {String} name
 */
SimplifiedShowObject.prototype['name'] = undefined;

/**
 * The publisher of the show. 
 * @member {String} publisher
 */
SimplifiedShowObject.prototype['publisher'] = undefined;

/**
 * The total number of episodes in the show. 
 * @member {Number} total_episodes
 */
SimplifiedShowObject.prototype['total_episodes'] = undefined;

/**
 * The object type. 
 * @member {module:model/SimplifiedShowObject.TypeEnum} type
 */
SimplifiedShowObject.prototype['type'] = undefined;

/**
 * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
 * @member {String} uri
 */
SimplifiedShowObject.prototype['uri'] = undefined;


// Implement ShowBase interface:
/**
 * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
 * @member {Array.<String>} available_markets
 */
ShowBase.prototype['available_markets'] = undefined;
/**
 * The copyright statements of the show. 
 * @member {Array.<module:model/CopyrightObject>} copyrights
 */
ShowBase.prototype['copyrights'] = undefined;
/**
 * A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
 * @member {String} description
 */
ShowBase.prototype['description'] = undefined;
/**
 * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
 * @member {Boolean} explicit
 */
ShowBase.prototype['explicit'] = undefined;
/**
 * External URLs for this show. 
 * @member {module:model/ExternalUrlObject} external_urls
 */
ShowBase.prototype['external_urls'] = undefined;
/**
 * A link to the Web API endpoint providing full details of the show. 
 * @member {String} href
 */
ShowBase.prototype['href'] = undefined;
/**
 * A description of the show. This field may contain HTML tags. 
 * @member {String} html_description
 */
ShowBase.prototype['html_description'] = undefined;
/**
 * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
 * @member {String} id
 */
ShowBase.prototype['id'] = undefined;
/**
 * The cover art for the show in various sizes, widest first. 
 * @member {Array.<module:model/ImageObject>} images
 */
ShowBase.prototype['images'] = undefined;
/**
 * True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases. 
 * @member {Boolean} is_externally_hosted
 */
ShowBase.prototype['is_externally_hosted'] = undefined;
/**
 * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
 * @member {Array.<String>} languages
 */
ShowBase.prototype['languages'] = undefined;
/**
 * The media type of the show. 
 * @member {String} media_type
 */
ShowBase.prototype['media_type'] = undefined;
/**
 * The name of the episode. 
 * @member {String} name
 */
ShowBase.prototype['name'] = undefined;
/**
 * The publisher of the show. 
 * @member {String} publisher
 */
ShowBase.prototype['publisher'] = undefined;
/**
 * The total number of episodes in the show. 
 * @member {Number} total_episodes
 */
ShowBase.prototype['total_episodes'] = undefined;
/**
 * The object type. 
 * @member {module:model/ShowBase.TypeEnum} type
 */
ShowBase.prototype['type'] = undefined;
/**
 * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
 * @member {String} uri
 */
ShowBase.prototype['uri'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SimplifiedShowObject['TypeEnum'] = {

    /**
     * value: "show"
     * @const
     */
    "show": "show"
};



export default SimplifiedShowObject;

