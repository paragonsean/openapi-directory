/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArtistObject from './ArtistObject';
import ExternalIdObject from './ExternalIdObject';
import ExternalUrlObject from './ExternalUrlObject';
import LinkedTrackObject from './LinkedTrackObject';
import SimplifiedAlbumObject from './SimplifiedAlbumObject';
import TrackRestrictionObject from './TrackRestrictionObject';

/**
 * The TrackObject model module.
 * @module model/TrackObject
 * @version 2023.2.27
 */
class TrackObject {
    /**
     * Constructs a new <code>TrackObject</code>.
     * @alias module:model/TrackObject
     */
    constructor() { 
        
        TrackObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TrackObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrackObject} obj Optional instance to populate.
     * @return {module:model/TrackObject} The populated <code>TrackObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrackObject();

            if (data.hasOwnProperty('album')) {
                obj['album'] = ApiClient.convertToType(data['album'], SimplifiedAlbumObject);
            }
            if (data.hasOwnProperty('artists')) {
                obj['artists'] = ApiClient.convertToType(data['artists'], [ArtistObject]);
            }
            if (data.hasOwnProperty('available_markets')) {
                obj['available_markets'] = ApiClient.convertToType(data['available_markets'], ['String']);
            }
            if (data.hasOwnProperty('disc_number')) {
                obj['disc_number'] = ApiClient.convertToType(data['disc_number'], 'Number');
            }
            if (data.hasOwnProperty('duration_ms')) {
                obj['duration_ms'] = ApiClient.convertToType(data['duration_ms'], 'Number');
            }
            if (data.hasOwnProperty('explicit')) {
                obj['explicit'] = ApiClient.convertToType(data['explicit'], 'Boolean');
            }
            if (data.hasOwnProperty('external_ids')) {
                obj['external_ids'] = ApiClient.convertToType(data['external_ids'], ExternalIdObject);
            }
            if (data.hasOwnProperty('external_urls')) {
                obj['external_urls'] = ApiClient.convertToType(data['external_urls'], ExternalUrlObject);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_local')) {
                obj['is_local'] = ApiClient.convertToType(data['is_local'], 'Boolean');
            }
            if (data.hasOwnProperty('is_playable')) {
                obj['is_playable'] = ApiClient.convertToType(data['is_playable'], 'Boolean');
            }
            if (data.hasOwnProperty('linked_from')) {
                obj['linked_from'] = ApiClient.convertToType(data['linked_from'], LinkedTrackObject);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('popularity')) {
                obj['popularity'] = ApiClient.convertToType(data['popularity'], 'Number');
            }
            if (data.hasOwnProperty('preview_url')) {
                obj['preview_url'] = ApiClient.convertToType(data['preview_url'], 'String');
            }
            if (data.hasOwnProperty('restrictions')) {
                obj['restrictions'] = ApiClient.convertToType(data['restrictions'], TrackRestrictionObject);
            }
            if (data.hasOwnProperty('track_number')) {
                obj['track_number'] = ApiClient.convertToType(data['track_number'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrackObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrackObject</code>.
     */
    static validateJSON(data) {
        // validate the optional field `album`
        if (data['album']) { // data not null
          SimplifiedAlbumObject.validateJSON(data['album']);
        }
        if (data['artists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artists'])) {
                throw new Error("Expected the field `artists` to be an array in the JSON data but got " + data['artists']);
            }
            // validate the optional field `artists` (array)
            for (const item of data['artists']) {
                ArtistObject.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['available_markets'])) {
            throw new Error("Expected the field `available_markets` to be an array in the JSON data but got " + data['available_markets']);
        }
        // validate the optional field `external_ids`
        if (data['external_ids']) { // data not null
          ExternalIdObject.validateJSON(data['external_ids']);
        }
        // validate the optional field `external_urls`
        if (data['external_urls']) { // data not null
          ExternalUrlObject.validateJSON(data['external_urls']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `linked_from`
        if (data['linked_from']) { // data not null
          LinkedTrackObject.validateJSON(data['linked_from']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['preview_url'] && !(typeof data['preview_url'] === 'string' || data['preview_url'] instanceof String)) {
            throw new Error("Expected the field `preview_url` to be a primitive type in the JSON string but got " + data['preview_url']);
        }
        // validate the optional field `restrictions`
        if (data['restrictions']) { // data not null
          TrackRestrictionObject.validateJSON(data['restrictions']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * The album on which the track appears. The album object includes a link in `href` to full information about the album. 
 * @member {module:model/SimplifiedAlbumObject} album
 */
TrackObject.prototype['album'] = undefined;

/**
 * The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist. 
 * @member {Array.<module:model/ArtistObject>} artists
 */
TrackObject.prototype['artists'] = undefined;

/**
 * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
 * @member {Array.<String>} available_markets
 */
TrackObject.prototype['available_markets'] = undefined;

/**
 * The disc number (usually `1` unless the album consists of more than one disc). 
 * @member {Number} disc_number
 */
TrackObject.prototype['disc_number'] = undefined;

/**
 * The track length in milliseconds. 
 * @member {Number} duration_ms
 */
TrackObject.prototype['duration_ms'] = undefined;

/**
 * Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown). 
 * @member {Boolean} explicit
 */
TrackObject.prototype['explicit'] = undefined;

/**
 * Known external IDs for the track. 
 * @member {module:model/ExternalIdObject} external_ids
 */
TrackObject.prototype['external_ids'] = undefined;

/**
 * Known external URLs for this track. 
 * @member {module:model/ExternalUrlObject} external_urls
 */
TrackObject.prototype['external_urls'] = undefined;

/**
 * A link to the Web API endpoint providing full details of the track. 
 * @member {String} href
 */
TrackObject.prototype['href'] = undefined;

/**
 * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
 * @member {String} id
 */
TrackObject.prototype['id'] = undefined;

/**
 * Whether or not the track is from a local file. 
 * @member {Boolean} is_local
 */
TrackObject.prototype['is_local'] = undefined;

/**
 * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`. 
 * @member {Boolean} is_playable
 */
TrackObject.prototype['is_playable'] = undefined;

/**
 * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.
 * @member {module:model/LinkedTrackObject} linked_from
 */
TrackObject.prototype['linked_from'] = undefined;

/**
 * The name of the track. 
 * @member {String} name
 */
TrackObject.prototype['name'] = undefined;

/**
 * The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._ 
 * @member {Number} popularity
 */
TrackObject.prototype['popularity'] = undefined;

/**
 * A link to a 30 second preview (MP3 format) of the track. Can be `null` 
 * @member {String} preview_url
 */
TrackObject.prototype['preview_url'] = undefined;

/**
 * Included in the response when a content restriction is applied. 
 * @member {module:model/TrackRestrictionObject} restrictions
 */
TrackObject.prototype['restrictions'] = undefined;

/**
 * The number of the track. If an album has several discs, the track number is the number on the specified disc. 
 * @member {Number} track_number
 */
TrackObject.prototype['track_number'] = undefined;

/**
 * The object type: \"track\". 
 * @member {module:model/TrackObject.TypeEnum} type
 */
TrackObject.prototype['type'] = undefined;

/**
 * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
 * @member {String} uri
 */
TrackObject.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TrackObject['TypeEnum'] = {

    /**
     * value: "track"
     * @const
     */
    "track": "track"
};



export default TrackObject;

