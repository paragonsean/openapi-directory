/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioAnalysisObjectMeta from './AudioAnalysisObjectMeta';
import AudioAnalysisObjectTrack from './AudioAnalysisObjectTrack';
import SectionObject from './SectionObject';
import SegmentObject from './SegmentObject';
import TimeIntervalObject from './TimeIntervalObject';

/**
 * The AudioAnalysisObject model module.
 * @module model/AudioAnalysisObject
 * @version 2023.2.27
 */
class AudioAnalysisObject {
    /**
     * Constructs a new <code>AudioAnalysisObject</code>.
     * @alias module:model/AudioAnalysisObject
     */
    constructor() { 
        
        AudioAnalysisObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioAnalysisObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioAnalysisObject} obj Optional instance to populate.
     * @return {module:model/AudioAnalysisObject} The populated <code>AudioAnalysisObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioAnalysisObject();

            if (data.hasOwnProperty('bars')) {
                obj['bars'] = ApiClient.convertToType(data['bars'], [TimeIntervalObject]);
            }
            if (data.hasOwnProperty('beats')) {
                obj['beats'] = ApiClient.convertToType(data['beats'], [TimeIntervalObject]);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = AudioAnalysisObjectMeta.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('sections')) {
                obj['sections'] = ApiClient.convertToType(data['sections'], [SectionObject]);
            }
            if (data.hasOwnProperty('segments')) {
                obj['segments'] = ApiClient.convertToType(data['segments'], [SegmentObject]);
            }
            if (data.hasOwnProperty('tatums')) {
                obj['tatums'] = ApiClient.convertToType(data['tatums'], [TimeIntervalObject]);
            }
            if (data.hasOwnProperty('track')) {
                obj['track'] = AudioAnalysisObjectTrack.constructFromObject(data['track']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioAnalysisObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioAnalysisObject</code>.
     */
    static validateJSON(data) {
        if (data['bars']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bars'])) {
                throw new Error("Expected the field `bars` to be an array in the JSON data but got " + data['bars']);
            }
            // validate the optional field `bars` (array)
            for (const item of data['bars']) {
                TimeIntervalObject.validateJSON(item);
            };
        }
        if (data['beats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['beats'])) {
                throw new Error("Expected the field `beats` to be an array in the JSON data but got " + data['beats']);
            }
            // validate the optional field `beats` (array)
            for (const item of data['beats']) {
                TimeIntervalObject.validateJSON(item);
            };
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          AudioAnalysisObjectMeta.validateJSON(data['meta']);
        }
        if (data['sections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sections'])) {
                throw new Error("Expected the field `sections` to be an array in the JSON data but got " + data['sections']);
            }
            // validate the optional field `sections` (array)
            for (const item of data['sections']) {
                SectionObject.validateJSON(item);
            };
        }
        if (data['segments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['segments'])) {
                throw new Error("Expected the field `segments` to be an array in the JSON data but got " + data['segments']);
            }
            // validate the optional field `segments` (array)
            for (const item of data['segments']) {
                SegmentObject.validateJSON(item);
            };
        }
        if (data['tatums']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tatums'])) {
                throw new Error("Expected the field `tatums` to be an array in the JSON data but got " + data['tatums']);
            }
            // validate the optional field `tatums` (array)
            for (const item of data['tatums']) {
                TimeIntervalObject.validateJSON(item);
            };
        }
        // validate the optional field `track`
        if (data['track']) { // data not null
          AudioAnalysisObjectTrack.validateJSON(data['track']);
        }

        return true;
    }


}



/**
 * The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.
 * @member {Array.<module:model/TimeIntervalObject>} bars
 */
AudioAnalysisObject.prototype['bars'] = undefined;

/**
 * The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.
 * @member {Array.<module:model/TimeIntervalObject>} beats
 */
AudioAnalysisObject.prototype['beats'] = undefined;

/**
 * @member {module:model/AudioAnalysisObjectMeta} meta
 */
AudioAnalysisObject.prototype['meta'] = undefined;

/**
 * Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.
 * @member {Array.<module:model/SectionObject>} sections
 */
AudioAnalysisObject.prototype['sections'] = undefined;

/**
 * Each segment contains a roughly conisistent sound throughout its duration.
 * @member {Array.<module:model/SegmentObject>} segments
 */
AudioAnalysisObject.prototype['segments'] = undefined;

/**
 * A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).
 * @member {Array.<module:model/TimeIntervalObject>} tatums
 */
AudioAnalysisObject.prototype['tatums'] = undefined;

/**
 * @member {module:model/AudioAnalysisObjectTrack} track
 */
AudioAnalysisObject.prototype['track'] = undefined;






export default AudioAnalysisObject;

