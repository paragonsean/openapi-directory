/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EpisodeRestrictionObject from './EpisodeRestrictionObject';
import ExternalUrlObject from './ExternalUrlObject';
import ImageObject from './ImageObject';
import ResumePointObject from './ResumePointObject';

/**
 * The EpisodeBase model module.
 * @module model/EpisodeBase
 * @version 2023.2.27
 */
class EpisodeBase {
    /**
     * Constructs a new <code>EpisodeBase</code>.
     * @alias module:model/EpisodeBase
     * @param audioPreviewUrl {String} A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
     * @param description {String} A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @param durationMs {Number} The episode length in milliseconds. 
     * @param explicit {Boolean} Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @param externalUrls {module:model/ExternalUrlObject} External URLs for this episode. 
     * @param href {String} A link to the Web API endpoint providing full details of the episode. 
     * @param htmlDescription {String} A description of the episode. This field may contain HTML tags. 
     * @param id {String} The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @param images {Array.<module:model/ImageObject>} The cover art for the episode in various sizes, widest first. 
     * @param isExternallyHosted {Boolean} True if the episode is hosted outside of Spotify's CDN. 
     * @param isPlayable {Boolean} True if the episode is playable in the given market. Otherwise false. 
     * @param languages {Array.<String>} A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @param name {String} The name of the episode. 
     * @param releaseDate {String} The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @param releaseDatePrecision {module:model/EpisodeBase.ReleaseDatePrecisionEnum} The precision with which `release_date` value is known. 
     * @param resumePoint {module:model/ResumePointObject} The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'. 
     * @param type {module:model/EpisodeBase.TypeEnum} The object type. 
     * @param uri {String} The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     */
    constructor(audioPreviewUrl, description, durationMs, explicit, externalUrls, href, htmlDescription, id, images, isExternallyHosted, isPlayable, languages, name, releaseDate, releaseDatePrecision, resumePoint, type, uri) { 
        
        EpisodeBase.initialize(this, audioPreviewUrl, description, durationMs, explicit, externalUrls, href, htmlDescription, id, images, isExternallyHosted, isPlayable, languages, name, releaseDate, releaseDatePrecision, resumePoint, type, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, audioPreviewUrl, description, durationMs, explicit, externalUrls, href, htmlDescription, id, images, isExternallyHosted, isPlayable, languages, name, releaseDate, releaseDatePrecision, resumePoint, type, uri) { 
        obj['audio_preview_url'] = audioPreviewUrl;
        obj['description'] = description;
        obj['duration_ms'] = durationMs;
        obj['explicit'] = explicit;
        obj['external_urls'] = externalUrls;
        obj['href'] = href;
        obj['html_description'] = htmlDescription;
        obj['id'] = id;
        obj['images'] = images;
        obj['is_externally_hosted'] = isExternallyHosted;
        obj['is_playable'] = isPlayable;
        obj['languages'] = languages;
        obj['name'] = name;
        obj['release_date'] = releaseDate;
        obj['release_date_precision'] = releaseDatePrecision;
        obj['resume_point'] = resumePoint;
        obj['type'] = type;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>EpisodeBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EpisodeBase} obj Optional instance to populate.
     * @return {module:model/EpisodeBase} The populated <code>EpisodeBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EpisodeBase();

            if (data.hasOwnProperty('audio_preview_url')) {
                obj['audio_preview_url'] = ApiClient.convertToType(data['audio_preview_url'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('duration_ms')) {
                obj['duration_ms'] = ApiClient.convertToType(data['duration_ms'], 'Number');
            }
            if (data.hasOwnProperty('explicit')) {
                obj['explicit'] = ApiClient.convertToType(data['explicit'], 'Boolean');
            }
            if (data.hasOwnProperty('external_urls')) {
                obj['external_urls'] = ApiClient.convertToType(data['external_urls'], ExternalUrlObject);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('html_description')) {
                obj['html_description'] = ApiClient.convertToType(data['html_description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [ImageObject]);
            }
            if (data.hasOwnProperty('is_externally_hosted')) {
                obj['is_externally_hosted'] = ApiClient.convertToType(data['is_externally_hosted'], 'Boolean');
            }
            if (data.hasOwnProperty('is_playable')) {
                obj['is_playable'] = ApiClient.convertToType(data['is_playable'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('languages')) {
                obj['languages'] = ApiClient.convertToType(data['languages'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('release_date')) {
                obj['release_date'] = ApiClient.convertToType(data['release_date'], 'String');
            }
            if (data.hasOwnProperty('release_date_precision')) {
                obj['release_date_precision'] = ApiClient.convertToType(data['release_date_precision'], 'String');
            }
            if (data.hasOwnProperty('restrictions')) {
                obj['restrictions'] = ApiClient.convertToType(data['restrictions'], EpisodeRestrictionObject);
            }
            if (data.hasOwnProperty('resume_point')) {
                obj['resume_point'] = ApiClient.convertToType(data['resume_point'], ResumePointObject);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EpisodeBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EpisodeBase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EpisodeBase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['audio_preview_url'] && !(typeof data['audio_preview_url'] === 'string' || data['audio_preview_url'] instanceof String)) {
            throw new Error("Expected the field `audio_preview_url` to be a primitive type in the JSON string but got " + data['audio_preview_url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `external_urls`
        if (data['external_urls']) { // data not null
          ExternalUrlObject.validateJSON(data['external_urls']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['html_description'] && !(typeof data['html_description'] === 'string' || data['html_description'] instanceof String)) {
            throw new Error("Expected the field `html_description` to be a primitive type in the JSON string but got " + data['html_description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                ImageObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['languages'])) {
            throw new Error("Expected the field `languages` to be an array in the JSON data but got " + data['languages']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['release_date'] && !(typeof data['release_date'] === 'string' || data['release_date'] instanceof String)) {
            throw new Error("Expected the field `release_date` to be a primitive type in the JSON string but got " + data['release_date']);
        }
        // ensure the json data is a string
        if (data['release_date_precision'] && !(typeof data['release_date_precision'] === 'string' || data['release_date_precision'] instanceof String)) {
            throw new Error("Expected the field `release_date_precision` to be a primitive type in the JSON string but got " + data['release_date_precision']);
        }
        // validate the optional field `restrictions`
        if (data['restrictions']) { // data not null
          EpisodeRestrictionObject.validateJSON(data['restrictions']);
        }
        // validate the optional field `resume_point`
        if (data['resume_point']) { // data not null
          ResumePointObject.validateJSON(data['resume_point']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

EpisodeBase.RequiredProperties = ["audio_preview_url", "description", "duration_ms", "explicit", "external_urls", "href", "html_description", "id", "images", "is_externally_hosted", "is_playable", "languages", "name", "release_date", "release_date_precision", "resume_point", "type", "uri"];

/**
 * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
 * @member {String} audio_preview_url
 */
EpisodeBase.prototype['audio_preview_url'] = undefined;

/**
 * A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
 * @member {String} description
 */
EpisodeBase.prototype['description'] = undefined;

/**
 * The episode length in milliseconds. 
 * @member {Number} duration_ms
 */
EpisodeBase.prototype['duration_ms'] = undefined;

/**
 * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
 * @member {Boolean} explicit
 */
EpisodeBase.prototype['explicit'] = undefined;

/**
 * External URLs for this episode. 
 * @member {module:model/ExternalUrlObject} external_urls
 */
EpisodeBase.prototype['external_urls'] = undefined;

/**
 * A link to the Web API endpoint providing full details of the episode. 
 * @member {String} href
 */
EpisodeBase.prototype['href'] = undefined;

/**
 * A description of the episode. This field may contain HTML tags. 
 * @member {String} html_description
 */
EpisodeBase.prototype['html_description'] = undefined;

/**
 * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
 * @member {String} id
 */
EpisodeBase.prototype['id'] = undefined;

/**
 * The cover art for the episode in various sizes, widest first. 
 * @member {Array.<module:model/ImageObject>} images
 */
EpisodeBase.prototype['images'] = undefined;

/**
 * True if the episode is hosted outside of Spotify's CDN. 
 * @member {Boolean} is_externally_hosted
 */
EpisodeBase.prototype['is_externally_hosted'] = undefined;

/**
 * True if the episode is playable in the given market. Otherwise false. 
 * @member {Boolean} is_playable
 */
EpisodeBase.prototype['is_playable'] = undefined;

/**
 * The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead. 
 * @member {String} language
 */
EpisodeBase.prototype['language'] = undefined;

/**
 * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
 * @member {Array.<String>} languages
 */
EpisodeBase.prototype['languages'] = undefined;

/**
 * The name of the episode. 
 * @member {String} name
 */
EpisodeBase.prototype['name'] = undefined;

/**
 * The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
 * @member {String} release_date
 */
EpisodeBase.prototype['release_date'] = undefined;

/**
 * The precision with which `release_date` value is known. 
 * @member {module:model/EpisodeBase.ReleaseDatePrecisionEnum} release_date_precision
 */
EpisodeBase.prototype['release_date_precision'] = undefined;

/**
 * Included in the response when a content restriction is applied. 
 * @member {module:model/EpisodeRestrictionObject} restrictions
 */
EpisodeBase.prototype['restrictions'] = undefined;

/**
 * The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'. 
 * @member {module:model/ResumePointObject} resume_point
 */
EpisodeBase.prototype['resume_point'] = undefined;

/**
 * The object type. 
 * @member {module:model/EpisodeBase.TypeEnum} type
 */
EpisodeBase.prototype['type'] = undefined;

/**
 * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
 * @member {String} uri
 */
EpisodeBase.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>release_date_precision</code> property.
 * @enum {String}
 * @readonly
 */
EpisodeBase['ReleaseDatePrecisionEnum'] = {

    /**
     * value: "year"
     * @const
     */
    "year": "year",

    /**
     * value: "month"
     * @const
     */
    "month": "month",

    /**
     * value: "day"
     * @const
     */
    "day": "day"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EpisodeBase['TypeEnum'] = {

    /**
     * value: "episode"
     * @const
     */
    "episode": "episode"
};



export default EpisodeBase;

