/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SectionObject model module.
 * @module model/SectionObject
 * @version 2023.2.27
 */
class SectionObject {
    /**
     * Constructs a new <code>SectionObject</code>.
     * @alias module:model/SectionObject
     */
    constructor() { 
        
        SectionObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SectionObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SectionObject} obj Optional instance to populate.
     * @return {module:model/SectionObject} The populated <code>SectionObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SectionObject();

            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'Number');
            }
            if (data.hasOwnProperty('key_confidence')) {
                obj['key_confidence'] = ApiClient.convertToType(data['key_confidence'], 'Number');
            }
            if (data.hasOwnProperty('loudness')) {
                obj['loudness'] = ApiClient.convertToType(data['loudness'], 'Number');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'Number');
            }
            if (data.hasOwnProperty('mode_confidence')) {
                obj['mode_confidence'] = ApiClient.convertToType(data['mode_confidence'], 'Number');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('tempo')) {
                obj['tempo'] = ApiClient.convertToType(data['tempo'], 'Number');
            }
            if (data.hasOwnProperty('tempo_confidence')) {
                obj['tempo_confidence'] = ApiClient.convertToType(data['tempo_confidence'], 'Number');
            }
            if (data.hasOwnProperty('time_signature')) {
                obj['time_signature'] = ApiClient.convertToType(data['time_signature'], 'Number');
            }
            if (data.hasOwnProperty('time_signature_confidence')) {
                obj['time_signature_confidence'] = ApiClient.convertToType(data['time_signature_confidence'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SectionObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SectionObject</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The confidence, from 0.0 to 1.0, of the reliability of the section's \"designation\".
 * @member {Number} confidence
 */
SectionObject.prototype['confidence'] = undefined;

/**
 * The duration (in seconds) of the section.
 * @member {Number} duration
 */
SectionObject.prototype['duration'] = undefined;

/**
 * The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.
 * @member {Number} key
 */
SectionObject.prototype['key'] = undefined;

/**
 * The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.
 * @member {Number} key_confidence
 */
SectionObject.prototype['key_confidence'] = undefined;

/**
 * The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.
 * @member {Number} loudness
 */
SectionObject.prototype['loudness'] = undefined;

/**
 * Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
 * @member {module:model/SectionObject.ModeEnum} mode
 */
SectionObject.prototype['mode'] = undefined;

/**
 * The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
 * @member {Number} mode_confidence
 */
SectionObject.prototype['mode_confidence'] = undefined;

/**
 * The starting point (in seconds) of the section.
 * @member {Number} start
 */
SectionObject.prototype['start'] = undefined;

/**
 * The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
 * @member {Number} tempo
 */
SectionObject.prototype['tempo'] = undefined;

/**
 * The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field.
 * @member {Number} tempo_confidence
 */
SectionObject.prototype['tempo_confidence'] = undefined;

/**
 * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".
 * @member {Number} time_signature
 */
SectionObject.prototype['time_signature'] = undefined;

/**
 * The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.
 * @member {Number} time_signature_confidence
 */
SectionObject.prototype['time_signature_confidence'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {Number}
 * @readonly
 */
SectionObject['ModeEnum'] = {

    /**
     * value: -1
     * @const
     */
    "-1": -1,

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1
};



export default SectionObject;

