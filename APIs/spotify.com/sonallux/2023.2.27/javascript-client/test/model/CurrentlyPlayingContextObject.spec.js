/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpotifyWebApiWithFixesAndImprovementsFromSonallux);
  }
}(this, function(expect, SpotifyWebApiWithFixesAndImprovementsFromSonallux) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CurrentlyPlayingContextObject', function() {
    it('should create an instance of CurrentlyPlayingContextObject', function() {
      // uncomment below and update the code to test CurrentlyPlayingContextObject
      //var instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject();
      //expect(instance).to.be.a(SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject);
    });

    it('should have the property actions (base name: "actions")', function() {
      // uncomment below and update the code to test the property actions
      //var instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject();
      //expect(instance).to.be();
    });

    it('should have the property context (base name: "context")', function() {
      // uncomment below and update the code to test the property context
      //var instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject();
      //expect(instance).to.be();
    });

    it('should have the property currentlyPlayingType (base name: "currently_playing_type")', function() {
      // uncomment below and update the code to test the property currentlyPlayingType
      //var instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject();
      //expect(instance).to.be();
    });

    it('should have the property device (base name: "device")', function() {
      // uncomment below and update the code to test the property device
      //var instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject();
      //expect(instance).to.be();
    });

    it('should have the property isPlaying (base name: "is_playing")', function() {
      // uncomment below and update the code to test the property isPlaying
      //var instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject();
      //expect(instance).to.be();
    });

    it('should have the property item (base name: "item")', function() {
      // uncomment below and update the code to test the property item
      //var instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject();
      //expect(instance).to.be();
    });

    it('should have the property progressMs (base name: "progress_ms")', function() {
      // uncomment below and update the code to test the property progressMs
      //var instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject();
      //expect(instance).to.be();
    });

    it('should have the property repeatState (base name: "repeat_state")', function() {
      // uncomment below and update the code to test the property repeatState
      //var instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject();
      //expect(instance).to.be();
    });

    it('should have the property shuffleState (base name: "shuffle_state")', function() {
      // uncomment below and update the code to test the property shuffleState
      //var instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.CurrentlyPlayingContextObject();
      //expect(instance).to.be();
    });

  });

}));
