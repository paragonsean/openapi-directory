/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpotifyWebApiWithFixesAndImprovementsFromSonallux);
  }
}(this, function(expect, SpotifyWebApiWithFixesAndImprovementsFromSonallux) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.ArtistsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ArtistsApi', function() {
    describe('checkCurrentUserFollows_0', function() {
      it('should call checkCurrentUserFollows_0 successfully', function(done) {
        //uncomment below and update the code to test checkCurrentUserFollows_0
        //instance.checkCurrentUserFollows_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('followArtistsUsers_0', function() {
      it('should call followArtistsUsers_0 successfully', function(done) {
        //uncomment below and update the code to test followArtistsUsers_0
        //instance.followArtistsUsers_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnArtist', function() {
      it('should call getAnArtist successfully', function(done) {
        //uncomment below and update the code to test getAnArtist
        //instance.getAnArtist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnArtistsAlbums', function() {
      it('should call getAnArtistsAlbums successfully', function(done) {
        //uncomment below and update the code to test getAnArtistsAlbums
        //instance.getAnArtistsAlbums(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnArtistsRelatedArtists', function() {
      it('should call getAnArtistsRelatedArtists successfully', function(done) {
        //uncomment below and update the code to test getAnArtistsRelatedArtists
        //instance.getAnArtistsRelatedArtists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnArtistsTopTracks', function() {
      it('should call getAnArtistsTopTracks successfully', function(done) {
        //uncomment below and update the code to test getAnArtistsTopTracks
        //instance.getAnArtistsTopTracks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFollowed_1', function() {
      it('should call getFollowed_1 successfully', function(done) {
        //uncomment below and update the code to test getFollowed_1
        //instance.getFollowed_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMultipleArtists', function() {
      it('should call getMultipleArtists successfully', function(done) {
        //uncomment below and update the code to test getMultipleArtists
        //instance.getMultipleArtists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUsersTopArtists_0', function() {
      it('should call getUsersTopArtists_0 successfully', function(done) {
        //uncomment below and update the code to test getUsersTopArtists_0
        //instance.getUsersTopArtists_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unfollowArtistsUsers_0', function() {
      it('should call unfollowArtistsUsers_0 successfully', function(done) {
        //uncomment below and update the code to test unfollowArtistsUsers_0
        //instance.unfollowArtistsUsers_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
