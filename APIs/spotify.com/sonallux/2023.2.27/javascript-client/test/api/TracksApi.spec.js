/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpotifyWebApiWithFixesAndImprovementsFromSonallux);
  }
}(this, function(expect, SpotifyWebApiWithFixesAndImprovementsFromSonallux) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.TracksApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TracksApi', function() {
    describe('addTracksToPlaylist_0', function() {
      it('should call addTracksToPlaylist_0 successfully', function(done) {
        //uncomment below and update the code to test addTracksToPlaylist_0
        //instance.addTracksToPlaylist_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkUsersSavedTracks', function() {
      it('should call checkUsersSavedTracks successfully', function(done) {
        //uncomment below and update the code to test checkUsersSavedTracks
        //instance.checkUsersSavedTracks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnAlbumsTracks_0', function() {
      it('should call getAnAlbumsTracks_0 successfully', function(done) {
        //uncomment below and update the code to test getAnAlbumsTracks_0
        //instance.getAnAlbumsTracks_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnArtistsTopTracks_0', function() {
      it('should call getAnArtistsTopTracks_0 successfully', function(done) {
        //uncomment below and update the code to test getAnArtistsTopTracks_0
        //instance.getAnArtistsTopTracks_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAudioAnalysis', function() {
      it('should call getAudioAnalysis successfully', function(done) {
        //uncomment below and update the code to test getAudioAnalysis
        //instance.getAudioAnalysis(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAudioFeatures', function() {
      it('should call getAudioFeatures successfully', function(done) {
        //uncomment below and update the code to test getAudioFeatures
        //instance.getAudioFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPlaylistsTracks_0', function() {
      it('should call getPlaylistsTracks_0 successfully', function(done) {
        //uncomment below and update the code to test getPlaylistsTracks_0
        //instance.getPlaylistsTracks_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecommendations', function() {
      it('should call getRecommendations successfully', function(done) {
        //uncomment below and update the code to test getRecommendations
        //instance.getRecommendations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSeveralAudioFeatures', function() {
      it('should call getSeveralAudioFeatures successfully', function(done) {
        //uncomment below and update the code to test getSeveralAudioFeatures
        //instance.getSeveralAudioFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSeveralTracks', function() {
      it('should call getSeveralTracks successfully', function(done) {
        //uncomment below and update the code to test getSeveralTracks
        //instance.getSeveralTracks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTrack', function() {
      it('should call getTrack successfully', function(done) {
        //uncomment below and update the code to test getTrack
        //instance.getTrack(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUsersSavedTracks', function() {
      it('should call getUsersSavedTracks successfully', function(done) {
        //uncomment below and update the code to test getUsersSavedTracks
        //instance.getUsersSavedTracks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUsersTopTracks_0', function() {
      it('should call getUsersTopTracks_0 successfully', function(done) {
        //uncomment below and update the code to test getUsersTopTracks_0
        //instance.getUsersTopTracks_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTracksPlaylist_0', function() {
      it('should call removeTracksPlaylist_0 successfully', function(done) {
        //uncomment below and update the code to test removeTracksPlaylist_0
        //instance.removeTracksPlaylist_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTracksUser', function() {
      it('should call removeTracksUser successfully', function(done) {
        //uncomment below and update the code to test removeTracksUser
        //instance.removeTracksUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reorderOrReplacePlaylistsTracks_0', function() {
      it('should call reorderOrReplacePlaylistsTracks_0 successfully', function(done) {
        //uncomment below and update the code to test reorderOrReplacePlaylistsTracks_0
        //instance.reorderOrReplacePlaylistsTracks_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveTracksUser', function() {
      it('should call saveTracksUser successfully', function(done) {
        //uncomment below and update the code to test saveTracksUser
        //instance.saveTracksUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
