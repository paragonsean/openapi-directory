/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpotifyWebApiWithFixesAndImprovementsFromSonallux);
  }
}(this, function(expect, SpotifyWebApiWithFixesAndImprovementsFromSonallux) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpotifyWebApiWithFixesAndImprovementsFromSonallux.PlaylistsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PlaylistsApi', function() {
    describe('addTracksToPlaylist', function() {
      it('should call addTracksToPlaylist successfully', function(done) {
        //uncomment below and update the code to test addTracksToPlaylist
        //instance.addTracksToPlaylist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changePlaylistDetails', function() {
      it('should call changePlaylistDetails successfully', function(done) {
        //uncomment below and update the code to test changePlaylistDetails
        //instance.changePlaylistDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkIfUserFollowsPlaylist_0', function() {
      it('should call checkIfUserFollowsPlaylist_0 successfully', function(done) {
        //uncomment below and update the code to test checkIfUserFollowsPlaylist_0
        //instance.checkIfUserFollowsPlaylist_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPlaylist', function() {
      it('should call createPlaylist successfully', function(done) {
        //uncomment below and update the code to test createPlaylist
        //instance.createPlaylist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('followPlaylist_0', function() {
      it('should call followPlaylist_0 successfully', function(done) {
        //uncomment below and update the code to test followPlaylist_0
        //instance.followPlaylist_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getACategoriesPlaylists', function() {
      it('should call getACategoriesPlaylists successfully', function(done) {
        //uncomment below and update the code to test getACategoriesPlaylists
        //instance.getACategoriesPlaylists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAListOfCurrentUsersPlaylists', function() {
      it('should call getAListOfCurrentUsersPlaylists successfully', function(done) {
        //uncomment below and update the code to test getAListOfCurrentUsersPlaylists
        //instance.getAListOfCurrentUsersPlaylists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFeaturedPlaylists', function() {
      it('should call getFeaturedPlaylists successfully', function(done) {
        //uncomment below and update the code to test getFeaturedPlaylists
        //instance.getFeaturedPlaylists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListUsersPlaylists', function() {
      it('should call getListUsersPlaylists successfully', function(done) {
        //uncomment below and update the code to test getListUsersPlaylists
        //instance.getListUsersPlaylists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPlaylist', function() {
      it('should call getPlaylist successfully', function(done) {
        //uncomment below and update the code to test getPlaylist
        //instance.getPlaylist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPlaylistCover', function() {
      it('should call getPlaylistCover successfully', function(done) {
        //uncomment below and update the code to test getPlaylistCover
        //instance.getPlaylistCover(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPlaylistsTracks', function() {
      it('should call getPlaylistsTracks successfully', function(done) {
        //uncomment below and update the code to test getPlaylistsTracks
        //instance.getPlaylistsTracks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTracksPlaylist', function() {
      it('should call removeTracksPlaylist successfully', function(done) {
        //uncomment below and update the code to test removeTracksPlaylist
        //instance.removeTracksPlaylist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reorderOrReplacePlaylistsTracks', function() {
      it('should call reorderOrReplacePlaylistsTracks successfully', function(done) {
        //uncomment below and update the code to test reorderOrReplacePlaylistsTracks
        //instance.reorderOrReplacePlaylistsTracks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unfollowPlaylist_0', function() {
      it('should call unfollowPlaylist_0 successfully', function(done) {
        //uncomment below and update the code to test unfollowPlaylist_0
        //instance.unfollowPlaylist_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadCustomPlaylistCover', function() {
      it('should call uploadCustomPlaylistCover successfully', function(done) {
        //uncomment below and update the code to test uploadCustomPlaylistCover
        //instance.uploadCustomPlaylistCover(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
