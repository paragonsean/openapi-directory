/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimplifiedAudiobookObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimplifiedAudiobookObject::OAISimplifiedAudiobookObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimplifiedAudiobookObject::OAISimplifiedAudiobookObject() {
    this->initializeModel();
}

OAISimplifiedAudiobookObject::~OAISimplifiedAudiobookObject() {}

void OAISimplifiedAudiobookObject::initializeModel() {

    m_authors_isSet = false;
    m_authors_isValid = false;

    m_available_markets_isSet = false;
    m_available_markets_isValid = false;

    m_copyrights_isSet = false;
    m_copyrights_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_r_explicit_isSet = false;
    m_r_explicit_isValid = false;

    m_external_urls_isSet = false;
    m_external_urls_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_html_description_isSet = false;
    m_html_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_narrators_isSet = false;
    m_narrators_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_total_chapters_isSet = false;
    m_total_chapters_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAISimplifiedAudiobookObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimplifiedAudiobookObject::fromJsonObject(QJsonObject json) {

    m_authors_isValid = ::OpenAPI::fromJsonValue(m_authors, json[QString("authors")]);
    m_authors_isSet = !json[QString("authors")].isNull() && m_authors_isValid;

    m_available_markets_isValid = ::OpenAPI::fromJsonValue(m_available_markets, json[QString("available_markets")]);
    m_available_markets_isSet = !json[QString("available_markets")].isNull() && m_available_markets_isValid;

    m_copyrights_isValid = ::OpenAPI::fromJsonValue(m_copyrights, json[QString("copyrights")]);
    m_copyrights_isSet = !json[QString("copyrights")].isNull() && m_copyrights_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("edition")]);
    m_edition_isSet = !json[QString("edition")].isNull() && m_edition_isValid;

    m_r_explicit_isValid = ::OpenAPI::fromJsonValue(m_r_explicit, json[QString("explicit")]);
    m_r_explicit_isSet = !json[QString("explicit")].isNull() && m_r_explicit_isValid;

    m_external_urls_isValid = ::OpenAPI::fromJsonValue(m_external_urls, json[QString("external_urls")]);
    m_external_urls_isSet = !json[QString("external_urls")].isNull() && m_external_urls_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_html_description_isValid = ::OpenAPI::fromJsonValue(m_html_description, json[QString("html_description")]);
    m_html_description_isSet = !json[QString("html_description")].isNull() && m_html_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_narrators_isValid = ::OpenAPI::fromJsonValue(m_narrators, json[QString("narrators")]);
    m_narrators_isSet = !json[QString("narrators")].isNull() && m_narrators_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_total_chapters_isValid = ::OpenAPI::fromJsonValue(m_total_chapters, json[QString("total_chapters")]);
    m_total_chapters_isSet = !json[QString("total_chapters")].isNull() && m_total_chapters_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAISimplifiedAudiobookObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimplifiedAudiobookObject::asJsonObject() const {
    QJsonObject obj;
    if (m_authors.size() > 0) {
        obj.insert(QString("authors"), ::OpenAPI::toJsonValue(m_authors));
    }
    if (m_available_markets.size() > 0) {
        obj.insert(QString("available_markets"), ::OpenAPI::toJsonValue(m_available_markets));
    }
    if (m_copyrights.size() > 0) {
        obj.insert(QString("copyrights"), ::OpenAPI::toJsonValue(m_copyrights));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_edition_isSet) {
        obj.insert(QString("edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_r_explicit_isSet) {
        obj.insert(QString("explicit"), ::OpenAPI::toJsonValue(m_r_explicit));
    }
    if (m_external_urls.isSet()) {
        obj.insert(QString("external_urls"), ::OpenAPI::toJsonValue(m_external_urls));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_html_description_isSet) {
        obj.insert(QString("html_description"), ::OpenAPI::toJsonValue(m_html_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_narrators.size() > 0) {
        obj.insert(QString("narrators"), ::OpenAPI::toJsonValue(m_narrators));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_total_chapters_isSet) {
        obj.insert(QString("total_chapters"), ::OpenAPI::toJsonValue(m_total_chapters));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QList<OAIAuthorObject> OAISimplifiedAudiobookObject::getAuthors() const {
    return m_authors;
}
void OAISimplifiedAudiobookObject::setAuthors(const QList<OAIAuthorObject> &authors) {
    m_authors = authors;
    m_authors_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_authors_Set() const{
    return m_authors_isSet;
}

bool OAISimplifiedAudiobookObject::is_authors_Valid() const{
    return m_authors_isValid;
}

QList<QString> OAISimplifiedAudiobookObject::getAvailableMarkets() const {
    return m_available_markets;
}
void OAISimplifiedAudiobookObject::setAvailableMarkets(const QList<QString> &available_markets) {
    m_available_markets = available_markets;
    m_available_markets_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_available_markets_Set() const{
    return m_available_markets_isSet;
}

bool OAISimplifiedAudiobookObject::is_available_markets_Valid() const{
    return m_available_markets_isValid;
}

QList<OAICopyrightObject> OAISimplifiedAudiobookObject::getCopyrights() const {
    return m_copyrights;
}
void OAISimplifiedAudiobookObject::setCopyrights(const QList<OAICopyrightObject> &copyrights) {
    m_copyrights = copyrights;
    m_copyrights_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_copyrights_Set() const{
    return m_copyrights_isSet;
}

bool OAISimplifiedAudiobookObject::is_copyrights_Valid() const{
    return m_copyrights_isValid;
}

QString OAISimplifiedAudiobookObject::getDescription() const {
    return m_description;
}
void OAISimplifiedAudiobookObject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_description_Set() const{
    return m_description_isSet;
}

bool OAISimplifiedAudiobookObject::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISimplifiedAudiobookObject::getEdition() const {
    return m_edition;
}
void OAISimplifiedAudiobookObject::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAISimplifiedAudiobookObject::is_edition_Valid() const{
    return m_edition_isValid;
}

bool OAISimplifiedAudiobookObject::isRExplicit() const {
    return m_r_explicit;
}
void OAISimplifiedAudiobookObject::setRExplicit(const bool &r_explicit) {
    m_r_explicit = r_explicit;
    m_r_explicit_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_r_explicit_Set() const{
    return m_r_explicit_isSet;
}

bool OAISimplifiedAudiobookObject::is_r_explicit_Valid() const{
    return m_r_explicit_isValid;
}

OAIExternalUrlObject OAISimplifiedAudiobookObject::getExternalUrls() const {
    return m_external_urls;
}
void OAISimplifiedAudiobookObject::setExternalUrls(const OAIExternalUrlObject &external_urls) {
    m_external_urls = external_urls;
    m_external_urls_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_external_urls_Set() const{
    return m_external_urls_isSet;
}

bool OAISimplifiedAudiobookObject::is_external_urls_Valid() const{
    return m_external_urls_isValid;
}

QString OAISimplifiedAudiobookObject::getHref() const {
    return m_href;
}
void OAISimplifiedAudiobookObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAISimplifiedAudiobookObject::is_href_Valid() const{
    return m_href_isValid;
}

QString OAISimplifiedAudiobookObject::getHtmlDescription() const {
    return m_html_description;
}
void OAISimplifiedAudiobookObject::setHtmlDescription(const QString &html_description) {
    m_html_description = html_description;
    m_html_description_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_html_description_Set() const{
    return m_html_description_isSet;
}

bool OAISimplifiedAudiobookObject::is_html_description_Valid() const{
    return m_html_description_isValid;
}

QString OAISimplifiedAudiobookObject::getId() const {
    return m_id;
}
void OAISimplifiedAudiobookObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAISimplifiedAudiobookObject::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageObject> OAISimplifiedAudiobookObject::getImages() const {
    return m_images;
}
void OAISimplifiedAudiobookObject::setImages(const QList<OAIImageObject> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_images_Set() const{
    return m_images_isSet;
}

bool OAISimplifiedAudiobookObject::is_images_Valid() const{
    return m_images_isValid;
}

QList<QString> OAISimplifiedAudiobookObject::getLanguages() const {
    return m_languages;
}
void OAISimplifiedAudiobookObject::setLanguages(const QList<QString> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAISimplifiedAudiobookObject::is_languages_Valid() const{
    return m_languages_isValid;
}

QString OAISimplifiedAudiobookObject::getMediaType() const {
    return m_media_type;
}
void OAISimplifiedAudiobookObject::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAISimplifiedAudiobookObject::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAISimplifiedAudiobookObject::getName() const {
    return m_name;
}
void OAISimplifiedAudiobookObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAISimplifiedAudiobookObject::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAINarratorObject> OAISimplifiedAudiobookObject::getNarrators() const {
    return m_narrators;
}
void OAISimplifiedAudiobookObject::setNarrators(const QList<OAINarratorObject> &narrators) {
    m_narrators = narrators;
    m_narrators_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_narrators_Set() const{
    return m_narrators_isSet;
}

bool OAISimplifiedAudiobookObject::is_narrators_Valid() const{
    return m_narrators_isValid;
}

QString OAISimplifiedAudiobookObject::getPublisher() const {
    return m_publisher;
}
void OAISimplifiedAudiobookObject::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAISimplifiedAudiobookObject::is_publisher_Valid() const{
    return m_publisher_isValid;
}

qint32 OAISimplifiedAudiobookObject::getTotalChapters() const {
    return m_total_chapters;
}
void OAISimplifiedAudiobookObject::setTotalChapters(const qint32 &total_chapters) {
    m_total_chapters = total_chapters;
    m_total_chapters_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_total_chapters_Set() const{
    return m_total_chapters_isSet;
}

bool OAISimplifiedAudiobookObject::is_total_chapters_Valid() const{
    return m_total_chapters_isValid;
}

QString OAISimplifiedAudiobookObject::getType() const {
    return m_type;
}
void OAISimplifiedAudiobookObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAISimplifiedAudiobookObject::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISimplifiedAudiobookObject::getUri() const {
    return m_uri;
}
void OAISimplifiedAudiobookObject::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAISimplifiedAudiobookObject::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAISimplifiedAudiobookObject::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAISimplifiedAudiobookObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_markets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyrights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_explicit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_narrators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_chapters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimplifiedAudiobookObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authors_isValid && m_available_markets_isValid && m_copyrights_isValid && m_description_isValid && m_r_explicit_isValid && m_external_urls_isValid && m_href_isValid && m_html_description_isValid && m_id_isValid && m_images_isValid && m_languages_isValid && m_media_type_isValid && m_name_isValid && m_narrators_isValid && m_publisher_isValid && m_total_chapters_isValid && m_type_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
