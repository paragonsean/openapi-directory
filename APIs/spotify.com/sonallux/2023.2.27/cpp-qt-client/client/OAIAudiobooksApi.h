/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAudiobooksApi_H
#define OAI_OAIAudiobooksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAudiobookObject.h"
#include "OAIGet_multiple_albums_401_response.h"
#include "OAIGet_multiple_audiobooks_200_response.h"
#include "OAIPagingSavedAudiobookObject.h"
#include "OAIPagingSimplifiedChapterObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAudiobooksApi : public QObject {
    Q_OBJECT

public:
    OAIAudiobooksApi(const int timeOut = 0);
    ~OAIAudiobooksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ids QString [required]
    */
    virtual void checkUsersSavedAudiobooks(const QString &ids);

    /**
    * @param[in]  id QString [required]
    * @param[in]  market QString [optional]
    */
    virtual void getAnAudiobook(const QString &id, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  market QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getAudiobookChapters(const QString &id, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  market QString [optional]
    */
    virtual void getMultipleAudiobooks(const QString &ids, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getUsersSavedAudiobooks(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ids QString [required]
    */
    virtual void removeAudiobooksUser(const QString &ids);

    /**
    * @param[in]  ids QString [required]
    */
    virtual void saveAudiobooksUser(const QString &ids);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkUsersSavedAudiobooksCallback(OAIHttpRequestWorker *worker);
    void getAnAudiobookCallback(OAIHttpRequestWorker *worker);
    void getAudiobookChaptersCallback(OAIHttpRequestWorker *worker);
    void getMultipleAudiobooksCallback(OAIHttpRequestWorker *worker);
    void getUsersSavedAudiobooksCallback(OAIHttpRequestWorker *worker);
    void removeAudiobooksUserCallback(OAIHttpRequestWorker *worker);
    void saveAudiobooksUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkUsersSavedAudiobooksSignal(QList<bool> summary);
    void getAnAudiobookSignal(OAIAudiobookObject summary);
    void getAudiobookChaptersSignal(OAIPagingSimplifiedChapterObject summary);
    void getMultipleAudiobooksSignal(OAIGet_multiple_audiobooks_200_response summary);
    void getUsersSavedAudiobooksSignal(OAIPagingSavedAudiobookObject summary);
    void removeAudiobooksUserSignal();
    void saveAudiobooksUserSignal();


    void checkUsersSavedAudiobooksSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void getAnAudiobookSignalFull(OAIHttpRequestWorker *worker, OAIAudiobookObject summary);
    void getAudiobookChaptersSignalFull(OAIHttpRequestWorker *worker, OAIPagingSimplifiedChapterObject summary);
    void getMultipleAudiobooksSignalFull(OAIHttpRequestWorker *worker, OAIGet_multiple_audiobooks_200_response summary);
    void getUsersSavedAudiobooksSignalFull(OAIHttpRequestWorker *worker, OAIPagingSavedAudiobookObject summary);
    void removeAudiobooksUserSignalFull(OAIHttpRequestWorker *worker);
    void saveAudiobooksUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use checkUsersSavedAudiobooksSignalError() instead")
    void checkUsersSavedAudiobooksSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedAudiobooksSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnAudiobookSignalError() instead")
    void getAnAudiobookSignalE(OAIAudiobookObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnAudiobookSignalError(OAIAudiobookObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAudiobookChaptersSignalError() instead")
    void getAudiobookChaptersSignalE(OAIPagingSimplifiedChapterObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAudiobookChaptersSignalError(OAIPagingSimplifiedChapterObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultipleAudiobooksSignalError() instead")
    void getMultipleAudiobooksSignalE(OAIGet_multiple_audiobooks_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultipleAudiobooksSignalError(OAIGet_multiple_audiobooks_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedAudiobooksSignalError() instead")
    void getUsersSavedAudiobooksSignalE(OAIPagingSavedAudiobookObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedAudiobooksSignalError(OAIPagingSavedAudiobookObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAudiobooksUserSignalError() instead")
    void removeAudiobooksUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAudiobooksUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveAudiobooksUserSignalError() instead")
    void saveAudiobooksUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveAudiobooksUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkUsersSavedAudiobooksSignalErrorFull() instead")
    void checkUsersSavedAudiobooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedAudiobooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnAudiobookSignalErrorFull() instead")
    void getAnAudiobookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnAudiobookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAudiobookChaptersSignalErrorFull() instead")
    void getAudiobookChaptersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAudiobookChaptersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultipleAudiobooksSignalErrorFull() instead")
    void getMultipleAudiobooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultipleAudiobooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedAudiobooksSignalErrorFull() instead")
    void getUsersSavedAudiobooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedAudiobooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAudiobooksUserSignalErrorFull() instead")
    void removeAudiobooksUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAudiobooksUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveAudiobooksUserSignalErrorFull() instead")
    void saveAudiobooksUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveAudiobooksUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
