/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdd_tracks_to_playlist_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdd_tracks_to_playlist_request::OAIAdd_tracks_to_playlist_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdd_tracks_to_playlist_request::OAIAdd_tracks_to_playlist_request() {
    this->initializeModel();
}

OAIAdd_tracks_to_playlist_request::~OAIAdd_tracks_to_playlist_request() {}

void OAIAdd_tracks_to_playlist_request::initializeModel() {

    m_position_isSet = false;
    m_position_isValid = false;

    m_uris_isSet = false;
    m_uris_isValid = false;
}

void OAIAdd_tracks_to_playlist_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdd_tracks_to_playlist_request::fromJsonObject(QJsonObject json) {

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_uris_isValid = ::OpenAPI::fromJsonValue(m_uris, json[QString("uris")]);
    m_uris_isSet = !json[QString("uris")].isNull() && m_uris_isValid;
}

QString OAIAdd_tracks_to_playlist_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdd_tracks_to_playlist_request::asJsonObject() const {
    QJsonObject obj;
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_uris.size() > 0) {
        obj.insert(QString("uris"), ::OpenAPI::toJsonValue(m_uris));
    }
    return obj;
}

qint32 OAIAdd_tracks_to_playlist_request::getPosition() const {
    return m_position;
}
void OAIAdd_tracks_to_playlist_request::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIAdd_tracks_to_playlist_request::is_position_Set() const{
    return m_position_isSet;
}

bool OAIAdd_tracks_to_playlist_request::is_position_Valid() const{
    return m_position_isValid;
}

QList<QString> OAIAdd_tracks_to_playlist_request::getUris() const {
    return m_uris;
}
void OAIAdd_tracks_to_playlist_request::setUris(const QList<QString> &uris) {
    m_uris = uris;
    m_uris_isSet = true;
}

bool OAIAdd_tracks_to_playlist_request::is_uris_Set() const{
    return m_uris_isSet;
}

bool OAIAdd_tracks_to_playlist_request::is_uris_Valid() const{
    return m_uris_isValid;
}

bool OAIAdd_tracks_to_playlist_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdd_tracks_to_playlist_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
