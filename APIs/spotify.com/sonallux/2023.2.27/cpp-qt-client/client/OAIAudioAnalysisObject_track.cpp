/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioAnalysisObject_track.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioAnalysisObject_track::OAIAudioAnalysisObject_track(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioAnalysisObject_track::OAIAudioAnalysisObject_track() {
    this->initializeModel();
}

OAIAudioAnalysisObject_track::~OAIAudioAnalysisObject_track() {}

void OAIAudioAnalysisObject_track::initializeModel() {

    m_analysis_channels_isSet = false;
    m_analysis_channels_isValid = false;

    m_analysis_sample_rate_isSet = false;
    m_analysis_sample_rate_isValid = false;

    m_code_version_isSet = false;
    m_code_version_isValid = false;

    m_codestring_isSet = false;
    m_codestring_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_echoprint_version_isSet = false;
    m_echoprint_version_isValid = false;

    m_echoprintstring_isSet = false;
    m_echoprintstring_isValid = false;

    m_end_of_fade_in_isSet = false;
    m_end_of_fade_in_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_key_confidence_isSet = false;
    m_key_confidence_isValid = false;

    m_loudness_isSet = false;
    m_loudness_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_mode_confidence_isSet = false;
    m_mode_confidence_isValid = false;

    m_num_samples_isSet = false;
    m_num_samples_isValid = false;

    m_offset_seconds_isSet = false;
    m_offset_seconds_isValid = false;

    m_rhythm_version_isSet = false;
    m_rhythm_version_isValid = false;

    m_rhythmstring_isSet = false;
    m_rhythmstring_isValid = false;

    m_sample_md5_isSet = false;
    m_sample_md5_isValid = false;

    m_start_of_fade_out_isSet = false;
    m_start_of_fade_out_isValid = false;

    m_synch_version_isSet = false;
    m_synch_version_isValid = false;

    m_synchstring_isSet = false;
    m_synchstring_isValid = false;

    m_tempo_isSet = false;
    m_tempo_isValid = false;

    m_tempo_confidence_isSet = false;
    m_tempo_confidence_isValid = false;

    m_time_signature_isSet = false;
    m_time_signature_isValid = false;

    m_time_signature_confidence_isSet = false;
    m_time_signature_confidence_isValid = false;

    m_window_seconds_isSet = false;
    m_window_seconds_isValid = false;
}

void OAIAudioAnalysisObject_track::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioAnalysisObject_track::fromJsonObject(QJsonObject json) {

    m_analysis_channels_isValid = ::OpenAPI::fromJsonValue(m_analysis_channels, json[QString("analysis_channels")]);
    m_analysis_channels_isSet = !json[QString("analysis_channels")].isNull() && m_analysis_channels_isValid;

    m_analysis_sample_rate_isValid = ::OpenAPI::fromJsonValue(m_analysis_sample_rate, json[QString("analysis_sample_rate")]);
    m_analysis_sample_rate_isSet = !json[QString("analysis_sample_rate")].isNull() && m_analysis_sample_rate_isValid;

    m_code_version_isValid = ::OpenAPI::fromJsonValue(m_code_version, json[QString("code_version")]);
    m_code_version_isSet = !json[QString("code_version")].isNull() && m_code_version_isValid;

    m_codestring_isValid = ::OpenAPI::fromJsonValue(m_codestring, json[QString("codestring")]);
    m_codestring_isSet = !json[QString("codestring")].isNull() && m_codestring_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_echoprint_version_isValid = ::OpenAPI::fromJsonValue(m_echoprint_version, json[QString("echoprint_version")]);
    m_echoprint_version_isSet = !json[QString("echoprint_version")].isNull() && m_echoprint_version_isValid;

    m_echoprintstring_isValid = ::OpenAPI::fromJsonValue(m_echoprintstring, json[QString("echoprintstring")]);
    m_echoprintstring_isSet = !json[QString("echoprintstring")].isNull() && m_echoprintstring_isValid;

    m_end_of_fade_in_isValid = ::OpenAPI::fromJsonValue(m_end_of_fade_in, json[QString("end_of_fade_in")]);
    m_end_of_fade_in_isSet = !json[QString("end_of_fade_in")].isNull() && m_end_of_fade_in_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_key_confidence_isValid = ::OpenAPI::fromJsonValue(m_key_confidence, json[QString("key_confidence")]);
    m_key_confidence_isSet = !json[QString("key_confidence")].isNull() && m_key_confidence_isValid;

    m_loudness_isValid = ::OpenAPI::fromJsonValue(m_loudness, json[QString("loudness")]);
    m_loudness_isSet = !json[QString("loudness")].isNull() && m_loudness_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_mode_confidence_isValid = ::OpenAPI::fromJsonValue(m_mode_confidence, json[QString("mode_confidence")]);
    m_mode_confidence_isSet = !json[QString("mode_confidence")].isNull() && m_mode_confidence_isValid;

    m_num_samples_isValid = ::OpenAPI::fromJsonValue(m_num_samples, json[QString("num_samples")]);
    m_num_samples_isSet = !json[QString("num_samples")].isNull() && m_num_samples_isValid;

    m_offset_seconds_isValid = ::OpenAPI::fromJsonValue(m_offset_seconds, json[QString("offset_seconds")]);
    m_offset_seconds_isSet = !json[QString("offset_seconds")].isNull() && m_offset_seconds_isValid;

    m_rhythm_version_isValid = ::OpenAPI::fromJsonValue(m_rhythm_version, json[QString("rhythm_version")]);
    m_rhythm_version_isSet = !json[QString("rhythm_version")].isNull() && m_rhythm_version_isValid;

    m_rhythmstring_isValid = ::OpenAPI::fromJsonValue(m_rhythmstring, json[QString("rhythmstring")]);
    m_rhythmstring_isSet = !json[QString("rhythmstring")].isNull() && m_rhythmstring_isValid;

    m_sample_md5_isValid = ::OpenAPI::fromJsonValue(m_sample_md5, json[QString("sample_md5")]);
    m_sample_md5_isSet = !json[QString("sample_md5")].isNull() && m_sample_md5_isValid;

    m_start_of_fade_out_isValid = ::OpenAPI::fromJsonValue(m_start_of_fade_out, json[QString("start_of_fade_out")]);
    m_start_of_fade_out_isSet = !json[QString("start_of_fade_out")].isNull() && m_start_of_fade_out_isValid;

    m_synch_version_isValid = ::OpenAPI::fromJsonValue(m_synch_version, json[QString("synch_version")]);
    m_synch_version_isSet = !json[QString("synch_version")].isNull() && m_synch_version_isValid;

    m_synchstring_isValid = ::OpenAPI::fromJsonValue(m_synchstring, json[QString("synchstring")]);
    m_synchstring_isSet = !json[QString("synchstring")].isNull() && m_synchstring_isValid;

    m_tempo_isValid = ::OpenAPI::fromJsonValue(m_tempo, json[QString("tempo")]);
    m_tempo_isSet = !json[QString("tempo")].isNull() && m_tempo_isValid;

    m_tempo_confidence_isValid = ::OpenAPI::fromJsonValue(m_tempo_confidence, json[QString("tempo_confidence")]);
    m_tempo_confidence_isSet = !json[QString("tempo_confidence")].isNull() && m_tempo_confidence_isValid;

    m_time_signature_isValid = ::OpenAPI::fromJsonValue(m_time_signature, json[QString("time_signature")]);
    m_time_signature_isSet = !json[QString("time_signature")].isNull() && m_time_signature_isValid;

    m_time_signature_confidence_isValid = ::OpenAPI::fromJsonValue(m_time_signature_confidence, json[QString("time_signature_confidence")]);
    m_time_signature_confidence_isSet = !json[QString("time_signature_confidence")].isNull() && m_time_signature_confidence_isValid;

    m_window_seconds_isValid = ::OpenAPI::fromJsonValue(m_window_seconds, json[QString("window_seconds")]);
    m_window_seconds_isSet = !json[QString("window_seconds")].isNull() && m_window_seconds_isValid;
}

QString OAIAudioAnalysisObject_track::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioAnalysisObject_track::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_channels_isSet) {
        obj.insert(QString("analysis_channels"), ::OpenAPI::toJsonValue(m_analysis_channels));
    }
    if (m_analysis_sample_rate_isSet) {
        obj.insert(QString("analysis_sample_rate"), ::OpenAPI::toJsonValue(m_analysis_sample_rate));
    }
    if (m_code_version_isSet) {
        obj.insert(QString("code_version"), ::OpenAPI::toJsonValue(m_code_version));
    }
    if (m_codestring_isSet) {
        obj.insert(QString("codestring"), ::OpenAPI::toJsonValue(m_codestring));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_echoprint_version_isSet) {
        obj.insert(QString("echoprint_version"), ::OpenAPI::toJsonValue(m_echoprint_version));
    }
    if (m_echoprintstring_isSet) {
        obj.insert(QString("echoprintstring"), ::OpenAPI::toJsonValue(m_echoprintstring));
    }
    if (m_end_of_fade_in_isSet) {
        obj.insert(QString("end_of_fade_in"), ::OpenAPI::toJsonValue(m_end_of_fade_in));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_key_confidence_isSet) {
        obj.insert(QString("key_confidence"), ::OpenAPI::toJsonValue(m_key_confidence));
    }
    if (m_loudness_isSet) {
        obj.insert(QString("loudness"), ::OpenAPI::toJsonValue(m_loudness));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_mode_confidence_isSet) {
        obj.insert(QString("mode_confidence"), ::OpenAPI::toJsonValue(m_mode_confidence));
    }
    if (m_num_samples_isSet) {
        obj.insert(QString("num_samples"), ::OpenAPI::toJsonValue(m_num_samples));
    }
    if (m_offset_seconds_isSet) {
        obj.insert(QString("offset_seconds"), ::OpenAPI::toJsonValue(m_offset_seconds));
    }
    if (m_rhythm_version_isSet) {
        obj.insert(QString("rhythm_version"), ::OpenAPI::toJsonValue(m_rhythm_version));
    }
    if (m_rhythmstring_isSet) {
        obj.insert(QString("rhythmstring"), ::OpenAPI::toJsonValue(m_rhythmstring));
    }
    if (m_sample_md5_isSet) {
        obj.insert(QString("sample_md5"), ::OpenAPI::toJsonValue(m_sample_md5));
    }
    if (m_start_of_fade_out_isSet) {
        obj.insert(QString("start_of_fade_out"), ::OpenAPI::toJsonValue(m_start_of_fade_out));
    }
    if (m_synch_version_isSet) {
        obj.insert(QString("synch_version"), ::OpenAPI::toJsonValue(m_synch_version));
    }
    if (m_synchstring_isSet) {
        obj.insert(QString("synchstring"), ::OpenAPI::toJsonValue(m_synchstring));
    }
    if (m_tempo_isSet) {
        obj.insert(QString("tempo"), ::OpenAPI::toJsonValue(m_tempo));
    }
    if (m_tempo_confidence_isSet) {
        obj.insert(QString("tempo_confidence"), ::OpenAPI::toJsonValue(m_tempo_confidence));
    }
    if (m_time_signature_isSet) {
        obj.insert(QString("time_signature"), ::OpenAPI::toJsonValue(m_time_signature));
    }
    if (m_time_signature_confidence_isSet) {
        obj.insert(QString("time_signature_confidence"), ::OpenAPI::toJsonValue(m_time_signature_confidence));
    }
    if (m_window_seconds_isSet) {
        obj.insert(QString("window_seconds"), ::OpenAPI::toJsonValue(m_window_seconds));
    }
    return obj;
}

qint32 OAIAudioAnalysisObject_track::getAnalysisChannels() const {
    return m_analysis_channels;
}
void OAIAudioAnalysisObject_track::setAnalysisChannels(const qint32 &analysis_channels) {
    m_analysis_channels = analysis_channels;
    m_analysis_channels_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_analysis_channels_Set() const{
    return m_analysis_channels_isSet;
}

bool OAIAudioAnalysisObject_track::is_analysis_channels_Valid() const{
    return m_analysis_channels_isValid;
}

qint32 OAIAudioAnalysisObject_track::getAnalysisSampleRate() const {
    return m_analysis_sample_rate;
}
void OAIAudioAnalysisObject_track::setAnalysisSampleRate(const qint32 &analysis_sample_rate) {
    m_analysis_sample_rate = analysis_sample_rate;
    m_analysis_sample_rate_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_analysis_sample_rate_Set() const{
    return m_analysis_sample_rate_isSet;
}

bool OAIAudioAnalysisObject_track::is_analysis_sample_rate_Valid() const{
    return m_analysis_sample_rate_isValid;
}

double OAIAudioAnalysisObject_track::getCodeVersion() const {
    return m_code_version;
}
void OAIAudioAnalysisObject_track::setCodeVersion(const double &code_version) {
    m_code_version = code_version;
    m_code_version_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_code_version_Set() const{
    return m_code_version_isSet;
}

bool OAIAudioAnalysisObject_track::is_code_version_Valid() const{
    return m_code_version_isValid;
}

QString OAIAudioAnalysisObject_track::getCodestring() const {
    return m_codestring;
}
void OAIAudioAnalysisObject_track::setCodestring(const QString &codestring) {
    m_codestring = codestring;
    m_codestring_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_codestring_Set() const{
    return m_codestring_isSet;
}

bool OAIAudioAnalysisObject_track::is_codestring_Valid() const{
    return m_codestring_isValid;
}

double OAIAudioAnalysisObject_track::getDuration() const {
    return m_duration;
}
void OAIAudioAnalysisObject_track::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAudioAnalysisObject_track::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIAudioAnalysisObject_track::getEchoprintVersion() const {
    return m_echoprint_version;
}
void OAIAudioAnalysisObject_track::setEchoprintVersion(const double &echoprint_version) {
    m_echoprint_version = echoprint_version;
    m_echoprint_version_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_echoprint_version_Set() const{
    return m_echoprint_version_isSet;
}

bool OAIAudioAnalysisObject_track::is_echoprint_version_Valid() const{
    return m_echoprint_version_isValid;
}

QString OAIAudioAnalysisObject_track::getEchoprintstring() const {
    return m_echoprintstring;
}
void OAIAudioAnalysisObject_track::setEchoprintstring(const QString &echoprintstring) {
    m_echoprintstring = echoprintstring;
    m_echoprintstring_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_echoprintstring_Set() const{
    return m_echoprintstring_isSet;
}

bool OAIAudioAnalysisObject_track::is_echoprintstring_Valid() const{
    return m_echoprintstring_isValid;
}

double OAIAudioAnalysisObject_track::getEndOfFadeIn() const {
    return m_end_of_fade_in;
}
void OAIAudioAnalysisObject_track::setEndOfFadeIn(const double &end_of_fade_in) {
    m_end_of_fade_in = end_of_fade_in;
    m_end_of_fade_in_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_end_of_fade_in_Set() const{
    return m_end_of_fade_in_isSet;
}

bool OAIAudioAnalysisObject_track::is_end_of_fade_in_Valid() const{
    return m_end_of_fade_in_isValid;
}

qint32 OAIAudioAnalysisObject_track::getKey() const {
    return m_key;
}
void OAIAudioAnalysisObject_track::setKey(const qint32 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_key_Set() const{
    return m_key_isSet;
}

bool OAIAudioAnalysisObject_track::is_key_Valid() const{
    return m_key_isValid;
}

double OAIAudioAnalysisObject_track::getKeyConfidence() const {
    return m_key_confidence;
}
void OAIAudioAnalysisObject_track::setKeyConfidence(const double &key_confidence) {
    m_key_confidence = key_confidence;
    m_key_confidence_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_key_confidence_Set() const{
    return m_key_confidence_isSet;
}

bool OAIAudioAnalysisObject_track::is_key_confidence_Valid() const{
    return m_key_confidence_isValid;
}

float OAIAudioAnalysisObject_track::getLoudness() const {
    return m_loudness;
}
void OAIAudioAnalysisObject_track::setLoudness(const float &loudness) {
    m_loudness = loudness;
    m_loudness_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_loudness_Set() const{
    return m_loudness_isSet;
}

bool OAIAudioAnalysisObject_track::is_loudness_Valid() const{
    return m_loudness_isValid;
}

qint32 OAIAudioAnalysisObject_track::getMode() const {
    return m_mode;
}
void OAIAudioAnalysisObject_track::setMode(const qint32 &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIAudioAnalysisObject_track::is_mode_Valid() const{
    return m_mode_isValid;
}

double OAIAudioAnalysisObject_track::getModeConfidence() const {
    return m_mode_confidence;
}
void OAIAudioAnalysisObject_track::setModeConfidence(const double &mode_confidence) {
    m_mode_confidence = mode_confidence;
    m_mode_confidence_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_mode_confidence_Set() const{
    return m_mode_confidence_isSet;
}

bool OAIAudioAnalysisObject_track::is_mode_confidence_Valid() const{
    return m_mode_confidence_isValid;
}

qint32 OAIAudioAnalysisObject_track::getNumSamples() const {
    return m_num_samples;
}
void OAIAudioAnalysisObject_track::setNumSamples(const qint32 &num_samples) {
    m_num_samples = num_samples;
    m_num_samples_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_num_samples_Set() const{
    return m_num_samples_isSet;
}

bool OAIAudioAnalysisObject_track::is_num_samples_Valid() const{
    return m_num_samples_isValid;
}

qint32 OAIAudioAnalysisObject_track::getOffsetSeconds() const {
    return m_offset_seconds;
}
void OAIAudioAnalysisObject_track::setOffsetSeconds(const qint32 &offset_seconds) {
    m_offset_seconds = offset_seconds;
    m_offset_seconds_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_offset_seconds_Set() const{
    return m_offset_seconds_isSet;
}

bool OAIAudioAnalysisObject_track::is_offset_seconds_Valid() const{
    return m_offset_seconds_isValid;
}

double OAIAudioAnalysisObject_track::getRhythmVersion() const {
    return m_rhythm_version;
}
void OAIAudioAnalysisObject_track::setRhythmVersion(const double &rhythm_version) {
    m_rhythm_version = rhythm_version;
    m_rhythm_version_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_rhythm_version_Set() const{
    return m_rhythm_version_isSet;
}

bool OAIAudioAnalysisObject_track::is_rhythm_version_Valid() const{
    return m_rhythm_version_isValid;
}

QString OAIAudioAnalysisObject_track::getRhythmstring() const {
    return m_rhythmstring;
}
void OAIAudioAnalysisObject_track::setRhythmstring(const QString &rhythmstring) {
    m_rhythmstring = rhythmstring;
    m_rhythmstring_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_rhythmstring_Set() const{
    return m_rhythmstring_isSet;
}

bool OAIAudioAnalysisObject_track::is_rhythmstring_Valid() const{
    return m_rhythmstring_isValid;
}

QString OAIAudioAnalysisObject_track::getSampleMd5() const {
    return m_sample_md5;
}
void OAIAudioAnalysisObject_track::setSampleMd5(const QString &sample_md5) {
    m_sample_md5 = sample_md5;
    m_sample_md5_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_sample_md5_Set() const{
    return m_sample_md5_isSet;
}

bool OAIAudioAnalysisObject_track::is_sample_md5_Valid() const{
    return m_sample_md5_isValid;
}

double OAIAudioAnalysisObject_track::getStartOfFadeOut() const {
    return m_start_of_fade_out;
}
void OAIAudioAnalysisObject_track::setStartOfFadeOut(const double &start_of_fade_out) {
    m_start_of_fade_out = start_of_fade_out;
    m_start_of_fade_out_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_start_of_fade_out_Set() const{
    return m_start_of_fade_out_isSet;
}

bool OAIAudioAnalysisObject_track::is_start_of_fade_out_Valid() const{
    return m_start_of_fade_out_isValid;
}

double OAIAudioAnalysisObject_track::getSynchVersion() const {
    return m_synch_version;
}
void OAIAudioAnalysisObject_track::setSynchVersion(const double &synch_version) {
    m_synch_version = synch_version;
    m_synch_version_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_synch_version_Set() const{
    return m_synch_version_isSet;
}

bool OAIAudioAnalysisObject_track::is_synch_version_Valid() const{
    return m_synch_version_isValid;
}

QString OAIAudioAnalysisObject_track::getSynchstring() const {
    return m_synchstring;
}
void OAIAudioAnalysisObject_track::setSynchstring(const QString &synchstring) {
    m_synchstring = synchstring;
    m_synchstring_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_synchstring_Set() const{
    return m_synchstring_isSet;
}

bool OAIAudioAnalysisObject_track::is_synchstring_Valid() const{
    return m_synchstring_isValid;
}

float OAIAudioAnalysisObject_track::getTempo() const {
    return m_tempo;
}
void OAIAudioAnalysisObject_track::setTempo(const float &tempo) {
    m_tempo = tempo;
    m_tempo_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_tempo_Set() const{
    return m_tempo_isSet;
}

bool OAIAudioAnalysisObject_track::is_tempo_Valid() const{
    return m_tempo_isValid;
}

double OAIAudioAnalysisObject_track::getTempoConfidence() const {
    return m_tempo_confidence;
}
void OAIAudioAnalysisObject_track::setTempoConfidence(const double &tempo_confidence) {
    m_tempo_confidence = tempo_confidence;
    m_tempo_confidence_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_tempo_confidence_Set() const{
    return m_tempo_confidence_isSet;
}

bool OAIAudioAnalysisObject_track::is_tempo_confidence_Valid() const{
    return m_tempo_confidence_isValid;
}

qint32 OAIAudioAnalysisObject_track::getTimeSignature() const {
    return m_time_signature;
}
void OAIAudioAnalysisObject_track::setTimeSignature(const qint32 &time_signature) {
    m_time_signature = time_signature;
    m_time_signature_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_time_signature_Set() const{
    return m_time_signature_isSet;
}

bool OAIAudioAnalysisObject_track::is_time_signature_Valid() const{
    return m_time_signature_isValid;
}

double OAIAudioAnalysisObject_track::getTimeSignatureConfidence() const {
    return m_time_signature_confidence;
}
void OAIAudioAnalysisObject_track::setTimeSignatureConfidence(const double &time_signature_confidence) {
    m_time_signature_confidence = time_signature_confidence;
    m_time_signature_confidence_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_time_signature_confidence_Set() const{
    return m_time_signature_confidence_isSet;
}

bool OAIAudioAnalysisObject_track::is_time_signature_confidence_Valid() const{
    return m_time_signature_confidence_isValid;
}

qint32 OAIAudioAnalysisObject_track::getWindowSeconds() const {
    return m_window_seconds;
}
void OAIAudioAnalysisObject_track::setWindowSeconds(const qint32 &window_seconds) {
    m_window_seconds = window_seconds;
    m_window_seconds_isSet = true;
}

bool OAIAudioAnalysisObject_track::is_window_seconds_Set() const{
    return m_window_seconds_isSet;
}

bool OAIAudioAnalysisObject_track::is_window_seconds_Valid() const{
    return m_window_seconds_isValid;
}

bool OAIAudioAnalysisObject_track::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_sample_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codestring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_echoprint_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_echoprintstring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_of_fade_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loudness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_samples_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rhythm_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rhythmstring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_of_fade_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synch_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synchstring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tempo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tempo_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_signature_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioAnalysisObject_track::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
