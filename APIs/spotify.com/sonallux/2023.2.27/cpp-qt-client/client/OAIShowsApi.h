/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShowsApi_H
#define OAI_OAIShowsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGet_multiple_albums_401_response.h"
#include "OAIGet_multiple_shows_200_response.h"
#include "OAIPagingSavedShowObject.h"
#include "OAIPagingSimplifiedEpisodeObject.h"
#include "OAISave_shows_user_request.h"
#include "OAIShowObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShowsApi : public QObject {
    Q_OBJECT

public:
    OAIShowsApi(const int timeOut = 0);
    ~OAIShowsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ids QString [required]
    */
    virtual void checkUsersSavedShows(const QString &ids);

    /**
    * @param[in]  id QString [required]
    * @param[in]  market QString [optional]
    */
    virtual void getAShow(const QString &id, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  market QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getAShowsEpisodes(const QString &id, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  market QString [optional]
    */
    virtual void getMultipleShows(const QString &ids, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getUsersSavedShows(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  market QString [optional]
    * @param[in]  oai_save_shows_user_request OAISave_shows_user_request [optional]
    */
    virtual void removeShowsUser(const QString &ids, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISave_shows_user_request> &oai_save_shows_user_request = ::OpenAPI::OptionalParam<OAISave_shows_user_request>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  oai_save_shows_user_request OAISave_shows_user_request [optional]
    */
    virtual void saveShowsUser(const QString &ids, const ::OpenAPI::OptionalParam<OAISave_shows_user_request> &oai_save_shows_user_request = ::OpenAPI::OptionalParam<OAISave_shows_user_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkUsersSavedShowsCallback(OAIHttpRequestWorker *worker);
    void getAShowCallback(OAIHttpRequestWorker *worker);
    void getAShowsEpisodesCallback(OAIHttpRequestWorker *worker);
    void getMultipleShowsCallback(OAIHttpRequestWorker *worker);
    void getUsersSavedShowsCallback(OAIHttpRequestWorker *worker);
    void removeShowsUserCallback(OAIHttpRequestWorker *worker);
    void saveShowsUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkUsersSavedShowsSignal(QList<bool> summary);
    void getAShowSignal(OAIShowObject summary);
    void getAShowsEpisodesSignal(OAIPagingSimplifiedEpisodeObject summary);
    void getMultipleShowsSignal(OAIGet_multiple_shows_200_response summary);
    void getUsersSavedShowsSignal(OAIPagingSavedShowObject summary);
    void removeShowsUserSignal();
    void saveShowsUserSignal();


    void checkUsersSavedShowsSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void getAShowSignalFull(OAIHttpRequestWorker *worker, OAIShowObject summary);
    void getAShowsEpisodesSignalFull(OAIHttpRequestWorker *worker, OAIPagingSimplifiedEpisodeObject summary);
    void getMultipleShowsSignalFull(OAIHttpRequestWorker *worker, OAIGet_multiple_shows_200_response summary);
    void getUsersSavedShowsSignalFull(OAIHttpRequestWorker *worker, OAIPagingSavedShowObject summary);
    void removeShowsUserSignalFull(OAIHttpRequestWorker *worker);
    void saveShowsUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use checkUsersSavedShowsSignalError() instead")
    void checkUsersSavedShowsSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedShowsSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAShowSignalError() instead")
    void getAShowSignalE(OAIShowObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAShowSignalError(OAIShowObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAShowsEpisodesSignalError() instead")
    void getAShowsEpisodesSignalE(OAIPagingSimplifiedEpisodeObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAShowsEpisodesSignalError(OAIPagingSimplifiedEpisodeObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultipleShowsSignalError() instead")
    void getMultipleShowsSignalE(OAIGet_multiple_shows_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultipleShowsSignalError(OAIGet_multiple_shows_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedShowsSignalError() instead")
    void getUsersSavedShowsSignalE(OAIPagingSavedShowObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedShowsSignalError(OAIPagingSavedShowObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeShowsUserSignalError() instead")
    void removeShowsUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeShowsUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveShowsUserSignalError() instead")
    void saveShowsUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveShowsUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkUsersSavedShowsSignalErrorFull() instead")
    void checkUsersSavedShowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedShowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAShowSignalErrorFull() instead")
    void getAShowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAShowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAShowsEpisodesSignalErrorFull() instead")
    void getAShowsEpisodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAShowsEpisodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultipleShowsSignalErrorFull() instead")
    void getMultipleShowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultipleShowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedShowsSignalErrorFull() instead")
    void getUsersSavedShowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedShowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeShowsUserSignalErrorFull() instead")
    void removeShowsUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeShowsUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveShowsUserSignalErrorFull() instead")
    void saveShowsUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveShowsUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
