/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShowObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShowObject::OAIShowObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShowObject::OAIShowObject() {
    this->initializeModel();
}

OAIShowObject::~OAIShowObject() {}

void OAIShowObject::initializeModel() {

    m_available_markets_isSet = false;
    m_available_markets_isValid = false;

    m_copyrights_isSet = false;
    m_copyrights_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_r_explicit_isSet = false;
    m_r_explicit_isValid = false;

    m_external_urls_isSet = false;
    m_external_urls_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_html_description_isSet = false;
    m_html_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_is_externally_hosted_isSet = false;
    m_is_externally_hosted_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_total_episodes_isSet = false;
    m_total_episodes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_episodes_isSet = false;
    m_episodes_isValid = false;
}

void OAIShowObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShowObject::fromJsonObject(QJsonObject json) {

    m_available_markets_isValid = ::OpenAPI::fromJsonValue(m_available_markets, json[QString("available_markets")]);
    m_available_markets_isSet = !json[QString("available_markets")].isNull() && m_available_markets_isValid;

    m_copyrights_isValid = ::OpenAPI::fromJsonValue(m_copyrights, json[QString("copyrights")]);
    m_copyrights_isSet = !json[QString("copyrights")].isNull() && m_copyrights_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_r_explicit_isValid = ::OpenAPI::fromJsonValue(m_r_explicit, json[QString("explicit")]);
    m_r_explicit_isSet = !json[QString("explicit")].isNull() && m_r_explicit_isValid;

    m_external_urls_isValid = ::OpenAPI::fromJsonValue(m_external_urls, json[QString("external_urls")]);
    m_external_urls_isSet = !json[QString("external_urls")].isNull() && m_external_urls_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_html_description_isValid = ::OpenAPI::fromJsonValue(m_html_description, json[QString("html_description")]);
    m_html_description_isSet = !json[QString("html_description")].isNull() && m_html_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_is_externally_hosted_isValid = ::OpenAPI::fromJsonValue(m_is_externally_hosted, json[QString("is_externally_hosted")]);
    m_is_externally_hosted_isSet = !json[QString("is_externally_hosted")].isNull() && m_is_externally_hosted_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_total_episodes_isValid = ::OpenAPI::fromJsonValue(m_total_episodes, json[QString("total_episodes")]);
    m_total_episodes_isSet = !json[QString("total_episodes")].isNull() && m_total_episodes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_episodes_isValid = ::OpenAPI::fromJsonValue(m_episodes, json[QString("episodes")]);
    m_episodes_isSet = !json[QString("episodes")].isNull() && m_episodes_isValid;
}

QString OAIShowObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShowObject::asJsonObject() const {
    QJsonObject obj;
    if (m_available_markets.size() > 0) {
        obj.insert(QString("available_markets"), ::OpenAPI::toJsonValue(m_available_markets));
    }
    if (m_copyrights.size() > 0) {
        obj.insert(QString("copyrights"), ::OpenAPI::toJsonValue(m_copyrights));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_r_explicit_isSet) {
        obj.insert(QString("explicit"), ::OpenAPI::toJsonValue(m_r_explicit));
    }
    if (m_external_urls.isSet()) {
        obj.insert(QString("external_urls"), ::OpenAPI::toJsonValue(m_external_urls));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_html_description_isSet) {
        obj.insert(QString("html_description"), ::OpenAPI::toJsonValue(m_html_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_is_externally_hosted_isSet) {
        obj.insert(QString("is_externally_hosted"), ::OpenAPI::toJsonValue(m_is_externally_hosted));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_total_episodes_isSet) {
        obj.insert(QString("total_episodes"), ::OpenAPI::toJsonValue(m_total_episodes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_episodes_isSet) {
        obj.insert(QString("episodes"), ::OpenAPI::toJsonValue(m_episodes));
    }
    return obj;
}

QList<QString> OAIShowObject::getAvailableMarkets() const {
    return m_available_markets;
}
void OAIShowObject::setAvailableMarkets(const QList<QString> &available_markets) {
    m_available_markets = available_markets;
    m_available_markets_isSet = true;
}

bool OAIShowObject::is_available_markets_Set() const{
    return m_available_markets_isSet;
}

bool OAIShowObject::is_available_markets_Valid() const{
    return m_available_markets_isValid;
}

QList<OAICopyrightObject> OAIShowObject::getCopyrights() const {
    return m_copyrights;
}
void OAIShowObject::setCopyrights(const QList<OAICopyrightObject> &copyrights) {
    m_copyrights = copyrights;
    m_copyrights_isSet = true;
}

bool OAIShowObject::is_copyrights_Set() const{
    return m_copyrights_isSet;
}

bool OAIShowObject::is_copyrights_Valid() const{
    return m_copyrights_isValid;
}

QString OAIShowObject::getDescription() const {
    return m_description;
}
void OAIShowObject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIShowObject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIShowObject::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIShowObject::isRExplicit() const {
    return m_r_explicit;
}
void OAIShowObject::setRExplicit(const bool &r_explicit) {
    m_r_explicit = r_explicit;
    m_r_explicit_isSet = true;
}

bool OAIShowObject::is_r_explicit_Set() const{
    return m_r_explicit_isSet;
}

bool OAIShowObject::is_r_explicit_Valid() const{
    return m_r_explicit_isValid;
}

OAIExternalUrlObject OAIShowObject::getExternalUrls() const {
    return m_external_urls;
}
void OAIShowObject::setExternalUrls(const OAIExternalUrlObject &external_urls) {
    m_external_urls = external_urls;
    m_external_urls_isSet = true;
}

bool OAIShowObject::is_external_urls_Set() const{
    return m_external_urls_isSet;
}

bool OAIShowObject::is_external_urls_Valid() const{
    return m_external_urls_isValid;
}

QString OAIShowObject::getHref() const {
    return m_href;
}
void OAIShowObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIShowObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAIShowObject::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIShowObject::getHtmlDescription() const {
    return m_html_description;
}
void OAIShowObject::setHtmlDescription(const QString &html_description) {
    m_html_description = html_description;
    m_html_description_isSet = true;
}

bool OAIShowObject::is_html_description_Set() const{
    return m_html_description_isSet;
}

bool OAIShowObject::is_html_description_Valid() const{
    return m_html_description_isValid;
}

QString OAIShowObject::getId() const {
    return m_id;
}
void OAIShowObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShowObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShowObject::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageObject> OAIShowObject::getImages() const {
    return m_images;
}
void OAIShowObject::setImages(const QList<OAIImageObject> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIShowObject::is_images_Set() const{
    return m_images_isSet;
}

bool OAIShowObject::is_images_Valid() const{
    return m_images_isValid;
}

bool OAIShowObject::isIsExternallyHosted() const {
    return m_is_externally_hosted;
}
void OAIShowObject::setIsExternallyHosted(const bool &is_externally_hosted) {
    m_is_externally_hosted = is_externally_hosted;
    m_is_externally_hosted_isSet = true;
}

bool OAIShowObject::is_is_externally_hosted_Set() const{
    return m_is_externally_hosted_isSet;
}

bool OAIShowObject::is_is_externally_hosted_Valid() const{
    return m_is_externally_hosted_isValid;
}

QList<QString> OAIShowObject::getLanguages() const {
    return m_languages;
}
void OAIShowObject::setLanguages(const QList<QString> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAIShowObject::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAIShowObject::is_languages_Valid() const{
    return m_languages_isValid;
}

QString OAIShowObject::getMediaType() const {
    return m_media_type;
}
void OAIShowObject::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIShowObject::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIShowObject::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIShowObject::getName() const {
    return m_name;
}
void OAIShowObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIShowObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIShowObject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIShowObject::getPublisher() const {
    return m_publisher;
}
void OAIShowObject::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIShowObject::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIShowObject::is_publisher_Valid() const{
    return m_publisher_isValid;
}

qint32 OAIShowObject::getTotalEpisodes() const {
    return m_total_episodes;
}
void OAIShowObject::setTotalEpisodes(const qint32 &total_episodes) {
    m_total_episodes = total_episodes;
    m_total_episodes_isSet = true;
}

bool OAIShowObject::is_total_episodes_Set() const{
    return m_total_episodes_isSet;
}

bool OAIShowObject::is_total_episodes_Valid() const{
    return m_total_episodes_isValid;
}

QString OAIShowObject::getType() const {
    return m_type;
}
void OAIShowObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIShowObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIShowObject::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIShowObject::getUri() const {
    return m_uri;
}
void OAIShowObject::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIShowObject::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIShowObject::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIObject OAIShowObject::getEpisodes() const {
    return m_episodes;
}
void OAIShowObject::setEpisodes(const OAIObject &episodes) {
    m_episodes = episodes;
    m_episodes_isSet = true;
}

bool OAIShowObject::is_episodes_Set() const{
    return m_episodes_isSet;
}

bool OAIShowObject::is_episodes_Valid() const{
    return m_episodes_isValid;
}

bool OAIShowObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_markets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyrights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_explicit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_externally_hosted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_episodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episodes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShowObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_markets_isValid && m_copyrights_isValid && m_description_isValid && m_r_explicit_isValid && m_external_urls_isValid && m_href_isValid && m_html_description_isValid && m_id_isValid && m_images_isValid && m_is_externally_hosted_isValid && m_languages_isValid && m_media_type_isValid && m_name_isValid && m_publisher_isValid && m_total_episodes_isValid && m_type_isValid && m_uri_isValid && m_episodes_isValid && true;
}

} // namespace OpenAPI
