/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceObject::OAIDeviceObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceObject::OAIDeviceObject() {
    this->initializeModel();
}

OAIDeviceObject::~OAIDeviceObject() {}

void OAIDeviceObject::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_private_session_isSet = false;
    m_is_private_session_isValid = false;

    m_is_restricted_isSet = false;
    m_is_restricted_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_volume_percent_isSet = false;
    m_volume_percent_isValid = false;
}

void OAIDeviceObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceObject::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_is_private_session_isValid = ::OpenAPI::fromJsonValue(m_is_private_session, json[QString("is_private_session")]);
    m_is_private_session_isSet = !json[QString("is_private_session")].isNull() && m_is_private_session_isValid;

    m_is_restricted_isValid = ::OpenAPI::fromJsonValue(m_is_restricted, json[QString("is_restricted")]);
    m_is_restricted_isSet = !json[QString("is_restricted")].isNull() && m_is_restricted_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_volume_percent_isValid = ::OpenAPI::fromJsonValue(m_volume_percent, json[QString("volume_percent")]);
    m_volume_percent_isSet = !json[QString("volume_percent")].isNull() && m_volume_percent_isValid;
}

QString OAIDeviceObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceObject::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_private_session_isSet) {
        obj.insert(QString("is_private_session"), ::OpenAPI::toJsonValue(m_is_private_session));
    }
    if (m_is_restricted_isSet) {
        obj.insert(QString("is_restricted"), ::OpenAPI::toJsonValue(m_is_restricted));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_volume_percent_isSet) {
        obj.insert(QString("volume_percent"), ::OpenAPI::toJsonValue(m_volume_percent));
    }
    return obj;
}

QString OAIDeviceObject::getId() const {
    return m_id;
}
void OAIDeviceObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceObject::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDeviceObject::isIsActive() const {
    return m_is_active;
}
void OAIDeviceObject::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIDeviceObject::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIDeviceObject::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIDeviceObject::isIsPrivateSession() const {
    return m_is_private_session;
}
void OAIDeviceObject::setIsPrivateSession(const bool &is_private_session) {
    m_is_private_session = is_private_session;
    m_is_private_session_isSet = true;
}

bool OAIDeviceObject::is_is_private_session_Set() const{
    return m_is_private_session_isSet;
}

bool OAIDeviceObject::is_is_private_session_Valid() const{
    return m_is_private_session_isValid;
}

bool OAIDeviceObject::isIsRestricted() const {
    return m_is_restricted;
}
void OAIDeviceObject::setIsRestricted(const bool &is_restricted) {
    m_is_restricted = is_restricted;
    m_is_restricted_isSet = true;
}

bool OAIDeviceObject::is_is_restricted_Set() const{
    return m_is_restricted_isSet;
}

bool OAIDeviceObject::is_is_restricted_Valid() const{
    return m_is_restricted_isValid;
}

QString OAIDeviceObject::getName() const {
    return m_name;
}
void OAIDeviceObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeviceObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeviceObject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeviceObject::getType() const {
    return m_type;
}
void OAIDeviceObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeviceObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeviceObject::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIDeviceObject::getVolumePercent() const {
    return m_volume_percent;
}
void OAIDeviceObject::setVolumePercent(const qint32 &volume_percent) {
    m_volume_percent = volume_percent;
    m_volume_percent_isSet = true;
}

bool OAIDeviceObject::is_volume_percent_Set() const{
    return m_volume_percent_isSet;
}

bool OAIDeviceObject::is_volume_percent_Valid() const{
    return m_volume_percent_isValid;
}

bool OAIDeviceObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
