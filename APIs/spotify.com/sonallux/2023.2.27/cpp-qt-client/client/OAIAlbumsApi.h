/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAlbumsApi_H
#define OAI_OAIAlbumsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlbumObject.h"
#include "OAIGet_multiple_albums_200_response.h"
#include "OAIGet_multiple_albums_401_response.h"
#include "OAIGet_new_releases_200_response.h"
#include "OAIPagingSavedAlbumObject.h"
#include "OAIPagingSimplifiedAlbumObject.h"
#include "OAIPagingSimplifiedTrackObject.h"
#include "OAISave_albums_user_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAlbumsApi : public QObject {
    Q_OBJECT

public:
    OAIAlbumsApi(const int timeOut = 0);
    ~OAIAlbumsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ids QString [required]
    */
    virtual void checkUsersSavedAlbums(const QString &ids);

    /**
    * @param[in]  id QString [required]
    * @param[in]  market QString [optional]
    */
    virtual void getAnAlbum(const QString &id, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  market QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getAnAlbumsTracks(const QString &id, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_groups QString [optional]
    * @param[in]  market QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getAnArtistsAlbums(const QString &id, const ::OpenAPI::OptionalParam<QString> &include_groups = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  market QString [optional]
    */
    virtual void getMultipleAlbums(const QString &ids, const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getNewReleases(const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  market QString [optional]
    */
    virtual void getUsersSavedAlbums(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  oai_save_albums_user_request OAISave_albums_user_request [optional]
    */
    virtual void removeAlbumsUser(const QString &ids, const ::OpenAPI::OptionalParam<OAISave_albums_user_request> &oai_save_albums_user_request = ::OpenAPI::OptionalParam<OAISave_albums_user_request>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  oai_save_albums_user_request OAISave_albums_user_request [optional]
    */
    virtual void saveAlbumsUser(const QString &ids, const ::OpenAPI::OptionalParam<OAISave_albums_user_request> &oai_save_albums_user_request = ::OpenAPI::OptionalParam<OAISave_albums_user_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkUsersSavedAlbumsCallback(OAIHttpRequestWorker *worker);
    void getAnAlbumCallback(OAIHttpRequestWorker *worker);
    void getAnAlbumsTracksCallback(OAIHttpRequestWorker *worker);
    void getAnArtistsAlbumsCallback(OAIHttpRequestWorker *worker);
    void getMultipleAlbumsCallback(OAIHttpRequestWorker *worker);
    void getNewReleasesCallback(OAIHttpRequestWorker *worker);
    void getUsersSavedAlbumsCallback(OAIHttpRequestWorker *worker);
    void removeAlbumsUserCallback(OAIHttpRequestWorker *worker);
    void saveAlbumsUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkUsersSavedAlbumsSignal(QList<bool> summary);
    void getAnAlbumSignal(OAIAlbumObject summary);
    void getAnAlbumsTracksSignal(OAIPagingSimplifiedTrackObject summary);
    void getAnArtistsAlbumsSignal(OAIPagingSimplifiedAlbumObject summary);
    void getMultipleAlbumsSignal(OAIGet_multiple_albums_200_response summary);
    void getNewReleasesSignal(OAIGet_new_releases_200_response summary);
    void getUsersSavedAlbumsSignal(OAIPagingSavedAlbumObject summary);
    void removeAlbumsUserSignal();
    void saveAlbumsUserSignal();


    void checkUsersSavedAlbumsSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void getAnAlbumSignalFull(OAIHttpRequestWorker *worker, OAIAlbumObject summary);
    void getAnAlbumsTracksSignalFull(OAIHttpRequestWorker *worker, OAIPagingSimplifiedTrackObject summary);
    void getAnArtistsAlbumsSignalFull(OAIHttpRequestWorker *worker, OAIPagingSimplifiedAlbumObject summary);
    void getMultipleAlbumsSignalFull(OAIHttpRequestWorker *worker, OAIGet_multiple_albums_200_response summary);
    void getNewReleasesSignalFull(OAIHttpRequestWorker *worker, OAIGet_new_releases_200_response summary);
    void getUsersSavedAlbumsSignalFull(OAIHttpRequestWorker *worker, OAIPagingSavedAlbumObject summary);
    void removeAlbumsUserSignalFull(OAIHttpRequestWorker *worker);
    void saveAlbumsUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use checkUsersSavedAlbumsSignalError() instead")
    void checkUsersSavedAlbumsSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedAlbumsSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnAlbumSignalError() instead")
    void getAnAlbumSignalE(OAIAlbumObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnAlbumSignalError(OAIAlbumObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnAlbumsTracksSignalError() instead")
    void getAnAlbumsTracksSignalE(OAIPagingSimplifiedTrackObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnAlbumsTracksSignalError(OAIPagingSimplifiedTrackObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnArtistsAlbumsSignalError() instead")
    void getAnArtistsAlbumsSignalE(OAIPagingSimplifiedAlbumObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnArtistsAlbumsSignalError(OAIPagingSimplifiedAlbumObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultipleAlbumsSignalError() instead")
    void getMultipleAlbumsSignalE(OAIGet_multiple_albums_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultipleAlbumsSignalError(OAIGet_multiple_albums_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNewReleasesSignalError() instead")
    void getNewReleasesSignalE(OAIGet_new_releases_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNewReleasesSignalError(OAIGet_new_releases_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedAlbumsSignalError() instead")
    void getUsersSavedAlbumsSignalE(OAIPagingSavedAlbumObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedAlbumsSignalError(OAIPagingSavedAlbumObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAlbumsUserSignalError() instead")
    void removeAlbumsUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAlbumsUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveAlbumsUserSignalError() instead")
    void saveAlbumsUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveAlbumsUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkUsersSavedAlbumsSignalErrorFull() instead")
    void checkUsersSavedAlbumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUsersSavedAlbumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnAlbumSignalErrorFull() instead")
    void getAnAlbumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnAlbumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnAlbumsTracksSignalErrorFull() instead")
    void getAnAlbumsTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnAlbumsTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnArtistsAlbumsSignalErrorFull() instead")
    void getAnArtistsAlbumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnArtistsAlbumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultipleAlbumsSignalErrorFull() instead")
    void getMultipleAlbumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultipleAlbumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNewReleasesSignalErrorFull() instead")
    void getNewReleasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNewReleasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSavedAlbumsSignalErrorFull() instead")
    void getUsersSavedAlbumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSavedAlbumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAlbumsUserSignalErrorFull() instead")
    void removeAlbumsUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAlbumsUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveAlbumsUserSignalErrorFull() instead")
    void saveAlbumsUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveAlbumsUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
