/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStart_a_users_playback_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStart_a_users_playback_request::OAIStart_a_users_playback_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStart_a_users_playback_request::OAIStart_a_users_playback_request() {
    this->initializeModel();
}

OAIStart_a_users_playback_request::~OAIStart_a_users_playback_request() {}

void OAIStart_a_users_playback_request::initializeModel() {

    m_context_uri_isSet = false;
    m_context_uri_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_position_ms_isSet = false;
    m_position_ms_isValid = false;

    m_uris_isSet = false;
    m_uris_isValid = false;
}

void OAIStart_a_users_playback_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStart_a_users_playback_request::fromJsonObject(QJsonObject json) {

    m_context_uri_isValid = ::OpenAPI::fromJsonValue(m_context_uri, json[QString("context_uri")]);
    m_context_uri_isSet = !json[QString("context_uri")].isNull() && m_context_uri_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_position_ms_isValid = ::OpenAPI::fromJsonValue(m_position_ms, json[QString("position_ms")]);
    m_position_ms_isSet = !json[QString("position_ms")].isNull() && m_position_ms_isValid;

    m_uris_isValid = ::OpenAPI::fromJsonValue(m_uris, json[QString("uris")]);
    m_uris_isSet = !json[QString("uris")].isNull() && m_uris_isValid;
}

QString OAIStart_a_users_playback_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStart_a_users_playback_request::asJsonObject() const {
    QJsonObject obj;
    if (m_context_uri_isSet) {
        obj.insert(QString("context_uri"), ::OpenAPI::toJsonValue(m_context_uri));
    }
    if (m_offset.size() > 0) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_position_ms_isSet) {
        obj.insert(QString("position_ms"), ::OpenAPI::toJsonValue(m_position_ms));
    }
    if (m_uris.size() > 0) {
        obj.insert(QString("uris"), ::OpenAPI::toJsonValue(m_uris));
    }
    return obj;
}

QString OAIStart_a_users_playback_request::getContextUri() const {
    return m_context_uri;
}
void OAIStart_a_users_playback_request::setContextUri(const QString &context_uri) {
    m_context_uri = context_uri;
    m_context_uri_isSet = true;
}

bool OAIStart_a_users_playback_request::is_context_uri_Set() const{
    return m_context_uri_isSet;
}

bool OAIStart_a_users_playback_request::is_context_uri_Valid() const{
    return m_context_uri_isValid;
}

QMap<QString, QJsonValue> OAIStart_a_users_playback_request::getOffset() const {
    return m_offset;
}
void OAIStart_a_users_playback_request::setOffset(const QMap<QString, QJsonValue> &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIStart_a_users_playback_request::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIStart_a_users_playback_request::is_offset_Valid() const{
    return m_offset_isValid;
}

qint32 OAIStart_a_users_playback_request::getPositionMs() const {
    return m_position_ms;
}
void OAIStart_a_users_playback_request::setPositionMs(const qint32 &position_ms) {
    m_position_ms = position_ms;
    m_position_ms_isSet = true;
}

bool OAIStart_a_users_playback_request::is_position_ms_Set() const{
    return m_position_ms_isSet;
}

bool OAIStart_a_users_playback_request::is_position_ms_Valid() const{
    return m_position_ms_isValid;
}

QList<QString> OAIStart_a_users_playback_request::getUris() const {
    return m_uris;
}
void OAIStart_a_users_playback_request::setUris(const QList<QString> &uris) {
    m_uris = uris;
    m_uris_isSet = true;
}

bool OAIStart_a_users_playback_request::is_uris_Set() const{
    return m_uris_isSet;
}

bool OAIStart_a_users_playback_request::is_uris_Valid() const{
    return m_uris_isValid;
}

bool OAIStart_a_users_playback_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStart_a_users_playback_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
