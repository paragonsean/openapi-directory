/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentObject::OAISegmentObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentObject::OAISegmentObject() {
    this->initializeModel();
}

OAISegmentObject::~OAISegmentObject() {}

void OAISegmentObject::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_loudness_end_isSet = false;
    m_loudness_end_isValid = false;

    m_loudness_max_isSet = false;
    m_loudness_max_isValid = false;

    m_loudness_max_time_isSet = false;
    m_loudness_max_time_isValid = false;

    m_loudness_start_isSet = false;
    m_loudness_start_isValid = false;

    m_pitches_isSet = false;
    m_pitches_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_timbre_isSet = false;
    m_timbre_isValid = false;
}

void OAISegmentObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentObject::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_loudness_end_isValid = ::OpenAPI::fromJsonValue(m_loudness_end, json[QString("loudness_end")]);
    m_loudness_end_isSet = !json[QString("loudness_end")].isNull() && m_loudness_end_isValid;

    m_loudness_max_isValid = ::OpenAPI::fromJsonValue(m_loudness_max, json[QString("loudness_max")]);
    m_loudness_max_isSet = !json[QString("loudness_max")].isNull() && m_loudness_max_isValid;

    m_loudness_max_time_isValid = ::OpenAPI::fromJsonValue(m_loudness_max_time, json[QString("loudness_max_time")]);
    m_loudness_max_time_isSet = !json[QString("loudness_max_time")].isNull() && m_loudness_max_time_isValid;

    m_loudness_start_isValid = ::OpenAPI::fromJsonValue(m_loudness_start, json[QString("loudness_start")]);
    m_loudness_start_isSet = !json[QString("loudness_start")].isNull() && m_loudness_start_isValid;

    m_pitches_isValid = ::OpenAPI::fromJsonValue(m_pitches, json[QString("pitches")]);
    m_pitches_isSet = !json[QString("pitches")].isNull() && m_pitches_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_timbre_isValid = ::OpenAPI::fromJsonValue(m_timbre, json[QString("timbre")]);
    m_timbre_isSet = !json[QString("timbre")].isNull() && m_timbre_isValid;
}

QString OAISegmentObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentObject::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_loudness_end_isSet) {
        obj.insert(QString("loudness_end"), ::OpenAPI::toJsonValue(m_loudness_end));
    }
    if (m_loudness_max_isSet) {
        obj.insert(QString("loudness_max"), ::OpenAPI::toJsonValue(m_loudness_max));
    }
    if (m_loudness_max_time_isSet) {
        obj.insert(QString("loudness_max_time"), ::OpenAPI::toJsonValue(m_loudness_max_time));
    }
    if (m_loudness_start_isSet) {
        obj.insert(QString("loudness_start"), ::OpenAPI::toJsonValue(m_loudness_start));
    }
    if (m_pitches.size() > 0) {
        obj.insert(QString("pitches"), ::OpenAPI::toJsonValue(m_pitches));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_timbre.size() > 0) {
        obj.insert(QString("timbre"), ::OpenAPI::toJsonValue(m_timbre));
    }
    return obj;
}

double OAISegmentObject::getConfidence() const {
    return m_confidence;
}
void OAISegmentObject::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAISegmentObject::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAISegmentObject::is_confidence_Valid() const{
    return m_confidence_isValid;
}

double OAISegmentObject::getDuration() const {
    return m_duration;
}
void OAISegmentObject::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAISegmentObject::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAISegmentObject::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAISegmentObject::getLoudnessEnd() const {
    return m_loudness_end;
}
void OAISegmentObject::setLoudnessEnd(const double &loudness_end) {
    m_loudness_end = loudness_end;
    m_loudness_end_isSet = true;
}

bool OAISegmentObject::is_loudness_end_Set() const{
    return m_loudness_end_isSet;
}

bool OAISegmentObject::is_loudness_end_Valid() const{
    return m_loudness_end_isValid;
}

double OAISegmentObject::getLoudnessMax() const {
    return m_loudness_max;
}
void OAISegmentObject::setLoudnessMax(const double &loudness_max) {
    m_loudness_max = loudness_max;
    m_loudness_max_isSet = true;
}

bool OAISegmentObject::is_loudness_max_Set() const{
    return m_loudness_max_isSet;
}

bool OAISegmentObject::is_loudness_max_Valid() const{
    return m_loudness_max_isValid;
}

double OAISegmentObject::getLoudnessMaxTime() const {
    return m_loudness_max_time;
}
void OAISegmentObject::setLoudnessMaxTime(const double &loudness_max_time) {
    m_loudness_max_time = loudness_max_time;
    m_loudness_max_time_isSet = true;
}

bool OAISegmentObject::is_loudness_max_time_Set() const{
    return m_loudness_max_time_isSet;
}

bool OAISegmentObject::is_loudness_max_time_Valid() const{
    return m_loudness_max_time_isValid;
}

double OAISegmentObject::getLoudnessStart() const {
    return m_loudness_start;
}
void OAISegmentObject::setLoudnessStart(const double &loudness_start) {
    m_loudness_start = loudness_start;
    m_loudness_start_isSet = true;
}

bool OAISegmentObject::is_loudness_start_Set() const{
    return m_loudness_start_isSet;
}

bool OAISegmentObject::is_loudness_start_Valid() const{
    return m_loudness_start_isValid;
}

QList<double> OAISegmentObject::getPitches() const {
    return m_pitches;
}
void OAISegmentObject::setPitches(const QList<double> &pitches) {
    m_pitches = pitches;
    m_pitches_isSet = true;
}

bool OAISegmentObject::is_pitches_Set() const{
    return m_pitches_isSet;
}

bool OAISegmentObject::is_pitches_Valid() const{
    return m_pitches_isValid;
}

double OAISegmentObject::getStart() const {
    return m_start;
}
void OAISegmentObject::setStart(const double &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAISegmentObject::is_start_Set() const{
    return m_start_isSet;
}

bool OAISegmentObject::is_start_Valid() const{
    return m_start_isValid;
}

QList<double> OAISegmentObject::getTimbre() const {
    return m_timbre;
}
void OAISegmentObject::setTimbre(const QList<double> &timbre) {
    m_timbre = timbre;
    m_timbre_isSet = true;
}

bool OAISegmentObject::is_timbre_Set() const{
    return m_timbre_isSet;
}

bool OAISegmentObject::is_timbre_Valid() const{
    return m_timbre_isValid;
}

bool OAISegmentObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loudness_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loudness_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loudness_max_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loudness_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timbre.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
