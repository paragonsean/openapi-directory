/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavedAudiobookObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavedAudiobookObject::OAISavedAudiobookObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavedAudiobookObject::OAISavedAudiobookObject() {
    this->initializeModel();
}

OAISavedAudiobookObject::~OAISavedAudiobookObject() {}

void OAISavedAudiobookObject::initializeModel() {

    m_added_at_isSet = false;
    m_added_at_isValid = false;

    m_audiobook_isSet = false;
    m_audiobook_isValid = false;
}

void OAISavedAudiobookObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavedAudiobookObject::fromJsonObject(QJsonObject json) {

    m_added_at_isValid = ::OpenAPI::fromJsonValue(m_added_at, json[QString("added_at")]);
    m_added_at_isSet = !json[QString("added_at")].isNull() && m_added_at_isValid;

    m_audiobook_isValid = ::OpenAPI::fromJsonValue(m_audiobook, json[QString("audiobook")]);
    m_audiobook_isSet = !json[QString("audiobook")].isNull() && m_audiobook_isValid;
}

QString OAISavedAudiobookObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavedAudiobookObject::asJsonObject() const {
    QJsonObject obj;
    if (m_added_at_isSet) {
        obj.insert(QString("added_at"), ::OpenAPI::toJsonValue(m_added_at));
    }
    if (m_audiobook.isSet()) {
        obj.insert(QString("audiobook"), ::OpenAPI::toJsonValue(m_audiobook));
    }
    return obj;
}

QDateTime OAISavedAudiobookObject::getAddedAt() const {
    return m_added_at;
}
void OAISavedAudiobookObject::setAddedAt(const QDateTime &added_at) {
    m_added_at = added_at;
    m_added_at_isSet = true;
}

bool OAISavedAudiobookObject::is_added_at_Set() const{
    return m_added_at_isSet;
}

bool OAISavedAudiobookObject::is_added_at_Valid() const{
    return m_added_at_isValid;
}

OAIAudiobookObject OAISavedAudiobookObject::getAudiobook() const {
    return m_audiobook;
}
void OAISavedAudiobookObject::setAudiobook(const OAIAudiobookObject &audiobook) {
    m_audiobook = audiobook;
    m_audiobook_isSet = true;
}

bool OAISavedAudiobookObject::is_audiobook_Set() const{
    return m_audiobook_isSet;
}

bool OAISavedAudiobookObject::is_audiobook_Valid() const{
    return m_audiobook_isValid;
}

bool OAISavedAudiobookObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audiobook.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavedAudiobookObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
