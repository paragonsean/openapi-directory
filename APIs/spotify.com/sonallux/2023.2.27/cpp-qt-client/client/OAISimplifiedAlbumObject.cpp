/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimplifiedAlbumObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimplifiedAlbumObject::OAISimplifiedAlbumObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimplifiedAlbumObject::OAISimplifiedAlbumObject() {
    this->initializeModel();
}

OAISimplifiedAlbumObject::~OAISimplifiedAlbumObject() {}

void OAISimplifiedAlbumObject::initializeModel() {

    m_album_type_isSet = false;
    m_album_type_isValid = false;

    m_available_markets_isSet = false;
    m_available_markets_isValid = false;

    m_external_urls_isSet = false;
    m_external_urls_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_release_date_precision_isSet = false;
    m_release_date_precision_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_total_tracks_isSet = false;
    m_total_tracks_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_album_group_isSet = false;
    m_album_group_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;
}

void OAISimplifiedAlbumObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimplifiedAlbumObject::fromJsonObject(QJsonObject json) {

    m_album_type_isValid = ::OpenAPI::fromJsonValue(m_album_type, json[QString("album_type")]);
    m_album_type_isSet = !json[QString("album_type")].isNull() && m_album_type_isValid;

    m_available_markets_isValid = ::OpenAPI::fromJsonValue(m_available_markets, json[QString("available_markets")]);
    m_available_markets_isSet = !json[QString("available_markets")].isNull() && m_available_markets_isValid;

    m_external_urls_isValid = ::OpenAPI::fromJsonValue(m_external_urls, json[QString("external_urls")]);
    m_external_urls_isSet = !json[QString("external_urls")].isNull() && m_external_urls_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("release_date")]);
    m_release_date_isSet = !json[QString("release_date")].isNull() && m_release_date_isValid;

    m_release_date_precision_isValid = ::OpenAPI::fromJsonValue(m_release_date_precision, json[QString("release_date_precision")]);
    m_release_date_precision_isSet = !json[QString("release_date_precision")].isNull() && m_release_date_precision_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_total_tracks_isValid = ::OpenAPI::fromJsonValue(m_total_tracks, json[QString("total_tracks")]);
    m_total_tracks_isSet = !json[QString("total_tracks")].isNull() && m_total_tracks_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_album_group_isValid = ::OpenAPI::fromJsonValue(m_album_group, json[QString("album_group")]);
    m_album_group_isSet = !json[QString("album_group")].isNull() && m_album_group_isValid;

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;
}

QString OAISimplifiedAlbumObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimplifiedAlbumObject::asJsonObject() const {
    QJsonObject obj;
    if (m_album_type_isSet) {
        obj.insert(QString("album_type"), ::OpenAPI::toJsonValue(m_album_type));
    }
    if (m_available_markets.size() > 0) {
        obj.insert(QString("available_markets"), ::OpenAPI::toJsonValue(m_available_markets));
    }
    if (m_external_urls.isSet()) {
        obj.insert(QString("external_urls"), ::OpenAPI::toJsonValue(m_external_urls));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("release_date"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_release_date_precision_isSet) {
        obj.insert(QString("release_date_precision"), ::OpenAPI::toJsonValue(m_release_date_precision));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_total_tracks_isSet) {
        obj.insert(QString("total_tracks"), ::OpenAPI::toJsonValue(m_total_tracks));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_album_group_isSet) {
        obj.insert(QString("album_group"), ::OpenAPI::toJsonValue(m_album_group));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    return obj;
}

QString OAISimplifiedAlbumObject::getAlbumType() const {
    return m_album_type;
}
void OAISimplifiedAlbumObject::setAlbumType(const QString &album_type) {
    m_album_type = album_type;
    m_album_type_isSet = true;
}

bool OAISimplifiedAlbumObject::is_album_type_Set() const{
    return m_album_type_isSet;
}

bool OAISimplifiedAlbumObject::is_album_type_Valid() const{
    return m_album_type_isValid;
}

QList<QString> OAISimplifiedAlbumObject::getAvailableMarkets() const {
    return m_available_markets;
}
void OAISimplifiedAlbumObject::setAvailableMarkets(const QList<QString> &available_markets) {
    m_available_markets = available_markets;
    m_available_markets_isSet = true;
}

bool OAISimplifiedAlbumObject::is_available_markets_Set() const{
    return m_available_markets_isSet;
}

bool OAISimplifiedAlbumObject::is_available_markets_Valid() const{
    return m_available_markets_isValid;
}

OAIExternalUrlObject OAISimplifiedAlbumObject::getExternalUrls() const {
    return m_external_urls;
}
void OAISimplifiedAlbumObject::setExternalUrls(const OAIExternalUrlObject &external_urls) {
    m_external_urls = external_urls;
    m_external_urls_isSet = true;
}

bool OAISimplifiedAlbumObject::is_external_urls_Set() const{
    return m_external_urls_isSet;
}

bool OAISimplifiedAlbumObject::is_external_urls_Valid() const{
    return m_external_urls_isValid;
}

QString OAISimplifiedAlbumObject::getHref() const {
    return m_href;
}
void OAISimplifiedAlbumObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAISimplifiedAlbumObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAISimplifiedAlbumObject::is_href_Valid() const{
    return m_href_isValid;
}

QString OAISimplifiedAlbumObject::getId() const {
    return m_id;
}
void OAISimplifiedAlbumObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISimplifiedAlbumObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAISimplifiedAlbumObject::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageObject> OAISimplifiedAlbumObject::getImages() const {
    return m_images;
}
void OAISimplifiedAlbumObject::setImages(const QList<OAIImageObject> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAISimplifiedAlbumObject::is_images_Set() const{
    return m_images_isSet;
}

bool OAISimplifiedAlbumObject::is_images_Valid() const{
    return m_images_isValid;
}

QString OAISimplifiedAlbumObject::getName() const {
    return m_name;
}
void OAISimplifiedAlbumObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISimplifiedAlbumObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAISimplifiedAlbumObject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISimplifiedAlbumObject::getReleaseDate() const {
    return m_release_date;
}
void OAISimplifiedAlbumObject::setReleaseDate(const QString &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAISimplifiedAlbumObject::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAISimplifiedAlbumObject::is_release_date_Valid() const{
    return m_release_date_isValid;
}

QString OAISimplifiedAlbumObject::getReleaseDatePrecision() const {
    return m_release_date_precision;
}
void OAISimplifiedAlbumObject::setReleaseDatePrecision(const QString &release_date_precision) {
    m_release_date_precision = release_date_precision;
    m_release_date_precision_isSet = true;
}

bool OAISimplifiedAlbumObject::is_release_date_precision_Set() const{
    return m_release_date_precision_isSet;
}

bool OAISimplifiedAlbumObject::is_release_date_precision_Valid() const{
    return m_release_date_precision_isValid;
}

OAIAlbumRestrictionObject OAISimplifiedAlbumObject::getRestrictions() const {
    return m_restrictions;
}
void OAISimplifiedAlbumObject::setRestrictions(const OAIAlbumRestrictionObject &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAISimplifiedAlbumObject::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAISimplifiedAlbumObject::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

qint32 OAISimplifiedAlbumObject::getTotalTracks() const {
    return m_total_tracks;
}
void OAISimplifiedAlbumObject::setTotalTracks(const qint32 &total_tracks) {
    m_total_tracks = total_tracks;
    m_total_tracks_isSet = true;
}

bool OAISimplifiedAlbumObject::is_total_tracks_Set() const{
    return m_total_tracks_isSet;
}

bool OAISimplifiedAlbumObject::is_total_tracks_Valid() const{
    return m_total_tracks_isValid;
}

QString OAISimplifiedAlbumObject::getType() const {
    return m_type;
}
void OAISimplifiedAlbumObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISimplifiedAlbumObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAISimplifiedAlbumObject::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISimplifiedAlbumObject::getUri() const {
    return m_uri;
}
void OAISimplifiedAlbumObject::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAISimplifiedAlbumObject::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAISimplifiedAlbumObject::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAISimplifiedAlbumObject::getAlbumGroup() const {
    return m_album_group;
}
void OAISimplifiedAlbumObject::setAlbumGroup(const QString &album_group) {
    m_album_group = album_group;
    m_album_group_isSet = true;
}

bool OAISimplifiedAlbumObject::is_album_group_Set() const{
    return m_album_group_isSet;
}

bool OAISimplifiedAlbumObject::is_album_group_Valid() const{
    return m_album_group_isValid;
}

QList<OAISimplifiedArtistObject> OAISimplifiedAlbumObject::getArtists() const {
    return m_artists;
}
void OAISimplifiedAlbumObject::setArtists(const QList<OAISimplifiedArtistObject> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAISimplifiedAlbumObject::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAISimplifiedAlbumObject::is_artists_Valid() const{
    return m_artists_isValid;
}

bool OAISimplifiedAlbumObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_markets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tracks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimplifiedAlbumObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_album_type_isValid && m_available_markets_isValid && m_external_urls_isValid && m_href_isValid && m_id_isValid && m_images_isValid && m_name_isValid && m_release_date_isValid && m_release_date_precision_isValid && m_total_tracks_isValid && m_type_isValid && m_uri_isValid && m_artists_isValid && true;
}

} // namespace OpenAPI
