/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReorder_or_replace_playlists_tracks_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReorder_or_replace_playlists_tracks_request::OAIReorder_or_replace_playlists_tracks_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReorder_or_replace_playlists_tracks_request::OAIReorder_or_replace_playlists_tracks_request() {
    this->initializeModel();
}

OAIReorder_or_replace_playlists_tracks_request::~OAIReorder_or_replace_playlists_tracks_request() {}

void OAIReorder_or_replace_playlists_tracks_request::initializeModel() {

    m_insert_before_isSet = false;
    m_insert_before_isValid = false;

    m_range_length_isSet = false;
    m_range_length_isValid = false;

    m_range_start_isSet = false;
    m_range_start_isValid = false;

    m_snapshot_id_isSet = false;
    m_snapshot_id_isValid = false;

    m_uris_isSet = false;
    m_uris_isValid = false;
}

void OAIReorder_or_replace_playlists_tracks_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReorder_or_replace_playlists_tracks_request::fromJsonObject(QJsonObject json) {

    m_insert_before_isValid = ::OpenAPI::fromJsonValue(m_insert_before, json[QString("insert_before")]);
    m_insert_before_isSet = !json[QString("insert_before")].isNull() && m_insert_before_isValid;

    m_range_length_isValid = ::OpenAPI::fromJsonValue(m_range_length, json[QString("range_length")]);
    m_range_length_isSet = !json[QString("range_length")].isNull() && m_range_length_isValid;

    m_range_start_isValid = ::OpenAPI::fromJsonValue(m_range_start, json[QString("range_start")]);
    m_range_start_isSet = !json[QString("range_start")].isNull() && m_range_start_isValid;

    m_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_id, json[QString("snapshot_id")]);
    m_snapshot_id_isSet = !json[QString("snapshot_id")].isNull() && m_snapshot_id_isValid;

    m_uris_isValid = ::OpenAPI::fromJsonValue(m_uris, json[QString("uris")]);
    m_uris_isSet = !json[QString("uris")].isNull() && m_uris_isValid;
}

QString OAIReorder_or_replace_playlists_tracks_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReorder_or_replace_playlists_tracks_request::asJsonObject() const {
    QJsonObject obj;
    if (m_insert_before_isSet) {
        obj.insert(QString("insert_before"), ::OpenAPI::toJsonValue(m_insert_before));
    }
    if (m_range_length_isSet) {
        obj.insert(QString("range_length"), ::OpenAPI::toJsonValue(m_range_length));
    }
    if (m_range_start_isSet) {
        obj.insert(QString("range_start"), ::OpenAPI::toJsonValue(m_range_start));
    }
    if (m_snapshot_id_isSet) {
        obj.insert(QString("snapshot_id"), ::OpenAPI::toJsonValue(m_snapshot_id));
    }
    if (m_uris.size() > 0) {
        obj.insert(QString("uris"), ::OpenAPI::toJsonValue(m_uris));
    }
    return obj;
}

qint32 OAIReorder_or_replace_playlists_tracks_request::getInsertBefore() const {
    return m_insert_before;
}
void OAIReorder_or_replace_playlists_tracks_request::setInsertBefore(const qint32 &insert_before) {
    m_insert_before = insert_before;
    m_insert_before_isSet = true;
}

bool OAIReorder_or_replace_playlists_tracks_request::is_insert_before_Set() const{
    return m_insert_before_isSet;
}

bool OAIReorder_or_replace_playlists_tracks_request::is_insert_before_Valid() const{
    return m_insert_before_isValid;
}

qint32 OAIReorder_or_replace_playlists_tracks_request::getRangeLength() const {
    return m_range_length;
}
void OAIReorder_or_replace_playlists_tracks_request::setRangeLength(const qint32 &range_length) {
    m_range_length = range_length;
    m_range_length_isSet = true;
}

bool OAIReorder_or_replace_playlists_tracks_request::is_range_length_Set() const{
    return m_range_length_isSet;
}

bool OAIReorder_or_replace_playlists_tracks_request::is_range_length_Valid() const{
    return m_range_length_isValid;
}

qint32 OAIReorder_or_replace_playlists_tracks_request::getRangeStart() const {
    return m_range_start;
}
void OAIReorder_or_replace_playlists_tracks_request::setRangeStart(const qint32 &range_start) {
    m_range_start = range_start;
    m_range_start_isSet = true;
}

bool OAIReorder_or_replace_playlists_tracks_request::is_range_start_Set() const{
    return m_range_start_isSet;
}

bool OAIReorder_or_replace_playlists_tracks_request::is_range_start_Valid() const{
    return m_range_start_isValid;
}

QString OAIReorder_or_replace_playlists_tracks_request::getSnapshotId() const {
    return m_snapshot_id;
}
void OAIReorder_or_replace_playlists_tracks_request::setSnapshotId(const QString &snapshot_id) {
    m_snapshot_id = snapshot_id;
    m_snapshot_id_isSet = true;
}

bool OAIReorder_or_replace_playlists_tracks_request::is_snapshot_id_Set() const{
    return m_snapshot_id_isSet;
}

bool OAIReorder_or_replace_playlists_tracks_request::is_snapshot_id_Valid() const{
    return m_snapshot_id_isValid;
}

QList<QString> OAIReorder_or_replace_playlists_tracks_request::getUris() const {
    return m_uris;
}
void OAIReorder_or_replace_playlists_tracks_request::setUris(const QList<QString> &uris) {
    m_uris = uris;
    m_uris_isSet = true;
}

bool OAIReorder_or_replace_playlists_tracks_request::is_uris_Set() const{
    return m_uris_isSet;
}

bool OAIReorder_or_replace_playlists_tracks_request::is_uris_Valid() const{
    return m_uris_isValid;
}

bool OAIReorder_or_replace_playlists_tracks_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insert_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReorder_or_replace_playlists_tracks_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
