/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimplifiedPlaylistObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimplifiedPlaylistObject::OAISimplifiedPlaylistObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimplifiedPlaylistObject::OAISimplifiedPlaylistObject() {
    this->initializeModel();
}

OAISimplifiedPlaylistObject::~OAISimplifiedPlaylistObject() {}

void OAISimplifiedPlaylistObject::initializeModel() {

    m_collaborative_isSet = false;
    m_collaborative_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_urls_isSet = false;
    m_external_urls_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_snapshot_id_isSet = false;
    m_snapshot_id_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAISimplifiedPlaylistObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimplifiedPlaylistObject::fromJsonObject(QJsonObject json) {

    m_collaborative_isValid = ::OpenAPI::fromJsonValue(m_collaborative, json[QString("collaborative")]);
    m_collaborative_isSet = !json[QString("collaborative")].isNull() && m_collaborative_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_urls_isValid = ::OpenAPI::fromJsonValue(m_external_urls, json[QString("external_urls")]);
    m_external_urls_isSet = !json[QString("external_urls")].isNull() && m_external_urls_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_id, json[QString("snapshot_id")]);
    m_snapshot_id_isSet = !json[QString("snapshot_id")].isNull() && m_snapshot_id_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAISimplifiedPlaylistObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimplifiedPlaylistObject::asJsonObject() const {
    QJsonObject obj;
    if (m_collaborative_isSet) {
        obj.insert(QString("collaborative"), ::OpenAPI::toJsonValue(m_collaborative));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_urls.isSet()) {
        obj.insert(QString("external_urls"), ::OpenAPI::toJsonValue(m_external_urls));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_snapshot_id_isSet) {
        obj.insert(QString("snapshot_id"), ::OpenAPI::toJsonValue(m_snapshot_id));
    }
    if (m_tracks.isSet()) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

bool OAISimplifiedPlaylistObject::isCollaborative() const {
    return m_collaborative;
}
void OAISimplifiedPlaylistObject::setCollaborative(const bool &collaborative) {
    m_collaborative = collaborative;
    m_collaborative_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_collaborative_Set() const{
    return m_collaborative_isSet;
}

bool OAISimplifiedPlaylistObject::is_collaborative_Valid() const{
    return m_collaborative_isValid;
}

QString OAISimplifiedPlaylistObject::getDescription() const {
    return m_description;
}
void OAISimplifiedPlaylistObject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_description_Set() const{
    return m_description_isSet;
}

bool OAISimplifiedPlaylistObject::is_description_Valid() const{
    return m_description_isValid;
}

OAIExternalUrlObject OAISimplifiedPlaylistObject::getExternalUrls() const {
    return m_external_urls;
}
void OAISimplifiedPlaylistObject::setExternalUrls(const OAIExternalUrlObject &external_urls) {
    m_external_urls = external_urls;
    m_external_urls_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_external_urls_Set() const{
    return m_external_urls_isSet;
}

bool OAISimplifiedPlaylistObject::is_external_urls_Valid() const{
    return m_external_urls_isValid;
}

QString OAISimplifiedPlaylistObject::getHref() const {
    return m_href;
}
void OAISimplifiedPlaylistObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAISimplifiedPlaylistObject::is_href_Valid() const{
    return m_href_isValid;
}

QString OAISimplifiedPlaylistObject::getId() const {
    return m_id;
}
void OAISimplifiedPlaylistObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAISimplifiedPlaylistObject::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageObject> OAISimplifiedPlaylistObject::getImages() const {
    return m_images;
}
void OAISimplifiedPlaylistObject::setImages(const QList<OAIImageObject> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_images_Set() const{
    return m_images_isSet;
}

bool OAISimplifiedPlaylistObject::is_images_Valid() const{
    return m_images_isValid;
}

QString OAISimplifiedPlaylistObject::getName() const {
    return m_name;
}
void OAISimplifiedPlaylistObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAISimplifiedPlaylistObject::is_name_Valid() const{
    return m_name_isValid;
}

OAIPlaylistOwnerObject OAISimplifiedPlaylistObject::getOwner() const {
    return m_owner;
}
void OAISimplifiedPlaylistObject::setOwner(const OAIPlaylistOwnerObject &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAISimplifiedPlaylistObject::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAISimplifiedPlaylistObject::isRPublic() const {
    return m_r_public;
}
void OAISimplifiedPlaylistObject::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAISimplifiedPlaylistObject::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QString OAISimplifiedPlaylistObject::getSnapshotId() const {
    return m_snapshot_id;
}
void OAISimplifiedPlaylistObject::setSnapshotId(const QString &snapshot_id) {
    m_snapshot_id = snapshot_id;
    m_snapshot_id_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_snapshot_id_Set() const{
    return m_snapshot_id_isSet;
}

bool OAISimplifiedPlaylistObject::is_snapshot_id_Valid() const{
    return m_snapshot_id_isValid;
}

OAIPlaylistTracksRefObject OAISimplifiedPlaylistObject::getTracks() const {
    return m_tracks;
}
void OAISimplifiedPlaylistObject::setTracks(const OAIPlaylistTracksRefObject &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAISimplifiedPlaylistObject::is_tracks_Valid() const{
    return m_tracks_isValid;
}

QString OAISimplifiedPlaylistObject::getType() const {
    return m_type;
}
void OAISimplifiedPlaylistObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAISimplifiedPlaylistObject::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISimplifiedPlaylistObject::getUri() const {
    return m_uri;
}
void OAISimplifiedPlaylistObject::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAISimplifiedPlaylistObject::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAISimplifiedPlaylistObject::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAISimplifiedPlaylistObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaborative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimplifiedPlaylistObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
