/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReorder_or_replace_playlists_tracks_request.h
 *
 * 
 */

#ifndef OAIReorder_or_replace_playlists_tracks_request_H
#define OAIReorder_or_replace_playlists_tracks_request_H

#include <QJsonObject>

#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReorder_or_replace_playlists_tracks_request : public OAIObject {
public:
    OAIReorder_or_replace_playlists_tracks_request();
    OAIReorder_or_replace_playlists_tracks_request(QString json);
    ~OAIReorder_or_replace_playlists_tracks_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getInsertBefore() const;
    void setInsertBefore(const qint32 &insert_before);
    bool is_insert_before_Set() const;
    bool is_insert_before_Valid() const;

    qint32 getRangeLength() const;
    void setRangeLength(const qint32 &range_length);
    bool is_range_length_Set() const;
    bool is_range_length_Valid() const;

    qint32 getRangeStart() const;
    void setRangeStart(const qint32 &range_start);
    bool is_range_start_Set() const;
    bool is_range_start_Valid() const;

    QString getSnapshotId() const;
    void setSnapshotId(const QString &snapshot_id);
    bool is_snapshot_id_Set() const;
    bool is_snapshot_id_Valid() const;

    QList<QString> getUris() const;
    void setUris(const QList<QString> &uris);
    bool is_uris_Set() const;
    bool is_uris_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_insert_before;
    bool m_insert_before_isSet;
    bool m_insert_before_isValid;

    qint32 m_range_length;
    bool m_range_length_isSet;
    bool m_range_length_isValid;

    qint32 m_range_start;
    bool m_range_start_isSet;
    bool m_range_start_isValid;

    QString m_snapshot_id;
    bool m_snapshot_id_isSet;
    bool m_snapshot_id_isValid;

    QList<QString> m_uris;
    bool m_uris_isSet;
    bool m_uris_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReorder_or_replace_playlists_tracks_request)

#endif // OAIReorder_or_replace_playlists_tracks_request_H
