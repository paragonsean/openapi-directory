/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylistTrackObject_track.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylistTrackObject_track::OAIPlaylistTrackObject_track(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylistTrackObject_track::OAIPlaylistTrackObject_track() {
    this->initializeModel();
}

OAIPlaylistTrackObject_track::~OAIPlaylistTrackObject_track() {}

void OAIPlaylistTrackObject_track::initializeModel() {

    m_album_isSet = false;
    m_album_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_available_markets_isSet = false;
    m_available_markets_isValid = false;

    m_disc_number_isSet = false;
    m_disc_number_isValid = false;

    m_duration_ms_isSet = false;
    m_duration_ms_isValid = false;

    m_r_explicit_isSet = false;
    m_r_explicit_isValid = false;

    m_external_ids_isSet = false;
    m_external_ids_isValid = false;

    m_external_urls_isSet = false;
    m_external_urls_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_local_isSet = false;
    m_is_local_isValid = false;

    m_is_playable_isSet = false;
    m_is_playable_isValid = false;

    m_linked_from_isSet = false;
    m_linked_from_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_popularity_isSet = false;
    m_popularity_isValid = false;

    m_preview_url_isSet = false;
    m_preview_url_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_track_number_isSet = false;
    m_track_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_audio_preview_url_isSet = false;
    m_audio_preview_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_html_description_isSet = false;
    m_html_description_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_is_externally_hosted_isSet = false;
    m_is_externally_hosted_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_release_date_precision_isSet = false;
    m_release_date_precision_isValid = false;

    m_resume_point_isSet = false;
    m_resume_point_isValid = false;

    m_show_isSet = false;
    m_show_isValid = false;
}

void OAIPlaylistTrackObject_track::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylistTrackObject_track::fromJsonObject(QJsonObject json) {

    m_album_isValid = ::OpenAPI::fromJsonValue(m_album, json[QString("album")]);
    m_album_isSet = !json[QString("album")].isNull() && m_album_isValid;

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_available_markets_isValid = ::OpenAPI::fromJsonValue(m_available_markets, json[QString("available_markets")]);
    m_available_markets_isSet = !json[QString("available_markets")].isNull() && m_available_markets_isValid;

    m_disc_number_isValid = ::OpenAPI::fromJsonValue(m_disc_number, json[QString("disc_number")]);
    m_disc_number_isSet = !json[QString("disc_number")].isNull() && m_disc_number_isValid;

    m_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_duration_ms, json[QString("duration_ms")]);
    m_duration_ms_isSet = !json[QString("duration_ms")].isNull() && m_duration_ms_isValid;

    m_r_explicit_isValid = ::OpenAPI::fromJsonValue(m_r_explicit, json[QString("explicit")]);
    m_r_explicit_isSet = !json[QString("explicit")].isNull() && m_r_explicit_isValid;

    m_external_ids_isValid = ::OpenAPI::fromJsonValue(m_external_ids, json[QString("external_ids")]);
    m_external_ids_isSet = !json[QString("external_ids")].isNull() && m_external_ids_isValid;

    m_external_urls_isValid = ::OpenAPI::fromJsonValue(m_external_urls, json[QString("external_urls")]);
    m_external_urls_isSet = !json[QString("external_urls")].isNull() && m_external_urls_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_local_isValid = ::OpenAPI::fromJsonValue(m_is_local, json[QString("is_local")]);
    m_is_local_isSet = !json[QString("is_local")].isNull() && m_is_local_isValid;

    m_is_playable_isValid = ::OpenAPI::fromJsonValue(m_is_playable, json[QString("is_playable")]);
    m_is_playable_isSet = !json[QString("is_playable")].isNull() && m_is_playable_isValid;

    m_linked_from_isValid = ::OpenAPI::fromJsonValue(m_linked_from, json[QString("linked_from")]);
    m_linked_from_isSet = !json[QString("linked_from")].isNull() && m_linked_from_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_popularity_isValid = ::OpenAPI::fromJsonValue(m_popularity, json[QString("popularity")]);
    m_popularity_isSet = !json[QString("popularity")].isNull() && m_popularity_isValid;

    m_preview_url_isValid = ::OpenAPI::fromJsonValue(m_preview_url, json[QString("preview_url")]);
    m_preview_url_isSet = !json[QString("preview_url")].isNull() && m_preview_url_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_track_number_isValid = ::OpenAPI::fromJsonValue(m_track_number, json[QString("track_number")]);
    m_track_number_isSet = !json[QString("track_number")].isNull() && m_track_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_audio_preview_url_isValid = ::OpenAPI::fromJsonValue(m_audio_preview_url, json[QString("audio_preview_url")]);
    m_audio_preview_url_isSet = !json[QString("audio_preview_url")].isNull() && m_audio_preview_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_html_description_isValid = ::OpenAPI::fromJsonValue(m_html_description, json[QString("html_description")]);
    m_html_description_isSet = !json[QString("html_description")].isNull() && m_html_description_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_is_externally_hosted_isValid = ::OpenAPI::fromJsonValue(m_is_externally_hosted, json[QString("is_externally_hosted")]);
    m_is_externally_hosted_isSet = !json[QString("is_externally_hosted")].isNull() && m_is_externally_hosted_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("release_date")]);
    m_release_date_isSet = !json[QString("release_date")].isNull() && m_release_date_isValid;

    m_release_date_precision_isValid = ::OpenAPI::fromJsonValue(m_release_date_precision, json[QString("release_date_precision")]);
    m_release_date_precision_isSet = !json[QString("release_date_precision")].isNull() && m_release_date_precision_isValid;

    m_resume_point_isValid = ::OpenAPI::fromJsonValue(m_resume_point, json[QString("resume_point")]);
    m_resume_point_isSet = !json[QString("resume_point")].isNull() && m_resume_point_isValid;

    m_show_isValid = ::OpenAPI::fromJsonValue(m_show, json[QString("show")]);
    m_show_isSet = !json[QString("show")].isNull() && m_show_isValid;
}

QString OAIPlaylistTrackObject_track::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylistTrackObject_track::asJsonObject() const {
    QJsonObject obj;
    if (m_album.isSet()) {
        obj.insert(QString("album"), ::OpenAPI::toJsonValue(m_album));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    if (m_available_markets.size() > 0) {
        obj.insert(QString("available_markets"), ::OpenAPI::toJsonValue(m_available_markets));
    }
    if (m_disc_number_isSet) {
        obj.insert(QString("disc_number"), ::OpenAPI::toJsonValue(m_disc_number));
    }
    if (m_duration_ms_isSet) {
        obj.insert(QString("duration_ms"), ::OpenAPI::toJsonValue(m_duration_ms));
    }
    if (m_r_explicit_isSet) {
        obj.insert(QString("explicit"), ::OpenAPI::toJsonValue(m_r_explicit));
    }
    if (m_external_ids.isSet()) {
        obj.insert(QString("external_ids"), ::OpenAPI::toJsonValue(m_external_ids));
    }
    if (m_external_urls.isSet()) {
        obj.insert(QString("external_urls"), ::OpenAPI::toJsonValue(m_external_urls));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_local_isSet) {
        obj.insert(QString("is_local"), ::OpenAPI::toJsonValue(m_is_local));
    }
    if (m_is_playable_isSet) {
        obj.insert(QString("is_playable"), ::OpenAPI::toJsonValue(m_is_playable));
    }
    if (m_linked_from.isSet()) {
        obj.insert(QString("linked_from"), ::OpenAPI::toJsonValue(m_linked_from));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_popularity_isSet) {
        obj.insert(QString("popularity"), ::OpenAPI::toJsonValue(m_popularity));
    }
    if (m_preview_url_isSet) {
        obj.insert(QString("preview_url"), ::OpenAPI::toJsonValue(m_preview_url));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_track_number_isSet) {
        obj.insert(QString("track_number"), ::OpenAPI::toJsonValue(m_track_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_audio_preview_url_isSet) {
        obj.insert(QString("audio_preview_url"), ::OpenAPI::toJsonValue(m_audio_preview_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_html_description_isSet) {
        obj.insert(QString("html_description"), ::OpenAPI::toJsonValue(m_html_description));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_is_externally_hosted_isSet) {
        obj.insert(QString("is_externally_hosted"), ::OpenAPI::toJsonValue(m_is_externally_hosted));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("release_date"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_release_date_precision_isSet) {
        obj.insert(QString("release_date_precision"), ::OpenAPI::toJsonValue(m_release_date_precision));
    }
    if (m_resume_point.isSet()) {
        obj.insert(QString("resume_point"), ::OpenAPI::toJsonValue(m_resume_point));
    }
    if (m_show.isSet()) {
        obj.insert(QString("show"), ::OpenAPI::toJsonValue(m_show));
    }
    return obj;
}

OAISimplifiedAlbumObject OAIPlaylistTrackObject_track::getAlbum() const {
    return m_album;
}
void OAIPlaylistTrackObject_track::setAlbum(const OAISimplifiedAlbumObject &album) {
    m_album = album;
    m_album_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_album_Set() const{
    return m_album_isSet;
}

bool OAIPlaylistTrackObject_track::is_album_Valid() const{
    return m_album_isValid;
}

QList<OAIArtistObject> OAIPlaylistTrackObject_track::getArtists() const {
    return m_artists;
}
void OAIPlaylistTrackObject_track::setArtists(const QList<OAIArtistObject> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAIPlaylistTrackObject_track::is_artists_Valid() const{
    return m_artists_isValid;
}

QList<QString> OAIPlaylistTrackObject_track::getAvailableMarkets() const {
    return m_available_markets;
}
void OAIPlaylistTrackObject_track::setAvailableMarkets(const QList<QString> &available_markets) {
    m_available_markets = available_markets;
    m_available_markets_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_available_markets_Set() const{
    return m_available_markets_isSet;
}

bool OAIPlaylistTrackObject_track::is_available_markets_Valid() const{
    return m_available_markets_isValid;
}

qint32 OAIPlaylistTrackObject_track::getDiscNumber() const {
    return m_disc_number;
}
void OAIPlaylistTrackObject_track::setDiscNumber(const qint32 &disc_number) {
    m_disc_number = disc_number;
    m_disc_number_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_disc_number_Set() const{
    return m_disc_number_isSet;
}

bool OAIPlaylistTrackObject_track::is_disc_number_Valid() const{
    return m_disc_number_isValid;
}

qint32 OAIPlaylistTrackObject_track::getDurationMs() const {
    return m_duration_ms;
}
void OAIPlaylistTrackObject_track::setDurationMs(const qint32 &duration_ms) {
    m_duration_ms = duration_ms;
    m_duration_ms_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_duration_ms_Set() const{
    return m_duration_ms_isSet;
}

bool OAIPlaylistTrackObject_track::is_duration_ms_Valid() const{
    return m_duration_ms_isValid;
}

bool OAIPlaylistTrackObject_track::isRExplicit() const {
    return m_r_explicit;
}
void OAIPlaylistTrackObject_track::setRExplicit(const bool &r_explicit) {
    m_r_explicit = r_explicit;
    m_r_explicit_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_r_explicit_Set() const{
    return m_r_explicit_isSet;
}

bool OAIPlaylistTrackObject_track::is_r_explicit_Valid() const{
    return m_r_explicit_isValid;
}

OAIExternalIdObject OAIPlaylistTrackObject_track::getExternalIds() const {
    return m_external_ids;
}
void OAIPlaylistTrackObject_track::setExternalIds(const OAIExternalIdObject &external_ids) {
    m_external_ids = external_ids;
    m_external_ids_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_external_ids_Set() const{
    return m_external_ids_isSet;
}

bool OAIPlaylistTrackObject_track::is_external_ids_Valid() const{
    return m_external_ids_isValid;
}

OAIExternalUrlObject OAIPlaylistTrackObject_track::getExternalUrls() const {
    return m_external_urls;
}
void OAIPlaylistTrackObject_track::setExternalUrls(const OAIExternalUrlObject &external_urls) {
    m_external_urls = external_urls;
    m_external_urls_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_external_urls_Set() const{
    return m_external_urls_isSet;
}

bool OAIPlaylistTrackObject_track::is_external_urls_Valid() const{
    return m_external_urls_isValid;
}

QString OAIPlaylistTrackObject_track::getHref() const {
    return m_href;
}
void OAIPlaylistTrackObject_track::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_href_Set() const{
    return m_href_isSet;
}

bool OAIPlaylistTrackObject_track::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIPlaylistTrackObject_track::getId() const {
    return m_id;
}
void OAIPlaylistTrackObject_track::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlaylistTrackObject_track::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPlaylistTrackObject_track::isIsLocal() const {
    return m_is_local;
}
void OAIPlaylistTrackObject_track::setIsLocal(const bool &is_local) {
    m_is_local = is_local;
    m_is_local_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_is_local_Set() const{
    return m_is_local_isSet;
}

bool OAIPlaylistTrackObject_track::is_is_local_Valid() const{
    return m_is_local_isValid;
}

bool OAIPlaylistTrackObject_track::isIsPlayable() const {
    return m_is_playable;
}
void OAIPlaylistTrackObject_track::setIsPlayable(const bool &is_playable) {
    m_is_playable = is_playable;
    m_is_playable_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_is_playable_Set() const{
    return m_is_playable_isSet;
}

bool OAIPlaylistTrackObject_track::is_is_playable_Valid() const{
    return m_is_playable_isValid;
}

OAILinkedTrackObject OAIPlaylistTrackObject_track::getLinkedFrom() const {
    return m_linked_from;
}
void OAIPlaylistTrackObject_track::setLinkedFrom(const OAILinkedTrackObject &linked_from) {
    m_linked_from = linked_from;
    m_linked_from_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_linked_from_Set() const{
    return m_linked_from_isSet;
}

bool OAIPlaylistTrackObject_track::is_linked_from_Valid() const{
    return m_linked_from_isValid;
}

QString OAIPlaylistTrackObject_track::getName() const {
    return m_name;
}
void OAIPlaylistTrackObject_track::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlaylistTrackObject_track::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlaylistTrackObject_track::getPopularity() const {
    return m_popularity;
}
void OAIPlaylistTrackObject_track::setPopularity(const qint32 &popularity) {
    m_popularity = popularity;
    m_popularity_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_popularity_Set() const{
    return m_popularity_isSet;
}

bool OAIPlaylistTrackObject_track::is_popularity_Valid() const{
    return m_popularity_isValid;
}

QString OAIPlaylistTrackObject_track::getPreviewUrl() const {
    return m_preview_url;
}
void OAIPlaylistTrackObject_track::setPreviewUrl(const QString &preview_url) {
    m_preview_url = preview_url;
    m_preview_url_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_preview_url_Set() const{
    return m_preview_url_isSet;
}

bool OAIPlaylistTrackObject_track::is_preview_url_Valid() const{
    return m_preview_url_isValid;
}

OAIEpisodeRestrictionObject OAIPlaylistTrackObject_track::getRestrictions() const {
    return m_restrictions;
}
void OAIPlaylistTrackObject_track::setRestrictions(const OAIEpisodeRestrictionObject &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIPlaylistTrackObject_track::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

qint32 OAIPlaylistTrackObject_track::getTrackNumber() const {
    return m_track_number;
}
void OAIPlaylistTrackObject_track::setTrackNumber(const qint32 &track_number) {
    m_track_number = track_number;
    m_track_number_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_track_number_Set() const{
    return m_track_number_isSet;
}

bool OAIPlaylistTrackObject_track::is_track_number_Valid() const{
    return m_track_number_isValid;
}

QString OAIPlaylistTrackObject_track::getType() const {
    return m_type;
}
void OAIPlaylistTrackObject_track::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlaylistTrackObject_track::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPlaylistTrackObject_track::getUri() const {
    return m_uri;
}
void OAIPlaylistTrackObject_track::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPlaylistTrackObject_track::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIPlaylistTrackObject_track::getAudioPreviewUrl() const {
    return m_audio_preview_url;
}
void OAIPlaylistTrackObject_track::setAudioPreviewUrl(const QString &audio_preview_url) {
    m_audio_preview_url = audio_preview_url;
    m_audio_preview_url_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_audio_preview_url_Set() const{
    return m_audio_preview_url_isSet;
}

bool OAIPlaylistTrackObject_track::is_audio_preview_url_Valid() const{
    return m_audio_preview_url_isValid;
}

QString OAIPlaylistTrackObject_track::getDescription() const {
    return m_description;
}
void OAIPlaylistTrackObject_track::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlaylistTrackObject_track::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPlaylistTrackObject_track::getHtmlDescription() const {
    return m_html_description;
}
void OAIPlaylistTrackObject_track::setHtmlDescription(const QString &html_description) {
    m_html_description = html_description;
    m_html_description_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_html_description_Set() const{
    return m_html_description_isSet;
}

bool OAIPlaylistTrackObject_track::is_html_description_Valid() const{
    return m_html_description_isValid;
}

QList<OAIImageObject> OAIPlaylistTrackObject_track::getImages() const {
    return m_images;
}
void OAIPlaylistTrackObject_track::setImages(const QList<OAIImageObject> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_images_Set() const{
    return m_images_isSet;
}

bool OAIPlaylistTrackObject_track::is_images_Valid() const{
    return m_images_isValid;
}

bool OAIPlaylistTrackObject_track::isIsExternallyHosted() const {
    return m_is_externally_hosted;
}
void OAIPlaylistTrackObject_track::setIsExternallyHosted(const bool &is_externally_hosted) {
    m_is_externally_hosted = is_externally_hosted;
    m_is_externally_hosted_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_is_externally_hosted_Set() const{
    return m_is_externally_hosted_isSet;
}

bool OAIPlaylistTrackObject_track::is_is_externally_hosted_Valid() const{
    return m_is_externally_hosted_isValid;
}

QString OAIPlaylistTrackObject_track::getLanguage() const {
    return m_language;
}
void OAIPlaylistTrackObject_track::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_language_Set() const{
    return m_language_isSet;
}

bool OAIPlaylistTrackObject_track::is_language_Valid() const{
    return m_language_isValid;
}

QList<QString> OAIPlaylistTrackObject_track::getLanguages() const {
    return m_languages;
}
void OAIPlaylistTrackObject_track::setLanguages(const QList<QString> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAIPlaylistTrackObject_track::is_languages_Valid() const{
    return m_languages_isValid;
}

QString OAIPlaylistTrackObject_track::getReleaseDate() const {
    return m_release_date;
}
void OAIPlaylistTrackObject_track::setReleaseDate(const QString &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIPlaylistTrackObject_track::is_release_date_Valid() const{
    return m_release_date_isValid;
}

QString OAIPlaylistTrackObject_track::getReleaseDatePrecision() const {
    return m_release_date_precision;
}
void OAIPlaylistTrackObject_track::setReleaseDatePrecision(const QString &release_date_precision) {
    m_release_date_precision = release_date_precision;
    m_release_date_precision_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_release_date_precision_Set() const{
    return m_release_date_precision_isSet;
}

bool OAIPlaylistTrackObject_track::is_release_date_precision_Valid() const{
    return m_release_date_precision_isValid;
}

OAIResumePointObject OAIPlaylistTrackObject_track::getResumePoint() const {
    return m_resume_point;
}
void OAIPlaylistTrackObject_track::setResumePoint(const OAIResumePointObject &resume_point) {
    m_resume_point = resume_point;
    m_resume_point_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_resume_point_Set() const{
    return m_resume_point_isSet;
}

bool OAIPlaylistTrackObject_track::is_resume_point_Valid() const{
    return m_resume_point_isValid;
}

OAISimplifiedShowObject OAIPlaylistTrackObject_track::getShow() const {
    return m_show;
}
void OAIPlaylistTrackObject_track::setShow(const OAISimplifiedShowObject &show) {
    m_show = show;
    m_show_isSet = true;
}

bool OAIPlaylistTrackObject_track::is_show_Set() const{
    return m_show_isSet;
}

bool OAIPlaylistTrackObject_track::is_show_Valid() const{
    return m_show_isValid;
}

bool OAIPlaylistTrackObject_track::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_markets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disc_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_explicit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_playable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_popularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_preview_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_externally_hosted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_show.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylistTrackObject_track::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_ms_isValid && m_r_explicit_isValid && m_external_urls_isValid && m_href_isValid && m_id_isValid && m_is_playable_isValid && m_name_isValid && m_type_isValid && m_uri_isValid && m_audio_preview_url_isValid && m_description_isValid && m_html_description_isValid && m_images_isValid && m_is_externally_hosted_isValid && m_languages_isValid && m_release_date_isValid && m_release_date_precision_isValid && m_resume_point_isValid && m_show_isValid && true;
}

} // namespace OpenAPI
