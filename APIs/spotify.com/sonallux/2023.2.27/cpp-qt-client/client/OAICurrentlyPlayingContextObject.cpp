/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrentlyPlayingContextObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrentlyPlayingContextObject::OAICurrentlyPlayingContextObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrentlyPlayingContextObject::OAICurrentlyPlayingContextObject() {
    this->initializeModel();
}

OAICurrentlyPlayingContextObject::~OAICurrentlyPlayingContextObject() {}

void OAICurrentlyPlayingContextObject::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_currently_playing_type_isSet = false;
    m_currently_playing_type_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_is_playing_isSet = false;
    m_is_playing_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_progress_ms_isSet = false;
    m_progress_ms_isValid = false;

    m_repeat_state_isSet = false;
    m_repeat_state_isValid = false;

    m_shuffle_state_isSet = false;
    m_shuffle_state_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAICurrentlyPlayingContextObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrentlyPlayingContextObject::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_currently_playing_type_isValid = ::OpenAPI::fromJsonValue(m_currently_playing_type, json[QString("currently_playing_type")]);
    m_currently_playing_type_isSet = !json[QString("currently_playing_type")].isNull() && m_currently_playing_type_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_is_playing_isValid = ::OpenAPI::fromJsonValue(m_is_playing, json[QString("is_playing")]);
    m_is_playing_isSet = !json[QString("is_playing")].isNull() && m_is_playing_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_progress_ms_isValid = ::OpenAPI::fromJsonValue(m_progress_ms, json[QString("progress_ms")]);
    m_progress_ms_isSet = !json[QString("progress_ms")].isNull() && m_progress_ms_isValid;

    m_repeat_state_isValid = ::OpenAPI::fromJsonValue(m_repeat_state, json[QString("repeat_state")]);
    m_repeat_state_isSet = !json[QString("repeat_state")].isNull() && m_repeat_state_isValid;

    m_shuffle_state_isValid = ::OpenAPI::fromJsonValue(m_shuffle_state, json[QString("shuffle_state")]);
    m_shuffle_state_isSet = !json[QString("shuffle_state")].isNull() && m_shuffle_state_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAICurrentlyPlayingContextObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrentlyPlayingContextObject::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.isSet()) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_currently_playing_type_isSet) {
        obj.insert(QString("currently_playing_type"), ::OpenAPI::toJsonValue(m_currently_playing_type));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_is_playing_isSet) {
        obj.insert(QString("is_playing"), ::OpenAPI::toJsonValue(m_is_playing));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_progress_ms_isSet) {
        obj.insert(QString("progress_ms"), ::OpenAPI::toJsonValue(m_progress_ms));
    }
    if (m_repeat_state_isSet) {
        obj.insert(QString("repeat_state"), ::OpenAPI::toJsonValue(m_repeat_state));
    }
    if (m_shuffle_state_isSet) {
        obj.insert(QString("shuffle_state"), ::OpenAPI::toJsonValue(m_shuffle_state));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIDisallowsObject OAICurrentlyPlayingContextObject::getActions() const {
    return m_actions;
}
void OAICurrentlyPlayingContextObject::setActions(const OAIDisallowsObject &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAICurrentlyPlayingContextObject::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAICurrentlyPlayingContextObject::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIContextObject OAICurrentlyPlayingContextObject::getContext() const {
    return m_context;
}
void OAICurrentlyPlayingContextObject::setContext(const OAIContextObject &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAICurrentlyPlayingContextObject::is_context_Set() const{
    return m_context_isSet;
}

bool OAICurrentlyPlayingContextObject::is_context_Valid() const{
    return m_context_isValid;
}

QString OAICurrentlyPlayingContextObject::getCurrentlyPlayingType() const {
    return m_currently_playing_type;
}
void OAICurrentlyPlayingContextObject::setCurrentlyPlayingType(const QString &currently_playing_type) {
    m_currently_playing_type = currently_playing_type;
    m_currently_playing_type_isSet = true;
}

bool OAICurrentlyPlayingContextObject::is_currently_playing_type_Set() const{
    return m_currently_playing_type_isSet;
}

bool OAICurrentlyPlayingContextObject::is_currently_playing_type_Valid() const{
    return m_currently_playing_type_isValid;
}

OAIDeviceObject OAICurrentlyPlayingContextObject::getDevice() const {
    return m_device;
}
void OAICurrentlyPlayingContextObject::setDevice(const OAIDeviceObject &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAICurrentlyPlayingContextObject::is_device_Set() const{
    return m_device_isSet;
}

bool OAICurrentlyPlayingContextObject::is_device_Valid() const{
    return m_device_isValid;
}

bool OAICurrentlyPlayingContextObject::isIsPlaying() const {
    return m_is_playing;
}
void OAICurrentlyPlayingContextObject::setIsPlaying(const bool &is_playing) {
    m_is_playing = is_playing;
    m_is_playing_isSet = true;
}

bool OAICurrentlyPlayingContextObject::is_is_playing_Set() const{
    return m_is_playing_isSet;
}

bool OAICurrentlyPlayingContextObject::is_is_playing_Valid() const{
    return m_is_playing_isValid;
}

OAICurrentlyPlayingContextObject_item OAICurrentlyPlayingContextObject::getItem() const {
    return m_item;
}
void OAICurrentlyPlayingContextObject::setItem(const OAICurrentlyPlayingContextObject_item &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAICurrentlyPlayingContextObject::is_item_Set() const{
    return m_item_isSet;
}

bool OAICurrentlyPlayingContextObject::is_item_Valid() const{
    return m_item_isValid;
}

qint32 OAICurrentlyPlayingContextObject::getProgressMs() const {
    return m_progress_ms;
}
void OAICurrentlyPlayingContextObject::setProgressMs(const qint32 &progress_ms) {
    m_progress_ms = progress_ms;
    m_progress_ms_isSet = true;
}

bool OAICurrentlyPlayingContextObject::is_progress_ms_Set() const{
    return m_progress_ms_isSet;
}

bool OAICurrentlyPlayingContextObject::is_progress_ms_Valid() const{
    return m_progress_ms_isValid;
}

QString OAICurrentlyPlayingContextObject::getRepeatState() const {
    return m_repeat_state;
}
void OAICurrentlyPlayingContextObject::setRepeatState(const QString &repeat_state) {
    m_repeat_state = repeat_state;
    m_repeat_state_isSet = true;
}

bool OAICurrentlyPlayingContextObject::is_repeat_state_Set() const{
    return m_repeat_state_isSet;
}

bool OAICurrentlyPlayingContextObject::is_repeat_state_Valid() const{
    return m_repeat_state_isValid;
}

bool OAICurrentlyPlayingContextObject::isShuffleState() const {
    return m_shuffle_state;
}
void OAICurrentlyPlayingContextObject::setShuffleState(const bool &shuffle_state) {
    m_shuffle_state = shuffle_state;
    m_shuffle_state_isSet = true;
}

bool OAICurrentlyPlayingContextObject::is_shuffle_state_Set() const{
    return m_shuffle_state_isSet;
}

bool OAICurrentlyPlayingContextObject::is_shuffle_state_Valid() const{
    return m_shuffle_state_isValid;
}

qint32 OAICurrentlyPlayingContextObject::getTimestamp() const {
    return m_timestamp;
}
void OAICurrentlyPlayingContextObject::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAICurrentlyPlayingContextObject::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAICurrentlyPlayingContextObject::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAICurrentlyPlayingContextObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currently_playing_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_playing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shuffle_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrentlyPlayingContextObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
