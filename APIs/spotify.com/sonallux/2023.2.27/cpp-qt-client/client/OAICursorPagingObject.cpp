/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICursorPagingObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICursorPagingObject::OAICursorPagingObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICursorPagingObject::OAICursorPagingObject() {
    this->initializeModel();
}

OAICursorPagingObject::~OAICursorPagingObject() {}

void OAICursorPagingObject::initializeModel() {

    m_cursors_isSet = false;
    m_cursors_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAICursorPagingObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICursorPagingObject::fromJsonObject(QJsonObject json) {

    m_cursors_isValid = ::OpenAPI::fromJsonValue(m_cursors, json[QString("cursors")]);
    m_cursors_isSet = !json[QString("cursors")].isNull() && m_cursors_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAICursorPagingObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICursorPagingObject::asJsonObject() const {
    QJsonObject obj;
    if (m_cursors.isSet()) {
        obj.insert(QString("cursors"), ::OpenAPI::toJsonValue(m_cursors));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

OAICursorObject OAICursorPagingObject::getCursors() const {
    return m_cursors;
}
void OAICursorPagingObject::setCursors(const OAICursorObject &cursors) {
    m_cursors = cursors;
    m_cursors_isSet = true;
}

bool OAICursorPagingObject::is_cursors_Set() const{
    return m_cursors_isSet;
}

bool OAICursorPagingObject::is_cursors_Valid() const{
    return m_cursors_isValid;
}

QString OAICursorPagingObject::getHref() const {
    return m_href;
}
void OAICursorPagingObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAICursorPagingObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAICursorPagingObject::is_href_Valid() const{
    return m_href_isValid;
}

qint32 OAICursorPagingObject::getLimit() const {
    return m_limit;
}
void OAICursorPagingObject::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAICursorPagingObject::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAICursorPagingObject::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAICursorPagingObject::getNext() const {
    return m_next;
}
void OAICursorPagingObject::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAICursorPagingObject::is_next_Set() const{
    return m_next_isSet;
}

bool OAICursorPagingObject::is_next_Valid() const{
    return m_next_isValid;
}

qint32 OAICursorPagingObject::getTotal() const {
    return m_total;
}
void OAICursorPagingObject::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAICursorPagingObject::is_total_Set() const{
    return m_total_isSet;
}

bool OAICursorPagingObject::is_total_Valid() const{
    return m_total_isValid;
}

bool OAICursorPagingObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cursors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICursorPagingObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
