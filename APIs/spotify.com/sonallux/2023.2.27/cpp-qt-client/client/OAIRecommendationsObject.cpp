/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationsObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationsObject::OAIRecommendationsObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationsObject::OAIRecommendationsObject() {
    this->initializeModel();
}

OAIRecommendationsObject::~OAIRecommendationsObject() {}

void OAIRecommendationsObject::initializeModel() {

    m_seeds_isSet = false;
    m_seeds_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;
}

void OAIRecommendationsObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationsObject::fromJsonObject(QJsonObject json) {

    m_seeds_isValid = ::OpenAPI::fromJsonValue(m_seeds, json[QString("seeds")]);
    m_seeds_isSet = !json[QString("seeds")].isNull() && m_seeds_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;
}

QString OAIRecommendationsObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationsObject::asJsonObject() const {
    QJsonObject obj;
    if (m_seeds.size() > 0) {
        obj.insert(QString("seeds"), ::OpenAPI::toJsonValue(m_seeds));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    return obj;
}

QList<OAIRecommendationSeedObject> OAIRecommendationsObject::getSeeds() const {
    return m_seeds;
}
void OAIRecommendationsObject::setSeeds(const QList<OAIRecommendationSeedObject> &seeds) {
    m_seeds = seeds;
    m_seeds_isSet = true;
}

bool OAIRecommendationsObject::is_seeds_Set() const{
    return m_seeds_isSet;
}

bool OAIRecommendationsObject::is_seeds_Valid() const{
    return m_seeds_isValid;
}

QList<OAITrackObject> OAIRecommendationsObject::getTracks() const {
    return m_tracks;
}
void OAIRecommendationsObject::setTracks(const QList<OAITrackObject> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIRecommendationsObject::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIRecommendationsObject::is_tracks_Valid() const{
    return m_tracks_isValid;
}

bool OAIRecommendationsObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_seeds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationsObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_seeds_isValid && m_tracks_isValid && true;
}

} // namespace OpenAPI
