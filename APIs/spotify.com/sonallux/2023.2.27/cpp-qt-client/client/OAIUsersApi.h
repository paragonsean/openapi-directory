/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFollow_artists_users_request.h"
#include "OAIFollow_playlist_request.h"
#include "OAIGet_followed_200_response.h"
#include "OAIGet_multiple_albums_401_response.h"
#include "OAIPagingArtistObject.h"
#include "OAIPagingPlaylistObject.h"
#include "OAIPagingTrackObject.h"
#include "OAIPrivateUserObject.h"
#include "OAIPublicUserObject.h"
#include "OAIUnfollow_artists_users_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type QString [required]
    * @param[in]  ids QString [required]
    */
    virtual void checkCurrentUserFollows(const QString &type, const QString &ids);

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  ids QString [required]
    */
    virtual void checkIfUserFollowsPlaylist(const QString &playlist_id, const QString &ids);

    /**
    * @param[in]  type QString [required]
    * @param[in]  ids QString [required]
    * @param[in]  oai_follow_artists_users_request OAIFollow_artists_users_request [optional]
    */
    virtual void followArtistsUsers(const QString &type, const QString &ids, const ::OpenAPI::OptionalParam<OAIFollow_artists_users_request> &oai_follow_artists_users_request = ::OpenAPI::OptionalParam<OAIFollow_artists_users_request>());

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  oai_follow_playlist_request OAIFollow_playlist_request [optional]
    */
    virtual void followPlaylist(const QString &playlist_id, const ::OpenAPI::OptionalParam<OAIFollow_playlist_request> &oai_follow_playlist_request = ::OpenAPI::OptionalParam<OAIFollow_playlist_request>());


    virtual void getCurrentUsersProfile();

    /**
    * @param[in]  type QString [required]
    * @param[in]  after QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getFollowed(const QString &type, const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getListUsersPlaylists(const QString &user_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getUsersProfile(const QString &user_id);

    /**
    * @param[in]  time_range QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getUsersTopArtists(const ::OpenAPI::OptionalParam<QString> &time_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  time_range QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getUsersTopTracks(const ::OpenAPI::OptionalParam<QString> &time_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  ids QString [required]
    * @param[in]  oai_unfollow_artists_users_request OAIUnfollow_artists_users_request [optional]
    */
    virtual void unfollowArtistsUsers(const QString &type, const QString &ids, const ::OpenAPI::OptionalParam<OAIUnfollow_artists_users_request> &oai_unfollow_artists_users_request = ::OpenAPI::OptionalParam<OAIUnfollow_artists_users_request>());

    /**
    * @param[in]  playlist_id QString [required]
    */
    virtual void unfollowPlaylist(const QString &playlist_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkCurrentUserFollowsCallback(OAIHttpRequestWorker *worker);
    void checkIfUserFollowsPlaylistCallback(OAIHttpRequestWorker *worker);
    void followArtistsUsersCallback(OAIHttpRequestWorker *worker);
    void followPlaylistCallback(OAIHttpRequestWorker *worker);
    void getCurrentUsersProfileCallback(OAIHttpRequestWorker *worker);
    void getFollowedCallback(OAIHttpRequestWorker *worker);
    void getListUsersPlaylistsCallback(OAIHttpRequestWorker *worker);
    void getUsersProfileCallback(OAIHttpRequestWorker *worker);
    void getUsersTopArtistsCallback(OAIHttpRequestWorker *worker);
    void getUsersTopTracksCallback(OAIHttpRequestWorker *worker);
    void unfollowArtistsUsersCallback(OAIHttpRequestWorker *worker);
    void unfollowPlaylistCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkCurrentUserFollowsSignal(QList<bool> summary);
    void checkIfUserFollowsPlaylistSignal(QList<bool> summary);
    void followArtistsUsersSignal();
    void followPlaylistSignal();
    void getCurrentUsersProfileSignal(OAIPrivateUserObject summary);
    void getFollowedSignal(OAIGet_followed_200_response summary);
    void getListUsersPlaylistsSignal(OAIPagingPlaylistObject summary);
    void getUsersProfileSignal(OAIPublicUserObject summary);
    void getUsersTopArtistsSignal(OAIPagingArtistObject summary);
    void getUsersTopTracksSignal(OAIPagingTrackObject summary);
    void unfollowArtistsUsersSignal();
    void unfollowPlaylistSignal();


    void checkCurrentUserFollowsSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void checkIfUserFollowsPlaylistSignalFull(OAIHttpRequestWorker *worker, QList<bool> summary);
    void followArtistsUsersSignalFull(OAIHttpRequestWorker *worker);
    void followPlaylistSignalFull(OAIHttpRequestWorker *worker);
    void getCurrentUsersProfileSignalFull(OAIHttpRequestWorker *worker, OAIPrivateUserObject summary);
    void getFollowedSignalFull(OAIHttpRequestWorker *worker, OAIGet_followed_200_response summary);
    void getListUsersPlaylistsSignalFull(OAIHttpRequestWorker *worker, OAIPagingPlaylistObject summary);
    void getUsersProfileSignalFull(OAIHttpRequestWorker *worker, OAIPublicUserObject summary);
    void getUsersTopArtistsSignalFull(OAIHttpRequestWorker *worker, OAIPagingArtistObject summary);
    void getUsersTopTracksSignalFull(OAIHttpRequestWorker *worker, OAIPagingTrackObject summary);
    void unfollowArtistsUsersSignalFull(OAIHttpRequestWorker *worker);
    void unfollowPlaylistSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use checkCurrentUserFollowsSignalError() instead")
    void checkCurrentUserFollowsSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkCurrentUserFollowsSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkIfUserFollowsPlaylistSignalError() instead")
    void checkIfUserFollowsPlaylistSignalE(QList<bool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserFollowsPlaylistSignalError(QList<bool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followArtistsUsersSignalError() instead")
    void followArtistsUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void followArtistsUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followPlaylistSignalError() instead")
    void followPlaylistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void followPlaylistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentUsersProfileSignalError() instead")
    void getCurrentUsersProfileSignalE(OAIPrivateUserObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentUsersProfileSignalError(OAIPrivateUserObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFollowedSignalError() instead")
    void getFollowedSignalE(OAIGet_followed_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFollowedSignalError(OAIGet_followed_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListUsersPlaylistsSignalError() instead")
    void getListUsersPlaylistsSignalE(OAIPagingPlaylistObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getListUsersPlaylistsSignalError(OAIPagingPlaylistObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersProfileSignalError() instead")
    void getUsersProfileSignalE(OAIPublicUserObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersProfileSignalError(OAIPublicUserObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersTopArtistsSignalError() instead")
    void getUsersTopArtistsSignalE(OAIPagingArtistObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersTopArtistsSignalError(OAIPagingArtistObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersTopTracksSignalError() instead")
    void getUsersTopTracksSignalE(OAIPagingTrackObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersTopTracksSignalError(OAIPagingTrackObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowArtistsUsersSignalError() instead")
    void unfollowArtistsUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowArtistsUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowPlaylistSignalError() instead")
    void unfollowPlaylistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowPlaylistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkCurrentUserFollowsSignalErrorFull() instead")
    void checkCurrentUserFollowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkCurrentUserFollowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkIfUserFollowsPlaylistSignalErrorFull() instead")
    void checkIfUserFollowsPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserFollowsPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followArtistsUsersSignalErrorFull() instead")
    void followArtistsUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followArtistsUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followPlaylistSignalErrorFull() instead")
    void followPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentUsersProfileSignalErrorFull() instead")
    void getCurrentUsersProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentUsersProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFollowedSignalErrorFull() instead")
    void getFollowedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFollowedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListUsersPlaylistsSignalErrorFull() instead")
    void getListUsersPlaylistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListUsersPlaylistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersProfileSignalErrorFull() instead")
    void getUsersProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersTopArtistsSignalErrorFull() instead")
    void getUsersTopArtistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersTopArtistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersTopTracksSignalErrorFull() instead")
    void getUsersTopTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersTopTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowArtistsUsersSignalErrorFull() instead")
    void unfollowArtistsUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowArtistsUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowPlaylistSignalErrorFull() instead")
    void unfollowPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
