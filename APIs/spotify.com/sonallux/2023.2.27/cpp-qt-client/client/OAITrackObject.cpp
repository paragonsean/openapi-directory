/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrackObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrackObject::OAITrackObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrackObject::OAITrackObject() {
    this->initializeModel();
}

OAITrackObject::~OAITrackObject() {}

void OAITrackObject::initializeModel() {

    m_album_isSet = false;
    m_album_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_available_markets_isSet = false;
    m_available_markets_isValid = false;

    m_disc_number_isSet = false;
    m_disc_number_isValid = false;

    m_duration_ms_isSet = false;
    m_duration_ms_isValid = false;

    m_r_explicit_isSet = false;
    m_r_explicit_isValid = false;

    m_external_ids_isSet = false;
    m_external_ids_isValid = false;

    m_external_urls_isSet = false;
    m_external_urls_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_local_isSet = false;
    m_is_local_isValid = false;

    m_is_playable_isSet = false;
    m_is_playable_isValid = false;

    m_linked_from_isSet = false;
    m_linked_from_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_popularity_isSet = false;
    m_popularity_isValid = false;

    m_preview_url_isSet = false;
    m_preview_url_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_track_number_isSet = false;
    m_track_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAITrackObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrackObject::fromJsonObject(QJsonObject json) {

    m_album_isValid = ::OpenAPI::fromJsonValue(m_album, json[QString("album")]);
    m_album_isSet = !json[QString("album")].isNull() && m_album_isValid;

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_available_markets_isValid = ::OpenAPI::fromJsonValue(m_available_markets, json[QString("available_markets")]);
    m_available_markets_isSet = !json[QString("available_markets")].isNull() && m_available_markets_isValid;

    m_disc_number_isValid = ::OpenAPI::fromJsonValue(m_disc_number, json[QString("disc_number")]);
    m_disc_number_isSet = !json[QString("disc_number")].isNull() && m_disc_number_isValid;

    m_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_duration_ms, json[QString("duration_ms")]);
    m_duration_ms_isSet = !json[QString("duration_ms")].isNull() && m_duration_ms_isValid;

    m_r_explicit_isValid = ::OpenAPI::fromJsonValue(m_r_explicit, json[QString("explicit")]);
    m_r_explicit_isSet = !json[QString("explicit")].isNull() && m_r_explicit_isValid;

    m_external_ids_isValid = ::OpenAPI::fromJsonValue(m_external_ids, json[QString("external_ids")]);
    m_external_ids_isSet = !json[QString("external_ids")].isNull() && m_external_ids_isValid;

    m_external_urls_isValid = ::OpenAPI::fromJsonValue(m_external_urls, json[QString("external_urls")]);
    m_external_urls_isSet = !json[QString("external_urls")].isNull() && m_external_urls_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_local_isValid = ::OpenAPI::fromJsonValue(m_is_local, json[QString("is_local")]);
    m_is_local_isSet = !json[QString("is_local")].isNull() && m_is_local_isValid;

    m_is_playable_isValid = ::OpenAPI::fromJsonValue(m_is_playable, json[QString("is_playable")]);
    m_is_playable_isSet = !json[QString("is_playable")].isNull() && m_is_playable_isValid;

    m_linked_from_isValid = ::OpenAPI::fromJsonValue(m_linked_from, json[QString("linked_from")]);
    m_linked_from_isSet = !json[QString("linked_from")].isNull() && m_linked_from_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_popularity_isValid = ::OpenAPI::fromJsonValue(m_popularity, json[QString("popularity")]);
    m_popularity_isSet = !json[QString("popularity")].isNull() && m_popularity_isValid;

    m_preview_url_isValid = ::OpenAPI::fromJsonValue(m_preview_url, json[QString("preview_url")]);
    m_preview_url_isSet = !json[QString("preview_url")].isNull() && m_preview_url_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_track_number_isValid = ::OpenAPI::fromJsonValue(m_track_number, json[QString("track_number")]);
    m_track_number_isSet = !json[QString("track_number")].isNull() && m_track_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAITrackObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrackObject::asJsonObject() const {
    QJsonObject obj;
    if (m_album.isSet()) {
        obj.insert(QString("album"), ::OpenAPI::toJsonValue(m_album));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    if (m_available_markets.size() > 0) {
        obj.insert(QString("available_markets"), ::OpenAPI::toJsonValue(m_available_markets));
    }
    if (m_disc_number_isSet) {
        obj.insert(QString("disc_number"), ::OpenAPI::toJsonValue(m_disc_number));
    }
    if (m_duration_ms_isSet) {
        obj.insert(QString("duration_ms"), ::OpenAPI::toJsonValue(m_duration_ms));
    }
    if (m_r_explicit_isSet) {
        obj.insert(QString("explicit"), ::OpenAPI::toJsonValue(m_r_explicit));
    }
    if (m_external_ids.isSet()) {
        obj.insert(QString("external_ids"), ::OpenAPI::toJsonValue(m_external_ids));
    }
    if (m_external_urls.isSet()) {
        obj.insert(QString("external_urls"), ::OpenAPI::toJsonValue(m_external_urls));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_local_isSet) {
        obj.insert(QString("is_local"), ::OpenAPI::toJsonValue(m_is_local));
    }
    if (m_is_playable_isSet) {
        obj.insert(QString("is_playable"), ::OpenAPI::toJsonValue(m_is_playable));
    }
    if (m_linked_from.isSet()) {
        obj.insert(QString("linked_from"), ::OpenAPI::toJsonValue(m_linked_from));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_popularity_isSet) {
        obj.insert(QString("popularity"), ::OpenAPI::toJsonValue(m_popularity));
    }
    if (m_preview_url_isSet) {
        obj.insert(QString("preview_url"), ::OpenAPI::toJsonValue(m_preview_url));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_track_number_isSet) {
        obj.insert(QString("track_number"), ::OpenAPI::toJsonValue(m_track_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAISimplifiedAlbumObject OAITrackObject::getAlbum() const {
    return m_album;
}
void OAITrackObject::setAlbum(const OAISimplifiedAlbumObject &album) {
    m_album = album;
    m_album_isSet = true;
}

bool OAITrackObject::is_album_Set() const{
    return m_album_isSet;
}

bool OAITrackObject::is_album_Valid() const{
    return m_album_isValid;
}

QList<OAIArtistObject> OAITrackObject::getArtists() const {
    return m_artists;
}
void OAITrackObject::setArtists(const QList<OAIArtistObject> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAITrackObject::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAITrackObject::is_artists_Valid() const{
    return m_artists_isValid;
}

QList<QString> OAITrackObject::getAvailableMarkets() const {
    return m_available_markets;
}
void OAITrackObject::setAvailableMarkets(const QList<QString> &available_markets) {
    m_available_markets = available_markets;
    m_available_markets_isSet = true;
}

bool OAITrackObject::is_available_markets_Set() const{
    return m_available_markets_isSet;
}

bool OAITrackObject::is_available_markets_Valid() const{
    return m_available_markets_isValid;
}

qint32 OAITrackObject::getDiscNumber() const {
    return m_disc_number;
}
void OAITrackObject::setDiscNumber(const qint32 &disc_number) {
    m_disc_number = disc_number;
    m_disc_number_isSet = true;
}

bool OAITrackObject::is_disc_number_Set() const{
    return m_disc_number_isSet;
}

bool OAITrackObject::is_disc_number_Valid() const{
    return m_disc_number_isValid;
}

qint32 OAITrackObject::getDurationMs() const {
    return m_duration_ms;
}
void OAITrackObject::setDurationMs(const qint32 &duration_ms) {
    m_duration_ms = duration_ms;
    m_duration_ms_isSet = true;
}

bool OAITrackObject::is_duration_ms_Set() const{
    return m_duration_ms_isSet;
}

bool OAITrackObject::is_duration_ms_Valid() const{
    return m_duration_ms_isValid;
}

bool OAITrackObject::isRExplicit() const {
    return m_r_explicit;
}
void OAITrackObject::setRExplicit(const bool &r_explicit) {
    m_r_explicit = r_explicit;
    m_r_explicit_isSet = true;
}

bool OAITrackObject::is_r_explicit_Set() const{
    return m_r_explicit_isSet;
}

bool OAITrackObject::is_r_explicit_Valid() const{
    return m_r_explicit_isValid;
}

OAIExternalIdObject OAITrackObject::getExternalIds() const {
    return m_external_ids;
}
void OAITrackObject::setExternalIds(const OAIExternalIdObject &external_ids) {
    m_external_ids = external_ids;
    m_external_ids_isSet = true;
}

bool OAITrackObject::is_external_ids_Set() const{
    return m_external_ids_isSet;
}

bool OAITrackObject::is_external_ids_Valid() const{
    return m_external_ids_isValid;
}

OAIExternalUrlObject OAITrackObject::getExternalUrls() const {
    return m_external_urls;
}
void OAITrackObject::setExternalUrls(const OAIExternalUrlObject &external_urls) {
    m_external_urls = external_urls;
    m_external_urls_isSet = true;
}

bool OAITrackObject::is_external_urls_Set() const{
    return m_external_urls_isSet;
}

bool OAITrackObject::is_external_urls_Valid() const{
    return m_external_urls_isValid;
}

QString OAITrackObject::getHref() const {
    return m_href;
}
void OAITrackObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAITrackObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAITrackObject::is_href_Valid() const{
    return m_href_isValid;
}

QString OAITrackObject::getId() const {
    return m_id;
}
void OAITrackObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITrackObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAITrackObject::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITrackObject::isIsLocal() const {
    return m_is_local;
}
void OAITrackObject::setIsLocal(const bool &is_local) {
    m_is_local = is_local;
    m_is_local_isSet = true;
}

bool OAITrackObject::is_is_local_Set() const{
    return m_is_local_isSet;
}

bool OAITrackObject::is_is_local_Valid() const{
    return m_is_local_isValid;
}

bool OAITrackObject::isIsPlayable() const {
    return m_is_playable;
}
void OAITrackObject::setIsPlayable(const bool &is_playable) {
    m_is_playable = is_playable;
    m_is_playable_isSet = true;
}

bool OAITrackObject::is_is_playable_Set() const{
    return m_is_playable_isSet;
}

bool OAITrackObject::is_is_playable_Valid() const{
    return m_is_playable_isValid;
}

OAILinkedTrackObject OAITrackObject::getLinkedFrom() const {
    return m_linked_from;
}
void OAITrackObject::setLinkedFrom(const OAILinkedTrackObject &linked_from) {
    m_linked_from = linked_from;
    m_linked_from_isSet = true;
}

bool OAITrackObject::is_linked_from_Set() const{
    return m_linked_from_isSet;
}

bool OAITrackObject::is_linked_from_Valid() const{
    return m_linked_from_isValid;
}

QString OAITrackObject::getName() const {
    return m_name;
}
void OAITrackObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrackObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrackObject::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITrackObject::getPopularity() const {
    return m_popularity;
}
void OAITrackObject::setPopularity(const qint32 &popularity) {
    m_popularity = popularity;
    m_popularity_isSet = true;
}

bool OAITrackObject::is_popularity_Set() const{
    return m_popularity_isSet;
}

bool OAITrackObject::is_popularity_Valid() const{
    return m_popularity_isValid;
}

QString OAITrackObject::getPreviewUrl() const {
    return m_preview_url;
}
void OAITrackObject::setPreviewUrl(const QString &preview_url) {
    m_preview_url = preview_url;
    m_preview_url_isSet = true;
}

bool OAITrackObject::is_preview_url_Set() const{
    return m_preview_url_isSet;
}

bool OAITrackObject::is_preview_url_Valid() const{
    return m_preview_url_isValid;
}

OAITrackRestrictionObject OAITrackObject::getRestrictions() const {
    return m_restrictions;
}
void OAITrackObject::setRestrictions(const OAITrackRestrictionObject &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAITrackObject::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAITrackObject::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

qint32 OAITrackObject::getTrackNumber() const {
    return m_track_number;
}
void OAITrackObject::setTrackNumber(const qint32 &track_number) {
    m_track_number = track_number;
    m_track_number_isSet = true;
}

bool OAITrackObject::is_track_number_Set() const{
    return m_track_number_isSet;
}

bool OAITrackObject::is_track_number_Valid() const{
    return m_track_number_isValid;
}

QString OAITrackObject::getType() const {
    return m_type;
}
void OAITrackObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITrackObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAITrackObject::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITrackObject::getUri() const {
    return m_uri;
}
void OAITrackObject::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAITrackObject::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAITrackObject::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAITrackObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_markets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disc_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_explicit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_playable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_popularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrackObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
