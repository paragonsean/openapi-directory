/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylistObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylistObject::OAIPlaylistObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylistObject::OAIPlaylistObject() {
    this->initializeModel();
}

OAIPlaylistObject::~OAIPlaylistObject() {}

void OAIPlaylistObject::initializeModel() {

    m_collaborative_isSet = false;
    m_collaborative_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_urls_isSet = false;
    m_external_urls_isValid = false;

    m_followers_isSet = false;
    m_followers_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_snapshot_id_isSet = false;
    m_snapshot_id_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIPlaylistObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylistObject::fromJsonObject(QJsonObject json) {

    m_collaborative_isValid = ::OpenAPI::fromJsonValue(m_collaborative, json[QString("collaborative")]);
    m_collaborative_isSet = !json[QString("collaborative")].isNull() && m_collaborative_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_urls_isValid = ::OpenAPI::fromJsonValue(m_external_urls, json[QString("external_urls")]);
    m_external_urls_isSet = !json[QString("external_urls")].isNull() && m_external_urls_isValid;

    m_followers_isValid = ::OpenAPI::fromJsonValue(m_followers, json[QString("followers")]);
    m_followers_isSet = !json[QString("followers")].isNull() && m_followers_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_id, json[QString("snapshot_id")]);
    m_snapshot_id_isSet = !json[QString("snapshot_id")].isNull() && m_snapshot_id_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIPlaylistObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylistObject::asJsonObject() const {
    QJsonObject obj;
    if (m_collaborative_isSet) {
        obj.insert(QString("collaborative"), ::OpenAPI::toJsonValue(m_collaborative));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_urls.isSet()) {
        obj.insert(QString("external_urls"), ::OpenAPI::toJsonValue(m_external_urls));
    }
    if (m_followers.isSet()) {
        obj.insert(QString("followers"), ::OpenAPI::toJsonValue(m_followers));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_snapshot_id_isSet) {
        obj.insert(QString("snapshot_id"), ::OpenAPI::toJsonValue(m_snapshot_id));
    }
    if (m_tracks.isSet()) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

bool OAIPlaylistObject::isCollaborative() const {
    return m_collaborative;
}
void OAIPlaylistObject::setCollaborative(const bool &collaborative) {
    m_collaborative = collaborative;
    m_collaborative_isSet = true;
}

bool OAIPlaylistObject::is_collaborative_Set() const{
    return m_collaborative_isSet;
}

bool OAIPlaylistObject::is_collaborative_Valid() const{
    return m_collaborative_isValid;
}

QString OAIPlaylistObject::getDescription() const {
    return m_description;
}
void OAIPlaylistObject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlaylistObject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlaylistObject::is_description_Valid() const{
    return m_description_isValid;
}

OAIExternalUrlObject OAIPlaylistObject::getExternalUrls() const {
    return m_external_urls;
}
void OAIPlaylistObject::setExternalUrls(const OAIExternalUrlObject &external_urls) {
    m_external_urls = external_urls;
    m_external_urls_isSet = true;
}

bool OAIPlaylistObject::is_external_urls_Set() const{
    return m_external_urls_isSet;
}

bool OAIPlaylistObject::is_external_urls_Valid() const{
    return m_external_urls_isValid;
}

OAIFollowersObject OAIPlaylistObject::getFollowers() const {
    return m_followers;
}
void OAIPlaylistObject::setFollowers(const OAIFollowersObject &followers) {
    m_followers = followers;
    m_followers_isSet = true;
}

bool OAIPlaylistObject::is_followers_Set() const{
    return m_followers_isSet;
}

bool OAIPlaylistObject::is_followers_Valid() const{
    return m_followers_isValid;
}

QString OAIPlaylistObject::getHref() const {
    return m_href;
}
void OAIPlaylistObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIPlaylistObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAIPlaylistObject::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIPlaylistObject::getId() const {
    return m_id;
}
void OAIPlaylistObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlaylistObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlaylistObject::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageObject> OAIPlaylistObject::getImages() const {
    return m_images;
}
void OAIPlaylistObject::setImages(const QList<OAIImageObject> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIPlaylistObject::is_images_Set() const{
    return m_images_isSet;
}

bool OAIPlaylistObject::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIPlaylistObject::getName() const {
    return m_name;
}
void OAIPlaylistObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlaylistObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlaylistObject::is_name_Valid() const{
    return m_name_isValid;
}

OAIPlaylistOwnerObject OAIPlaylistObject::getOwner() const {
    return m_owner;
}
void OAIPlaylistObject::setOwner(const OAIPlaylistOwnerObject &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPlaylistObject::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPlaylistObject::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIPlaylistObject::isRPublic() const {
    return m_r_public;
}
void OAIPlaylistObject::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIPlaylistObject::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIPlaylistObject::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QString OAIPlaylistObject::getSnapshotId() const {
    return m_snapshot_id;
}
void OAIPlaylistObject::setSnapshotId(const QString &snapshot_id) {
    m_snapshot_id = snapshot_id;
    m_snapshot_id_isSet = true;
}

bool OAIPlaylistObject::is_snapshot_id_Set() const{
    return m_snapshot_id_isSet;
}

bool OAIPlaylistObject::is_snapshot_id_Valid() const{
    return m_snapshot_id_isValid;
}

OAIPagingPlaylistTrackObject OAIPlaylistObject::getTracks() const {
    return m_tracks;
}
void OAIPlaylistObject::setTracks(const OAIPagingPlaylistTrackObject &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIPlaylistObject::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIPlaylistObject::is_tracks_Valid() const{
    return m_tracks_isValid;
}

QString OAIPlaylistObject::getType() const {
    return m_type;
}
void OAIPlaylistObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlaylistObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlaylistObject::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPlaylistObject::getUri() const {
    return m_uri;
}
void OAIPlaylistObject::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPlaylistObject::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPlaylistObject::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIPlaylistObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaborative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylistObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
