/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAudioFeaturesObject.h
 *
 * 
 */

#ifndef OAIAudioFeaturesObject_H
#define OAIAudioFeaturesObject_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAudioFeaturesObject : public OAIObject {
public:
    OAIAudioFeaturesObject();
    OAIAudioFeaturesObject(QString json);
    ~OAIAudioFeaturesObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getAcousticness() const;
    void setAcousticness(const float &acousticness);
    bool is_acousticness_Set() const;
    bool is_acousticness_Valid() const;

    QString getAnalysisUrl() const;
    void setAnalysisUrl(const QString &analysis_url);
    bool is_analysis_url_Set() const;
    bool is_analysis_url_Valid() const;

    float getDanceability() const;
    void setDanceability(const float &danceability);
    bool is_danceability_Set() const;
    bool is_danceability_Valid() const;

    qint32 getDurationMs() const;
    void setDurationMs(const qint32 &duration_ms);
    bool is_duration_ms_Set() const;
    bool is_duration_ms_Valid() const;

    float getEnergy() const;
    void setEnergy(const float &energy);
    bool is_energy_Set() const;
    bool is_energy_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    float getInstrumentalness() const;
    void setInstrumentalness(const float &instrumentalness);
    bool is_instrumentalness_Set() const;
    bool is_instrumentalness_Valid() const;

    qint32 getKey() const;
    void setKey(const qint32 &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    float getLiveness() const;
    void setLiveness(const float &liveness);
    bool is_liveness_Set() const;
    bool is_liveness_Valid() const;

    float getLoudness() const;
    void setLoudness(const float &loudness);
    bool is_loudness_Set() const;
    bool is_loudness_Valid() const;

    qint32 getMode() const;
    void setMode(const qint32 &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    float getSpeechiness() const;
    void setSpeechiness(const float &speechiness);
    bool is_speechiness_Set() const;
    bool is_speechiness_Valid() const;

    float getTempo() const;
    void setTempo(const float &tempo);
    bool is_tempo_Set() const;
    bool is_tempo_Valid() const;

    qint32 getTimeSignature() const;
    void setTimeSignature(const qint32 &time_signature);
    bool is_time_signature_Set() const;
    bool is_time_signature_Valid() const;

    QString getTrackHref() const;
    void setTrackHref(const QString &track_href);
    bool is_track_href_Set() const;
    bool is_track_href_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUri() const;
    void setUri(const QString &uri);
    bool is_uri_Set() const;
    bool is_uri_Valid() const;

    float getValence() const;
    void setValence(const float &valence);
    bool is_valence_Set() const;
    bool is_valence_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_acousticness;
    bool m_acousticness_isSet;
    bool m_acousticness_isValid;

    QString m_analysis_url;
    bool m_analysis_url_isSet;
    bool m_analysis_url_isValid;

    float m_danceability;
    bool m_danceability_isSet;
    bool m_danceability_isValid;

    qint32 m_duration_ms;
    bool m_duration_ms_isSet;
    bool m_duration_ms_isValid;

    float m_energy;
    bool m_energy_isSet;
    bool m_energy_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    float m_instrumentalness;
    bool m_instrumentalness_isSet;
    bool m_instrumentalness_isValid;

    qint32 m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    float m_liveness;
    bool m_liveness_isSet;
    bool m_liveness_isValid;

    float m_loudness;
    bool m_loudness_isSet;
    bool m_loudness_isValid;

    qint32 m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    float m_speechiness;
    bool m_speechiness_isSet;
    bool m_speechiness_isValid;

    float m_tempo;
    bool m_tempo_isSet;
    bool m_tempo_isValid;

    qint32 m_time_signature;
    bool m_time_signature_isSet;
    bool m_time_signature_isValid;

    QString m_track_href;
    bool m_track_href_isSet;
    bool m_track_href_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_uri;
    bool m_uri_isSet;
    bool m_uri_isValid;

    float m_valence;
    bool m_valence_isSet;
    bool m_valence_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAudioFeaturesObject)

#endif // OAIAudioFeaturesObject_H
