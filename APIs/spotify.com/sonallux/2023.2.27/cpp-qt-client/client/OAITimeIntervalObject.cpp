/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeIntervalObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeIntervalObject::OAITimeIntervalObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeIntervalObject::OAITimeIntervalObject() {
    this->initializeModel();
}

OAITimeIntervalObject::~OAITimeIntervalObject() {}

void OAITimeIntervalObject::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAITimeIntervalObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeIntervalObject::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAITimeIntervalObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeIntervalObject::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

double OAITimeIntervalObject::getConfidence() const {
    return m_confidence;
}
void OAITimeIntervalObject::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAITimeIntervalObject::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAITimeIntervalObject::is_confidence_Valid() const{
    return m_confidence_isValid;
}

double OAITimeIntervalObject::getDuration() const {
    return m_duration;
}
void OAITimeIntervalObject::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAITimeIntervalObject::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAITimeIntervalObject::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAITimeIntervalObject::getStart() const {
    return m_start;
}
void OAITimeIntervalObject::setStart(const double &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAITimeIntervalObject::is_start_Set() const{
    return m_start_isSet;
}

bool OAITimeIntervalObject::is_start_Valid() const{
    return m_start_isValid;
}

bool OAITimeIntervalObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeIntervalObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
