/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationSeedObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationSeedObject::OAIRecommendationSeedObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationSeedObject::OAIRecommendationSeedObject() {
    this->initializeModel();
}

OAIRecommendationSeedObject::~OAIRecommendationSeedObject() {}

void OAIRecommendationSeedObject::initializeModel() {

    m_after_filtering_size_isSet = false;
    m_after_filtering_size_isValid = false;

    m_after_relinking_size_isSet = false;
    m_after_relinking_size_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_initial_pool_size_isSet = false;
    m_initial_pool_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRecommendationSeedObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationSeedObject::fromJsonObject(QJsonObject json) {

    m_after_filtering_size_isValid = ::OpenAPI::fromJsonValue(m_after_filtering_size, json[QString("afterFilteringSize")]);
    m_after_filtering_size_isSet = !json[QString("afterFilteringSize")].isNull() && m_after_filtering_size_isValid;

    m_after_relinking_size_isValid = ::OpenAPI::fromJsonValue(m_after_relinking_size, json[QString("afterRelinkingSize")]);
    m_after_relinking_size_isSet = !json[QString("afterRelinkingSize")].isNull() && m_after_relinking_size_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_initial_pool_size_isValid = ::OpenAPI::fromJsonValue(m_initial_pool_size, json[QString("initialPoolSize")]);
    m_initial_pool_size_isSet = !json[QString("initialPoolSize")].isNull() && m_initial_pool_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRecommendationSeedObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationSeedObject::asJsonObject() const {
    QJsonObject obj;
    if (m_after_filtering_size_isSet) {
        obj.insert(QString("afterFilteringSize"), ::OpenAPI::toJsonValue(m_after_filtering_size));
    }
    if (m_after_relinking_size_isSet) {
        obj.insert(QString("afterRelinkingSize"), ::OpenAPI::toJsonValue(m_after_relinking_size));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_initial_pool_size_isSet) {
        obj.insert(QString("initialPoolSize"), ::OpenAPI::toJsonValue(m_initial_pool_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIRecommendationSeedObject::getAfterFilteringSize() const {
    return m_after_filtering_size;
}
void OAIRecommendationSeedObject::setAfterFilteringSize(const qint32 &after_filtering_size) {
    m_after_filtering_size = after_filtering_size;
    m_after_filtering_size_isSet = true;
}

bool OAIRecommendationSeedObject::is_after_filtering_size_Set() const{
    return m_after_filtering_size_isSet;
}

bool OAIRecommendationSeedObject::is_after_filtering_size_Valid() const{
    return m_after_filtering_size_isValid;
}

qint32 OAIRecommendationSeedObject::getAfterRelinkingSize() const {
    return m_after_relinking_size;
}
void OAIRecommendationSeedObject::setAfterRelinkingSize(const qint32 &after_relinking_size) {
    m_after_relinking_size = after_relinking_size;
    m_after_relinking_size_isSet = true;
}

bool OAIRecommendationSeedObject::is_after_relinking_size_Set() const{
    return m_after_relinking_size_isSet;
}

bool OAIRecommendationSeedObject::is_after_relinking_size_Valid() const{
    return m_after_relinking_size_isValid;
}

QString OAIRecommendationSeedObject::getHref() const {
    return m_href;
}
void OAIRecommendationSeedObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIRecommendationSeedObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAIRecommendationSeedObject::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIRecommendationSeedObject::getId() const {
    return m_id;
}
void OAIRecommendationSeedObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRecommendationSeedObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRecommendationSeedObject::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIRecommendationSeedObject::getInitialPoolSize() const {
    return m_initial_pool_size;
}
void OAIRecommendationSeedObject::setInitialPoolSize(const qint32 &initial_pool_size) {
    m_initial_pool_size = initial_pool_size;
    m_initial_pool_size_isSet = true;
}

bool OAIRecommendationSeedObject::is_initial_pool_size_Set() const{
    return m_initial_pool_size_isSet;
}

bool OAIRecommendationSeedObject::is_initial_pool_size_Valid() const{
    return m_initial_pool_size_isValid;
}

QString OAIRecommendationSeedObject::getType() const {
    return m_type;
}
void OAIRecommendationSeedObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRecommendationSeedObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRecommendationSeedObject::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRecommendationSeedObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_after_filtering_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_after_relinking_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_pool_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationSeedObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
