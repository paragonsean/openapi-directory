/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateUserObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateUserObject::OAIPrivateUserObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateUserObject::OAIPrivateUserObject() {
    this->initializeModel();
}

OAIPrivateUserObject::~OAIPrivateUserObject() {}

void OAIPrivateUserObject::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_explicit_content_isSet = false;
    m_explicit_content_isValid = false;

    m_external_urls_isSet = false;
    m_external_urls_isValid = false;

    m_followers_isSet = false;
    m_followers_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIPrivateUserObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateUserObject::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_explicit_content_isValid = ::OpenAPI::fromJsonValue(m_explicit_content, json[QString("explicit_content")]);
    m_explicit_content_isSet = !json[QString("explicit_content")].isNull() && m_explicit_content_isValid;

    m_external_urls_isValid = ::OpenAPI::fromJsonValue(m_external_urls, json[QString("external_urls")]);
    m_external_urls_isSet = !json[QString("external_urls")].isNull() && m_external_urls_isValid;

    m_followers_isValid = ::OpenAPI::fromJsonValue(m_followers, json[QString("followers")]);
    m_followers_isSet = !json[QString("followers")].isNull() && m_followers_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIPrivateUserObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateUserObject::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_explicit_content.isSet()) {
        obj.insert(QString("explicit_content"), ::OpenAPI::toJsonValue(m_explicit_content));
    }
    if (m_external_urls.isSet()) {
        obj.insert(QString("external_urls"), ::OpenAPI::toJsonValue(m_external_urls));
    }
    if (m_followers.isSet()) {
        obj.insert(QString("followers"), ::OpenAPI::toJsonValue(m_followers));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIPrivateUserObject::getCountry() const {
    return m_country;
}
void OAIPrivateUserObject::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPrivateUserObject::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPrivateUserObject::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIPrivateUserObject::getDisplayName() const {
    return m_display_name;
}
void OAIPrivateUserObject::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPrivateUserObject::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPrivateUserObject::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIPrivateUserObject::getEmail() const {
    return m_email;
}
void OAIPrivateUserObject::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIPrivateUserObject::is_email_Set() const{
    return m_email_isSet;
}

bool OAIPrivateUserObject::is_email_Valid() const{
    return m_email_isValid;
}

OAIExplicitContentSettingsObject OAIPrivateUserObject::getExplicitContent() const {
    return m_explicit_content;
}
void OAIPrivateUserObject::setExplicitContent(const OAIExplicitContentSettingsObject &explicit_content) {
    m_explicit_content = explicit_content;
    m_explicit_content_isSet = true;
}

bool OAIPrivateUserObject::is_explicit_content_Set() const{
    return m_explicit_content_isSet;
}

bool OAIPrivateUserObject::is_explicit_content_Valid() const{
    return m_explicit_content_isValid;
}

OAIExternalUrlObject OAIPrivateUserObject::getExternalUrls() const {
    return m_external_urls;
}
void OAIPrivateUserObject::setExternalUrls(const OAIExternalUrlObject &external_urls) {
    m_external_urls = external_urls;
    m_external_urls_isSet = true;
}

bool OAIPrivateUserObject::is_external_urls_Set() const{
    return m_external_urls_isSet;
}

bool OAIPrivateUserObject::is_external_urls_Valid() const{
    return m_external_urls_isValid;
}

OAIFollowersObject OAIPrivateUserObject::getFollowers() const {
    return m_followers;
}
void OAIPrivateUserObject::setFollowers(const OAIFollowersObject &followers) {
    m_followers = followers;
    m_followers_isSet = true;
}

bool OAIPrivateUserObject::is_followers_Set() const{
    return m_followers_isSet;
}

bool OAIPrivateUserObject::is_followers_Valid() const{
    return m_followers_isValid;
}

QString OAIPrivateUserObject::getHref() const {
    return m_href;
}
void OAIPrivateUserObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIPrivateUserObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAIPrivateUserObject::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIPrivateUserObject::getId() const {
    return m_id;
}
void OAIPrivateUserObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPrivateUserObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPrivateUserObject::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageObject> OAIPrivateUserObject::getImages() const {
    return m_images;
}
void OAIPrivateUserObject::setImages(const QList<OAIImageObject> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIPrivateUserObject::is_images_Set() const{
    return m_images_isSet;
}

bool OAIPrivateUserObject::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIPrivateUserObject::getProduct() const {
    return m_product;
}
void OAIPrivateUserObject::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIPrivateUserObject::is_product_Set() const{
    return m_product_isSet;
}

bool OAIPrivateUserObject::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIPrivateUserObject::getType() const {
    return m_type;
}
void OAIPrivateUserObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPrivateUserObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPrivateUserObject::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPrivateUserObject::getUri() const {
    return m_uri;
}
void OAIPrivateUserObject::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPrivateUserObject::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPrivateUserObject::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIPrivateUserObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explicit_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateUserObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
