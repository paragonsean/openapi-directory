/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStart_a_users_playback_request.h
 *
 * 
 */

#ifndef OAIStart_a_users_playback_request_H
#define OAIStart_a_users_playback_request_H

#include <QJsonObject>

#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStart_a_users_playback_request : public OAIObject {
public:
    OAIStart_a_users_playback_request();
    OAIStart_a_users_playback_request(QString json);
    ~OAIStart_a_users_playback_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContextUri() const;
    void setContextUri(const QString &context_uri);
    bool is_context_uri_Set() const;
    bool is_context_uri_Valid() const;

    QMap<QString, QJsonValue> getOffset() const;
    void setOffset(const QMap<QString, QJsonValue> &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    qint32 getPositionMs() const;
    void setPositionMs(const qint32 &position_ms);
    bool is_position_ms_Set() const;
    bool is_position_ms_Valid() const;

    QList<QString> getUris() const;
    void setUris(const QList<QString> &uris);
    bool is_uris_Set() const;
    bool is_uris_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_context_uri;
    bool m_context_uri_isSet;
    bool m_context_uri_isValid;

    QMap<QString, QJsonValue> m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    qint32 m_position_ms;
    bool m_position_ms_isSet;
    bool m_position_ms_isValid;

    QList<QString> m_uris;
    bool m_uris_isSet;
    bool m_uris_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStart_a_users_playback_request)

#endif // OAIStart_a_users_playback_request_H
