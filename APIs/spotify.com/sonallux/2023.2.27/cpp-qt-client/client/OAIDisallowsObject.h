/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDisallowsObject.h
 *
 * 
 */

#ifndef OAIDisallowsObject_H
#define OAIDisallowsObject_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDisallowsObject : public OAIObject {
public:
    OAIDisallowsObject();
    OAIDisallowsObject(QString json);
    ~OAIDisallowsObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isInterruptingPlayback() const;
    void setInterruptingPlayback(const bool &interrupting_playback);
    bool is_interrupting_playback_Set() const;
    bool is_interrupting_playback_Valid() const;

    bool isPausing() const;
    void setPausing(const bool &pausing);
    bool is_pausing_Set() const;
    bool is_pausing_Valid() const;

    bool isResuming() const;
    void setResuming(const bool &resuming);
    bool is_resuming_Set() const;
    bool is_resuming_Valid() const;

    bool isSeeking() const;
    void setSeeking(const bool &seeking);
    bool is_seeking_Set() const;
    bool is_seeking_Valid() const;

    bool isSkippingNext() const;
    void setSkippingNext(const bool &skipping_next);
    bool is_skipping_next_Set() const;
    bool is_skipping_next_Valid() const;

    bool isSkippingPrev() const;
    void setSkippingPrev(const bool &skipping_prev);
    bool is_skipping_prev_Set() const;
    bool is_skipping_prev_Valid() const;

    bool isTogglingRepeatContext() const;
    void setTogglingRepeatContext(const bool &toggling_repeat_context);
    bool is_toggling_repeat_context_Set() const;
    bool is_toggling_repeat_context_Valid() const;

    bool isTogglingRepeatTrack() const;
    void setTogglingRepeatTrack(const bool &toggling_repeat_track);
    bool is_toggling_repeat_track_Set() const;
    bool is_toggling_repeat_track_Valid() const;

    bool isTogglingShuffle() const;
    void setTogglingShuffle(const bool &toggling_shuffle);
    bool is_toggling_shuffle_Set() const;
    bool is_toggling_shuffle_Valid() const;

    bool isTransferringPlayback() const;
    void setTransferringPlayback(const bool &transferring_playback);
    bool is_transferring_playback_Set() const;
    bool is_transferring_playback_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_interrupting_playback;
    bool m_interrupting_playback_isSet;
    bool m_interrupting_playback_isValid;

    bool m_pausing;
    bool m_pausing_isSet;
    bool m_pausing_isValid;

    bool m_resuming;
    bool m_resuming_isSet;
    bool m_resuming_isValid;

    bool m_seeking;
    bool m_seeking_isSet;
    bool m_seeking_isValid;

    bool m_skipping_next;
    bool m_skipping_next_isSet;
    bool m_skipping_next_isValid;

    bool m_skipping_prev;
    bool m_skipping_prev_isSet;
    bool m_skipping_prev_isValid;

    bool m_toggling_repeat_context;
    bool m_toggling_repeat_context_isSet;
    bool m_toggling_repeat_context_isValid;

    bool m_toggling_repeat_track;
    bool m_toggling_repeat_track_isSet;
    bool m_toggling_repeat_track_isValid;

    bool m_toggling_shuffle;
    bool m_toggling_shuffle_isSet;
    bool m_toggling_shuffle_isValid;

    bool m_transferring_playback;
    bool m_transferring_playback_isSet;
    bool m_transferring_playback_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDisallowsObject)

#endif // OAIDisallowsObject_H
