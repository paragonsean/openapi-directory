/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylistTrackObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylistTrackObject::OAIPlaylistTrackObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylistTrackObject::OAIPlaylistTrackObject() {
    this->initializeModel();
}

OAIPlaylistTrackObject::~OAIPlaylistTrackObject() {}

void OAIPlaylistTrackObject::initializeModel() {

    m_added_at_isSet = false;
    m_added_at_isValid = false;

    m_added_by_isSet = false;
    m_added_by_isValid = false;

    m_is_local_isSet = false;
    m_is_local_isValid = false;

    m_track_isSet = false;
    m_track_isValid = false;
}

void OAIPlaylistTrackObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylistTrackObject::fromJsonObject(QJsonObject json) {

    m_added_at_isValid = ::OpenAPI::fromJsonValue(m_added_at, json[QString("added_at")]);
    m_added_at_isSet = !json[QString("added_at")].isNull() && m_added_at_isValid;

    m_added_by_isValid = ::OpenAPI::fromJsonValue(m_added_by, json[QString("added_by")]);
    m_added_by_isSet = !json[QString("added_by")].isNull() && m_added_by_isValid;

    m_is_local_isValid = ::OpenAPI::fromJsonValue(m_is_local, json[QString("is_local")]);
    m_is_local_isSet = !json[QString("is_local")].isNull() && m_is_local_isValid;

    m_track_isValid = ::OpenAPI::fromJsonValue(m_track, json[QString("track")]);
    m_track_isSet = !json[QString("track")].isNull() && m_track_isValid;
}

QString OAIPlaylistTrackObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylistTrackObject::asJsonObject() const {
    QJsonObject obj;
    if (m_added_at_isSet) {
        obj.insert(QString("added_at"), ::OpenAPI::toJsonValue(m_added_at));
    }
    if (m_added_by.isSet()) {
        obj.insert(QString("added_by"), ::OpenAPI::toJsonValue(m_added_by));
    }
    if (m_is_local_isSet) {
        obj.insert(QString("is_local"), ::OpenAPI::toJsonValue(m_is_local));
    }
    if (m_track.isSet()) {
        obj.insert(QString("track"), ::OpenAPI::toJsonValue(m_track));
    }
    return obj;
}

QDateTime OAIPlaylistTrackObject::getAddedAt() const {
    return m_added_at;
}
void OAIPlaylistTrackObject::setAddedAt(const QDateTime &added_at) {
    m_added_at = added_at;
    m_added_at_isSet = true;
}

bool OAIPlaylistTrackObject::is_added_at_Set() const{
    return m_added_at_isSet;
}

bool OAIPlaylistTrackObject::is_added_at_Valid() const{
    return m_added_at_isValid;
}

OAIPlaylistUserObject OAIPlaylistTrackObject::getAddedBy() const {
    return m_added_by;
}
void OAIPlaylistTrackObject::setAddedBy(const OAIPlaylistUserObject &added_by) {
    m_added_by = added_by;
    m_added_by_isSet = true;
}

bool OAIPlaylistTrackObject::is_added_by_Set() const{
    return m_added_by_isSet;
}

bool OAIPlaylistTrackObject::is_added_by_Valid() const{
    return m_added_by_isValid;
}

bool OAIPlaylistTrackObject::isIsLocal() const {
    return m_is_local;
}
void OAIPlaylistTrackObject::setIsLocal(const bool &is_local) {
    m_is_local = is_local;
    m_is_local_isSet = true;
}

bool OAIPlaylistTrackObject::is_is_local_Set() const{
    return m_is_local_isSet;
}

bool OAIPlaylistTrackObject::is_is_local_Valid() const{
    return m_is_local_isValid;
}

OAIPlaylistTrackObject_track OAIPlaylistTrackObject::getTrack() const {
    return m_track;
}
void OAIPlaylistTrackObject::setTrack(const OAIPlaylistTrackObject_track &track) {
    m_track = track;
    m_track_isSet = true;
}

bool OAIPlaylistTrackObject::is_track_Set() const{
    return m_track_isSet;
}

bool OAIPlaylistTrackObject::is_track_Valid() const{
    return m_track_isValid;
}

bool OAIPlaylistTrackObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylistTrackObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
