/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISegmentObject.h
 *
 * 
 */

#ifndef OAISegmentObject_H
#define OAISegmentObject_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISegmentObject : public OAIObject {
public:
    OAISegmentObject();
    OAISegmentObject(QString json);
    ~OAISegmentObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getConfidence() const;
    void setConfidence(const double &confidence);
    bool is_confidence_Set() const;
    bool is_confidence_Valid() const;

    double getDuration() const;
    void setDuration(const double &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    double getLoudnessEnd() const;
    void setLoudnessEnd(const double &loudness_end);
    bool is_loudness_end_Set() const;
    bool is_loudness_end_Valid() const;

    double getLoudnessMax() const;
    void setLoudnessMax(const double &loudness_max);
    bool is_loudness_max_Set() const;
    bool is_loudness_max_Valid() const;

    double getLoudnessMaxTime() const;
    void setLoudnessMaxTime(const double &loudness_max_time);
    bool is_loudness_max_time_Set() const;
    bool is_loudness_max_time_Valid() const;

    double getLoudnessStart() const;
    void setLoudnessStart(const double &loudness_start);
    bool is_loudness_start_Set() const;
    bool is_loudness_start_Valid() const;

    QList<double> getPitches() const;
    void setPitches(const QList<double> &pitches);
    bool is_pitches_Set() const;
    bool is_pitches_Valid() const;

    double getStart() const;
    void setStart(const double &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    QList<double> getTimbre() const;
    void setTimbre(const QList<double> &timbre);
    bool is_timbre_Set() const;
    bool is_timbre_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_confidence;
    bool m_confidence_isSet;
    bool m_confidence_isValid;

    double m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    double m_loudness_end;
    bool m_loudness_end_isSet;
    bool m_loudness_end_isValid;

    double m_loudness_max;
    bool m_loudness_max_isSet;
    bool m_loudness_max_isValid;

    double m_loudness_max_time;
    bool m_loudness_max_time_isSet;
    bool m_loudness_max_time_isValid;

    double m_loudness_start;
    bool m_loudness_start_isSet;
    bool m_loudness_start_isValid;

    QList<double> m_pitches;
    bool m_pitches_isSet;
    bool m_pitches_isValid;

    double m_start;
    bool m_start_isSet;
    bool m_start_isValid;

    QList<double> m_timbre;
    bool m_timbre_isSet;
    bool m_timbre_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISegmentObject)

#endif // OAISegmentObject_H
