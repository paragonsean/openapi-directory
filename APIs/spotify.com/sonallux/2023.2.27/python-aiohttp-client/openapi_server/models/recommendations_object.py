# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommendation_seed_object import RecommendationSeedObject
from openapi_server.models.track_object import TrackObject
from openapi_server import util


class RecommendationsObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, seeds: List[RecommendationSeedObject]=None, tracks: List[TrackObject]=None):
        """RecommendationsObject - a model defined in OpenAPI

        :param seeds: The seeds of this RecommendationsObject.
        :param tracks: The tracks of this RecommendationsObject.
        """
        self.openapi_types = {
            'seeds': List[RecommendationSeedObject],
            'tracks': List[TrackObject]
        }

        self.attribute_map = {
            'seeds': 'seeds',
            'tracks': 'tracks'
        }

        self._seeds = seeds
        self._tracks = tracks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationsObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationsObject of this RecommendationsObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def seeds(self):
        """Gets the seeds of this RecommendationsObject.

        An array of recommendation seed objects. 

        :return: The seeds of this RecommendationsObject.
        :rtype: List[RecommendationSeedObject]
        """
        return self._seeds

    @seeds.setter
    def seeds(self, seeds):
        """Sets the seeds of this RecommendationsObject.

        An array of recommendation seed objects. 

        :param seeds: The seeds of this RecommendationsObject.
        :type seeds: List[RecommendationSeedObject]
        """
        if seeds is None:
            raise ValueError("Invalid value for `seeds`, must not be `None`")

        self._seeds = seeds

    @property
    def tracks(self):
        """Gets the tracks of this RecommendationsObject.

        An array of track objects ordered according to the parameters supplied. 

        :return: The tracks of this RecommendationsObject.
        :rtype: List[TrackObject]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this RecommendationsObject.

        An array of track objects ordered according to the parameters supplied. 

        :param tracks: The tracks of this RecommendationsObject.
        :type tracks: List[TrackObject]
        """
        if tracks is None:
            raise ValueError("Invalid value for `tracks`, must not be `None`")

        self._tracks = tracks
