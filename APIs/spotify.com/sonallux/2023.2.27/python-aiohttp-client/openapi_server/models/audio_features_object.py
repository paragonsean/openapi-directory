# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioFeaturesObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acousticness: float=None, analysis_url: str=None, danceability: float=None, duration_ms: int=None, energy: float=None, id: str=None, instrumentalness: float=None, key: int=None, liveness: float=None, loudness: float=None, mode: int=None, speechiness: float=None, tempo: float=None, time_signature: int=None, track_href: str=None, type: str=None, uri: str=None, valence: float=None):
        """AudioFeaturesObject - a model defined in OpenAPI

        :param acousticness: The acousticness of this AudioFeaturesObject.
        :param analysis_url: The analysis_url of this AudioFeaturesObject.
        :param danceability: The danceability of this AudioFeaturesObject.
        :param duration_ms: The duration_ms of this AudioFeaturesObject.
        :param energy: The energy of this AudioFeaturesObject.
        :param id: The id of this AudioFeaturesObject.
        :param instrumentalness: The instrumentalness of this AudioFeaturesObject.
        :param key: The key of this AudioFeaturesObject.
        :param liveness: The liveness of this AudioFeaturesObject.
        :param loudness: The loudness of this AudioFeaturesObject.
        :param mode: The mode of this AudioFeaturesObject.
        :param speechiness: The speechiness of this AudioFeaturesObject.
        :param tempo: The tempo of this AudioFeaturesObject.
        :param time_signature: The time_signature of this AudioFeaturesObject.
        :param track_href: The track_href of this AudioFeaturesObject.
        :param type: The type of this AudioFeaturesObject.
        :param uri: The uri of this AudioFeaturesObject.
        :param valence: The valence of this AudioFeaturesObject.
        """
        self.openapi_types = {
            'acousticness': float,
            'analysis_url': str,
            'danceability': float,
            'duration_ms': int,
            'energy': float,
            'id': str,
            'instrumentalness': float,
            'key': int,
            'liveness': float,
            'loudness': float,
            'mode': int,
            'speechiness': float,
            'tempo': float,
            'time_signature': int,
            'track_href': str,
            'type': str,
            'uri': str,
            'valence': float
        }

        self.attribute_map = {
            'acousticness': 'acousticness',
            'analysis_url': 'analysis_url',
            'danceability': 'danceability',
            'duration_ms': 'duration_ms',
            'energy': 'energy',
            'id': 'id',
            'instrumentalness': 'instrumentalness',
            'key': 'key',
            'liveness': 'liveness',
            'loudness': 'loudness',
            'mode': 'mode',
            'speechiness': 'speechiness',
            'tempo': 'tempo',
            'time_signature': 'time_signature',
            'track_href': 'track_href',
            'type': 'type',
            'uri': 'uri',
            'valence': 'valence'
        }

        self._acousticness = acousticness
        self._analysis_url = analysis_url
        self._danceability = danceability
        self._duration_ms = duration_ms
        self._energy = energy
        self._id = id
        self._instrumentalness = instrumentalness
        self._key = key
        self._liveness = liveness
        self._loudness = loudness
        self._mode = mode
        self._speechiness = speechiness
        self._tempo = tempo
        self._time_signature = time_signature
        self._track_href = track_href
        self._type = type
        self._uri = uri
        self._valence = valence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioFeaturesObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioFeaturesObject of this AudioFeaturesObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acousticness(self):
        """Gets the acousticness of this AudioFeaturesObject.

        A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. 

        :return: The acousticness of this AudioFeaturesObject.
        :rtype: float
        """
        return self._acousticness

    @acousticness.setter
    def acousticness(self, acousticness):
        """Sets the acousticness of this AudioFeaturesObject.

        A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. 

        :param acousticness: The acousticness of this AudioFeaturesObject.
        :type acousticness: float
        """
        if acousticness is not None and acousticness > 1:
            raise ValueError("Invalid value for `acousticness`, must be a value less than or equal to `1`")
        if acousticness is not None and acousticness < 0:
            raise ValueError("Invalid value for `acousticness`, must be a value greater than or equal to `0`")

        self._acousticness = acousticness

    @property
    def analysis_url(self):
        """Gets the analysis_url of this AudioFeaturesObject.

        A URL to access the full audio analysis of this track. An access token is required to access this data. 

        :return: The analysis_url of this AudioFeaturesObject.
        :rtype: str
        """
        return self._analysis_url

    @analysis_url.setter
    def analysis_url(self, analysis_url):
        """Sets the analysis_url of this AudioFeaturesObject.

        A URL to access the full audio analysis of this track. An access token is required to access this data. 

        :param analysis_url: The analysis_url of this AudioFeaturesObject.
        :type analysis_url: str
        """

        self._analysis_url = analysis_url

    @property
    def danceability(self):
        """Gets the danceability of this AudioFeaturesObject.

        Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. 

        :return: The danceability of this AudioFeaturesObject.
        :rtype: float
        """
        return self._danceability

    @danceability.setter
    def danceability(self, danceability):
        """Sets the danceability of this AudioFeaturesObject.

        Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. 

        :param danceability: The danceability of this AudioFeaturesObject.
        :type danceability: float
        """

        self._danceability = danceability

    @property
    def duration_ms(self):
        """Gets the duration_ms of this AudioFeaturesObject.

        The duration of the track in milliseconds. 

        :return: The duration_ms of this AudioFeaturesObject.
        :rtype: int
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this AudioFeaturesObject.

        The duration of the track in milliseconds. 

        :param duration_ms: The duration_ms of this AudioFeaturesObject.
        :type duration_ms: int
        """

        self._duration_ms = duration_ms

    @property
    def energy(self):
        """Gets the energy of this AudioFeaturesObject.

        Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. 

        :return: The energy of this AudioFeaturesObject.
        :rtype: float
        """
        return self._energy

    @energy.setter
    def energy(self, energy):
        """Sets the energy of this AudioFeaturesObject.

        Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. 

        :param energy: The energy of this AudioFeaturesObject.
        :type energy: float
        """

        self._energy = energy

    @property
    def id(self):
        """Gets the id of this AudioFeaturesObject.

        The Spotify ID for the track. 

        :return: The id of this AudioFeaturesObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AudioFeaturesObject.

        The Spotify ID for the track. 

        :param id: The id of this AudioFeaturesObject.
        :type id: str
        """

        self._id = id

    @property
    def instrumentalness(self):
        """Gets the instrumentalness of this AudioFeaturesObject.

        Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. 

        :return: The instrumentalness of this AudioFeaturesObject.
        :rtype: float
        """
        return self._instrumentalness

    @instrumentalness.setter
    def instrumentalness(self, instrumentalness):
        """Sets the instrumentalness of this AudioFeaturesObject.

        Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. 

        :param instrumentalness: The instrumentalness of this AudioFeaturesObject.
        :type instrumentalness: float
        """

        self._instrumentalness = instrumentalness

    @property
    def key(self):
        """Gets the key of this AudioFeaturesObject.

        The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. 

        :return: The key of this AudioFeaturesObject.
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this AudioFeaturesObject.

        The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. 

        :param key: The key of this AudioFeaturesObject.
        :type key: int
        """
        if key is not None and key > 11:
            raise ValueError("Invalid value for `key`, must be a value less than or equal to `11`")
        if key is not None and key < -1:
            raise ValueError("Invalid value for `key`, must be a value greater than or equal to `-1`")

        self._key = key

    @property
    def liveness(self):
        """Gets the liveness of this AudioFeaturesObject.

        Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live. 

        :return: The liveness of this AudioFeaturesObject.
        :rtype: float
        """
        return self._liveness

    @liveness.setter
    def liveness(self, liveness):
        """Sets the liveness of this AudioFeaturesObject.

        Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live. 

        :param liveness: The liveness of this AudioFeaturesObject.
        :type liveness: float
        """

        self._liveness = liveness

    @property
    def loudness(self):
        """Gets the loudness of this AudioFeaturesObject.

        The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 

        :return: The loudness of this AudioFeaturesObject.
        :rtype: float
        """
        return self._loudness

    @loudness.setter
    def loudness(self, loudness):
        """Sets the loudness of this AudioFeaturesObject.

        The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 

        :param loudness: The loudness of this AudioFeaturesObject.
        :type loudness: float
        """

        self._loudness = loudness

    @property
    def mode(self):
        """Gets the mode of this AudioFeaturesObject.

        Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 

        :return: The mode of this AudioFeaturesObject.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this AudioFeaturesObject.

        Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 

        :param mode: The mode of this AudioFeaturesObject.
        :type mode: int
        """

        self._mode = mode

    @property
    def speechiness(self):
        """Gets the speechiness of this AudioFeaturesObject.

        Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. 

        :return: The speechiness of this AudioFeaturesObject.
        :rtype: float
        """
        return self._speechiness

    @speechiness.setter
    def speechiness(self, speechiness):
        """Sets the speechiness of this AudioFeaturesObject.

        Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. 

        :param speechiness: The speechiness of this AudioFeaturesObject.
        :type speechiness: float
        """

        self._speechiness = speechiness

    @property
    def tempo(self):
        """Gets the tempo of this AudioFeaturesObject.

        The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 

        :return: The tempo of this AudioFeaturesObject.
        :rtype: float
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo):
        """Sets the tempo of this AudioFeaturesObject.

        The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 

        :param tempo: The tempo of this AudioFeaturesObject.
        :type tempo: float
        """

        self._tempo = tempo

    @property
    def time_signature(self):
        """Gets the time_signature of this AudioFeaturesObject.

        An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".

        :return: The time_signature of this AudioFeaturesObject.
        :rtype: int
        """
        return self._time_signature

    @time_signature.setter
    def time_signature(self, time_signature):
        """Sets the time_signature of this AudioFeaturesObject.

        An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".

        :param time_signature: The time_signature of this AudioFeaturesObject.
        :type time_signature: int
        """
        if time_signature is not None and time_signature > 7:
            raise ValueError("Invalid value for `time_signature`, must be a value less than or equal to `7`")
        if time_signature is not None and time_signature < 3:
            raise ValueError("Invalid value for `time_signature`, must be a value greater than or equal to `3`")

        self._time_signature = time_signature

    @property
    def track_href(self):
        """Gets the track_href of this AudioFeaturesObject.

        A link to the Web API endpoint providing full details of the track. 

        :return: The track_href of this AudioFeaturesObject.
        :rtype: str
        """
        return self._track_href

    @track_href.setter
    def track_href(self, track_href):
        """Sets the track_href of this AudioFeaturesObject.

        A link to the Web API endpoint providing full details of the track. 

        :param track_href: The track_href of this AudioFeaturesObject.
        :type track_href: str
        """

        self._track_href = track_href

    @property
    def type(self):
        """Gets the type of this AudioFeaturesObject.

        The object type. 

        :return: The type of this AudioFeaturesObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AudioFeaturesObject.

        The object type. 

        :param type: The type of this AudioFeaturesObject.
        :type type: str
        """
        allowed_values = ["audio_features"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this AudioFeaturesObject.

        The Spotify URI for the track. 

        :return: The uri of this AudioFeaturesObject.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AudioFeaturesObject.

        The Spotify URI for the track. 

        :param uri: The uri of this AudioFeaturesObject.
        :type uri: str
        """

        self._uri = uri

    @property
    def valence(self):
        """Gets the valence of this AudioFeaturesObject.

        A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). 

        :return: The valence of this AudioFeaturesObject.
        :rtype: float
        """
        return self._valence

    @valence.setter
    def valence(self, valence):
        """Sets the valence of this AudioFeaturesObject.

        A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). 

        :param valence: The valence of this AudioFeaturesObject.
        :type valence: float
        """
        if valence is not None and valence > 1:
            raise ValueError("Invalid value for `valence`, must be a value less than or equal to `1`")
        if valence is not None and valence < 0:
            raise ValueError("Invalid value for `valence`, must be a value greater than or equal to `0`")

        self._valence = valence
