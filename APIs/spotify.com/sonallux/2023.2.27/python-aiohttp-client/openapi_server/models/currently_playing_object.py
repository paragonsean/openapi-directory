# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.context_object import ContextObject
from openapi_server.models.currently_playing_context_object_item import CurrentlyPlayingContextObjectItem
from openapi_server import util


class CurrentlyPlayingObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: ContextObject=None, currently_playing_type: str=None, is_playing: bool=None, item: CurrentlyPlayingContextObjectItem=None, progress_ms: int=None, timestamp: int=None):
        """CurrentlyPlayingObject - a model defined in OpenAPI

        :param context: The context of this CurrentlyPlayingObject.
        :param currently_playing_type: The currently_playing_type of this CurrentlyPlayingObject.
        :param is_playing: The is_playing of this CurrentlyPlayingObject.
        :param item: The item of this CurrentlyPlayingObject.
        :param progress_ms: The progress_ms of this CurrentlyPlayingObject.
        :param timestamp: The timestamp of this CurrentlyPlayingObject.
        """
        self.openapi_types = {
            'context': ContextObject,
            'currently_playing_type': str,
            'is_playing': bool,
            'item': CurrentlyPlayingContextObjectItem,
            'progress_ms': int,
            'timestamp': int
        }

        self.attribute_map = {
            'context': 'context',
            'currently_playing_type': 'currently_playing_type',
            'is_playing': 'is_playing',
            'item': 'item',
            'progress_ms': 'progress_ms',
            'timestamp': 'timestamp'
        }

        self._context = context
        self._currently_playing_type = currently_playing_type
        self._is_playing = is_playing
        self._item = item
        self._progress_ms = progress_ms
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrentlyPlayingObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurrentlyPlayingObject of this CurrentlyPlayingObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this CurrentlyPlayingObject.

        A Context Object. Can be `null`.

        :return: The context of this CurrentlyPlayingObject.
        :rtype: ContextObject
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this CurrentlyPlayingObject.

        A Context Object. Can be `null`.

        :param context: The context of this CurrentlyPlayingObject.
        :type context: ContextObject
        """

        self._context = context

    @property
    def currently_playing_type(self):
        """Gets the currently_playing_type of this CurrentlyPlayingObject.

        The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`. 

        :return: The currently_playing_type of this CurrentlyPlayingObject.
        :rtype: str
        """
        return self._currently_playing_type

    @currently_playing_type.setter
    def currently_playing_type(self, currently_playing_type):
        """Sets the currently_playing_type of this CurrentlyPlayingObject.

        The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`. 

        :param currently_playing_type: The currently_playing_type of this CurrentlyPlayingObject.
        :type currently_playing_type: str
        """

        self._currently_playing_type = currently_playing_type

    @property
    def is_playing(self):
        """Gets the is_playing of this CurrentlyPlayingObject.

        If something is currently playing, return `true`.

        :return: The is_playing of this CurrentlyPlayingObject.
        :rtype: bool
        """
        return self._is_playing

    @is_playing.setter
    def is_playing(self, is_playing):
        """Sets the is_playing of this CurrentlyPlayingObject.

        If something is currently playing, return `true`.

        :param is_playing: The is_playing of this CurrentlyPlayingObject.
        :type is_playing: bool
        """

        self._is_playing = is_playing

    @property
    def item(self):
        """Gets the item of this CurrentlyPlayingObject.


        :return: The item of this CurrentlyPlayingObject.
        :rtype: CurrentlyPlayingContextObjectItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this CurrentlyPlayingObject.


        :param item: The item of this CurrentlyPlayingObject.
        :type item: CurrentlyPlayingContextObjectItem
        """

        self._item = item

    @property
    def progress_ms(self):
        """Gets the progress_ms of this CurrentlyPlayingObject.

        Progress into the currently playing track or episode. Can be `null`.

        :return: The progress_ms of this CurrentlyPlayingObject.
        :rtype: int
        """
        return self._progress_ms

    @progress_ms.setter
    def progress_ms(self, progress_ms):
        """Sets the progress_ms of this CurrentlyPlayingObject.

        Progress into the currently playing track or episode. Can be `null`.

        :param progress_ms: The progress_ms of this CurrentlyPlayingObject.
        :type progress_ms: int
        """

        self._progress_ms = progress_ms

    @property
    def timestamp(self):
        """Gets the timestamp of this CurrentlyPlayingObject.

        Unix Millisecond Timestamp when data was fetched

        :return: The timestamp of this CurrentlyPlayingObject.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this CurrentlyPlayingObject.

        Unix Millisecond Timestamp when data was fetched

        :param timestamp: The timestamp of this CurrentlyPlayingObject.
        :type timestamp: int
        """

        self._timestamp = timestamp
