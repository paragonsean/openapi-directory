# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioAnalysisObjectTrack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_channels: int=None, analysis_sample_rate: int=None, code_version: float=None, codestring: str=None, duration: float=None, echoprint_version: float=None, echoprintstring: str=None, end_of_fade_in: float=None, key: int=None, key_confidence: float=None, loudness: float=None, mode: int=None, mode_confidence: float=None, num_samples: int=None, offset_seconds: int=None, rhythm_version: float=None, rhythmstring: str=None, sample_md5: str=None, start_of_fade_out: float=None, synch_version: float=None, synchstring: str=None, tempo: float=None, tempo_confidence: float=None, time_signature: int=None, time_signature_confidence: float=None, window_seconds: int=None):
        """AudioAnalysisObjectTrack - a model defined in OpenAPI

        :param analysis_channels: The analysis_channels of this AudioAnalysisObjectTrack.
        :param analysis_sample_rate: The analysis_sample_rate of this AudioAnalysisObjectTrack.
        :param code_version: The code_version of this AudioAnalysisObjectTrack.
        :param codestring: The codestring of this AudioAnalysisObjectTrack.
        :param duration: The duration of this AudioAnalysisObjectTrack.
        :param echoprint_version: The echoprint_version of this AudioAnalysisObjectTrack.
        :param echoprintstring: The echoprintstring of this AudioAnalysisObjectTrack.
        :param end_of_fade_in: The end_of_fade_in of this AudioAnalysisObjectTrack.
        :param key: The key of this AudioAnalysisObjectTrack.
        :param key_confidence: The key_confidence of this AudioAnalysisObjectTrack.
        :param loudness: The loudness of this AudioAnalysisObjectTrack.
        :param mode: The mode of this AudioAnalysisObjectTrack.
        :param mode_confidence: The mode_confidence of this AudioAnalysisObjectTrack.
        :param num_samples: The num_samples of this AudioAnalysisObjectTrack.
        :param offset_seconds: The offset_seconds of this AudioAnalysisObjectTrack.
        :param rhythm_version: The rhythm_version of this AudioAnalysisObjectTrack.
        :param rhythmstring: The rhythmstring of this AudioAnalysisObjectTrack.
        :param sample_md5: The sample_md5 of this AudioAnalysisObjectTrack.
        :param start_of_fade_out: The start_of_fade_out of this AudioAnalysisObjectTrack.
        :param synch_version: The synch_version of this AudioAnalysisObjectTrack.
        :param synchstring: The synchstring of this AudioAnalysisObjectTrack.
        :param tempo: The tempo of this AudioAnalysisObjectTrack.
        :param tempo_confidence: The tempo_confidence of this AudioAnalysisObjectTrack.
        :param time_signature: The time_signature of this AudioAnalysisObjectTrack.
        :param time_signature_confidence: The time_signature_confidence of this AudioAnalysisObjectTrack.
        :param window_seconds: The window_seconds of this AudioAnalysisObjectTrack.
        """
        self.openapi_types = {
            'analysis_channels': int,
            'analysis_sample_rate': int,
            'code_version': float,
            'codestring': str,
            'duration': float,
            'echoprint_version': float,
            'echoprintstring': str,
            'end_of_fade_in': float,
            'key': int,
            'key_confidence': float,
            'loudness': float,
            'mode': int,
            'mode_confidence': float,
            'num_samples': int,
            'offset_seconds': int,
            'rhythm_version': float,
            'rhythmstring': str,
            'sample_md5': str,
            'start_of_fade_out': float,
            'synch_version': float,
            'synchstring': str,
            'tempo': float,
            'tempo_confidence': float,
            'time_signature': int,
            'time_signature_confidence': float,
            'window_seconds': int
        }

        self.attribute_map = {
            'analysis_channels': 'analysis_channels',
            'analysis_sample_rate': 'analysis_sample_rate',
            'code_version': 'code_version',
            'codestring': 'codestring',
            'duration': 'duration',
            'echoprint_version': 'echoprint_version',
            'echoprintstring': 'echoprintstring',
            'end_of_fade_in': 'end_of_fade_in',
            'key': 'key',
            'key_confidence': 'key_confidence',
            'loudness': 'loudness',
            'mode': 'mode',
            'mode_confidence': 'mode_confidence',
            'num_samples': 'num_samples',
            'offset_seconds': 'offset_seconds',
            'rhythm_version': 'rhythm_version',
            'rhythmstring': 'rhythmstring',
            'sample_md5': 'sample_md5',
            'start_of_fade_out': 'start_of_fade_out',
            'synch_version': 'synch_version',
            'synchstring': 'synchstring',
            'tempo': 'tempo',
            'tempo_confidence': 'tempo_confidence',
            'time_signature': 'time_signature',
            'time_signature_confidence': 'time_signature_confidence',
            'window_seconds': 'window_seconds'
        }

        self._analysis_channels = analysis_channels
        self._analysis_sample_rate = analysis_sample_rate
        self._code_version = code_version
        self._codestring = codestring
        self._duration = duration
        self._echoprint_version = echoprint_version
        self._echoprintstring = echoprintstring
        self._end_of_fade_in = end_of_fade_in
        self._key = key
        self._key_confidence = key_confidence
        self._loudness = loudness
        self._mode = mode
        self._mode_confidence = mode_confidence
        self._num_samples = num_samples
        self._offset_seconds = offset_seconds
        self._rhythm_version = rhythm_version
        self._rhythmstring = rhythmstring
        self._sample_md5 = sample_md5
        self._start_of_fade_out = start_of_fade_out
        self._synch_version = synch_version
        self._synchstring = synchstring
        self._tempo = tempo
        self._tempo_confidence = tempo_confidence
        self._time_signature = time_signature
        self._time_signature_confidence = time_signature_confidence
        self._window_seconds = window_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioAnalysisObjectTrack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioAnalysisObject_track of this AudioAnalysisObjectTrack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_channels(self):
        """Gets the analysis_channels of this AudioAnalysisObjectTrack.

        The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.

        :return: The analysis_channels of this AudioAnalysisObjectTrack.
        :rtype: int
        """
        return self._analysis_channels

    @analysis_channels.setter
    def analysis_channels(self, analysis_channels):
        """Sets the analysis_channels of this AudioAnalysisObjectTrack.

        The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.

        :param analysis_channels: The analysis_channels of this AudioAnalysisObjectTrack.
        :type analysis_channels: int
        """

        self._analysis_channels = analysis_channels

    @property
    def analysis_sample_rate(self):
        """Gets the analysis_sample_rate of this AudioAnalysisObjectTrack.

        The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.

        :return: The analysis_sample_rate of this AudioAnalysisObjectTrack.
        :rtype: int
        """
        return self._analysis_sample_rate

    @analysis_sample_rate.setter
    def analysis_sample_rate(self, analysis_sample_rate):
        """Sets the analysis_sample_rate of this AudioAnalysisObjectTrack.

        The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.

        :param analysis_sample_rate: The analysis_sample_rate of this AudioAnalysisObjectTrack.
        :type analysis_sample_rate: int
        """

        self._analysis_sample_rate = analysis_sample_rate

    @property
    def code_version(self):
        """Gets the code_version of this AudioAnalysisObjectTrack.

        A version number for the Echo Nest Musical Fingerprint format used in the codestring field.

        :return: The code_version of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._code_version

    @code_version.setter
    def code_version(self, code_version):
        """Sets the code_version of this AudioAnalysisObjectTrack.

        A version number for the Echo Nest Musical Fingerprint format used in the codestring field.

        :param code_version: The code_version of this AudioAnalysisObjectTrack.
        :type code_version: float
        """

        self._code_version = code_version

    @property
    def codestring(self):
        """Gets the codestring of this AudioAnalysisObjectTrack.

        An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.

        :return: The codestring of this AudioAnalysisObjectTrack.
        :rtype: str
        """
        return self._codestring

    @codestring.setter
    def codestring(self, codestring):
        """Sets the codestring of this AudioAnalysisObjectTrack.

        An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.

        :param codestring: The codestring of this AudioAnalysisObjectTrack.
        :type codestring: str
        """

        self._codestring = codestring

    @property
    def duration(self):
        """Gets the duration of this AudioAnalysisObjectTrack.

        Length of the track in seconds.

        :return: The duration of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this AudioAnalysisObjectTrack.

        Length of the track in seconds.

        :param duration: The duration of this AudioAnalysisObjectTrack.
        :type duration: float
        """

        self._duration = duration

    @property
    def echoprint_version(self):
        """Gets the echoprint_version of this AudioAnalysisObjectTrack.

        A version number for the EchoPrint format used in the echoprintstring field.

        :return: The echoprint_version of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._echoprint_version

    @echoprint_version.setter
    def echoprint_version(self, echoprint_version):
        """Sets the echoprint_version of this AudioAnalysisObjectTrack.

        A version number for the EchoPrint format used in the echoprintstring field.

        :param echoprint_version: The echoprint_version of this AudioAnalysisObjectTrack.
        :type echoprint_version: float
        """

        self._echoprint_version = echoprint_version

    @property
    def echoprintstring(self):
        """Gets the echoprintstring of this AudioAnalysisObjectTrack.

        An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.

        :return: The echoprintstring of this AudioAnalysisObjectTrack.
        :rtype: str
        """
        return self._echoprintstring

    @echoprintstring.setter
    def echoprintstring(self, echoprintstring):
        """Sets the echoprintstring of this AudioAnalysisObjectTrack.

        An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.

        :param echoprintstring: The echoprintstring of this AudioAnalysisObjectTrack.
        :type echoprintstring: str
        """

        self._echoprintstring = echoprintstring

    @property
    def end_of_fade_in(self):
        """Gets the end_of_fade_in of this AudioAnalysisObjectTrack.

        The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.

        :return: The end_of_fade_in of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._end_of_fade_in

    @end_of_fade_in.setter
    def end_of_fade_in(self, end_of_fade_in):
        """Sets the end_of_fade_in of this AudioAnalysisObjectTrack.

        The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.

        :param end_of_fade_in: The end_of_fade_in of this AudioAnalysisObjectTrack.
        :type end_of_fade_in: float
        """

        self._end_of_fade_in = end_of_fade_in

    @property
    def key(self):
        """Gets the key of this AudioAnalysisObjectTrack.

        The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. 

        :return: The key of this AudioAnalysisObjectTrack.
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this AudioAnalysisObjectTrack.

        The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. 

        :param key: The key of this AudioAnalysisObjectTrack.
        :type key: int
        """
        if key is not None and key > 11:
            raise ValueError("Invalid value for `key`, must be a value less than or equal to `11`")
        if key is not None and key < -1:
            raise ValueError("Invalid value for `key`, must be a value greater than or equal to `-1`")

        self._key = key

    @property
    def key_confidence(self):
        """Gets the key_confidence of this AudioAnalysisObjectTrack.

        The confidence, from 0.0 to 1.0, of the reliability of the `key`.

        :return: The key_confidence of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._key_confidence

    @key_confidence.setter
    def key_confidence(self, key_confidence):
        """Sets the key_confidence of this AudioAnalysisObjectTrack.

        The confidence, from 0.0 to 1.0, of the reliability of the `key`.

        :param key_confidence: The key_confidence of this AudioAnalysisObjectTrack.
        :type key_confidence: float
        """
        if key_confidence is not None and key_confidence > 1:
            raise ValueError("Invalid value for `key_confidence`, must be a value less than or equal to `1`")
        if key_confidence is not None and key_confidence < 0:
            raise ValueError("Invalid value for `key_confidence`, must be a value greater than or equal to `0`")

        self._key_confidence = key_confidence

    @property
    def loudness(self):
        """Gets the loudness of this AudioAnalysisObjectTrack.

        The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 

        :return: The loudness of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._loudness

    @loudness.setter
    def loudness(self, loudness):
        """Sets the loudness of this AudioAnalysisObjectTrack.

        The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 

        :param loudness: The loudness of this AudioAnalysisObjectTrack.
        :type loudness: float
        """

        self._loudness = loudness

    @property
    def mode(self):
        """Gets the mode of this AudioAnalysisObjectTrack.

        Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 

        :return: The mode of this AudioAnalysisObjectTrack.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this AudioAnalysisObjectTrack.

        Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 

        :param mode: The mode of this AudioAnalysisObjectTrack.
        :type mode: int
        """

        self._mode = mode

    @property
    def mode_confidence(self):
        """Gets the mode_confidence of this AudioAnalysisObjectTrack.

        The confidence, from 0.0 to 1.0, of the reliability of the `mode`.

        :return: The mode_confidence of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._mode_confidence

    @mode_confidence.setter
    def mode_confidence(self, mode_confidence):
        """Sets the mode_confidence of this AudioAnalysisObjectTrack.

        The confidence, from 0.0 to 1.0, of the reliability of the `mode`.

        :param mode_confidence: The mode_confidence of this AudioAnalysisObjectTrack.
        :type mode_confidence: float
        """
        if mode_confidence is not None and mode_confidence > 1:
            raise ValueError("Invalid value for `mode_confidence`, must be a value less than or equal to `1`")
        if mode_confidence is not None and mode_confidence < 0:
            raise ValueError("Invalid value for `mode_confidence`, must be a value greater than or equal to `0`")

        self._mode_confidence = mode_confidence

    @property
    def num_samples(self):
        """Gets the num_samples of this AudioAnalysisObjectTrack.

        The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.

        :return: The num_samples of this AudioAnalysisObjectTrack.
        :rtype: int
        """
        return self._num_samples

    @num_samples.setter
    def num_samples(self, num_samples):
        """Sets the num_samples of this AudioAnalysisObjectTrack.

        The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.

        :param num_samples: The num_samples of this AudioAnalysisObjectTrack.
        :type num_samples: int
        """

        self._num_samples = num_samples

    @property
    def offset_seconds(self):
        """Gets the offset_seconds of this AudioAnalysisObjectTrack.

        An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)

        :return: The offset_seconds of this AudioAnalysisObjectTrack.
        :rtype: int
        """
        return self._offset_seconds

    @offset_seconds.setter
    def offset_seconds(self, offset_seconds):
        """Sets the offset_seconds of this AudioAnalysisObjectTrack.

        An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)

        :param offset_seconds: The offset_seconds of this AudioAnalysisObjectTrack.
        :type offset_seconds: int
        """

        self._offset_seconds = offset_seconds

    @property
    def rhythm_version(self):
        """Gets the rhythm_version of this AudioAnalysisObjectTrack.

        A version number for the Rhythmstring used in the rhythmstring field.

        :return: The rhythm_version of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._rhythm_version

    @rhythm_version.setter
    def rhythm_version(self, rhythm_version):
        """Sets the rhythm_version of this AudioAnalysisObjectTrack.

        A version number for the Rhythmstring used in the rhythmstring field.

        :param rhythm_version: The rhythm_version of this AudioAnalysisObjectTrack.
        :type rhythm_version: float
        """

        self._rhythm_version = rhythm_version

    @property
    def rhythmstring(self):
        """Gets the rhythmstring of this AudioAnalysisObjectTrack.

        A Rhythmstring for this track. The format of this string is similar to the Synchstring.

        :return: The rhythmstring of this AudioAnalysisObjectTrack.
        :rtype: str
        """
        return self._rhythmstring

    @rhythmstring.setter
    def rhythmstring(self, rhythmstring):
        """Sets the rhythmstring of this AudioAnalysisObjectTrack.

        A Rhythmstring for this track. The format of this string is similar to the Synchstring.

        :param rhythmstring: The rhythmstring of this AudioAnalysisObjectTrack.
        :type rhythmstring: str
        """

        self._rhythmstring = rhythmstring

    @property
    def sample_md5(self):
        """Gets the sample_md5 of this AudioAnalysisObjectTrack.

        This field will always contain the empty string.

        :return: The sample_md5 of this AudioAnalysisObjectTrack.
        :rtype: str
        """
        return self._sample_md5

    @sample_md5.setter
    def sample_md5(self, sample_md5):
        """Sets the sample_md5 of this AudioAnalysisObjectTrack.

        This field will always contain the empty string.

        :param sample_md5: The sample_md5 of this AudioAnalysisObjectTrack.
        :type sample_md5: str
        """

        self._sample_md5 = sample_md5

    @property
    def start_of_fade_out(self):
        """Gets the start_of_fade_out of this AudioAnalysisObjectTrack.

        The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.

        :return: The start_of_fade_out of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._start_of_fade_out

    @start_of_fade_out.setter
    def start_of_fade_out(self, start_of_fade_out):
        """Sets the start_of_fade_out of this AudioAnalysisObjectTrack.

        The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.

        :param start_of_fade_out: The start_of_fade_out of this AudioAnalysisObjectTrack.
        :type start_of_fade_out: float
        """

        self._start_of_fade_out = start_of_fade_out

    @property
    def synch_version(self):
        """Gets the synch_version of this AudioAnalysisObjectTrack.

        A version number for the Synchstring used in the synchstring field.

        :return: The synch_version of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._synch_version

    @synch_version.setter
    def synch_version(self, synch_version):
        """Sets the synch_version of this AudioAnalysisObjectTrack.

        A version number for the Synchstring used in the synchstring field.

        :param synch_version: The synch_version of this AudioAnalysisObjectTrack.
        :type synch_version: float
        """

        self._synch_version = synch_version

    @property
    def synchstring(self):
        """Gets the synchstring of this AudioAnalysisObjectTrack.

        A [Synchstring](https://github.com/echonest/synchdata) for this track.

        :return: The synchstring of this AudioAnalysisObjectTrack.
        :rtype: str
        """
        return self._synchstring

    @synchstring.setter
    def synchstring(self, synchstring):
        """Sets the synchstring of this AudioAnalysisObjectTrack.

        A [Synchstring](https://github.com/echonest/synchdata) for this track.

        :param synchstring: The synchstring of this AudioAnalysisObjectTrack.
        :type synchstring: str
        """

        self._synchstring = synchstring

    @property
    def tempo(self):
        """Gets the tempo of this AudioAnalysisObjectTrack.

        The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 

        :return: The tempo of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo):
        """Sets the tempo of this AudioAnalysisObjectTrack.

        The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 

        :param tempo: The tempo of this AudioAnalysisObjectTrack.
        :type tempo: float
        """

        self._tempo = tempo

    @property
    def tempo_confidence(self):
        """Gets the tempo_confidence of this AudioAnalysisObjectTrack.

        The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.

        :return: The tempo_confidence of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._tempo_confidence

    @tempo_confidence.setter
    def tempo_confidence(self, tempo_confidence):
        """Sets the tempo_confidence of this AudioAnalysisObjectTrack.

        The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.

        :param tempo_confidence: The tempo_confidence of this AudioAnalysisObjectTrack.
        :type tempo_confidence: float
        """
        if tempo_confidence is not None and tempo_confidence > 1:
            raise ValueError("Invalid value for `tempo_confidence`, must be a value less than or equal to `1`")
        if tempo_confidence is not None and tempo_confidence < 0:
            raise ValueError("Invalid value for `tempo_confidence`, must be a value greater than or equal to `0`")

        self._tempo_confidence = tempo_confidence

    @property
    def time_signature(self):
        """Gets the time_signature of this AudioAnalysisObjectTrack.

        An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".

        :return: The time_signature of this AudioAnalysisObjectTrack.
        :rtype: int
        """
        return self._time_signature

    @time_signature.setter
    def time_signature(self, time_signature):
        """Sets the time_signature of this AudioAnalysisObjectTrack.

        An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".

        :param time_signature: The time_signature of this AudioAnalysisObjectTrack.
        :type time_signature: int
        """
        if time_signature is not None and time_signature > 7:
            raise ValueError("Invalid value for `time_signature`, must be a value less than or equal to `7`")
        if time_signature is not None and time_signature < 3:
            raise ValueError("Invalid value for `time_signature`, must be a value greater than or equal to `3`")

        self._time_signature = time_signature

    @property
    def time_signature_confidence(self):
        """Gets the time_signature_confidence of this AudioAnalysisObjectTrack.

        The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.

        :return: The time_signature_confidence of this AudioAnalysisObjectTrack.
        :rtype: float
        """
        return self._time_signature_confidence

    @time_signature_confidence.setter
    def time_signature_confidence(self, time_signature_confidence):
        """Sets the time_signature_confidence of this AudioAnalysisObjectTrack.

        The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.

        :param time_signature_confidence: The time_signature_confidence of this AudioAnalysisObjectTrack.
        :type time_signature_confidence: float
        """
        if time_signature_confidence is not None and time_signature_confidence > 1:
            raise ValueError("Invalid value for `time_signature_confidence`, must be a value less than or equal to `1`")
        if time_signature_confidence is not None and time_signature_confidence < 0:
            raise ValueError("Invalid value for `time_signature_confidence`, must be a value greater than or equal to `0`")

        self._time_signature_confidence = time_signature_confidence

    @property
    def window_seconds(self):
        """Gets the window_seconds of this AudioAnalysisObjectTrack.

        The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)

        :return: The window_seconds of this AudioAnalysisObjectTrack.
        :rtype: int
        """
        return self._window_seconds

    @window_seconds.setter
    def window_seconds(self, window_seconds):
        """Sets the window_seconds of this AudioAnalysisObjectTrack.

        The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)

        :param window_seconds: The window_seconds of this AudioAnalysisObjectTrack.
        :type window_seconds: int
        """

        self._window_seconds = window_seconds
