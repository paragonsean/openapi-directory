# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisallowsObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interrupting_playback: bool=None, pausing: bool=None, resuming: bool=None, seeking: bool=None, skipping_next: bool=None, skipping_prev: bool=None, toggling_repeat_context: bool=None, toggling_repeat_track: bool=None, toggling_shuffle: bool=None, transferring_playback: bool=None):
        """DisallowsObject - a model defined in OpenAPI

        :param interrupting_playback: The interrupting_playback of this DisallowsObject.
        :param pausing: The pausing of this DisallowsObject.
        :param resuming: The resuming of this DisallowsObject.
        :param seeking: The seeking of this DisallowsObject.
        :param skipping_next: The skipping_next of this DisallowsObject.
        :param skipping_prev: The skipping_prev of this DisallowsObject.
        :param toggling_repeat_context: The toggling_repeat_context of this DisallowsObject.
        :param toggling_repeat_track: The toggling_repeat_track of this DisallowsObject.
        :param toggling_shuffle: The toggling_shuffle of this DisallowsObject.
        :param transferring_playback: The transferring_playback of this DisallowsObject.
        """
        self.openapi_types = {
            'interrupting_playback': bool,
            'pausing': bool,
            'resuming': bool,
            'seeking': bool,
            'skipping_next': bool,
            'skipping_prev': bool,
            'toggling_repeat_context': bool,
            'toggling_repeat_track': bool,
            'toggling_shuffle': bool,
            'transferring_playback': bool
        }

        self.attribute_map = {
            'interrupting_playback': 'interrupting_playback',
            'pausing': 'pausing',
            'resuming': 'resuming',
            'seeking': 'seeking',
            'skipping_next': 'skipping_next',
            'skipping_prev': 'skipping_prev',
            'toggling_repeat_context': 'toggling_repeat_context',
            'toggling_repeat_track': 'toggling_repeat_track',
            'toggling_shuffle': 'toggling_shuffle',
            'transferring_playback': 'transferring_playback'
        }

        self._interrupting_playback = interrupting_playback
        self._pausing = pausing
        self._resuming = resuming
        self._seeking = seeking
        self._skipping_next = skipping_next
        self._skipping_prev = skipping_prev
        self._toggling_repeat_context = toggling_repeat_context
        self._toggling_repeat_track = toggling_repeat_track
        self._toggling_shuffle = toggling_shuffle
        self._transferring_playback = transferring_playback

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisallowsObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisallowsObject of this DisallowsObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interrupting_playback(self):
        """Gets the interrupting_playback of this DisallowsObject.

        Interrupting playback. Optional field.

        :return: The interrupting_playback of this DisallowsObject.
        :rtype: bool
        """
        return self._interrupting_playback

    @interrupting_playback.setter
    def interrupting_playback(self, interrupting_playback):
        """Sets the interrupting_playback of this DisallowsObject.

        Interrupting playback. Optional field.

        :param interrupting_playback: The interrupting_playback of this DisallowsObject.
        :type interrupting_playback: bool
        """

        self._interrupting_playback = interrupting_playback

    @property
    def pausing(self):
        """Gets the pausing of this DisallowsObject.

        Pausing. Optional field.

        :return: The pausing of this DisallowsObject.
        :rtype: bool
        """
        return self._pausing

    @pausing.setter
    def pausing(self, pausing):
        """Sets the pausing of this DisallowsObject.

        Pausing. Optional field.

        :param pausing: The pausing of this DisallowsObject.
        :type pausing: bool
        """

        self._pausing = pausing

    @property
    def resuming(self):
        """Gets the resuming of this DisallowsObject.

        Resuming. Optional field.

        :return: The resuming of this DisallowsObject.
        :rtype: bool
        """
        return self._resuming

    @resuming.setter
    def resuming(self, resuming):
        """Sets the resuming of this DisallowsObject.

        Resuming. Optional field.

        :param resuming: The resuming of this DisallowsObject.
        :type resuming: bool
        """

        self._resuming = resuming

    @property
    def seeking(self):
        """Gets the seeking of this DisallowsObject.

        Seeking playback location. Optional field.

        :return: The seeking of this DisallowsObject.
        :rtype: bool
        """
        return self._seeking

    @seeking.setter
    def seeking(self, seeking):
        """Sets the seeking of this DisallowsObject.

        Seeking playback location. Optional field.

        :param seeking: The seeking of this DisallowsObject.
        :type seeking: bool
        """

        self._seeking = seeking

    @property
    def skipping_next(self):
        """Gets the skipping_next of this DisallowsObject.

        Skipping to the next context. Optional field.

        :return: The skipping_next of this DisallowsObject.
        :rtype: bool
        """
        return self._skipping_next

    @skipping_next.setter
    def skipping_next(self, skipping_next):
        """Sets the skipping_next of this DisallowsObject.

        Skipping to the next context. Optional field.

        :param skipping_next: The skipping_next of this DisallowsObject.
        :type skipping_next: bool
        """

        self._skipping_next = skipping_next

    @property
    def skipping_prev(self):
        """Gets the skipping_prev of this DisallowsObject.

        Skipping to the previous context. Optional field.

        :return: The skipping_prev of this DisallowsObject.
        :rtype: bool
        """
        return self._skipping_prev

    @skipping_prev.setter
    def skipping_prev(self, skipping_prev):
        """Sets the skipping_prev of this DisallowsObject.

        Skipping to the previous context. Optional field.

        :param skipping_prev: The skipping_prev of this DisallowsObject.
        :type skipping_prev: bool
        """

        self._skipping_prev = skipping_prev

    @property
    def toggling_repeat_context(self):
        """Gets the toggling_repeat_context of this DisallowsObject.

        Toggling repeat context flag. Optional field.

        :return: The toggling_repeat_context of this DisallowsObject.
        :rtype: bool
        """
        return self._toggling_repeat_context

    @toggling_repeat_context.setter
    def toggling_repeat_context(self, toggling_repeat_context):
        """Sets the toggling_repeat_context of this DisallowsObject.

        Toggling repeat context flag. Optional field.

        :param toggling_repeat_context: The toggling_repeat_context of this DisallowsObject.
        :type toggling_repeat_context: bool
        """

        self._toggling_repeat_context = toggling_repeat_context

    @property
    def toggling_repeat_track(self):
        """Gets the toggling_repeat_track of this DisallowsObject.

        Toggling repeat track flag. Optional field.

        :return: The toggling_repeat_track of this DisallowsObject.
        :rtype: bool
        """
        return self._toggling_repeat_track

    @toggling_repeat_track.setter
    def toggling_repeat_track(self, toggling_repeat_track):
        """Sets the toggling_repeat_track of this DisallowsObject.

        Toggling repeat track flag. Optional field.

        :param toggling_repeat_track: The toggling_repeat_track of this DisallowsObject.
        :type toggling_repeat_track: bool
        """

        self._toggling_repeat_track = toggling_repeat_track

    @property
    def toggling_shuffle(self):
        """Gets the toggling_shuffle of this DisallowsObject.

        Toggling shuffle flag. Optional field.

        :return: The toggling_shuffle of this DisallowsObject.
        :rtype: bool
        """
        return self._toggling_shuffle

    @toggling_shuffle.setter
    def toggling_shuffle(self, toggling_shuffle):
        """Sets the toggling_shuffle of this DisallowsObject.

        Toggling shuffle flag. Optional field.

        :param toggling_shuffle: The toggling_shuffle of this DisallowsObject.
        :type toggling_shuffle: bool
        """

        self._toggling_shuffle = toggling_shuffle

    @property
    def transferring_playback(self):
        """Gets the transferring_playback of this DisallowsObject.

        Transfering playback between devices. Optional field.

        :return: The transferring_playback of this DisallowsObject.
        :rtype: bool
        """
        return self._transferring_playback

    @transferring_playback.setter
    def transferring_playback(self, transferring_playback):
        """Sets the transferring_playback of this DisallowsObject.

        Transfering playback between devices. Optional field.

        :param transferring_playback: The transferring_playback of this DisallowsObject.
        :type transferring_playback: bool
        """

        self._transferring_playback = transferring_playback
