# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.explicit_content_settings_object import ExplicitContentSettingsObject
from openapi_server.models.external_url_object import ExternalUrlObject
from openapi_server.models.followers_object import FollowersObject
from openapi_server.models.image_object import ImageObject
from openapi_server import util


class PrivateUserObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, display_name: str=None, email: str=None, explicit_content: ExplicitContentSettingsObject=None, external_urls: ExternalUrlObject=None, followers: FollowersObject=None, href: str=None, id: str=None, images: List[ImageObject]=None, product: str=None, type: str=None, uri: str=None):
        """PrivateUserObject - a model defined in OpenAPI

        :param country: The country of this PrivateUserObject.
        :param display_name: The display_name of this PrivateUserObject.
        :param email: The email of this PrivateUserObject.
        :param explicit_content: The explicit_content of this PrivateUserObject.
        :param external_urls: The external_urls of this PrivateUserObject.
        :param followers: The followers of this PrivateUserObject.
        :param href: The href of this PrivateUserObject.
        :param id: The id of this PrivateUserObject.
        :param images: The images of this PrivateUserObject.
        :param product: The product of this PrivateUserObject.
        :param type: The type of this PrivateUserObject.
        :param uri: The uri of this PrivateUserObject.
        """
        self.openapi_types = {
            'country': str,
            'display_name': str,
            'email': str,
            'explicit_content': ExplicitContentSettingsObject,
            'external_urls': ExternalUrlObject,
            'followers': FollowersObject,
            'href': str,
            'id': str,
            'images': List[ImageObject],
            'product': str,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'country': 'country',
            'display_name': 'display_name',
            'email': 'email',
            'explicit_content': 'explicit_content',
            'external_urls': 'external_urls',
            'followers': 'followers',
            'href': 'href',
            'id': 'id',
            'images': 'images',
            'product': 'product',
            'type': 'type',
            'uri': 'uri'
        }

        self._country = country
        self._display_name = display_name
        self._email = email
        self._explicit_content = explicit_content
        self._external_urls = external_urls
        self._followers = followers
        self._href = href
        self._id = id
        self._images = images
        self._product = product
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateUserObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateUserObject of this PrivateUserObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this PrivateUserObject.

        The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 

        :return: The country of this PrivateUserObject.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PrivateUserObject.

        The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 

        :param country: The country of this PrivateUserObject.
        :type country: str
        """

        self._country = country

    @property
    def display_name(self):
        """Gets the display_name of this PrivateUserObject.

        The name displayed on the user's profile. `null` if not available. 

        :return: The display_name of this PrivateUserObject.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PrivateUserObject.

        The name displayed on the user's profile. `null` if not available. 

        :param display_name: The display_name of this PrivateUserObject.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this PrivateUserObject.

        The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 

        :return: The email of this PrivateUserObject.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PrivateUserObject.

        The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 

        :param email: The email of this PrivateUserObject.
        :type email: str
        """

        self._email = email

    @property
    def explicit_content(self):
        """Gets the explicit_content of this PrivateUserObject.

        The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 

        :return: The explicit_content of this PrivateUserObject.
        :rtype: ExplicitContentSettingsObject
        """
        return self._explicit_content

    @explicit_content.setter
    def explicit_content(self, explicit_content):
        """Sets the explicit_content of this PrivateUserObject.

        The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 

        :param explicit_content: The explicit_content of this PrivateUserObject.
        :type explicit_content: ExplicitContentSettingsObject
        """

        self._explicit_content = explicit_content

    @property
    def external_urls(self):
        """Gets the external_urls of this PrivateUserObject.

        Known external URLs for this user.

        :return: The external_urls of this PrivateUserObject.
        :rtype: ExternalUrlObject
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this PrivateUserObject.

        Known external URLs for this user.

        :param external_urls: The external_urls of this PrivateUserObject.
        :type external_urls: ExternalUrlObject
        """

        self._external_urls = external_urls

    @property
    def followers(self):
        """Gets the followers of this PrivateUserObject.

        Information about the followers of the user.

        :return: The followers of this PrivateUserObject.
        :rtype: FollowersObject
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this PrivateUserObject.

        Information about the followers of the user.

        :param followers: The followers of this PrivateUserObject.
        :type followers: FollowersObject
        """

        self._followers = followers

    @property
    def href(self):
        """Gets the href of this PrivateUserObject.

        A link to the Web API endpoint for this user. 

        :return: The href of this PrivateUserObject.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PrivateUserObject.

        A link to the Web API endpoint for this user. 

        :param href: The href of this PrivateUserObject.
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this PrivateUserObject.

        The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user. 

        :return: The id of this PrivateUserObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrivateUserObject.

        The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user. 

        :param id: The id of this PrivateUserObject.
        :type id: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this PrivateUserObject.

        The user's profile image.

        :return: The images of this PrivateUserObject.
        :rtype: List[ImageObject]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PrivateUserObject.

        The user's profile image.

        :param images: The images of this PrivateUserObject.
        :type images: List[ImageObject]
        """

        self._images = images

    @property
    def product(self):
        """Gets the product of this PrivateUserObject.

        The user's Spotify subscription level: \"premium\", \"free\", etc. (The subscription level \"open\" can be considered the same as \"free\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 

        :return: The product of this PrivateUserObject.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this PrivateUserObject.

        The user's Spotify subscription level: \"premium\", \"free\", etc. (The subscription level \"open\" can be considered the same as \"free\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 

        :param product: The product of this PrivateUserObject.
        :type product: str
        """

        self._product = product

    @property
    def type(self):
        """Gets the type of this PrivateUserObject.

        The object type: \"user\" 

        :return: The type of this PrivateUserObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PrivateUserObject.

        The object type: \"user\" 

        :param type: The type of this PrivateUserObject.
        :type type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this PrivateUserObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user. 

        :return: The uri of this PrivateUserObject.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PrivateUserObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user. 

        :param uri: The uri of this PrivateUserObject.
        :type uri: str
        """

        self._uri = uri
