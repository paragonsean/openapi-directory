# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartAUsersPlaybackRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_uri: str=None, offset: Dict[str, object]=None, position_ms: int=None, uris: List[str]=None):
        """StartAUsersPlaybackRequest - a model defined in OpenAPI

        :param context_uri: The context_uri of this StartAUsersPlaybackRequest.
        :param offset: The offset of this StartAUsersPlaybackRequest.
        :param position_ms: The position_ms of this StartAUsersPlaybackRequest.
        :param uris: The uris of this StartAUsersPlaybackRequest.
        """
        self.openapi_types = {
            'context_uri': str,
            'offset': Dict[str, object],
            'position_ms': int,
            'uris': List[str]
        }

        self.attribute_map = {
            'context_uri': 'context_uri',
            'offset': 'offset',
            'position_ms': 'position_ms',
            'uris': 'uris'
        }

        self._context_uri = context_uri
        self._offset = offset
        self._position_ms = position_ms
        self._uris = uris

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartAUsersPlaybackRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The start_a_users_playback_request of this StartAUsersPlaybackRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_uri(self):
        """Gets the context_uri of this StartAUsersPlaybackRequest.

        Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. `{context_uri:\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\"}` 

        :return: The context_uri of this StartAUsersPlaybackRequest.
        :rtype: str
        """
        return self._context_uri

    @context_uri.setter
    def context_uri(self, context_uri):
        """Sets the context_uri of this StartAUsersPlaybackRequest.

        Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. `{context_uri:\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\"}` 

        :param context_uri: The context_uri of this StartAUsersPlaybackRequest.
        :type context_uri: str
        """

        self._context_uri = context_uri

    @property
    def offset(self):
        """Gets the offset of this StartAUsersPlaybackRequest.

        Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \"position\" is zero based and can’t be negative. Example: `\"offset\": {\"position\": 5}` \"uri\" is a string representing the uri of the item to start at. Example: `\"offset\": {\"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\"}` 

        :return: The offset of this StartAUsersPlaybackRequest.
        :rtype: Dict[str, object]
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this StartAUsersPlaybackRequest.

        Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \"position\" is zero based and can’t be negative. Example: `\"offset\": {\"position\": 5}` \"uri\" is a string representing the uri of the item to start at. Example: `\"offset\": {\"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\"}` 

        :param offset: The offset of this StartAUsersPlaybackRequest.
        :type offset: Dict[str, object]
        """

        self._offset = offset

    @property
    def position_ms(self):
        """Gets the position_ms of this StartAUsersPlaybackRequest.

        Indicates from what position to start playback. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song. 

        :return: The position_ms of this StartAUsersPlaybackRequest.
        :rtype: int
        """
        return self._position_ms

    @position_ms.setter
    def position_ms(self, position_ms):
        """Sets the position_ms of this StartAUsersPlaybackRequest.

        Indicates from what position to start playback. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song. 

        :param position_ms: The position_ms of this StartAUsersPlaybackRequest.
        :type position_ms: int
        """

        self._position_ms = position_ms

    @property
    def uris(self):
        """Gets the uris of this StartAUsersPlaybackRequest.

        Optional. A JSON array of the Spotify track URIs to play. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]}` 

        :return: The uris of this StartAUsersPlaybackRequest.
        :rtype: List[str]
        """
        return self._uris

    @uris.setter
    def uris(self, uris):
        """Sets the uris of this StartAUsersPlaybackRequest.

        Optional. A JSON array of the Spotify track URIs to play. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]}` 

        :param uris: The uris of this StartAUsersPlaybackRequest.
        :type uris: List[str]
        """

        self._uris = uris
