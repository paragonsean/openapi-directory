# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_features_object import AudioFeaturesObject
from openapi_server import util


class GetSeveralAudioFeatures200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_features: List[AudioFeaturesObject]=None):
        """GetSeveralAudioFeatures200Response - a model defined in OpenAPI

        :param audio_features: The audio_features of this GetSeveralAudioFeatures200Response.
        """
        self.openapi_types = {
            'audio_features': List[AudioFeaturesObject]
        }

        self.attribute_map = {
            'audio_features': 'audio_features'
        }

        self._audio_features = audio_features

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSeveralAudioFeatures200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_several_audio_features_200_response of this GetSeveralAudioFeatures200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_features(self):
        """Gets the audio_features of this GetSeveralAudioFeatures200Response.


        :return: The audio_features of this GetSeveralAudioFeatures200Response.
        :rtype: List[AudioFeaturesObject]
        """
        return self._audio_features

    @audio_features.setter
    def audio_features(self, audio_features):
        """Sets the audio_features of this GetSeveralAudioFeatures200Response.


        :param audio_features: The audio_features of this GetSeveralAudioFeatures200Response.
        :type audio_features: List[AudioFeaturesObject]
        """
        if audio_features is None:
            raise ValueError("Invalid value for `audio_features`, must not be `None`")

        self._audio_features = audio_features
