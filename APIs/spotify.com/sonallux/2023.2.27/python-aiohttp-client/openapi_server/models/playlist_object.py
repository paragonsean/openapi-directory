# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_url_object import ExternalUrlObject
from openapi_server.models.followers_object import FollowersObject
from openapi_server.models.image_object import ImageObject
from openapi_server.models.paging_playlist_track_object import PagingPlaylistTrackObject
from openapi_server.models.playlist_owner_object import PlaylistOwnerObject
from openapi_server import util


class PlaylistObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collaborative: bool=None, description: str=None, external_urls: ExternalUrlObject=None, followers: FollowersObject=None, href: str=None, id: str=None, images: List[ImageObject]=None, name: str=None, owner: PlaylistOwnerObject=None, public: bool=None, snapshot_id: str=None, tracks: PagingPlaylistTrackObject=None, type: str=None, uri: str=None):
        """PlaylistObject - a model defined in OpenAPI

        :param collaborative: The collaborative of this PlaylistObject.
        :param description: The description of this PlaylistObject.
        :param external_urls: The external_urls of this PlaylistObject.
        :param followers: The followers of this PlaylistObject.
        :param href: The href of this PlaylistObject.
        :param id: The id of this PlaylistObject.
        :param images: The images of this PlaylistObject.
        :param name: The name of this PlaylistObject.
        :param owner: The owner of this PlaylistObject.
        :param public: The public of this PlaylistObject.
        :param snapshot_id: The snapshot_id of this PlaylistObject.
        :param tracks: The tracks of this PlaylistObject.
        :param type: The type of this PlaylistObject.
        :param uri: The uri of this PlaylistObject.
        """
        self.openapi_types = {
            'collaborative': bool,
            'description': str,
            'external_urls': ExternalUrlObject,
            'followers': FollowersObject,
            'href': str,
            'id': str,
            'images': List[ImageObject],
            'name': str,
            'owner': PlaylistOwnerObject,
            'public': bool,
            'snapshot_id': str,
            'tracks': PagingPlaylistTrackObject,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'collaborative': 'collaborative',
            'description': 'description',
            'external_urls': 'external_urls',
            'followers': 'followers',
            'href': 'href',
            'id': 'id',
            'images': 'images',
            'name': 'name',
            'owner': 'owner',
            'public': 'public',
            'snapshot_id': 'snapshot_id',
            'tracks': 'tracks',
            'type': 'type',
            'uri': 'uri'
        }

        self._collaborative = collaborative
        self._description = description
        self._external_urls = external_urls
        self._followers = followers
        self._href = href
        self._id = id
        self._images = images
        self._name = name
        self._owner = owner
        self._public = public
        self._snapshot_id = snapshot_id
        self._tracks = tracks
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaylistObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaylistObject of this PlaylistObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collaborative(self):
        """Gets the collaborative of this PlaylistObject.

        `true` if the owner allows other users to modify the playlist. 

        :return: The collaborative of this PlaylistObject.
        :rtype: bool
        """
        return self._collaborative

    @collaborative.setter
    def collaborative(self, collaborative):
        """Sets the collaborative of this PlaylistObject.

        `true` if the owner allows other users to modify the playlist. 

        :param collaborative: The collaborative of this PlaylistObject.
        :type collaborative: bool
        """

        self._collaborative = collaborative

    @property
    def description(self):
        """Gets the description of this PlaylistObject.

        The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`. 

        :return: The description of this PlaylistObject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlaylistObject.

        The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`. 

        :param description: The description of this PlaylistObject.
        :type description: str
        """

        self._description = description

    @property
    def external_urls(self):
        """Gets the external_urls of this PlaylistObject.

        Known external URLs for this playlist. 

        :return: The external_urls of this PlaylistObject.
        :rtype: ExternalUrlObject
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this PlaylistObject.

        Known external URLs for this playlist. 

        :param external_urls: The external_urls of this PlaylistObject.
        :type external_urls: ExternalUrlObject
        """

        self._external_urls = external_urls

    @property
    def followers(self):
        """Gets the followers of this PlaylistObject.

        Information about the followers of the playlist.

        :return: The followers of this PlaylistObject.
        :rtype: FollowersObject
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this PlaylistObject.

        Information about the followers of the playlist.

        :param followers: The followers of this PlaylistObject.
        :type followers: FollowersObject
        """

        self._followers = followers

    @property
    def href(self):
        """Gets the href of this PlaylistObject.

        A link to the Web API endpoint providing full details of the playlist. 

        :return: The href of this PlaylistObject.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PlaylistObject.

        A link to the Web API endpoint providing full details of the playlist. 

        :param href: The href of this PlaylistObject.
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this PlaylistObject.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 

        :return: The id of this PlaylistObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaylistObject.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 

        :param id: The id of this PlaylistObject.
        :type id: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this PlaylistObject.

        Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._ 

        :return: The images of this PlaylistObject.
        :rtype: List[ImageObject]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PlaylistObject.

        Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._ 

        :param images: The images of this PlaylistObject.
        :type images: List[ImageObject]
        """

        self._images = images

    @property
    def name(self):
        """Gets the name of this PlaylistObject.

        The name of the playlist. 

        :return: The name of this PlaylistObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlaylistObject.

        The name of the playlist. 

        :param name: The name of this PlaylistObject.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this PlaylistObject.

        The user who owns the playlist 

        :return: The owner of this PlaylistObject.
        :rtype: PlaylistOwnerObject
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this PlaylistObject.

        The user who owns the playlist 

        :param owner: The owner of this PlaylistObject.
        :type owner: PlaylistOwnerObject
        """

        self._owner = owner

    @property
    def public(self):
        """Gets the public of this PlaylistObject.

        The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists) 

        :return: The public of this PlaylistObject.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this PlaylistObject.

        The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists) 

        :param public: The public of this PlaylistObject.
        :type public: bool
        """

        self._public = public

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this PlaylistObject.

        The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version 

        :return: The snapshot_id of this PlaylistObject.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this PlaylistObject.

        The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version 

        :param snapshot_id: The snapshot_id of this PlaylistObject.
        :type snapshot_id: str
        """

        self._snapshot_id = snapshot_id

    @property
    def tracks(self):
        """Gets the tracks of this PlaylistObject.

        The tracks of the playlist. 

        :return: The tracks of this PlaylistObject.
        :rtype: PagingPlaylistTrackObject
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this PlaylistObject.

        The tracks of the playlist. 

        :param tracks: The tracks of this PlaylistObject.
        :type tracks: PagingPlaylistTrackObject
        """

        self._tracks = tracks

    @property
    def type(self):
        """Gets the type of this PlaylistObject.

        The object type: \"playlist\" 

        :return: The type of this PlaylistObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlaylistObject.

        The object type: \"playlist\" 

        :param type: The type of this PlaylistObject.
        :type type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this PlaylistObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 

        :return: The uri of this PlaylistObject.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PlaylistObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 

        :param uri: The uri of this PlaylistObject.
        :type uri: str
        """

        self._uri = uri
