# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.context_object import ContextObject
from openapi_server.models.currently_playing_context_object_item import CurrentlyPlayingContextObjectItem
from openapi_server.models.device_object import DeviceObject
from openapi_server.models.disallows_object import DisallowsObject
from openapi_server import util


class CurrentlyPlayingContextObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: DisallowsObject=None, context: ContextObject=None, currently_playing_type: str=None, device: DeviceObject=None, is_playing: bool=None, item: CurrentlyPlayingContextObjectItem=None, progress_ms: int=None, repeat_state: str=None, shuffle_state: bool=None, timestamp: int=None):
        """CurrentlyPlayingContextObject - a model defined in OpenAPI

        :param actions: The actions of this CurrentlyPlayingContextObject.
        :param context: The context of this CurrentlyPlayingContextObject.
        :param currently_playing_type: The currently_playing_type of this CurrentlyPlayingContextObject.
        :param device: The device of this CurrentlyPlayingContextObject.
        :param is_playing: The is_playing of this CurrentlyPlayingContextObject.
        :param item: The item of this CurrentlyPlayingContextObject.
        :param progress_ms: The progress_ms of this CurrentlyPlayingContextObject.
        :param repeat_state: The repeat_state of this CurrentlyPlayingContextObject.
        :param shuffle_state: The shuffle_state of this CurrentlyPlayingContextObject.
        :param timestamp: The timestamp of this CurrentlyPlayingContextObject.
        """
        self.openapi_types = {
            'actions': DisallowsObject,
            'context': ContextObject,
            'currently_playing_type': str,
            'device': DeviceObject,
            'is_playing': bool,
            'item': CurrentlyPlayingContextObjectItem,
            'progress_ms': int,
            'repeat_state': str,
            'shuffle_state': bool,
            'timestamp': int
        }

        self.attribute_map = {
            'actions': 'actions',
            'context': 'context',
            'currently_playing_type': 'currently_playing_type',
            'device': 'device',
            'is_playing': 'is_playing',
            'item': 'item',
            'progress_ms': 'progress_ms',
            'repeat_state': 'repeat_state',
            'shuffle_state': 'shuffle_state',
            'timestamp': 'timestamp'
        }

        self._actions = actions
        self._context = context
        self._currently_playing_type = currently_playing_type
        self._device = device
        self._is_playing = is_playing
        self._item = item
        self._progress_ms = progress_ms
        self._repeat_state = repeat_state
        self._shuffle_state = shuffle_state
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrentlyPlayingContextObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurrentlyPlayingContextObject of this CurrentlyPlayingContextObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this CurrentlyPlayingContextObject.

        Allows to update the user interface based on which playback actions are available within the current context. 

        :return: The actions of this CurrentlyPlayingContextObject.
        :rtype: DisallowsObject
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CurrentlyPlayingContextObject.

        Allows to update the user interface based on which playback actions are available within the current context. 

        :param actions: The actions of this CurrentlyPlayingContextObject.
        :type actions: DisallowsObject
        """

        self._actions = actions

    @property
    def context(self):
        """Gets the context of this CurrentlyPlayingContextObject.

        A Context Object. Can be `null`.

        :return: The context of this CurrentlyPlayingContextObject.
        :rtype: ContextObject
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this CurrentlyPlayingContextObject.

        A Context Object. Can be `null`.

        :param context: The context of this CurrentlyPlayingContextObject.
        :type context: ContextObject
        """

        self._context = context

    @property
    def currently_playing_type(self):
        """Gets the currently_playing_type of this CurrentlyPlayingContextObject.

        The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`. 

        :return: The currently_playing_type of this CurrentlyPlayingContextObject.
        :rtype: str
        """
        return self._currently_playing_type

    @currently_playing_type.setter
    def currently_playing_type(self, currently_playing_type):
        """Sets the currently_playing_type of this CurrentlyPlayingContextObject.

        The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`. 

        :param currently_playing_type: The currently_playing_type of this CurrentlyPlayingContextObject.
        :type currently_playing_type: str
        """

        self._currently_playing_type = currently_playing_type

    @property
    def device(self):
        """Gets the device of this CurrentlyPlayingContextObject.

        The device that is currently active. 

        :return: The device of this CurrentlyPlayingContextObject.
        :rtype: DeviceObject
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this CurrentlyPlayingContextObject.

        The device that is currently active. 

        :param device: The device of this CurrentlyPlayingContextObject.
        :type device: DeviceObject
        """

        self._device = device

    @property
    def is_playing(self):
        """Gets the is_playing of this CurrentlyPlayingContextObject.

        If something is currently playing, return `true`.

        :return: The is_playing of this CurrentlyPlayingContextObject.
        :rtype: bool
        """
        return self._is_playing

    @is_playing.setter
    def is_playing(self, is_playing):
        """Sets the is_playing of this CurrentlyPlayingContextObject.

        If something is currently playing, return `true`.

        :param is_playing: The is_playing of this CurrentlyPlayingContextObject.
        :type is_playing: bool
        """

        self._is_playing = is_playing

    @property
    def item(self):
        """Gets the item of this CurrentlyPlayingContextObject.


        :return: The item of this CurrentlyPlayingContextObject.
        :rtype: CurrentlyPlayingContextObjectItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this CurrentlyPlayingContextObject.


        :param item: The item of this CurrentlyPlayingContextObject.
        :type item: CurrentlyPlayingContextObjectItem
        """

        self._item = item

    @property
    def progress_ms(self):
        """Gets the progress_ms of this CurrentlyPlayingContextObject.

        Progress into the currently playing track or episode. Can be `null`.

        :return: The progress_ms of this CurrentlyPlayingContextObject.
        :rtype: int
        """
        return self._progress_ms

    @progress_ms.setter
    def progress_ms(self, progress_ms):
        """Sets the progress_ms of this CurrentlyPlayingContextObject.

        Progress into the currently playing track or episode. Can be `null`.

        :param progress_ms: The progress_ms of this CurrentlyPlayingContextObject.
        :type progress_ms: int
        """

        self._progress_ms = progress_ms

    @property
    def repeat_state(self):
        """Gets the repeat_state of this CurrentlyPlayingContextObject.

        off, track, context

        :return: The repeat_state of this CurrentlyPlayingContextObject.
        :rtype: str
        """
        return self._repeat_state

    @repeat_state.setter
    def repeat_state(self, repeat_state):
        """Sets the repeat_state of this CurrentlyPlayingContextObject.

        off, track, context

        :param repeat_state: The repeat_state of this CurrentlyPlayingContextObject.
        :type repeat_state: str
        """

        self._repeat_state = repeat_state

    @property
    def shuffle_state(self):
        """Gets the shuffle_state of this CurrentlyPlayingContextObject.

        If shuffle is on or off.

        :return: The shuffle_state of this CurrentlyPlayingContextObject.
        :rtype: bool
        """
        return self._shuffle_state

    @shuffle_state.setter
    def shuffle_state(self, shuffle_state):
        """Sets the shuffle_state of this CurrentlyPlayingContextObject.

        If shuffle is on or off.

        :param shuffle_state: The shuffle_state of this CurrentlyPlayingContextObject.
        :type shuffle_state: bool
        """

        self._shuffle_state = shuffle_state

    @property
    def timestamp(self):
        """Gets the timestamp of this CurrentlyPlayingContextObject.

        Unix Millisecond Timestamp when data was fetched.

        :return: The timestamp of this CurrentlyPlayingContextObject.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this CurrentlyPlayingContextObject.

        Unix Millisecond Timestamp when data was fetched.

        :param timestamp: The timestamp of this CurrentlyPlayingContextObject.
        :type timestamp: int
        """

        self._timestamp = timestamp
