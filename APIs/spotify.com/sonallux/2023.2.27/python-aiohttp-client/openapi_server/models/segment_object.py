# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SegmentObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, duration: float=None, loudness_end: float=None, loudness_max: float=None, loudness_max_time: float=None, loudness_start: float=None, pitches: List[float]=None, start: float=None, timbre: List[float]=None):
        """SegmentObject - a model defined in OpenAPI

        :param confidence: The confidence of this SegmentObject.
        :param duration: The duration of this SegmentObject.
        :param loudness_end: The loudness_end of this SegmentObject.
        :param loudness_max: The loudness_max of this SegmentObject.
        :param loudness_max_time: The loudness_max_time of this SegmentObject.
        :param loudness_start: The loudness_start of this SegmentObject.
        :param pitches: The pitches of this SegmentObject.
        :param start: The start of this SegmentObject.
        :param timbre: The timbre of this SegmentObject.
        """
        self.openapi_types = {
            'confidence': float,
            'duration': float,
            'loudness_end': float,
            'loudness_max': float,
            'loudness_max_time': float,
            'loudness_start': float,
            'pitches': List[float],
            'start': float,
            'timbre': List[float]
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'duration': 'duration',
            'loudness_end': 'loudness_end',
            'loudness_max': 'loudness_max',
            'loudness_max_time': 'loudness_max_time',
            'loudness_start': 'loudness_start',
            'pitches': 'pitches',
            'start': 'start',
            'timbre': 'timbre'
        }

        self._confidence = confidence
        self._duration = duration
        self._loudness_end = loudness_end
        self._loudness_max = loudness_max
        self._loudness_max_time = loudness_max_time
        self._loudness_start = loudness_start
        self._pitches = pitches
        self._start = start
        self._timbre = timbre

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentObject of this SegmentObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this SegmentObject.

        The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field. 

        :return: The confidence of this SegmentObject.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this SegmentObject.

        The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field. 

        :param confidence: The confidence of this SegmentObject.
        :type confidence: float
        """
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence

    @property
    def duration(self):
        """Gets the duration of this SegmentObject.

        The duration (in seconds) of the segment.

        :return: The duration of this SegmentObject.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SegmentObject.

        The duration (in seconds) of the segment.

        :param duration: The duration of this SegmentObject.
        :type duration: float
        """

        self._duration = duration

    @property
    def loudness_end(self):
        """Gets the loudness_end of this SegmentObject.

        The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment.

        :return: The loudness_end of this SegmentObject.
        :rtype: float
        """
        return self._loudness_end

    @loudness_end.setter
    def loudness_end(self, loudness_end):
        """Sets the loudness_end of this SegmentObject.

        The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment.

        :param loudness_end: The loudness_end of this SegmentObject.
        :type loudness_end: float
        """

        self._loudness_end = loudness_end

    @property
    def loudness_max(self):
        """Gets the loudness_max of this SegmentObject.

        The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.

        :return: The loudness_max of this SegmentObject.
        :rtype: float
        """
        return self._loudness_max

    @loudness_max.setter
    def loudness_max(self, loudness_max):
        """Sets the loudness_max of this SegmentObject.

        The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.

        :param loudness_max: The loudness_max of this SegmentObject.
        :type loudness_max: float
        """

        self._loudness_max = loudness_max

    @property
    def loudness_max_time(self):
        """Gets the loudness_max_time of this SegmentObject.

        The segment-relative offset of the segment peak loudness in seconds. Combined with `loudness_start` and `loudness_max`, these components can be used to desctibe the \"attack\" of the segment.

        :return: The loudness_max_time of this SegmentObject.
        :rtype: float
        """
        return self._loudness_max_time

    @loudness_max_time.setter
    def loudness_max_time(self, loudness_max_time):
        """Sets the loudness_max_time of this SegmentObject.

        The segment-relative offset of the segment peak loudness in seconds. Combined with `loudness_start` and `loudness_max`, these components can be used to desctibe the \"attack\" of the segment.

        :param loudness_max_time: The loudness_max_time of this SegmentObject.
        :type loudness_max_time: float
        """

        self._loudness_max_time = loudness_max_time

    @property
    def loudness_start(self):
        """Gets the loudness_start of this SegmentObject.

        The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.

        :return: The loudness_start of this SegmentObject.
        :rtype: float
        """
        return self._loudness_start

    @loudness_start.setter
    def loudness_start(self, loudness_start):
        """Sets the loudness_start of this SegmentObject.

        The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.

        :param loudness_start: The loudness_start of this SegmentObject.
        :type loudness_start: float
        """

        self._loudness_start = loudness_start

    @property
    def pitches(self):
        """Gets the pitches of this SegmentObject.

        Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).  Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0. As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies. ![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png) 

        :return: The pitches of this SegmentObject.
        :rtype: List[float]
        """
        return self._pitches

    @pitches.setter
    def pitches(self, pitches):
        """Sets the pitches of this SegmentObject.

        Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).  Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0. As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies. ![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png) 

        :param pitches: The pitches of this SegmentObject.
        :type pitches: List[float]
        """

        self._pitches = pitches

    @property
    def start(self):
        """Gets the start of this SegmentObject.

        The starting point (in seconds) of the segment.

        :return: The start of this SegmentObject.
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SegmentObject.

        The starting point (in seconds) of the segment.

        :param start: The start of this SegmentObject.
        :type start: float
        """

        self._start = start

    @property
    def timbre(self):
        """Gets the timbre of this SegmentObject.

        Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.  For completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments). ![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)  The actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other. 

        :return: The timbre of this SegmentObject.
        :rtype: List[float]
        """
        return self._timbre

    @timbre.setter
    def timbre(self, timbre):
        """Sets the timbre of this SegmentObject.

        Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.  For completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments). ![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)  The actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other. 

        :param timbre: The timbre of this SegmentObject.
        :type timbre: List[float]
        """

        self._timbre = timbre
