# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransferAUsersPlaybackRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_ids: List[str]=None, play: bool=None):
        """TransferAUsersPlaybackRequest - a model defined in OpenAPI

        :param device_ids: The device_ids of this TransferAUsersPlaybackRequest.
        :param play: The play of this TransferAUsersPlaybackRequest.
        """
        self.openapi_types = {
            'device_ids': List[str],
            'play': bool
        }

        self.attribute_map = {
            'device_ids': 'device_ids',
            'play': 'play'
        }

        self._device_ids = device_ids
        self._play = play

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferAUsersPlaybackRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The transfer_a_users_playback_request of this TransferAUsersPlaybackRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_ids(self):
        """Gets the device_ids of this TransferAUsersPlaybackRequest.

        A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:`{device_ids:[\"74ASZWbe4lXaubB36ztrGX\"]}`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_ 

        :return: The device_ids of this TransferAUsersPlaybackRequest.
        :rtype: List[str]
        """
        return self._device_ids

    @device_ids.setter
    def device_ids(self, device_ids):
        """Sets the device_ids of this TransferAUsersPlaybackRequest.

        A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:`{device_ids:[\"74ASZWbe4lXaubB36ztrGX\"]}`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_ 

        :param device_ids: The device_ids of this TransferAUsersPlaybackRequest.
        :type device_ids: List[str]
        """
        if device_ids is None:
            raise ValueError("Invalid value for `device_ids`, must not be `None`")

        self._device_ids = device_ids

    @property
    def play(self):
        """Gets the play of this TransferAUsersPlaybackRequest.

        **true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state. 

        :return: The play of this TransferAUsersPlaybackRequest.
        :rtype: bool
        """
        return self._play

    @play.setter
    def play(self, play):
        """Sets the play of this TransferAUsersPlaybackRequest.

        **true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state. 

        :param play: The play of this TransferAUsersPlaybackRequest.
        :type play: bool
        """

        self._play = play
