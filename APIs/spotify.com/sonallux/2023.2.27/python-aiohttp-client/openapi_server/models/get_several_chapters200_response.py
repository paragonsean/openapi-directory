# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chapter_object import ChapterObject
from openapi_server import util


class GetSeveralChapters200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chapters: List[ChapterObject]=None):
        """GetSeveralChapters200Response - a model defined in OpenAPI

        :param chapters: The chapters of this GetSeveralChapters200Response.
        """
        self.openapi_types = {
            'chapters': List[ChapterObject]
        }

        self.attribute_map = {
            'chapters': 'chapters'
        }

        self._chapters = chapters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSeveralChapters200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_several_chapters_200_response of this GetSeveralChapters200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chapters(self):
        """Gets the chapters of this GetSeveralChapters200Response.


        :return: The chapters of this GetSeveralChapters200Response.
        :rtype: List[ChapterObject]
        """
        return self._chapters

    @chapters.setter
    def chapters(self, chapters):
        """Sets the chapters of this GetSeveralChapters200Response.


        :param chapters: The chapters of this GetSeveralChapters200Response.
        :type chapters: List[ChapterObject]
        """
        if chapters is None:
            raise ValueError("Invalid value for `chapters`, must not be `None`")

        self._chapters = chapters
