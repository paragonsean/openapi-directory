# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.album_restriction_object import AlbumRestrictionObject
from openapi_server.models.external_url_object import ExternalUrlObject
from openapi_server.models.image_object import ImageObject
from openapi_server import util


class AlbumBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, album_type: str=None, available_markets: List[str]=None, external_urls: ExternalUrlObject=None, href: str=None, id: str=None, images: List[ImageObject]=None, name: str=None, release_date: str=None, release_date_precision: str=None, restrictions: AlbumRestrictionObject=None, total_tracks: int=None, type: str=None, uri: str=None):
        """AlbumBase - a model defined in OpenAPI

        :param album_type: The album_type of this AlbumBase.
        :param available_markets: The available_markets of this AlbumBase.
        :param external_urls: The external_urls of this AlbumBase.
        :param href: The href of this AlbumBase.
        :param id: The id of this AlbumBase.
        :param images: The images of this AlbumBase.
        :param name: The name of this AlbumBase.
        :param release_date: The release_date of this AlbumBase.
        :param release_date_precision: The release_date_precision of this AlbumBase.
        :param restrictions: The restrictions of this AlbumBase.
        :param total_tracks: The total_tracks of this AlbumBase.
        :param type: The type of this AlbumBase.
        :param uri: The uri of this AlbumBase.
        """
        self.openapi_types = {
            'album_type': str,
            'available_markets': List[str],
            'external_urls': ExternalUrlObject,
            'href': str,
            'id': str,
            'images': List[ImageObject],
            'name': str,
            'release_date': str,
            'release_date_precision': str,
            'restrictions': AlbumRestrictionObject,
            'total_tracks': int,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'album_type': 'album_type',
            'available_markets': 'available_markets',
            'external_urls': 'external_urls',
            'href': 'href',
            'id': 'id',
            'images': 'images',
            'name': 'name',
            'release_date': 'release_date',
            'release_date_precision': 'release_date_precision',
            'restrictions': 'restrictions',
            'total_tracks': 'total_tracks',
            'type': 'type',
            'uri': 'uri'
        }

        self._album_type = album_type
        self._available_markets = available_markets
        self._external_urls = external_urls
        self._href = href
        self._id = id
        self._images = images
        self._name = name
        self._release_date = release_date
        self._release_date_precision = release_date_precision
        self._restrictions = restrictions
        self._total_tracks = total_tracks
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlbumBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlbumBase of this AlbumBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def album_type(self):
        """Gets the album_type of this AlbumBase.

        The type of the album. 

        :return: The album_type of this AlbumBase.
        :rtype: str
        """
        return self._album_type

    @album_type.setter
    def album_type(self, album_type):
        """Sets the album_type of this AlbumBase.

        The type of the album. 

        :param album_type: The album_type of this AlbumBase.
        :type album_type: str
        """
        allowed_values = ["album", "single", "compilation"]  # noqa: E501
        if album_type not in allowed_values:
            raise ValueError(
                "Invalid value for `album_type` ({0}), must be one of {1}"
                .format(album_type, allowed_values)
            )

        self._album_type = album_type

    @property
    def available_markets(self):
        """Gets the available_markets of this AlbumBase.

        The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 

        :return: The available_markets of this AlbumBase.
        :rtype: List[str]
        """
        return self._available_markets

    @available_markets.setter
    def available_markets(self, available_markets):
        """Sets the available_markets of this AlbumBase.

        The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 

        :param available_markets: The available_markets of this AlbumBase.
        :type available_markets: List[str]
        """
        if available_markets is None:
            raise ValueError("Invalid value for `available_markets`, must not be `None`")

        self._available_markets = available_markets

    @property
    def external_urls(self):
        """Gets the external_urls of this AlbumBase.

        Known external URLs for this album. 

        :return: The external_urls of this AlbumBase.
        :rtype: ExternalUrlObject
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this AlbumBase.

        Known external URLs for this album. 

        :param external_urls: The external_urls of this AlbumBase.
        :type external_urls: ExternalUrlObject
        """
        if external_urls is None:
            raise ValueError("Invalid value for `external_urls`, must not be `None`")

        self._external_urls = external_urls

    @property
    def href(self):
        """Gets the href of this AlbumBase.

        A link to the Web API endpoint providing full details of the album. 

        :return: The href of this AlbumBase.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AlbumBase.

        A link to the Web API endpoint providing full details of the album. 

        :param href: The href of this AlbumBase.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def id(self):
        """Gets the id of this AlbumBase.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 

        :return: The id of this AlbumBase.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlbumBase.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 

        :param id: The id of this AlbumBase.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this AlbumBase.

        The cover art for the album in various sizes, widest first. 

        :return: The images of this AlbumBase.
        :rtype: List[ImageObject]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this AlbumBase.

        The cover art for the album in various sizes, widest first. 

        :param images: The images of this AlbumBase.
        :type images: List[ImageObject]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def name(self):
        """Gets the name of this AlbumBase.

        The name of the album. In case of an album takedown, the value may be an empty string. 

        :return: The name of this AlbumBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlbumBase.

        The name of the album. In case of an album takedown, the value may be an empty string. 

        :param name: The name of this AlbumBase.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def release_date(self):
        """Gets the release_date of this AlbumBase.

        The date the album was first released. 

        :return: The release_date of this AlbumBase.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this AlbumBase.

        The date the album was first released. 

        :param release_date: The release_date of this AlbumBase.
        :type release_date: str
        """
        if release_date is None:
            raise ValueError("Invalid value for `release_date`, must not be `None`")

        self._release_date = release_date

    @property
    def release_date_precision(self):
        """Gets the release_date_precision of this AlbumBase.

        The precision with which `release_date` value is known. 

        :return: The release_date_precision of this AlbumBase.
        :rtype: str
        """
        return self._release_date_precision

    @release_date_precision.setter
    def release_date_precision(self, release_date_precision):
        """Sets the release_date_precision of this AlbumBase.

        The precision with which `release_date` value is known. 

        :param release_date_precision: The release_date_precision of this AlbumBase.
        :type release_date_precision: str
        """
        allowed_values = ["year", "month", "day"]  # noqa: E501
        if release_date_precision not in allowed_values:
            raise ValueError(
                "Invalid value for `release_date_precision` ({0}), must be one of {1}"
                .format(release_date_precision, allowed_values)
            )

        self._release_date_precision = release_date_precision

    @property
    def restrictions(self):
        """Gets the restrictions of this AlbumBase.

        Included in the response when a content restriction is applied. 

        :return: The restrictions of this AlbumBase.
        :rtype: AlbumRestrictionObject
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this AlbumBase.

        Included in the response when a content restriction is applied. 

        :param restrictions: The restrictions of this AlbumBase.
        :type restrictions: AlbumRestrictionObject
        """

        self._restrictions = restrictions

    @property
    def total_tracks(self):
        """Gets the total_tracks of this AlbumBase.

        The number of tracks in the album.

        :return: The total_tracks of this AlbumBase.
        :rtype: int
        """
        return self._total_tracks

    @total_tracks.setter
    def total_tracks(self, total_tracks):
        """Sets the total_tracks of this AlbumBase.

        The number of tracks in the album.

        :param total_tracks: The total_tracks of this AlbumBase.
        :type total_tracks: int
        """
        if total_tracks is None:
            raise ValueError("Invalid value for `total_tracks`, must not be `None`")

        self._total_tracks = total_tracks

    @property
    def type(self):
        """Gets the type of this AlbumBase.

        The object type. 

        :return: The type of this AlbumBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlbumBase.

        The object type. 

        :param type: The type of this AlbumBase.
        :type type: str
        """
        allowed_values = ["album"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this AlbumBase.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 

        :return: The uri of this AlbumBase.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AlbumBase.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 

        :param uri: The uri of this AlbumBase.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
