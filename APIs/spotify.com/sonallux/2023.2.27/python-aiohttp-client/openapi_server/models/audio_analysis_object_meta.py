# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioAnalysisObjectMeta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_time: float=None, analyzer_version: str=None, detailed_status: str=None, input_process: str=None, platform: str=None, status_code: int=None, timestamp: int=None):
        """AudioAnalysisObjectMeta - a model defined in OpenAPI

        :param analysis_time: The analysis_time of this AudioAnalysisObjectMeta.
        :param analyzer_version: The analyzer_version of this AudioAnalysisObjectMeta.
        :param detailed_status: The detailed_status of this AudioAnalysisObjectMeta.
        :param input_process: The input_process of this AudioAnalysisObjectMeta.
        :param platform: The platform of this AudioAnalysisObjectMeta.
        :param status_code: The status_code of this AudioAnalysisObjectMeta.
        :param timestamp: The timestamp of this AudioAnalysisObjectMeta.
        """
        self.openapi_types = {
            'analysis_time': float,
            'analyzer_version': str,
            'detailed_status': str,
            'input_process': str,
            'platform': str,
            'status_code': int,
            'timestamp': int
        }

        self.attribute_map = {
            'analysis_time': 'analysis_time',
            'analyzer_version': 'analyzer_version',
            'detailed_status': 'detailed_status',
            'input_process': 'input_process',
            'platform': 'platform',
            'status_code': 'status_code',
            'timestamp': 'timestamp'
        }

        self._analysis_time = analysis_time
        self._analyzer_version = analyzer_version
        self._detailed_status = detailed_status
        self._input_process = input_process
        self._platform = platform
        self._status_code = status_code
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioAnalysisObjectMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioAnalysisObject_meta of this AudioAnalysisObjectMeta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_time(self):
        """Gets the analysis_time of this AudioAnalysisObjectMeta.

        The amount of time taken to analyze this track.

        :return: The analysis_time of this AudioAnalysisObjectMeta.
        :rtype: float
        """
        return self._analysis_time

    @analysis_time.setter
    def analysis_time(self, analysis_time):
        """Sets the analysis_time of this AudioAnalysisObjectMeta.

        The amount of time taken to analyze this track.

        :param analysis_time: The analysis_time of this AudioAnalysisObjectMeta.
        :type analysis_time: float
        """

        self._analysis_time = analysis_time

    @property
    def analyzer_version(self):
        """Gets the analyzer_version of this AudioAnalysisObjectMeta.

        The version of the Analyzer used to analyze this track.

        :return: The analyzer_version of this AudioAnalysisObjectMeta.
        :rtype: str
        """
        return self._analyzer_version

    @analyzer_version.setter
    def analyzer_version(self, analyzer_version):
        """Sets the analyzer_version of this AudioAnalysisObjectMeta.

        The version of the Analyzer used to analyze this track.

        :param analyzer_version: The analyzer_version of this AudioAnalysisObjectMeta.
        :type analyzer_version: str
        """

        self._analyzer_version = analyzer_version

    @property
    def detailed_status(self):
        """Gets the detailed_status of this AudioAnalysisObjectMeta.

        A detailed status code for this track. If analysis data is missing, this code may explain why.

        :return: The detailed_status of this AudioAnalysisObjectMeta.
        :rtype: str
        """
        return self._detailed_status

    @detailed_status.setter
    def detailed_status(self, detailed_status):
        """Sets the detailed_status of this AudioAnalysisObjectMeta.

        A detailed status code for this track. If analysis data is missing, this code may explain why.

        :param detailed_status: The detailed_status of this AudioAnalysisObjectMeta.
        :type detailed_status: str
        """

        self._detailed_status = detailed_status

    @property
    def input_process(self):
        """Gets the input_process of this AudioAnalysisObjectMeta.

        The method used to read the track's audio data.

        :return: The input_process of this AudioAnalysisObjectMeta.
        :rtype: str
        """
        return self._input_process

    @input_process.setter
    def input_process(self, input_process):
        """Sets the input_process of this AudioAnalysisObjectMeta.

        The method used to read the track's audio data.

        :param input_process: The input_process of this AudioAnalysisObjectMeta.
        :type input_process: str
        """

        self._input_process = input_process

    @property
    def platform(self):
        """Gets the platform of this AudioAnalysisObjectMeta.

        The platform used to read the track's audio data.

        :return: The platform of this AudioAnalysisObjectMeta.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AudioAnalysisObjectMeta.

        The platform used to read the track's audio data.

        :param platform: The platform of this AudioAnalysisObjectMeta.
        :type platform: str
        """

        self._platform = platform

    @property
    def status_code(self):
        """Gets the status_code of this AudioAnalysisObjectMeta.

        The return code of the analyzer process. 0 if successful, 1 if any errors occurred.

        :return: The status_code of this AudioAnalysisObjectMeta.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this AudioAnalysisObjectMeta.

        The return code of the analyzer process. 0 if successful, 1 if any errors occurred.

        :param status_code: The status_code of this AudioAnalysisObjectMeta.
        :type status_code: int
        """

        self._status_code = status_code

    @property
    def timestamp(self):
        """Gets the timestamp of this AudioAnalysisObjectMeta.

        The Unix timestamp (in seconds) at which this track was analyzed.

        :return: The timestamp of this AudioAnalysisObjectMeta.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AudioAnalysisObjectMeta.

        The Unix timestamp (in seconds) at which this track was analyzed.

        :param timestamp: The timestamp of this AudioAnalysisObjectMeta.
        :type timestamp: int
        """

        self._timestamp = timestamp
