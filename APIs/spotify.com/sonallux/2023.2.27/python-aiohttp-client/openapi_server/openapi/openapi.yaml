openapi: 3.0.3
info:
  contact:
    name: sonallux
    url: https://github.com/sonallux/spotify-web-api
  description: |
    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

    In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

    The base URI for all Web API requests is `https://api.spotify.com/v1`.

    Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.
  termsOfService: https://developer.spotify.com/terms/
  title: Spotify Web API with fixes and improvements from sonallux
  version: 2023.2.27
  x-apisguru-categories:
  - media
  x-logo:
    url: https://logo-core.clearbit.com/spotify.com
  x-origin:
  - format: openapi
    url: https://raw.githubusercontent.com/sonallux/spotify-web-api/main/fixed-spotify-open-api.yml
    version: "3.0"
  x-providerName: spotify.com
  x-serviceName: sonallux
  x-unofficialSpec: true
servers:
- url: https://api.spotify.com/v1
paths:
  /albums:
    get:
      description: |
        Get Spotify catalog information for multiple albums identified by their Spotify IDs.
      operationId: get_multiple_albums
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
          example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          title: Spotify Album IDs
          type: string
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_200_response'
          description: A set of albums
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Several Albums
      tags:
      - Albums
      x-spotify-docs-console-url: /console/get-several-albums/
      x-spotify-docs-endpoint-name: Get Multiple Albums
      x-openapi-router-controller: openapi_server.controllers.albums_controller
    x-spotify-docs-category: Albums
    x-spotify-docs-display-name: several-albums
  /albums/{id}:
    get:
      description: |
        Get Spotify catalog information for a single album.
      operationId: get_an_album
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the album.
          example: 4aawyAB9vmqN3uQ7FjRGTy
          title: Spotify Album ID
          type: string
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumObject'
          description: An album
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Album
      tags:
      - Albums
      x-spotify-docs-console-url: /console/get-album/?id=0sNOF9WDwhWunNAHPD3Baj
      x-spotify-docs-endpoint-name: Get an Album
      x-openapi-router-controller: openapi_server.controllers.albums_controller
    x-spotify-docs-category: Albums
    x-spotify-docs-display-name: album
  /albums/{id}/tracks:
    get:
      description: |
        Get Spotify catalog information about an album’s tracks.
        Optional parameters can be used to limit the number of tracks returned.
      operationId: get_an_albums_tracks
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the album.
          example: 4aawyAB9vmqN3uQ7FjRGTy
          title: Spotify Album ID
          type: string
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSimplifiedTrackObject'
          description: Pages of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Album Tracks
      tags:
      - Albums
      - Tracks
      x-spotify-docs-console-url: /console/get-album-tracks/
      x-spotify-docs-endpoint-name: Get an Album's Tracks
      x-openapi-router-controller: openapi_server.controllers.albums_controller
    x-spotify-docs-category: Albums
    x-spotify-docs-display-name: album-tracks
  /artists:
    get:
      description: |
        Get Spotify catalog information for several artists based on their Spotify IDs.
      operationId: get_multiple_artists
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the artists. Maximum: 50 IDs.
          example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          title: Spotify Artist IDs
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_artists_200_response'
          description: A set of artists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Several Artists
      tags:
      - Artists
      x-spotify-docs-console-url: "/console/get-several-artists/?ids=0oSGxfWSnnOXhD2fKuz2Gy,3dBVyJ7JuOMt4GE9607Qin"
      x-spotify-docs-endpoint-name: Get Multiple Artists
      x-openapi-router-controller: openapi_server.controllers.artists_controller
    x-spotify-docs-category: Artists
    x-spotify-docs-display-name: several-artists
  /artists/{id}:
    get:
      description: |
        Get Spotify catalog information for a single artist identified by their unique Spotify ID.
      operationId: get_an_artist
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
          example: 0TnOYISbd1XYRBk9myaseg
          title: Spotify Artist ID
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistObject'
          description: An artist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Artist
      tags:
      - Artists
      x-spotify-docs-console-url: /console/get-artist/?id=0OdUWJ0sBjDrqHygGUXeCF
      x-spotify-docs-endpoint-name: Get an Artist
      x-openapi-router-controller: openapi_server.controllers.artists_controller
    x-spotify-docs-category: Artists
    x-spotify-docs-display-name: artist
  /artists/{id}/albums:
    get:
      description: |
        Get Spotify catalog information about an artist's albums.
      operationId: get_an_artists_albums
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
          example: 0TnOYISbd1XYRBk9myaseg
          title: Spotify Artist ID
          type: string
        style: simple
      - explode: true
        in: query
        name: include_groups
        required: false
        schema:
          description: |
            A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>
            Valid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.
          example: "single,appears_on"
          title: "Groups to include (single, album, appears_on, compilation)"
          type: string
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSimplifiedAlbumObject'
          description: Pages of albums
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Artist's Albums
      tags:
      - Artists
      - Albums
      x-spotify-docs-console-url: /console/get-artist-albums/?album_type=single&amp;limit=2&amp;market=ES&amp;id=1vCWHaC5f2uS3yhpwWbIA6
      x-spotify-docs-endpoint-name: Get an Artist's Albums
      x-openapi-router-controller: openapi_server.controllers.artists_controller
    x-spotify-docs-category: Artists
    x-spotify-docs-display-name: artist-albums
  /artists/{id}/related-artists:
    get:
      description: |
        Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's [listening history](http://news.spotify.com/se/2010/02/03/related-artists/).
      operationId: get_an_artists_related_artists
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
          example: 0TnOYISbd1XYRBk9myaseg
          title: Spotify Artist ID
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_artists_200_response'
          description: A set of artists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Artist's Related Artists
      tags:
      - Artists
      x-spotify-docs-console-url: /console/get-artist-related-artists/?id=43ZHCT0cAZBISjO8DG9PnE
      x-spotify-docs-endpoint-name: Get an Artist's Related Artists
      x-openapi-router-controller: openapi_server.controllers.artists_controller
    x-spotify-docs-category: Artists
    x-spotify-docs-display-name: artist-related-artists
  /artists/{id}/top-tracks:
    get:
      description: |
        Get Spotify catalog information about an artist's top tracks by country.
      operationId: get_an_artists_top_tracks
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
          example: 0TnOYISbd1XYRBk9myaseg
          title: Spotify Artist ID
          type: string
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_an_artists_top_tracks_200_response'
          description: A set of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Artist's Top Tracks
      tags:
      - Artists
      - Tracks
      x-spotify-docs-console-url: /console/get-artist-top-tracks/?country=SE&amp;id=43ZHCT0cAZBISjO8DG9PnE
      x-spotify-docs-endpoint-name: Get an Artist's Top Tracks
      x-openapi-router-controller: openapi_server.controllers.artists_controller
    x-spotify-docs-category: Artists
    x-spotify-docs-display-name: artist-top-tracks
  /audio-analysis/{id}:
    get:
      description: |
        Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre.
      operationId: get_audio_analysis
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the track.
          example: 11dFghVXANMlKmJXsNCbNl
          title: Spotify Track ID
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioAnalysisObject'
          description: Audio analysis for one track
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Track's Audio Analysis
      tags:
      - Tracks
      x-spotify-docs-console-url: /console/get-audio-analysis-track/?id=06AKEBrKUckW0KREUWRnvT
      x-spotify-docs-endpoint-name: Get Audio Analysis for a Track
      x-openapi-router-controller: openapi_server.controllers.tracks_controller
    x-spotify-docs-category: Tracks
    x-spotify-docs-display-name: audio-analysis-track
  /audio-features:
    get:
      description: |
        Get audio features for multiple tracks based on their Spotify IDs.
      operationId: get_several_audio_features
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids)
            for the tracks. Maximum: 100 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_several_audio_features_200_response'
          description: A set of audio features
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Tracks' Audio Features
      tags:
      - Tracks
      x-spotify-docs-console-url: "/console/get-audio-features-several-tracks/?ids=4JpKVNYnVcJ8tuMKjAj50A,2NRANZE9UCmPAS5XVbXL40,24JygzOLM0EmRQeGtFcIcG"
      x-spotify-docs-endpoint-name: Get Audio Features for Several Tracks
      x-openapi-router-controller: openapi_server.controllers.tracks_controller
    x-spotify-docs-category: Tracks
    x-spotify-docs-display-name: audio-features-several-tracks
  /audio-features/{id}:
    get:
      description: |
        Get audio feature information for a single track identified by its unique
        Spotify ID.
      operationId: get_audio_features
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          example: 11dFghVXANMlKmJXsNCbNl
          title: Spotify Track ID
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioFeaturesObject'
          description: Audio features for one track
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Track's Audio Features
      tags:
      - Tracks
      x-spotify-docs-console-url: /console/get-audio-features-track/?id=06AKEBrKUckW0KREUWRnvT
      x-spotify-docs-endpoint-name: Get Audio Features for a Track
      x-openapi-router-controller: openapi_server.controllers.tracks_controller
    x-spotify-docs-category: Tracks
    x-spotify-docs-display-name: audio-features-track
  /audiobooks:
    get:
      description: |
        Get Spotify catalog information for several audiobooks identified by their Spotify IDs.<br />
        **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**
      operationId: get_multiple_audiobooks
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
          example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          title: Spotify Audiobook IDs
          type: string
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_audiobooks_200_response'
          description: A set of audiobooks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Several Audiobooks
      tags:
      - Audiobooks
      x-spotify-docs-console-url: "/console/get-several-audiobooks/?ids=5thw29eqjomhIDMY1XKsLk,2IEBhnu61ieYGFRPEJIO40"
      x-spotify-docs-endpoint-name: Get Several Audiobooks
      x-openapi-router-controller: openapi_server.controllers.audiobooks_controller
    x-spotify-docs-category: Audiobooks
    x-spotify-docs-display-name: several-audiobooks
  /audiobooks/{id}:
    get:
      description: |
        Get Spotify catalog information for a single audiobook.<br />
        **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**
      operationId: get_an_audiobook
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the audiobook.
          example: 7iHfbu1YPACw6oZPAFJtqe
          title: Spotify Audiobook ID
          type: string
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudiobookObject'
          description: An Audiobook
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The request contains malformed data in path, query parameters, or body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The requested resource cannot be found.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get an Audiobook
      tags:
      - Audiobooks
      x-spotify-docs-console-url: /console/get-audiobook/?id=5thw29eqjomhIDMY1XKsLk
      x-spotify-docs-endpoint-name: Get an Audiobook
      x-openapi-router-controller: openapi_server.controllers.audiobooks_controller
    x-spotify-docs-category: Audiobooks
    x-spotify-docs-display-name: audiobook
  /audiobooks/{id}/chapters:
    get:
      description: |
        Get Spotify catalog information about an audiobook's chapters.<br />
        **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**
      operationId: get_audiobook_chapters
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the audiobook.
          example: 7iHfbu1YPACw6oZPAFJtqe
          title: Spotify Audiobook ID
          type: string
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSimplifiedChapterObject'
          description: Pages of chapters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Audiobook Chapters
      tags:
      - Audiobooks
      - Chapters
      x-spotify-docs-console-url: /console/get-audiobook-chapters/?id=5thw29eqjomhIDMY1XKsLk
      x-spotify-docs-endpoint-name: Get an Audiobook's Chapters
      x-openapi-router-controller: openapi_server.controllers.audiobooks_controller
    x-spotify-docs-category: Audiobooks
    x-spotify-docs-display-name: audiobook-chapters
  /browse/categories:
    get:
      description: |
        Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).
      operationId: get_categories
      parameters:
      - explode: true
        in: query
        name: country
        required: false
        schema:
          description: |
            A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant.
          example: SE
          title: Country
          type: string
        style: form
      - explode: true
        in: query
        name: locale
        required: false
        schema:
          description: |
            The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning "Spanish (Mexico)". Provide this parameter if you want the category metadata returned in a particular language. <br/>
            _**Note**: if `locale` is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The `locale` parameter, combined with the `country` parameter, may give odd results if not carefully matched. For example `country=SE&locale=de_DE` will return a list of categories relevant to Sweden but as German language strings._
          example: sv_SE
          title: Locale
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_categories_200_response'
          description: A paged set of categories
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Several Browse Categories
      tags:
      - Categories
      x-spotify-docs-console-url: /console/get-browse-categories/
      x-spotify-docs-endpoint-name: Get All Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
    x-spotify-docs-category: Browse
    x-spotify-docs-display-name: browse-categories
  /browse/categories/{category_id}:
    get:
      description: |
        Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).
      operationId: get_a_category
      parameters:
      - explode: false
        in: path
        name: category_id
        required: true
        schema:
          description: |
            The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) for the category.
          example: dinner
          title: Category ID
          type: string
        style: simple
      - explode: true
        in: query
        name: country
        required: false
        schema:
          description: |
            A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter to ensure that the category exists for a particular country.
          example: SE
          title: Country
          type: string
        style: form
      - explode: true
        in: query
        name: locale
        required: false
        schema:
          description: |
            The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning &quot;Spanish (Mexico)&quot;. Provide this parameter if you want the category strings returned in a particular language.<br/> _**Note**: if `locale` is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English)._
          example: sv_SE
          title: Locale
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryObject'
          description: A category
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Single Browse Category
      tags:
      - Categories
      x-spotify-docs-console-url: /console/get-browse-category/
      x-spotify-docs-endpoint-name: Get a Category
      x-openapi-router-controller: openapi_server.controllers.categories_controller
    x-spotify-docs-category: Browse
    x-spotify-docs-display-name: browse-category
  /browse/categories/{category_id}/playlists:
    get:
      description: |
        Get a list of Spotify playlists tagged with a particular category.
      operationId: get_a_categories_playlists
      parameters:
      - explode: false
        in: path
        name: category_id
        required: true
        schema:
          description: |
            The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) for the category.
          example: dinner
          title: Category ID
          type: string
        style: simple
      - explode: true
        in: query
        name: country
        required: false
        schema:
          description: |
            A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter to ensure that the category exists for a particular country.
          example: SE
          title: Country
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingFeaturedPlaylistObject'
          description: A paged set of playlists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Category's Playlists
      tags:
      - Playlists
      - Categories
      x-spotify-docs-console-url: /console/get-category-playlists/?country=BR&amp;category_id=party&amp;limit=2
      x-spotify-docs-endpoint-name: Get a Category's Playlists
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
    x-spotify-docs-category: Browse
    x-spotify-docs-display-name: category-playlists
  /browse/featured-playlists:
    get:
      description: |
        Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).
      operationId: get_featured_playlists
      parameters:
      - explode: true
        in: query
        name: country
        required: false
        schema:
          description: |
            A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
          example: SE
          title: Country
          type: string
        style: form
      - explode: true
        in: query
        name: locale
        required: false
        schema:
          description: |
            The desired language, consisting of a lowercase [ISO 639-1 language code](http://en.wikipedia.org/wiki/ISO_639-1) and an uppercase [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning "Spanish (Mexico)". Provide this parameter if you want the results returned in a particular language (where available). <br/>
            _**Note**: if `locale` is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The `locale` parameter, combined with the `country` parameter, may give odd results if not carefully matched. For example `country=SE&locale=de_DE` will return a list of categories relevant to Sweden but as German language strings._
          example: sv_SE
          title: Locale
          type: string
        style: form
      - explode: true
        in: query
        name: timestamp
        required: false
        schema:
          description: |
            A timestamp in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601): `yyyy-MM-ddTHH:mm:ss`. Use this parameter to specify the user's local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: "2014-10-23T09:00:00" for a user whose local time is 9AM. If there were no featured playlists (or there is no data) at the specified time, the response will revert to the current UTC time.
          example: 2014-10-23T09:00:00
          title: Timestamp
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingFeaturedPlaylistObject'
          description: A paged set of playlists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Featured Playlists
      tags:
      - Playlists
      x-spotify-docs-console-url: /console/get-featured-playlists/?country=SE&amp;limit=2
      x-spotify-docs-endpoint-name: Get All Featured Playlists
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
    x-spotify-docs-category: Browse
    x-spotify-docs-display-name: featured-playlists
  /browse/new-releases:
    get:
      description: |
        Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).
      operationId: get_new_releases
      parameters:
      - explode: true
        in: query
        name: country
        required: false
        schema:
          description: |
            A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
          example: SE
          title: Country
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_new_releases_200_response'
          description: A paged set of albums
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get New Releases
      tags:
      - Albums
      x-spotify-docs-console-url: /console/get-new-releases/?country=SE
      x-spotify-docs-endpoint-name: Get All New Releases
      x-openapi-router-controller: openapi_server.controllers.albums_controller
    x-spotify-docs-category: Browse
    x-spotify-docs-display-name: new-releases
  /chapters:
    get:
      description: |
        Get Spotify catalog information for several chapters identified by their Spotify IDs.<br />
        **Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.**
      operationId: get_several_chapters
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU`. Maximum: 50 IDs.
          example: "0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU,0D5wENdkdwbqlrHoaJ9g29"
          title: Spotify Chapter IDs
          type: string
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_several_chapters_200_response'
          description: A set of chapters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Several Chapters
      tags:
      - Chapters
      x-spotify-docs-console-url: "/console/get-several-chapters/?ids=2i47HuOBSV2XaJNy0NCZXM,2GUbORsUnP1qVVlLwd9DzP"
      x-spotify-docs-endpoint-name: Get Several Chapters
      x-openapi-router-controller: openapi_server.controllers.chapters_controller
    x-spotify-docs-category: Chapters
    x-spotify-docs-display-name: several-chapters
  /chapters/{id}:
    get:
      description: |
        Get Spotify catalog information for a single chapter.<br />
        **Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.**
      operationId: get_a_chapter
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the chapter.
          example: 0D5wENdkdwbqlrHoaJ9g29
          title: Spotify Chapter ID
          type: string
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterObject'
          description: A Chapter
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get a Chapter
      tags:
      - Chapters
      x-spotify-docs-console-url: /console/get-chapter/?id=2i47HuOBSV2XaJNy0NCZXM
      x-spotify-docs-endpoint-name: Get a Chapter
      x-openapi-router-controller: openapi_server.controllers.chapters_controller
    x-spotify-docs-category: Chapters
    x-spotify-docs-display-name: chapters
  /episodes:
    get:
      description: |
        Get Spotify catalog information for several episodes based on their Spotify IDs.
      operationId: get_multiple_episodes
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the episodes. Maximum: 50 IDs.
          example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          title: Ids
          type: string
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_episodes_200_response'
          description: A set of episodes
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-read-playback-position
      summary: |
        Get Several Episodes
      tags:
      - Episodes
      x-spotify-docs-console-url: "/console/get-several-episodes/?ids=77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
      x-spotify-docs-endpoint-name: Get Multiple Episodes
      x-openapi-router-controller: openapi_server.controllers.episodes_controller
    x-spotify-docs-category: Episodes
    x-spotify-docs-display-name: several-episodes
  /episodes/{id}:
    get:
      description: |
        Get Spotify catalog information for a single episode identified by its
        unique Spotify ID.
      operationId: get_an_episode
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)\
            \ for the episode."
          example: 512ojhOuo1ktJprKbVcKyQ
          title: Get an Episode
          type: string
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpisodeObject'
          description: An episode
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-read-playback-position
      summary: |
        Get Episode
      tags:
      - Episodes
      x-spotify-docs-console-url: /console/get-episode/?id=512ojhOuo1ktJprKbVcKyQ
      x-spotify-docs-endpoint-name: Get an Episode
      x-openapi-router-controller: openapi_server.controllers.episodes_controller
    x-spotify-docs-category: Episodes
    x-spotify-docs-display-name: episode
  /markets:
    get:
      description: |
        Get the list of markets where Spotify is available.
      operationId: get_available_markets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_available_markets_200_response'
          description: A markets object with an array of country codes
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Available Markets
      tags:
      - Markets
      x-spotify-docs-console-url: /console/get-available-markets/
      x-spotify-docs-endpoint-name: Get Available Markets
      x-openapi-router-controller: openapi_server.controllers.markets_controller
    x-spotify-docs-category: Markets
    x-spotify-docs-display-name: available-markets
  /me:
    get:
      description: |
        Get detailed profile information about the current user (including the
        current user's username).
      operationId: get_current_users_profile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserObject'
          description: A user
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-read-private
        - user-read-email
      summary: |
        Get Current User's Profile
      tags:
      - Users
      x-spotify-docs-console-url: /console/get-current-user/
      x-spotify-docs-endpoint-name: Get Current User's Profile
      x-openapi-router-controller: openapi_server.controllers.users_controller
    x-spotify-docs-category: Users Profile
    x-spotify-docs-display-name: current-user
  /me/albums:
    delete:
      description: |
        Remove one or more albums from the current user's 'Your Music' library.
      operationId: remove_albums_user
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
          example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          title: Spotify Album IDs
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/save_albums_user_request'
        x-body-name: body
      responses:
        "200":
          description: Album(s) have been removed from the library
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Remove Users' Saved Albums
      tags:
      - Albums
      - Library
      x-spotify-docs-console-url: /console/delete-current-user-saved-albums/?ids=07bYtmE3bPsLB6ZbmmFi8d%2C48JYNjh7GMie6NjqYHMmtT%2C27cZdqrQiKt3IT00338dws
      x-spotify-docs-endpoint-name: Remove Albums for Current User
      x-openapi-router-controller: openapi_server.controllers.albums_controller
      x-codegen-request-body-name: body
    get:
      description: |
        Get a list of the albums saved in the current Spotify user's 'Your Music' library.
      operationId: get_users_saved_albums
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSavedAlbumObject'
          description: Pages of albums
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Get User's Saved Albums
      tags:
      - Albums
      - Library
      x-spotify-docs-console-url: /console/get-current-user-saved-albums/?limit=1
      x-spotify-docs-endpoint-name: Get User's Saved Albums
      x-openapi-router-controller: openapi_server.controllers.albums_controller
    put:
      description: |
        Save one or more albums to the current user's 'Your Music' library.
      operationId: save_albums_user
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
          example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          title: Spotify Album IDs
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/save_albums_user_request'
        x-body-name: body
      responses:
        "200":
          description: The album is saved
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Save Albums for Current User
      tags:
      - Albums
      - Library
      x-spotify-docs-console-url: /console/put-current-user-saved-albums/?ids=07bYtmE3bPsLB6ZbmmFi8d%2C48JYNjh7GMie6NjqYHMmtT%2C27cZdqrQiKt3IT00338dws
      x-spotify-docs-endpoint-name: Save Albums for Current User
      x-openapi-router-controller: openapi_server.controllers.albums_controller
      x-codegen-request-body-name: body
    x-spotify-docs-category: Library
    x-spotify-docs-display-name: current-user-saved-albums
  /me/albums/contains:
    get:
      description: |
        Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.
      operationId: check_users_saved_albums
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
          example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          title: Spotify Album IDs
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - false
                - true
                items:
                  type: boolean
                type: array
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Check User's Saved Albums
      tags:
      - Albums
      - Library
      x-spotify-docs-console-url: /console/get-current-user-contains-saved-albums/?ids=0pJJgBzj26qnE1nSQUxaB0%2C5ZAKzV4ZIa5Gt7z29OYHv0
      x-spotify-docs-endpoint-name: Check User's Saved Albums
      x-openapi-router-controller: openapi_server.controllers.albums_controller
    x-spotify-docs-category: Library
    x-spotify-docs-display-name: current-user-contains-saved-albums
  /me/audiobooks:
    delete:
      description: |
        Remove one or more audiobooks from the Spotify user's library.
      operationId: remove_audiobooks_user
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
          example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          title: Spotify Audiobook IDs
          type: string
        style: form
      responses:
        "200":
          description: Audiobook(s) have been removed from the library
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Remove User's Saved Audiobooks
      tags:
      - Audiobooks
      - Library
      x-spotify-docs-console-url: /console/delete-current-user-saved-audiobooks/?ids=07bYtmE3bPsLB6ZbmmFi8d%2C48JYNjh7GMie6NjqYHMmtT%2C27cZdqrQiKt3IT00338dws
      x-spotify-docs-endpoint-name: Remove Audiobooks for Current User
      x-openapi-router-controller: openapi_server.controllers.audiobooks_controller
    get:
      description: |
        Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library.
      operationId: get_users_saved_audiobooks
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSavedAudiobookObject'
          description: Pages of saved audiobooks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Get User's Saved Audiobooks
      tags:
      - Audiobooks
      - Library
      x-spotify-docs-console-url: /console/get-current-user-saved-audiobooks/?limit=1
      x-spotify-docs-endpoint-name: Get User's Saved Audiobooks
      x-openapi-router-controller: openapi_server.controllers.audiobooks_controller
    put:
      description: |
        Save one or more audiobooks to the current Spotify user's library.
      operationId: save_audiobooks_user
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
          example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          title: Spotify Audiobook IDs
          type: string
        style: form
      responses:
        "200":
          description: Audiobook(s) are saved to the library
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Save Audiobooks for Current User
      tags:
      - Audiobooks
      - Library
      x-spotify-docs-console-url: /console/put-current-user-saved-audiobooks/?ids=07bYtmE3bPsLB6ZbmmFi8d%2C48JYNjh7GMie6NjqYHMmtT%2C27cZdqrQiKt3IT00338dws
      x-spotify-docs-endpoint-name: Save Audiobooks for Current User
      x-openapi-router-controller: openapi_server.controllers.audiobooks_controller
    x-spotify-docs-category: Library
    x-spotify-docs-display-name: current-user-saved-audiobooks
  /me/audiobooks/contains:
    get:
      description: |
        Check if one or more audiobooks are already saved in the current Spotify user's library.
      operationId: check_users_saved_audiobooks
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
          example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          title: Spotify Audiobook IDs
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - false
                - true
                items:
                  type: boolean
                type: array
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Check User's Saved Audiobooks
      tags:
      - Audiobooks
      - Library
      x-spotify-docs-console-url: /console/get-current-user-contains-saved-audiobooks/?ids=0pJJgBzj26qnE1nSQUxaB0%2C5ZAKzV4ZIa5Gt7z29OYHv0
      x-spotify-docs-endpoint-name: Check User's Saved Audiobooks
      x-openapi-router-controller: openapi_server.controllers.audiobooks_controller
    x-spotify-docs-category: Library
    x-spotify-docs-display-name: current-user-contains-saved-audiobooks
  /me/episodes:
    delete:
      description: |
        Remove one or more episodes from the current user's library.<br/>
        This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
      operationId: remove_episodes_user
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/remove_episodes_user_request'
        x-body-name: body
      responses:
        "200":
          description: Episode removed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Remove User's Saved Episodes
      tags:
      - Episodes
      - Library
      x-spotify-docs-console-url: /console/delete-current-user-saved-episodes/?ids=77o6BIVlYM3msb4MMIL1jH%2C0Q86acNRm6V9GYx55SXKwf
      x-spotify-docs-endpoint-name: Remove User's Saved Episodes
      x-openapi-router-controller: openapi_server.controllers.episodes_controller
      x-codegen-request-body-name: body
    get:
      description: |
        Get a list of the episodes saved in the current Spotify user's library.<br/>
        This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
      operationId: get_users_saved_episodes
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSavedEpisodeObject'
          description: Pages of episodes
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-read
        - user-read-playback-position
      summary: |
        Get User's Saved Episodes
      tags:
      - Episodes
      - Library
      x-spotify-docs-console-url: /console/get-current-user-saved-episodes/
      x-spotify-docs-endpoint-name: Get User's Saved Episodes
      x-openapi-router-controller: openapi_server.controllers.episodes_controller
    put:
      description: |
        Save one or more episodes to the current user's library.<br/>
        This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
      operationId: save_episodes_user
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). Maximum: 50 IDs.
          example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          title: Spotify Episodes IDs
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/save_episodes_user_request'
        x-body-name: body
      responses:
        "200":
          description: Episode saved
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Save Episodes for Current User
      tags:
      - Episodes
      - Library
      x-spotify-docs-console-url: /console/put-current-user-saved-episodes/?ids=77o6BIVlYM3msb4MMIL1jH%2C0Q86acNRm6V9GYx55SXKwf
      x-spotify-docs-endpoint-name: Save Episodes for Current User
      x-openapi-router-controller: openapi_server.controllers.episodes_controller
      x-codegen-request-body-name: body
    x-spotify-docs-category: Library
    x-spotify-docs-display-name: current-user-saved-episodes
  /me/episodes/contains:
    get:
      description: |
        Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.<br/>
        This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..
      operationId: check_users_saved_episodes
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the episodes. Maximum: 50 IDs.
          example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          title: Spotify Episode IDs
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - false
                - true
                items:
                  type: boolean
                type: array
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Check User's Saved Episodes
      tags:
      - Episodes
      - Library
      x-spotify-docs-console-url: /console/get-current-user-contains-saved-episodes/?ids=77o6BIVlYM3msb4MMIL1jH%2C0Q86acNRm6V9GYx55SXKwf
      x-spotify-docs-endpoint-name: Check User's Saved Episodes
      x-openapi-router-controller: openapi_server.controllers.episodes_controller
    x-spotify-docs-category: Library
    x-spotify-docs-display-name: current-user-contains-saved-episodes
  /me/following:
    delete:
      description: |
        Remove the current user as a follower of one or more artists or other Spotify users.
      operationId: unfollow_artists_users
      parameters:
      - explode: true
        in: query
        name: type
        required: true
        schema:
          description: |
            The ID type: either `artist` or `user`.
          enum:
          - artist
          - user
          example: artist
          title: Item Type
          type: string
        style: form
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.
          example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          title: Spotify IDs
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/unfollow_artists_users_request'
        x-body-name: body
      responses:
        "200":
          description: Artist or user unfollowed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-follow-modify
      summary: |
        Unfollow Artists or Users
      tags:
      - Users
      - Artists
      - Library
      x-spotify-docs-console-url: /console/delete-following/?type=user&amp;ids=exampleuser01
      x-spotify-docs-endpoint-name: Unfollow Artists or Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
      x-codegen-request-body-name: body
    get:
      description: |
        Get the current user's followed artists.
      operationId: get_followed
      parameters:
      - explode: true
        in: query
        name: type
        required: true
        schema:
          description: |
            The ID type: currently only `artist` is supported.
          enum:
          - artist
          example: artist
          title: Item Type
          type: string
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          description: |
            The last artist ID retrieved from the previous request.
          example: 0I2XqVXqHScXjHhk6AYYRe
          title: After
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_followed_200_response'
          description: A paged set of artists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-follow-read
      summary: |
        Get Followed Artists
      tags:
      - Users
      - Library
      - Artists
      x-spotify-docs-console-url: /console/get-following/?type=artist&amp;limit=20
      x-spotify-docs-endpoint-name: Get User's Followed Artists
      x-openapi-router-controller: openapi_server.controllers.users_controller
    put:
      description: |
        Add the current user as a follower of one or more artists or other Spotify users.
      operationId: follow_artists_users
      parameters:
      - explode: true
        in: query
        name: type
        required: true
        schema:
          description: |
            The ID type.
          enum:
          - artist
          - user
          example: artist
          title: Item Type
          type: string
        style: form
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids).
            A maximum of 50 IDs can be sent in one request.
          example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          title: Spotify IDs
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/follow_artists_users_request'
        x-body-name: body
      responses:
        "204":
          description: Artist or user followed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-follow-modify
      summary: |
        Follow Artists or Users
      tags:
      - Users
      - Artists
      - Library
      x-spotify-docs-console-url: /console/put-following/?type=user&amp;ids=exampleuser01
      x-spotify-docs-endpoint-name: Follow Artists or Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
      x-codegen-request-body-name: body
    x-spotify-docs-category: Follow
    x-spotify-docs-display-name: following
  /me/following/contains:
    get:
      description: |
        Check to see if the current user is following one or more artists or other Spotify users.
      operationId: check_current_user_follows
      parameters:
      - explode: true
        in: query
        name: type
        required: true
        schema:
          description: |
            The ID type: either `artist` or `user`.
          enum:
          - artist
          - user
          example: artist
          title: Item Type
          type: string
        style: form
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) to check. For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.
          example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          title: Spotify IDs
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - false
                - true
                items:
                  type: boolean
                type: array
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-follow-read
      summary: |
        Check If User Follows Artists or Users
      tags:
      - Users
      - Artists
      - Library
      x-spotify-docs-console-url: /console/get-following-contains/?type=user&amp;ids=exampleuser01
      x-spotify-docs-endpoint-name: Get Following State for Artists/Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
    x-spotify-docs-category: Follow
    x-spotify-docs-display-name: following-contains
  /me/player:
    get:
      description: |
        Get information about the user’s current playback state, including track or episode, progress, and active device.
      operationId: get_information_about_the_users_current_playback
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: additional_types
        required: false
        schema:
          description: |
            A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
            _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
            In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
          title: Additional Types
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentlyPlayingContextObject'
          description: Information about playback
        "204":
          description: Playback not available or active
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-read-playback-state
      summary: |
        Get Playback State
      tags:
      - Player
      x-spotify-docs-console-url: /console/get-user-player/
      x-spotify-docs-endpoint-name: Get Information About The User's Current Playback
      x-openapi-router-controller: openapi_server.controllers.player_controller
    put:
      description: |
        Transfer playback to a new device and determine if it should start playing.
      operationId: transfer_a_users_playback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transfer_a_users_playback_request'
        x-body-name: body
      responses:
        "204":
          description: Playback transferred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Transfer Playback
      tags:
      - Player
      x-spotify-docs-console-url: /console/put-user-player
      x-spotify-docs-endpoint-name: Transfer a User's Playback
      x-openapi-router-controller: openapi_server.controllers.player_controller
      x-codegen-request-body-name: body
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: user-player
  /me/player/currently-playing:
    get:
      description: |
        Get the object currently being played on the user's Spotify account.
      operationId: get_the_users_currently_playing_track
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: additional_types
        required: false
        schema:
          description: |
            A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
            _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
            In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
          title: Additional Types
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentlyPlayingObject'
          description: Information about the currently playing track
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-read-currently-playing
      summary: |
        Get Currently Playing Track
      tags:
      - Player
      x-spotify-docs-console-url: /console/get-users-currently-playing-track/
      x-spotify-docs-endpoint-name: Get the User's Currently Playing Track
      x-openapi-router-controller: openapi_server.controllers.player_controller
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: users-currently-playing-track
  /me/player/devices:
    get:
      description: |
        Get information about a user’s available devices.
      operationId: get_a_users_available_devices
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicesObject'
          description: A set of devices
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-read-playback-state
      summary: |
        Get Available Devices
      tags:
      - Player
      x-spotify-docs-console-url: /console/get-users-available-devices/
      x-spotify-docs-endpoint-name: Get a User's Available Devices
      x-openapi-router-controller: openapi_server.controllers.player_controller
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: users-available-devices
  /me/player/next:
    post:
      description: |
        Skips to next track in the user’s queue.
      operationId: skip_users_playback_to_next_track
      parameters:
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
        style: form
      responses:
        "204":
          description: Command sent
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Skip To Next
      tags:
      - Player
      x-spotify-docs-console-url: /console/post-next/
      x-spotify-docs-endpoint-name: Skip User’s Playback To Next Track
      x-openapi-router-controller: openapi_server.controllers.player_controller
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: next
  /me/player/pause:
    put:
      description: |
        Pause playback on the user's account.
      operationId: pause_a_users_playback
      parameters:
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
        style: form
      responses:
        "204":
          description: Playback paused
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Pause Playback
      tags:
      - Player
      x-spotify-docs-console-url: /console/put-pause/
      x-spotify-docs-endpoint-name: Pause a User's Playback
      x-openapi-router-controller: openapi_server.controllers.player_controller
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: pause
  /me/player/play:
    put:
      description: |
        Start a new context or resume current playback on the user's active device.
      operationId: start_a_users_playback
      parameters:
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/start_a_users_playback_request'
        x-body-name: body
      responses:
        "204":
          description: Playback started
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Start/Resume Playback
      tags:
      - Player
      x-spotify-docs-console-url: /console/put-play/
      x-spotify-docs-endpoint-name: Start/Resume a User's Playback
      x-openapi-router-controller: openapi_server.controllers.player_controller
      x-codegen-request-body-name: body
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: play
  /me/player/previous:
    post:
      description: |
        Skips to previous track in the user’s queue.
      operationId: skip_users_playback_to_previous_track
      parameters:
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
        style: form
      responses:
        "204":
          description: Command sent
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Skip To Previous
      tags:
      - Player
      x-spotify-docs-console-url: /console/post-previous/
      x-spotify-docs-endpoint-name: Skip User’s Playback To Previous Track
      x-openapi-router-controller: openapi_server.controllers.player_controller
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: previous
  /me/player/queue:
    get:
      description: |
        Get the list of objects that make up the user's queue.
      operationId: get_queue
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueObject'
          description: Information about the queue
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-read-playback-state
      summary: |
        Get the User's Queue
      tags:
      - Player
      x-spotify-docs-console-url: /console/get-queue/
      x-spotify-docs-endpoint-name: Get the User's Queue
      x-openapi-router-controller: openapi_server.controllers.player_controller
    post:
      description: |
        Add an item to the end of the user's current playback queue.
      operationId: add_to_queue
      parameters:
      - explode: true
        in: query
        name: uri
        required: true
        schema:
          description: |
            The uri of the item to add to the queue. Must be a track or an episode uri.
          example: spotify:track:4iV5W9uYEdYUVa79Axb7Rh
          title: Spotify URI
          type: string
        style: form
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
        style: form
      responses:
        "204":
          description: Command received
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Add Item to Playback Queue
      tags:
      - Player
      x-spotify-docs-console-url: /console/post-queue/
      x-spotify-docs-endpoint-name: Add an item to queue
      x-openapi-router-controller: openapi_server.controllers.player_controller
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: queue
  /me/player/recently-played:
    get:
      description: |
        Get tracks from the current user's recently played tracks.
        _**Note**: Currently doesn't support podcast episodes._
      operationId: get_recently_played
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          description: |
            A Unix timestamp in milliseconds. Returns all items
            after (but not including) this cursor position. If `after` is specified, `before`
            must not be specified.
          example: 1484811043508
          title: After
          type: integer
        style: form
      - explode: true
        in: query
        name: before
        required: false
        schema:
          description: |
            A Unix timestamp in milliseconds. Returns all items
            before (but not including) this cursor position. If `before` is specified,
            `after` must not be specified.
          title: Before
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CursorPagingPlayHistoryObject'
          description: A paged set of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-read-recently-played
      summary: |
        Get Recently Played Tracks
      tags:
      - Player
      x-spotify-docs-console-url: /console/get-recently-played/
      x-spotify-docs-endpoint-name: Get Current User's Recently Played Tracks
      x-openapi-router-controller: openapi_server.controllers.player_controller
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: recently-played
  /me/player/repeat:
    put:
      description: |
        Set the repeat mode for the user's playback. Options are repeat-track,
        repeat-context, and off.
      operationId: set_repeat_mode_on_users_playback
      parameters:
      - explode: true
        in: query
        name: state
        required: true
        schema:
          description: |
            **track**, **context** or **off**.<br/>
            **track** will repeat the current track.<br/>
            **context** will repeat the current context.<br/>
            **off** will turn repeat off.
          example: context
          title: State
          type: string
        style: form
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
        style: form
      responses:
        "204":
          description: Command sent
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Set Repeat Mode
      tags:
      - Player
      x-spotify-docs-console-url: /console/put-repeat/
      x-spotify-docs-endpoint-name: Set Repeat Mode On User’s Playback
      x-openapi-router-controller: openapi_server.controllers.player_controller
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: repeat
  /me/player/seek:
    put:
      description: |
        Seeks to the given position in the user’s currently playing track.
      operationId: seek_to_position_in_currently_playing_track
      parameters:
      - explode: true
        in: query
        name: position_ms
        required: true
        schema:
          description: |
            The position in milliseconds to seek to. Must be a
            positive number. Passing in a position that is greater than the length of
            the track will cause the player to start playing the next song.
          example: 25000
          title: Position (ms)
          type: integer
        style: form
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
        style: form
      responses:
        "204":
          description: Command sent
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Seek To Position
      tags:
      - Player
      x-spotify-docs-console-url: /console/put-seek/
      x-spotify-docs-endpoint-name: Seek To Position In Currently Playing Track
      x-openapi-router-controller: openapi_server.controllers.player_controller
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: seek
  /me/player/shuffle:
    put:
      description: |
        Toggle shuffle on or off for user’s playback.
      operationId: toggle_shuffle_for_users_playback
      parameters:
      - explode: true
        in: query
        name: state
        required: true
        schema:
          description: |
            **true** : Shuffle user's playback.<br/>
            **false** : Do not shuffle user's playback.
          example: true
          title: State
          type: boolean
        style: form
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
        style: form
      responses:
        "204":
          description: Command sent
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Toggle Playback Shuffle
      tags:
      - Player
      x-spotify-docs-console-url: /console/put-shuffle/?state=true
      x-spotify-docs-endpoint-name: Toggle Shuffle For User’s Playback
      x-openapi-router-controller: openapi_server.controllers.player_controller
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: shuffle
  /me/player/volume:
    put:
      description: |
        Set the volume for the user’s current playback device.
      operationId: set_volume_for_users_playback
      parameters:
      - explode: true
        in: query
        name: volume_percent
        required: true
        schema:
          description: |
            The volume to set. Must be a value from 0 to 100 inclusive.
          example: 50
          title: Volume %
          type: integer
        style: form
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
        style: form
      responses:
        "204":
          description: Command sent
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Set Playback Volume
      tags:
      - Player
      x-spotify-docs-console-url: /console/put-volume/
      x-spotify-docs-endpoint-name: Set Volume For User's Playback
      x-openapi-router-controller: openapi_server.controllers.player_controller
    x-spotify-docs-category: Player
    x-spotify-docs-display-name: volume
  /me/playlists:
    get:
      description: |
        Get a list of the playlists owned or followed by the current Spotify
        user.
      operationId: get_a_list_of_current_users_playlists
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            'The index of the first playlist to return. Default:
            0 (the first object). Maximum offset: 100.000\. Use with `limit` to get the
            next set of playlists.'
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingPlaylistObject'
          description: A paged set of playlists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - playlist-read-private
      summary: |
        Get Current User's Playlists
      tags:
      - Playlists
      - Library
      x-spotify-docs-console-url: /console/get-current-user-playlists/
      x-spotify-docs-endpoint-name: Get a List of Current User's Playlists
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
    x-spotify-docs-category: Playlists
    x-spotify-docs-display-name: current-user-playlists
  /me/shows:
    delete:
      description: |
        Delete one or more shows from current Spotify user's library.
      operationId: remove_shows_user
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
          example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          title: Ids
          type: string
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/save_shows_user_request'
        x-body-name: body
      responses:
        "200":
          description: Show removed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Remove User's Saved Shows
      tags:
      - Shows
      - Library
      x-spotify-docs-console-url: /console/delete-current-user-saved-shows/?ids=5AvwZVawapvyhJUIx71pdJ%2C6ups0LMt1G8n81XLlkbsPo%2C5AvwZVawapvyhJUIx71pdJ
      x-spotify-docs-endpoint-name: Remove User's Saved Shows
      x-openapi-router-controller: openapi_server.controllers.shows_controller
      x-codegen-request-body-name: body
    get:
      description: |
        Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned.
      operationId: get_users_saved_shows
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSavedShowObject'
          description: Pages of shows
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Get User's Saved Shows
      tags:
      - Shows
      - Library
      x-spotify-docs-console-url: /console/get-current-user-saved-shows/
      x-spotify-docs-endpoint-name: Get User's Saved Shows
      x-openapi-router-controller: openapi_server.controllers.shows_controller
    put:
      description: |
        Save one or more shows to current Spotify user's library.
      operationId: save_shows_user
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
          example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          title: Ids
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/save_shows_user_request'
        x-body-name: body
      responses:
        "200":
          description: Show saved
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Save Shows for Current User
      tags:
      - Shows
      - Library
      x-spotify-docs-console-url: /console/put-current-user-saved-shows/?ids=5AvwZVawapvyhJUIx71pdJ%2C6ups0LMt1G8n81XLlkbsPo%2C5AvwZVawapvyhJUIx71pdJ
      x-spotify-docs-endpoint-name: Save Shows for Current User
      x-openapi-router-controller: openapi_server.controllers.shows_controller
      x-codegen-request-body-name: body
    x-spotify-docs-category: Library
    x-spotify-docs-display-name: current-user-saved-shows
  /me/shows/contains:
    get:
      description: |
        Check if one or more shows is already saved in the current Spotify user's library.
      operationId: check_users_saved_shows
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
          example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          title: Ids
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - false
                - true
                items:
                  type: boolean
                type: array
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Check User's Saved Shows
      tags:
      - Shows
      - Library
      x-spotify-docs-console-url: /console/get-current-user-contains-saved-shows/?ids=5AvwZVawapvyhJUIx71pdJ%2C6ups0LMt1G8n81XLlkbsPo%2C5AvwZVawapvyhJUIx71pdJ
      x-spotify-docs-endpoint-name: Check User's Saved Shows
      x-openapi-router-controller: openapi_server.controllers.shows_controller
    x-spotify-docs-category: Library
    x-spotify-docs-display-name: current-user-contains-saved-shows
  /me/top/artists:
    get:
      description: |
        Get the current user's top artists based on calculated affinity.
      operationId: get_users_top_artists
      parameters:
      - explode: true
        in: query
        name: time_range
        required: false
        schema:
          default: medium_term
          description: |
            Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`
          example: medium_term
          title: Time Range
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingArtistObject'
          description: Pages of artists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-top-read
      summary: |
        Get User's Top Artists
      tags:
      - Users
      - Artists
      - Library
      x-spotify-docs-console-url: /console/get-current-user-top-artists-and-tracks/?type=artists
      x-spotify-docs-endpoint-name: Get a User's Top Artists
      x-openapi-router-controller: openapi_server.controllers.users_controller
    x-spotify-docs-category: Personalization
    x-spotify-docs-display-name: current-user-top-artists
  /me/top/tracks:
    get:
      description: |
        Get the current user's top tracks based on calculated affinity.
      operationId: get_users_top_tracks
      parameters:
      - explode: true
        in: query
        name: time_range
        required: false
        schema:
          default: medium_term
          description: |
            Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`
          example: medium_term
          title: Time Range
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingTrackObject'
          description: Pages of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-top-read
      summary: |
        Get User's Top Tracks
      tags:
      - Users
      - Tracks
      - Library
      x-spotify-docs-console-url: /console/get-current-user-top-artists-and-tracks/?type=tracks
      x-spotify-docs-endpoint-name: Get a User's Top Tracks
      x-openapi-router-controller: openapi_server.controllers.users_controller
    x-spotify-docs-category: Personalization
    x-spotify-docs-display-name: current-user-top-tracks
  /me/tracks:
    delete:
      description: |
        Remove one or more tracks from the current user's 'Your Music' library.
      operationId: remove_tracks_user
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/save_albums_user_request'
        x-body-name: body
      responses:
        "200":
          description: Track removed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Remove User's Saved Tracks
      tags:
      - Tracks
      - Library
      x-spotify-docs-console-url: /console/delete-current-user-saved-tracks/?ids=7ouMYWpwJ422jRcDASZB7P%2C4VqPOruhp5EdPBeR92t6lQ%2C2takcwOaAZWiXQijPHIx7B
      x-spotify-docs-endpoint-name: Remove User's Saved Tracks
      x-openapi-router-controller: openapi_server.controllers.tracks_controller
      x-codegen-request-body-name: body
    get:
      description: |
        Get a list of the songs saved in the current Spotify user's 'Your Music' library.
      operationId: get_users_saved_tracks
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSavedTrackObject'
          description: Pages of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Get User's Saved Tracks
      tags:
      - Tracks
      - Library
      x-spotify-docs-console-url: /console/get-current-user-saved-tracks/
      x-spotify-docs-endpoint-name: Get User's Saved Tracks
      x-openapi-router-controller: openapi_server.controllers.tracks_controller
    put:
      description: |
        Save one or more tracks to the current user's 'Your Music' library.
      operationId: save_tracks_user
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/save_tracks_user_request'
        x-body-name: body
      responses:
        "200":
          description: Track saved
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Save Tracks for Current User
      tags:
      - Tracks
      - Library
      x-spotify-docs-console-url: /console/put-current-user-saved-tracks/?ids=7ouMYWpwJ422jRcDASZB7P%2C4VqPOruhp5EdPBeR92t6lQ%2C2takcwOaAZWiXQijPHIx7B
      x-spotify-docs-endpoint-name: Save Tracks for User
      x-openapi-router-controller: openapi_server.controllers.tracks_controller
      x-codegen-request-body-name: body
    x-spotify-docs-category: Library
    x-spotify-docs-display-name: current-user-saved-tracks
  /me/tracks/contains:
    get:
      description: |
        Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.
      operationId: check_users_saved_tracks
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - false
                - true
                items:
                  type: boolean
                type: array
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Check User's Saved Tracks
      tags:
      - Tracks
      - Library
      x-spotify-docs-console-url: /console/get-current-user-contains-saved-tracks/?ids=0udZHhCi7p1YzMlvI4fXoK%2C3SF5puV5eb6bgRSxBeMOk9
      x-spotify-docs-endpoint-name: Check User's Saved Tracks
      x-openapi-router-controller: openapi_server.controllers.tracks_controller
    x-spotify-docs-category: Library
    x-spotify-docs-display-name: current-user-contains-saved-tracks
  /playlists/{playlist_id}:
    get:
      description: |
        Get a playlist owned by a Spotify user.
      operationId: get_playlist
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: fields
        required: false
        schema:
          description: |
            Filters for the query: a comma-separated list of the
            fields to return. If omitted, all fields are returned. For example, to get
            just the playlist''s description and URI: `fields=description,uri`. A dot
            separator can be used to specify non-reoccurring fields, while parentheses
            can be used to specify reoccurring fields within objects. For example, to
            get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.
            Use multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`.
            Fields can be excluded by prefixing them with an exclamation mark, for example:
            `fields=tracks.items(track(name,href,album(!name,href)))`
          example: "items(added_by.id,track(name,href,album(name,href)))"
          title: Fields
          type: string
        style: form
      - explode: true
        in: query
        name: additional_types
        required: false
        schema:
          description: |
            A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
            _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
            In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
          title: Additional Types
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistObject'
          description: A playlist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Playlist
      tags:
      - Playlists
      x-spotify-docs-console-url: /console/get-playlist/?playlist_id=59ZbFPES4DQwEjBpWHzrtC&amp;user_id=spotify
      x-spotify-docs-endpoint-name: Get a Playlist
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
    put:
      description: |
        Change a playlist's name and public/private state. (The user must, of
        course, own the playlist.)
      operationId: change_playlist_details
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/change_playlist_details_request'
        x-body-name: body
      responses:
        "200":
          description: Playlist updated
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Change Playlist Details
      tags:
      - Playlists
      - Library
      x-spotify-docs-console-url: /console/put-playlist/
      x-spotify-docs-endpoint-name: Change a Playlist's Details
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
      x-codegen-request-body-name: body
    x-spotify-docs-category: Playlists
    x-spotify-docs-display-name: playlist
  /playlists/{playlist_id}/followers:
    delete:
      description: |
        Remove the current user as a follower of a playlist.
      operationId: unfollow_playlist
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
        style: simple
      responses:
        "200":
          description: Playlist unfollowed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Unfollow Playlist
      tags:
      - Users
      - Playlists
      x-spotify-docs-console-url: /console/delete-playlist-followers/?playlist_id=2v3iNvBX8Ay1Gt2uXtUKUT&amp;user_id=jmperezperez
      x-spotify-docs-endpoint-name: Unfollow Playlist
      x-openapi-router-controller: openapi_server.controllers.users_controller
    put:
      description: |
        Add the current user as a follower of a playlist.
      operationId: follow_playlist
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/follow_playlist_request'
        x-body-name: body
      responses:
        "200":
          description: Playlist followed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Follow Playlist
      tags:
      - Users
      - Playlists
      x-spotify-docs-console-url: /console/put-playlist-followers/?playlist_id=2v3iNvBX8Ay1Gt2uXtUKUT&amp;body-json=%7B%0D%0A++%22public%22%3A+true%0D%0A%7D&amp;user_id=jmperezperez
      x-spotify-docs-endpoint-name: Follow a Playlist
      x-openapi-router-controller: openapi_server.controllers.users_controller
      x-codegen-request-body-name: body
    x-spotify-docs-category: Follow
    x-spotify-docs-display-name: playlist-followers
  /playlists/{playlist_id}/followers/contains:
    get:
      description: |
        Check to see if one or more Spotify users are following a specified playlist.
      operationId: check_if_user_follows_playlist
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
        style: simple
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of [Spotify User IDs](/documentation/web-api/concepts/spotify-uris-ids) ; the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids.
          example: "jmperezperez,thelinmichael,wizzler"
          title: Spotify user IDs
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - false
                - true
                items:
                  type: boolean
                type: array
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Check if Users Follow Playlist
      tags:
      - Users
      - Playlists
      x-spotify-docs-console-url: "/console/get-playlist-followers-contains/?ids=possan,elogain&amp;user_id=jmperezperez&amp;playlist_id=2v3iNvBX8Ay1Gt2uXtUKUT"
      x-spotify-docs-endpoint-name: Check if Users Follow a Playlist
      x-openapi-router-controller: openapi_server.controllers.users_controller
    x-spotify-docs-category: Follow
    x-spotify-docs-display-name: playlist-followers-contains
  /playlists/{playlist_id}/images:
    get:
      description: |
        Get the current image associated with a specific playlist.
      operationId: get_playlist_cover
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ImageObject'
                type: array
          description: A set of images
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Playlist Cover Image
      tags:
      - Playlists
      x-spotify-docs-console-url: /console/get-playlist-images?playlist_id=3cEYpjA9oz9GiPac4AsH4n
      x-spotify-docs-endpoint-name: Get a Playlist Cover Image
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
    put:
      description: |
        Replace the image used to represent a specific playlist.
      operationId: upload_custom_playlist_cover
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
        style: simple
      requestBody:
        content:
          image/jpeg:
            schema:
              format: base64
              type: string
        description: The new cover image of the playlist as a Base64 encoded JPEG
          image. Maximum payload size is 256KB.
        required: true
        x-body-name: body
      responses:
        "200":
          description: Image uploaded
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - ugc-image-upload
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Add Custom Playlist Cover Image
      tags:
      - Playlists
      x-spotify-docs-console-url: /console/put-playlist-images?playlist_id=3cEYpjA9oz9GiPac4AsH4n
      x-spotify-docs-endpoint-name: Upload a Custom Playlist Cover Image
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
      x-codegen-request-body-name: body
    x-spotify-docs-category: Playlists
    x-spotify-docs-display-name: playlist-images
  /playlists/{playlist_id}/tracks:
    delete:
      description: |
        Remove one or more items from a user's playlist.
      operationId: remove_tracks_playlist
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/remove_tracks_playlist_request'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reorder_or_replace_playlists_tracks_200_response'
          description: A snapshot ID for the playlist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Remove Playlist Items
      tags:
      - Playlists
      - Tracks
      x-spotify-docs-console-url: /console/delete-playlist-tracks/
      x-spotify-docs-endpoint-name: Remove Items from a Playlist
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
      x-codegen-request-body-name: body
    get:
      description: |
        Get full details of the items of a playlist owned by a Spotify user.
      operationId: get_playlists_tracks
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: fields
        required: false
        schema:
          description: |
            Filters for the query: a comma-separated list of the
            fields to return. If omitted, all fields are returned. For example, to get
            just the total number of items and the request limit:<br/>`fields=total,limit`<br/>A
            dot separator can be used to specify non-reoccurring fields, while parentheses
            can be used to specify reoccurring fields within objects. For example, to
            get just the added date and user ID of the adder:<br/>`fields=items(added_at,added_by.id)`<br/>Use
            multiple parentheses to drill down into nested objects, for example:<br/>`fields=items(track(name,href,album(name,href)))`<br/>Fields
            can be excluded by prefixing them with an exclamation mark, for example:<br/>`fields=items.track.album(!external_urls,images)`
          example: "items(added_by.id,track(name,href,album(name,href)))"
          title: Fields
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 100.
          example: 10
          maximum: 100
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      - explode: true
        in: query
        name: additional_types
        required: false
        schema:
          description: |
            A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
            _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
            In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
          title: Additional Types
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingPlaylistTrackObject'
          description: Pages of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - playlist-read-private
      summary: |
        Get Playlist Items
      tags:
      - Playlists
      - Tracks
      x-spotify-docs-console-url: /console/get-playlist-tracks/?playlist_id=21THa8j9TaSGuXYNBU5tsC&amp;user_id=spotify_espa%C3%B1a
      x-spotify-docs-endpoint-name: Get a Playlist's Items
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
    post:
      description: |
        Add one or more items to a user's playlist.
      operationId: add_tracks_to_playlist
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
        style: simple
      - explode: true
        in: query
        name: position
        required: false
        schema:
          description: |
            The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.
          example: 0
          title: Position (append by default)
          type: integer
        style: form
      - explode: true
        in: query
        name: uris
        required: false
        schema:
          description: |
            A comma-separated list of [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>
            _**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._
          example: "spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M"
          title: Spotify Track URIs
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add_tracks_to_playlist_request'
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reorder_or_replace_playlists_tracks_200_response'
          description: A snapshot ID for the playlist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Add Items to Playlist
      tags:
      - Playlists
      - Tracks
      x-spotify-docs-console-url: /console/post-playlist-tracks/
      x-spotify-docs-endpoint-name: Add Items to a Playlist
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
      x-codegen-request-body-name: body
    put:
      description: |
        Either reorder or replace items in a playlist depending on the request's parameters.
        To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.
        To replace items, include `uris` as either a query parameter or in the request's body.
        Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.
        <br/>
        **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.
        These operations can't be applied together in a single request.
      operationId: reorder_or_replace_playlists_tracks
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
        style: simple
      - explode: true
        in: query
        name: uris
        required: false
        schema:
          description: |
            A comma-separated list of [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be set in one request.
          title: Spotify Track URIs
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reorder_or_replace_playlists_tracks_request'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reorder_or_replace_playlists_tracks_200_response'
          description: A snapshot ID for the playlist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Update Playlist Items
      tags:
      - Playlists
      - Tracks
      x-spotify-docs-console-url: /console/put-playlist-tracks/
      x-spotify-docs-endpoint-name: Reorder or Replace a Playlist's Items
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
      x-codegen-request-body-name: body
    x-spotify-docs-category: Playlists
    x-spotify-docs-display-name: playlist-tracks
  /recommendations:
    get:
      description: |
        Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.

        For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.
      operationId: get_recommendations
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The target size of the list of recommended tracks. For seeds with unusually small pools or when highly restrictive filtering is applied, it may be impossible to generate the requested number of recommended tracks. Debugging information for such cases is available in the response. Default: 20\. Minimum: 1\. Maximum: 100.
          example: 10
          maximum: 100
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: seed_artists
        required: false
        schema:
          description: |
            A comma separated list of [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for seed artists.  Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.
          example: 4NHQUGzhtTLFvgF5SZesLK
          title: Spotify Artist ID Seeds
          type: string
        style: form
      - explode: true
        in: query
        name: seed_genres
        required: false
        schema:
          description: |
            A comma separated list of any genres in the set of [available genre seeds](#available-genre-seeds).  Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.
          example: "classical,country"
          title: Genres Seeds
          type: string
        style: form
      - explode: true
        in: query
        name: seed_tracks
        required: false
        schema:
          description: |
            A comma separated list of [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for a seed track.  Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.
          example: 0c6xIDDpzE81m2q797ordA
          title: Spotify Track ID Seeds
          type: string
        style: form
      - explode: true
        in: query
        name: min_acousticness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Acousticness
          type: number
        style: form
      - explode: true
        in: query
        name: max_acousticness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Acousticness
          type: number
        style: form
      - explode: true
        in: query
        name: target_acousticness
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Acousticness
          type: number
        style: form
      - explode: true
        in: query
        name: min_danceability
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Danceability
          type: number
        style: form
      - explode: true
        in: query
        name: max_danceability
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Danceability
          type: number
        style: form
      - explode: true
        in: query
        name: target_danceability
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Danceability
          type: number
        style: form
      - explode: true
        in: query
        name: min_duration_ms
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          title: Min. Duration (ms)
          type: integer
        style: form
      - explode: true
        in: query
        name: max_duration_ms
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          title: Max. Duration (ms)
          type: integer
        style: form
      - explode: true
        in: query
        name: target_duration_ms
        required: false
        schema:
          description: Target duration of the track (ms)
          title: Target Duration (ms)
          type: integer
        style: form
      - explode: true
        in: query
        name: min_energy
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Energy
          type: number
        style: form
      - explode: true
        in: query
        name: max_energy
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Energy
          type: number
        style: form
      - explode: true
        in: query
        name: target_energy
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Energy
          type: number
        style: form
      - explode: true
        in: query
        name: min_instrumentalness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Instrumentalness
          type: number
        style: form
      - explode: true
        in: query
        name: max_instrumentalness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Instrumentalness
          type: number
        style: form
      - explode: true
        in: query
        name: target_instrumentalness
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Instrumentalness
          type: number
        style: form
      - explode: true
        in: query
        name: min_key
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 11
          minimum: 0
          title: Min. Key
          type: integer
        style: form
      - explode: true
        in: query
        name: max_key
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 11
          minimum: 0
          title: Max. Key
          type: integer
        style: form
      - explode: true
        in: query
        name: target_key
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 11
          minimum: 0
          title: Target Key
          type: integer
        style: form
      - explode: true
        in: query
        name: min_liveness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Liveness
          type: number
        style: form
      - explode: true
        in: query
        name: max_liveness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Liveness
          type: number
        style: form
      - explode: true
        in: query
        name: target_liveness
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Liveness
          type: number
        style: form
      - explode: true
        in: query
        name: min_loudness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          title: Min. Loudness
          type: number
        style: form
      - explode: true
        in: query
        name: max_loudness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          title: Max. Loudness
          type: number
        style: form
      - explode: true
        in: query
        name: target_loudness
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          title: Target Loudness
          type: number
        style: form
      - explode: true
        in: query
        name: min_mode
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Mode
          type: integer
        style: form
      - explode: true
        in: query
        name: max_mode
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Mode
          type: integer
        style: form
      - explode: true
        in: query
        name: target_mode
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Mode
          type: integer
        style: form
      - explode: true
        in: query
        name: min_popularity
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 100
          minimum: 0
          title: Min. Popularity
          type: integer
        style: form
      - explode: true
        in: query
        name: max_popularity
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 100
          minimum: 0
          title: Max. Popularity
          type: integer
        style: form
      - explode: true
        in: query
        name: target_popularity
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 100
          minimum: 0
          title: Target Popularity
          type: integer
        style: form
      - explode: true
        in: query
        name: min_speechiness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Speechiness
          type: number
        style: form
      - explode: true
        in: query
        name: max_speechiness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Speechiness
          type: number
        style: form
      - explode: true
        in: query
        name: target_speechiness
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Speechiness
          type: number
        style: form
      - explode: true
        in: query
        name: min_tempo
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          title: Min. Tempo
          type: number
        style: form
      - explode: true
        in: query
        name: max_tempo
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          title: Max. Tempo
          type: number
        style: form
      - explode: true
        in: query
        name: target_tempo
        required: false
        schema:
          description: Target tempo (BPM)
          title: Target Tempo
          type: number
        style: form
      - explode: true
        in: query
        name: min_time_signature
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 11
          title: Min. Time Signature
          type: integer
        style: form
      - explode: true
        in: query
        name: max_time_signature
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          title: Max. Time Signature
          type: integer
        style: form
      - explode: true
        in: query
        name: target_time_signature
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          title: Target Time Signature
          type: integer
        style: form
      - explode: true
        in: query
        name: min_valence
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Valence
          type: number
        style: form
      - explode: true
        in: query
        name: max_valence
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Valence
          type: number
        style: form
      - explode: true
        in: query
        name: target_valence
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Valence
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsObject'
          description: A set of recommendations
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Recommendations
      tags:
      - Tracks
      x-spotify-docs-console-url: /console/get-recommendations/?seed_artists=4NHQUGzhtTLFvgF5SZesLK&amp;seed_tracks=0c6xIDDpzE81m2q797ordA&amp;min_energy=0.4&amp;min_popularity=50&amp;market=US
      x-spotify-docs-endpoint-name: Get Recommendations
      x-openapi-router-controller: openapi_server.controllers.tracks_controller
    x-spotify-docs-category: Browse
    x-spotify-docs-display-name: recommendations
  /recommendations/available-genre-seeds:
    get:
      description: |
        Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations).
      operationId: get_recommendation_genres
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_recommendation_genres_200_response'
          description: A set of genres
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Available Genre Seeds
      tags:
      - Genres
      x-spotify-docs-console-url: /console/get-available-genre-seeds/
      x-spotify-docs-endpoint-name: Get Recommendation Genres
      x-openapi-router-controller: openapi_server.controllers.genres_controller
    x-spotify-docs-category: Browse
    x-spotify-docs-display-name: available-genre-seeds
  /search:
    get:
      description: |
        Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks
        that match a keyword string.<br />
        **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**
      operationId: search
      parameters:
      - explode: true
        in: query
        name: q
        required: true
        schema:
          description: |
            Your search query.

            You can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.

            The `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />
            The `album` filter can be used while searching albums and tracks.<br />
            The `genre` filter can be used while searching artists and tracks.<br />
            The `isrc` and `track` filters can be used while searching tracks.<br />
            The `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />
          example: remaster%20track:Doxy%20artist:Miles%20Davis
          title: Query
          type: string
        style: form
      - explode: false
        in: query
        name: type
        required: true
        schema:
          description: |
            A comma-separated list of item types to search across. Search results include hits
            from all the specified item types. For example: `q=abacab&type=album,track` returns
            both albums and tracks matching "abacab".
          items:
            enum:
            - album
            - artist
            - playlist
            - track
            - show
            - episode
            - audiobook
            type: string
          title: Item type
          type: array
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of results to return in each item type.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first result to return. Use
            with limit to get the next page of search results.
          example: 5
          maximum: 1000
          minimum: 0
          title: Offset
          type: integer
        style: form
      - explode: true
        in: query
        name: include_external
        required: false
        schema:
          description: |
            If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks
            the content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.
          enum:
          - audio
          title: Include External
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search_200_response'
          description: Search response
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Search for Item
      tags:
      - Search
      x-spotify-docs-console-url: /console/get-search-item/?q=tania+bowra&amp;type=artist
      x-spotify-docs-endpoint-name: Search for an Item
      x-openapi-router-controller: openapi_server.controllers.search_controller
    x-spotify-docs-category: Search
    x-spotify-docs-display-name: search-item
  /shows:
    get:
      description: |
        Get Spotify catalog information for several shows based on their Spotify IDs.
      operationId: get_multiple_shows
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
          example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          title: Ids
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_shows_200_response'
          description: A set of shows
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Several Shows
      tags:
      - Shows
      x-spotify-docs-console-url: "/console/get-several-shows/?ids=5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
      x-spotify-docs-endpoint-name: Get Multiple Shows
      x-openapi-router-controller: openapi_server.controllers.shows_controller
    x-spotify-docs-category: Shows
    x-spotify-docs-display-name: several-shows
  /shows/{id}:
    get:
      description: |
        Get Spotify catalog information for a single show identified by its
        unique Spotify ID.
      operationId: get_a_show
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the show.
          example: 38bS44xjbVVZ3No3ByF1dJ
          title: Spotify Show ID
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowObject'
          description: A show
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-read-playback-position
      summary: |
        Get Show
      tags:
      - Shows
      x-spotify-docs-console-url: /console/get-show/?id=38bS44xjbVVZ3No3ByF1dJ
      x-spotify-docs-endpoint-name: Get a Show
      x-openapi-router-controller: openapi_server.controllers.shows_controller
    x-spotify-docs-category: Shows
    x-spotify-docs-display-name: show
  /shows/{id}/episodes:
    get:
      description: |
        Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned.
      operationId: get_a_shows_episodes
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the show.
          example: 38bS44xjbVVZ3No3ByF1dJ
          title: Spotify Show ID
          type: string
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSimplifiedEpisodeObject'
          description: Pages of episodes
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - user-read-playback-position
      summary: |
        Get Show Episodes
      tags:
      - Shows
      - Episodes
      x-spotify-docs-console-url: /console/get-show-episodes/
      x-spotify-docs-endpoint-name: Get a Show's Episodes
      x-openapi-router-controller: openapi_server.controllers.shows_controller
    x-spotify-docs-category: Shows
    x-spotify-docs-display-name: show-episodes
  /tracks:
    get:
      description: |
        Get Spotify catalog information for multiple tracks based on their Spotify IDs.
      operationId: get_several_tracks
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_an_artists_top_tracks_200_response'
          description: A set of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Several Tracks
      tags:
      - Tracks
      x-spotify-docs-console-url: "/console/get-several-tracks/?ids=3n3Ppam7vgaVa1iaRUc9Lp,3twNvmDtFQtAd5gMKedhLD"
      x-spotify-docs-endpoint-name: Get Several Tracks
      x-openapi-router-controller: openapi_server.controllers.tracks_controller
    x-spotify-docs-category: Tracks
    x-spotify-docs-display-name: several-tracks
  /tracks/{id}:
    get:
      description: |
        Get Spotify catalog information for a single track identified by its
        unique Spotify ID.
      operationId: get_track
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the track.
          example: 11dFghVXANMlKmJXsNCbNl
          title: Spotify Track ID
          type: string
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackObject'
          description: A track
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get Track
      tags:
      - Tracks
      x-spotify-docs-console-url: /console/get-track/?id=3n3Ppam7vgaVa1iaRUc9Lp
      x-spotify-docs-endpoint-name: Get a Track
      x-openapi-router-controller: openapi_server.controllers.tracks_controller
    x-spotify-docs-category: Tracks
    x-spotify-docs-display-name: track
  /users/{user_id}:
    get:
      description: |
        Get public profile information about a Spotify user.
      operationId: get_users_profile
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          description: |
            The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids).
          example: smedjan
          title: User ID
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserObject'
          description: A user
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0: []
      summary: |
        Get User's Profile
      tags:
      - Users
      x-spotify-docs-console-url: /console/get-users-profile/?user_id=wizzler
      x-spotify-docs-endpoint-name: Get a User's Profile
      x-openapi-router-controller: openapi_server.controllers.users_controller
    x-spotify-docs-category: Users Profile
    x-spotify-docs-display-name: users-profile
  /users/{user_id}/playlists:
    get:
      description: |
        Get a list of the playlists owned or followed by a Spotify user.
      operationId: get_list_users_playlists
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          description: |
            The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids).
          example: smedjan
          title: User ID
          type: string
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 1
          title: Limit
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first playlist to return. Default:
            0 (the first object). Maximum offset: 100.000\. Use with `limit` to get the
            next set of playlists.
          example: 5
          title: Offset
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingPlaylistObject'
          description: A paged set of playlists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - playlist-read-private
        - playlist-read-collaborative
      summary: |
        Get User's Playlists
      tags:
      - Playlists
      - Users
      x-spotify-docs-console-url: /console/get-playlists/?user_id=wizzler
      x-spotify-docs-endpoint-name: Get a List of a User's Playlists
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
    post:
      description: |
        Create a playlist for a Spotify user. (The playlist will be empty until
        you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).)
      operationId: create_playlist
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          description: |
            The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids).
          example: smedjan
          title: User ID
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_playlist_request'
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistObject'
          description: A playlist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_multiple_albums_401_response'
          description: |
            The app has exceeded its rate limits.
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Create Playlist
      tags:
      - Playlists
      - Library
      x-spotify-docs-console-url: /console/post-playlists/
      x-spotify-docs-endpoint-name: Create a Playlist
      x-openapi-router-controller: openapi_server.controllers.playlists_controller
      x-codegen-request-body-name: body
    x-spotify-docs-category: Playlists
    x-spotify-docs-display-name: playlists
components:
  parameters:
    PathAlbumId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the album.
        example: 4aawyAB9vmqN3uQ7FjRGTy
        title: Spotify Album ID
        type: string
      style: simple
    PathArtistId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
        example: 0TnOYISbd1XYRBk9myaseg
        title: Spotify Artist ID
        type: string
      style: simple
    PathAudiobookId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
          for the audiobook.
        example: 7iHfbu1YPACw6oZPAFJtqe
        title: Spotify Audiobook ID
        type: string
      style: simple
    PathChapterId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
          for the chapter.
        example: 0D5wENdkdwbqlrHoaJ9g29
        title: Spotify Chapter ID
        type: string
      style: simple
    PathPlaylistId:
      explode: false
      in: path
      name: playlist_id
      required: true
      schema:
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
        example: 3cEYpjA9oz9GiPac4AsH4n
        title: Playlist ID
        type: string
      style: simple
    PathShowId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
          for the show.
        example: 38bS44xjbVVZ3No3ByF1dJ
        title: Spotify Show ID
        type: string
      style: simple
    PathUserId:
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        description: |
          The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids).
        example: smedjan
        title: User ID
        type: string
      style: simple
    QueryAdditionalTypes:
      explode: true
      in: query
      name: additional_types
      required: false
      schema:
        description: |
          A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
          _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
          In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
        title: Additional Types
        type: string
      style: form
    QueryAlbumIds:
      explode: true
      in: query
      name: ids
      required: true
      schema:
        description: |
          A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
        example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
        title: Spotify Album IDs
        type: string
      style: form
    QueryAudiobookIds:
      explode: true
      in: query
      name: ids
      required: true
      schema:
        description: |
          A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
        example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
        title: Spotify Audiobook IDs
        type: string
      style: form
    QueryChapterIds:
      explode: true
      in: query
      name: ids
      required: true
      schema:
        description: |
          A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU`. Maximum: 50 IDs.
        example: "0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU,0D5wENdkdwbqlrHoaJ9g29"
        title: Spotify Chapter IDs
        type: string
      style: form
    QueryIncludeGroups:
      explode: true
      in: query
      name: include_groups
      required: false
      schema:
        description: |
          A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>
          Valid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.
        example: "single,appears_on"
        title: "Groups to include (single, album, appears_on, compilation)"
        type: string
      style: form
    QueryLimit:
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 20
        description: |
          The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
        example: 10
        maximum: 50
        minimum: 1
        title: Limit
        type: integer
      style: form
    QueryMarket:
      explode: true
      in: query
      name: market
      required: false
      schema:
        description: |
          An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
            If a country code is specified, only content that is available in that market will be returned.<br/>
            If a valid user access token is specified in the request header, the country associated with
            the user account will take priority over this parameter.<br/>
            _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
            Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
        example: ES
        title: Market
        type: string
      style: form
    QueryOffset:
      explode: true
      in: query
      name: offset
      required: false
      schema:
        default: 0
        description: |
          The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
        example: 5
        title: Offset
        type: integer
      style: form
    QueryShowIds:
      explode: true
      in: query
      name: ids
      required: true
      schema:
        description: |
          A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
        example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
        title: Ids
        type: string
      style: form
    QueryTrackIds:
      explode: true
      in: query
      name: ids
      required: true
      schema:
        description: |
          A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
        example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
        title: Spotify Track IDs
        type: string
      style: form
  responses:
    ArrayOfBooleans:
      content:
        application/json:
          schema:
            example:
            - false
            - true
            items:
              type: boolean
            type: array
      description: Array of booleans
    ArrayOfImages:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/ImageObject'
            type: array
      description: A set of images
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_multiple_albums_401_response'
      description: |
        The request contains malformed data in path, query parameters, or body.
    CursorPagedArtists:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_followed_200_response'
      description: A paged set of artists
    CursorPagedPlayHistory:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CursorPagingPlayHistoryObject'
      description: A paged set of tracks
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_multiple_albums_401_response'
      description: |
        Bad OAuth request (wrong consumer key, bad nonce, expired
        timestamp...). Unfortunately, re-authenticating the user won't help here.
    ManyAlbums:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_multiple_albums_200_response'
      description: A set of albums
    ManyArtists:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_multiple_artists_200_response'
      description: A set of artists
    ManyAudioFeatures:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_several_audio_features_200_response'
      description: A set of audio features
    ManyAudiobooks:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_multiple_audiobooks_200_response'
      description: A set of audiobooks
    ManyChapters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_several_chapters_200_response'
      description: A set of chapters
    ManyDevices:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DevicesObject'
      description: A set of devices
    ManyEpisodes:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_multiple_episodes_200_response'
      description: A set of episodes
    ManyGenres:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_recommendation_genres_200_response'
      description: A set of genres
    ManySimplifiedShows:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_multiple_shows_200_response'
      description: A set of shows
    ManyTracks:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_an_artists_top_tracks_200_response'
      description: A set of tracks
    Markets:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_available_markets_200_response'
      description: A markets object with an array of country codes
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_multiple_albums_401_response'
      description: |
        The requested resource cannot be found.
    OneAlbum:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlbumObject'
      description: An album
    OneArtist:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArtistObject'
      description: An artist
    OneAudioAnalysis:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AudioAnalysisObject'
      description: Audio analysis for one track
    OneAudioFeatures:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AudioFeaturesObject'
      description: Audio features for one track
    OneAudiobook:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AudiobookObject'
      description: An Audiobook
    OneCategory:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CategoryObject'
      description: A category
    OneChapter:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChapterObject'
      description: A Chapter
    OneCurrentlyPlaying:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CurrentlyPlayingContextObject'
      description: Information about playback
    OneCurrentlyPlayingTrack:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CurrentlyPlayingObject'
      description: Information about the currently playing track
    OneEpisode:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EpisodeObject'
      description: An episode
    OnePlaylist:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlaylistObject'
      description: A playlist
    OnePrivateUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PrivateUserObject'
      description: A user
    OnePublicUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PublicUserObject'
      description: A user
    OneRecommendations:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RecommendationsObject'
      description: A set of recommendations
    OneShow:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ShowObject'
      description: A show
    OneTrack:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrackObject'
      description: A track
    PagedAlbums:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_new_releases_200_response'
      description: A paged set of albums
    PagedCategories:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_categories_200_response'
      description: A paged set of categories
    PagedFeaturedPlaylists:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingFeaturedPlaylistObject'
      description: A paged set of playlists
    PagedPlaylists:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingPlaylistObject'
      description: A paged set of playlists
    PagingArtistObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingArtistObject'
      description: Pages of artists
    PagingPlaylistTrackObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingPlaylistTrackObject'
      description: Pages of tracks
    PagingSavedAlbumObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSavedAlbumObject'
      description: Pages of albums
    PagingSavedAudiobookObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSavedAudiobookObject'
      description: Pages of saved audiobooks
    PagingSavedEpisodeObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSavedEpisodeObject'
      description: Pages of episodes
    PagingSavedShowObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSavedShowObject'
      description: Pages of shows
    PagingSavedTrackObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSavedTrackObject'
      description: Pages of tracks
    PagingSimplifiedAlbumObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSimplifiedAlbumObject'
      description: Pages of albums
    PagingSimplifiedArtistObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSimplifiedArtistObject'
      description: Pages of artists
    PagingSimplifiedAudiobookObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSimplifiedAudiobookObject'
      description: Pages of audiobooks
    PagingSimplifiedChapterObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSimplifiedChapterObject'
      description: Pages of chapters
    PagingSimplifiedEpisodeObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSimplifiedEpisodeObject'
      description: Pages of episodes
    PagingSimplifiedShowObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSimplifiedShowObject'
      description: Pages of shows
    PagingSimplifiedTrackObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSimplifiedTrackObject'
      description: Pages of tracks
    PagingTrackObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingTrackObject'
      description: Pages of tracks
    PlaylistSnapshotId:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/reorder_or_replace_playlists_tracks_200_response'
      description: A snapshot ID for the playlist
    Queue:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueueObject'
      description: Information about the queue
    SearchItems:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/search_200_response'
      description: Search response
    TooManyRequests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_multiple_albums_401_response'
      description: |
        The app has exceeded its rate limits.
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_multiple_albums_401_response'
      description: |
        Bad or expired token. This can happen if the user revoked a token or
        the access token has expired. You should re-authenticate the user.
  schemas:
    AlbumBase:
      properties:
        album_type:
          description: |
            The type of the album.
          enum:
          - album
          - single
          - compilation
          example: compilation
          title: album_type
          type: string
        available_markets:
          description: |
            The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._
          example:
          - CA
          - BR
          - IT
          items:
            type: string
          title: available_markets
          type: array
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            Known external URLs for this album.
          title: external_urls
        href:
          description: |
            A link to the Web API endpoint providing full details of the album.
          title: href
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.
          example: 2up3OPMp9Tb4dAKM2erWXQ
          title: id
          type: string
        images:
          description: |
            The cover art for the album in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          title: images
          type: array
        name:
          description: |
            The name of the album. In case of an album takedown, the value may be an empty string.
          title: name
          type: string
        release_date:
          description: |
            The date the album was first released.
          example: 1981-12
          title: release_date
          type: string
        release_date_precision:
          description: |
            The precision with which `release_date` value is known.
          enum:
          - year
          - month
          - day
          example: year
          title: release_date_precision
          type: string
        restrictions:
          allOf:
          - $ref: '#/components/schemas/AlbumRestrictionObject'
          description: |
            Included in the response when a content restriction is applied.
          title: restrictions
        total_tracks:
          description: The number of tracks in the album.
          example: 9
          title: total_tracks
          type: integer
        type:
          description: |
            The object type.
          enum:
          - album
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.
          example: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
          title: uri
          type: string
      required:
      - album_type
      - available_markets
      - external_urls
      - href
      - id
      - images
      - name
      - release_date
      - release_date_precision
      - total_tracks
      - type
      - uri
      title: AlbumBase
      type: object
    AlbumObject:
      allOf:
      - $ref: '#/components/schemas/AlbumBase'
      - properties:
          artists:
            description: |
              The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
            items:
              $ref: '#/components/schemas/SimplifiedArtistObject'
            type: array
          copyrights:
            description: The copyright statements of the album.
            items:
              $ref: '#/components/schemas/CopyrightObject'
            type: array
          external_ids:
            allOf:
            - $ref: '#/components/schemas/ExternalIdObject'
            description: |
              Known external IDs for the album.
          genres:
            description: "A list of the genres used to classify the album. (If not\
              \ yet classified, the array is empty.)"
            items:
              type: string
            type: array
          label:
            description: The label for the album.
            type: string
          popularity:
            description: "The popularity of the album, with 100 being the most popular.\
              \ The popularity is calculated from the popularity of the album's individual\
              \ tracks."
            type: integer
          tracks:
            allOf:
            - $ref: '#/components/schemas/PagingSimplifiedTrackObject'
            description: |
              The tracks of the album.
        type: object
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        copyrights:
        - text: text
          type: type
        - text: text
          type: type
        available_markets:
        - CA
        - BR
        - IT
        restrictions: ""
        release_date_precision: year
        label: label
        type: album
        uri: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
        external_ids: ""
        tracks: ""
        total_tracks: 9
        release_date: 1981-12
        artists:
        - name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
        - name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
        genres:
        - genres
        - genres
        popularity: 0
        name: name
        album_type: compilation
        href: href
        id: 2up3OPMp9Tb4dAKM2erWXQ
        external_urls: ""
      title: AlbumObject
      x-spotify-docs-type: AlbumObject
    AlbumRestrictionObject:
      properties:
        reason:
          description: |
            The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.
            Additional reasons may be added in the future.
          enum:
          - market
          - product
          - explicit
          title: reason
          type: string
      title: AlbumRestrictionObject
      type: object
      x-spotify-docs-type: AlbumRestrictionObject
    ArtistObject:
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        followers: ""
        genres:
        - Prog rock
        - Grunge
        popularity: 0
        name: name
        href: href
        id: id
        type: artist
        external_urls: ""
        uri: uri
      properties:
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            Known external URLs for this artist.
          title: external_urls
        followers:
          allOf:
          - $ref: '#/components/schemas/FollowersObject'
          description: |
            Information about the followers of the artist.
          title: followers
        genres:
          description: |
            A list of the genres the artist is associated with. If not yet classified, the array is empty.
          example:
          - Prog rock
          - Grunge
          items:
            type: string
          title: genres
          type: array
        href:
          description: |
            A link to the Web API endpoint providing full details of the artist.
          title: href
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
          title: id
          type: string
        images:
          description: |
            Images of the artist in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          title: images
          type: array
        name:
          description: |
            The name of the artist.
          title: name
          type: string
        popularity:
          description: |
            The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.
          title: popularity
          type: integer
        type:
          description: |
            The object type.
          enum:
          - artist
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
          title: uri
          type: string
      title: ArtistObject
      type: object
      x-spotify-docs-type: ArtistObject
    AudioAnalysisObject:
      example:
        meta:
          detailed_status: OK
          status_code: 0
          analyzer_version: 4.0.0
          analysis_time: 6.93906
          input_process: libvorbisfile L+R 44100->22050
          platform: Linux
          timestamp: 1495193577
        beats:
        - duration: 2.18749
          confidence: 0.925
          start: 0.49567
        - duration: 2.18749
          confidence: 0.925
          start: 0.49567
        tatums:
        - duration: 2.18749
          confidence: 0.925
          start: 0.49567
        - duration: 2.18749
          confidence: 0.925
          start: 0.49567
        track:
          mode_confidence: 0.485
          loudness: -5.883
          tempo: 118.211
          codestring: codestring
          echoprint_version: 4.15
          key_confidence: 0.408
          offset_seconds: 0
          duration: 207.95985
          mode: 0
          tempo_confidence: 0.73
          window_seconds: 0
          start_of_fade_out: 201.13705
          synch_version: 1
          code_version: 3.15
          time_signature_confidence: 0.994
          analysis_channels: 1
          key: 9
          time_signature: 4
          sample_md5: sample_md5
          end_of_fade_in: 0
          echoprintstring: echoprintstring
          analysis_sample_rate: 22050
          synchstring: synchstring
          rhythmstring: rhythmstring
          rhythm_version: 1
          num_samples: 4585515
        bars:
        - duration: 2.18749
          confidence: 0.925
          start: 0.49567
        - duration: 2.18749
          confidence: 0.925
          start: 0.49567
        sections:
        - duration: 6.97092
          mode: 0.8008281904610115
          mode_confidence: 0.471
          tempo_confidence: 0.647
          confidence: 1
          loudness: -14.938
          start: 0
          tempo: 113.178
          time_signature_confidence: 1
          key_confidence: 0.297
          key: 9
          time_signature: 4
        - duration: 6.97092
          mode: 0.8008281904610115
          mode_confidence: 0.471
          tempo_confidence: 0.647
          confidence: 1
          loudness: -14.938
          start: 0
          tempo: 113.178
          time_signature_confidence: 1
          key_confidence: 0.297
          key: 9
          time_signature: 4
        segments:
        - duration: 0.19891
          timbre:
          - 42.115
          - 64.373
          - -0.233
          loudness_max: -14.25
          loudness_max_time: 0.07305
          confidence: 0.435
          start: 0.70154
          loudness_end: 0
          pitches:
          - 0.212
          - 0.141
          - 0.294
          loudness_start: -23.053
        - duration: 0.19891
          timbre:
          - 42.115
          - 64.373
          - -0.233
          loudness_max: -14.25
          loudness_max_time: 0.07305
          confidence: 0.435
          start: 0.70154
          loudness_end: 0
          pitches:
          - 0.212
          - 0.141
          - 0.294
          loudness_start: -23.053
      properties:
        bars:
          description: The time intervals of the bars throughout the track. A bar
            (or measure) is a segment of time defined as a given number of beats.
          items:
            $ref: '#/components/schemas/TimeIntervalObject'
          title: bars
          type: array
        beats:
          description: "The time intervals of beats throughout the track. A beat is\
            \ the basic time unit of a piece of music; for example, each tick of a\
            \ metronome. Beats are typically multiples of tatums."
          items:
            $ref: '#/components/schemas/TimeIntervalObject'
          title: beats
          type: array
        meta:
          $ref: '#/components/schemas/AudioAnalysisObject_meta'
        sections:
          description: "Sections are defined by large variations in rhythm or timbre,\
            \ e.g. chorus, verse, bridge, guitar solo, etc. Each section contains\
            \ its own descriptions of tempo, key, mode, time_signature, and loudness."
          items:
            $ref: '#/components/schemas/SectionObject'
          title: sections
          type: array
        segments:
          description: Each segment contains a roughly conisistent sound throughout
            its duration.
          items:
            $ref: '#/components/schemas/SegmentObject'
          title: segments
          type: array
        tatums:
          description: A tatum represents the lowest regular pulse train that a listener
            intuitively infers from the timing of perceived musical events (segments).
          items:
            $ref: '#/components/schemas/TimeIntervalObject'
          title: tatums
          type: array
        track:
          $ref: '#/components/schemas/AudioAnalysisObject_track'
      title: AudioAnalysisObject
      type: object
      x-spotify-docs-type: AudioAnalysisObject
    AudioFeaturesObject:
      example:
        track_href: |
          https://api.spotify.com/v1/tracks/2takcwOaAZWiXQijPHIx7B
        loudness: -5.883
        liveness: 0.0866
        tempo: 118.211
        valence: 0.428
        instrumentalness: 0.00686
        type: audio_features
        danceability: 0.585
        uri: spotify:track:2takcwOaAZWiXQijPHIx7B
        speechiness: 0.0556
        duration_ms: 237040
        mode: 0
        acousticness: 0.00242
        id: 2takcwOaAZWiXQijPHIx7B
        analysis_url: |
          https://api.spotify.com/v1/audio-analysis/2takcwOaAZWiXQijPHIx7B
        key: 9
        energy: 0.842
        time_signature: 4
      properties:
        acousticness:
          description: |
            A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
          example: 0.00242
          format: float
          maximum: 1
          minimum: 0
          title: acousticness
          type: number
          x-spotify-docs-type: Float
        analysis_url:
          description: |
            A URL to access the full audio analysis of this track. An access token is required to access this data.
          example: |
            https://api.spotify.com/v1/audio-analysis/2takcwOaAZWiXQijPHIx7B
          title: analysis_url
          type: string
        danceability:
          description: |
            Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
          example: 0.585
          format: float
          title: danceability
          type: number
          x-spotify-docs-type: Float
        duration_ms:
          description: |
            The duration of the track in milliseconds.
          example: 237040
          title: duration_ms
          type: integer
        energy:
          description: |
            Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
          example: 0.842
          format: float
          title: energy
          type: number
          x-spotify-docs-type: Float
        id:
          description: |
            The Spotify ID for the track.
          example: 2takcwOaAZWiXQijPHIx7B
          title: id
          type: string
        instrumentalness:
          description: |
            Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
          example: 0.00686
          format: float
          title: instrumentalness
          type: number
          x-spotify-docs-type: Float
        key:
          description: |
            The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
          example: 9
          maximum: 11
          minimum: -1
          title: Key
          type: integer
        liveness:
          description: |
            Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
          example: 0.0866
          format: float
          title: liveness
          type: number
          x-spotify-docs-type: Float
        loudness:
          description: |
            The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.
          example: -5.883
          format: float
          title: Loudness
          type: number
          x-spotify-docs-type: Float
        mode:
          description: |
            Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
          example: 0
          title: Mode
          type: integer
        speechiness:
          description: |
            Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
          example: 0.0556
          format: float
          title: speechiness
          type: number
          x-spotify-docs-type: Float
        tempo:
          description: |
            The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
          example: 118.211
          format: float
          title: Tempo
          type: number
          x-spotify-docs-type: Float
        time_signature:
          description: "An estimated time signature. The time signature (meter) is\
            \ a notational convention to specify how many beats are in each bar (or\
            \ measure). The time signature ranges from 3 to 7 indicating time signatures\
            \ of \"3/4\", to \"7/4\"."
          example: 4
          maximum: 7
          minimum: 3
          title: TimeSignature
          type: integer
        track_href:
          description: |
            A link to the Web API endpoint providing full details of the track.
          example: |
            https://api.spotify.com/v1/tracks/2takcwOaAZWiXQijPHIx7B
          title: track_href
          type: string
        type:
          description: |
            The object type.
          enum:
          - audio_features
          title: type
          type: string
        uri:
          description: |
            The Spotify URI for the track.
          example: spotify:track:2takcwOaAZWiXQijPHIx7B
          title: uri
          type: string
        valence:
          description: |
            A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
          example: 0.428
          format: float
          maximum: 1
          minimum: 0
          title: valence
          type: number
          x-spotify-docs-type: Float
      title: AudioFeaturesObject
      type: object
      x-spotify-docs-type: AudioFeaturesObject
    AudiobookBase:
      properties:
        authors:
          description: |
            The author(s) for the audiobook.
          items:
            $ref: '#/components/schemas/AuthorObject'
          title: authors
          type: array
        available_markets:
          description: |
            A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          title: available_markets
          type: array
        copyrights:
          description: |
            The copyright statements of the audiobook.
          items:
            $ref: '#/components/schemas/CopyrightObject'
          title: copyrights
          type: array
        description:
          description: |
            A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
          title: description
          type: string
        edition:
          description: |
            The edition of the audiobook.
          example: Unabridged
          title: edition
          type: string
        explicit:
          description: |
            Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown).
          title: explicit
          type: boolean
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            External URLs for this audiobook.
          title: external_urls
        href:
          description: |
            A link to the Web API endpoint providing full details of the audiobook.
          title: href
          type: string
        html_description:
          description: |
            A description of the audiobook. This field may contain HTML tags.
          title: html_description
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
          title: id
          type: string
        images:
          description: |
            The cover art for the audiobook in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          title: images
          type: array
        languages:
          description: |
            A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
          items:
            type: string
          title: languages
          type: array
        media_type:
          description: |
            The media type of the audiobook.
          title: media_type
          type: string
        name:
          description: |
            The name of the audiobook.
          title: name
          type: string
        narrators:
          description: |
            The narrator(s) for the audiobook.
          items:
            $ref: '#/components/schemas/NarratorObject'
          title: narrators
          type: array
        publisher:
          description: |
            The publisher of the audiobook.
          title: publisher
          type: string
        total_chapters:
          description: |
            The number of chapters in this audiobook.
          title: total_chapters
          type: integer
        type:
          description: |
            The object type.
          enum:
          - audiobook
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
          title: uri
          type: string
      required:
      - authors
      - available_markets
      - copyrights
      - description
      - explicit
      - external_urls
      - href
      - html_description
      - id
      - images
      - languages
      - media_type
      - name
      - narrators
      - publisher
      - total_chapters
      - type
      - uri
      title: AudiobookBase
      type: object
    AudiobookObject:
      allOf:
      - $ref: '#/components/schemas/AudiobookBase'
      - properties:
          chapters:
            $ref: '#/components/schemas/AudiobookObject_allOf_chapters'
        required:
        - chapters
        type: object
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        languages:
        - languages
        - languages
        copyrights:
        - text: text
          type: type
        - text: text
          type: type
        chapters: null
        available_markets:
        - available_markets
        - available_markets
        description: description
        edition: Unabridged
        type: audiobook
        html_description: html_description
        uri: uri
        explicit: true
        media_type: media_type
        name: name
        total_chapters: 0
        publisher: publisher
        href: href
        id: id
        external_urls: ""
        authors:
        - name: name
        - name: name
        narrators:
        - name: name
        - name: name
      title: AudiobookObject
      x-spotify-docs-type: AudiobookObject
    AuthorObject:
      example:
        name: name
      properties:
        name:
          description: |
            The name of the author.
          title: name
          type: string
      title: AuthorObject
      type: object
      x-spotify-docs-type: AuthorObject
    CategoryObject:
      example:
        name: EQUAL
        href: href
        id: equal
        icons:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
      properties:
        href:
          description: |
            A link to the Web API endpoint returning full details of the category.
          title: href
          type: string
        icons:
          description: |
            The category icon, in various sizes.
          items:
            $ref: '#/components/schemas/ImageObject'
          title: icons
          type: array
        id:
          description: |
            The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) of the category.
          example: equal
          title: id
          type: string
        name:
          description: |
            The name of the category.
          example: EQUAL
          title: name
          type: string
      required:
      - href
      - icons
      - id
      - name
      title: CategoryObject
      type: object
      x-spotify-docs-type: CategoryObject
    ChapterBase:
      properties:
        audio_preview_url:
          description: |
            A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
          example: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          title: audio_preview_url
          type: string
        available_markets:
          description: |
            A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          title: available_markets
          type: array
        chapter_number:
          description: |
            The number of the chapter
          example: 1
          title: chapter_number
          type: integer
        description:
          description: |
            A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
          example: |
            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
          title: description
          type: string
        duration_ms:
          description: |
            The episode length in milliseconds.
          example: 1686230
          title: duration_ms
          type: integer
        explicit:
          description: |
            Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
          title: explicit
          type: boolean
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            External URLs for this episode.
          title: external_urls
        href:
          description: |
            A link to the Web API endpoint providing full details of the episode.
          example: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          title: href
          type: string
        html_description:
          description: |
            A description of the episode. This field may contain HTML tags.
          example: |
            <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
          title: html_description
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
          example: 5Xt5DXGzch68nYYamXrNxZ
          title: id
          type: string
        images:
          description: |
            The cover art for the episode in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          title: images
          type: array
        is_playable:
          description: |
            True if the episode is playable in the given market. Otherwise false.
          title: is_playable
          type: boolean
        languages:
          description: |
            A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
          example:
          - fr
          - en
          items:
            type: string
          title: languages
          type: array
        name:
          description: |
            The name of the episode.
          example: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          title: name
          type: string
        release_date:
          description: |
            The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
          example: 1981-12-15
          title: release_date
          type: string
        release_date_precision:
          description: |
            The precision with which `release_date` value is known.
          enum:
          - year
          - month
          - day
          example: day
          title: release_date_precision
          type: string
        restrictions:
          allOf:
          - $ref: '#/components/schemas/ChapterRestrictionObject'
          description: |
            Included in the response when a content restriction is applied.
          title: restrictions
        resume_point:
          allOf:
          - $ref: '#/components/schemas/ResumePointObject'
          description: |
            The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.
          title: resume_point
        type:
          description: |
            The object type.
          enum:
          - episode
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
          example: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          title: uri
          type: string
      required:
      - audio_preview_url
      - chapter_number
      - description
      - duration_ms
      - explicit
      - external_urls
      - href
      - html_description
      - id
      - images
      - is_playable
      - languages
      - name
      - release_date
      - release_date_precision
      - resume_point
      - type
      - uri
      title: ChapterBase
      type: object
    ChapterObject:
      allOf:
      - $ref: '#/components/schemas/ChapterBase'
      - properties:
          audiobook:
            allOf:
            - $ref: '#/components/schemas/SimplifiedAudiobookObject'
            description: |
              The audiobook for which the chapter belongs.
        required:
        - audiobook
        type: object
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        audiobook: ""
        languages:
        - fr
        - en
        chapter_number: 1
        available_markets:
        - available_markets
        - available_markets
        description: |
          A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
        restrictions: ""
        release_date_precision: day
        type: episode
        html_description: |
          <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
        uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
        audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
        duration_ms: 1686230
        explicit: true
        is_playable: true
        resume_point: ""
        release_date: 1981-12-15
        name: |
          Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
        href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
        id: 5Xt5DXGzch68nYYamXrNxZ
        external_urls: ""
      title: ChapterObject
      type: object
      x-spotify-docs-type: ChapterObject
    ChapterRestrictionObject:
      properties:
        reason:
          description: |
            The reason for the restriction. Supported values:
            - `market` - The content item is not available in the given market.
            - `product` - The content item is not available for the user's subscription type.
            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.
            - `payment_required` - Payment is required to play the content item.

            Additional reasons may be added in the future.
            **Note**: If you use this field, make sure that your application safely handles unknown values.
          title: reason
          type: string
      title: ChapterRestrictionObject
      type: object
      x-spotify-docs-type: ChapterRestrictionObject
    ContextObject:
      properties:
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: External URLs for this context.
          title: external_urls
        href:
          description: A link to the Web API endpoint providing full details of the
            track.
          title: href
          type: string
        type:
          description: |
            The object type, e.g. "artist", "playlist", "album", "show".
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context.
          title: uri
          type: string
      title: ContextObject
      type: object
      x-spotify-docs-type: ContextObject
    CopyrightObject:
      example:
        text: text
        type: type
      properties:
        text:
          description: |
            The copyright text for this content.
          title: text
          type: string
        type:
          description: |
            The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright.
          title: type
          type: string
      title: CopyrightObject
      type: object
      x-spotify-docs-type: CopyrightObject
    CurrentlyPlayingContextObject:
      example:
        currently_playing_type: currently_playing_type
        item:
          disc_number: 0
          album: ""
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: track
          external_ids: ""
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls: ""
        shuffle_state: true
        context: ""
        is_playing: true
        progress_ms: 0
        actions: ""
        device: ""
        repeat_state: repeat_state
        timestamp: 6
      properties:
        actions:
          allOf:
          - $ref: '#/components/schemas/DisallowsObject'
          description: |
            Allows to update the user interface based on which playback actions are available within the current context.
          title: actions
        context:
          allOf:
          - $ref: '#/components/schemas/ContextObject'
          description: A Context Object. Can be `null`.
          title: context
        currently_playing_type:
          description: |
            The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.
          title: currently_playing_type
          type: string
        device:
          allOf:
          - $ref: '#/components/schemas/DeviceObject'
          description: |
            The device that is currently active.
          title: device
        is_playing:
          description: "If something is currently playing, return `true`."
          title: is_playing
          type: boolean
        item:
          $ref: '#/components/schemas/CurrentlyPlayingContextObject_item'
        progress_ms:
          description: Progress into the currently playing track or episode. Can be
            `null`.
          title: progress_ms
          type: integer
        repeat_state:
          description: "off, track, context"
          title: repeat_state
          type: string
        shuffle_state:
          description: If shuffle is on or off.
          title: shuffle_state
          type: boolean
        timestamp:
          description: Unix Millisecond Timestamp when data was fetched.
          title: timestamp
          type: integer
      title: CurrentlyPlayingContextObject
      type: object
      x-spotify-docs-type: CurrentlyPlayingContextObject
    CurrentlyPlayingObject:
      example:
        currently_playing_type: currently_playing_type
        item:
          disc_number: 0
          album: ""
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: track
          external_ids: ""
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls: ""
        context: ""
        is_playing: true
        progress_ms: 0
        timestamp: 6
      properties:
        context:
          allOf:
          - $ref: '#/components/schemas/ContextObject'
          description: A Context Object. Can be `null`.
          title: context
        currently_playing_type:
          description: |
            The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.
          title: currently_playing_type
          type: string
        is_playing:
          description: "If something is currently playing, return `true`."
          title: is_playing
          type: boolean
        item:
          $ref: '#/components/schemas/CurrentlyPlayingContextObject_item'
        progress_ms:
          description: Progress into the currently playing track or episode. Can be
            `null`.
          title: progress_ms
          type: integer
        timestamp:
          description: Unix Millisecond Timestamp when data was fetched
          title: timestamp
          type: integer
      title: CurrentlyPlayingObject
      type: object
      x-spotify-docs-type: CurrentlyPlayingObject
    CursorObject:
      properties:
        after:
          description: The cursor to use as key to find the next page of items.
          title: after
          type: string
        before:
          description: The cursor to use as key to find the previous page of items.
          title: before
          type: string
      title: CursorObject
      type: object
      x-spotify-docs-type: CursorObject
    CursorPagingObject:
      properties:
        cursors:
          allOf:
          - $ref: '#/components/schemas/CursorObject'
          description: The cursors used to find the next set of items.
          title: cursors
        href:
          description: A link to the Web API endpoint returning the full result of
            the request.
          title: href
          type: string
        limit:
          description: The maximum number of items in the response (as set in the
            query or by default).
          title: limit
          type: integer
        next:
          description: URL to the next page of items. ( `null` if none)
          title: next
          type: string
        total:
          description: The total number of items available to return.
          title: total
          type: integer
      title: CursorPagingObject
      type: object
      x-spotify-docs-type: CursorPagingObject
    CursorPagingPlayHistoryObject:
      allOf:
      - $ref: '#/components/schemas/CursorPagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/PlayHistoryObject'
            type: array
        type: object
      example:
        next: next
        cursors: ""
        total: 6
        limit: 0
        href: href
        items:
        - context: ""
          played_at: 2000-01-23T04:56:07.000+00:00
          track: ""
        - context: ""
          played_at: 2000-01-23T04:56:07.000+00:00
          track: ""
      title: CursorPagingPlayHistoryObject
      type: object
      x-spotify-docs-type: PagingTrackObject
    CursorPagingSimplifiedArtistObject:
      allOf:
      - $ref: '#/components/schemas/CursorPagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/ArtistObject'
            type: array
        type: object
      example:
        next: next
        cursors: ""
        total: 6
        limit: 0
        href: href
        items:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          followers: ""
          genres:
          - Prog rock
          - Grunge
          popularity: 0
          name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          followers: ""
          genres:
          - Prog rock
          - Grunge
          popularity: 0
          name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
      title: CursorPagingSimplifiedArtistObject
      type: object
      x-spotify-docs-type: PagingArtistObject
    DeviceObject:
      example:
        is_active: true
        is_private_session: true
        is_restricted: true
        name: Kitchen speaker
        id: id
        type: computer
        volume_percent: 59
      properties:
        id:
          description: The device ID.
          nullable: true
          title: id
          type: string
        is_active:
          description: If this device is the currently active device.
          title: is_active
          type: boolean
        is_private_session:
          description: If this device is currently in a private session.
          title: is_private_session
          type: boolean
        is_restricted:
          description: Whether controlling this device is restricted. At present if
            this is "true" then no Web API commands will be accepted by this device.
          title: is_restricted
          type: boolean
        name:
          description: A human-readable name for the device. Some devices have a name
            that the user can configure (e.g. \"Loudest speaker\") and some devices
            have a generic name associated with the manufacturer or device model.
          example: Kitchen speaker
          title: name
          type: string
        type:
          description: "Device type, such as \"computer\", \"smartphone\" or \"speaker\"\
            ."
          example: computer
          title: type
          type: string
        volume_percent:
          description: The current volume in percent.
          example: 59
          maximum: 100
          minimum: 0
          nullable: true
          title: volume_percent
          type: integer
      title: DeviceObject
      type: object
      x-spotify-docs-type: DeviceObject
    DevicesObject:
      example:
        devices:
        - is_active: true
          is_private_session: true
          is_restricted: true
          name: Kitchen speaker
          id: id
          type: computer
          volume_percent: 59
        - is_active: true
          is_private_session: true
          is_restricted: true
          name: Kitchen speaker
          id: id
          type: computer
          volume_percent: 59
      properties:
        devices:
          description: A list of 0..n Device objects
          items:
            $ref: '#/components/schemas/DeviceObject'
          title: devices
          type: array
      title: DevicesObject
      type: object
      x-spotify-docs-type: DevicesObject
    DisallowsObject:
      properties:
        interrupting_playback:
          description: Interrupting playback. Optional field.
          title: interrupting_playback
          type: boolean
        pausing:
          description: Pausing. Optional field.
          title: pausing
          type: boolean
        resuming:
          description: Resuming. Optional field.
          title: resuming
          type: boolean
        seeking:
          description: Seeking playback location. Optional field.
          title: seeking
          type: boolean
        skipping_next:
          description: Skipping to the next context. Optional field.
          title: skipping_next
          type: boolean
        skipping_prev:
          description: Skipping to the previous context. Optional field.
          title: skipping_prev
          type: boolean
        toggling_repeat_context:
          description: Toggling repeat context flag. Optional field.
          title: toggling_repeat_context
          type: boolean
        toggling_repeat_track:
          description: Toggling repeat track flag. Optional field.
          title: toggling_repeat_track
          type: boolean
        toggling_shuffle:
          description: Toggling shuffle flag. Optional field.
          title: toggling_shuffle
          type: boolean
        transferring_playback:
          description: Transfering playback between devices. Optional field.
          title: transferring_playback
          type: boolean
      title: DisallowsObject
      type: object
      x-spotify-docs-type: DisallowsObject
    EpisodeBase:
      properties:
        audio_preview_url:
          description: |
            A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
          example: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          title: audio_preview_url
          type: string
        description:
          description: |
            A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
          example: |
            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
          title: description
          type: string
        duration_ms:
          description: |
            The episode length in milliseconds.
          example: 1686230
          title: duration_ms
          type: integer
        explicit:
          description: |
            Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
          title: explicit
          type: boolean
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            External URLs for this episode.
          title: external_urls
        href:
          description: |
            A link to the Web API endpoint providing full details of the episode.
          example: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          title: href
          type: string
        html_description:
          description: |
            A description of the episode. This field may contain HTML tags.
          example: |
            <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
          title: html_description
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
          example: 5Xt5DXGzch68nYYamXrNxZ
          title: id
          type: string
        images:
          description: |
            The cover art for the episode in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          title: images
          type: array
        is_externally_hosted:
          description: |
            True if the episode is hosted outside of Spotify's CDN.
          title: is_externally_hosted
          type: boolean
        is_playable:
          description: |
            True if the episode is playable in the given market. Otherwise false.
          title: is_playable
          type: boolean
        language:
          deprecated: true
          description: |
            The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead.
          example: en
          title: language
          type: string
        languages:
          description: |
            A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
          example:
          - fr
          - en
          items:
            type: string
          title: languages
          type: array
        name:
          description: |
            The name of the episode.
          example: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          title: name
          type: string
        release_date:
          description: |
            The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
          example: 1981-12-15
          title: release_date
          type: string
        release_date_precision:
          description: |
            The precision with which `release_date` value is known.
          enum:
          - year
          - month
          - day
          example: day
          title: release_date_precision
          type: string
        restrictions:
          allOf:
          - $ref: '#/components/schemas/EpisodeRestrictionObject'
          description: |
            Included in the response when a content restriction is applied.
          title: restrictions
        resume_point:
          allOf:
          - $ref: '#/components/schemas/ResumePointObject'
          description: |
            The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.
          title: resume_point
        type:
          description: |
            The object type.
          enum:
          - episode
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
          example: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          title: uri
          type: string
      required:
      - audio_preview_url
      - description
      - duration_ms
      - explicit
      - external_urls
      - href
      - html_description
      - id
      - images
      - is_externally_hosted
      - is_playable
      - languages
      - name
      - release_date
      - release_date_precision
      - resume_point
      - type
      - uri
      title: EpisodeBase
      type: object
    EpisodeObject:
      allOf:
      - $ref: '#/components/schemas/EpisodeBase'
      - properties:
          show:
            allOf:
            - $ref: '#/components/schemas/SimplifiedShowObject'
            description: |
              The show on which the episode belongs.
        required:
        - show
        type: object
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        languages:
        - fr
        - en
        show: ""
        description: |
          A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
        restrictions: ""
        language: en
        release_date_precision: day
        type: episode
        html_description: |
          <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
        uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
        is_externally_hosted: true
        audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
        duration_ms: 1686230
        explicit: true
        is_playable: true
        resume_point: ""
        release_date: 1981-12-15
        name: |
          Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
        href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
        id: 5Xt5DXGzch68nYYamXrNxZ
        external_urls: ""
      title: EpisodeObject
      type: object
      x-spotify-docs-type: EpisodeObject
    EpisodeRestrictionObject:
      properties:
        reason:
          description: |
            The reason for the restriction. Supported values:
            - `market` - The content item is not available in the given market.
            - `product` - The content item is not available for the user's subscription type.
            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.

            Additional reasons may be added in the future.
            **Note**: If you use this field, make sure that your application safely handles unknown values.
          title: reason
          type: string
      title: EpisodeRestrictionObject
      type: object
      x-spotify-docs-type: EpisodeRestrictionObject
    ErrorObject:
      example:
        message: message
        status: 519
      properties:
        message:
          description: |
            A short description of the cause of the error.
          title: message
          type: string
        status:
          description: |
            The HTTP status code (also returned in the response header; see [Response Status Codes](/documentation/web-api/concepts/api-calls#response-status-codes) for more information).
          maximum: 599
          minimum: 400
          title: status
          type: integer
      required:
      - message
      - status
      title: ErrorObject
      type: object
      x-spotify-docs-type: ErrorObject
    ExplicitContentSettingsObject:
      properties:
        filter_enabled:
          description: |
            When `true`, indicates that explicit content should not be played.
          title: filter_enabled
          type: boolean
        filter_locked:
          description: |
            When `true`, indicates that the explicit content setting is locked and can't be changed by the user.
          title: filter_locked
          type: boolean
      title: ExplicitContentSettingsObject
      type: object
      x-spotify-docs-type: ExplicitContentSettingsObject
    ExternalIdObject:
      properties:
        ean:
          description: |
            [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)
          title: ean
          type: string
        isrc:
          description: |
            [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)
          title: isrc
          type: string
        upc:
          description: |
            [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)
          title: upc
          type: string
      title: ExternalIdObject
      type: object
      x-spotify-docs-type: ExternalIdObject
    ExternalUrlObject:
      properties:
        spotify:
          description: |
            The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.
          title: spotify
          type: string
      title: ExternalUrlObject
      type: object
      x-spotify-docs-type: ExternalUrlObject
    FollowersObject:
      properties:
        href:
          description: |
            This will always be set to null, as the Web API does not support it at the moment.
          nullable: true
          title: href
          type: string
        total:
          description: |
            The total number of followers.
          title: total
          type: integer
      title: FollowersObject
      type: object
      x-spotify-docs-type: FollowersObject
    ImageObject:
      example:
        width: 300
        url: |
          https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
        height: 300
      properties:
        height:
          description: |
            The image height in pixels.
          example: 300
          nullable: true
          title: height
          type: integer
        url:
          description: |
            The source URL of the image.
          example: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          title: url
          type: string
        width:
          description: |
            The image width in pixels.
          example: 300
          nullable: true
          title: width
          type: integer
      required:
      - height
      - url
      - width
      title: ImageObject
      type: object
      x-spotify-docs-type: ImageObject
    Key:
      description: |
        The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
      example: 9
      maximum: 11
      minimum: -1
      title: Key
      type: integer
    LinkedTrackObject:
      properties:
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            Known external URLs for this track.
          title: external_urls
        href:
          description: |
            A link to the Web API endpoint providing full details of the track.
          title: href
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          title: id
          type: string
        type:
          description: |
            The object type: "track".
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          title: uri
          type: string
      title: LinkedTrackObject
      type: object
      x-spotify-docs-type: LinkedTrackObject
    Loudness:
      description: |
        The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.
      example: -5.883
      format: float
      title: Loudness
      type: number
      x-spotify-docs-type: Float
    Mode:
      description: |
        Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
      example: 0
      title: Mode
      type: integer
    NarratorObject:
      example:
        name: name
      properties:
        name:
          description: |
            The name of the Narrator.
          title: name
          type: string
      title: NarratorObject
      type: object
      x-spotify-docs-type: NarratorObject
    PagingArtistObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/ArtistObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          followers: ""
          genres:
          - Prog rock
          - Grunge
          popularity: 0
          name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          followers: ""
          genres:
          - Prog rock
          - Grunge
          popularity: 0
          name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
      title: PagingArtistObject
      type: object
      x-spotify-docs-type: PagingArtistObject
    PagingFeaturedPlaylistObject:
      example:
        playlists:
          next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          total: 4
          offset: 0
          previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          limit: 20
          href: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          items:
          - owner: ""
            images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            snapshot_id: snapshot_id
            collaborative: true
            description: description
            type: type
            uri: uri
            tracks: ""
            public: true
            name: name
            href: href
            id: id
            external_urls: ""
          - owner: ""
            images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            snapshot_id: snapshot_id
            collaborative: true
            description: description
            type: type
            uri: uri
            tracks: ""
            public: true
            name: name
            href: href
            id: id
            external_urls: ""
        message: message
      properties:
        message:
          title: message
          type: string
        playlists:
          $ref: '#/components/schemas/PagingPlaylistObject'
      title: PagingFeaturedPlaylistObject
      type: object
      x-spotify-docs-type: PagingFeaturedPlaylistObject
    PagingObject:
      properties:
        href:
          description: |
            A link to the Web API endpoint returning the full result of the request
          example: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          title: href
          type: string
        limit:
          description: |
            The maximum number of items in the response (as set in the query or by default).
          example: 20
          title: limit
          type: integer
        next:
          description: |
            URL to the next page of items. ( `null` if none)
          example: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          nullable: true
          title: next
          type: string
        offset:
          description: |
            The offset of the items returned (as set in the query or by default)
          example: 0
          title: offset
          type: integer
        previous:
          description: |
            URL to the previous page of items. ( `null` if none)
          example: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          nullable: true
          title: previous
          type: string
        total:
          description: |
            The total number of items available to return.
          example: 4
          title: total
          type: integer
      required:
      - href
      - items
      - limit
      - next
      - offset
      - previous
      - total
      title: PagingObject
      type: object
      x-spotify-docs-type: PagingObject
    PagingPlaylistObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SimplifiedPlaylistObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - owner: ""
          images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          snapshot_id: snapshot_id
          collaborative: true
          description: description
          type: type
          uri: uri
          tracks: ""
          public: true
          name: name
          href: href
          id: id
          external_urls: ""
        - owner: ""
          images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          snapshot_id: snapshot_id
          collaborative: true
          description: description
          type: type
          uri: uri
          tracks: ""
          public: true
          name: name
          href: href
          id: id
          external_urls: ""
      title: PagingPlaylistObject
      type: object
      x-spotify-docs-type: PagingPlaylistObject
    PagingPlaylistTrackObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/PlaylistTrackObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - added_at: 2000-01-23T04:56:07.000+00:00
          added_by: ""
          is_local: true
          track:
            disc_number: 0
            album: ""
            available_markets:
            - available_markets
            - available_markets
            restrictions: ""
            type: track
            external_ids: ""
            uri: uri
            duration_ms: 6
            explicit: true
            is_playable: true
            artists:
            - images:
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              followers: ""
              genres:
              - Prog rock
              - Grunge
              popularity: 0
              name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            - images:
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              followers: ""
              genres:
              - Prog rock
              - Grunge
              popularity: 0
              name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            linked_from: ""
            preview_url: preview_url
            popularity: 1
            name: name
            track_number: 5
            href: href
            id: id
            is_local: true
            external_urls: ""
        - added_at: 2000-01-23T04:56:07.000+00:00
          added_by: ""
          is_local: true
          track:
            disc_number: 0
            album: ""
            available_markets:
            - available_markets
            - available_markets
            restrictions: ""
            type: track
            external_ids: ""
            uri: uri
            duration_ms: 6
            explicit: true
            is_playable: true
            artists:
            - images:
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              followers: ""
              genres:
              - Prog rock
              - Grunge
              popularity: 0
              name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            - images:
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              followers: ""
              genres:
              - Prog rock
              - Grunge
              popularity: 0
              name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            linked_from: ""
            preview_url: preview_url
            popularity: 1
            name: name
            track_number: 5
            href: href
            id: id
            is_local: true
            external_urls: ""
      title: PagingPlaylistTrackObject
      type: object
      x-spotify-docs-type: PagingPlaylistTrackObject
    PagingSavedAlbumObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SavedAlbumObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - added_at: 2000-01-23T04:56:07.000+00:00
          album: ""
        - added_at: 2000-01-23T04:56:07.000+00:00
          album: ""
      title: PagingSavedAlbumObject
      type: object
      x-spotify-docs-type: PagingSavedAlbumObject
    PagingSavedAudiobookObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SavedAudiobookObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - added_at: 2000-01-23T04:56:07.000+00:00
          audiobook: ""
        - added_at: 2000-01-23T04:56:07.000+00:00
          audiobook: ""
      title: PagingSavedAudiobookObject
      type: object
    PagingSavedEpisodeObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SavedEpisodeObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - added_at: 2000-01-23T04:56:07.000+00:00
          episode: ""
        - added_at: 2000-01-23T04:56:07.000+00:00
          episode: ""
      title: PagingSavedEpisodeObject
      type: object
      x-spotify-docs-type: PagingEpisodeObject
    PagingSavedShowObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SavedShowObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - added_at: 2000-01-23T04:56:07.000+00:00
          show: ""
        - added_at: 2000-01-23T04:56:07.000+00:00
          show: ""
      title: PagingSavedShowObject
      type: object
      x-spotify-docs-type: PagingShowObject
    PagingSavedTrackObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SavedTrackObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - added_at: 2000-01-23T04:56:07.000+00:00
          track: ""
        - added_at: 2000-01-23T04:56:07.000+00:00
          track: ""
      title: PagingSavedTrackObject
      type: object
      x-spotify-docs-type: PagingTrackObject
    PagingSimplifiedAlbumObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SimplifiedAlbumObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          available_markets:
          - CA
          - BR
          - IT
          restrictions: ""
          release_date_precision: year
          album_group: compilation
          type: album
          uri: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
          total_tracks: 9
          release_date: 1981-12
          artists:
          - name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          name: name
          album_type: compilation
          href: href
          id: 2up3OPMp9Tb4dAKM2erWXQ
          external_urls: ""
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          available_markets:
          - CA
          - BR
          - IT
          restrictions: ""
          release_date_precision: year
          album_group: compilation
          type: album
          uri: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
          total_tracks: 9
          release_date: 1981-12
          artists:
          - name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          name: name
          album_type: compilation
          href: href
          id: 2up3OPMp9Tb4dAKM2erWXQ
          external_urls: ""
      title: PagingSimplifiedAlbumObject
      type: object
      x-spotify-docs-type: PagingAlbumObject
    PagingSimplifiedArtistObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SimplifiedArtistObject'
            type: array
        type: object
      type: object
      x-spotify-docs-type: PagingArtistObject
    PagingSimplifiedAudiobookObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SimplifiedAudiobookObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - languages
          - languages
          copyrights:
          - text: text
            type: type
          - text: text
            type: type
          available_markets:
          - available_markets
          - available_markets
          description: description
          edition: Unabridged
          type: audiobook
          html_description: html_description
          uri: uri
          explicit: true
          media_type: media_type
          name: name
          total_chapters: 0
          publisher: publisher
          href: href
          id: id
          external_urls: ""
          authors:
          - name: name
          - name: name
          narrators:
          - name: name
          - name: name
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - languages
          - languages
          copyrights:
          - text: text
            type: type
          - text: text
            type: type
          available_markets:
          - available_markets
          - available_markets
          description: description
          edition: Unabridged
          type: audiobook
          html_description: html_description
          uri: uri
          explicit: true
          media_type: media_type
          name: name
          total_chapters: 0
          publisher: publisher
          href: href
          id: id
          external_urls: ""
          authors:
          - name: name
          - name: name
          narrators:
          - name: name
          - name: name
      title: PagingSimplifiedAudiobookObject
      type: object
      x-spotify-docs-type: PagingAudiobookObject
    PagingSimplifiedChapterObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SimplifiedChapterObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - fr
          - en
          chapter_number: 1
          available_markets:
          - available_markets
          - available_markets
          description: |
            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
          restrictions: ""
          release_date_precision: day
          type: episode
          html_description: |
            <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
          uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          duration_ms: 1686230
          explicit: true
          is_playable: true
          resume_point: ""
          release_date: 1981-12-15
          name: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          id: 5Xt5DXGzch68nYYamXrNxZ
          external_urls: ""
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - fr
          - en
          chapter_number: 1
          available_markets:
          - available_markets
          - available_markets
          description: |
            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
          restrictions: ""
          release_date_precision: day
          type: episode
          html_description: |
            <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
          uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          duration_ms: 1686230
          explicit: true
          is_playable: true
          resume_point: ""
          release_date: 1981-12-15
          name: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          id: 5Xt5DXGzch68nYYamXrNxZ
          external_urls: ""
      title: PagingSimplifiedChapterObject
      type: object
      x-spotify-docs-type: PagingSimplifiedChapterObject
    PagingSimplifiedEpisodeObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SimplifiedEpisodeObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - fr
          - en
          description: |
            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
          restrictions: ""
          language: en
          release_date_precision: day
          type: episode
          html_description: |
            <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
          uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          is_externally_hosted: true
          audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          duration_ms: 1686230
          explicit: true
          is_playable: true
          resume_point: ""
          release_date: 1981-12-15
          name: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          id: 5Xt5DXGzch68nYYamXrNxZ
          external_urls: ""
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - fr
          - en
          description: |
            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
          restrictions: ""
          language: en
          release_date_precision: day
          type: episode
          html_description: |
            <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
          uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          is_externally_hosted: true
          audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          duration_ms: 1686230
          explicit: true
          is_playable: true
          resume_point: ""
          release_date: 1981-12-15
          name: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          id: 5Xt5DXGzch68nYYamXrNxZ
          external_urls: ""
      title: PagingSimplifiedEpisodeObject
      type: object
      x-spotify-docs-type: PagingEpisodeObject
    PagingSimplifiedShowObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SimplifiedShowObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - languages
          - languages
          copyrights:
          - text: text
            type: type
          - text: text
            type: type
          available_markets:
          - available_markets
          - available_markets
          description: description
          type: show
          html_description: html_description
          uri: uri
          is_externally_hosted: true
          total_episodes: 6
          explicit: true
          media_type: media_type
          name: name
          publisher: publisher
          href: href
          id: id
          external_urls: ""
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - languages
          - languages
          copyrights:
          - text: text
            type: type
          - text: text
            type: type
          available_markets:
          - available_markets
          - available_markets
          description: description
          type: show
          html_description: html_description
          uri: uri
          is_externally_hosted: true
          total_episodes: 6
          explicit: true
          media_type: media_type
          name: name
          publisher: publisher
          href: href
          id: id
          external_urls: ""
      title: PagingSimplifiedShowObject
      type: object
      x-spotify-docs-type: PagingShowObject
    PagingSimplifiedTrackObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/SimplifiedTrackObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - disc_number: 0
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: type
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          name: name
          track_number: 1
          href: href
          id: id
          is_local: true
          external_urls: ""
        - disc_number: 0
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: type
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          name: name
          track_number: 1
          href: href
          id: id
          is_local: true
          external_urls: ""
      title: PagingSimplifiedTrackObject
      type: object
      x-spotify-docs-type: PagingTrackObject
    PagingTrackObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/TrackObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - disc_number: 0
          album: ""
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: track
          external_ids: ""
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls: ""
        - disc_number: 0
          album: ""
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: track
          external_ids: ""
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls: ""
      title: PagingTrackObject
      type: object
      x-spotify-docs-type: PagingTrackObject
    PlayHistoryObject:
      example:
        context: ""
        played_at: 2000-01-23T04:56:07.000+00:00
        track: ""
      properties:
        context:
          allOf:
          - $ref: '#/components/schemas/ContextObject'
          description: The context the track was played from.
          title: context
        played_at:
          description: The date and time the track was played.
          format: date-time
          title: played_at
          type: string
          x-spotify-docs-type: Timestamp
        track:
          allOf:
          - $ref: '#/components/schemas/TrackObject'
          description: The track the user listened to.
          title: track
      title: PlayHistoryObject
      type: object
      x-spotify-docs-type: PlayHistoryObject
    PlayerErrorObject:
      properties:
        message:
          description: |
            A short description of the cause of the error.
          type: string
        reason:
          allOf:
          - $ref: '#/components/schemas/PlayerErrorReasons'
        status:
          description: |
            The HTTP status code. Either `404 NOT FOUND` or `403 FORBIDDEN`.  Also returned in the response header.
          type: integer
      type: object
      x-spotify-docs-type: PlayerErrorObject
    PlayerErrorReasons:
      description: |
        * `NO_PREV_TRACK` - The command requires a previous track, but there is none in the context.
        * `NO_NEXT_TRACK` - The command requires a next track, but there is none in the context.
        * `NO_SPECIFIC_TRACK` - The requested track does not exist.
        * `ALREADY_PAUSED` - The command requires playback to not be paused.
        * `NOT_PAUSED` - The command requires playback to be paused.
        * `NOT_PLAYING_LOCALLY` - The command requires playback on the local device.
        * `NOT_PLAYING_TRACK` - The command requires that a track is currently playing.
        * `NOT_PLAYING_CONTEXT` - The command requires that a context is currently playing.
        * `ENDLESS_CONTEXT` - The shuffle command cannot be applied on an endless context.
        * `CONTEXT_DISALLOW` - The command could not be performed on the context.
        * `ALREADY_PLAYING` - The track should not be restarted if the same track and context is already playing, and there is a resume point.
        * `RATE_LIMITED` - The user is rate limited due to too frequent track play, also known as cat-on-the-keyboard spamming.
        * `REMOTE_CONTROL_DISALLOW` - The context cannot be remote-controlled.
        * `DEVICE_NOT_CONTROLLABLE` - Not possible to remote control the device.
        * `VOLUME_CONTROL_DISALLOW` - Not possible to remote control the device's volume.
        * `NO_ACTIVE_DEVICE` - Requires an active device and the user has none.
        * `PREMIUM_REQUIRED` - The request is prohibited for non-premium users.
        * `UNKNOWN` - Certain actions are restricted because of unknown reasons.
      enum:
      - NO_PREV_TRACK
      - NO_NEXT_TRACK
      - NO_SPECIFIC_TRACK
      - ALREADY_PAUSED
      - NOT_PAUSED
      - NOT_PLAYING_LOCALLY
      - NOT_PLAYING_TRACK
      - NOT_PLAYING_CONTEXT
      - ENDLESS_CONTEXT
      - CONTEXT_DISALLOW
      - ALREADY_PLAYING
      - RATE_LIMITED
      - REMOTE_CONTROL_DISALLOW
      - DEVICE_NOT_CONTROLLABLE
      - VOLUME_CONTROL_DISALLOW
      - NO_ACTIVE_DEVICE
      - PREMIUM_REQUIRED
      - UNKNOWN
      title: PlayerErrorReasons
      type: string
    PlaylistObject:
      example:
        owner: ""
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        snapshot_id: snapshot_id
        collaborative: true
        description: description
        type: type
        uri: uri
        tracks: "{}"
        followers: ""
        public: true
        name: name
        href: href
        id: id
        external_urls: ""
      properties:
        collaborative:
          description: |
            `true` if the owner allows other users to modify the playlist.
          title: collaborative
          type: boolean
        description:
          description: |
            The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
          nullable: true
          title: description
          type: string
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            Known external URLs for this playlist.
          title: external_urls
        followers:
          allOf:
          - $ref: '#/components/schemas/FollowersObject'
          description: Information about the followers of the playlist.
          title: followers
        href:
          description: |
            A link to the Web API endpoint providing full details of the playlist.
          title: href
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
          title: id
          type: string
        images:
          description: |
            Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._
          items:
            $ref: '#/components/schemas/ImageObject'
          title: images
          type: array
        name:
          description: |
            The name of the playlist.
          title: name
          type: string
        owner:
          allOf:
          - $ref: '#/components/schemas/PlaylistOwnerObject'
          description: |
            The user who owns the playlist
          title: owner
        public:
          description: |
            The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
          title: public
          type: boolean
        snapshot_id:
          description: |
            The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
          title: snapshot_id
          type: string
        tracks:
          allOf:
          - $ref: '#/components/schemas/PagingPlaylistTrackObject'
          description: |
            The tracks of the playlist.
          title: tracks
          type: object
        type:
          description: |
            The object type: "playlist"
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
          title: uri
          type: string
      title: PlaylistObject
      type: object
      x-spotify-docs-type: PlaylistObject
    PlaylistOwnerObject:
      allOf:
      - $ref: '#/components/schemas/PlaylistUserObject'
      - properties:
          display_name:
            description: |
              The name displayed on the user's profile. `null` if not available.
            nullable: true
            type: string
        type: object
      title: PlaylistOwnerObject
    PlaylistTrackObject:
      example:
        added_at: 2000-01-23T04:56:07.000+00:00
        added_by: ""
        is_local: true
        track:
          disc_number: 0
          album: ""
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: track
          external_ids: ""
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls: ""
      properties:
        added_at:
          description: |
            The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._
          format: date-time
          title: added_at
          type: string
          x-spotify-docs-type: Timestamp
        added_by:
          allOf:
          - $ref: '#/components/schemas/PlaylistUserObject'
          description: |
            The Spotify user who added the track or episode. _**Note**: some very old playlists may return `null` in this field._
          title: added_by
        is_local:
          description: |
            Whether this track or episode is a [local file](/documentation/web-api/concepts/playlists/#local-files) or not.
          title: is_local
          type: boolean
        track:
          $ref: '#/components/schemas/PlaylistTrackObject_track'
      title: PlaylistTrackObject
      type: object
      x-spotify-docs-type: PlaylistTrackObject
    PlaylistTracksRefObject:
      properties:
        href:
          description: |
            A link to the Web API endpoint where full details of the playlist's tracks can be retrieved.
          title: href
          type: string
        total:
          description: |
            Number of tracks in the playlist.
          title: total
          type: integer
      title: PlaylistTracksRefObject
      type: object
      x-spotify-docs-type: PlaylistTracksRefObject
    PlaylistUserObject:
      properties:
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            Known public external URLs for this user.
          title: external_urls
        followers:
          allOf:
          - $ref: '#/components/schemas/FollowersObject'
          description: |
            Information about the followers of this user.
          title: followers
        href:
          description: |
            A link to the Web API endpoint for this user.
          title: href
          type: string
        id:
          description: |
            The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
          title: id
          type: string
        type:
          description: |
            The object type.
          enum:
          - user
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
          title: uri
          type: string
      title: PlaylistUserObject
      type: object
      x-spotify-docs-type: PlaylistUserObject
    PrivateUserObject:
      example:
        country: country
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        product: product
        followers: ""
        explicit_content: ""
        href: href
        id: id
        display_name: display_name
        type: type
        external_urls: ""
        uri: uri
        email: email
      properties:
        country:
          description: |
            The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
          title: country
          type: string
        display_name:
          description: |
            The name displayed on the user's profile. `null` if not available.
          title: display_name
          type: string
        email:
          description: |
            The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
          title: email
          type: string
        explicit_content:
          allOf:
          - $ref: '#/components/schemas/ExplicitContentSettingsObject'
          description: |
            The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
          title: explicit_content
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: Known external URLs for this user.
          title: external_urls
        followers:
          allOf:
          - $ref: '#/components/schemas/FollowersObject'
          description: Information about the followers of the user.
          title: followers
        href:
          description: |
            A link to the Web API endpoint for this user.
          title: href
          type: string
        id:
          description: |
            The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.
          title: id
          type: string
        images:
          description: The user's profile image.
          items:
            $ref: '#/components/schemas/ImageObject'
          title: images
          type: array
        product:
          description: |
            The user's Spotify subscription level: "premium", "free", etc. (The subscription level "open" can be considered the same as "free".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
          title: product
          type: string
        type:
          description: |
            The object type: "user"
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.
          title: uri
          type: string
      title: PrivateUserObject
      type: object
      x-spotify-docs-type: PrivateUserObject
    PublicUserObject:
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        followers: ""
        href: href
        id: id
        display_name: display_name
        type: user
        external_urls: ""
        uri: uri
      properties:
        display_name:
          description: |
            The name displayed on the user's profile. `null` if not available.
          nullable: true
          title: display_name
          type: string
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            Known public external URLs for this user.
          title: external_urls
        followers:
          allOf:
          - $ref: '#/components/schemas/FollowersObject'
          description: |
            Information about the followers of this user.
          title: followers
        href:
          description: |
            A link to the Web API endpoint for this user.
          title: href
          type: string
        id:
          description: |
            The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
          title: id
          type: string
        images:
          description: |
            The user's profile image.
          items:
            $ref: '#/components/schemas/ImageObject'
          title: images
          type: array
        type:
          description: |
            The object type.
          enum:
          - user
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
          title: uri
          type: string
      title: PublicUserObject
      type: object
      x-spotify-docs-type: PublicUserObject
    QueueObject:
      example:
        currently_playing:
          disc_number: 0
          album: ""
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: track
          external_ids: ""
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls: ""
        queue:
        - disc_number: 0
          album: ""
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: track
          external_ids: ""
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls: ""
        - disc_number: 0
          album: ""
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: track
          external_ids: ""
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls: ""
      properties:
        currently_playing:
          $ref: '#/components/schemas/CurrentlyPlayingContextObject_item'
        queue:
          description: The tracks or episodes in the queue. Can be empty.
          items:
            $ref: '#/components/schemas/QueueObject_queue_inner'
          title: queue
          type: array
      title: QueueObject
      type: object
      x-spotify-docs-type: QueueObject
    RecommendationSeedObject:
      example:
        href: href
        id: id
        type: type
        afterRelinkingSize: 6
        initialPoolSize: 1
        afterFilteringSize: 0
      properties:
        afterFilteringSize:
          description: |
            The number of tracks available after min\_\* and max\_\* filters have been applied.
          title: afterFilteringSize
          type: integer
        afterRelinkingSize:
          description: |
            The number of tracks available after relinking for regional availability.
          title: afterRelinkingSize
          type: integer
        href:
          description: |
            A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`.
          title: href
          type: string
        id:
          description: |
            The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.
          title: id
          type: string
        initialPoolSize:
          description: |
            The number of recommended tracks available for this seed.
          title: initialPoolSize
          type: integer
        type:
          description: |
            The entity type of this seed. One of `artist`, `track` or `genre`.
          title: type
          type: string
      title: RecommendationSeedObject
      type: object
      x-spotify-docs-type: RecommendationSeedObject
    RecommendationsObject:
      example:
        seeds:
        - href: href
          id: id
          type: type
          afterRelinkingSize: 6
          initialPoolSize: 1
          afterFilteringSize: 0
        - href: href
          id: id
          type: type
          afterRelinkingSize: 6
          initialPoolSize: 1
          afterFilteringSize: 0
        tracks:
        - disc_number: 0
          album: ""
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: track
          external_ids: ""
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls: ""
        - disc_number: 0
          album: ""
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: track
          external_ids: ""
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls: ""
      properties:
        seeds:
          description: |
            An array of recommendation seed objects.
          items:
            $ref: '#/components/schemas/RecommendationSeedObject'
          title: seeds
          type: array
        tracks:
          description: |
            An array of track objects ordered according to the parameters supplied.
          items:
            $ref: '#/components/schemas/TrackObject'
          title: tracks
          type: array
      required:
      - seeds
      - tracks
      title: RecommendationsObject
      type: object
      x-spotify-docs-type: RecommendationsObject
    ResumePointObject:
      properties:
        fully_played:
          description: |
            Whether or not the episode has been fully played by the user.
          title: fully_played
          type: boolean
        resume_position_ms:
          description: |
            The user's most recent position in the episode in milliseconds.
          title: resume_position_ms
          type: integer
      title: ResumePointObject
      type: object
      x-spotify-docs-type: ResumePointObject
    SavedAlbumObject:
      example:
        added_at: 2000-01-23T04:56:07.000+00:00
        album: ""
      properties:
        added_at:
          description: |
            The date and time the album was saved
            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
            If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
          format: date-time
          title: added_at
          type: string
          x-spotify-docs-type: Timestamp
        album:
          allOf:
          - $ref: '#/components/schemas/AlbumObject'
          description: Information about the album.
          title: album
      title: SavedAlbumObject
      type: object
      x-spotify-docs-type: SavedAlbumObject
    SavedAudiobookObject:
      example:
        added_at: 2000-01-23T04:56:07.000+00:00
        audiobook: ""
      properties:
        added_at:
          description: |
            The date and time the audiobook was saved
            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
            If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
          format: date-time
          title: added_at
          type: string
          x-spotify-docs-type: Timestamp
        audiobook:
          allOf:
          - $ref: '#/components/schemas/AudiobookObject'
          description: Information about the audiobook.
          title: audiobook
      title: SavedAudiobookObject
      type: object
      x-spotify-docs-type: SavedAudiobookObject
    SavedEpisodeObject:
      example:
        added_at: 2000-01-23T04:56:07.000+00:00
        episode: ""
      properties:
        added_at:
          description: |
            The date and time the episode was saved.
            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
          format: date-time
          title: added_at
          type: string
          x-spotify-docs-type: Timestamp
        episode:
          allOf:
          - $ref: '#/components/schemas/EpisodeObject'
          description: Information about the episode.
          title: episode
      title: SavedEpisodeObject
      type: object
      x-spotify-docs-type: SavedEpisodeObject
    SavedShowObject:
      example:
        added_at: 2000-01-23T04:56:07.000+00:00
        show: ""
      properties:
        added_at:
          description: |
            The date and time the show was saved.
            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
            If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
          format: date-time
          title: added_at
          type: string
          x-spotify-docs-type: Timestamp
        show:
          allOf:
          - $ref: '#/components/schemas/SimplifiedShowObject'
          description: Information about the show.
          title: show
      title: SavedShowObject
      type: object
      x-spotify-docs-type: SavedShowObject
    SavedTrackObject:
      example:
        added_at: 2000-01-23T04:56:07.000+00:00
        track: ""
      properties:
        added_at:
          description: |
            The date and time the track was saved.
            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
            If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
          format: date-time
          title: added_at
          type: string
          x-spotify-docs-type: Timestamp
        track:
          allOf:
          - $ref: '#/components/schemas/TrackObject'
          description: Information about the track.
          title: track
      title: SavedTrackObject
      type: object
      x-spotify-docs-type: SavedTrackObject
    SectionObject:
      example:
        duration: 6.97092
        mode: 0.8008281904610115
        mode_confidence: 0.471
        tempo_confidence: 0.647
        confidence: 1
        loudness: -14.938
        start: 0
        tempo: 113.178
        time_signature_confidence: 1
        key_confidence: 0.297
        key: 9
        time_signature: 4
      properties:
        confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ section's \"designation\"."
          example: 1
          maximum: 1
          minimum: 0
          title: confidence
          type: number
        duration:
          description: The duration (in seconds) of the section.
          example: 6.97092
          title: duration
          type: number
        key:
          description: "The estimated overall key of the section. The values in this\
            \ field ranging from 0 to 11 mapping to pitches using standard Pitch Class\
            \ notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected,\
            \ the value is -1."
          example: 9
          title: key
          type: integer
        key_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ key. Songs with many key changes may correspond to low values in this\
            \ field."
          example: 0.297
          maximum: 1
          minimum: 0
          title: key_confidence
          type: number
        loudness:
          description: The overall loudness of the section in decibels (dB). Loudness
            values are useful for comparing relative loudness of sections within tracks.
          example: -14.938
          title: loudness
          type: number
        mode:
          description: "Indicates the modality (major or minor) of a section, the\
            \ type of scale from which its melodic content is derived. This field\
            \ will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result.\
            \ Note that the major key (e.g. C major) could more likely be confused\
            \ with the minor key at 3 semitones lower (e.g. A minor) as both keys\
            \ carry the same pitches."
          enum:
          - -1
          - 0
          - 1
          title: mode
          type: number
        mode_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ `mode`."
          example: 0.471
          maximum: 1
          minimum: 0
          title: mode_confidence
          type: number
        start:
          description: The starting point (in seconds) of the section.
          example: 0
          title: start
          type: number
        tempo:
          description: "The overall estimated tempo of the section in beats per minute\
            \ (BPM). In musical terminology, tempo is the speed or pace of a given\
            \ piece and derives directly from the average beat duration."
          example: 113.178
          title: tempo
          type: number
        tempo_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ tempo. Some tracks contain tempo changes or sounds which don't contain\
            \ tempo (like pure speech) which would correspond to a low value in this\
            \ field."
          example: 0.647
          maximum: 1
          minimum: 0
          title: tempo_confidence
          type: number
        time_signature:
          description: "An estimated time signature. The time signature (meter) is\
            \ a notational convention to specify how many beats are in each bar (or\
            \ measure). The time signature ranges from 3 to 7 indicating time signatures\
            \ of \"3/4\", to \"7/4\"."
          example: 4
          maximum: 7
          minimum: 3
          title: TimeSignature
          type: integer
        time_signature_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ `time_signature`. Sections with time signature changes may correspond\
            \ to low values in this field."
          example: 1
          maximum: 1
          minimum: 0
          title: time_signature_confidence
          type: number
      title: SectionObject
      type: object
    SegmentObject:
      example:
        duration: 0.19891
        timbre:
        - 42.115
        - 64.373
        - -0.233
        loudness_max: -14.25
        loudness_max_time: 0.07305
        confidence: 0.435
        start: 0.70154
        loudness_end: 0
        pitches:
        - 0.212
        - 0.141
        - 0.294
        loudness_start: -23.053
      properties:
        confidence:
          description: |
            The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field.
          example: 0.435
          maximum: 1
          minimum: 0
          title: confidence
          type: number
        duration:
          description: The duration (in seconds) of the segment.
          example: 0.19891
          title: duration
          type: number
        loudness_end:
          description: The offset loudness of the segment in decibels (dB). This value
            should be equivalent to the loudness_start of the following segment.
          example: 0
          title: loudness_end
          type: number
        loudness_max:
          description: "The peak loudness of the segment in decibels (dB). Combined\
            \ with `loudness_start` and `loudness_max_time`, these components can\
            \ be used to describe the \"attack\" of the segment."
          example: -14.25
          title: loudness_max
          type: number
        loudness_max_time:
          description: "The segment-relative offset of the segment peak loudness in\
            \ seconds. Combined with `loudness_start` and `loudness_max`, these components\
            \ can be used to desctibe the \"attack\" of the segment."
          example: 0.07305
          title: loudness_max_time
          type: number
        loudness_start:
          description: "The onset loudness of the segment in decibels (dB). Combined\
            \ with `loudness_max` and `loudness_max_time`, these components can be\
            \ used to describe the \"attack\" of the segment."
          example: -23.053
          title: loudness_start
          type: number
        pitches:
          description: |
            Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).

            Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0.
            As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies.
            ![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png)
          example:
          - 0.212
          - 0.141
          - 0.294
          items:
            maximum: 1
            minimum: 0
            type: number
          title: pitches
          type: array
        start:
          description: The starting point (in seconds) of the segment.
          example: 0.70154
          title: start
          type: number
        timbre:
          description: |
            Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.

            For completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments).
            ![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)

            The actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other.
          example:
          - 42.115
          - 64.373
          - -0.233
          items:
            type: number
          title: timbre
          type: array
      title: SegmentObject
      type: object
    ShowBase:
      properties:
        available_markets:
          description: |
            A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          title: available_markets
          type: array
        copyrights:
          description: |
            The copyright statements of the show.
          items:
            $ref: '#/components/schemas/CopyrightObject'
          title: copyrights
          type: array
        description:
          description: |
            A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
          title: description
          type: string
        explicit:
          description: |
            Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).
          title: explicit
          type: boolean
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            External URLs for this show.
          title: external_urls
        href:
          description: |
            A link to the Web API endpoint providing full details of the show.
          title: href
          type: string
        html_description:
          description: |
            A description of the show. This field may contain HTML tags.
          title: html_description
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.
          title: id
          type: string
        images:
          description: |
            The cover art for the show in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          title: images
          type: array
        is_externally_hosted:
          description: |
            True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.
          title: is_externally_hosted
          type: boolean
        languages:
          description: |
            A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
          items:
            type: string
          title: languages
          type: array
        media_type:
          description: |
            The media type of the show.
          title: media_type
          type: string
        name:
          description: |
            The name of the episode.
          title: name
          type: string
        publisher:
          description: |
            The publisher of the show.
          title: publisher
          type: string
        total_episodes:
          description: |
            The total number of episodes in the show.
          title: total_episodes
          type: integer
        type:
          description: |
            The object type.
          enum:
          - show
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.
          title: uri
          type: string
      required:
      - available_markets
      - copyrights
      - description
      - explicit
      - external_urls
      - href
      - html_description
      - id
      - images
      - is_externally_hosted
      - languages
      - media_type
      - name
      - publisher
      - total_episodes
      - type
      - uri
      title: ShowBase
      type: object
    ShowObject:
      allOf:
      - $ref: '#/components/schemas/ShowBase'
      - properties:
          episodes:
            $ref: '#/components/schemas/ShowObject_allOf_episodes'
        required:
        - episodes
        type: object
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        languages:
        - languages
        - languages
        copyrights:
        - text: text
          type: type
        - text: text
          type: type
        available_markets:
        - available_markets
        - available_markets
        description: description
        type: show
        html_description: html_description
        uri: uri
        is_externally_hosted: true
        total_episodes: 0
        explicit: true
        media_type: media_type
        name: name
        publisher: publisher
        href: href
        id: id
        external_urls: ""
        episodes: null
      title: ShowObject
      x-spotify-docs-type: ShowObject
    SimplifiedAlbumObject:
      allOf:
      - $ref: '#/components/schemas/AlbumBase'
      - properties:
          album_group:
            description: |
              The field is present when getting an artist's albums. Compare to album_type this field represents relationship between the artist and the album.
            enum:
            - album
            - single
            - compilation
            - appears_on
            example: compilation
            type: string
          artists:
            description: |
              The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
            items:
              $ref: '#/components/schemas/SimplifiedArtistObject'
            type: array
        required:
        - artists
        type: object
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        available_markets:
        - CA
        - BR
        - IT
        restrictions: ""
        release_date_precision: year
        album_group: compilation
        type: album
        uri: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
        total_tracks: 9
        release_date: 1981-12
        artists:
        - name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
        - name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
        name: name
        album_type: compilation
        href: href
        id: 2up3OPMp9Tb4dAKM2erWXQ
        external_urls: ""
      title: SimplifiedAlbumObject
      x-spotify-docs-type: SimplifiedAlbumObject
    SimplifiedArtistObject:
      example:
        name: name
        href: href
        id: id
        type: artist
        external_urls: ""
        uri: uri
      properties:
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            Known external URLs for this artist.
          title: external_urls
        href:
          description: |
            A link to the Web API endpoint providing full details of the artist.
          title: href
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
          title: id
          type: string
        name:
          description: |
            The name of the artist.
          title: name
          type: string
        type:
          description: |
            The object type.
          enum:
          - artist
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
          title: uri
          type: string
      title: SimplifiedArtistObject
      type: object
      x-spotify-docs-type: SimplifiedArtistObject
    SimplifiedAudiobookObject:
      allOf:
      - $ref: '#/components/schemas/AudiobookBase'
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        languages:
        - languages
        - languages
        copyrights:
        - text: text
          type: type
        - text: text
          type: type
        available_markets:
        - available_markets
        - available_markets
        description: description
        edition: Unabridged
        type: audiobook
        html_description: html_description
        uri: uri
        explicit: true
        media_type: media_type
        name: name
        total_chapters: 0
        publisher: publisher
        href: href
        id: id
        external_urls: ""
        authors:
        - name: name
        - name: name
        narrators:
        - name: name
        - name: name
      title: SimplifiedAudiobookObject
      x-spotify-docs-type: SimplifiedAudiobookObject
    SimplifiedChapterObject:
      allOf:
      - $ref: '#/components/schemas/ChapterBase'
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        languages:
        - fr
        - en
        chapter_number: 1
        available_markets:
        - available_markets
        - available_markets
        description: |
          A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
        restrictions: ""
        release_date_precision: day
        type: episode
        html_description: |
          <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
        uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
        audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
        duration_ms: 1686230
        explicit: true
        is_playable: true
        resume_point: ""
        release_date: 1981-12-15
        name: |
          Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
        href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
        id: 5Xt5DXGzch68nYYamXrNxZ
        external_urls: ""
      title: SimplifiedChapterObject
      type: object
      x-spotify-docs-type: SimplifiedChapterObject
    SimplifiedEpisodeObject:
      allOf:
      - $ref: '#/components/schemas/EpisodeBase'
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        languages:
        - fr
        - en
        description: |
          A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
        restrictions: ""
        language: en
        release_date_precision: day
        type: episode
        html_description: |
          <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
        uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
        is_externally_hosted: true
        audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
        duration_ms: 1686230
        explicit: true
        is_playable: true
        resume_point: ""
        release_date: 1981-12-15
        name: |
          Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
        href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
        id: 5Xt5DXGzch68nYYamXrNxZ
        external_urls: ""
      title: SimplifiedEpisodeObject
      type: object
      x-spotify-docs-type: SimplifiedEpisodeObject
    SimplifiedPlaylistObject:
      example:
        owner: ""
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        snapshot_id: snapshot_id
        collaborative: true
        description: description
        type: type
        uri: uri
        tracks: ""
        public: true
        name: name
        href: href
        id: id
        external_urls: ""
      properties:
        collaborative:
          description: |
            `true` if the owner allows other users to modify the playlist.
          title: collaborative
          type: boolean
        description:
          description: |
            The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
          title: description
          type: string
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            Known external URLs for this playlist.
          title: external_urls
        href:
          description: |
            A link to the Web API endpoint providing full details of the playlist.
          title: href
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
          title: id
          type: string
        images:
          description: |
            Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._
          items:
            $ref: '#/components/schemas/ImageObject'
          title: images
          type: array
        name:
          description: |
            The name of the playlist.
          title: name
          type: string
        owner:
          allOf:
          - $ref: '#/components/schemas/PlaylistOwnerObject'
          description: |
            The user who owns the playlist
          title: owner
        public:
          description: |
            The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
          title: public
          type: boolean
        snapshot_id:
          description: |
            The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
          title: snapshot_id
          type: string
        tracks:
          allOf:
          - $ref: '#/components/schemas/PlaylistTracksRefObject'
          description: |
            A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available.
          title: tracks
        type:
          description: |
            The object type: "playlist"
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
          title: uri
          type: string
      title: SimplifiedPlaylistObject
      type: object
      x-spotify-docs-type: SimplifiedPlaylistObject
    SimplifiedShowObject:
      allOf:
      - $ref: '#/components/schemas/ShowBase'
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        languages:
        - languages
        - languages
        copyrights:
        - text: text
          type: type
        - text: text
          type: type
        available_markets:
        - available_markets
        - available_markets
        description: description
        type: show
        html_description: html_description
        uri: uri
        is_externally_hosted: true
        total_episodes: 6
        explicit: true
        media_type: media_type
        name: name
        publisher: publisher
        href: href
        id: id
        external_urls: ""
      title: SimplifiedShowObject
      x-spotify-docs-type: SimplifiedShowObject
    SimplifiedTrackObject:
      example:
        disc_number: 0
        available_markets:
        - available_markets
        - available_markets
        restrictions: ""
        type: type
        uri: uri
        duration_ms: 6
        explicit: true
        is_playable: true
        artists:
        - name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
        - name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
        linked_from: ""
        preview_url: preview_url
        name: name
        track_number: 1
        href: href
        id: id
        is_local: true
        external_urls: ""
      properties:
        artists:
          description: The artists who performed the track. Each artist object includes
            a link in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/SimplifiedArtistObject'
          title: artists
          type: array
        available_markets:
          description: |
            A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          title: available_markets
          type: array
        disc_number:
          description: The disc number (usually `1` unless the album consists of more
            than one disc).
          title: disc_number
          type: integer
        duration_ms:
          description: The track length in milliseconds.
          title: duration_ms
          type: integer
        explicit:
          description: Whether or not the track has explicit lyrics ( `true` = yes
            it does; `false` = no it does not OR unknown).
          title: explicit
          type: boolean
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            External URLs for this track.
          title: external_urls
        href:
          description: A link to the Web API endpoint providing full details of the
            track.
          title: href
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          title: id
          type: string
        is_local:
          description: |
            Whether or not the track is from a local file.
          title: is_local
          type: boolean
        is_playable:
          description: |
            Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
          title: is_playable
          type: boolean
        linked_from:
          allOf:
          - $ref: '#/components/schemas/LinkedTrackObject'
          description: "Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/)\
            \ is applied and is only part of the response if the track linking, in\
            \ fact, exists. The requested track has been replaced with a different\
            \ track. The track in the `linked_from` object contains information about\
            \ the originally requested track."
          title: linked_from
        name:
          description: The name of the track.
          title: name
          type: string
        preview_url:
          description: |
            A URL to a 30 second preview (MP3 format) of the track.
          title: preview_url
          type: string
        restrictions:
          allOf:
          - $ref: '#/components/schemas/TrackRestrictionObject'
          description: |
            Included in the response when a content restriction is applied.
          title: restrictions
        track_number:
          description: |
            The number of the track. If an album has several discs, the track number is the number on the specified disc.
          title: track_number
          type: integer
        type:
          description: |
            The object type: "track".
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          title: uri
          type: string
      title: SimplifiedTrackObject
      type: object
      x-spotify-docs-type: SimplifiedTrackObject
    Tempo:
      description: |
        The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
      example: 118.211
      format: float
      title: Tempo
      type: number
      x-spotify-docs-type: Float
    TimeIntervalObject:
      example:
        duration: 2.18749
        confidence: 0.925
        start: 0.49567
      properties:
        confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ interval."
          example: 0.925
          maximum: 1
          minimum: 0
          title: confidence
          type: number
        duration:
          description: The duration (in seconds) of the time interval.
          example: 2.18749
          title: duration
          type: number
        start:
          description: The starting point (in seconds) of the time interval.
          example: 0.49567
          title: start
          type: number
      title: TimeIntervalObject
      type: object
    TimeSignature:
      description: "An estimated time signature. The time signature (meter) is a notational\
        \ convention to specify how many beats are in each bar (or measure). The time\
        \ signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"\
        7/4\"."
      example: 4
      maximum: 7
      minimum: 3
      title: TimeSignature
      type: integer
    TrackObject:
      example:
        disc_number: 0
        album: ""
        available_markets:
        - available_markets
        - available_markets
        restrictions: ""
        type: track
        external_ids: ""
        uri: uri
        duration_ms: 6
        explicit: true
        is_playable: true
        artists:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          followers: ""
          genres:
          - Prog rock
          - Grunge
          popularity: 0
          name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          followers: ""
          genres:
          - Prog rock
          - Grunge
          popularity: 0
          name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
        linked_from: ""
        preview_url: preview_url
        popularity: 1
        name: name
        track_number: 5
        href: href
        id: id
        is_local: true
        external_urls: ""
      properties:
        album:
          allOf:
          - $ref: '#/components/schemas/SimplifiedAlbumObject'
          description: |
            The album on which the track appears. The album object includes a link in `href` to full information about the album.
          title: album
        artists:
          description: |
            The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/ArtistObject'
          title: artists
          type: array
        available_markets:
          description: |
            A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          title: available_markets
          type: array
        disc_number:
          description: |
            The disc number (usually `1` unless the album consists of more than one disc).
          title: disc_number
          type: integer
        duration_ms:
          description: |
            The track length in milliseconds.
          title: duration_ms
          type: integer
        explicit:
          description: |
            Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
          title: explicit
          type: boolean
        external_ids:
          allOf:
          - $ref: '#/components/schemas/ExternalIdObject'
          description: |
            Known external IDs for the track.
          title: external_ids
        external_urls:
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
          description: |
            Known external URLs for this track.
          title: external_urls
        href:
          description: |
            A link to the Web API endpoint providing full details of the track.
          title: href
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          title: id
          type: string
        is_local:
          description: |
            Whether or not the track is from a local file.
          title: is_local
          type: boolean
        is_playable:
          description: |
            Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
          title: is_playable
          type: boolean
        linked_from:
          allOf:
          - $ref: '#/components/schemas/LinkedTrackObject'
          description: "Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking)\
            \ is applied, and the requested track has been replaced with different\
            \ track. The track in the `linked_from` object contains information about\
            \ the originally requested track."
          title: linked_from
        name:
          description: |
            The name of the track.
          title: name
          type: string
        popularity:
          description: |
            The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._
          title: popularity
          type: integer
        preview_url:
          description: |
            A link to a 30 second preview (MP3 format) of the track. Can be `null`
          title: preview_url
          type: string
        restrictions:
          allOf:
          - $ref: '#/components/schemas/TrackRestrictionObject'
          description: |
            Included in the response when a content restriction is applied.
          title: restrictions
        track_number:
          description: |
            The number of the track. If an album has several discs, the track number is the number on the specified disc.
          title: track_number
          type: integer
        type:
          description: |
            The object type: "track".
          enum:
          - track
          title: type
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          title: uri
          type: string
      title: TrackObject
      type: object
      x-spotify-docs-type: TrackObject
    TrackRestrictionObject:
      properties:
        reason:
          description: |
            The reason for the restriction. Supported values:
            - `market` - The content item is not available in the given market.
            - `product` - The content item is not available for the user's subscription type.
            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.

            Additional reasons may be added in the future.
            **Note**: If you use this field, make sure that your application safely handles unknown values.
          title: reason
          type: string
      title: TrackRestrictionObject
      type: object
      x-spotify-docs-type: TrackRestrictionObject
    TuneableTrackObject:
      properties:
        acousticness:
          description: |
            A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
          format: float
          type: number
          x-spotify-docs-type: Float
        danceability:
          description: |
            Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
          format: float
          type: number
          x-spotify-docs-type: Float
        duration_ms:
          description: |
            The duration of the track in milliseconds.
          type: integer
        energy:
          description: |
            Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
          format: float
          type: number
          x-spotify-docs-type: Float
        instrumentalness:
          description: |
            Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
          format: float
          type: number
          x-spotify-docs-type: Float
        key:
          description: |
            The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
          example: 9
          maximum: 11
          minimum: -1
          title: Key
          type: integer
        liveness:
          description: |
            Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
          format: float
          type: number
          x-spotify-docs-type: Float
        loudness:
          description: |
            The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.
          example: -5.883
          format: float
          title: Loudness
          type: number
          x-spotify-docs-type: Float
        mode:
          description: |
            Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
          example: 0
          title: Mode
          type: integer
        popularity:
          description: |
            The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. _**Note**: When applying track relinking via the `market` parameter, it is expected to find relinked tracks with popularities that do not match `min_*`, `max_*`and `target_*` popularities. These relinked tracks are accurate replacements for unplayable tracks with the expected popularity scores. Original, non-relinked tracks are available via the `linked_from` attribute of the [relinked track response](/documentation/web-api/concepts/track-relinking)._
          format: float
          type: number
          x-spotify-docs-type: Float
        speechiness:
          description: |
            Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
          format: float
          type: number
          x-spotify-docs-type: Float
        tempo:
          description: |
            The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
          example: 118.211
          format: float
          title: Tempo
          type: number
          x-spotify-docs-type: Float
        time_signature:
          description: "An estimated time signature. The time signature (meter) is\
            \ a notational convention to specify how many beats are in each bar (or\
            \ measure). The time signature ranges from 3 to 7 indicating time signatures\
            \ of \"3/4\", to \"7/4\"."
          example: 4
          maximum: 7
          minimum: 3
          title: TimeSignature
          type: integer
        valence:
          description: |
            A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
          format: float
          type: number
          x-spotify-docs-type: Float
      type: object
      x-spotify-docs-type: TuneableTrackObject
    get_multiple_albums_200_response:
      example:
        albums:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          copyrights:
          - text: text
            type: type
          - text: text
            type: type
          available_markets:
          - CA
          - BR
          - IT
          restrictions: ""
          release_date_precision: year
          label: label
          type: album
          uri: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
          external_ids: ""
          tracks: ""
          total_tracks: 9
          release_date: 1981-12
          artists:
          - name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          genres:
          - genres
          - genres
          popularity: 0
          name: name
          album_type: compilation
          href: href
          id: 2up3OPMp9Tb4dAKM2erWXQ
          external_urls: ""
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          copyrights:
          - text: text
            type: type
          - text: text
            type: type
          available_markets:
          - CA
          - BR
          - IT
          restrictions: ""
          release_date_precision: year
          label: label
          type: album
          uri: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
          external_ids: ""
          tracks: ""
          total_tracks: 9
          release_date: 1981-12
          artists:
          - name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          genres:
          - genres
          - genres
          popularity: 0
          name: name
          album_type: compilation
          href: href
          id: 2up3OPMp9Tb4dAKM2erWXQ
          external_urls: ""
      properties:
        albums:
          items:
            $ref: '#/components/schemas/AlbumObject'
          title: albums
          type: array
      required:
      - albums
      title: get_multiple_albums_200_response
      type: object
    get_multiple_albums_401_response:
      example:
        error:
          message: message
          status: 519
      properties:
        error:
          $ref: '#/components/schemas/ErrorObject'
      required:
      - error
      title: get_multiple_albums_401_response
      type: object
    get_multiple_artists_200_response:
      example:
        artists:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          followers: ""
          genres:
          - Prog rock
          - Grunge
          popularity: 0
          name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          followers: ""
          genres:
          - Prog rock
          - Grunge
          popularity: 0
          name: name
          href: href
          id: id
          type: artist
          external_urls: ""
          uri: uri
      properties:
        artists:
          items:
            $ref: '#/components/schemas/ArtistObject'
          title: artists
          type: array
      required:
      - artists
      title: get_multiple_artists_200_response
      type: object
    get_an_artists_top_tracks_200_response:
      example:
        tracks:
        - disc_number: 0
          album: ""
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: track
          external_ids: ""
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls: ""
        - disc_number: 0
          album: ""
          available_markets:
          - available_markets
          - available_markets
          restrictions: ""
          type: track
          external_ids: ""
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          linked_from: ""
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls: ""
      properties:
        tracks:
          items:
            $ref: '#/components/schemas/TrackObject'
          title: tracks
          type: array
      required:
      - tracks
      title: get_an_artists_top_tracks_200_response
      type: object
    get_several_audio_features_200_response:
      example:
        audio_features:
        - track_href: |
            https://api.spotify.com/v1/tracks/2takcwOaAZWiXQijPHIx7B
          loudness: -5.883
          liveness: 0.0866
          tempo: 118.211
          valence: 0.428
          instrumentalness: 0.00686
          type: audio_features
          danceability: 0.585
          uri: spotify:track:2takcwOaAZWiXQijPHIx7B
          speechiness: 0.0556
          duration_ms: 237040
          mode: 0
          acousticness: 0.00242
          id: 2takcwOaAZWiXQijPHIx7B
          analysis_url: |
            https://api.spotify.com/v1/audio-analysis/2takcwOaAZWiXQijPHIx7B
          key: 9
          energy: 0.842
          time_signature: 4
        - track_href: |
            https://api.spotify.com/v1/tracks/2takcwOaAZWiXQijPHIx7B
          loudness: -5.883
          liveness: 0.0866
          tempo: 118.211
          valence: 0.428
          instrumentalness: 0.00686
          type: audio_features
          danceability: 0.585
          uri: spotify:track:2takcwOaAZWiXQijPHIx7B
          speechiness: 0.0556
          duration_ms: 237040
          mode: 0
          acousticness: 0.00242
          id: 2takcwOaAZWiXQijPHIx7B
          analysis_url: |
            https://api.spotify.com/v1/audio-analysis/2takcwOaAZWiXQijPHIx7B
          key: 9
          energy: 0.842
          time_signature: 4
      properties:
        audio_features:
          items:
            $ref: '#/components/schemas/AudioFeaturesObject'
          title: audio_features
          type: array
      required:
      - audio_features
      title: get_several_audio_features_200_response
      type: object
    get_multiple_audiobooks_200_response:
      example:
        audiobooks:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - languages
          - languages
          copyrights:
          - text: text
            type: type
          - text: text
            type: type
          chapters: null
          available_markets:
          - available_markets
          - available_markets
          description: description
          edition: Unabridged
          type: audiobook
          html_description: html_description
          uri: uri
          explicit: true
          media_type: media_type
          name: name
          total_chapters: 0
          publisher: publisher
          href: href
          id: id
          external_urls: ""
          authors:
          - name: name
          - name: name
          narrators:
          - name: name
          - name: name
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - languages
          - languages
          copyrights:
          - text: text
            type: type
          - text: text
            type: type
          chapters: null
          available_markets:
          - available_markets
          - available_markets
          description: description
          edition: Unabridged
          type: audiobook
          html_description: html_description
          uri: uri
          explicit: true
          media_type: media_type
          name: name
          total_chapters: 0
          publisher: publisher
          href: href
          id: id
          external_urls: ""
          authors:
          - name: name
          - name: name
          narrators:
          - name: name
          - name: name
      properties:
        audiobooks:
          items:
            $ref: '#/components/schemas/AudiobookObject'
          title: audiobooks
          type: array
      required:
      - audiobooks
      title: get_multiple_audiobooks_200_response
      type: object
    get_categories_200_response_categories:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - properties:
          items:
            items:
              $ref: '#/components/schemas/CategoryObject'
            type: array
        type: object
      example:
        next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        total: 4
        offset: 0
        previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
        limit: 20
        href: |
          https://api.spotify.com/v1/me/shows?offset=0&limit=20
        items:
        - name: EQUAL
          href: href
          id: equal
          icons:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
        - name: EQUAL
          href: href
          id: equal
          icons:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
      title: get_categories_200_response_categories
    get_categories_200_response:
      example:
        categories:
          next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          total: 4
          offset: 0
          previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          limit: 20
          href: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          items:
          - name: EQUAL
            href: href
            id: equal
            icons:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
          - name: EQUAL
            href: href
            id: equal
            icons:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
      properties:
        categories:
          $ref: '#/components/schemas/get_categories_200_response_categories'
      required:
      - categories
      title: get_categories_200_response
      type: object
    get_new_releases_200_response:
      example:
        albums:
          next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          total: 4
          offset: 0
          previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          limit: 20
          href: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          items:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            available_markets:
            - CA
            - BR
            - IT
            restrictions: ""
            release_date_precision: year
            album_group: compilation
            type: album
            uri: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
            total_tracks: 9
            release_date: 1981-12
            artists:
            - name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            - name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            name: name
            album_type: compilation
            href: href
            id: 2up3OPMp9Tb4dAKM2erWXQ
            external_urls: ""
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            available_markets:
            - CA
            - BR
            - IT
            restrictions: ""
            release_date_precision: year
            album_group: compilation
            type: album
            uri: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
            total_tracks: 9
            release_date: 1981-12
            artists:
            - name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            - name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            name: name
            album_type: compilation
            href: href
            id: 2up3OPMp9Tb4dAKM2erWXQ
            external_urls: ""
      properties:
        albums:
          $ref: '#/components/schemas/PagingSimplifiedAlbumObject'
      required:
      - albums
      title: get_new_releases_200_response
      type: object
    get_several_chapters_200_response:
      example:
        chapters:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          audiobook: ""
          languages:
          - fr
          - en
          chapter_number: 1
          available_markets:
          - available_markets
          - available_markets
          description: |
            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
          restrictions: ""
          release_date_precision: day
          type: episode
          html_description: |
            <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
          uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          duration_ms: 1686230
          explicit: true
          is_playable: true
          resume_point: ""
          release_date: 1981-12-15
          name: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          id: 5Xt5DXGzch68nYYamXrNxZ
          external_urls: ""
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          audiobook: ""
          languages:
          - fr
          - en
          chapter_number: 1
          available_markets:
          - available_markets
          - available_markets
          description: |
            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
          restrictions: ""
          release_date_precision: day
          type: episode
          html_description: |
            <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
          uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          duration_ms: 1686230
          explicit: true
          is_playable: true
          resume_point: ""
          release_date: 1981-12-15
          name: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          id: 5Xt5DXGzch68nYYamXrNxZ
          external_urls: ""
      properties:
        chapters:
          items:
            $ref: '#/components/schemas/ChapterObject'
          title: chapters
          type: array
      required:
      - chapters
      title: get_several_chapters_200_response
      type: object
    get_multiple_episodes_200_response:
      example:
        episodes:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - fr
          - en
          show: ""
          description: |
            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
          restrictions: ""
          language: en
          release_date_precision: day
          type: episode
          html_description: |
            <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
          uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          is_externally_hosted: true
          audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          duration_ms: 1686230
          explicit: true
          is_playable: true
          resume_point: ""
          release_date: 1981-12-15
          name: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          id: 5Xt5DXGzch68nYYamXrNxZ
          external_urls: ""
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - fr
          - en
          show: ""
          description: |
            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
          restrictions: ""
          language: en
          release_date_precision: day
          type: episode
          html_description: |
            <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
          uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          is_externally_hosted: true
          audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          duration_ms: 1686230
          explicit: true
          is_playable: true
          resume_point: ""
          release_date: 1981-12-15
          name: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          id: 5Xt5DXGzch68nYYamXrNxZ
          external_urls: ""
      properties:
        episodes:
          items:
            $ref: '#/components/schemas/EpisodeObject'
          title: episodes
          type: array
      required:
      - episodes
      title: get_multiple_episodes_200_response
      type: object
    get_available_markets_200_response:
      example:
        markets:
        - CA
        - BR
        - IT
      properties:
        markets:
          example:
          - CA
          - BR
          - IT
          items:
            type: string
          title: markets
          type: array
      title: get_available_markets_200_response
      type: object
    save_albums_user_request:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      title: save_albums_user_request
      type: object
    save_episodes_user_request:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      required:
      - ids
      title: save_episodes_user_request
      type: object
    remove_episodes_user_request:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      title: remove_episodes_user_request
      type: object
    get_followed_200_response:
      example:
        artists:
          next: next
          cursors: ""
          total: 6
          limit: 0
          href: href
          items:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
      properties:
        artists:
          $ref: '#/components/schemas/CursorPagingSimplifiedArtistObject'
      required:
      - artists
      title: get_followed_200_response
      type: object
    follow_artists_users_request:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids).
            For example: `{ids:["74ASZWbe4lXaubB36ztrGX", "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      required:
      - ids
      title: follow_artists_users_request
      type: object
    unfollow_artists_users_request:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `{ids:["74ASZWbe4lXaubB36ztrGX", "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      title: unfollow_artists_users_request
      type: object
    transfer_a_users_playback_request:
      additionalProperties: true
      example:
        device_ids:
        - 74ASZWbe4lXaubB36ztrGX
      properties:
        device_ids:
          description: |
            A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:`{device_ids:["74ASZWbe4lXaubB36ztrGX"]}`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_
          items:
            type: string
          type: array
        play:
          description: |
            **true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state.
          type: boolean
      required:
      - device_ids
      title: transfer_a_users_playback_request
      type: object
    start_a_users_playback_request:
      additionalProperties: true
      example:
        context_uri: spotify:album:5ht7ItJgpBH7W6vJ5BqpPr
        offset:
          position: 5
        position_ms: 0
      properties:
        context_uri:
          description: |
            Optional. Spotify URI of the context to play.
            Valid contexts are albums, artists & playlists.
            `{context_uri:"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT"}`
          type: string
        offset:
          additionalProperties: true
          description: |
            Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object
            "position" is zero based and can’t be negative. Example: `"offset": {"position": 5}`
            "uri" is a string representing the uri of the item to start at. Example: `"offset": {"uri": "spotify:track:1301WleyT98MSxVHPZCA6M"}`
          type: object
        position_ms:
          description: |
            Indicates from what position to start playback. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song.
          type: integer
        uris:
          description: |
            Optional. A JSON array of the Spotify track URIs to play.
            For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh", "spotify:track:1301WleyT98MSxVHPZCA6M"]}`
          items:
            type: string
          type: array
      title: start_a_users_playback_request
      type: object
    save_shows_user_request:
      properties:
        ids:
          description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \  \nA maximum of 50 items can be specified in one request. *Note: if\
            \ the `ids` parameter is present in the query string, any IDs listed here\
            \ in the body will be ignored.*"
          items:
            type: string
          title: ids
          type: array
      title: save_shows_user_request
      type: object
    save_tracks_user_request:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      required:
      - ids
      title: save_tracks_user_request
      type: object
    change_playlist_details_request:
      additionalProperties: true
      example:
        description: Updated playlist description
        name: Updated Playlist Name
        public: false
      properties:
        collaborative:
          description: |
            If `true`, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. <br/>
            _**Note**: You can only set `collaborative` to `true` on non-public playlists._
          type: boolean
        description:
          description: |
            Value for playlist description as displayed in Spotify Clients and in the Web API.
          type: string
        name:
          description: |
            The new name for the playlist, for example `"My New Playlist Title"`
          type: string
        public:
          description: |
            If `true` the playlist will be public, if `false` it will be private.
          type: boolean
      title: change_playlist_details_request
      type: object
    follow_playlist_request:
      additionalProperties: true
      example:
        public: false
      properties:
        public:
          description: |
            Defaults to `true`. If `true` the playlist will be included in user's public playlists, if `false` it will remain private.
          type: boolean
      title: follow_playlist_request
      type: object
    reorder_or_replace_playlists_tracks_request:
      additionalProperties: true
      example:
        insert_before: 3
        range_length: 2
        range_start: 1
      properties:
        insert_before:
          description: |
            The position where the items should be inserted.<br/>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br/>Examples:<br/>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br/>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0.
          type: integer
        range_length:
          description: |
            The amount of items to be reordered. Defaults to 1 if not set.<br/>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br/>Example:<br/>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2.
          type: integer
        range_start:
          description: |
            The position of the first item to be reordered.
          type: integer
        snapshot_id:
          description: |
            The playlist's snapshot ID against which you want to make the changes.
          type: string
        uris:
          items:
            type: string
          type: array
      title: reorder_or_replace_playlists_tracks_request
      type: object
    reorder_or_replace_playlists_tracks_200_response:
      example:
        snapshot_id: abc
      properties:
        snapshot_id:
          example: abc
          title: snapshot_id
          type: string
      title: reorder_or_replace_playlists_tracks_200_response
      type: object
    add_tracks_to_playlist_request:
      additionalProperties: true
      properties:
        position:
          description: |
            The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0` ; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M"], "position": 3}`
          type: integer
        uris:
          description: |
            A JSON array of the [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M", "spotify:episode:512ojhOuo1ktJprKbVcKyQ"]}`<br/>A maximum of 100 items can be added in one request. _**Note**: if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored._
          items:
            type: string
          type: array
      title: add_tracks_to_playlist_request
      type: object
    remove_tracks_playlist_request_tracks_inner:
      properties:
        uri:
          description: Spotify URI
          title: uri
          type: string
      title: remove_tracks_playlist_request_tracks_inner
      type: object
    remove_tracks_playlist_request:
      properties:
        snapshot_id:
          description: |
            The playlist's snapshot ID against which you want to make the changes.
            The API will validate that the specified items exist and in the specified positions and make the changes,
            even if more recent changes have been made to the playlist.
          title: snapshot_id
          type: string
        tracks:
          description: |
            An array of objects containing [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or episodes to remove.
            For example: `{ "tracks": [{ "uri": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh" },{ "uri": "spotify:track:1301WleyT98MSxVHPZCA6M" }] }`. A maximum of 100 objects can be sent at once.
          items:
            $ref: '#/components/schemas/remove_tracks_playlist_request_tracks_inner'
          title: tracks
          type: array
      required:
      - tracks
      title: remove_tracks_playlist_request
      type: object
    get_recommendation_genres_200_response:
      example:
        genres:
        - alternative
        - samba
      properties:
        genres:
          example:
          - alternative
          - samba
          items:
            type: string
          title: genres
          type: array
      required:
      - genres
      title: get_recommendation_genres_200_response
      type: object
    search_200_response:
      example:
        albums:
          next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          total: 4
          offset: 0
          previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          limit: 20
          href: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          items:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            available_markets:
            - CA
            - BR
            - IT
            restrictions: ""
            release_date_precision: year
            album_group: compilation
            type: album
            uri: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
            total_tracks: 9
            release_date: 1981-12
            artists:
            - name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            - name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            name: name
            album_type: compilation
            href: href
            id: 2up3OPMp9Tb4dAKM2erWXQ
            external_urls: ""
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            available_markets:
            - CA
            - BR
            - IT
            restrictions: ""
            release_date_precision: year
            album_group: compilation
            type: album
            uri: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
            total_tracks: 9
            release_date: 1981-12
            artists:
            - name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            - name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            name: name
            album_type: compilation
            href: href
            id: 2up3OPMp9Tb4dAKM2erWXQ
            external_urls: ""
        shows:
          next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          total: 4
          offset: 0
          previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          limit: 20
          href: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          items:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            languages:
            - languages
            - languages
            copyrights:
            - text: text
              type: type
            - text: text
              type: type
            available_markets:
            - available_markets
            - available_markets
            description: description
            type: show
            html_description: html_description
            uri: uri
            is_externally_hosted: true
            total_episodes: 6
            explicit: true
            media_type: media_type
            name: name
            publisher: publisher
            href: href
            id: id
            external_urls: ""
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            languages:
            - languages
            - languages
            copyrights:
            - text: text
              type: type
            - text: text
              type: type
            available_markets:
            - available_markets
            - available_markets
            description: description
            type: show
            html_description: html_description
            uri: uri
            is_externally_hosted: true
            total_episodes: 6
            explicit: true
            media_type: media_type
            name: name
            publisher: publisher
            href: href
            id: id
            external_urls: ""
        artists:
          next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          total: 4
          offset: 0
          previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          limit: 20
          href: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          items:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers: ""
            genres:
            - Prog rock
            - Grunge
            popularity: 0
            name: name
            href: href
            id: id
            type: artist
            external_urls: ""
            uri: uri
        audiobooks:
          next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          total: 4
          offset: 0
          previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          limit: 20
          href: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          items:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            languages:
            - languages
            - languages
            copyrights:
            - text: text
              type: type
            - text: text
              type: type
            available_markets:
            - available_markets
            - available_markets
            description: description
            edition: Unabridged
            type: audiobook
            html_description: html_description
            uri: uri
            explicit: true
            media_type: media_type
            name: name
            total_chapters: 0
            publisher: publisher
            href: href
            id: id
            external_urls: ""
            authors:
            - name: name
            - name: name
            narrators:
            - name: name
            - name: name
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            languages:
            - languages
            - languages
            copyrights:
            - text: text
              type: type
            - text: text
              type: type
            available_markets:
            - available_markets
            - available_markets
            description: description
            edition: Unabridged
            type: audiobook
            html_description: html_description
            uri: uri
            explicit: true
            media_type: media_type
            name: name
            total_chapters: 0
            publisher: publisher
            href: href
            id: id
            external_urls: ""
            authors:
            - name: name
            - name: name
            narrators:
            - name: name
            - name: name
        playlists:
          next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          total: 4
          offset: 0
          previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          limit: 20
          href: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          items:
          - owner: ""
            images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            snapshot_id: snapshot_id
            collaborative: true
            description: description
            type: type
            uri: uri
            tracks: ""
            public: true
            name: name
            href: href
            id: id
            external_urls: ""
          - owner: ""
            images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            snapshot_id: snapshot_id
            collaborative: true
            description: description
            type: type
            uri: uri
            tracks: ""
            public: true
            name: name
            href: href
            id: id
            external_urls: ""
        episodes:
          next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          total: 4
          offset: 0
          previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          limit: 20
          href: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          items:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            languages:
            - fr
            - en
            description: |
              A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
            restrictions: ""
            language: en
            release_date_precision: day
            type: episode
            html_description: |
              <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
            uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
            is_externally_hosted: true
            audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
            duration_ms: 1686230
            explicit: true
            is_playable: true
            resume_point: ""
            release_date: 1981-12-15
            name: |
              Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
            href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
            id: 5Xt5DXGzch68nYYamXrNxZ
            external_urls: ""
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            languages:
            - fr
            - en
            description: |
              A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
            restrictions: ""
            language: en
            release_date_precision: day
            type: episode
            html_description: |
              <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
            uri: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
            is_externally_hosted: true
            audio_preview_url: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
            duration_ms: 1686230
            explicit: true
            is_playable: true
            resume_point: ""
            release_date: 1981-12-15
            name: |
              Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
            href: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
            id: 5Xt5DXGzch68nYYamXrNxZ
            external_urls: ""
        tracks:
          next: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          total: 4
          offset: 0
          previous: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          limit: 20
          href: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          items:
          - disc_number: 0
            album: ""
            available_markets:
            - available_markets
            - available_markets
            restrictions: ""
            type: track
            external_ids: ""
            uri: uri
            duration_ms: 6
            explicit: true
            is_playable: true
            artists:
            - images:
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              followers: ""
              genres:
              - Prog rock
              - Grunge
              popularity: 0
              name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            - images:
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              followers: ""
              genres:
              - Prog rock
              - Grunge
              popularity: 0
              name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            linked_from: ""
            preview_url: preview_url
            popularity: 1
            name: name
            track_number: 5
            href: href
            id: id
            is_local: true
            external_urls: ""
          - disc_number: 0
            album: ""
            available_markets:
            - available_markets
            - available_markets
            restrictions: ""
            type: track
            external_ids: ""
            uri: uri
            duration_ms: 6
            explicit: true
            is_playable: true
            artists:
            - images:
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              followers: ""
              genres:
              - Prog rock
              - Grunge
              popularity: 0
              name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            - images:
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              - width: 300
                url: |
                  https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
                height: 300
              followers: ""
              genres:
              - Prog rock
              - Grunge
              popularity: 0
              name: name
              href: href
              id: id
              type: artist
              external_urls: ""
              uri: uri
            linked_from: ""
            preview_url: preview_url
            popularity: 1
            name: name
            track_number: 5
            href: href
            id: id
            is_local: true
            external_urls: ""
      properties:
        albums:
          $ref: '#/components/schemas/PagingSimplifiedAlbumObject'
        artists:
          $ref: '#/components/schemas/PagingArtistObject'
        audiobooks:
          $ref: '#/components/schemas/PagingSimplifiedAudiobookObject'
        episodes:
          $ref: '#/components/schemas/PagingSimplifiedEpisodeObject'
        playlists:
          $ref: '#/components/schemas/PagingPlaylistObject'
        shows:
          $ref: '#/components/schemas/PagingSimplifiedShowObject'
        tracks:
          $ref: '#/components/schemas/PagingTrackObject'
      title: search_200_response
      type: object
    get_multiple_shows_200_response:
      example:
        shows:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - languages
          - languages
          copyrights:
          - text: text
            type: type
          - text: text
            type: type
          available_markets:
          - available_markets
          - available_markets
          description: description
          type: show
          html_description: html_description
          uri: uri
          is_externally_hosted: true
          total_episodes: 6
          explicit: true
          media_type: media_type
          name: name
          publisher: publisher
          href: href
          id: id
          external_urls: ""
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          languages:
          - languages
          - languages
          copyrights:
          - text: text
            type: type
          - text: text
            type: type
          available_markets:
          - available_markets
          - available_markets
          description: description
          type: show
          html_description: html_description
          uri: uri
          is_externally_hosted: true
          total_episodes: 6
          explicit: true
          media_type: media_type
          name: name
          publisher: publisher
          href: href
          id: id
          external_urls: ""
      properties:
        shows:
          items:
            $ref: '#/components/schemas/SimplifiedShowObject'
          title: shows
          type: array
      required:
      - shows
      title: get_multiple_shows_200_response
      type: object
    create_playlist_request:
      additionalProperties: true
      example:
        description: New playlist description
        name: New Playlist
        public: false
      properties:
        collaborative:
          description: |
            Defaults to `false`. If `true` the playlist will be collaborative. _**Note**: to create a collaborative playlist you must also set `public` to `false`. To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](/documentation/web-api/concepts/scopes/#list-of-scopes)._
          type: boolean
        description:
          description: |
            value for playlist description as displayed in Spotify Clients and in the Web API.
          type: string
        name:
          description: |
            The name for the new playlist, for example `"Your Coolest Playlist"`. This name does not need to be unique; a user may have several playlists with the same name.
          type: string
        public:
          description: |
            Defaults to `true`. If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](/documentation/web-api/concepts/scopes/#list-of-scopes)
          type: boolean
      required:
      - name
      title: create_playlist_request
      type: object
    AudioAnalysisObject_meta:
      example:
        detailed_status: OK
        status_code: 0
        analyzer_version: 4.0.0
        analysis_time: 6.93906
        input_process: libvorbisfile L+R 44100->22050
        platform: Linux
        timestamp: 1495193577
      properties:
        analysis_time:
          description: The amount of time taken to analyze this track.
          example: 6.93906
          title: analysis_time
          type: number
        analyzer_version:
          description: The version of the Analyzer used to analyze this track.
          example: 4.0.0
          title: analyzer_version
          type: string
        detailed_status:
          description: "A detailed status code for this track. If analysis data is\
            \ missing, this code may explain why."
          example: OK
          title: detailed_status
          type: string
        input_process:
          description: The method used to read the track's audio data.
          example: libvorbisfile L+R 44100->22050
          title: input_process
          type: string
        platform:
          description: The platform used to read the track's audio data.
          example: Linux
          title: platform
          type: string
        status_code:
          description: "The return code of the analyzer process. 0 if successful,\
            \ 1 if any errors occurred."
          example: 0
          title: status_code
          type: integer
        timestamp:
          description: The Unix timestamp (in seconds) at which this track was analyzed.
          example: 1495193577
          title: timestamp
          type: integer
      title: AudioAnalysisObject_meta
      type: object
    AudioAnalysisObject_track:
      example:
        mode_confidence: 0.485
        loudness: -5.883
        tempo: 118.211
        codestring: codestring
        echoprint_version: 4.15
        key_confidence: 0.408
        offset_seconds: 0
        duration: 207.95985
        mode: 0
        tempo_confidence: 0.73
        window_seconds: 0
        start_of_fade_out: 201.13705
        synch_version: 1
        code_version: 3.15
        time_signature_confidence: 0.994
        analysis_channels: 1
        key: 9
        time_signature: 4
        sample_md5: sample_md5
        end_of_fade_in: 0
        echoprintstring: echoprintstring
        analysis_sample_rate: 22050
        synchstring: synchstring
        rhythmstring: rhythmstring
        rhythm_version: 1
        num_samples: 4585515
      properties:
        analysis_channels:
          description: "The number of channels used for analysis. If 1, all channels\
            \ are summed together to mono before analysis."
          example: 1
          title: analysis_channels
          type: integer
        analysis_sample_rate:
          description: The sample rate used to decode and analyze this track. May
            differ from the actual sample rate of this track available on Spotify.
          example: 22050
          title: analysis_sample_rate
          type: integer
        code_version:
          description: A version number for the Echo Nest Musical Fingerprint format
            used in the codestring field.
          example: 3.15
          title: code_version
          type: number
        codestring:
          description: "An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4)\
            \ codestring for this track."
          title: codestring
          type: string
        duration:
          description: Length of the track in seconds.
          example: 207.95985
          title: duration
          type: number
        echoprint_version:
          description: A version number for the EchoPrint format used in the echoprintstring
            field.
          example: 4.15
          title: echoprint_version
          type: number
        echoprintstring:
          description: "An [EchoPrint](https://github.com/spotify/echoprint-codegen)\
            \ codestring for this track."
          title: echoprintstring
          type: string
        end_of_fade_in:
          description: "The time, in seconds, at which the track's fade-in period\
            \ ends. If the track has no fade-in, this will be 0.0."
          example: 0
          title: end_of_fade_in
          type: number
        key:
          description: |
            The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
          example: 9
          maximum: 11
          minimum: -1
          title: Key
          type: integer
        key_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ `key`."
          example: 0.408
          maximum: 1
          minimum: 0
          title: key_confidence
          type: number
        loudness:
          description: |
            The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.
          example: -5.883
          format: float
          title: Loudness
          type: number
          x-spotify-docs-type: Float
        mode:
          description: |
            Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
          example: 0
          title: Mode
          type: integer
        mode_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ `mode`."
          example: 0.485
          maximum: 1
          minimum: 0
          title: mode_confidence
          type: number
        num_samples:
          description: The exact number of audio samples analyzed from this track.
            See also `analysis_sample_rate`.
          example: 4585515
          title: num_samples
          type: integer
        offset_seconds:
          description: "An offset to the start of the region of the track that was\
            \ analyzed. (As the entire track is analyzed, this should always be 0.)"
          example: 0
          title: offset_seconds
          type: integer
        rhythm_version:
          description: A version number for the Rhythmstring used in the rhythmstring
            field.
          example: 1
          title: rhythm_version
          type: number
        rhythmstring:
          description: A Rhythmstring for this track. The format of this string is
            similar to the Synchstring.
          title: rhythmstring
          type: string
        sample_md5:
          description: This field will always contain the empty string.
          title: sample_md5
          type: string
        start_of_fade_out:
          description: "The time, in seconds, at which the track's fade-out period\
            \ starts. If the track has no fade-out, this should match the track's\
            \ length."
          example: 201.13705
          title: start_of_fade_out
          type: number
        synch_version:
          description: A version number for the Synchstring used in the synchstring
            field.
          example: 1
          title: synch_version
          type: number
        synchstring:
          description: "A [Synchstring](https://github.com/echonest/synchdata) for\
            \ this track."
          title: synchstring
          type: string
        tempo:
          description: |
            The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
          example: 118.211
          format: float
          title: Tempo
          type: number
          x-spotify-docs-type: Float
        tempo_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ `tempo`."
          example: 0.73
          maximum: 1
          minimum: 0
          title: tempo_confidence
          type: number
        time_signature:
          description: "An estimated time signature. The time signature (meter) is\
            \ a notational convention to specify how many beats are in each bar (or\
            \ measure). The time signature ranges from 3 to 7 indicating time signatures\
            \ of \"3/4\", to \"7/4\"."
          example: 4
          maximum: 7
          minimum: 3
          title: TimeSignature
          type: integer
        time_signature_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ `time_signature`."
          example: 0.994
          maximum: 1
          minimum: 0
          title: time_signature_confidence
          type: number
        window_seconds:
          description: "The length of the region of the track was analyzed, if a subset\
            \ of the track was analyzed. (As the entire track is analyzed, this should\
            \ always be 0.)"
          example: 0
          title: window_seconds
          type: integer
      title: AudioAnalysisObject_track
      type: object
    AudiobookObject_allOf_chapters:
      description: |
        The chapters of the audiobook.
      type: object
    CurrentlyPlayingContextObject_item:
      description: The currently playing track or episode. Can be `null`.
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/TrackObject'
      - $ref: '#/components/schemas/EpisodeObject'
      title: CurrentlyPlayingContextObject_item
      x-spotify-docs-type: TrackObject | EpisodeObject
    PlaylistTrackObject_track:
      description: Information about the track or episode.
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/TrackObject'
      - $ref: '#/components/schemas/EpisodeObject'
      title: PlaylistTrackObject_track
      x-spotify-docs-type: TrackObject | EpisodeObject
    QueueObject_queue_inner:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/TrackObject'
      - $ref: '#/components/schemas/EpisodeObject'
      title: QueueObject_queue_inner
      x-spotify-docs-type: TrackObject | EpisodeObject
    ShowObject_allOf_episodes:
      description: |
        The episodes of the show.
      type: object
  securitySchemes:
    oauth_2_0:
      description: Spotify supports OAuth 2.0 for authenticating all API requests.
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.spotify.com/authorize
          scopes:
            app-remote-control: |
              Communicate with the Spotify app on your device.
            playlist-modify-private: |
              Manage your private playlists.
            playlist-modify-public: |
              Manage your public playlists.
            playlist-read-collaborative: |
              Access your collaborative playlists.
            playlist-read-private: |
              Access your private playlists.
            streaming: |
              Play content and control playback on your other devices.
            ugc-image-upload: |
              Upload images to Spotify on your behalf.
            user-follow-modify: |
              Manage your saved content.
            user-follow-read: |
              Access your followers and who you are following.
            user-library-modify: |
              Manage your saved content.
            user-library-read: |
              Access your saved content.
            user-modify-playback-state: |
              Control playback on your Spotify clients and Spotify Connect devices.
            user-read-currently-playing: |
              Read your currently playing content.
            user-read-email: |
              Get your real email address.
            user-read-playback-position: |
              Read your position in content you have played.
            user-read-playback-state: |
              Read your currently playing content and Spotify Connect devices information.
            user-read-private: |
              Access your subscription details.
            user-read-recently-played: |
              Access your recently played items.
            user-top-read: |
              Read your top artists and content.
          tokenUrl: https://accounts.spotify.com/api/token
      type: oauth2
      x-tokenInfoFunc: openapi_server.controllers.security_controller.info_from_oauth_2_0
      x-scopeValidateFunc: openapi_server.controllers.security_controller.validate_scope_oauth_2_0
