/**
 * Sonar Trading
 * Currency Authority: Exchange Rate of 1453 country currencies and crypto currencies
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Currencies service.
* @module api/CurrenciesApi
* @version 1.0
*/
export default class CurrenciesApi {

    /**
    * Constructs a new CurrenciesApi. 
    * @alias module:api/CurrenciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the convertGet operation.
     * @callback module:api/CurrenciesApi~convertGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a currency amount to multiple other currencies
     * @param {String} from Currency you want to convert. For example, EUR
     * @param {String} to Comma separated list of currencies codes. For example, USD
     * @param {Object} opts Optional parameters
     * @param {String} [amount] This parameter can be used to specify the amount you want to convert. If an amount is not specified then 1 is assumed.
     * @param {String} [decimalPlaces] This parameter can be used to specify the number of decimal places included in the output. If an amount is not specified then 12 is assumed.
     * @param {module:api/CurrenciesApi~convertGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    convertGet(from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling convertGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling convertGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'amount': opts['amount'],
        'decimal_places': opts['decimalPlaces']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/convert', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countryCurrenciesGet operation.
     * @callback module:api/CurrenciesApi~countryCurrenciesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of all currencies of countries, available via service
     * @param {Object} opts Optional parameters
     * @param {String} [language] Parameter used to specify the language in which you would like the currency names to be provided. If not specified, EN is used. Now availeble only EN language.
     * @param {module:api/CurrenciesApi~countryCurrenciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    countryCurrenciesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/country/currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the digitalCurrenciesGet operation.
     * @callback module:api/CurrenciesApi~digitalCurrenciesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of all digital currencies, available via service
     * @param {Object} opts Optional parameters
     * @param {String} [language] Parameter used to specify the language in which you would like the currency names to be provided. If not specified, EN is used. Now availeble only EN language.
     * @param {module:api/CurrenciesApi~digitalCurrenciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    digitalCurrenciesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/digital/currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the historyGet operation.
     * @callback module:api/CurrenciesApi~historyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a historic rate for a currencies
     * @param {String} from Currency you want to convert. For example, EUR
     * @param {String} to Comma separated list of currencies codes. For example, USD
     * @param {String} date UTC date should be in the form of YYYY-MM-DD, for example, 2018-06-20. Data available from 2018-06-19 only.
     * @param {Object} opts Optional parameters
     * @param {String} [amount] This parameter can be used to specify the amount you want to convert. If an amount is not specified then 1 is assumed.
     * @param {String} [decimalPlaces] This parameter can be used to specify the number of decimal places included in the output. If an amount is not specified then 4 is assumed.
     * @param {module:api/CurrenciesApi~historyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    historyGet(from, to, date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling historyGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling historyGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling historyGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'date': date,
        'amount': opts['amount'],
        'decimal_places': opts['decimalPlaces']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
