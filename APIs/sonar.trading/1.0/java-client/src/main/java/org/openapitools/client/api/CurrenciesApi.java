/*
 * Sonar Trading
 * Currency Authority: Exchange Rate of 1453 country currencies and crypto currencies
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CurrenciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CurrenciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrenciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for convertGet
     * @param from Currency you want to convert. For example, EUR (required)
     * @param to Comma separated list of currencies codes. For example, USD (required)
     * @param amount This parameter can be used to specify the amount you want to convert. If an amount is not specified then 1 is assumed. (optional)
     * @param decimalPlaces This parameter can be used to specify the number of decimal places included in the output. If an amount is not specified then 12 is assumed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertGetCall(String from, String to, String amount, String decimalPlaces, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (decimalPlaces != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decimal_places", decimalPlaces));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertGetValidateBeforeCall(String from, String to, String amount, String decimalPlaces, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling convertGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling convertGet(Async)");
        }

        return convertGetCall(from, to, amount, decimalPlaces, _callback);

    }

    /**
     * Convert a currency amount to multiple other currencies
     * 
     * @param from Currency you want to convert. For example, EUR (required)
     * @param to Comma separated list of currencies codes. For example, USD (required)
     * @param amount This parameter can be used to specify the amount you want to convert. If an amount is not specified then 1 is assumed. (optional)
     * @param decimalPlaces This parameter can be used to specify the number of decimal places included in the output. If an amount is not specified then 12 is assumed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public void convertGet(String from, String to, String amount, String decimalPlaces) throws ApiException {
        convertGetWithHttpInfo(from, to, amount, decimalPlaces);
    }

    /**
     * Convert a currency amount to multiple other currencies
     * 
     * @param from Currency you want to convert. For example, EUR (required)
     * @param to Comma separated list of currencies codes. For example, USD (required)
     * @param amount This parameter can be used to specify the amount you want to convert. If an amount is not specified then 1 is assumed. (optional)
     * @param decimalPlaces This parameter can be used to specify the number of decimal places included in the output. If an amount is not specified then 12 is assumed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> convertGetWithHttpInfo(String from, String to, String amount, String decimalPlaces) throws ApiException {
        okhttp3.Call localVarCall = convertGetValidateBeforeCall(from, to, amount, decimalPlaces, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Convert a currency amount to multiple other currencies (asynchronously)
     * 
     * @param from Currency you want to convert. For example, EUR (required)
     * @param to Comma separated list of currencies codes. For example, USD (required)
     * @param amount This parameter can be used to specify the amount you want to convert. If an amount is not specified then 1 is assumed. (optional)
     * @param decimalPlaces This parameter can be used to specify the number of decimal places included in the output. If an amount is not specified then 12 is assumed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertGetAsync(String from, String to, String amount, String decimalPlaces, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertGetValidateBeforeCall(from, to, amount, decimalPlaces, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for countryCurrenciesGet
     * @param language Parameter used to specify the language in which you would like the currency names to be provided. If not specified, EN is used. Now availeble only EN language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countryCurrenciesGetCall(String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/country/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countryCurrenciesGetValidateBeforeCall(String language, final ApiCallback _callback) throws ApiException {
        return countryCurrenciesGetCall(language, _callback);

    }

    /**
     * Return a list of all currencies of countries, available via service
     * 
     * @param language Parameter used to specify the language in which you would like the currency names to be provided. If not specified, EN is used. Now availeble only EN language. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public void countryCurrenciesGet(String language) throws ApiException {
        countryCurrenciesGetWithHttpInfo(language);
    }

    /**
     * Return a list of all currencies of countries, available via service
     * 
     * @param language Parameter used to specify the language in which you would like the currency names to be provided. If not specified, EN is used. Now availeble only EN language. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> countryCurrenciesGetWithHttpInfo(String language) throws ApiException {
        okhttp3.Call localVarCall = countryCurrenciesGetValidateBeforeCall(language, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return a list of all currencies of countries, available via service (asynchronously)
     * 
     * @param language Parameter used to specify the language in which you would like the currency names to be provided. If not specified, EN is used. Now availeble only EN language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countryCurrenciesGetAsync(String language, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = countryCurrenciesGetValidateBeforeCall(language, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for digitalCurrenciesGet
     * @param language Parameter used to specify the language in which you would like the currency names to be provided. If not specified, EN is used. Now availeble only EN language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call digitalCurrenciesGetCall(String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call digitalCurrenciesGetValidateBeforeCall(String language, final ApiCallback _callback) throws ApiException {
        return digitalCurrenciesGetCall(language, _callback);

    }

    /**
     * Return a list of all digital currencies, available via service
     * 
     * @param language Parameter used to specify the language in which you would like the currency names to be provided. If not specified, EN is used. Now availeble only EN language. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public void digitalCurrenciesGet(String language) throws ApiException {
        digitalCurrenciesGetWithHttpInfo(language);
    }

    /**
     * Return a list of all digital currencies, available via service
     * 
     * @param language Parameter used to specify the language in which you would like the currency names to be provided. If not specified, EN is used. Now availeble only EN language. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> digitalCurrenciesGetWithHttpInfo(String language) throws ApiException {
        okhttp3.Call localVarCall = digitalCurrenciesGetValidateBeforeCall(language, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return a list of all digital currencies, available via service (asynchronously)
     * 
     * @param language Parameter used to specify the language in which you would like the currency names to be provided. If not specified, EN is used. Now availeble only EN language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call digitalCurrenciesGetAsync(String language, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = digitalCurrenciesGetValidateBeforeCall(language, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for historyGet
     * @param from Currency you want to convert. For example, EUR (required)
     * @param to Comma separated list of currencies codes. For example, USD (required)
     * @param date UTC date should be in the form of YYYY-MM-DD, for example, 2018-06-20. Data available from 2018-06-19 only. (required)
     * @param amount This parameter can be used to specify the amount you want to convert. If an amount is not specified then 1 is assumed. (optional)
     * @param decimalPlaces This parameter can be used to specify the number of decimal places included in the output. If an amount is not specified then 4 is assumed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call historyGetCall(String from, String to, String date, String amount, String decimalPlaces, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (decimalPlaces != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decimal_places", decimalPlaces));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call historyGetValidateBeforeCall(String from, String to, String date, String amount, String decimalPlaces, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling historyGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling historyGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling historyGet(Async)");
        }

        return historyGetCall(from, to, date, amount, decimalPlaces, _callback);

    }

    /**
     * Return a historic rate for a currencies
     * 
     * @param from Currency you want to convert. For example, EUR (required)
     * @param to Comma separated list of currencies codes. For example, USD (required)
     * @param date UTC date should be in the form of YYYY-MM-DD, for example, 2018-06-20. Data available from 2018-06-19 only. (required)
     * @param amount This parameter can be used to specify the amount you want to convert. If an amount is not specified then 1 is assumed. (optional)
     * @param decimalPlaces This parameter can be used to specify the number of decimal places included in the output. If an amount is not specified then 4 is assumed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public void historyGet(String from, String to, String date, String amount, String decimalPlaces) throws ApiException {
        historyGetWithHttpInfo(from, to, date, amount, decimalPlaces);
    }

    /**
     * Return a historic rate for a currencies
     * 
     * @param from Currency you want to convert. For example, EUR (required)
     * @param to Comma separated list of currencies codes. For example, USD (required)
     * @param date UTC date should be in the form of YYYY-MM-DD, for example, 2018-06-20. Data available from 2018-06-19 only. (required)
     * @param amount This parameter can be used to specify the amount you want to convert. If an amount is not specified then 1 is assumed. (optional)
     * @param decimalPlaces This parameter can be used to specify the number of decimal places included in the output. If an amount is not specified then 4 is assumed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> historyGetWithHttpInfo(String from, String to, String date, String amount, String decimalPlaces) throws ApiException {
        okhttp3.Call localVarCall = historyGetValidateBeforeCall(from, to, date, amount, decimalPlaces, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return a historic rate for a currencies (asynchronously)
     * 
     * @param from Currency you want to convert. For example, EUR (required)
     * @param to Comma separated list of currencies codes. For example, USD (required)
     * @param date UTC date should be in the form of YYYY-MM-DD, for example, 2018-06-20. Data available from 2018-06-19 only. (required)
     * @param amount This parameter can be used to specify the amount you want to convert. If an amount is not specified then 1 is assumed. (optional)
     * @param decimalPlaces This parameter can be used to specify the number of decimal places included in the output. If an amount is not specified then 4 is assumed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Command completed successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Parameter value syntax error / Parameter value range error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call historyGetAsync(String from, String to, String date, String amount, String decimalPlaces, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = historyGetValidateBeforeCall(from, to, date, amount, decimalPlaces, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
