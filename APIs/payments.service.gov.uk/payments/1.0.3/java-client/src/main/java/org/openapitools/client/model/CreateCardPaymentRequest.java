/*
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.PrefilledCardholderDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Payment Request Payload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:25.328324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateCardPaymentRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_DELAYED_CAPTURE = "delayed_capture";
  @SerializedName(SERIALIZED_NAME_DELAYED_CAPTURE)
  private Boolean delayedCapture;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  /**
   * ISO-639-1 Alpha-2 code of a supported language to use on the payment pages
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    EN("en"),
    
    CY("cy");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, Object> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_MOTO = "moto";
  @SerializedName(SERIALIZED_NAME_MOTO)
  private Boolean moto;

  public static final String SERIALIZED_NAME_PREFILLED_CARDHOLDER_DETAILS = "prefilled_cardholder_details";
  @SerializedName(SERIALIZED_NAME_PREFILLED_CARDHOLDER_DETAILS)
  private PrefilledCardholderDetails prefilledCardholderDetails;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_RETURN_URL = "return_url";
  @SerializedName(SERIALIZED_NAME_RETURN_URL)
  private String returnUrl;

  public CreateCardPaymentRequest() {
  }

  public CreateCardPaymentRequest(
     Integer amount, 
     Boolean delayedCapture, 
     String description, 
     String email, 
     LanguageEnum language, 
     Map<String, Object> metadata, 
     Boolean moto, 
     String reference, 
     String returnUrl
  ) {
    this();
    this.amount = amount;
    this.delayedCapture = delayedCapture;
    this.description = description;
    this.email = email;
    this.language = language;
    this.metadata = metadata;
    this.moto = moto;
    this.reference = reference;
    this.returnUrl = returnUrl;
  }

  /**
   * amount in pence
   * minimum: 0
   * maximum: 10000000
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }



  /**
   * delayed capture flag
   * @return delayedCapture
   */
  @javax.annotation.Nullable
  public Boolean getDelayedCapture() {
    return delayedCapture;
  }



  /**
   * payment description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }



  /**
   * email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }



  /**
   * ISO-639-1 Alpha-2 code of a supported language to use on the payment pages
   * @return language
   */
  @javax.annotation.Nullable
  public LanguageEnum getLanguage() {
    return language;
  }



  /**
   * Additional metadata - up to 10 name/value pairs - on the payment. Each key must be between 1 and 30 characters long. The value, if a string, must be no greater than 50 characters long. Other permissible value types: boolean, number.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, Object> getMetadata() {
    return metadata;
  }



  /**
   * Mail Order / Telephone Order (MOTO) payment flag
   * @return moto
   */
  @javax.annotation.Nullable
  public Boolean getMoto() {
    return moto;
  }



  public CreateCardPaymentRequest prefilledCardholderDetails(PrefilledCardholderDetails prefilledCardholderDetails) {
    this.prefilledCardholderDetails = prefilledCardholderDetails;
    return this;
  }

  /**
   * Get prefilledCardholderDetails
   * @return prefilledCardholderDetails
   */
  @javax.annotation.Nullable
  public PrefilledCardholderDetails getPrefilledCardholderDetails() {
    return prefilledCardholderDetails;
  }

  public void setPrefilledCardholderDetails(PrefilledCardholderDetails prefilledCardholderDetails) {
    this.prefilledCardholderDetails = prefilledCardholderDetails;
  }


  /**
   * payment reference
   * @return reference
   */
  @javax.annotation.Nonnull
  public String getReference() {
    return reference;
  }



  /**
   * service return url
   * @return returnUrl
   */
  @javax.annotation.Nonnull
  public String getReturnUrl() {
    return returnUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCardPaymentRequest createCardPaymentRequest = (CreateCardPaymentRequest) o;
    return Objects.equals(this.amount, createCardPaymentRequest.amount) &&
        Objects.equals(this.delayedCapture, createCardPaymentRequest.delayedCapture) &&
        Objects.equals(this.description, createCardPaymentRequest.description) &&
        Objects.equals(this.email, createCardPaymentRequest.email) &&
        Objects.equals(this.language, createCardPaymentRequest.language) &&
        Objects.equals(this.metadata, createCardPaymentRequest.metadata) &&
        Objects.equals(this.moto, createCardPaymentRequest.moto) &&
        Objects.equals(this.prefilledCardholderDetails, createCardPaymentRequest.prefilledCardholderDetails) &&
        Objects.equals(this.reference, createCardPaymentRequest.reference) &&
        Objects.equals(this.returnUrl, createCardPaymentRequest.returnUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, delayedCapture, description, email, language, metadata, moto, prefilledCardholderDetails, reference, returnUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCardPaymentRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    delayedCapture: ").append(toIndentedString(delayedCapture)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    moto: ").append(toIndentedString(moto)).append("\n");
    sb.append("    prefilledCardholderDetails: ").append(toIndentedString(prefilledCardholderDetails)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("delayed_capture");
    openapiFields.add("description");
    openapiFields.add("email");
    openapiFields.add("language");
    openapiFields.add("metadata");
    openapiFields.add("moto");
    openapiFields.add("prefilled_cardholder_details");
    openapiFields.add("reference");
    openapiFields.add("return_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("reference");
    openapiRequiredFields.add("return_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateCardPaymentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateCardPaymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateCardPaymentRequest is not found in the empty JSON string", CreateCardPaymentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateCardPaymentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateCardPaymentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateCardPaymentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        LanguageEnum.validateJsonElement(jsonObj.get("language"));
      }
      // validate the optional field `prefilled_cardholder_details`
      if (jsonObj.get("prefilled_cardholder_details") != null && !jsonObj.get("prefilled_cardholder_details").isJsonNull()) {
        PrefilledCardholderDetails.validateJsonElement(jsonObj.get("prefilled_cardholder_details"));
      }
      if (!jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if (!jsonObj.get("return_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `return_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("return_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateCardPaymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateCardPaymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateCardPaymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateCardPaymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateCardPaymentRequest>() {
           @Override
           public void write(JsonWriter out, CreateCardPaymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateCardPaymentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateCardPaymentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateCardPaymentRequest
   * @throws IOException if the JSON string is invalid with respect to CreateCardPaymentRequest
   */
  public static CreateCardPaymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateCardPaymentRequest.class);
  }

  /**
   * Convert an instance of CreateCardPaymentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

