/*
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Links to navigate through pages
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:25.328324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchNavigationLinks {
  public static final String SERIALIZED_NAME_FIRST_PAGE = "first_page";
  @SerializedName(SERIALIZED_NAME_FIRST_PAGE)
  private Link firstPage;

  public static final String SERIALIZED_NAME_LAST_PAGE = "last_page";
  @SerializedName(SERIALIZED_NAME_LAST_PAGE)
  private Link lastPage;

  public static final String SERIALIZED_NAME_NEXT_PAGE = "next_page";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE)
  private Link nextPage;

  public static final String SERIALIZED_NAME_PREV_PAGE = "prev_page";
  @SerializedName(SERIALIZED_NAME_PREV_PAGE)
  private Link prevPage;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private Link self;

  public SearchNavigationLinks() {
  }

  public SearchNavigationLinks firstPage(Link firstPage) {
    this.firstPage = firstPage;
    return this;
  }

  /**
   * Get firstPage
   * @return firstPage
   */
  @javax.annotation.Nullable
  public Link getFirstPage() {
    return firstPage;
  }

  public void setFirstPage(Link firstPage) {
    this.firstPage = firstPage;
  }


  public SearchNavigationLinks lastPage(Link lastPage) {
    this.lastPage = lastPage;
    return this;
  }

  /**
   * Get lastPage
   * @return lastPage
   */
  @javax.annotation.Nullable
  public Link getLastPage() {
    return lastPage;
  }

  public void setLastPage(Link lastPage) {
    this.lastPage = lastPage;
  }


  public SearchNavigationLinks nextPage(Link nextPage) {
    this.nextPage = nextPage;
    return this;
  }

  /**
   * Get nextPage
   * @return nextPage
   */
  @javax.annotation.Nullable
  public Link getNextPage() {
    return nextPage;
  }

  public void setNextPage(Link nextPage) {
    this.nextPage = nextPage;
  }


  public SearchNavigationLinks prevPage(Link prevPage) {
    this.prevPage = prevPage;
    return this;
  }

  /**
   * Get prevPage
   * @return prevPage
   */
  @javax.annotation.Nullable
  public Link getPrevPage() {
    return prevPage;
  }

  public void setPrevPage(Link prevPage) {
    this.prevPage = prevPage;
  }


  public SearchNavigationLinks self(Link self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public Link getSelf() {
    return self;
  }

  public void setSelf(Link self) {
    this.self = self;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchNavigationLinks searchNavigationLinks = (SearchNavigationLinks) o;
    return Objects.equals(this.firstPage, searchNavigationLinks.firstPage) &&
        Objects.equals(this.lastPage, searchNavigationLinks.lastPage) &&
        Objects.equals(this.nextPage, searchNavigationLinks.nextPage) &&
        Objects.equals(this.prevPage, searchNavigationLinks.prevPage) &&
        Objects.equals(this.self, searchNavigationLinks.self);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstPage, lastPage, nextPage, prevPage, self);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchNavigationLinks {\n");
    sb.append("    firstPage: ").append(toIndentedString(firstPage)).append("\n");
    sb.append("    lastPage: ").append(toIndentedString(lastPage)).append("\n");
    sb.append("    nextPage: ").append(toIndentedString(nextPage)).append("\n");
    sb.append("    prevPage: ").append(toIndentedString(prevPage)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("first_page");
    openapiFields.add("last_page");
    openapiFields.add("next_page");
    openapiFields.add("prev_page");
    openapiFields.add("self");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchNavigationLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchNavigationLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchNavigationLinks is not found in the empty JSON string", SearchNavigationLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchNavigationLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchNavigationLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `first_page`
      if (jsonObj.get("first_page") != null && !jsonObj.get("first_page").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("first_page"));
      }
      // validate the optional field `last_page`
      if (jsonObj.get("last_page") != null && !jsonObj.get("last_page").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("last_page"));
      }
      // validate the optional field `next_page`
      if (jsonObj.get("next_page") != null && !jsonObj.get("next_page").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("next_page"));
      }
      // validate the optional field `prev_page`
      if (jsonObj.get("prev_page") != null && !jsonObj.get("prev_page").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("prev_page"));
      }
      // validate the optional field `self`
      if (jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("self"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchNavigationLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchNavigationLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchNavigationLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchNavigationLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchNavigationLinks>() {
           @Override
           public void write(JsonWriter out, SearchNavigationLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchNavigationLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchNavigationLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchNavigationLinks
   * @throws IOException if the JSON string is invalid with respect to SearchNavigationLinks
   */
  public static SearchNavigationLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchNavigationLinks.class);
  }

  /**
   * Convert an instance of SearchNavigationLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

