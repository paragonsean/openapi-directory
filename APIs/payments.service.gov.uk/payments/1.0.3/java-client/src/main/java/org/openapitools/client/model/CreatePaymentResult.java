/*
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CardDetails;
import org.openapitools.client.model.PaymentLinks;
import org.openapitools.client.model.PaymentSettlementSummary;
import org.openapitools.client.model.PaymentState;
import org.openapitools.client.model.RefundSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreatePaymentResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:25.328324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreatePaymentResult {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PaymentLinks links;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Long amount;

  public static final String SERIALIZED_NAME_CARD_DETAILS = "card_details";
  @SerializedName(SERIALIZED_NAME_CARD_DETAILS)
  private CardDetails cardDetails;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_DELAYED_CAPTURE = "delayed_capture";
  @SerializedName(SERIALIZED_NAME_DELAYED_CAPTURE)
  private Boolean delayedCapture;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  /**
   * Which language your users will see on the payment pages when they make a payment.
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    EN("en"),
    
    CY("cy");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_MOTO = "moto";
  @SerializedName(SERIALIZED_NAME_MOTO)
  private Boolean moto;

  public static final String SERIALIZED_NAME_PAYMENT_ID = "payment_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private String paymentId;

  public static final String SERIALIZED_NAME_PAYMENT_PROVIDER = "payment_provider";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PROVIDER)
  private String paymentProvider;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "provider_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private String providerId;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_REFUND_SUMMARY = "refund_summary";
  @SerializedName(SERIALIZED_NAME_REFUND_SUMMARY)
  private RefundSummary refundSummary;

  public static final String SERIALIZED_NAME_RETURN_URL = "return_url";
  @SerializedName(SERIALIZED_NAME_RETURN_URL)
  private String returnUrl;

  public static final String SERIALIZED_NAME_SETTLEMENT_SUMMARY = "settlement_summary";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_SUMMARY)
  private PaymentSettlementSummary settlementSummary;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private PaymentState state;

  public CreatePaymentResult() {
  }

  public CreatePaymentResult links(PaymentLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public PaymentLinks getLinks() {
    return links;
  }

  public void setLinks(PaymentLinks links) {
    this.links = links;
  }


  public CreatePaymentResult amount(Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount in pence.
   * @return amount
   */
  @javax.annotation.Nullable
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }


  public CreatePaymentResult cardDetails(CardDetails cardDetails) {
    this.cardDetails = cardDetails;
    return this;
  }

  /**
   * Get cardDetails
   * @return cardDetails
   */
  @javax.annotation.Nullable
  public CardDetails getCardDetails() {
    return cardDetails;
  }

  public void setCardDetails(CardDetails cardDetails) {
    this.cardDetails = cardDetails;
  }


  public CreatePaymentResult createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The date you created the payment.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public CreatePaymentResult delayedCapture(Boolean delayedCapture) {
    this.delayedCapture = delayedCapture;
    return this;
  }

  /**
   * Whether to [delay capturing](https://docs.payments.service.gov.uk/optional_features/delayed_capture/) this payment.
   * @return delayedCapture
   */
  @javax.annotation.Nullable
  public Boolean getDelayedCapture() {
    return delayedCapture;
  }

  public void setDelayedCapture(Boolean delayedCapture) {
    this.delayedCapture = delayedCapture;
  }


  public CreatePaymentResult description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The human-readable description you gave the payment.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreatePaymentResult email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of your user.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public CreatePaymentResult language(LanguageEnum language) {
    this.language = language;
    return this;
  }

  /**
   * Which language your users will see on the payment pages when they make a payment.
   * @return language
   */
  @javax.annotation.Nullable
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public CreatePaymentResult metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public CreatePaymentResult putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * [Custom metadata](https://docs.payments.service.gov.uk/optional_features/custom_metadata/) you added to the payment.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public CreatePaymentResult moto(Boolean moto) {
    this.moto = moto;
    return this;
  }

  /**
   * Mail Order / Telephone Order (MOTO) payment flag.
   * @return moto
   */
  @javax.annotation.Nullable
  public Boolean getMoto() {
    return moto;
  }

  public void setMoto(Boolean moto) {
    this.moto = moto;
  }


  public CreatePaymentResult paymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * The unique identifier of the payment.
   * @return paymentId
   */
  @javax.annotation.Nullable
  public String getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }


  public CreatePaymentResult paymentProvider(String paymentProvider) {
    this.paymentProvider = paymentProvider;
    return this;
  }

  /**
   * Get paymentProvider
   * @return paymentProvider
   */
  @javax.annotation.Nullable
  public String getPaymentProvider() {
    return paymentProvider;
  }

  public void setPaymentProvider(String paymentProvider) {
    this.paymentProvider = paymentProvider;
  }


  public CreatePaymentResult providerId(String providerId) {
    this.providerId = providerId;
    return this;
  }

  /**
   * The reference number the payment gateway associated with the payment.
   * @return providerId
   */
  @javax.annotation.Nullable
  public String getProviderId() {
    return providerId;
  }

  public void setProviderId(String providerId) {
    this.providerId = providerId;
  }


  public CreatePaymentResult reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * The reference number you associated with this payment.
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public CreatePaymentResult refundSummary(RefundSummary refundSummary) {
    this.refundSummary = refundSummary;
    return this;
  }

  /**
   * Get refundSummary
   * @return refundSummary
   */
  @javax.annotation.Nullable
  public RefundSummary getRefundSummary() {
    return refundSummary;
  }

  public void setRefundSummary(RefundSummary refundSummary) {
    this.refundSummary = refundSummary;
  }


  public CreatePaymentResult returnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
    return this;
  }

  /**
   * An HTTPS URL on your site that your user will be sent back to once they have completed their payment attempt on GOV.UK Pay.
   * @return returnUrl
   */
  @javax.annotation.Nullable
  public String getReturnUrl() {
    return returnUrl;
  }

  public void setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
  }


  public CreatePaymentResult settlementSummary(PaymentSettlementSummary settlementSummary) {
    this.settlementSummary = settlementSummary;
    return this;
  }

  /**
   * Get settlementSummary
   * @return settlementSummary
   */
  @javax.annotation.Nullable
  public PaymentSettlementSummary getSettlementSummary() {
    return settlementSummary;
  }

  public void setSettlementSummary(PaymentSettlementSummary settlementSummary) {
    this.settlementSummary = settlementSummary;
  }


  public CreatePaymentResult state(PaymentState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public PaymentState getState() {
    return state;
  }

  public void setState(PaymentState state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentResult createPaymentResult = (CreatePaymentResult) o;
    return Objects.equals(this.links, createPaymentResult.links) &&
        Objects.equals(this.amount, createPaymentResult.amount) &&
        Objects.equals(this.cardDetails, createPaymentResult.cardDetails) &&
        Objects.equals(this.createdDate, createPaymentResult.createdDate) &&
        Objects.equals(this.delayedCapture, createPaymentResult.delayedCapture) &&
        Objects.equals(this.description, createPaymentResult.description) &&
        Objects.equals(this.email, createPaymentResult.email) &&
        Objects.equals(this.language, createPaymentResult.language) &&
        Objects.equals(this.metadata, createPaymentResult.metadata) &&
        Objects.equals(this.moto, createPaymentResult.moto) &&
        Objects.equals(this.paymentId, createPaymentResult.paymentId) &&
        Objects.equals(this.paymentProvider, createPaymentResult.paymentProvider) &&
        Objects.equals(this.providerId, createPaymentResult.providerId) &&
        Objects.equals(this.reference, createPaymentResult.reference) &&
        Objects.equals(this.refundSummary, createPaymentResult.refundSummary) &&
        Objects.equals(this.returnUrl, createPaymentResult.returnUrl) &&
        Objects.equals(this.settlementSummary, createPaymentResult.settlementSummary) &&
        Objects.equals(this.state, createPaymentResult.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, amount, cardDetails, createdDate, delayedCapture, description, email, language, metadata, moto, paymentId, paymentProvider, providerId, reference, refundSummary, returnUrl, settlementSummary, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentResult {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    cardDetails: ").append(toIndentedString(cardDetails)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    delayedCapture: ").append(toIndentedString(delayedCapture)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    moto: ").append(toIndentedString(moto)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    paymentProvider: ").append(toIndentedString(paymentProvider)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    refundSummary: ").append(toIndentedString(refundSummary)).append("\n");
    sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
    sb.append("    settlementSummary: ").append(toIndentedString(settlementSummary)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("amount");
    openapiFields.add("card_details");
    openapiFields.add("created_date");
    openapiFields.add("delayed_capture");
    openapiFields.add("description");
    openapiFields.add("email");
    openapiFields.add("language");
    openapiFields.add("metadata");
    openapiFields.add("moto");
    openapiFields.add("payment_id");
    openapiFields.add("payment_provider");
    openapiFields.add("provider_id");
    openapiFields.add("reference");
    openapiFields.add("refund_summary");
    openapiFields.add("return_url");
    openapiFields.add("settlement_summary");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePaymentResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePaymentResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePaymentResult is not found in the empty JSON string", CreatePaymentResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePaymentResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePaymentResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        PaymentLinks.validateJsonElement(jsonObj.get("_links"));
      }
      // validate the optional field `card_details`
      if (jsonObj.get("card_details") != null && !jsonObj.get("card_details").isJsonNull()) {
        CardDetails.validateJsonElement(jsonObj.get("card_details"));
      }
      if ((jsonObj.get("created_date") != null && !jsonObj.get("created_date").isJsonNull()) && !jsonObj.get("created_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_date").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        LanguageEnum.validateJsonElement(jsonObj.get("language"));
      }
      if ((jsonObj.get("payment_id") != null && !jsonObj.get("payment_id").isJsonNull()) && !jsonObj.get("payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_id").toString()));
      }
      if ((jsonObj.get("payment_provider") != null && !jsonObj.get("payment_provider").isJsonNull()) && !jsonObj.get("payment_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_provider").toString()));
      }
      if ((jsonObj.get("provider_id") != null && !jsonObj.get("provider_id").isJsonNull()) && !jsonObj.get("provider_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_id").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      // validate the optional field `refund_summary`
      if (jsonObj.get("refund_summary") != null && !jsonObj.get("refund_summary").isJsonNull()) {
        RefundSummary.validateJsonElement(jsonObj.get("refund_summary"));
      }
      if ((jsonObj.get("return_url") != null && !jsonObj.get("return_url").isJsonNull()) && !jsonObj.get("return_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `return_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("return_url").toString()));
      }
      // validate the optional field `settlement_summary`
      if (jsonObj.get("settlement_summary") != null && !jsonObj.get("settlement_summary").isJsonNull()) {
        PaymentSettlementSummary.validateJsonElement(jsonObj.get("settlement_summary"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        PaymentState.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePaymentResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePaymentResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePaymentResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePaymentResult.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePaymentResult>() {
           @Override
           public void write(JsonWriter out, CreatePaymentResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePaymentResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePaymentResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePaymentResult
   * @throws IOException if the JSON string is invalid with respect to CreatePaymentResult
   */
  public static CreatePaymentResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePaymentResult.class);
  }

  /**
   * Convert an instance of CreatePaymentResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

