/*
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PaymentError;
import org.openapitools.client.model.PaymentRefundRequest;
import org.openapitools.client.model.Refund;
import org.openapitools.client.model.RefundError;
import org.openapitools.client.model.RefundForSearchResult;
import org.openapitools.client.model.RefundSearchResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RefundingCardPaymentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RefundingCardPaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RefundingCardPaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAPaymentRefund
     * @param paymentId  (required)
     * @param refundId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAPaymentRefundCall(String paymentId, String refundId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payments/{paymentId}/refunds/{refundId}"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()))
            .replace("{" + "refundId" + "}", localVarApiClient.escapeString(refundId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAPaymentRefundValidateBeforeCall(String paymentId, String refundId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getAPaymentRefund(Async)");
        }

        // verify the required parameter 'refundId' is set
        if (refundId == null) {
            throw new ApiException("Missing the required parameter 'refundId' when calling getAPaymentRefund(Async)");
        }

        return getAPaymentRefundCall(paymentId, refundId, _callback);

    }

    /**
     * Find payment refund by ID
     * Return payment refund information by Refund ID The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId  (required)
     * @param refundId  (required)
     * @return Refund
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public Refund getAPaymentRefund(String paymentId, String refundId) throws ApiException {
        ApiResponse<Refund> localVarResp = getAPaymentRefundWithHttpInfo(paymentId, refundId);
        return localVarResp.getData();
    }

    /**
     * Find payment refund by ID
     * Return payment refund information by Refund ID The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId  (required)
     * @param refundId  (required)
     * @return ApiResponse&lt;Refund&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Refund> getAPaymentRefundWithHttpInfo(String paymentId, String refundId) throws ApiException {
        okhttp3.Call localVarCall = getAPaymentRefundValidateBeforeCall(paymentId, refundId, null);
        Type localVarReturnType = new TypeToken<Refund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find payment refund by ID (asynchronously)
     * Return payment refund information by Refund ID The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId  (required)
     * @param refundId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAPaymentRefundAsync(String paymentId, String refundId, final ApiCallback<Refund> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAPaymentRefundValidateBeforeCall(paymentId, refundId, _callback);
        Type localVarReturnType = new TypeToken<Refund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllRefundsForAPayment
     * @param paymentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllRefundsForAPaymentCall(String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payments/{paymentId}/refunds"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllRefundsForAPaymentValidateBeforeCall(String paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getAllRefundsForAPayment(Async)");
        }

        return getAllRefundsForAPaymentCall(paymentId, _callback);

    }

    /**
     * Get all refunds for a payment
     * Return refunds for a payment. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId  (required)
     * @return RefundForSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public RefundForSearchResult getAllRefundsForAPayment(String paymentId) throws ApiException {
        ApiResponse<RefundForSearchResult> localVarResp = getAllRefundsForAPaymentWithHttpInfo(paymentId);
        return localVarResp.getData();
    }

    /**
     * Get all refunds for a payment
     * Return refunds for a payment. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId  (required)
     * @return ApiResponse&lt;RefundForSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefundForSearchResult> getAllRefundsForAPaymentWithHttpInfo(String paymentId) throws ApiException {
        okhttp3.Call localVarCall = getAllRefundsForAPaymentValidateBeforeCall(paymentId, null);
        Type localVarReturnType = new TypeToken<RefundForSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all refunds for a payment (asynchronously)
     * Return refunds for a payment. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllRefundsForAPaymentAsync(String paymentId, final ApiCallback<RefundForSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllRefundsForAPaymentValidateBeforeCall(paymentId, _callback);
        Type localVarReturnType = new TypeToken<RefundForSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRefunds
     * @param fromDate From date of refunds to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)
     * @param toDate To date of refunds to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)
     * @param fromSettledDate From settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)
     * @param toSettledDate To settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)
     * @param page Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)
     * @param displaySize Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid parameters. See Public API documentation for the correct data formats </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRefundsCall(String fromDate, String toDate, String fromSettledDate, String toSettledDate, String page, String displaySize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/refunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_date", toDate));
        }

        if (fromSettledDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_settled_date", fromSettledDate));
        }

        if (toSettledDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_settled_date", toSettledDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (displaySize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display_size", displaySize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRefundsValidateBeforeCall(String fromDate, String toDate, String fromSettledDate, String toSettledDate, String page, String displaySize, final ApiCallback _callback) throws ApiException {
        return searchRefundsCall(fromDate, toDate, fromSettledDate, toSettledDate, page, displaySize, _callback);

    }

    /**
     * Search refunds
     * Search refunds by &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param fromDate From date of refunds to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)
     * @param toDate To date of refunds to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)
     * @param fromSettledDate From settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)
     * @param toSettledDate To settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)
     * @param page Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)
     * @param displaySize Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)
     * @return RefundSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid parameters. See Public API documentation for the correct data formats </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public RefundSearchResults searchRefunds(String fromDate, String toDate, String fromSettledDate, String toSettledDate, String page, String displaySize) throws ApiException {
        ApiResponse<RefundSearchResults> localVarResp = searchRefundsWithHttpInfo(fromDate, toDate, fromSettledDate, toSettledDate, page, displaySize);
        return localVarResp.getData();
    }

    /**
     * Search refunds
     * Search refunds by &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param fromDate From date of refunds to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)
     * @param toDate To date of refunds to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)
     * @param fromSettledDate From settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)
     * @param toSettledDate To settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)
     * @param page Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)
     * @param displaySize Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)
     * @return ApiResponse&lt;RefundSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid parameters. See Public API documentation for the correct data formats </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefundSearchResults> searchRefundsWithHttpInfo(String fromDate, String toDate, String fromSettledDate, String toSettledDate, String page, String displaySize) throws ApiException {
        okhttp3.Call localVarCall = searchRefundsValidateBeforeCall(fromDate, toDate, fromSettledDate, toSettledDate, page, displaySize, null);
        Type localVarReturnType = new TypeToken<RefundSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search refunds (asynchronously)
     * Search refunds by &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param fromDate From date of refunds to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)
     * @param toDate To date of refunds to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)
     * @param fromSettledDate From settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)
     * @param toSettledDate To settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)
     * @param page Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)
     * @param displaySize Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid parameters. See Public API documentation for the correct data formats </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRefundsAsync(String fromDate, String toDate, String fromSettledDate, String toSettledDate, String page, String displaySize, final ApiCallback<RefundSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRefundsValidateBeforeCall(fromDate, toDate, fromSettledDate, toSettledDate, page, displaySize, _callback);
        Type localVarReturnType = new TypeToken<RefundSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitARefundForAPayment
     * @param paymentId paymentId (required)
     * @param body requestPayload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Refund amount available mismatch </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitARefundForAPaymentCall(String paymentId, PaymentRefundRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/payments/{paymentId}/refunds"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitARefundForAPaymentValidateBeforeCall(String paymentId, PaymentRefundRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling submitARefundForAPayment(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling submitARefundForAPayment(Async)");
        }

        return submitARefundForAPaymentCall(paymentId, body, _callback);

    }

    /**
     * Submit a refund for a payment
     * Return issued refund information. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId paymentId (required)
     * @param body requestPayload (required)
     * @return Refund
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Refund amount available mismatch </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public Refund submitARefundForAPayment(String paymentId, PaymentRefundRequest body) throws ApiException {
        ApiResponse<Refund> localVarResp = submitARefundForAPaymentWithHttpInfo(paymentId, body);
        return localVarResp.getData();
    }

    /**
     * Submit a refund for a payment
     * Return issued refund information. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId paymentId (required)
     * @param body requestPayload (required)
     * @return ApiResponse&lt;Refund&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Refund amount available mismatch </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Refund> submitARefundForAPaymentWithHttpInfo(String paymentId, PaymentRefundRequest body) throws ApiException {
        okhttp3.Call localVarCall = submitARefundForAPaymentValidateBeforeCall(paymentId, body, null);
        Type localVarReturnType = new TypeToken<Refund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a refund for a payment (asynchronously)
     * Return issued refund information. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId paymentId (required)
     * @param body requestPayload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Refund amount available mismatch </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitARefundForAPaymentAsync(String paymentId, PaymentRefundRequest body, final ApiCallback<Refund> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitARefundForAPaymentValidateBeforeCall(paymentId, body, _callback);
        Type localVarReturnType = new TypeToken<Refund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
