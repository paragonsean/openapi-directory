/*
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A structure representing information about a settlement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:25.328324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentSettlementSummary {
  public static final String SERIALIZED_NAME_CAPTURE_SUBMIT_TIME = "capture_submit_time";
  @SerializedName(SERIALIZED_NAME_CAPTURE_SUBMIT_TIME)
  private String captureSubmitTime;

  public static final String SERIALIZED_NAME_CAPTURED_DATE = "captured_date";
  @SerializedName(SERIALIZED_NAME_CAPTURED_DATE)
  private String capturedDate;

  public static final String SERIALIZED_NAME_SETTLED_DATE = "settled_date";
  @SerializedName(SERIALIZED_NAME_SETTLED_DATE)
  private String settledDate;

  public PaymentSettlementSummary() {
  }

  public PaymentSettlementSummary(
     String captureSubmitTime, 
     String capturedDate, 
     String settledDate
  ) {
    this();
    this.captureSubmitTime = captureSubmitTime;
    this.capturedDate = capturedDate;
    this.settledDate = settledDate;
  }

  /**
   * Date and time capture request has been submitted. May be null if capture request was not immediately acknowledged by payment gateway.
   * @return captureSubmitTime
   */
  @javax.annotation.Nullable
  public String getCaptureSubmitTime() {
    return captureSubmitTime;
  }



  /**
   * Date of the capture event.
   * @return capturedDate
   */
  @javax.annotation.Nullable
  public String getCapturedDate() {
    return capturedDate;
  }



  /**
   * The date that the transaction was paid into the service&#39;s account.
   * @return settledDate
   */
  @javax.annotation.Nullable
  public String getSettledDate() {
    return settledDate;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentSettlementSummary paymentSettlementSummary = (PaymentSettlementSummary) o;
    return Objects.equals(this.captureSubmitTime, paymentSettlementSummary.captureSubmitTime) &&
        Objects.equals(this.capturedDate, paymentSettlementSummary.capturedDate) &&
        Objects.equals(this.settledDate, paymentSettlementSummary.settledDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(captureSubmitTime, capturedDate, settledDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentSettlementSummary {\n");
    sb.append("    captureSubmitTime: ").append(toIndentedString(captureSubmitTime)).append("\n");
    sb.append("    capturedDate: ").append(toIndentedString(capturedDate)).append("\n");
    sb.append("    settledDate: ").append(toIndentedString(settledDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capture_submit_time");
    openapiFields.add("captured_date");
    openapiFields.add("settled_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentSettlementSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentSettlementSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentSettlementSummary is not found in the empty JSON string", PaymentSettlementSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentSettlementSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentSettlementSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("capture_submit_time") != null && !jsonObj.get("capture_submit_time").isJsonNull()) && !jsonObj.get("capture_submit_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capture_submit_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capture_submit_time").toString()));
      }
      if ((jsonObj.get("captured_date") != null && !jsonObj.get("captured_date").isJsonNull()) && !jsonObj.get("captured_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captured_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captured_date").toString()));
      }
      if ((jsonObj.get("settled_date") != null && !jsonObj.get("settled_date").isJsonNull()) && !jsonObj.get("settled_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settled_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settled_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentSettlementSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentSettlementSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentSettlementSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentSettlementSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentSettlementSummary>() {
           @Override
           public void write(JsonWriter out, PaymentSettlementSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentSettlementSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentSettlementSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentSettlementSummary
   * @throws IOException if the JSON string is invalid with respect to PaymentSettlementSummary
   */
  public static PaymentSettlementSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentSettlementSummary.class);
  }

  /**
   * Convert an instance of PaymentSettlementSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

