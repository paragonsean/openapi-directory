/*
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateCardPaymentRequest;
import org.openapitools.client.model.CreatePaymentResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetPaymentResult;
import org.openapitools.client.model.PaymentError;
import org.openapitools.client.model.PaymentEvents;
import org.openapitools.client.model.PaymentSearchResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardPaymentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardPaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CardPaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelAPayment
     * @param paymentId Payment identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cancellation of payment failed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAPaymentCall(String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payments/{paymentId}/cancel"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelAPaymentValidateBeforeCall(String paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling cancelAPayment(Async)");
        }

        return cancelAPaymentCall(paymentId, _callback);

    }

    /**
     * Cancel payment
     * Cancel a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be cancelled if it&#39;s in a state that isn&#39;t finished.
     * @param paymentId Payment identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cancellation of payment failed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public void cancelAPayment(String paymentId) throws ApiException {
        cancelAPaymentWithHttpInfo(paymentId);
    }

    /**
     * Cancel payment
     * Cancel a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be cancelled if it&#39;s in a state that isn&#39;t finished.
     * @param paymentId Payment identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cancellation of payment failed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelAPaymentWithHttpInfo(String paymentId) throws ApiException {
        okhttp3.Call localVarCall = cancelAPaymentValidateBeforeCall(paymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel payment (asynchronously)
     * Cancel a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be cancelled if it&#39;s in a state that isn&#39;t finished.
     * @param paymentId Payment identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cancellation of payment failed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAPaymentAsync(String paymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelAPaymentValidateBeforeCall(paymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for captureAPayment
     * @param paymentId Payment identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Capture of payment failed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call captureAPaymentCall(String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payments/{paymentId}/capture"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call captureAPaymentValidateBeforeCall(String paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling captureAPayment(Async)");
        }

        return captureAPaymentCall(paymentId, _callback);

    }

    /**
     * Capture payment
     * Capture a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be captured if it&#39;s in &#39;submitted&#39; state
     * @param paymentId Payment identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Capture of payment failed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public void captureAPayment(String paymentId) throws ApiException {
        captureAPaymentWithHttpInfo(paymentId);
    }

    /**
     * Capture payment
     * Capture a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be captured if it&#39;s in &#39;submitted&#39; state
     * @param paymentId Payment identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Capture of payment failed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> captureAPaymentWithHttpInfo(String paymentId) throws ApiException {
        okhttp3.Call localVarCall = captureAPaymentValidateBeforeCall(paymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Capture payment (asynchronously)
     * Capture a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be captured if it&#39;s in &#39;submitted&#39; state
     * @param paymentId Payment identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Capture of payment failed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call captureAPaymentAsync(String paymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = captureAPaymentValidateBeforeCall(paymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAPayment
     * @param body requestPayload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid attribute value: description. Must be less than or equal to 255 characters length </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAPaymentCall(CreateCardPaymentRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAPaymentValidateBeforeCall(CreateCardPaymentRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAPayment(Async)");
        }

        return createAPaymentCall(body, _callback);

    }

    /**
     * Create new payment
     * Create a new payment for the account associated to the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param body requestPayload (required)
     * @return CreatePaymentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid attribute value: description. Must be less than or equal to 255 characters length </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public CreatePaymentResult createAPayment(CreateCardPaymentRequest body) throws ApiException {
        ApiResponse<CreatePaymentResult> localVarResp = createAPaymentWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create new payment
     * Create a new payment for the account associated to the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param body requestPayload (required)
     * @return ApiResponse&lt;CreatePaymentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid attribute value: description. Must be less than or equal to 255 characters length </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePaymentResult> createAPaymentWithHttpInfo(CreateCardPaymentRequest body) throws ApiException {
        okhttp3.Call localVarCall = createAPaymentValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreatePaymentResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new payment (asynchronously)
     * Create a new payment for the account associated to the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param body requestPayload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid attribute value: description. Must be less than or equal to 255 characters length </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAPaymentAsync(CreateCardPaymentRequest body, final ApiCallback<CreatePaymentResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAPaymentValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreatePaymentResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAPayment
     * @param paymentId Payment identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAPaymentCall(String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payments/{paymentId}"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAPaymentValidateBeforeCall(String paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getAPayment(Async)");
        }

        return getAPaymentCall(paymentId, _callback);

    }

    /**
     * Find payment by ID
     * Return information about the payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId Payment identifier (required)
     * @return GetPaymentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymentResult getAPayment(String paymentId) throws ApiException {
        ApiResponse<GetPaymentResult> localVarResp = getAPaymentWithHttpInfo(paymentId);
        return localVarResp.getData();
    }

    /**
     * Find payment by ID
     * Return information about the payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId Payment identifier (required)
     * @return ApiResponse&lt;GetPaymentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPaymentResult> getAPaymentWithHttpInfo(String paymentId) throws ApiException {
        okhttp3.Call localVarCall = getAPaymentValidateBeforeCall(paymentId, null);
        Type localVarReturnType = new TypeToken<GetPaymentResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find payment by ID (asynchronously)
     * Return information about the payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId Payment identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAPaymentAsync(String paymentId, final ApiCallback<GetPaymentResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAPaymentValidateBeforeCall(paymentId, _callback);
        Type localVarReturnType = new TypeToken<GetPaymentResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventsForAPayment
     * @param paymentId Payment identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsForAPaymentCall(String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payments/{paymentId}/events"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsForAPaymentValidateBeforeCall(String paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getEventsForAPayment(Async)");
        }

        return getEventsForAPaymentCall(paymentId, _callback);

    }

    /**
     * Return payment events by ID
     * Return payment events information about a certain payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId Payment identifier (required)
     * @return PaymentEvents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public PaymentEvents getEventsForAPayment(String paymentId) throws ApiException {
        ApiResponse<PaymentEvents> localVarResp = getEventsForAPaymentWithHttpInfo(paymentId);
        return localVarResp.getData();
    }

    /**
     * Return payment events by ID
     * Return payment events information about a certain payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId Payment identifier (required)
     * @return ApiResponse&lt;PaymentEvents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentEvents> getEventsForAPaymentWithHttpInfo(String paymentId) throws ApiException {
        okhttp3.Call localVarCall = getEventsForAPaymentValidateBeforeCall(paymentId, null);
        Type localVarReturnType = new TypeToken<PaymentEvents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return payment events by ID (asynchronously)
     * Return payment events information about a certain payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param paymentId Payment identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsForAPaymentAsync(String paymentId, final ApiCallback<PaymentEvents> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsForAPaymentValidateBeforeCall(paymentId, _callback);
        Type localVarReturnType = new TypeToken<PaymentEvents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchPayments
     * @param reference Your payment reference to search (exact match, case insensitive) (optional)
     * @param email The user email used in the payment to be searched (optional)
     * @param state State of payments to be searched. Example&#x3D;success (optional)
     * @param cardBrand Card brand used for payment. Example&#x3D;master-card (optional)
     * @param fromDate From date of payments to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)
     * @param toDate To date of payments to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)
     * @param page Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)
     * @param displaySize Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)
     * @param cardholderName Name on card used to make payment (optional)
     * @param firstDigitsCardNumber First six digits of the card used to make payment (optional)
     * @param lastDigitsCardNumber Last four digits of the card used to make payment (optional)
     * @param fromSettledDate From settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)
     * @param toSettledDate To settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-14 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid parameters: from_date, to_date, status, display_size. See Public API documentation for the correct data formats </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPaymentsCall(String reference, String email, String state, String cardBrand, String fromDate, String toDate, String page, String displaySize, String cardholderName, String firstDigitsCardNumber, String lastDigitsCardNumber, String fromSettledDate, String toSettledDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference", reference));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (cardBrand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_brand", cardBrand));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_date", toDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (displaySize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display_size", displaySize));
        }

        if (cardholderName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardholder_name", cardholderName));
        }

        if (firstDigitsCardNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_digits_card_number", firstDigitsCardNumber));
        }

        if (lastDigitsCardNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_digits_card_number", lastDigitsCardNumber));
        }

        if (fromSettledDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_settled_date", fromSettledDate));
        }

        if (toSettledDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_settled_date", toSettledDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPaymentsValidateBeforeCall(String reference, String email, String state, String cardBrand, String fromDate, String toDate, String page, String displaySize, String cardholderName, String firstDigitsCardNumber, String lastDigitsCardNumber, String fromSettledDate, String toSettledDate, final ApiCallback _callback) throws ApiException {
        return searchPaymentsCall(reference, email, state, cardBrand, fromDate, toDate, page, displaySize, cardholderName, firstDigitsCardNumber, lastDigitsCardNumber, fromSettledDate, toSettledDate, _callback);

    }

    /**
     * Search payments
     * Search payments by reference, state, &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param reference Your payment reference to search (exact match, case insensitive) (optional)
     * @param email The user email used in the payment to be searched (optional)
     * @param state State of payments to be searched. Example&#x3D;success (optional)
     * @param cardBrand Card brand used for payment. Example&#x3D;master-card (optional)
     * @param fromDate From date of payments to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)
     * @param toDate To date of payments to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)
     * @param page Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)
     * @param displaySize Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)
     * @param cardholderName Name on card used to make payment (optional)
     * @param firstDigitsCardNumber First six digits of the card used to make payment (optional)
     * @param lastDigitsCardNumber Last four digits of the card used to make payment (optional)
     * @param fromSettledDate From settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)
     * @param toSettledDate To settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-14 (optional)
     * @return PaymentSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid parameters: from_date, to_date, status, display_size. See Public API documentation for the correct data formats </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public PaymentSearchResults searchPayments(String reference, String email, String state, String cardBrand, String fromDate, String toDate, String page, String displaySize, String cardholderName, String firstDigitsCardNumber, String lastDigitsCardNumber, String fromSettledDate, String toSettledDate) throws ApiException {
        ApiResponse<PaymentSearchResults> localVarResp = searchPaymentsWithHttpInfo(reference, email, state, cardBrand, fromDate, toDate, page, displaySize, cardholderName, firstDigitsCardNumber, lastDigitsCardNumber, fromSettledDate, toSettledDate);
        return localVarResp.getData();
    }

    /**
     * Search payments
     * Search payments by reference, state, &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param reference Your payment reference to search (exact match, case insensitive) (optional)
     * @param email The user email used in the payment to be searched (optional)
     * @param state State of payments to be searched. Example&#x3D;success (optional)
     * @param cardBrand Card brand used for payment. Example&#x3D;master-card (optional)
     * @param fromDate From date of payments to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)
     * @param toDate To date of payments to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)
     * @param page Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)
     * @param displaySize Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)
     * @param cardholderName Name on card used to make payment (optional)
     * @param firstDigitsCardNumber First six digits of the card used to make payment (optional)
     * @param lastDigitsCardNumber Last four digits of the card used to make payment (optional)
     * @param fromSettledDate From settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)
     * @param toSettledDate To settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-14 (optional)
     * @return ApiResponse&lt;PaymentSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid parameters: from_date, to_date, status, display_size. See Public API documentation for the correct data formats </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentSearchResults> searchPaymentsWithHttpInfo(String reference, String email, String state, String cardBrand, String fromDate, String toDate, String page, String displaySize, String cardholderName, String firstDigitsCardNumber, String lastDigitsCardNumber, String fromSettledDate, String toSettledDate) throws ApiException {
        okhttp3.Call localVarCall = searchPaymentsValidateBeforeCall(reference, email, state, cardBrand, fromDate, toDate, page, displaySize, cardholderName, firstDigitsCardNumber, lastDigitsCardNumber, fromSettledDate, toSettledDate, null);
        Type localVarReturnType = new TypeToken<PaymentSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search payments (asynchronously)
     * Search payments by reference, state, &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
     * @param reference Your payment reference to search (exact match, case insensitive) (optional)
     * @param email The user email used in the payment to be searched (optional)
     * @param state State of payments to be searched. Example&#x3D;success (optional)
     * @param cardBrand Card brand used for payment. Example&#x3D;master-card (optional)
     * @param fromDate From date of payments to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)
     * @param toDate To date of payments to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)
     * @param page Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)
     * @param displaySize Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)
     * @param cardholderName Name on card used to make payment (optional)
     * @param firstDigitsCardNumber First six digits of the card used to make payment (optional)
     * @param lastDigitsCardNumber Last four digits of the card used to make payment (optional)
     * @param fromSettledDate From settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)
     * @param toSettledDate To settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-14 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are required to access this resource </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid parameters: from_date, to_date, status, display_size. See Public API documentation for the correct data formats </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Downstream system error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPaymentsAsync(String reference, String email, String state, String cardBrand, String fromDate, String toDate, String page, String displaySize, String cardholderName, String firstDigitsCardNumber, String lastDigitsCardNumber, String fromSettledDate, String toSettledDate, final ApiCallback<PaymentSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPaymentsValidateBeforeCall(reference, email, state, cardBrand, fromDate, toDate, page, displaySize, cardholderName, firstDigitsCardNumber, lastDigitsCardNumber, fromSettledDate, toSettledDate, _callback);
        Type localVarReturnType = new TypeToken<PaymentSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
