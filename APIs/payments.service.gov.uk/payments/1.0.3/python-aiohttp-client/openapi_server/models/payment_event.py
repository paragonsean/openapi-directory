# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_event_link import PaymentEventLink
from openapi_server.models.payment_state import PaymentState
from openapi_server import util


class PaymentEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PaymentEventLink=None, payment_id: str=None, state: PaymentState=None, updated: str=None):
        """PaymentEvent - a model defined in OpenAPI

        :param links: The links of this PaymentEvent.
        :param payment_id: The payment_id of this PaymentEvent.
        :param state: The state of this PaymentEvent.
        :param updated: The updated of this PaymentEvent.
        """
        self.openapi_types = {
            'links': PaymentEventLink,
            'payment_id': str,
            'state': PaymentState,
            'updated': str
        }

        self.attribute_map = {
            'links': '_links',
            'payment_id': 'payment_id',
            'state': 'state',
            'updated': 'updated'
        }

        self._links = links
        self._payment_id = payment_id
        self._state = state
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentEvent of this PaymentEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this PaymentEvent.


        :return: The links of this PaymentEvent.
        :rtype: PaymentEventLink
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PaymentEvent.


        :param links: The links of this PaymentEvent.
        :type links: PaymentEventLink
        """

        self._links = links

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentEvent.


        :return: The payment_id of this PaymentEvent.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentEvent.


        :param payment_id: The payment_id of this PaymentEvent.
        :type payment_id: str
        """

        self._payment_id = payment_id

    @property
    def state(self):
        """Gets the state of this PaymentEvent.


        :return: The state of this PaymentEvent.
        :rtype: PaymentState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PaymentEvent.


        :param state: The state of this PaymentEvent.
        :type state: PaymentState
        """

        self._state = state

    @property
    def updated(self):
        """Gets the updated of this PaymentEvent.

        updated

        :return: The updated of this PaymentEvent.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this PaymentEvent.

        updated

        :param updated: The updated of this PaymentEvent.
        :type updated: str
        """

        self._updated = updated
