# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class PrefilledCardholderDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: Address=None, cardholder_name: str=None):
        """PrefilledCardholderDetails - a model defined in OpenAPI

        :param billing_address: The billing_address of this PrefilledCardholderDetails.
        :param cardholder_name: The cardholder_name of this PrefilledCardholderDetails.
        """
        self.openapi_types = {
            'billing_address': Address,
            'cardholder_name': str
        }

        self.attribute_map = {
            'billing_address': 'billing_address',
            'cardholder_name': 'cardholder_name'
        }

        self._billing_address = billing_address
        self._cardholder_name = cardholder_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrefilledCardholderDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrefilledCardholderDetails of this PrefilledCardholderDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this PrefilledCardholderDetails.


        :return: The billing_address of this PrefilledCardholderDetails.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this PrefilledCardholderDetails.


        :param billing_address: The billing_address of this PrefilledCardholderDetails.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this PrefilledCardholderDetails.

        prefilled cardholder name

        :return: The cardholder_name of this PrefilledCardholderDetails.
        :rtype: str
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this PrefilledCardholderDetails.

        prefilled cardholder name

        :param cardholder_name: The cardholder_name of this PrefilledCardholderDetails.
        :type cardholder_name: str
        """
        if cardholder_name is not None and len(cardholder_name) > 255:
            raise ValueError("Invalid value for `cardholder_name`, length must be less than or equal to `255`")
        if cardholder_name is not None and len(cardholder_name) < 0:
            raise ValueError("Invalid value for `cardholder_name`, length must be greater than or equal to `0`")

        self._cardholder_name = cardholder_name
