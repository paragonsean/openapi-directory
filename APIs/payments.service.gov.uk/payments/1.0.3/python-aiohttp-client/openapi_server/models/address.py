# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, line1: str=None, line2: str=None, postcode: str=None):
        """Address - a model defined in OpenAPI

        :param city: The city of this Address.
        :param country: The country of this Address.
        :param line1: The line1 of this Address.
        :param line2: The line2 of this Address.
        :param postcode: The postcode of this Address.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'line1': str,
            'line2': str,
            'postcode': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'line1': 'line1',
            'line2': 'line2',
            'postcode': 'postcode'
        }

        self._city = city
        self._country = country
        self._line1 = line1
        self._line2 = line2
        self._postcode = postcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Address.


        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.


        :param city: The city of this Address.
        :type city: str
        """
        if city is not None and len(city) > 255:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `255`")
        if city is not None and len(city) < 0:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `0`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address.


        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.
        :type country: str
        """

        self._country = country

    @property
    def line1(self):
        """Gets the line1 of this Address.


        :return: The line1 of this Address.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this Address.


        :param line1: The line1 of this Address.
        :type line1: str
        """
        if line1 is not None and len(line1) > 255:
            raise ValueError("Invalid value for `line1`, length must be less than or equal to `255`")
        if line1 is not None and len(line1) < 0:
            raise ValueError("Invalid value for `line1`, length must be greater than or equal to `0`")

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this Address.


        :return: The line2 of this Address.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this Address.


        :param line2: The line2 of this Address.
        :type line2: str
        """
        if line2 is not None and len(line2) > 255:
            raise ValueError("Invalid value for `line2`, length must be less than or equal to `255`")
        if line2 is not None and len(line2) < 0:
            raise ValueError("Invalid value for `line2`, length must be greater than or equal to `0`")

        self._line2 = line2

    @property
    def postcode(self):
        """Gets the postcode of this Address.


        :return: The postcode of this Address.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this Address.


        :param postcode: The postcode of this Address.
        :type postcode: str
        """
        if postcode is not None and len(postcode) > 25:
            raise ValueError("Invalid value for `postcode`, length must be less than or equal to `25`")
        if postcode is not None and len(postcode) < 0:
            raise ValueError("Invalid value for `postcode`, length must be greater than or equal to `0`")

        self._postcode = postcode
