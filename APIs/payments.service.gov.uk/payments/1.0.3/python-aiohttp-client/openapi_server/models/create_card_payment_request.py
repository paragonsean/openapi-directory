# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prefilled_cardholder_details import PrefilledCardholderDetails
from openapi_server import util


class CreateCardPaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, delayed_capture: bool=None, description: str=None, email: str=None, language: str=None, metadata: Dict[str, object]=None, moto: bool=None, prefilled_cardholder_details: PrefilledCardholderDetails=None, reference: str=None, return_url: str=None):
        """CreateCardPaymentRequest - a model defined in OpenAPI

        :param amount: The amount of this CreateCardPaymentRequest.
        :param delayed_capture: The delayed_capture of this CreateCardPaymentRequest.
        :param description: The description of this CreateCardPaymentRequest.
        :param email: The email of this CreateCardPaymentRequest.
        :param language: The language of this CreateCardPaymentRequest.
        :param metadata: The metadata of this CreateCardPaymentRequest.
        :param moto: The moto of this CreateCardPaymentRequest.
        :param prefilled_cardholder_details: The prefilled_cardholder_details of this CreateCardPaymentRequest.
        :param reference: The reference of this CreateCardPaymentRequest.
        :param return_url: The return_url of this CreateCardPaymentRequest.
        """
        self.openapi_types = {
            'amount': int,
            'delayed_capture': bool,
            'description': str,
            'email': str,
            'language': str,
            'metadata': Dict[str, object],
            'moto': bool,
            'prefilled_cardholder_details': PrefilledCardholderDetails,
            'reference': str,
            'return_url': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'delayed_capture': 'delayed_capture',
            'description': 'description',
            'email': 'email',
            'language': 'language',
            'metadata': 'metadata',
            'moto': 'moto',
            'prefilled_cardholder_details': 'prefilled_cardholder_details',
            'reference': 'reference',
            'return_url': 'return_url'
        }

        self._amount = amount
        self._delayed_capture = delayed_capture
        self._description = description
        self._email = email
        self._language = language
        self._metadata = metadata
        self._moto = moto
        self._prefilled_cardholder_details = prefilled_cardholder_details
        self._reference = reference
        self._return_url = return_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCardPaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCardPaymentRequest of this CreateCardPaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CreateCardPaymentRequest.

        amount in pence

        :return: The amount of this CreateCardPaymentRequest.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateCardPaymentRequest.

        amount in pence

        :param amount: The amount of this CreateCardPaymentRequest.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount > 10000000:
            raise ValueError("Invalid value for `amount`, must be a value less than or equal to `10000000`")
        if amount is not None and amount < 0:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")

        self._amount = amount

    @property
    def delayed_capture(self):
        """Gets the delayed_capture of this CreateCardPaymentRequest.

        delayed capture flag

        :return: The delayed_capture of this CreateCardPaymentRequest.
        :rtype: bool
        """
        return self._delayed_capture

    @delayed_capture.setter
    def delayed_capture(self, delayed_capture):
        """Sets the delayed_capture of this CreateCardPaymentRequest.

        delayed capture flag

        :param delayed_capture: The delayed_capture of this CreateCardPaymentRequest.
        :type delayed_capture: bool
        """

        self._delayed_capture = delayed_capture

    @property
    def description(self):
        """Gets the description of this CreateCardPaymentRequest.

        payment description

        :return: The description of this CreateCardPaymentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateCardPaymentRequest.

        payment description

        :param description: The description of this CreateCardPaymentRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def email(self):
        """Gets the email of this CreateCardPaymentRequest.

        email

        :return: The email of this CreateCardPaymentRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateCardPaymentRequest.

        email

        :param email: The email of this CreateCardPaymentRequest.
        :type email: str
        """

        self._email = email

    @property
    def language(self):
        """Gets the language of this CreateCardPaymentRequest.

        ISO-639-1 Alpha-2 code of a supported language to use on the payment pages

        :return: The language of this CreateCardPaymentRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CreateCardPaymentRequest.

        ISO-639-1 Alpha-2 code of a supported language to use on the payment pages

        :param language: The language of this CreateCardPaymentRequest.
        :type language: str
        """
        allowed_values = ["en", "cy"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def metadata(self):
        """Gets the metadata of this CreateCardPaymentRequest.

        Additional metadata - up to 10 name/value pairs - on the payment. Each key must be between 1 and 30 characters long. The value, if a string, must be no greater than 50 characters long. Other permissible value types: boolean, number.

        :return: The metadata of this CreateCardPaymentRequest.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateCardPaymentRequest.

        Additional metadata - up to 10 name/value pairs - on the payment. Each key must be between 1 and 30 characters long. The value, if a string, must be no greater than 50 characters long. Other permissible value types: boolean, number.

        :param metadata: The metadata of this CreateCardPaymentRequest.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def moto(self):
        """Gets the moto of this CreateCardPaymentRequest.

        Mail Order / Telephone Order (MOTO) payment flag

        :return: The moto of this CreateCardPaymentRequest.
        :rtype: bool
        """
        return self._moto

    @moto.setter
    def moto(self, moto):
        """Sets the moto of this CreateCardPaymentRequest.

        Mail Order / Telephone Order (MOTO) payment flag

        :param moto: The moto of this CreateCardPaymentRequest.
        :type moto: bool
        """

        self._moto = moto

    @property
    def prefilled_cardholder_details(self):
        """Gets the prefilled_cardholder_details of this CreateCardPaymentRequest.


        :return: The prefilled_cardholder_details of this CreateCardPaymentRequest.
        :rtype: PrefilledCardholderDetails
        """
        return self._prefilled_cardholder_details

    @prefilled_cardholder_details.setter
    def prefilled_cardholder_details(self, prefilled_cardholder_details):
        """Sets the prefilled_cardholder_details of this CreateCardPaymentRequest.


        :param prefilled_cardholder_details: The prefilled_cardholder_details of this CreateCardPaymentRequest.
        :type prefilled_cardholder_details: PrefilledCardholderDetails
        """

        self._prefilled_cardholder_details = prefilled_cardholder_details

    @property
    def reference(self):
        """Gets the reference of this CreateCardPaymentRequest.

        payment reference

        :return: The reference of this CreateCardPaymentRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CreateCardPaymentRequest.

        payment reference

        :param reference: The reference of this CreateCardPaymentRequest.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")
        if reference is not None and len(reference) > 255:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `255`")
        if reference is not None and len(reference) < 0:
            raise ValueError("Invalid value for `reference`, length must be greater than or equal to `0`")

        self._reference = reference

    @property
    def return_url(self):
        """Gets the return_url of this CreateCardPaymentRequest.

        service return url

        :return: The return_url of this CreateCardPaymentRequest.
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this CreateCardPaymentRequest.

        service return url

        :param return_url: The return_url of this CreateCardPaymentRequest.
        :type return_url: str
        """
        if return_url is None:
            raise ValueError("Invalid value for `return_url`, must not be `None`")
        if return_url is not None and len(return_url) > 2000:
            raise ValueError("Invalid value for `return_url`, length must be less than or equal to `2000`")
        if return_url is not None and len(return_url) < 0:
            raise ValueError("Invalid value for `return_url`, length must be greater than or equal to `0`")

        self._return_url = return_url
