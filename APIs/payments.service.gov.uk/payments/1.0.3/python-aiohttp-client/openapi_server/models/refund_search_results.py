# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.refund_detail_for_search import RefundDetailForSearch
from openapi_server.models.search_navigation_links import SearchNavigationLinks
from openapi_server import util


class RefundSearchResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: SearchNavigationLinks=None, count: int=None, page: int=None, results: List[RefundDetailForSearch]=None, total: int=None):
        """RefundSearchResults - a model defined in OpenAPI

        :param links: The links of this RefundSearchResults.
        :param count: The count of this RefundSearchResults.
        :param page: The page of this RefundSearchResults.
        :param results: The results of this RefundSearchResults.
        :param total: The total of this RefundSearchResults.
        """
        self.openapi_types = {
            'links': SearchNavigationLinks,
            'count': int,
            'page': int,
            'results': List[RefundDetailForSearch],
            'total': int
        }

        self.attribute_map = {
            'links': '_links',
            'count': 'count',
            'page': 'page',
            'results': 'results',
            'total': 'total'
        }

        self._links = links
        self._count = count
        self._page = page
        self._results = results
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RefundSearchResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RefundSearchResults of this RefundSearchResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this RefundSearchResults.


        :return: The links of this RefundSearchResults.
        :rtype: SearchNavigationLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RefundSearchResults.


        :param links: The links of this RefundSearchResults.
        :type links: SearchNavigationLinks
        """

        self._links = links

    @property
    def count(self):
        """Gets the count of this RefundSearchResults.


        :return: The count of this RefundSearchResults.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this RefundSearchResults.


        :param count: The count of this RefundSearchResults.
        :type count: int
        """

        self._count = count

    @property
    def page(self):
        """Gets the page of this RefundSearchResults.


        :return: The page of this RefundSearchResults.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this RefundSearchResults.


        :param page: The page of this RefundSearchResults.
        :type page: int
        """

        self._page = page

    @property
    def results(self):
        """Gets the results of this RefundSearchResults.


        :return: The results of this RefundSearchResults.
        :rtype: List[RefundDetailForSearch]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this RefundSearchResults.


        :param results: The results of this RefundSearchResults.
        :type results: List[RefundDetailForSearch]
        """

        self._results = results

    @property
    def total(self):
        """Gets the total of this RefundSearchResults.


        :return: The total of this RefundSearchResults.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this RefundSearchResults.


        :param total: The total of this RefundSearchResults.
        :type total: int
        """

        self._total = total
