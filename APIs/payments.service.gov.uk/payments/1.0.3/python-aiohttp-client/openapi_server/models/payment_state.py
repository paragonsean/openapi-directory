# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, finished: bool=None, message: str=None, status: str=None):
        """PaymentState - a model defined in OpenAPI

        :param code: The code of this PaymentState.
        :param finished: The finished of this PaymentState.
        :param message: The message of this PaymentState.
        :param status: The status of this PaymentState.
        """
        self.openapi_types = {
            'code': str,
            'finished': bool,
            'message': str,
            'status': str
        }

        self.attribute_map = {
            'code': 'code',
            'finished': 'finished',
            'message': 'message',
            'status': 'status'
        }

        self._code = code
        self._finished = finished
        self._message = message
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentState of this PaymentState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this PaymentState.

        What went wrong with the Payment if it finished with an error - error code

        :return: The code of this PaymentState.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PaymentState.

        What went wrong with the Payment if it finished with an error - error code

        :param code: The code of this PaymentState.
        :type code: str
        """

        self._code = code

    @property
    def finished(self):
        """Gets the finished of this PaymentState.

        Whether the payment has finished

        :return: The finished of this PaymentState.
        :rtype: bool
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this PaymentState.

        Whether the payment has finished

        :param finished: The finished of this PaymentState.
        :type finished: bool
        """

        self._finished = finished

    @property
    def message(self):
        """Gets the message of this PaymentState.

        What went wrong with the Payment if it finished with an error - English message

        :return: The message of this PaymentState.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PaymentState.

        What went wrong with the Payment if it finished with an error - English message

        :param message: The message of this PaymentState.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this PaymentState.

        Current progress of the payment in its lifecycle

        :return: The status of this PaymentState.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentState.

        Current progress of the payment in its lifecycle

        :param status: The status of this PaymentState.
        :type status: str
        """

        self._status = status
