/**
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCardPaymentRequest from '../model/CreateCardPaymentRequest';
import CreatePaymentResult from '../model/CreatePaymentResult';
import ErrorResponse from '../model/ErrorResponse';
import GetPaymentResult from '../model/GetPaymentResult';
import PaymentError from '../model/PaymentError';
import PaymentEvents from '../model/PaymentEvents';
import PaymentSearchResults from '../model/PaymentSearchResults';

/**
* CardPayments service.
* @module api/CardPaymentsApi
* @version 1.0.3
*/
export default class CardPaymentsApi {

    /**
    * Constructs a new CardPaymentsApi. 
    * @alias module:api/CardPaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelAPayment operation.
     * @callback module:api/CardPaymentsApi~cancelAPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel payment
     * Cancel a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the 'authorization' header as 'authorization: Bearer YOUR_API_KEY_HERE'. A payment can only be cancelled if it's in a state that isn't finished.
     * @param {String} paymentId Payment identifier
     * @param {module:api/CardPaymentsApi~cancelAPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelAPayment(paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling cancelAPayment");
      }

      let pathParams = {
        'paymentId': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/payments/{paymentId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the captureAPayment operation.
     * @callback module:api/CardPaymentsApi~captureAPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Capture payment
     * Capture a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the 'authorization' header as 'authorization: Bearer YOUR_API_KEY_HERE'. A payment can only be captured if it's in 'submitted' state
     * @param {String} paymentId Payment identifier
     * @param {module:api/CardPaymentsApi~captureAPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    captureAPayment(paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling captureAPayment");
      }

      let pathParams = {
        'paymentId': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/payments/{paymentId}/capture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAPayment operation.
     * @callback module:api/CardPaymentsApi~createAPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePaymentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new payment
     * Create a new payment for the account associated to the Authorisation token. The Authorisation token needs to be specified in the 'authorization' header as 'authorization: Bearer YOUR_API_KEY_HERE'
     * @param {module:model/CreateCardPaymentRequest} body requestPayload
     * @param {module:api/CardPaymentsApi~createAPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePaymentResult}
     */
    createAPayment(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAPayment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePaymentResult;
      return this.apiClient.callApi(
        '/v1/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAPayment operation.
     * @callback module:api/CardPaymentsApi~getAPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPaymentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find payment by ID
     * Return information about the payment The Authorisation token needs to be specified in the 'authorization' header as 'authorization: Bearer YOUR_API_KEY_HERE'
     * @param {String} paymentId Payment identifier
     * @param {module:api/CardPaymentsApi~getAPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPaymentResult}
     */
    getAPayment(paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling getAPayment");
      }

      let pathParams = {
        'paymentId': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPaymentResult;
      return this.apiClient.callApi(
        '/v1/payments/{paymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsForAPayment operation.
     * @callback module:api/CardPaymentsApi~getEventsForAPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return payment events by ID
     * Return payment events information about a certain payment The Authorisation token needs to be specified in the 'authorization' header as 'authorization: Bearer YOUR_API_KEY_HERE'
     * @param {String} paymentId Payment identifier
     * @param {module:api/CardPaymentsApi~getEventsForAPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentEvents}
     */
    getEventsForAPayment(paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling getEventsForAPayment");
      }

      let pathParams = {
        'paymentId': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentEvents;
      return this.apiClient.callApi(
        '/v1/payments/{paymentId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPayments operation.
     * @callback module:api/CardPaymentsApi~searchPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search payments
     * Search payments by reference, state, 'from' and 'to' date. The Authorisation token needs to be specified in the 'authorization' header as 'authorization: Bearer YOUR_API_KEY_HERE'
     * @param {Object} opts Optional parameters
     * @param {String} [reference] Your payment reference to search (exact match, case insensitive)
     * @param {String} [email] The user email used in the payment to be searched
     * @param {module:model/String} [state] State of payments to be searched. Example=success
     * @param {String} [cardBrand] Card brand used for payment. Example=master-card
     * @param {String} [fromDate] From date of payments to be searched (this date is inclusive). Example=2015-08-13T12:35:00Z
     * @param {String} [toDate] To date of payments to be searched (this date is exclusive). Example=2015-08-14T12:35:00Z
     * @param {String} [page] Page number requested for the search, should be a positive integer (optional, defaults to 1)
     * @param {String} [displaySize] Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500)
     * @param {String} [cardholderName] Name on card used to make payment
     * @param {String} [firstDigitsCardNumber] First six digits of the card used to make payment
     * @param {String} [lastDigitsCardNumber] Last four digits of the card used to make payment
     * @param {String} [fromSettledDate] From settled date of payment to be searched (this date is inclusive). Example=2015-08-13
     * @param {String} [toSettledDate] To settled date of payment to be searched (this date is inclusive). Example=2015-08-14
     * @param {module:api/CardPaymentsApi~searchPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentSearchResults}
     */
    searchPayments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'reference': opts['reference'],
        'email': opts['email'],
        'state': opts['state'],
        'card_brand': opts['cardBrand'],
        'from_date': opts['fromDate'],
        'to_date': opts['toDate'],
        'page': opts['page'],
        'display_size': opts['displaySize'],
        'cardholder_name': opts['cardholderName'],
        'first_digits_card_number': opts['firstDigitsCardNumber'],
        'last_digits_card_number': opts['lastDigitsCardNumber'],
        'from_settled_date': opts['fromSettledDate'],
        'to_settled_date': opts['toSettledDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentSearchResults;
      return this.apiClient.callApi(
        '/v1/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
