/**
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRefundingCardPaymentsApi_H
#define OAI_OAIRefundingCardPaymentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIPaymentError.h"
#include "OAIPaymentRefundRequest.h"
#include "OAIRefund.h"
#include "OAIRefundError.h"
#include "OAIRefundForSearchResult.h"
#include "OAIRefundSearchResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRefundingCardPaymentsApi : public QObject {
    Q_OBJECT

public:
    OAIRefundingCardPaymentsApi(const int timeOut = 0);
    ~OAIRefundingCardPaymentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  payment_id QString [required]
    * @param[in]  refund_id QString [required]
    */
    virtual void get_a_payment_refund(const QString &payment_id, const QString &refund_id);

    /**
    * @param[in]  payment_id QString [required]
    */
    virtual void get_all_refunds_for_a_payment(const QString &payment_id);

    /**
    * @param[in]  from_date QString [optional]
    * @param[in]  to_date QString [optional]
    * @param[in]  from_settled_date QString [optional]
    * @param[in]  to_settled_date QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  display_size QString [optional]
    */
    virtual void search_refunds(const ::OpenAPI::OptionalParam<QString> &from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_settled_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_settled_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &display_size = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payment_id QString [required]
    * @param[in]  body OAIPaymentRefundRequest [required]
    */
    virtual void submit_a_refund_for_a_payment(const QString &payment_id, const OAIPaymentRefundRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void get_a_payment_refundCallback(OAIHttpRequestWorker *worker);
    void get_all_refunds_for_a_paymentCallback(OAIHttpRequestWorker *worker);
    void search_refundsCallback(OAIHttpRequestWorker *worker);
    void submit_a_refund_for_a_paymentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void get_a_payment_refundSignal(OAIRefund summary);
    void get_all_refunds_for_a_paymentSignal(OAIRefundForSearchResult summary);
    void search_refundsSignal(OAIRefundSearchResults summary);
    void submit_a_refund_for_a_paymentSignal(OAIRefund summary);


    void get_a_payment_refundSignalFull(OAIHttpRequestWorker *worker, OAIRefund summary);
    void get_all_refunds_for_a_paymentSignalFull(OAIHttpRequestWorker *worker, OAIRefundForSearchResult summary);
    void search_refundsSignalFull(OAIHttpRequestWorker *worker, OAIRefundSearchResults summary);
    void submit_a_refund_for_a_paymentSignalFull(OAIHttpRequestWorker *worker, OAIRefund summary);

    Q_DECL_DEPRECATED_X("Use get_a_payment_refundSignalError() instead")
    void get_a_payment_refundSignalE(OAIRefund summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_a_payment_refundSignalError(OAIRefund summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_all_refunds_for_a_paymentSignalError() instead")
    void get_all_refunds_for_a_paymentSignalE(OAIRefundForSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_all_refunds_for_a_paymentSignalError(OAIRefundForSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_refundsSignalError() instead")
    void search_refundsSignalE(OAIRefundSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void search_refundsSignalError(OAIRefundSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submit_a_refund_for_a_paymentSignalError() instead")
    void submit_a_refund_for_a_paymentSignalE(OAIRefund summary, QNetworkReply::NetworkError error_type, QString error_str);
    void submit_a_refund_for_a_paymentSignalError(OAIRefund summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use get_a_payment_refundSignalErrorFull() instead")
    void get_a_payment_refundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_a_payment_refundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_all_refunds_for_a_paymentSignalErrorFull() instead")
    void get_all_refunds_for_a_paymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_all_refunds_for_a_paymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_refundsSignalErrorFull() instead")
    void search_refundsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void search_refundsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submit_a_refund_for_a_paymentSignalErrorFull() instead")
    void submit_a_refund_for_a_paymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submit_a_refund_for_a_paymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
