/**
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICardPaymentsApi_H
#define OAI_OAICardPaymentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateCardPaymentRequest.h"
#include "OAICreatePaymentResult.h"
#include "OAIErrorResponse.h"
#include "OAIGetPaymentResult.h"
#include "OAIPaymentError.h"
#include "OAIPaymentEvents.h"
#include "OAIPaymentSearchResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICardPaymentsApi : public QObject {
    Q_OBJECT

public:
    OAICardPaymentsApi(const int timeOut = 0);
    ~OAICardPaymentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  payment_id QString [required]
    */
    virtual void cancel_a_payment(const QString &payment_id);

    /**
    * @param[in]  payment_id QString [required]
    */
    virtual void capture_a_payment(const QString &payment_id);

    /**
    * @param[in]  body OAICreateCardPaymentRequest [required]
    */
    virtual void create_a_payment(const OAICreateCardPaymentRequest &body);

    /**
    * @param[in]  payment_id QString [required]
    */
    virtual void get_a_payment(const QString &payment_id);

    /**
    * @param[in]  payment_id QString [required]
    */
    virtual void get_events_for_a_payment(const QString &payment_id);

    /**
    * @param[in]  reference QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  card_brand QString [optional]
    * @param[in]  from_date QString [optional]
    * @param[in]  to_date QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  display_size QString [optional]
    * @param[in]  cardholder_name QString [optional]
    * @param[in]  first_digits_card_number QString [optional]
    * @param[in]  last_digits_card_number QString [optional]
    * @param[in]  from_settled_date QString [optional]
    * @param[in]  to_settled_date QString [optional]
    */
    virtual void search_payments(const ::OpenAPI::OptionalParam<QString> &reference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &card_brand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &display_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cardholder_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_digits_card_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_digits_card_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_settled_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_settled_date = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancel_a_paymentCallback(OAIHttpRequestWorker *worker);
    void capture_a_paymentCallback(OAIHttpRequestWorker *worker);
    void create_a_paymentCallback(OAIHttpRequestWorker *worker);
    void get_a_paymentCallback(OAIHttpRequestWorker *worker);
    void get_events_for_a_paymentCallback(OAIHttpRequestWorker *worker);
    void search_paymentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancel_a_paymentSignal();
    void capture_a_paymentSignal();
    void create_a_paymentSignal(OAICreatePaymentResult summary);
    void get_a_paymentSignal(OAIGetPaymentResult summary);
    void get_events_for_a_paymentSignal(OAIPaymentEvents summary);
    void search_paymentsSignal(OAIPaymentSearchResults summary);


    void cancel_a_paymentSignalFull(OAIHttpRequestWorker *worker);
    void capture_a_paymentSignalFull(OAIHttpRequestWorker *worker);
    void create_a_paymentSignalFull(OAIHttpRequestWorker *worker, OAICreatePaymentResult summary);
    void get_a_paymentSignalFull(OAIHttpRequestWorker *worker, OAIGetPaymentResult summary);
    void get_events_for_a_paymentSignalFull(OAIHttpRequestWorker *worker, OAIPaymentEvents summary);
    void search_paymentsSignalFull(OAIHttpRequestWorker *worker, OAIPaymentSearchResults summary);

    Q_DECL_DEPRECATED_X("Use cancel_a_paymentSignalError() instead")
    void cancel_a_paymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancel_a_paymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capture_a_paymentSignalError() instead")
    void capture_a_paymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void capture_a_paymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use create_a_paymentSignalError() instead")
    void create_a_paymentSignalE(OAICreatePaymentResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void create_a_paymentSignalError(OAICreatePaymentResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_a_paymentSignalError() instead")
    void get_a_paymentSignalE(OAIGetPaymentResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_a_paymentSignalError(OAIGetPaymentResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_events_for_a_paymentSignalError() instead")
    void get_events_for_a_paymentSignalE(OAIPaymentEvents summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_events_for_a_paymentSignalError(OAIPaymentEvents summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_paymentsSignalError() instead")
    void search_paymentsSignalE(OAIPaymentSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void search_paymentsSignalError(OAIPaymentSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancel_a_paymentSignalErrorFull() instead")
    void cancel_a_paymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancel_a_paymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capture_a_paymentSignalErrorFull() instead")
    void capture_a_paymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void capture_a_paymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use create_a_paymentSignalErrorFull() instead")
    void create_a_paymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create_a_paymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_a_paymentSignalErrorFull() instead")
    void get_a_paymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_a_paymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_events_for_a_paymentSignalErrorFull() instead")
    void get_events_for_a_paymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_events_for_a_paymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_paymentsSignalErrorFull() instead")
    void search_paymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void search_paymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
