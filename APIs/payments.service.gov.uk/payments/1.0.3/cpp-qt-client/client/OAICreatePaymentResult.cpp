/**
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePaymentResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePaymentResult::OAICreatePaymentResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePaymentResult::OAICreatePaymentResult() {
    this->initializeModel();
}

OAICreatePaymentResult::~OAICreatePaymentResult() {}

void OAICreatePaymentResult::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_card_details_isSet = false;
    m_card_details_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_delayed_capture_isSet = false;
    m_delayed_capture_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_moto_isSet = false;
    m_moto_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_payment_provider_isSet = false;
    m_payment_provider_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_refund_summary_isSet = false;
    m_refund_summary_isValid = false;

    m_return_url_isSet = false;
    m_return_url_isValid = false;

    m_settlement_summary_isSet = false;
    m_settlement_summary_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICreatePaymentResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePaymentResult::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_card_details_isValid = ::OpenAPI::fromJsonValue(m_card_details, json[QString("card_details")]);
    m_card_details_isSet = !json[QString("card_details")].isNull() && m_card_details_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("created_date")]);
    m_created_date_isSet = !json[QString("created_date")].isNull() && m_created_date_isValid;

    m_delayed_capture_isValid = ::OpenAPI::fromJsonValue(m_delayed_capture, json[QString("delayed_capture")]);
    m_delayed_capture_isSet = !json[QString("delayed_capture")].isNull() && m_delayed_capture_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_moto_isValid = ::OpenAPI::fromJsonValue(m_moto, json[QString("moto")]);
    m_moto_isSet = !json[QString("moto")].isNull() && m_moto_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("payment_id")]);
    m_payment_id_isSet = !json[QString("payment_id")].isNull() && m_payment_id_isValid;

    m_payment_provider_isValid = ::OpenAPI::fromJsonValue(m_payment_provider, json[QString("payment_provider")]);
    m_payment_provider_isSet = !json[QString("payment_provider")].isNull() && m_payment_provider_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("provider_id")]);
    m_provider_id_isSet = !json[QString("provider_id")].isNull() && m_provider_id_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_refund_summary_isValid = ::OpenAPI::fromJsonValue(m_refund_summary, json[QString("refund_summary")]);
    m_refund_summary_isSet = !json[QString("refund_summary")].isNull() && m_refund_summary_isValid;

    m_return_url_isValid = ::OpenAPI::fromJsonValue(m_return_url, json[QString("return_url")]);
    m_return_url_isSet = !json[QString("return_url")].isNull() && m_return_url_isValid;

    m_settlement_summary_isValid = ::OpenAPI::fromJsonValue(m_settlement_summary, json[QString("settlement_summary")]);
    m_settlement_summary_isSet = !json[QString("settlement_summary")].isNull() && m_settlement_summary_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICreatePaymentResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePaymentResult::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_card_details.isSet()) {
        obj.insert(QString("card_details"), ::OpenAPI::toJsonValue(m_card_details));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("created_date"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_delayed_capture_isSet) {
        obj.insert(QString("delayed_capture"), ::OpenAPI::toJsonValue(m_delayed_capture));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_moto_isSet) {
        obj.insert(QString("moto"), ::OpenAPI::toJsonValue(m_moto));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("payment_id"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_payment_provider_isSet) {
        obj.insert(QString("payment_provider"), ::OpenAPI::toJsonValue(m_payment_provider));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("provider_id"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_refund_summary.isSet()) {
        obj.insert(QString("refund_summary"), ::OpenAPI::toJsonValue(m_refund_summary));
    }
    if (m_return_url_isSet) {
        obj.insert(QString("return_url"), ::OpenAPI::toJsonValue(m_return_url));
    }
    if (m_settlement_summary.isSet()) {
        obj.insert(QString("settlement_summary"), ::OpenAPI::toJsonValue(m_settlement_summary));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIPaymentLinks OAICreatePaymentResult::getLinks() const {
    return m__links;
}
void OAICreatePaymentResult::setLinks(const OAIPaymentLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAICreatePaymentResult::is__links_Set() const{
    return m__links_isSet;
}

bool OAICreatePaymentResult::is__links_Valid() const{
    return m__links_isValid;
}

qint64 OAICreatePaymentResult::getAmount() const {
    return m_amount;
}
void OAICreatePaymentResult::setAmount(const qint64 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICreatePaymentResult::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICreatePaymentResult::is_amount_Valid() const{
    return m_amount_isValid;
}

OAICardDetails OAICreatePaymentResult::getCardDetails() const {
    return m_card_details;
}
void OAICreatePaymentResult::setCardDetails(const OAICardDetails &card_details) {
    m_card_details = card_details;
    m_card_details_isSet = true;
}

bool OAICreatePaymentResult::is_card_details_Set() const{
    return m_card_details_isSet;
}

bool OAICreatePaymentResult::is_card_details_Valid() const{
    return m_card_details_isValid;
}

QString OAICreatePaymentResult::getCreatedDate() const {
    return m_created_date;
}
void OAICreatePaymentResult::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAICreatePaymentResult::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAICreatePaymentResult::is_created_date_Valid() const{
    return m_created_date_isValid;
}

bool OAICreatePaymentResult::isDelayedCapture() const {
    return m_delayed_capture;
}
void OAICreatePaymentResult::setDelayedCapture(const bool &delayed_capture) {
    m_delayed_capture = delayed_capture;
    m_delayed_capture_isSet = true;
}

bool OAICreatePaymentResult::is_delayed_capture_Set() const{
    return m_delayed_capture_isSet;
}

bool OAICreatePaymentResult::is_delayed_capture_Valid() const{
    return m_delayed_capture_isValid;
}

QString OAICreatePaymentResult::getDescription() const {
    return m_description;
}
void OAICreatePaymentResult::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreatePaymentResult::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreatePaymentResult::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreatePaymentResult::getEmail() const {
    return m_email;
}
void OAICreatePaymentResult::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICreatePaymentResult::is_email_Set() const{
    return m_email_isSet;
}

bool OAICreatePaymentResult::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICreatePaymentResult::getLanguage() const {
    return m_language;
}
void OAICreatePaymentResult::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAICreatePaymentResult::is_language_Set() const{
    return m_language_isSet;
}

bool OAICreatePaymentResult::is_language_Valid() const{
    return m_language_isValid;
}

QMap<QString, QString> OAICreatePaymentResult::getMetadata() const {
    return m_metadata;
}
void OAICreatePaymentResult::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICreatePaymentResult::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICreatePaymentResult::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAICreatePaymentResult::isMoto() const {
    return m_moto;
}
void OAICreatePaymentResult::setMoto(const bool &moto) {
    m_moto = moto;
    m_moto_isSet = true;
}

bool OAICreatePaymentResult::is_moto_Set() const{
    return m_moto_isSet;
}

bool OAICreatePaymentResult::is_moto_Valid() const{
    return m_moto_isValid;
}

QString OAICreatePaymentResult::getPaymentId() const {
    return m_payment_id;
}
void OAICreatePaymentResult::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAICreatePaymentResult::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAICreatePaymentResult::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QString OAICreatePaymentResult::getPaymentProvider() const {
    return m_payment_provider;
}
void OAICreatePaymentResult::setPaymentProvider(const QString &payment_provider) {
    m_payment_provider = payment_provider;
    m_payment_provider_isSet = true;
}

bool OAICreatePaymentResult::is_payment_provider_Set() const{
    return m_payment_provider_isSet;
}

bool OAICreatePaymentResult::is_payment_provider_Valid() const{
    return m_payment_provider_isValid;
}

QString OAICreatePaymentResult::getProviderId() const {
    return m_provider_id;
}
void OAICreatePaymentResult::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAICreatePaymentResult::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAICreatePaymentResult::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

QString OAICreatePaymentResult::getReference() const {
    return m_reference;
}
void OAICreatePaymentResult::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAICreatePaymentResult::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAICreatePaymentResult::is_reference_Valid() const{
    return m_reference_isValid;
}

OAIRefundSummary OAICreatePaymentResult::getRefundSummary() const {
    return m_refund_summary;
}
void OAICreatePaymentResult::setRefundSummary(const OAIRefundSummary &refund_summary) {
    m_refund_summary = refund_summary;
    m_refund_summary_isSet = true;
}

bool OAICreatePaymentResult::is_refund_summary_Set() const{
    return m_refund_summary_isSet;
}

bool OAICreatePaymentResult::is_refund_summary_Valid() const{
    return m_refund_summary_isValid;
}

QString OAICreatePaymentResult::getReturnUrl() const {
    return m_return_url;
}
void OAICreatePaymentResult::setReturnUrl(const QString &return_url) {
    m_return_url = return_url;
    m_return_url_isSet = true;
}

bool OAICreatePaymentResult::is_return_url_Set() const{
    return m_return_url_isSet;
}

bool OAICreatePaymentResult::is_return_url_Valid() const{
    return m_return_url_isValid;
}

OAIPaymentSettlementSummary OAICreatePaymentResult::getSettlementSummary() const {
    return m_settlement_summary;
}
void OAICreatePaymentResult::setSettlementSummary(const OAIPaymentSettlementSummary &settlement_summary) {
    m_settlement_summary = settlement_summary;
    m_settlement_summary_isSet = true;
}

bool OAICreatePaymentResult::is_settlement_summary_Set() const{
    return m_settlement_summary_isSet;
}

bool OAICreatePaymentResult::is_settlement_summary_Valid() const{
    return m_settlement_summary_isValid;
}

OAIPaymentState OAICreatePaymentResult::getState() const {
    return m_state;
}
void OAICreatePaymentResult::setState(const OAIPaymentState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreatePaymentResult::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreatePaymentResult::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICreatePaymentResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delayed_capture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_moto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlement_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePaymentResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
