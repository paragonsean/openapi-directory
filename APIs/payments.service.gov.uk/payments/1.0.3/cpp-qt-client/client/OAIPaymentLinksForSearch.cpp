/**
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentLinksForSearch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentLinksForSearch::OAIPaymentLinksForSearch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentLinksForSearch::OAIPaymentLinksForSearch() {
    this->initializeModel();
}

OAIPaymentLinksForSearch::~OAIPaymentLinksForSearch() {}

void OAIPaymentLinksForSearch::initializeModel() {

    m_cancel_isSet = false;
    m_cancel_isValid = false;

    m_capture_isSet = false;
    m_capture_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_refunds_isSet = false;
    m_refunds_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIPaymentLinksForSearch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentLinksForSearch::fromJsonObject(QJsonObject json) {

    m_cancel_isValid = ::OpenAPI::fromJsonValue(m_cancel, json[QString("cancel")]);
    m_cancel_isSet = !json[QString("cancel")].isNull() && m_cancel_isValid;

    m_capture_isValid = ::OpenAPI::fromJsonValue(m_capture, json[QString("capture")]);
    m_capture_isSet = !json[QString("capture")].isNull() && m_capture_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_refunds_isValid = ::OpenAPI::fromJsonValue(m_refunds, json[QString("refunds")]);
    m_refunds_isSet = !json[QString("refunds")].isNull() && m_refunds_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAIPaymentLinksForSearch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentLinksForSearch::asJsonObject() const {
    QJsonObject obj;
    if (m_cancel.isSet()) {
        obj.insert(QString("cancel"), ::OpenAPI::toJsonValue(m_cancel));
    }
    if (m_capture.isSet()) {
        obj.insert(QString("capture"), ::OpenAPI::toJsonValue(m_capture));
    }
    if (m_events.isSet()) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_refunds.isSet()) {
        obj.insert(QString("refunds"), ::OpenAPI::toJsonValue(m_refunds));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

OAIPostLink OAIPaymentLinksForSearch::getCancel() const {
    return m_cancel;
}
void OAIPaymentLinksForSearch::setCancel(const OAIPostLink &cancel) {
    m_cancel = cancel;
    m_cancel_isSet = true;
}

bool OAIPaymentLinksForSearch::is_cancel_Set() const{
    return m_cancel_isSet;
}

bool OAIPaymentLinksForSearch::is_cancel_Valid() const{
    return m_cancel_isValid;
}

OAIPostLink OAIPaymentLinksForSearch::getCapture() const {
    return m_capture;
}
void OAIPaymentLinksForSearch::setCapture(const OAIPostLink &capture) {
    m_capture = capture;
    m_capture_isSet = true;
}

bool OAIPaymentLinksForSearch::is_capture_Set() const{
    return m_capture_isSet;
}

bool OAIPaymentLinksForSearch::is_capture_Valid() const{
    return m_capture_isValid;
}

OAILink OAIPaymentLinksForSearch::getEvents() const {
    return m_events;
}
void OAIPaymentLinksForSearch::setEvents(const OAILink &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIPaymentLinksForSearch::is_events_Set() const{
    return m_events_isSet;
}

bool OAIPaymentLinksForSearch::is_events_Valid() const{
    return m_events_isValid;
}

OAILink OAIPaymentLinksForSearch::getRefunds() const {
    return m_refunds;
}
void OAIPaymentLinksForSearch::setRefunds(const OAILink &refunds) {
    m_refunds = refunds;
    m_refunds_isSet = true;
}

bool OAIPaymentLinksForSearch::is_refunds_Set() const{
    return m_refunds_isSet;
}

bool OAIPaymentLinksForSearch::is_refunds_Valid() const{
    return m_refunds_isValid;
}

OAILink OAIPaymentLinksForSearch::getSelf() const {
    return m_self;
}
void OAIPaymentLinksForSearch::setSelf(const OAILink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIPaymentLinksForSearch::is_self_Set() const{
    return m_self_isSet;
}

bool OAIPaymentLinksForSearch::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIPaymentLinksForSearch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentLinksForSearch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
