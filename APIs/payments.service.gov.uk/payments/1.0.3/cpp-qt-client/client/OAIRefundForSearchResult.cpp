/**
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefundForSearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefundForSearchResult::OAIRefundForSearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefundForSearchResult::OAIRefundForSearchResult() {
    this->initializeModel();
}

OAIRefundForSearchResult::~OAIRefundForSearchResult() {}

void OAIRefundForSearchResult::initializeModel() {

    m__embedded_isSet = false;
    m__embedded_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;
}

void OAIRefundForSearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefundForSearchResult::fromJsonObject(QJsonObject json) {

    m__embedded_isValid = ::OpenAPI::fromJsonValue(m__embedded, json[QString("_embedded")]);
    m__embedded_isSet = !json[QString("_embedded")].isNull() && m__embedded_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("payment_id")]);
    m_payment_id_isSet = !json[QString("payment_id")].isNull() && m_payment_id_isValid;
}

QString OAIRefundForSearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefundForSearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m__embedded.isSet()) {
        obj.insert(QString("_embedded"), ::OpenAPI::toJsonValue(m__embedded));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("payment_id"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    return obj;
}

OAIEmbeddedRefunds OAIRefundForSearchResult::getEmbedded() const {
    return m__embedded;
}
void OAIRefundForSearchResult::setEmbedded(const OAIEmbeddedRefunds &_embedded) {
    m__embedded = _embedded;
    m__embedded_isSet = true;
}

bool OAIRefundForSearchResult::is__embedded_Set() const{
    return m__embedded_isSet;
}

bool OAIRefundForSearchResult::is__embedded_Valid() const{
    return m__embedded_isValid;
}

OAIRefundLinksForSearch OAIRefundForSearchResult::getLinks() const {
    return m__links;
}
void OAIRefundForSearchResult::setLinks(const OAIRefundLinksForSearch &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIRefundForSearchResult::is__links_Set() const{
    return m__links_isSet;
}

bool OAIRefundForSearchResult::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIRefundForSearchResult::getPaymentId() const {
    return m_payment_id;
}
void OAIRefundForSearchResult::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIRefundForSearchResult::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIRefundForSearchResult::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

bool OAIRefundForSearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__embedded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefundForSearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
