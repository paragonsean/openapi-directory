/**
 * GOV.UK Pay API
 * GOV.UK Pay API (This version is no longer maintained. See openapi/publicapi_spec.json for latest API specification)
 *
 * The version of the OpenAPI document: 1.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentEvent::OAIPaymentEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentEvent::OAIPaymentEvent() {
    this->initializeModel();
}

OAIPaymentEvent::~OAIPaymentEvent() {}

void OAIPaymentEvent::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIPaymentEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentEvent::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("payment_id")]);
    m_payment_id_isSet = !json[QString("payment_id")].isNull() && m_payment_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIPaymentEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentEvent::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("payment_id"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

OAIPaymentEventLink OAIPaymentEvent::getLinks() const {
    return m__links;
}
void OAIPaymentEvent::setLinks(const OAIPaymentEventLink &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIPaymentEvent::is__links_Set() const{
    return m__links_isSet;
}

bool OAIPaymentEvent::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIPaymentEvent::getPaymentId() const {
    return m_payment_id;
}
void OAIPaymentEvent::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIPaymentEvent::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIPaymentEvent::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

OAIPaymentState OAIPaymentEvent::getState() const {
    return m_state;
}
void OAIPaymentEvent::setState(const OAIPaymentState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPaymentEvent::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPaymentEvent::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIPaymentEvent::getUpdated() const {
    return m_updated;
}
void OAIPaymentEvent::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPaymentEvent::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPaymentEvent::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIPaymentEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
