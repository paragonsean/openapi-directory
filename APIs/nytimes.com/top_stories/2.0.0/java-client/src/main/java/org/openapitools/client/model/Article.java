/*
 * Top Stories
 * The Top Stories API provides lists of articles and associated images by section.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArticleMultimediaInner;
import org.openapitools.client.model.ArticleRelatedUrlsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Article
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:40.752838-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Article {
  public static final String SERIALIZED_NAME_ABSTRACT = "abstract";
  @SerializedName(SERIALIZED_NAME_ABSTRACT)
  private String _abstract;

  public static final String SERIALIZED_NAME_BYLINE = "byline";
  @SerializedName(SERIALIZED_NAME_BYLINE)
  private String byline;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_DES_FACET = "des_facet";
  @SerializedName(SERIALIZED_NAME_DES_FACET)
  private List<String> desFacet = new ArrayList<>();

  public static final String SERIALIZED_NAME_GEO_FACET = "geo_facet";
  @SerializedName(SERIALIZED_NAME_GEO_FACET)
  private List<String> geoFacet = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_TYPE = "item_type";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private String itemType;

  public static final String SERIALIZED_NAME_KICKER = "kicker";
  @SerializedName(SERIALIZED_NAME_KICKER)
  private String kicker;

  public static final String SERIALIZED_NAME_MATERIAL_TYPE_FACET = "material_type_facet";
  @SerializedName(SERIALIZED_NAME_MATERIAL_TYPE_FACET)
  private String materialTypeFacet;

  public static final String SERIALIZED_NAME_MULTIMEDIA = "multimedia";
  @SerializedName(SERIALIZED_NAME_MULTIMEDIA)
  private List<ArticleMultimediaInner> multimedia = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORG_FACET = "org_facet";
  @SerializedName(SERIALIZED_NAME_ORG_FACET)
  private List<String> orgFacet = new ArrayList<>();

  public static final String SERIALIZED_NAME_PER_FACET = "per_facet";
  @SerializedName(SERIALIZED_NAME_PER_FACET)
  private List<String> perFacet = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLISHED_DATE = "published_date";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_DATE)
  private String publishedDate;

  public static final String SERIALIZED_NAME_RELATED_URLS = "related_urls";
  @SerializedName(SERIALIZED_NAME_RELATED_URLS)
  private List<ArticleRelatedUrlsInner> relatedUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECTION = "section";
  @SerializedName(SERIALIZED_NAME_SECTION)
  private String section;

  public static final String SERIALIZED_NAME_SHORT_URL = "short_url";
  @SerializedName(SERIALIZED_NAME_SHORT_URL)
  private String shortUrl;

  public static final String SERIALIZED_NAME_SUBSECTION = "subsection";
  @SerializedName(SERIALIZED_NAME_SUBSECTION)
  private String subsection;

  public static final String SERIALIZED_NAME_THUMBNAIL_STANDARD = "thumbnail_standard";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_STANDARD)
  private String thumbnailStandard;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_DATE = "updated_date";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE)
  private String updatedDate;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Article() {
  }

  public Article _abstract(String _abstract) {
    this._abstract = _abstract;
    return this;
  }

  /**
   * Get _abstract
   * @return _abstract
   */
  @javax.annotation.Nullable
  public String getAbstract() {
    return _abstract;
  }

  public void setAbstract(String _abstract) {
    this._abstract = _abstract;
  }


  public Article byline(String byline) {
    this.byline = byline;
    return this;
  }

  /**
   * Get byline
   * @return byline
   */
  @javax.annotation.Nullable
  public String getByline() {
    return byline;
  }

  public void setByline(String byline) {
    this.byline = byline;
  }


  public Article createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public Article desFacet(List<String> desFacet) {
    this.desFacet = desFacet;
    return this;
  }

  public Article addDesFacetItem(String desFacetItem) {
    if (this.desFacet == null) {
      this.desFacet = new ArrayList<>();
    }
    this.desFacet.add(desFacetItem);
    return this;
  }

  /**
   * Get desFacet
   * @return desFacet
   */
  @javax.annotation.Nullable
  public List<String> getDesFacet() {
    return desFacet;
  }

  public void setDesFacet(List<String> desFacet) {
    this.desFacet = desFacet;
  }


  public Article geoFacet(List<String> geoFacet) {
    this.geoFacet = geoFacet;
    return this;
  }

  public Article addGeoFacetItem(String geoFacetItem) {
    if (this.geoFacet == null) {
      this.geoFacet = new ArrayList<>();
    }
    this.geoFacet.add(geoFacetItem);
    return this;
  }

  /**
   * Get geoFacet
   * @return geoFacet
   */
  @javax.annotation.Nullable
  public List<String> getGeoFacet() {
    return geoFacet;
  }

  public void setGeoFacet(List<String> geoFacet) {
    this.geoFacet = geoFacet;
  }


  public Article itemType(String itemType) {
    this.itemType = itemType;
    return this;
  }

  /**
   * Get itemType
   * @return itemType
   */
  @javax.annotation.Nullable
  public String getItemType() {
    return itemType;
  }

  public void setItemType(String itemType) {
    this.itemType = itemType;
  }


  public Article kicker(String kicker) {
    this.kicker = kicker;
    return this;
  }

  /**
   * Get kicker
   * @return kicker
   */
  @javax.annotation.Nullable
  public String getKicker() {
    return kicker;
  }

  public void setKicker(String kicker) {
    this.kicker = kicker;
  }


  public Article materialTypeFacet(String materialTypeFacet) {
    this.materialTypeFacet = materialTypeFacet;
    return this;
  }

  /**
   * Get materialTypeFacet
   * @return materialTypeFacet
   */
  @javax.annotation.Nullable
  public String getMaterialTypeFacet() {
    return materialTypeFacet;
  }

  public void setMaterialTypeFacet(String materialTypeFacet) {
    this.materialTypeFacet = materialTypeFacet;
  }


  public Article multimedia(List<ArticleMultimediaInner> multimedia) {
    this.multimedia = multimedia;
    return this;
  }

  public Article addMultimediaItem(ArticleMultimediaInner multimediaItem) {
    if (this.multimedia == null) {
      this.multimedia = new ArrayList<>();
    }
    this.multimedia.add(multimediaItem);
    return this;
  }

  /**
   * Get multimedia
   * @return multimedia
   */
  @javax.annotation.Nullable
  public List<ArticleMultimediaInner> getMultimedia() {
    return multimedia;
  }

  public void setMultimedia(List<ArticleMultimediaInner> multimedia) {
    this.multimedia = multimedia;
  }


  public Article orgFacet(List<String> orgFacet) {
    this.orgFacet = orgFacet;
    return this;
  }

  public Article addOrgFacetItem(String orgFacetItem) {
    if (this.orgFacet == null) {
      this.orgFacet = new ArrayList<>();
    }
    this.orgFacet.add(orgFacetItem);
    return this;
  }

  /**
   * Get orgFacet
   * @return orgFacet
   */
  @javax.annotation.Nullable
  public List<String> getOrgFacet() {
    return orgFacet;
  }

  public void setOrgFacet(List<String> orgFacet) {
    this.orgFacet = orgFacet;
  }


  public Article perFacet(List<String> perFacet) {
    this.perFacet = perFacet;
    return this;
  }

  public Article addPerFacetItem(String perFacetItem) {
    if (this.perFacet == null) {
      this.perFacet = new ArrayList<>();
    }
    this.perFacet.add(perFacetItem);
    return this;
  }

  /**
   * Get perFacet
   * @return perFacet
   */
  @javax.annotation.Nullable
  public List<String> getPerFacet() {
    return perFacet;
  }

  public void setPerFacet(List<String> perFacet) {
    this.perFacet = perFacet;
  }


  public Article publishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
    return this;
  }

  /**
   * Get publishedDate
   * @return publishedDate
   */
  @javax.annotation.Nullable
  public String getPublishedDate() {
    return publishedDate;
  }

  public void setPublishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
  }


  public Article relatedUrls(List<ArticleRelatedUrlsInner> relatedUrls) {
    this.relatedUrls = relatedUrls;
    return this;
  }

  public Article addRelatedUrlsItem(ArticleRelatedUrlsInner relatedUrlsItem) {
    if (this.relatedUrls == null) {
      this.relatedUrls = new ArrayList<>();
    }
    this.relatedUrls.add(relatedUrlsItem);
    return this;
  }

  /**
   * Get relatedUrls
   * @return relatedUrls
   */
  @javax.annotation.Nullable
  public List<ArticleRelatedUrlsInner> getRelatedUrls() {
    return relatedUrls;
  }

  public void setRelatedUrls(List<ArticleRelatedUrlsInner> relatedUrls) {
    this.relatedUrls = relatedUrls;
  }


  public Article section(String section) {
    this.section = section;
    return this;
  }

  /**
   * Get section
   * @return section
   */
  @javax.annotation.Nullable
  public String getSection() {
    return section;
  }

  public void setSection(String section) {
    this.section = section;
  }


  public Article shortUrl(String shortUrl) {
    this.shortUrl = shortUrl;
    return this;
  }

  /**
   * Get shortUrl
   * @return shortUrl
   */
  @javax.annotation.Nullable
  public String getShortUrl() {
    return shortUrl;
  }

  public void setShortUrl(String shortUrl) {
    this.shortUrl = shortUrl;
  }


  public Article subsection(String subsection) {
    this.subsection = subsection;
    return this;
  }

  /**
   * Get subsection
   * @return subsection
   */
  @javax.annotation.Nullable
  public String getSubsection() {
    return subsection;
  }

  public void setSubsection(String subsection) {
    this.subsection = subsection;
  }


  public Article thumbnailStandard(String thumbnailStandard) {
    this.thumbnailStandard = thumbnailStandard;
    return this;
  }

  /**
   * Get thumbnailStandard
   * @return thumbnailStandard
   */
  @javax.annotation.Nullable
  public String getThumbnailStandard() {
    return thumbnailStandard;
  }

  public void setThumbnailStandard(String thumbnailStandard) {
    this.thumbnailStandard = thumbnailStandard;
  }


  public Article title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Article updatedDate(String updatedDate) {
    this.updatedDate = updatedDate;
    return this;
  }

  /**
   * Get updatedDate
   * @return updatedDate
   */
  @javax.annotation.Nullable
  public String getUpdatedDate() {
    return updatedDate;
  }

  public void setUpdatedDate(String updatedDate) {
    this.updatedDate = updatedDate;
  }


  public Article url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Article article = (Article) o;
    return Objects.equals(this._abstract, article._abstract) &&
        Objects.equals(this.byline, article.byline) &&
        Objects.equals(this.createdDate, article.createdDate) &&
        Objects.equals(this.desFacet, article.desFacet) &&
        Objects.equals(this.geoFacet, article.geoFacet) &&
        Objects.equals(this.itemType, article.itemType) &&
        Objects.equals(this.kicker, article.kicker) &&
        Objects.equals(this.materialTypeFacet, article.materialTypeFacet) &&
        Objects.equals(this.multimedia, article.multimedia) &&
        Objects.equals(this.orgFacet, article.orgFacet) &&
        Objects.equals(this.perFacet, article.perFacet) &&
        Objects.equals(this.publishedDate, article.publishedDate) &&
        Objects.equals(this.relatedUrls, article.relatedUrls) &&
        Objects.equals(this.section, article.section) &&
        Objects.equals(this.shortUrl, article.shortUrl) &&
        Objects.equals(this.subsection, article.subsection) &&
        Objects.equals(this.thumbnailStandard, article.thumbnailStandard) &&
        Objects.equals(this.title, article.title) &&
        Objects.equals(this.updatedDate, article.updatedDate) &&
        Objects.equals(this.url, article.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_abstract, byline, createdDate, desFacet, geoFacet, itemType, kicker, materialTypeFacet, multimedia, orgFacet, perFacet, publishedDate, relatedUrls, section, shortUrl, subsection, thumbnailStandard, title, updatedDate, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Article {\n");
    sb.append("    _abstract: ").append(toIndentedString(_abstract)).append("\n");
    sb.append("    byline: ").append(toIndentedString(byline)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    desFacet: ").append(toIndentedString(desFacet)).append("\n");
    sb.append("    geoFacet: ").append(toIndentedString(geoFacet)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    kicker: ").append(toIndentedString(kicker)).append("\n");
    sb.append("    materialTypeFacet: ").append(toIndentedString(materialTypeFacet)).append("\n");
    sb.append("    multimedia: ").append(toIndentedString(multimedia)).append("\n");
    sb.append("    orgFacet: ").append(toIndentedString(orgFacet)).append("\n");
    sb.append("    perFacet: ").append(toIndentedString(perFacet)).append("\n");
    sb.append("    publishedDate: ").append(toIndentedString(publishedDate)).append("\n");
    sb.append("    relatedUrls: ").append(toIndentedString(relatedUrls)).append("\n");
    sb.append("    section: ").append(toIndentedString(section)).append("\n");
    sb.append("    shortUrl: ").append(toIndentedString(shortUrl)).append("\n");
    sb.append("    subsection: ").append(toIndentedString(subsection)).append("\n");
    sb.append("    thumbnailStandard: ").append(toIndentedString(thumbnailStandard)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedDate: ").append(toIndentedString(updatedDate)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abstract");
    openapiFields.add("byline");
    openapiFields.add("created_date");
    openapiFields.add("des_facet");
    openapiFields.add("geo_facet");
    openapiFields.add("item_type");
    openapiFields.add("kicker");
    openapiFields.add("material_type_facet");
    openapiFields.add("multimedia");
    openapiFields.add("org_facet");
    openapiFields.add("per_facet");
    openapiFields.add("published_date");
    openapiFields.add("related_urls");
    openapiFields.add("section");
    openapiFields.add("short_url");
    openapiFields.add("subsection");
    openapiFields.add("thumbnail_standard");
    openapiFields.add("title");
    openapiFields.add("updated_date");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Article
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Article.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Article is not found in the empty JSON string", Article.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Article.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Article` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("abstract") != null && !jsonObj.get("abstract").isJsonNull()) && !jsonObj.get("abstract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abstract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abstract").toString()));
      }
      if ((jsonObj.get("byline") != null && !jsonObj.get("byline").isJsonNull()) && !jsonObj.get("byline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `byline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("byline").toString()));
      }
      if ((jsonObj.get("created_date") != null && !jsonObj.get("created_date").isJsonNull()) && !jsonObj.get("created_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_date").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("des_facet") != null && !jsonObj.get("des_facet").isJsonNull() && !jsonObj.get("des_facet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `des_facet` to be an array in the JSON string but got `%s`", jsonObj.get("des_facet").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("geo_facet") != null && !jsonObj.get("geo_facet").isJsonNull() && !jsonObj.get("geo_facet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `geo_facet` to be an array in the JSON string but got `%s`", jsonObj.get("geo_facet").toString()));
      }
      if ((jsonObj.get("item_type") != null && !jsonObj.get("item_type").isJsonNull()) && !jsonObj.get("item_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_type").toString()));
      }
      if ((jsonObj.get("kicker") != null && !jsonObj.get("kicker").isJsonNull()) && !jsonObj.get("kicker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kicker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kicker").toString()));
      }
      if ((jsonObj.get("material_type_facet") != null && !jsonObj.get("material_type_facet").isJsonNull()) && !jsonObj.get("material_type_facet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `material_type_facet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("material_type_facet").toString()));
      }
      if (jsonObj.get("multimedia") != null && !jsonObj.get("multimedia").isJsonNull()) {
        JsonArray jsonArraymultimedia = jsonObj.getAsJsonArray("multimedia");
        if (jsonArraymultimedia != null) {
          // ensure the json data is an array
          if (!jsonObj.get("multimedia").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `multimedia` to be an array in the JSON string but got `%s`", jsonObj.get("multimedia").toString()));
          }

          // validate the optional field `multimedia` (array)
          for (int i = 0; i < jsonArraymultimedia.size(); i++) {
            ArticleMultimediaInner.validateJsonElement(jsonArraymultimedia.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("org_facet") != null && !jsonObj.get("org_facet").isJsonNull() && !jsonObj.get("org_facet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_facet` to be an array in the JSON string but got `%s`", jsonObj.get("org_facet").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("per_facet") != null && !jsonObj.get("per_facet").isJsonNull() && !jsonObj.get("per_facet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `per_facet` to be an array in the JSON string but got `%s`", jsonObj.get("per_facet").toString()));
      }
      if ((jsonObj.get("published_date") != null && !jsonObj.get("published_date").isJsonNull()) && !jsonObj.get("published_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_date").toString()));
      }
      if (jsonObj.get("related_urls") != null && !jsonObj.get("related_urls").isJsonNull()) {
        JsonArray jsonArrayrelatedUrls = jsonObj.getAsJsonArray("related_urls");
        if (jsonArrayrelatedUrls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("related_urls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `related_urls` to be an array in the JSON string but got `%s`", jsonObj.get("related_urls").toString()));
          }

          // validate the optional field `related_urls` (array)
          for (int i = 0; i < jsonArrayrelatedUrls.size(); i++) {
            ArticleRelatedUrlsInner.validateJsonElement(jsonArrayrelatedUrls.get(i));
          };
        }
      }
      if ((jsonObj.get("section") != null && !jsonObj.get("section").isJsonNull()) && !jsonObj.get("section").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `section` to be a primitive type in the JSON string but got `%s`", jsonObj.get("section").toString()));
      }
      if ((jsonObj.get("short_url") != null && !jsonObj.get("short_url").isJsonNull()) && !jsonObj.get("short_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_url").toString()));
      }
      if ((jsonObj.get("subsection") != null && !jsonObj.get("subsection").isJsonNull()) && !jsonObj.get("subsection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subsection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subsection").toString()));
      }
      if ((jsonObj.get("thumbnail_standard") != null && !jsonObj.get("thumbnail_standard").isJsonNull()) && !jsonObj.get("thumbnail_standard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail_standard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail_standard").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("updated_date") != null && !jsonObj.get("updated_date").isJsonNull()) && !jsonObj.get("updated_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_date").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Article.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Article' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Article> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Article.class));

       return (TypeAdapter<T>) new TypeAdapter<Article>() {
           @Override
           public void write(JsonWriter out, Article value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Article read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Article given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Article
   * @throws IOException if the JSON string is invalid with respect to Article
   */
  public static Article fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Article.class);
  }

  /**
   * Convert an instance of Article to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

