/**
 * Top Stories
 * The Top Stories API provides lists of articles and associated images by section.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TopStories);
  }
}(this, function(expect, TopStories) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TopStories.Article();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Article', function() {
    it('should create an instance of Article', function() {
      // uncomment below and update the code to test Article
      //var instance = new TopStories.Article();
      //expect(instance).to.be.a(TopStories.Article);
    });

    it('should have the property _abstract (base name: "abstract")', function() {
      // uncomment below and update the code to test the property _abstract
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property byline (base name: "byline")', function() {
      // uncomment below and update the code to test the property byline
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property createdDate (base name: "created_date")', function() {
      // uncomment below and update the code to test the property createdDate
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property desFacet (base name: "des_facet")', function() {
      // uncomment below and update the code to test the property desFacet
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property geoFacet (base name: "geo_facet")', function() {
      // uncomment below and update the code to test the property geoFacet
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property itemType (base name: "item_type")', function() {
      // uncomment below and update the code to test the property itemType
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property kicker (base name: "kicker")', function() {
      // uncomment below and update the code to test the property kicker
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property materialTypeFacet (base name: "material_type_facet")', function() {
      // uncomment below and update the code to test the property materialTypeFacet
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property multimedia (base name: "multimedia")', function() {
      // uncomment below and update the code to test the property multimedia
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property orgFacet (base name: "org_facet")', function() {
      // uncomment below and update the code to test the property orgFacet
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property perFacet (base name: "per_facet")', function() {
      // uncomment below and update the code to test the property perFacet
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property publishedDate (base name: "published_date")', function() {
      // uncomment below and update the code to test the property publishedDate
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property relatedUrls (base name: "related_urls")', function() {
      // uncomment below and update the code to test the property relatedUrls
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property section (base name: "section")', function() {
      // uncomment below and update the code to test the property section
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property shortUrl (base name: "short_url")', function() {
      // uncomment below and update the code to test the property shortUrl
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property subsection (base name: "subsection")', function() {
      // uncomment below and update the code to test the property subsection
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property thumbnailStandard (base name: "thumbnail_standard")', function() {
      // uncomment below and update the code to test the property thumbnailStandard
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property updatedDate (base name: "updated_date")', function() {
      // uncomment below and update the code to test the property updatedDate
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new TopStories.Article();
      //expect(instance).to.be();
    });

  });

}));
