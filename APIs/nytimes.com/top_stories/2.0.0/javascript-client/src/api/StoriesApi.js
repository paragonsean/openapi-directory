/**
 * Top Stories
 * The Top Stories API provides lists of articles and associated images by section.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SectionFormatGet200Response from '../model/SectionFormatGet200Response';

/**
* Stories service.
* @module api/StoriesApi
* @version 2.0.0
*/
export default class StoriesApi {

    /**
    * Constructs a new StoriesApi. 
    * @alias module:api/StoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sectionFormatGet operation.
     * @callback module:api/StoriesApi~sectionFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SectionFormatGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Top Stories
     * The Top Stories API returns a list of articles and associated images currently on the specified section.  Support JSON and JSONP. 
     * @param {module:model/String} section The section the story appears in.
     * @param {module:model/String} format if this is JSONP or JSON
     * @param {Object} opts Optional parameters
     * @param {String} [callback] The name of the function the API call results will be passed to. Required when using JSONP. This parameter has only one valid value per section. The format is {section_name}TopStoriesCallback. 
     * @param {module:api/StoriesApi~sectionFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SectionFormatGet200Response}
     */
    sectionFormatGet(section, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling sectionFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling sectionFormatGet");
      }

      let pathParams = {
        'section': section,
        'format': format
      };
      let queryParams = {
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SectionFormatGet200Response;
      return this.apiClient.callApi(
        '/{section}.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
