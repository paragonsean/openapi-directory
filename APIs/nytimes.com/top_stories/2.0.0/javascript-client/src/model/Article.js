/**
 * Top Stories
 * The Top Stories API provides lists of articles and associated images by section.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArticleMultimediaInner from './ArticleMultimediaInner';
import ArticleRelatedUrlsInner from './ArticleRelatedUrlsInner';

/**
 * The Article model module.
 * @module model/Article
 * @version 2.0.0
 */
class Article {
    /**
     * Constructs a new <code>Article</code>.
     * @alias module:model/Article
     */
    constructor() { 
        
        Article.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Article</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Article} obj Optional instance to populate.
     * @return {module:model/Article} The populated <code>Article</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Article();

            if (data.hasOwnProperty('abstract')) {
                obj['abstract'] = ApiClient.convertToType(data['abstract'], 'String');
            }
            if (data.hasOwnProperty('byline')) {
                obj['byline'] = ApiClient.convertToType(data['byline'], 'String');
            }
            if (data.hasOwnProperty('created_date')) {
                obj['created_date'] = ApiClient.convertToType(data['created_date'], 'String');
            }
            if (data.hasOwnProperty('des_facet')) {
                obj['des_facet'] = ApiClient.convertToType(data['des_facet'], ['String']);
            }
            if (data.hasOwnProperty('geo_facet')) {
                obj['geo_facet'] = ApiClient.convertToType(data['geo_facet'], ['String']);
            }
            if (data.hasOwnProperty('item_type')) {
                obj['item_type'] = ApiClient.convertToType(data['item_type'], 'String');
            }
            if (data.hasOwnProperty('kicker')) {
                obj['kicker'] = ApiClient.convertToType(data['kicker'], 'String');
            }
            if (data.hasOwnProperty('material_type_facet')) {
                obj['material_type_facet'] = ApiClient.convertToType(data['material_type_facet'], 'String');
            }
            if (data.hasOwnProperty('multimedia')) {
                obj['multimedia'] = ApiClient.convertToType(data['multimedia'], [ArticleMultimediaInner]);
            }
            if (data.hasOwnProperty('org_facet')) {
                obj['org_facet'] = ApiClient.convertToType(data['org_facet'], ['String']);
            }
            if (data.hasOwnProperty('per_facet')) {
                obj['per_facet'] = ApiClient.convertToType(data['per_facet'], ['String']);
            }
            if (data.hasOwnProperty('published_date')) {
                obj['published_date'] = ApiClient.convertToType(data['published_date'], 'String');
            }
            if (data.hasOwnProperty('related_urls')) {
                obj['related_urls'] = ApiClient.convertToType(data['related_urls'], [ArticleRelatedUrlsInner]);
            }
            if (data.hasOwnProperty('section')) {
                obj['section'] = ApiClient.convertToType(data['section'], 'String');
            }
            if (data.hasOwnProperty('short_url')) {
                obj['short_url'] = ApiClient.convertToType(data['short_url'], 'String');
            }
            if (data.hasOwnProperty('subsection')) {
                obj['subsection'] = ApiClient.convertToType(data['subsection'], 'String');
            }
            if (data.hasOwnProperty('thumbnail_standard')) {
                obj['thumbnail_standard'] = ApiClient.convertToType(data['thumbnail_standard'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_date')) {
                obj['updated_date'] = ApiClient.convertToType(data['updated_date'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Article</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Article</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['abstract'] && !(typeof data['abstract'] === 'string' || data['abstract'] instanceof String)) {
            throw new Error("Expected the field `abstract` to be a primitive type in the JSON string but got " + data['abstract']);
        }
        // ensure the json data is a string
        if (data['byline'] && !(typeof data['byline'] === 'string' || data['byline'] instanceof String)) {
            throw new Error("Expected the field `byline` to be a primitive type in the JSON string but got " + data['byline']);
        }
        // ensure the json data is a string
        if (data['created_date'] && !(typeof data['created_date'] === 'string' || data['created_date'] instanceof String)) {
            throw new Error("Expected the field `created_date` to be a primitive type in the JSON string but got " + data['created_date']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['des_facet'])) {
            throw new Error("Expected the field `des_facet` to be an array in the JSON data but got " + data['des_facet']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['geo_facet'])) {
            throw new Error("Expected the field `geo_facet` to be an array in the JSON data but got " + data['geo_facet']);
        }
        // ensure the json data is a string
        if (data['item_type'] && !(typeof data['item_type'] === 'string' || data['item_type'] instanceof String)) {
            throw new Error("Expected the field `item_type` to be a primitive type in the JSON string but got " + data['item_type']);
        }
        // ensure the json data is a string
        if (data['kicker'] && !(typeof data['kicker'] === 'string' || data['kicker'] instanceof String)) {
            throw new Error("Expected the field `kicker` to be a primitive type in the JSON string but got " + data['kicker']);
        }
        // ensure the json data is a string
        if (data['material_type_facet'] && !(typeof data['material_type_facet'] === 'string' || data['material_type_facet'] instanceof String)) {
            throw new Error("Expected the field `material_type_facet` to be a primitive type in the JSON string but got " + data['material_type_facet']);
        }
        if (data['multimedia']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['multimedia'])) {
                throw new Error("Expected the field `multimedia` to be an array in the JSON data but got " + data['multimedia']);
            }
            // validate the optional field `multimedia` (array)
            for (const item of data['multimedia']) {
                ArticleMultimediaInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['org_facet'])) {
            throw new Error("Expected the field `org_facet` to be an array in the JSON data but got " + data['org_facet']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['per_facet'])) {
            throw new Error("Expected the field `per_facet` to be an array in the JSON data but got " + data['per_facet']);
        }
        // ensure the json data is a string
        if (data['published_date'] && !(typeof data['published_date'] === 'string' || data['published_date'] instanceof String)) {
            throw new Error("Expected the field `published_date` to be a primitive type in the JSON string but got " + data['published_date']);
        }
        if (data['related_urls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['related_urls'])) {
                throw new Error("Expected the field `related_urls` to be an array in the JSON data but got " + data['related_urls']);
            }
            // validate the optional field `related_urls` (array)
            for (const item of data['related_urls']) {
                ArticleRelatedUrlsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['section'] && !(typeof data['section'] === 'string' || data['section'] instanceof String)) {
            throw new Error("Expected the field `section` to be a primitive type in the JSON string but got " + data['section']);
        }
        // ensure the json data is a string
        if (data['short_url'] && !(typeof data['short_url'] === 'string' || data['short_url'] instanceof String)) {
            throw new Error("Expected the field `short_url` to be a primitive type in the JSON string but got " + data['short_url']);
        }
        // ensure the json data is a string
        if (data['subsection'] && !(typeof data['subsection'] === 'string' || data['subsection'] instanceof String)) {
            throw new Error("Expected the field `subsection` to be a primitive type in the JSON string but got " + data['subsection']);
        }
        // ensure the json data is a string
        if (data['thumbnail_standard'] && !(typeof data['thumbnail_standard'] === 'string' || data['thumbnail_standard'] instanceof String)) {
            throw new Error("Expected the field `thumbnail_standard` to be a primitive type in the JSON string but got " + data['thumbnail_standard']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['updated_date'] && !(typeof data['updated_date'] === 'string' || data['updated_date'] instanceof String)) {
            throw new Error("Expected the field `updated_date` to be a primitive type in the JSON string but got " + data['updated_date']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {String} abstract
 */
Article.prototype['abstract'] = undefined;

/**
 * @member {String} byline
 */
Article.prototype['byline'] = undefined;

/**
 * @member {String} created_date
 */
Article.prototype['created_date'] = undefined;

/**
 * @member {Array.<String>} des_facet
 */
Article.prototype['des_facet'] = undefined;

/**
 * @member {Array.<String>} geo_facet
 */
Article.prototype['geo_facet'] = undefined;

/**
 * @member {String} item_type
 */
Article.prototype['item_type'] = undefined;

/**
 * @member {String} kicker
 */
Article.prototype['kicker'] = undefined;

/**
 * @member {String} material_type_facet
 */
Article.prototype['material_type_facet'] = undefined;

/**
 * @member {Array.<module:model/ArticleMultimediaInner>} multimedia
 */
Article.prototype['multimedia'] = undefined;

/**
 * @member {Array.<String>} org_facet
 */
Article.prototype['org_facet'] = undefined;

/**
 * @member {Array.<String>} per_facet
 */
Article.prototype['per_facet'] = undefined;

/**
 * @member {String} published_date
 */
Article.prototype['published_date'] = undefined;

/**
 * @member {Array.<module:model/ArticleRelatedUrlsInner>} related_urls
 */
Article.prototype['related_urls'] = undefined;

/**
 * @member {String} section
 */
Article.prototype['section'] = undefined;

/**
 * @member {String} short_url
 */
Article.prototype['short_url'] = undefined;

/**
 * @member {String} subsection
 */
Article.prototype['subsection'] = undefined;

/**
 * @member {String} thumbnail_standard
 */
Article.prototype['thumbnail_standard'] = undefined;

/**
 * @member {String} title
 */
Article.prototype['title'] = undefined;

/**
 * @member {String} updated_date
 */
Article.prototype['updated_date'] = undefined;

/**
 * @member {String} url
 */
Article.prototype['url'] = undefined;






export default Article;

