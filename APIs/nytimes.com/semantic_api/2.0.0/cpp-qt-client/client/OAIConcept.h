/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConcept.h
 *
 * 
 */

#ifndef OAIConcept_H
#define OAIConcept_H

#include <QJsonObject>

#include "OAIConceptRelation.h"
#include "OAIConcept_article_list.h"
#include "OAIConcept_combinations_inner.h"
#include "OAIConcept_links_inner.h"
#include "OAIConcept_scope_notes_inner.h"
#include "OAIConcept_taxonomy_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConceptRelation;
class OAIConcept_article_list;
class OAIConcept_combinations_inner;
class OAIConcept_links_inner;
class OAIConcept_scope_notes_inner;
class OAIConcept_taxonomy_inner;

class OAIConcept : public OAIObject {
public:
    OAIConcept();
    OAIConcept(QString json);
    ~OAIConcept() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIConceptRelation> getAncestors() const;
    void setAncestors(const QList<OAIConceptRelation> &ancestors);
    bool is_ancestors_Set() const;
    bool is_ancestors_Valid() const;

    OAIConcept_article_list getArticleList() const;
    void setArticleList(const OAIConcept_article_list &article_list);
    bool is_article_list_Set() const;
    bool is_article_list_Valid() const;

    QList<OAIConcept_combinations_inner> getCombinations() const;
    void setCombinations(const QList<OAIConcept_combinations_inner> &combinations);
    bool is_combinations_Set() const;
    bool is_combinations_Valid() const;

    QString getConceptCreated() const;
    void setConceptCreated(const QString &concept_created);
    bool is_concept_created_Set() const;
    bool is_concept_created_Valid() const;

    qint32 getConceptId() const;
    void setConceptId(const qint32 &concept_id);
    bool is_concept_id_Set() const;
    bool is_concept_id_Valid() const;

    QString getConceptName() const;
    void setConceptName(const QString &concept_name);
    bool is_concept_name_Set() const;
    bool is_concept_name_Valid() const;

    QString getConceptStatus() const;
    void setConceptStatus(const QString &concept_status);
    bool is_concept_status_Set() const;
    bool is_concept_status_Valid() const;

    QString getConceptType() const;
    void setConceptType(const QString &concept_type);
    bool is_concept_type_Set() const;
    bool is_concept_type_Valid() const;

    QString getConceptUpdated() const;
    void setConceptUpdated(const QString &concept_updated);
    bool is_concept_updated_Set() const;
    bool is_concept_updated_Valid() const;

    QList<OAIConceptRelation> getDescendants() const;
    void setDescendants(const QList<OAIConceptRelation> &descendants);
    bool is_descendants_Set() const;
    bool is_descendants_Valid() const;

    qint32 getIsTimesTag() const;
    void setIsTimesTag(const qint32 &is_times_tag);
    bool is_is_times_tag_Set() const;
    bool is_is_times_tag_Valid() const;

    QList<OAIConcept_links_inner> getLinks() const;
    void setLinks(const QList<OAIConcept_links_inner> &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QList<OAIConcept_scope_notes_inner> getScopeNotes() const;
    void setScopeNotes(const QList<OAIConcept_scope_notes_inner> &scope_notes);
    bool is_scope_notes_Set() const;
    bool is_scope_notes_Valid() const;

    QString getSearchApiQuery() const;
    void setSearchApiQuery(const QString &search_api_query);
    bool is_search_api_query_Set() const;
    bool is_search_api_query_Valid() const;

    QList<OAIConcept_taxonomy_inner> getTaxonomy() const;
    void setTaxonomy(const QList<OAIConcept_taxonomy_inner> &taxonomy);
    bool is_taxonomy_Set() const;
    bool is_taxonomy_Valid() const;

    QString getVernacular() const;
    void setVernacular(const QString &vernacular);
    bool is_vernacular_Set() const;
    bool is_vernacular_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIConceptRelation> m_ancestors;
    bool m_ancestors_isSet;
    bool m_ancestors_isValid;

    OAIConcept_article_list m_article_list;
    bool m_article_list_isSet;
    bool m_article_list_isValid;

    QList<OAIConcept_combinations_inner> m_combinations;
    bool m_combinations_isSet;
    bool m_combinations_isValid;

    QString m_concept_created;
    bool m_concept_created_isSet;
    bool m_concept_created_isValid;

    qint32 m_concept_id;
    bool m_concept_id_isSet;
    bool m_concept_id_isValid;

    QString m_concept_name;
    bool m_concept_name_isSet;
    bool m_concept_name_isValid;

    QString m_concept_status;
    bool m_concept_status_isSet;
    bool m_concept_status_isValid;

    QString m_concept_type;
    bool m_concept_type_isSet;
    bool m_concept_type_isValid;

    QString m_concept_updated;
    bool m_concept_updated_isSet;
    bool m_concept_updated_isValid;

    QList<OAIConceptRelation> m_descendants;
    bool m_descendants_isSet;
    bool m_descendants_isValid;

    qint32 m_is_times_tag;
    bool m_is_times_tag_isSet;
    bool m_is_times_tag_isValid;

    QList<OAIConcept_links_inner> m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QList<OAIConcept_scope_notes_inner> m_scope_notes;
    bool m_scope_notes_isSet;
    bool m_scope_notes_isValid;

    QString m_search_api_query;
    bool m_search_api_query_isSet;
    bool m_search_api_query_isValid;

    QList<OAIConcept_taxonomy_inner> m_taxonomy;
    bool m_taxonomy_isSet;
    bool m_taxonomy_isValid;

    QString m_vernacular;
    bool m_vernacular_isSet;
    bool m_vernacular_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConcept)

#endif // OAIConcept_H
