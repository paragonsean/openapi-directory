/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConceptRelation.h
 *
 * 
 */

#ifndef OAIConceptRelation_H
#define OAIConceptRelation_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConceptRelation : public OAIObject {
public:
    OAIConceptRelation();
    OAIConceptRelation(QString json);
    ~OAIConceptRelation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConceptCreated() const;
    void setConceptCreated(const QString &concept_created);
    bool is_concept_created_Set() const;
    bool is_concept_created_Valid() const;

    qint32 getConceptId() const;
    void setConceptId(const qint32 &concept_id);
    bool is_concept_id_Set() const;
    bool is_concept_id_Valid() const;

    QString getConceptName() const;
    void setConceptName(const QString &concept_name);
    bool is_concept_name_Set() const;
    bool is_concept_name_Valid() const;

    QString getConceptStatus() const;
    void setConceptStatus(const QString &concept_status);
    bool is_concept_status_Set() const;
    bool is_concept_status_Valid() const;

    QString getConceptType() const;
    void setConceptType(const QString &concept_type);
    bool is_concept_type_Set() const;
    bool is_concept_type_Valid() const;

    QString getConceptUpdated() const;
    void setConceptUpdated(const QString &concept_updated);
    bool is_concept_updated_Set() const;
    bool is_concept_updated_Valid() const;

    qint32 getIsTimesTag() const;
    void setIsTimesTag(const qint32 &is_times_tag);
    bool is_is_times_tag_Set() const;
    bool is_is_times_tag_Valid() const;

    QString getVernacular() const;
    void setVernacular(const QString &vernacular);
    bool is_vernacular_Set() const;
    bool is_vernacular_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_concept_created;
    bool m_concept_created_isSet;
    bool m_concept_created_isValid;

    qint32 m_concept_id;
    bool m_concept_id_isSet;
    bool m_concept_id_isValid;

    QString m_concept_name;
    bool m_concept_name_isSet;
    bool m_concept_name_isValid;

    QString m_concept_status;
    bool m_concept_status_isSet;
    bool m_concept_status_isValid;

    QString m_concept_type;
    bool m_concept_type_isSet;
    bool m_concept_type_isValid;

    QString m_concept_updated;
    bool m_concept_updated_isSet;
    bool m_concept_updated_isValid;

    qint32 m_is_times_tag;
    bool m_is_times_tag_isSet;
    bool m_is_times_tag_isValid;

    QString m_vernacular;
    bool m_vernacular_isSet;
    bool m_vernacular_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConceptRelation)

#endif // OAIConceptRelation_H
