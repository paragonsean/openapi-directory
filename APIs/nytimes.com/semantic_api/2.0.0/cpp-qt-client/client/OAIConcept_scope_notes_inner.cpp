/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConcept_scope_notes_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConcept_scope_notes_inner::OAIConcept_scope_notes_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConcept_scope_notes_inner::OAIConcept_scope_notes_inner() {
    this->initializeModel();
}

OAIConcept_scope_notes_inner::~OAIConcept_scope_notes_inner() {}

void OAIConcept_scope_notes_inner::initializeModel() {

    m_scope_note_isSet = false;
    m_scope_note_isValid = false;

    m_scope_note_name_isSet = false;
    m_scope_note_name_isValid = false;

    m_scope_note_type_isSet = false;
    m_scope_note_type_isValid = false;
}

void OAIConcept_scope_notes_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConcept_scope_notes_inner::fromJsonObject(QJsonObject json) {

    m_scope_note_isValid = ::OpenAPI::fromJsonValue(m_scope_note, json[QString("scope_note")]);
    m_scope_note_isSet = !json[QString("scope_note")].isNull() && m_scope_note_isValid;

    m_scope_note_name_isValid = ::OpenAPI::fromJsonValue(m_scope_note_name, json[QString("scope_note_name")]);
    m_scope_note_name_isSet = !json[QString("scope_note_name")].isNull() && m_scope_note_name_isValid;

    m_scope_note_type_isValid = ::OpenAPI::fromJsonValue(m_scope_note_type, json[QString("scope_note_type")]);
    m_scope_note_type_isSet = !json[QString("scope_note_type")].isNull() && m_scope_note_type_isValid;
}

QString OAIConcept_scope_notes_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConcept_scope_notes_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_scope_note_isSet) {
        obj.insert(QString("scope_note"), ::OpenAPI::toJsonValue(m_scope_note));
    }
    if (m_scope_note_name_isSet) {
        obj.insert(QString("scope_note_name"), ::OpenAPI::toJsonValue(m_scope_note_name));
    }
    if (m_scope_note_type_isSet) {
        obj.insert(QString("scope_note_type"), ::OpenAPI::toJsonValue(m_scope_note_type));
    }
    return obj;
}

QString OAIConcept_scope_notes_inner::getScopeNote() const {
    return m_scope_note;
}
void OAIConcept_scope_notes_inner::setScopeNote(const QString &scope_note) {
    m_scope_note = scope_note;
    m_scope_note_isSet = true;
}

bool OAIConcept_scope_notes_inner::is_scope_note_Set() const{
    return m_scope_note_isSet;
}

bool OAIConcept_scope_notes_inner::is_scope_note_Valid() const{
    return m_scope_note_isValid;
}

QString OAIConcept_scope_notes_inner::getScopeNoteName() const {
    return m_scope_note_name;
}
void OAIConcept_scope_notes_inner::setScopeNoteName(const QString &scope_note_name) {
    m_scope_note_name = scope_note_name;
    m_scope_note_name_isSet = true;
}

bool OAIConcept_scope_notes_inner::is_scope_note_name_Set() const{
    return m_scope_note_name_isSet;
}

bool OAIConcept_scope_notes_inner::is_scope_note_name_Valid() const{
    return m_scope_note_name_isValid;
}

QString OAIConcept_scope_notes_inner::getScopeNoteType() const {
    return m_scope_note_type;
}
void OAIConcept_scope_notes_inner::setScopeNoteType(const QString &scope_note_type) {
    m_scope_note_type = scope_note_type;
    m_scope_note_type_isSet = true;
}

bool OAIConcept_scope_notes_inner::is_scope_note_type_Set() const{
    return m_scope_note_type_isSet;
}

bool OAIConcept_scope_notes_inner::is_scope_note_type_Valid() const{
    return m_scope_note_type_isValid;
}

bool OAIConcept_scope_notes_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scope_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_note_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_note_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConcept_scope_notes_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
