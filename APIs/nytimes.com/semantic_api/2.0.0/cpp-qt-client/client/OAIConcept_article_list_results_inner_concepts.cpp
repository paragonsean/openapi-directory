/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConcept_article_list_results_inner_concepts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConcept_article_list_results_inner_concepts::OAIConcept_article_list_results_inner_concepts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConcept_article_list_results_inner_concepts::OAIConcept_article_list_results_inner_concepts() {
    this->initializeModel();
}

OAIConcept_article_list_results_inner_concepts::~OAIConcept_article_list_results_inner_concepts() {}

void OAIConcept_article_list_results_inner_concepts::initializeModel() {

    m_nytd_des_isSet = false;
    m_nytd_des_isValid = false;

    m_nytd_org_isSet = false;
    m_nytd_org_isValid = false;

    m_nytd_per_isSet = false;
    m_nytd_per_isValid = false;
}

void OAIConcept_article_list_results_inner_concepts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConcept_article_list_results_inner_concepts::fromJsonObject(QJsonObject json) {

    m_nytd_des_isValid = ::OpenAPI::fromJsonValue(m_nytd_des, json[QString("nytd_des")]);
    m_nytd_des_isSet = !json[QString("nytd_des")].isNull() && m_nytd_des_isValid;

    m_nytd_org_isValid = ::OpenAPI::fromJsonValue(m_nytd_org, json[QString("nytd_org")]);
    m_nytd_org_isSet = !json[QString("nytd_org")].isNull() && m_nytd_org_isValid;

    m_nytd_per_isValid = ::OpenAPI::fromJsonValue(m_nytd_per, json[QString("nytd_per")]);
    m_nytd_per_isSet = !json[QString("nytd_per")].isNull() && m_nytd_per_isValid;
}

QString OAIConcept_article_list_results_inner_concepts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConcept_article_list_results_inner_concepts::asJsonObject() const {
    QJsonObject obj;
    if (m_nytd_des.size() > 0) {
        obj.insert(QString("nytd_des"), ::OpenAPI::toJsonValue(m_nytd_des));
    }
    if (m_nytd_org.size() > 0) {
        obj.insert(QString("nytd_org"), ::OpenAPI::toJsonValue(m_nytd_org));
    }
    if (m_nytd_per.size() > 0) {
        obj.insert(QString("nytd_per"), ::OpenAPI::toJsonValue(m_nytd_per));
    }
    return obj;
}

QList<QString> OAIConcept_article_list_results_inner_concepts::getNytdDes() const {
    return m_nytd_des;
}
void OAIConcept_article_list_results_inner_concepts::setNytdDes(const QList<QString> &nytd_des) {
    m_nytd_des = nytd_des;
    m_nytd_des_isSet = true;
}

bool OAIConcept_article_list_results_inner_concepts::is_nytd_des_Set() const{
    return m_nytd_des_isSet;
}

bool OAIConcept_article_list_results_inner_concepts::is_nytd_des_Valid() const{
    return m_nytd_des_isValid;
}

QList<QString> OAIConcept_article_list_results_inner_concepts::getNytdOrg() const {
    return m_nytd_org;
}
void OAIConcept_article_list_results_inner_concepts::setNytdOrg(const QList<QString> &nytd_org) {
    m_nytd_org = nytd_org;
    m_nytd_org_isSet = true;
}

bool OAIConcept_article_list_results_inner_concepts::is_nytd_org_Set() const{
    return m_nytd_org_isSet;
}

bool OAIConcept_article_list_results_inner_concepts::is_nytd_org_Valid() const{
    return m_nytd_org_isValid;
}

QList<QString> OAIConcept_article_list_results_inner_concepts::getNytdPer() const {
    return m_nytd_per;
}
void OAIConcept_article_list_results_inner_concepts::setNytdPer(const QList<QString> &nytd_per) {
    m_nytd_per = nytd_per;
    m_nytd_per_isSet = true;
}

bool OAIConcept_article_list_results_inner_concepts::is_nytd_per_Set() const{
    return m_nytd_per_isSet;
}

bool OAIConcept_article_list_results_inner_concepts::is_nytd_per_Valid() const{
    return m_nytd_per_isValid;
}

bool OAIConcept_article_list_results_inner_concepts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nytd_des.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nytd_org.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nytd_per.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConcept_article_list_results_inner_concepts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
