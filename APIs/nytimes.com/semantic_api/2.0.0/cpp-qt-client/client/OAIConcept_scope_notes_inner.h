/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConcept_scope_notes_inner.h
 *
 * 
 */

#ifndef OAIConcept_scope_notes_inner_H
#define OAIConcept_scope_notes_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConcept_scope_notes_inner : public OAIObject {
public:
    OAIConcept_scope_notes_inner();
    OAIConcept_scope_notes_inner(QString json);
    ~OAIConcept_scope_notes_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getScopeNote() const;
    void setScopeNote(const QString &scope_note);
    bool is_scope_note_Set() const;
    bool is_scope_note_Valid() const;

    QString getScopeNoteName() const;
    void setScopeNoteName(const QString &scope_note_name);
    bool is_scope_note_name_Set() const;
    bool is_scope_note_name_Valid() const;

    QString getScopeNoteType() const;
    void setScopeNoteType(const QString &scope_note_type);
    bool is_scope_note_type_Set() const;
    bool is_scope_note_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_scope_note;
    bool m_scope_note_isSet;
    bool m_scope_note_isValid;

    QString m_scope_note_name;
    bool m_scope_note_name_isSet;
    bool m_scope_note_name_isValid;

    QString m_scope_note_type;
    bool m_scope_note_type_isSet;
    bool m_scope_note_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConcept_scope_notes_inner)

#endif // OAIConcept_scope_notes_inner_H
