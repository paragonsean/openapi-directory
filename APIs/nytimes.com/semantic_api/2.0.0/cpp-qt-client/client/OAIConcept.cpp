/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConcept.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConcept::OAIConcept(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConcept::OAIConcept() {
    this->initializeModel();
}

OAIConcept::~OAIConcept() {}

void OAIConcept::initializeModel() {

    m_ancestors_isSet = false;
    m_ancestors_isValid = false;

    m_article_list_isSet = false;
    m_article_list_isValid = false;

    m_combinations_isSet = false;
    m_combinations_isValid = false;

    m_concept_created_isSet = false;
    m_concept_created_isValid = false;

    m_concept_id_isSet = false;
    m_concept_id_isValid = false;

    m_concept_name_isSet = false;
    m_concept_name_isValid = false;

    m_concept_status_isSet = false;
    m_concept_status_isValid = false;

    m_concept_type_isSet = false;
    m_concept_type_isValid = false;

    m_concept_updated_isSet = false;
    m_concept_updated_isValid = false;

    m_descendants_isSet = false;
    m_descendants_isValid = false;

    m_is_times_tag_isSet = false;
    m_is_times_tag_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_scope_notes_isSet = false;
    m_scope_notes_isValid = false;

    m_search_api_query_isSet = false;
    m_search_api_query_isValid = false;

    m_taxonomy_isSet = false;
    m_taxonomy_isValid = false;

    m_vernacular_isSet = false;
    m_vernacular_isValid = false;
}

void OAIConcept::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConcept::fromJsonObject(QJsonObject json) {

    m_ancestors_isValid = ::OpenAPI::fromJsonValue(m_ancestors, json[QString("ancestors")]);
    m_ancestors_isSet = !json[QString("ancestors")].isNull() && m_ancestors_isValid;

    m_article_list_isValid = ::OpenAPI::fromJsonValue(m_article_list, json[QString("article_list")]);
    m_article_list_isSet = !json[QString("article_list")].isNull() && m_article_list_isValid;

    m_combinations_isValid = ::OpenAPI::fromJsonValue(m_combinations, json[QString("combinations")]);
    m_combinations_isSet = !json[QString("combinations")].isNull() && m_combinations_isValid;

    m_concept_created_isValid = ::OpenAPI::fromJsonValue(m_concept_created, json[QString("concept_created")]);
    m_concept_created_isSet = !json[QString("concept_created")].isNull() && m_concept_created_isValid;

    m_concept_id_isValid = ::OpenAPI::fromJsonValue(m_concept_id, json[QString("concept_id")]);
    m_concept_id_isSet = !json[QString("concept_id")].isNull() && m_concept_id_isValid;

    m_concept_name_isValid = ::OpenAPI::fromJsonValue(m_concept_name, json[QString("concept_name")]);
    m_concept_name_isSet = !json[QString("concept_name")].isNull() && m_concept_name_isValid;

    m_concept_status_isValid = ::OpenAPI::fromJsonValue(m_concept_status, json[QString("concept_status")]);
    m_concept_status_isSet = !json[QString("concept_status")].isNull() && m_concept_status_isValid;

    m_concept_type_isValid = ::OpenAPI::fromJsonValue(m_concept_type, json[QString("concept_type")]);
    m_concept_type_isSet = !json[QString("concept_type")].isNull() && m_concept_type_isValid;

    m_concept_updated_isValid = ::OpenAPI::fromJsonValue(m_concept_updated, json[QString("concept_updated")]);
    m_concept_updated_isSet = !json[QString("concept_updated")].isNull() && m_concept_updated_isValid;

    m_descendants_isValid = ::OpenAPI::fromJsonValue(m_descendants, json[QString("descendants")]);
    m_descendants_isSet = !json[QString("descendants")].isNull() && m_descendants_isValid;

    m_is_times_tag_isValid = ::OpenAPI::fromJsonValue(m_is_times_tag, json[QString("is_times_tag")]);
    m_is_times_tag_isSet = !json[QString("is_times_tag")].isNull() && m_is_times_tag_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_scope_notes_isValid = ::OpenAPI::fromJsonValue(m_scope_notes, json[QString("scope_notes")]);
    m_scope_notes_isSet = !json[QString("scope_notes")].isNull() && m_scope_notes_isValid;

    m_search_api_query_isValid = ::OpenAPI::fromJsonValue(m_search_api_query, json[QString("search_api_query")]);
    m_search_api_query_isSet = !json[QString("search_api_query")].isNull() && m_search_api_query_isValid;

    m_taxonomy_isValid = ::OpenAPI::fromJsonValue(m_taxonomy, json[QString("taxonomy")]);
    m_taxonomy_isSet = !json[QString("taxonomy")].isNull() && m_taxonomy_isValid;

    m_vernacular_isValid = ::OpenAPI::fromJsonValue(m_vernacular, json[QString("vernacular")]);
    m_vernacular_isSet = !json[QString("vernacular")].isNull() && m_vernacular_isValid;
}

QString OAIConcept::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConcept::asJsonObject() const {
    QJsonObject obj;
    if (m_ancestors.size() > 0) {
        obj.insert(QString("ancestors"), ::OpenAPI::toJsonValue(m_ancestors));
    }
    if (m_article_list.isSet()) {
        obj.insert(QString("article_list"), ::OpenAPI::toJsonValue(m_article_list));
    }
    if (m_combinations.size() > 0) {
        obj.insert(QString("combinations"), ::OpenAPI::toJsonValue(m_combinations));
    }
    if (m_concept_created_isSet) {
        obj.insert(QString("concept_created"), ::OpenAPI::toJsonValue(m_concept_created));
    }
    if (m_concept_id_isSet) {
        obj.insert(QString("concept_id"), ::OpenAPI::toJsonValue(m_concept_id));
    }
    if (m_concept_name_isSet) {
        obj.insert(QString("concept_name"), ::OpenAPI::toJsonValue(m_concept_name));
    }
    if (m_concept_status_isSet) {
        obj.insert(QString("concept_status"), ::OpenAPI::toJsonValue(m_concept_status));
    }
    if (m_concept_type_isSet) {
        obj.insert(QString("concept_type"), ::OpenAPI::toJsonValue(m_concept_type));
    }
    if (m_concept_updated_isSet) {
        obj.insert(QString("concept_updated"), ::OpenAPI::toJsonValue(m_concept_updated));
    }
    if (m_descendants.size() > 0) {
        obj.insert(QString("descendants"), ::OpenAPI::toJsonValue(m_descendants));
    }
    if (m_is_times_tag_isSet) {
        obj.insert(QString("is_times_tag"), ::OpenAPI::toJsonValue(m_is_times_tag));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_scope_notes.size() > 0) {
        obj.insert(QString("scope_notes"), ::OpenAPI::toJsonValue(m_scope_notes));
    }
    if (m_search_api_query_isSet) {
        obj.insert(QString("search_api_query"), ::OpenAPI::toJsonValue(m_search_api_query));
    }
    if (m_taxonomy.size() > 0) {
        obj.insert(QString("taxonomy"), ::OpenAPI::toJsonValue(m_taxonomy));
    }
    if (m_vernacular_isSet) {
        obj.insert(QString("vernacular"), ::OpenAPI::toJsonValue(m_vernacular));
    }
    return obj;
}

QList<OAIConceptRelation> OAIConcept::getAncestors() const {
    return m_ancestors;
}
void OAIConcept::setAncestors(const QList<OAIConceptRelation> &ancestors) {
    m_ancestors = ancestors;
    m_ancestors_isSet = true;
}

bool OAIConcept::is_ancestors_Set() const{
    return m_ancestors_isSet;
}

bool OAIConcept::is_ancestors_Valid() const{
    return m_ancestors_isValid;
}

OAIConcept_article_list OAIConcept::getArticleList() const {
    return m_article_list;
}
void OAIConcept::setArticleList(const OAIConcept_article_list &article_list) {
    m_article_list = article_list;
    m_article_list_isSet = true;
}

bool OAIConcept::is_article_list_Set() const{
    return m_article_list_isSet;
}

bool OAIConcept::is_article_list_Valid() const{
    return m_article_list_isValid;
}

QList<OAIConcept_combinations_inner> OAIConcept::getCombinations() const {
    return m_combinations;
}
void OAIConcept::setCombinations(const QList<OAIConcept_combinations_inner> &combinations) {
    m_combinations = combinations;
    m_combinations_isSet = true;
}

bool OAIConcept::is_combinations_Set() const{
    return m_combinations_isSet;
}

bool OAIConcept::is_combinations_Valid() const{
    return m_combinations_isValid;
}

QString OAIConcept::getConceptCreated() const {
    return m_concept_created;
}
void OAIConcept::setConceptCreated(const QString &concept_created) {
    m_concept_created = concept_created;
    m_concept_created_isSet = true;
}

bool OAIConcept::is_concept_created_Set() const{
    return m_concept_created_isSet;
}

bool OAIConcept::is_concept_created_Valid() const{
    return m_concept_created_isValid;
}

qint32 OAIConcept::getConceptId() const {
    return m_concept_id;
}
void OAIConcept::setConceptId(const qint32 &concept_id) {
    m_concept_id = concept_id;
    m_concept_id_isSet = true;
}

bool OAIConcept::is_concept_id_Set() const{
    return m_concept_id_isSet;
}

bool OAIConcept::is_concept_id_Valid() const{
    return m_concept_id_isValid;
}

QString OAIConcept::getConceptName() const {
    return m_concept_name;
}
void OAIConcept::setConceptName(const QString &concept_name) {
    m_concept_name = concept_name;
    m_concept_name_isSet = true;
}

bool OAIConcept::is_concept_name_Set() const{
    return m_concept_name_isSet;
}

bool OAIConcept::is_concept_name_Valid() const{
    return m_concept_name_isValid;
}

QString OAIConcept::getConceptStatus() const {
    return m_concept_status;
}
void OAIConcept::setConceptStatus(const QString &concept_status) {
    m_concept_status = concept_status;
    m_concept_status_isSet = true;
}

bool OAIConcept::is_concept_status_Set() const{
    return m_concept_status_isSet;
}

bool OAIConcept::is_concept_status_Valid() const{
    return m_concept_status_isValid;
}

QString OAIConcept::getConceptType() const {
    return m_concept_type;
}
void OAIConcept::setConceptType(const QString &concept_type) {
    m_concept_type = concept_type;
    m_concept_type_isSet = true;
}

bool OAIConcept::is_concept_type_Set() const{
    return m_concept_type_isSet;
}

bool OAIConcept::is_concept_type_Valid() const{
    return m_concept_type_isValid;
}

QString OAIConcept::getConceptUpdated() const {
    return m_concept_updated;
}
void OAIConcept::setConceptUpdated(const QString &concept_updated) {
    m_concept_updated = concept_updated;
    m_concept_updated_isSet = true;
}

bool OAIConcept::is_concept_updated_Set() const{
    return m_concept_updated_isSet;
}

bool OAIConcept::is_concept_updated_Valid() const{
    return m_concept_updated_isValid;
}

QList<OAIConceptRelation> OAIConcept::getDescendants() const {
    return m_descendants;
}
void OAIConcept::setDescendants(const QList<OAIConceptRelation> &descendants) {
    m_descendants = descendants;
    m_descendants_isSet = true;
}

bool OAIConcept::is_descendants_Set() const{
    return m_descendants_isSet;
}

bool OAIConcept::is_descendants_Valid() const{
    return m_descendants_isValid;
}

qint32 OAIConcept::getIsTimesTag() const {
    return m_is_times_tag;
}
void OAIConcept::setIsTimesTag(const qint32 &is_times_tag) {
    m_is_times_tag = is_times_tag;
    m_is_times_tag_isSet = true;
}

bool OAIConcept::is_is_times_tag_Set() const{
    return m_is_times_tag_isSet;
}

bool OAIConcept::is_is_times_tag_Valid() const{
    return m_is_times_tag_isValid;
}

QList<OAIConcept_links_inner> OAIConcept::getLinks() const {
    return m_links;
}
void OAIConcept::setLinks(const QList<OAIConcept_links_inner> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIConcept::is_links_Set() const{
    return m_links_isSet;
}

bool OAIConcept::is_links_Valid() const{
    return m_links_isValid;
}

QList<OAIConcept_scope_notes_inner> OAIConcept::getScopeNotes() const {
    return m_scope_notes;
}
void OAIConcept::setScopeNotes(const QList<OAIConcept_scope_notes_inner> &scope_notes) {
    m_scope_notes = scope_notes;
    m_scope_notes_isSet = true;
}

bool OAIConcept::is_scope_notes_Set() const{
    return m_scope_notes_isSet;
}

bool OAIConcept::is_scope_notes_Valid() const{
    return m_scope_notes_isValid;
}

QString OAIConcept::getSearchApiQuery() const {
    return m_search_api_query;
}
void OAIConcept::setSearchApiQuery(const QString &search_api_query) {
    m_search_api_query = search_api_query;
    m_search_api_query_isSet = true;
}

bool OAIConcept::is_search_api_query_Set() const{
    return m_search_api_query_isSet;
}

bool OAIConcept::is_search_api_query_Valid() const{
    return m_search_api_query_isValid;
}

QList<OAIConcept_taxonomy_inner> OAIConcept::getTaxonomy() const {
    return m_taxonomy;
}
void OAIConcept::setTaxonomy(const QList<OAIConcept_taxonomy_inner> &taxonomy) {
    m_taxonomy = taxonomy;
    m_taxonomy_isSet = true;
}

bool OAIConcept::is_taxonomy_Set() const{
    return m_taxonomy_isSet;
}

bool OAIConcept::is_taxonomy_Valid() const{
    return m_taxonomy_isValid;
}

QString OAIConcept::getVernacular() const {
    return m_vernacular;
}
void OAIConcept::setVernacular(const QString &vernacular) {
    m_vernacular = vernacular;
    m_vernacular_isSet = true;
}

bool OAIConcept::is_vernacular_Set() const{
    return m_vernacular_isSet;
}

bool OAIConcept::is_vernacular_Valid() const{
    return m_vernacular_isValid;
}

bool OAIConcept::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancestors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_article_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_combinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_descendants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_times_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_api_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxonomy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vernacular_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConcept::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
