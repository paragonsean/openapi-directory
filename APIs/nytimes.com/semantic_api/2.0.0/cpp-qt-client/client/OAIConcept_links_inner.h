/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConcept_links_inner.h
 *
 * 
 */

#ifndef OAIConcept_links_inner_H
#define OAIConcept_links_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConcept_links_inner : public OAIObject {
public:
    OAIConcept_links_inner();
    OAIConcept_links_inner(QString json);
    ~OAIConcept_links_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getConceptId() const;
    void setConceptId(const qint32 &concept_id);
    bool is_concept_id_Set() const;
    bool is_concept_id_Valid() const;

    QString getConceptName() const;
    void setConceptName(const QString &concept_name);
    bool is_concept_name_Set() const;
    bool is_concept_name_Valid() const;

    QString getConceptStatus() const;
    void setConceptStatus(const QString &concept_status);
    bool is_concept_status_Set() const;
    bool is_concept_status_Valid() const;

    QString getConceptType() const;
    void setConceptType(const QString &concept_type);
    bool is_concept_type_Set() const;
    bool is_concept_type_Valid() const;

    qint32 getIsTimesTag() const;
    void setIsTimesTag(const qint32 &is_times_tag);
    bool is_is_times_tag_Set() const;
    bool is_is_times_tag_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    qint32 getLinkId() const;
    void setLinkId(const qint32 &link_id);
    bool is_link_id_Set() const;
    bool is_link_id_Valid() const;

    QString getLinkType() const;
    void setLinkType(const QString &link_type);
    bool is_link_type_Set() const;
    bool is_link_type_Valid() const;

    QString getMappingType() const;
    void setMappingType(const QString &mapping_type);
    bool is_mapping_type_Set() const;
    bool is_mapping_type_Valid() const;

    QString getRelation() const;
    void setRelation(const QString &relation);
    bool is_relation_Set() const;
    bool is_relation_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_concept_id;
    bool m_concept_id_isSet;
    bool m_concept_id_isValid;

    QString m_concept_name;
    bool m_concept_name_isSet;
    bool m_concept_name_isValid;

    QString m_concept_status;
    bool m_concept_status_isSet;
    bool m_concept_status_isValid;

    QString m_concept_type;
    bool m_concept_type_isSet;
    bool m_concept_type_isValid;

    qint32 m_is_times_tag;
    bool m_is_times_tag_isSet;
    bool m_is_times_tag_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    qint32 m_link_id;
    bool m_link_id_isSet;
    bool m_link_id_isValid;

    QString m_link_type;
    bool m_link_type_isSet;
    bool m_link_type_isValid;

    QString m_mapping_type;
    bool m_mapping_type_isSet;
    bool m_mapping_type_isValid;

    QString m_relation;
    bool m_relation_isSet;
    bool m_relation_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConcept_links_inner)

#endif // OAIConcept_links_inner_H
