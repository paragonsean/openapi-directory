/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_search_json_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_search_json_get_200_response::OAI_search_json_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_search_json_get_200_response::OAI_search_json_get_200_response() {
    this->initializeModel();
}

OAI_search_json_get_200_response::~OAI_search_json_get_200_response() {}

void OAI_search_json_get_200_response::initializeModel() {

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_num_results_isSet = false;
    m_num_results_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAI_search_json_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_search_json_get_200_response::fromJsonObject(QJsonObject json) {

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_num_results_isValid = ::OpenAPI::fromJsonValue(m_num_results, json[QString("num_results")]);
    m_num_results_isSet = !json[QString("num_results")].isNull() && m_num_results_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAI_search_json_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_search_json_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_num_results_isSet) {
        obj.insert(QString("num_results"), ::OpenAPI::toJsonValue(m_num_results));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAI_search_json_get_200_response::getCopyright() const {
    return m_copyright;
}
void OAI_search_json_get_200_response::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAI_search_json_get_200_response::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAI_search_json_get_200_response::is_copyright_Valid() const{
    return m_copyright_isValid;
}

qint32 OAI_search_json_get_200_response::getNumResults() const {
    return m_num_results;
}
void OAI_search_json_get_200_response::setNumResults(const qint32 &num_results) {
    m_num_results = num_results;
    m_num_results_isSet = true;
}

bool OAI_search_json_get_200_response::is_num_results_Set() const{
    return m_num_results_isSet;
}

bool OAI_search_json_get_200_response::is_num_results_Valid() const{
    return m_num_results_isValid;
}

QList<OAIConceptRelation> OAI_search_json_get_200_response::getResults() const {
    return m_results;
}
void OAI_search_json_get_200_response::setResults(const QList<OAIConceptRelation> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAI_search_json_get_200_response::is_results_Set() const{
    return m_results_isSet;
}

bool OAI_search_json_get_200_response::is_results_Valid() const{
    return m_results_isValid;
}

QString OAI_search_json_get_200_response::getStatus() const {
    return m_status;
}
void OAI_search_json_get_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAI_search_json_get_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAI_search_json_get_200_response::is_status_Valid() const{
    return m_status_isValid;
}

bool OAI_search_json_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_search_json_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
