/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConceptRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConceptRelation::OAIConceptRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConceptRelation::OAIConceptRelation() {
    this->initializeModel();
}

OAIConceptRelation::~OAIConceptRelation() {}

void OAIConceptRelation::initializeModel() {

    m_concept_created_isSet = false;
    m_concept_created_isValid = false;

    m_concept_id_isSet = false;
    m_concept_id_isValid = false;

    m_concept_name_isSet = false;
    m_concept_name_isValid = false;

    m_concept_status_isSet = false;
    m_concept_status_isValid = false;

    m_concept_type_isSet = false;
    m_concept_type_isValid = false;

    m_concept_updated_isSet = false;
    m_concept_updated_isValid = false;

    m_is_times_tag_isSet = false;
    m_is_times_tag_isValid = false;

    m_vernacular_isSet = false;
    m_vernacular_isValid = false;
}

void OAIConceptRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConceptRelation::fromJsonObject(QJsonObject json) {

    m_concept_created_isValid = ::OpenAPI::fromJsonValue(m_concept_created, json[QString("concept_created")]);
    m_concept_created_isSet = !json[QString("concept_created")].isNull() && m_concept_created_isValid;

    m_concept_id_isValid = ::OpenAPI::fromJsonValue(m_concept_id, json[QString("concept_id")]);
    m_concept_id_isSet = !json[QString("concept_id")].isNull() && m_concept_id_isValid;

    m_concept_name_isValid = ::OpenAPI::fromJsonValue(m_concept_name, json[QString("concept_name")]);
    m_concept_name_isSet = !json[QString("concept_name")].isNull() && m_concept_name_isValid;

    m_concept_status_isValid = ::OpenAPI::fromJsonValue(m_concept_status, json[QString("concept_status")]);
    m_concept_status_isSet = !json[QString("concept_status")].isNull() && m_concept_status_isValid;

    m_concept_type_isValid = ::OpenAPI::fromJsonValue(m_concept_type, json[QString("concept_type")]);
    m_concept_type_isSet = !json[QString("concept_type")].isNull() && m_concept_type_isValid;

    m_concept_updated_isValid = ::OpenAPI::fromJsonValue(m_concept_updated, json[QString("concept_updated")]);
    m_concept_updated_isSet = !json[QString("concept_updated")].isNull() && m_concept_updated_isValid;

    m_is_times_tag_isValid = ::OpenAPI::fromJsonValue(m_is_times_tag, json[QString("is_times_tag")]);
    m_is_times_tag_isSet = !json[QString("is_times_tag")].isNull() && m_is_times_tag_isValid;

    m_vernacular_isValid = ::OpenAPI::fromJsonValue(m_vernacular, json[QString("vernacular")]);
    m_vernacular_isSet = !json[QString("vernacular")].isNull() && m_vernacular_isValid;
}

QString OAIConceptRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConceptRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_concept_created_isSet) {
        obj.insert(QString("concept_created"), ::OpenAPI::toJsonValue(m_concept_created));
    }
    if (m_concept_id_isSet) {
        obj.insert(QString("concept_id"), ::OpenAPI::toJsonValue(m_concept_id));
    }
    if (m_concept_name_isSet) {
        obj.insert(QString("concept_name"), ::OpenAPI::toJsonValue(m_concept_name));
    }
    if (m_concept_status_isSet) {
        obj.insert(QString("concept_status"), ::OpenAPI::toJsonValue(m_concept_status));
    }
    if (m_concept_type_isSet) {
        obj.insert(QString("concept_type"), ::OpenAPI::toJsonValue(m_concept_type));
    }
    if (m_concept_updated_isSet) {
        obj.insert(QString("concept_updated"), ::OpenAPI::toJsonValue(m_concept_updated));
    }
    if (m_is_times_tag_isSet) {
        obj.insert(QString("is_times_tag"), ::OpenAPI::toJsonValue(m_is_times_tag));
    }
    if (m_vernacular_isSet) {
        obj.insert(QString("vernacular"), ::OpenAPI::toJsonValue(m_vernacular));
    }
    return obj;
}

QString OAIConceptRelation::getConceptCreated() const {
    return m_concept_created;
}
void OAIConceptRelation::setConceptCreated(const QString &concept_created) {
    m_concept_created = concept_created;
    m_concept_created_isSet = true;
}

bool OAIConceptRelation::is_concept_created_Set() const{
    return m_concept_created_isSet;
}

bool OAIConceptRelation::is_concept_created_Valid() const{
    return m_concept_created_isValid;
}

qint32 OAIConceptRelation::getConceptId() const {
    return m_concept_id;
}
void OAIConceptRelation::setConceptId(const qint32 &concept_id) {
    m_concept_id = concept_id;
    m_concept_id_isSet = true;
}

bool OAIConceptRelation::is_concept_id_Set() const{
    return m_concept_id_isSet;
}

bool OAIConceptRelation::is_concept_id_Valid() const{
    return m_concept_id_isValid;
}

QString OAIConceptRelation::getConceptName() const {
    return m_concept_name;
}
void OAIConceptRelation::setConceptName(const QString &concept_name) {
    m_concept_name = concept_name;
    m_concept_name_isSet = true;
}

bool OAIConceptRelation::is_concept_name_Set() const{
    return m_concept_name_isSet;
}

bool OAIConceptRelation::is_concept_name_Valid() const{
    return m_concept_name_isValid;
}

QString OAIConceptRelation::getConceptStatus() const {
    return m_concept_status;
}
void OAIConceptRelation::setConceptStatus(const QString &concept_status) {
    m_concept_status = concept_status;
    m_concept_status_isSet = true;
}

bool OAIConceptRelation::is_concept_status_Set() const{
    return m_concept_status_isSet;
}

bool OAIConceptRelation::is_concept_status_Valid() const{
    return m_concept_status_isValid;
}

QString OAIConceptRelation::getConceptType() const {
    return m_concept_type;
}
void OAIConceptRelation::setConceptType(const QString &concept_type) {
    m_concept_type = concept_type;
    m_concept_type_isSet = true;
}

bool OAIConceptRelation::is_concept_type_Set() const{
    return m_concept_type_isSet;
}

bool OAIConceptRelation::is_concept_type_Valid() const{
    return m_concept_type_isValid;
}

QString OAIConceptRelation::getConceptUpdated() const {
    return m_concept_updated;
}
void OAIConceptRelation::setConceptUpdated(const QString &concept_updated) {
    m_concept_updated = concept_updated;
    m_concept_updated_isSet = true;
}

bool OAIConceptRelation::is_concept_updated_Set() const{
    return m_concept_updated_isSet;
}

bool OAIConceptRelation::is_concept_updated_Valid() const{
    return m_concept_updated_isValid;
}

qint32 OAIConceptRelation::getIsTimesTag() const {
    return m_is_times_tag;
}
void OAIConceptRelation::setIsTimesTag(const qint32 &is_times_tag) {
    m_is_times_tag = is_times_tag;
    m_is_times_tag_isSet = true;
}

bool OAIConceptRelation::is_is_times_tag_Set() const{
    return m_is_times_tag_isSet;
}

bool OAIConceptRelation::is_is_times_tag_Valid() const{
    return m_is_times_tag_isValid;
}

QString OAIConceptRelation::getVernacular() const {
    return m_vernacular;
}
void OAIConceptRelation::setVernacular(const QString &vernacular) {
    m_vernacular = vernacular;
    m_vernacular_isSet = true;
}

bool OAIConceptRelation::is_vernacular_Set() const{
    return m_vernacular_isSet;
}

bool OAIConceptRelation::is_vernacular_Valid() const{
    return m_vernacular_isValid;
}

bool OAIConceptRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concept_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_times_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vernacular_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConceptRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
