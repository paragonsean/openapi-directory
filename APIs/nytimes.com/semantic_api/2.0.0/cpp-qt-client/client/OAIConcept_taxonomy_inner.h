/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConcept_taxonomy_inner.h
 *
 * 
 */

#ifndef OAIConcept_taxonomy_inner_H
#define OAIConcept_taxonomy_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConcept_taxonomy_inner : public OAIObject {
public:
    OAIConcept_taxonomy_inner();
    OAIConcept_taxonomy_inner(QString json);
    ~OAIConcept_taxonomy_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getSourceConceptId() const;
    void setSourceConceptId(const qint32 &source_concept_id);
    bool is_source_concept_id_Set() const;
    bool is_source_concept_id_Valid() const;

    QString getSourceConceptName() const;
    void setSourceConceptName(const QString &source_concept_name);
    bool is_source_concept_name_Set() const;
    bool is_source_concept_name_Valid() const;

    QString getSourceConceptType() const;
    void setSourceConceptType(const QString &source_concept_type);
    bool is_source_concept_type_Set() const;
    bool is_source_concept_type_Valid() const;

    QString getSourceConceptVernacular() const;
    void setSourceConceptVernacular(const QString &source_concept_vernacular);
    bool is_source_concept_vernacular_Set() const;
    bool is_source_concept_vernacular_Valid() const;

    qint32 getTargetConceptId() const;
    void setTargetConceptId(const qint32 &target_concept_id);
    bool is_target_concept_id_Set() const;
    bool is_target_concept_id_Valid() const;

    QString getTargetConceptName() const;
    void setTargetConceptName(const QString &target_concept_name);
    bool is_target_concept_name_Set() const;
    bool is_target_concept_name_Valid() const;

    QString getTargetConceptType() const;
    void setTargetConceptType(const QString &target_concept_type);
    bool is_target_concept_type_Set() const;
    bool is_target_concept_type_Valid() const;

    QString getTargetConceptVernacular() const;
    void setTargetConceptVernacular(const QString &target_concept_vernacular);
    bool is_target_concept_vernacular_Set() const;
    bool is_target_concept_vernacular_Valid() const;

    QString getTaxonomicRelation() const;
    void setTaxonomicRelation(const QString &taxonomic_relation);
    bool is_taxonomic_relation_Set() const;
    bool is_taxonomic_relation_Valid() const;

    QString getTaxonomicVerificationStatus() const;
    void setTaxonomicVerificationStatus(const QString &taxonomic_verification_status);
    bool is_taxonomic_verification_status_Set() const;
    bool is_taxonomic_verification_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_source_concept_id;
    bool m_source_concept_id_isSet;
    bool m_source_concept_id_isValid;

    QString m_source_concept_name;
    bool m_source_concept_name_isSet;
    bool m_source_concept_name_isValid;

    QString m_source_concept_type;
    bool m_source_concept_type_isSet;
    bool m_source_concept_type_isValid;

    QString m_source_concept_vernacular;
    bool m_source_concept_vernacular_isSet;
    bool m_source_concept_vernacular_isValid;

    qint32 m_target_concept_id;
    bool m_target_concept_id_isSet;
    bool m_target_concept_id_isValid;

    QString m_target_concept_name;
    bool m_target_concept_name_isSet;
    bool m_target_concept_name_isValid;

    QString m_target_concept_type;
    bool m_target_concept_type_isSet;
    bool m_target_concept_type_isValid;

    QString m_target_concept_vernacular;
    bool m_target_concept_vernacular_isSet;
    bool m_target_concept_vernacular_isValid;

    QString m_taxonomic_relation;
    bool m_taxonomic_relation_isSet;
    bool m_taxonomic_relation_isValid;

    QString m_taxonomic_verification_status;
    bool m_taxonomic_verification_status_isSet;
    bool m_taxonomic_verification_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConcept_taxonomy_inner)

#endif // OAIConcept_taxonomy_inner_H
