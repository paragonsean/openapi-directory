/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_name__concept_type___specific_concept__json_get_200_response.h
 *
 * 
 */

#ifndef OAI_name__concept_type___specific_concept__json_get_200_response_H
#define OAI_name__concept_type___specific_concept__json_get_200_response_H

#include <QJsonObject>

#include "OAIConcept.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConcept;

class OAI_name__concept_type___specific_concept__json_get_200_response : public OAIObject {
public:
    OAI_name__concept_type___specific_concept__json_get_200_response();
    OAI_name__concept_type___specific_concept__json_get_200_response(QString json);
    ~OAI_name__concept_type___specific_concept__json_get_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCopyright() const;
    void setCopyright(const QString &copyright);
    bool is_copyright_Set() const;
    bool is_copyright_Valid() const;

    qint32 getNumResults() const;
    void setNumResults(const qint32 &num_results);
    bool is_num_results_Set() const;
    bool is_num_results_Valid() const;

    QList<OAIConcept> getResults() const;
    void setResults(const QList<OAIConcept> &results);
    bool is_results_Set() const;
    bool is_results_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_copyright;
    bool m_copyright_isSet;
    bool m_copyright_isValid;

    qint32 m_num_results;
    bool m_num_results_isSet;
    bool m_num_results_isValid;

    QList<OAIConcept> m_results;
    bool m_results_isSet;
    bool m_results_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_name__concept_type___specific_concept__json_get_200_response)

#endif // OAI_name__concept_type___specific_concept__json_get_200_response_H
