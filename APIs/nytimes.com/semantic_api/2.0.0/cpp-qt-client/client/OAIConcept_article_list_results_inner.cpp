/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConcept_article_list_results_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConcept_article_list_results_inner::OAIConcept_article_list_results_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConcept_article_list_results_inner::OAIConcept_article_list_results_inner() {
    this->initializeModel();
}

OAIConcept_article_list_results_inner::~OAIConcept_article_list_results_inner() {}

void OAIConcept_article_list_results_inner::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_byline_isSet = false;
    m_byline_isValid = false;

    m_concepts_isSet = false;
    m_concepts_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_of_material_isSet = false;
    m_type_of_material_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIConcept_article_list_results_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConcept_article_list_results_inner::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_byline_isValid = ::OpenAPI::fromJsonValue(m_byline, json[QString("byline")]);
    m_byline_isSet = !json[QString("byline")].isNull() && m_byline_isValid;

    m_concepts_isValid = ::OpenAPI::fromJsonValue(m_concepts, json[QString("concepts")]);
    m_concepts_isSet = !json[QString("concepts")].isNull() && m_concepts_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("document_type")]);
    m_document_type_isSet = !json[QString("document_type")].isNull() && m_document_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_of_material_isValid = ::OpenAPI::fromJsonValue(m_type_of_material, json[QString("type_of_material")]);
    m_type_of_material_isSet = !json[QString("type_of_material")].isNull() && m_type_of_material_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIConcept_article_list_results_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConcept_article_list_results_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_byline_isSet) {
        obj.insert(QString("byline"), ::OpenAPI::toJsonValue(m_byline));
    }
    if (m_concepts.isSet()) {
        obj.insert(QString("concepts"), ::OpenAPI::toJsonValue(m_concepts));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("document_type"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_of_material_isSet) {
        obj.insert(QString("type_of_material"), ::OpenAPI::toJsonValue(m_type_of_material));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIConcept_article_list_results_inner::getBody() const {
    return m_body;
}
void OAIConcept_article_list_results_inner::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIConcept_article_list_results_inner::is_body_Set() const{
    return m_body_isSet;
}

bool OAIConcept_article_list_results_inner::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIConcept_article_list_results_inner::getByline() const {
    return m_byline;
}
void OAIConcept_article_list_results_inner::setByline(const QString &byline) {
    m_byline = byline;
    m_byline_isSet = true;
}

bool OAIConcept_article_list_results_inner::is_byline_Set() const{
    return m_byline_isSet;
}

bool OAIConcept_article_list_results_inner::is_byline_Valid() const{
    return m_byline_isValid;
}

OAIConcept_article_list_results_inner_concepts OAIConcept_article_list_results_inner::getConcepts() const {
    return m_concepts;
}
void OAIConcept_article_list_results_inner::setConcepts(const OAIConcept_article_list_results_inner_concepts &concepts) {
    m_concepts = concepts;
    m_concepts_isSet = true;
}

bool OAIConcept_article_list_results_inner::is_concepts_Set() const{
    return m_concepts_isSet;
}

bool OAIConcept_article_list_results_inner::is_concepts_Valid() const{
    return m_concepts_isValid;
}

QString OAIConcept_article_list_results_inner::getDate() const {
    return m_date;
}
void OAIConcept_article_list_results_inner::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIConcept_article_list_results_inner::is_date_Set() const{
    return m_date_isSet;
}

bool OAIConcept_article_list_results_inner::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIConcept_article_list_results_inner::getDocumentType() const {
    return m_document_type;
}
void OAIConcept_article_list_results_inner::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIConcept_article_list_results_inner::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIConcept_article_list_results_inner::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAIConcept_article_list_results_inner::getTitle() const {
    return m_title;
}
void OAIConcept_article_list_results_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIConcept_article_list_results_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIConcept_article_list_results_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIConcept_article_list_results_inner::getTypeOfMaterial() const {
    return m_type_of_material;
}
void OAIConcept_article_list_results_inner::setTypeOfMaterial(const QString &type_of_material) {
    m_type_of_material = type_of_material;
    m_type_of_material_isSet = true;
}

bool OAIConcept_article_list_results_inner::is_type_of_material_Set() const{
    return m_type_of_material_isSet;
}

bool OAIConcept_article_list_results_inner::is_type_of_material_Valid() const{
    return m_type_of_material_isValid;
}

QString OAIConcept_article_list_results_inner::getUrl() const {
    return m_url;
}
void OAIConcept_article_list_results_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIConcept_article_list_results_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIConcept_article_list_results_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIConcept_article_list_results_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_byline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concepts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConcept_article_list_results_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
