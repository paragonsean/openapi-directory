/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConcept_combinations_inner.h
 *
 * 
 */

#ifndef OAIConcept_combinations_inner_H
#define OAIConcept_combinations_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConcept_combinations_inner : public OAIObject {
public:
    OAIConcept_combinations_inner();
    OAIConcept_combinations_inner(QString json);
    ~OAIConcept_combinations_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCombinationNote() const;
    void setCombinationNote(const QString &combination_note);
    bool is_combination_note_Set() const;
    bool is_combination_note_Valid() const;

    qint32 getCombinationSourceConceptId() const;
    void setCombinationSourceConceptId(const qint32 &combination_source_concept_id);
    bool is_combination_source_concept_id_Set() const;
    bool is_combination_source_concept_id_Valid() const;

    QString getCombinationSourceConceptName() const;
    void setCombinationSourceConceptName(const QString &combination_source_concept_name);
    bool is_combination_source_concept_name_Set() const;
    bool is_combination_source_concept_name_Valid() const;

    QString getCombinationSourceConceptType() const;
    void setCombinationSourceConceptType(const QString &combination_source_concept_type);
    bool is_combination_source_concept_type_Set() const;
    bool is_combination_source_concept_type_Valid() const;

    qint32 getCombinationTargetConceptId() const;
    void setCombinationTargetConceptId(const qint32 &combination_target_concept_id);
    bool is_combination_target_concept_id_Set() const;
    bool is_combination_target_concept_id_Valid() const;

    QString getCombinationTargetConceptName() const;
    void setCombinationTargetConceptName(const QString &combination_target_concept_name);
    bool is_combination_target_concept_name_Set() const;
    bool is_combination_target_concept_name_Valid() const;

    QString getCombinationTargetConceptType() const;
    void setCombinationTargetConceptType(const QString &combination_target_concept_type);
    bool is_combination_target_concept_type_Set() const;
    bool is_combination_target_concept_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_combination_note;
    bool m_combination_note_isSet;
    bool m_combination_note_isValid;

    qint32 m_combination_source_concept_id;
    bool m_combination_source_concept_id_isSet;
    bool m_combination_source_concept_id_isValid;

    QString m_combination_source_concept_name;
    bool m_combination_source_concept_name_isSet;
    bool m_combination_source_concept_name_isValid;

    QString m_combination_source_concept_type;
    bool m_combination_source_concept_type_isSet;
    bool m_combination_source_concept_type_isValid;

    qint32 m_combination_target_concept_id;
    bool m_combination_target_concept_id_isSet;
    bool m_combination_target_concept_id_isValid;

    QString m_combination_target_concept_name;
    bool m_combination_target_concept_name_isSet;
    bool m_combination_target_concept_name_isValid;

    QString m_combination_target_concept_type;
    bool m_combination_target_concept_type_isSet;
    bool m_combination_target_concept_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConcept_combinations_inner)

#endif // OAIConcept_combinations_inner_H
