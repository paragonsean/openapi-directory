/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConceptCombinationsInner model module.
 * @module model/ConceptCombinationsInner
 * @version 2.0.0
 */
class ConceptCombinationsInner {
    /**
     * Constructs a new <code>ConceptCombinationsInner</code>.
     * @alias module:model/ConceptCombinationsInner
     */
    constructor() { 
        
        ConceptCombinationsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConceptCombinationsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConceptCombinationsInner} obj Optional instance to populate.
     * @return {module:model/ConceptCombinationsInner} The populated <code>ConceptCombinationsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConceptCombinationsInner();

            if (data.hasOwnProperty('combination_note')) {
                obj['combination_note'] = ApiClient.convertToType(data['combination_note'], 'String');
            }
            if (data.hasOwnProperty('combination_source_concept_id')) {
                obj['combination_source_concept_id'] = ApiClient.convertToType(data['combination_source_concept_id'], 'Number');
            }
            if (data.hasOwnProperty('combination_source_concept_name')) {
                obj['combination_source_concept_name'] = ApiClient.convertToType(data['combination_source_concept_name'], 'String');
            }
            if (data.hasOwnProperty('combination_source_concept_type')) {
                obj['combination_source_concept_type'] = ApiClient.convertToType(data['combination_source_concept_type'], 'String');
            }
            if (data.hasOwnProperty('combination_target_concept_id')) {
                obj['combination_target_concept_id'] = ApiClient.convertToType(data['combination_target_concept_id'], 'Number');
            }
            if (data.hasOwnProperty('combination_target_concept_name')) {
                obj['combination_target_concept_name'] = ApiClient.convertToType(data['combination_target_concept_name'], 'String');
            }
            if (data.hasOwnProperty('combination_target_concept_type')) {
                obj['combination_target_concept_type'] = ApiClient.convertToType(data['combination_target_concept_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConceptCombinationsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConceptCombinationsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['combination_note'] && !(typeof data['combination_note'] === 'string' || data['combination_note'] instanceof String)) {
            throw new Error("Expected the field `combination_note` to be a primitive type in the JSON string but got " + data['combination_note']);
        }
        // ensure the json data is a string
        if (data['combination_source_concept_name'] && !(typeof data['combination_source_concept_name'] === 'string' || data['combination_source_concept_name'] instanceof String)) {
            throw new Error("Expected the field `combination_source_concept_name` to be a primitive type in the JSON string but got " + data['combination_source_concept_name']);
        }
        // ensure the json data is a string
        if (data['combination_source_concept_type'] && !(typeof data['combination_source_concept_type'] === 'string' || data['combination_source_concept_type'] instanceof String)) {
            throw new Error("Expected the field `combination_source_concept_type` to be a primitive type in the JSON string but got " + data['combination_source_concept_type']);
        }
        // ensure the json data is a string
        if (data['combination_target_concept_name'] && !(typeof data['combination_target_concept_name'] === 'string' || data['combination_target_concept_name'] instanceof String)) {
            throw new Error("Expected the field `combination_target_concept_name` to be a primitive type in the JSON string but got " + data['combination_target_concept_name']);
        }
        // ensure the json data is a string
        if (data['combination_target_concept_type'] && !(typeof data['combination_target_concept_type'] === 'string' || data['combination_target_concept_type'] instanceof String)) {
            throw new Error("Expected the field `combination_target_concept_type` to be a primitive type in the JSON string but got " + data['combination_target_concept_type']);
        }

        return true;
    }


}



/**
 * @member {String} combination_note
 */
ConceptCombinationsInner.prototype['combination_note'] = undefined;

/**
 * @member {Number} combination_source_concept_id
 */
ConceptCombinationsInner.prototype['combination_source_concept_id'] = undefined;

/**
 * @member {String} combination_source_concept_name
 */
ConceptCombinationsInner.prototype['combination_source_concept_name'] = undefined;

/**
 * @member {String} combination_source_concept_type
 */
ConceptCombinationsInner.prototype['combination_source_concept_type'] = undefined;

/**
 * @member {Number} combination_target_concept_id
 */
ConceptCombinationsInner.prototype['combination_target_concept_id'] = undefined;

/**
 * @member {String} combination_target_concept_name
 */
ConceptCombinationsInner.prototype['combination_target_concept_name'] = undefined;

/**
 * @member {String} combination_target_concept_type
 */
ConceptCombinationsInner.prototype['combination_target_concept_type'] = undefined;






export default ConceptCombinationsInner;

