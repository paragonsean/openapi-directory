/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NameConceptTypeSpecificConceptJsonGet200Response from '../model/NameConceptTypeSpecificConceptJsonGet200Response';
import SearchJsonGet200Response from '../model/SearchJsonGet200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 2.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the nameConceptTypeSpecificConceptJsonGet operation.
     * @callback module:api/DefaultApi~nameConceptTypeSpecificConceptJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NameConceptTypeSpecificConceptJsonGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} conceptType The type of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined as a name-value pair, as in \"concept_type=[nytd_geo|nytd_per|nytd_org|nytd_des]\". 
     * @param {String} specificConcept The name of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined in the URI path, as the element immediately preceding \".json\" like with \"Baseball.json\". 
     * @param {String} query Precedes the search term string. Used in a Search Query. Except for &lt;specific_concept_name&gt;, Search Query will take the required parameters listed above (&lt;concept_type&gt;, &lt;concept_uri&gt;, &lt;article_uri&gt;) as an optional_parameter in addition to the query=&lt;query_term&gt;.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [fields] \"all\" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query  Optional fields are returned in result_set. They are briefly explained here:  pages: A list of topic pages associated with a specific concept. ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol. links: A list of links from this concept to external data resources. taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts. combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts. geocodes: For geographic concepts, the full GIS record from geonames. article_list: A list of up to 10 articles associated with this concept. scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article. search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept. 
     * @param {module:api/DefaultApi~nameConceptTypeSpecificConceptJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NameConceptTypeSpecificConceptJsonGet200Response}
     */
    nameConceptTypeSpecificConceptJsonGet(conceptType, specificConcept, query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conceptType' is set
      if (conceptType === undefined || conceptType === null) {
        throw new Error("Missing the required parameter 'conceptType' when calling nameConceptTypeSpecificConceptJsonGet");
      }
      // verify the required parameter 'specificConcept' is set
      if (specificConcept === undefined || specificConcept === null) {
        throw new Error("Missing the required parameter 'specificConcept' when calling nameConceptTypeSpecificConceptJsonGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling nameConceptTypeSpecificConceptJsonGet");
      }

      let pathParams = {
        'concept-type': conceptType,
        'specific-concept': specificConcept
      };
      let queryParams = {
        'fields': opts['fields'],
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NameConceptTypeSpecificConceptJsonGet200Response;
      return this.apiClient.callApi(
        '/name/{concept-type}/{specific-concept}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchJsonGet operation.
     * @callback module:api/DefaultApi~searchJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchJsonGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} query Precedes the search term string. Used in a Search Query. Except for &lt;specific_concept_name&gt;, Search Query will take the required parameters listed above (&lt;concept_type&gt;, &lt;concept_uri&gt;, &lt;article_uri&gt;) as an optional_parameter in addition to the query=&lt;query_term&gt;.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 10)] Integer value for the index count from the first concept to the last concept, sorted alphabetically. Used in a Search Query. A Search Query will return up to 10 concepts in its results.
     * @param {module:model/String} [fields] \"all\" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query  Optional fields are returned in result_set. They are briefly explained here:  pages: A list of topic pages associated with a specific concept. ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol. links: A list of links from this concept to external data resources. taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts. combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts. geocodes: For geographic concepts, the full GIS record from geonames. article_list: A list of up to 10 articles associated with this concept. scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article. search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept. 
     * @param {module:api/DefaultApi~searchJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchJsonGet200Response}
     */
    searchJsonGet(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchJsonGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'offset': opts['offset'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchJsonGet200Response;
      return this.apiClient.callApi(
        '/search.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
