/**
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Concept from './model/Concept';
import ConceptArticleList from './model/ConceptArticleList';
import ConceptArticleListResultsInner from './model/ConceptArticleListResultsInner';
import ConceptArticleListResultsInnerConcepts from './model/ConceptArticleListResultsInnerConcepts';
import ConceptCombinationsInner from './model/ConceptCombinationsInner';
import ConceptLinksInner from './model/ConceptLinksInner';
import ConceptRelation from './model/ConceptRelation';
import ConceptScopeNotesInner from './model/ConceptScopeNotesInner';
import ConceptTaxonomyInner from './model/ConceptTaxonomyInner';
import NameConceptTypeSpecificConceptJsonGet200Response from './model/NameConceptTypeSpecificConceptJsonGet200Response';
import SearchJsonGet200Response from './model/SearchJsonGet200Response';
import DefaultApi from './api/DefaultApi';


/**
* The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SemanticApi = require('index'); // See note below*.
* var xxxSvc = new SemanticApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SemanticApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SemanticApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SemanticApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Concept model constructor.
     * @property {module:model/Concept}
     */
    Concept,

    /**
     * The ConceptArticleList model constructor.
     * @property {module:model/ConceptArticleList}
     */
    ConceptArticleList,

    /**
     * The ConceptArticleListResultsInner model constructor.
     * @property {module:model/ConceptArticleListResultsInner}
     */
    ConceptArticleListResultsInner,

    /**
     * The ConceptArticleListResultsInnerConcepts model constructor.
     * @property {module:model/ConceptArticleListResultsInnerConcepts}
     */
    ConceptArticleListResultsInnerConcepts,

    /**
     * The ConceptCombinationsInner model constructor.
     * @property {module:model/ConceptCombinationsInner}
     */
    ConceptCombinationsInner,

    /**
     * The ConceptLinksInner model constructor.
     * @property {module:model/ConceptLinksInner}
     */
    ConceptLinksInner,

    /**
     * The ConceptRelation model constructor.
     * @property {module:model/ConceptRelation}
     */
    ConceptRelation,

    /**
     * The ConceptScopeNotesInner model constructor.
     * @property {module:model/ConceptScopeNotesInner}
     */
    ConceptScopeNotesInner,

    /**
     * The ConceptTaxonomyInner model constructor.
     * @property {module:model/ConceptTaxonomyInner}
     */
    ConceptTaxonomyInner,

    /**
     * The NameConceptTypeSpecificConceptJsonGet200Response model constructor.
     * @property {module:model/NameConceptTypeSpecificConceptJsonGet200Response}
     */
    NameConceptTypeSpecificConceptJsonGet200Response,

    /**
     * The SearchJsonGet200Response model constructor.
     * @property {module:model/SearchJsonGet200Response}
     */
    SearchJsonGet200Response,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
