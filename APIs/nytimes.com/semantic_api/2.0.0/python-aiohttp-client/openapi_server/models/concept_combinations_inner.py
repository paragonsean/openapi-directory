# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConceptCombinationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, combination_note: str=None, combination_source_concept_id: int=None, combination_source_concept_name: str=None, combination_source_concept_type: str=None, combination_target_concept_id: int=None, combination_target_concept_name: str=None, combination_target_concept_type: str=None):
        """ConceptCombinationsInner - a model defined in OpenAPI

        :param combination_note: The combination_note of this ConceptCombinationsInner.
        :param combination_source_concept_id: The combination_source_concept_id of this ConceptCombinationsInner.
        :param combination_source_concept_name: The combination_source_concept_name of this ConceptCombinationsInner.
        :param combination_source_concept_type: The combination_source_concept_type of this ConceptCombinationsInner.
        :param combination_target_concept_id: The combination_target_concept_id of this ConceptCombinationsInner.
        :param combination_target_concept_name: The combination_target_concept_name of this ConceptCombinationsInner.
        :param combination_target_concept_type: The combination_target_concept_type of this ConceptCombinationsInner.
        """
        self.openapi_types = {
            'combination_note': str,
            'combination_source_concept_id': int,
            'combination_source_concept_name': str,
            'combination_source_concept_type': str,
            'combination_target_concept_id': int,
            'combination_target_concept_name': str,
            'combination_target_concept_type': str
        }

        self.attribute_map = {
            'combination_note': 'combination_note',
            'combination_source_concept_id': 'combination_source_concept_id',
            'combination_source_concept_name': 'combination_source_concept_name',
            'combination_source_concept_type': 'combination_source_concept_type',
            'combination_target_concept_id': 'combination_target_concept_id',
            'combination_target_concept_name': 'combination_target_concept_name',
            'combination_target_concept_type': 'combination_target_concept_type'
        }

        self._combination_note = combination_note
        self._combination_source_concept_id = combination_source_concept_id
        self._combination_source_concept_name = combination_source_concept_name
        self._combination_source_concept_type = combination_source_concept_type
        self._combination_target_concept_id = combination_target_concept_id
        self._combination_target_concept_name = combination_target_concept_name
        self._combination_target_concept_type = combination_target_concept_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConceptCombinationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Concept_combinations_inner of this ConceptCombinationsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def combination_note(self):
        """Gets the combination_note of this ConceptCombinationsInner.


        :return: The combination_note of this ConceptCombinationsInner.
        :rtype: str
        """
        return self._combination_note

    @combination_note.setter
    def combination_note(self, combination_note):
        """Sets the combination_note of this ConceptCombinationsInner.


        :param combination_note: The combination_note of this ConceptCombinationsInner.
        :type combination_note: str
        """

        self._combination_note = combination_note

    @property
    def combination_source_concept_id(self):
        """Gets the combination_source_concept_id of this ConceptCombinationsInner.


        :return: The combination_source_concept_id of this ConceptCombinationsInner.
        :rtype: int
        """
        return self._combination_source_concept_id

    @combination_source_concept_id.setter
    def combination_source_concept_id(self, combination_source_concept_id):
        """Sets the combination_source_concept_id of this ConceptCombinationsInner.


        :param combination_source_concept_id: The combination_source_concept_id of this ConceptCombinationsInner.
        :type combination_source_concept_id: int
        """

        self._combination_source_concept_id = combination_source_concept_id

    @property
    def combination_source_concept_name(self):
        """Gets the combination_source_concept_name of this ConceptCombinationsInner.


        :return: The combination_source_concept_name of this ConceptCombinationsInner.
        :rtype: str
        """
        return self._combination_source_concept_name

    @combination_source_concept_name.setter
    def combination_source_concept_name(self, combination_source_concept_name):
        """Sets the combination_source_concept_name of this ConceptCombinationsInner.


        :param combination_source_concept_name: The combination_source_concept_name of this ConceptCombinationsInner.
        :type combination_source_concept_name: str
        """

        self._combination_source_concept_name = combination_source_concept_name

    @property
    def combination_source_concept_type(self):
        """Gets the combination_source_concept_type of this ConceptCombinationsInner.


        :return: The combination_source_concept_type of this ConceptCombinationsInner.
        :rtype: str
        """
        return self._combination_source_concept_type

    @combination_source_concept_type.setter
    def combination_source_concept_type(self, combination_source_concept_type):
        """Sets the combination_source_concept_type of this ConceptCombinationsInner.


        :param combination_source_concept_type: The combination_source_concept_type of this ConceptCombinationsInner.
        :type combination_source_concept_type: str
        """

        self._combination_source_concept_type = combination_source_concept_type

    @property
    def combination_target_concept_id(self):
        """Gets the combination_target_concept_id of this ConceptCombinationsInner.


        :return: The combination_target_concept_id of this ConceptCombinationsInner.
        :rtype: int
        """
        return self._combination_target_concept_id

    @combination_target_concept_id.setter
    def combination_target_concept_id(self, combination_target_concept_id):
        """Sets the combination_target_concept_id of this ConceptCombinationsInner.


        :param combination_target_concept_id: The combination_target_concept_id of this ConceptCombinationsInner.
        :type combination_target_concept_id: int
        """

        self._combination_target_concept_id = combination_target_concept_id

    @property
    def combination_target_concept_name(self):
        """Gets the combination_target_concept_name of this ConceptCombinationsInner.


        :return: The combination_target_concept_name of this ConceptCombinationsInner.
        :rtype: str
        """
        return self._combination_target_concept_name

    @combination_target_concept_name.setter
    def combination_target_concept_name(self, combination_target_concept_name):
        """Sets the combination_target_concept_name of this ConceptCombinationsInner.


        :param combination_target_concept_name: The combination_target_concept_name of this ConceptCombinationsInner.
        :type combination_target_concept_name: str
        """

        self._combination_target_concept_name = combination_target_concept_name

    @property
    def combination_target_concept_type(self):
        """Gets the combination_target_concept_type of this ConceptCombinationsInner.


        :return: The combination_target_concept_type of this ConceptCombinationsInner.
        :rtype: str
        """
        return self._combination_target_concept_type

    @combination_target_concept_type.setter
    def combination_target_concept_type(self, combination_target_concept_type):
        """Sets the combination_target_concept_type of this ConceptCombinationsInner.


        :param combination_target_concept_type: The combination_target_concept_type of this ConceptCombinationsInner.
        :type combination_target_concept_type: str
        """

        self._combination_target_concept_type = combination_target_concept_type
