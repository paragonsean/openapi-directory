# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConceptScopeNotesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope_note: str=None, scope_note_name: str=None, scope_note_type: str=None):
        """ConceptScopeNotesInner - a model defined in OpenAPI

        :param scope_note: The scope_note of this ConceptScopeNotesInner.
        :param scope_note_name: The scope_note_name of this ConceptScopeNotesInner.
        :param scope_note_type: The scope_note_type of this ConceptScopeNotesInner.
        """
        self.openapi_types = {
            'scope_note': str,
            'scope_note_name': str,
            'scope_note_type': str
        }

        self.attribute_map = {
            'scope_note': 'scope_note',
            'scope_note_name': 'scope_note_name',
            'scope_note_type': 'scope_note_type'
        }

        self._scope_note = scope_note
        self._scope_note_name = scope_note_name
        self._scope_note_type = scope_note_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConceptScopeNotesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Concept_scope_notes_inner of this ConceptScopeNotesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope_note(self):
        """Gets the scope_note of this ConceptScopeNotesInner.


        :return: The scope_note of this ConceptScopeNotesInner.
        :rtype: str
        """
        return self._scope_note

    @scope_note.setter
    def scope_note(self, scope_note):
        """Sets the scope_note of this ConceptScopeNotesInner.


        :param scope_note: The scope_note of this ConceptScopeNotesInner.
        :type scope_note: str
        """

        self._scope_note = scope_note

    @property
    def scope_note_name(self):
        """Gets the scope_note_name of this ConceptScopeNotesInner.


        :return: The scope_note_name of this ConceptScopeNotesInner.
        :rtype: str
        """
        return self._scope_note_name

    @scope_note_name.setter
    def scope_note_name(self, scope_note_name):
        """Sets the scope_note_name of this ConceptScopeNotesInner.


        :param scope_note_name: The scope_note_name of this ConceptScopeNotesInner.
        :type scope_note_name: str
        """

        self._scope_note_name = scope_note_name

    @property
    def scope_note_type(self):
        """Gets the scope_note_type of this ConceptScopeNotesInner.


        :return: The scope_note_type of this ConceptScopeNotesInner.
        :rtype: str
        """
        return self._scope_note_type

    @scope_note_type.setter
    def scope_note_type(self, scope_note_type):
        """Sets the scope_note_type of this ConceptScopeNotesInner.


        :param scope_note_type: The scope_note_type of this ConceptScopeNotesInner.
        :type scope_note_type: str
        """

        self._scope_note_type = scope_note_type
