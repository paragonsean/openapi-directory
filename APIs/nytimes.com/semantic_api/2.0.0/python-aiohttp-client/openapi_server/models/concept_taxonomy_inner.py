# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConceptTaxonomyInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_concept_id: int=None, source_concept_name: str=None, source_concept_type: str=None, source_concept_vernacular: str=None, target_concept_id: int=None, target_concept_name: str=None, target_concept_type: str=None, target_concept_vernacular: str=None, taxonomic_relation: str=None, taxonomic_verification_status: str=None):
        """ConceptTaxonomyInner - a model defined in OpenAPI

        :param source_concept_id: The source_concept_id of this ConceptTaxonomyInner.
        :param source_concept_name: The source_concept_name of this ConceptTaxonomyInner.
        :param source_concept_type: The source_concept_type of this ConceptTaxonomyInner.
        :param source_concept_vernacular: The source_concept_vernacular of this ConceptTaxonomyInner.
        :param target_concept_id: The target_concept_id of this ConceptTaxonomyInner.
        :param target_concept_name: The target_concept_name of this ConceptTaxonomyInner.
        :param target_concept_type: The target_concept_type of this ConceptTaxonomyInner.
        :param target_concept_vernacular: The target_concept_vernacular of this ConceptTaxonomyInner.
        :param taxonomic_relation: The taxonomic_relation of this ConceptTaxonomyInner.
        :param taxonomic_verification_status: The taxonomic_verification_status of this ConceptTaxonomyInner.
        """
        self.openapi_types = {
            'source_concept_id': int,
            'source_concept_name': str,
            'source_concept_type': str,
            'source_concept_vernacular': str,
            'target_concept_id': int,
            'target_concept_name': str,
            'target_concept_type': str,
            'target_concept_vernacular': str,
            'taxonomic_relation': str,
            'taxonomic_verification_status': str
        }

        self.attribute_map = {
            'source_concept_id': 'source_concept_id',
            'source_concept_name': 'source_concept_name',
            'source_concept_type': 'source_concept_type',
            'source_concept_vernacular': 'source_concept_vernacular',
            'target_concept_id': 'target_concept_id',
            'target_concept_name': 'target_concept_name',
            'target_concept_type': 'target_concept_type',
            'target_concept_vernacular': 'target_concept_vernacular',
            'taxonomic_relation': 'taxonomic_relation',
            'taxonomic_verification_status': 'taxonomic_verification_status'
        }

        self._source_concept_id = source_concept_id
        self._source_concept_name = source_concept_name
        self._source_concept_type = source_concept_type
        self._source_concept_vernacular = source_concept_vernacular
        self._target_concept_id = target_concept_id
        self._target_concept_name = target_concept_name
        self._target_concept_type = target_concept_type
        self._target_concept_vernacular = target_concept_vernacular
        self._taxonomic_relation = taxonomic_relation
        self._taxonomic_verification_status = taxonomic_verification_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConceptTaxonomyInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Concept_taxonomy_inner of this ConceptTaxonomyInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_concept_id(self):
        """Gets the source_concept_id of this ConceptTaxonomyInner.


        :return: The source_concept_id of this ConceptTaxonomyInner.
        :rtype: int
        """
        return self._source_concept_id

    @source_concept_id.setter
    def source_concept_id(self, source_concept_id):
        """Sets the source_concept_id of this ConceptTaxonomyInner.


        :param source_concept_id: The source_concept_id of this ConceptTaxonomyInner.
        :type source_concept_id: int
        """

        self._source_concept_id = source_concept_id

    @property
    def source_concept_name(self):
        """Gets the source_concept_name of this ConceptTaxonomyInner.


        :return: The source_concept_name of this ConceptTaxonomyInner.
        :rtype: str
        """
        return self._source_concept_name

    @source_concept_name.setter
    def source_concept_name(self, source_concept_name):
        """Sets the source_concept_name of this ConceptTaxonomyInner.


        :param source_concept_name: The source_concept_name of this ConceptTaxonomyInner.
        :type source_concept_name: str
        """

        self._source_concept_name = source_concept_name

    @property
    def source_concept_type(self):
        """Gets the source_concept_type of this ConceptTaxonomyInner.


        :return: The source_concept_type of this ConceptTaxonomyInner.
        :rtype: str
        """
        return self._source_concept_type

    @source_concept_type.setter
    def source_concept_type(self, source_concept_type):
        """Sets the source_concept_type of this ConceptTaxonomyInner.


        :param source_concept_type: The source_concept_type of this ConceptTaxonomyInner.
        :type source_concept_type: str
        """

        self._source_concept_type = source_concept_type

    @property
    def source_concept_vernacular(self):
        """Gets the source_concept_vernacular of this ConceptTaxonomyInner.


        :return: The source_concept_vernacular of this ConceptTaxonomyInner.
        :rtype: str
        """
        return self._source_concept_vernacular

    @source_concept_vernacular.setter
    def source_concept_vernacular(self, source_concept_vernacular):
        """Sets the source_concept_vernacular of this ConceptTaxonomyInner.


        :param source_concept_vernacular: The source_concept_vernacular of this ConceptTaxonomyInner.
        :type source_concept_vernacular: str
        """

        self._source_concept_vernacular = source_concept_vernacular

    @property
    def target_concept_id(self):
        """Gets the target_concept_id of this ConceptTaxonomyInner.


        :return: The target_concept_id of this ConceptTaxonomyInner.
        :rtype: int
        """
        return self._target_concept_id

    @target_concept_id.setter
    def target_concept_id(self, target_concept_id):
        """Sets the target_concept_id of this ConceptTaxonomyInner.


        :param target_concept_id: The target_concept_id of this ConceptTaxonomyInner.
        :type target_concept_id: int
        """

        self._target_concept_id = target_concept_id

    @property
    def target_concept_name(self):
        """Gets the target_concept_name of this ConceptTaxonomyInner.


        :return: The target_concept_name of this ConceptTaxonomyInner.
        :rtype: str
        """
        return self._target_concept_name

    @target_concept_name.setter
    def target_concept_name(self, target_concept_name):
        """Sets the target_concept_name of this ConceptTaxonomyInner.


        :param target_concept_name: The target_concept_name of this ConceptTaxonomyInner.
        :type target_concept_name: str
        """

        self._target_concept_name = target_concept_name

    @property
    def target_concept_type(self):
        """Gets the target_concept_type of this ConceptTaxonomyInner.


        :return: The target_concept_type of this ConceptTaxonomyInner.
        :rtype: str
        """
        return self._target_concept_type

    @target_concept_type.setter
    def target_concept_type(self, target_concept_type):
        """Sets the target_concept_type of this ConceptTaxonomyInner.


        :param target_concept_type: The target_concept_type of this ConceptTaxonomyInner.
        :type target_concept_type: str
        """

        self._target_concept_type = target_concept_type

    @property
    def target_concept_vernacular(self):
        """Gets the target_concept_vernacular of this ConceptTaxonomyInner.


        :return: The target_concept_vernacular of this ConceptTaxonomyInner.
        :rtype: str
        """
        return self._target_concept_vernacular

    @target_concept_vernacular.setter
    def target_concept_vernacular(self, target_concept_vernacular):
        """Sets the target_concept_vernacular of this ConceptTaxonomyInner.


        :param target_concept_vernacular: The target_concept_vernacular of this ConceptTaxonomyInner.
        :type target_concept_vernacular: str
        """

        self._target_concept_vernacular = target_concept_vernacular

    @property
    def taxonomic_relation(self):
        """Gets the taxonomic_relation of this ConceptTaxonomyInner.


        :return: The taxonomic_relation of this ConceptTaxonomyInner.
        :rtype: str
        """
        return self._taxonomic_relation

    @taxonomic_relation.setter
    def taxonomic_relation(self, taxonomic_relation):
        """Sets the taxonomic_relation of this ConceptTaxonomyInner.


        :param taxonomic_relation: The taxonomic_relation of this ConceptTaxonomyInner.
        :type taxonomic_relation: str
        """

        self._taxonomic_relation = taxonomic_relation

    @property
    def taxonomic_verification_status(self):
        """Gets the taxonomic_verification_status of this ConceptTaxonomyInner.


        :return: The taxonomic_verification_status of this ConceptTaxonomyInner.
        :rtype: str
        """
        return self._taxonomic_verification_status

    @taxonomic_verification_status.setter
    def taxonomic_verification_status(self, taxonomic_verification_status):
        """Sets the taxonomic_verification_status of this ConceptTaxonomyInner.


        :param taxonomic_verification_status: The taxonomic_verification_status of this ConceptTaxonomyInner.
        :type taxonomic_verification_status: str
        """

        self._taxonomic_verification_status = taxonomic_verification_status
