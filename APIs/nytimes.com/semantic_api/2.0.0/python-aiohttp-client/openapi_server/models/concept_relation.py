# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConceptRelation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concept_created: str=None, concept_id: int=None, concept_name: str=None, concept_status: str=None, concept_type: str=None, concept_updated: str=None, is_times_tag: int=None, vernacular: str=None):
        """ConceptRelation - a model defined in OpenAPI

        :param concept_created: The concept_created of this ConceptRelation.
        :param concept_id: The concept_id of this ConceptRelation.
        :param concept_name: The concept_name of this ConceptRelation.
        :param concept_status: The concept_status of this ConceptRelation.
        :param concept_type: The concept_type of this ConceptRelation.
        :param concept_updated: The concept_updated of this ConceptRelation.
        :param is_times_tag: The is_times_tag of this ConceptRelation.
        :param vernacular: The vernacular of this ConceptRelation.
        """
        self.openapi_types = {
            'concept_created': str,
            'concept_id': int,
            'concept_name': str,
            'concept_status': str,
            'concept_type': str,
            'concept_updated': str,
            'is_times_tag': int,
            'vernacular': str
        }

        self.attribute_map = {
            'concept_created': 'concept_created',
            'concept_id': 'concept_id',
            'concept_name': 'concept_name',
            'concept_status': 'concept_status',
            'concept_type': 'concept_type',
            'concept_updated': 'concept_updated',
            'is_times_tag': 'is_times_tag',
            'vernacular': 'vernacular'
        }

        self._concept_created = concept_created
        self._concept_id = concept_id
        self._concept_name = concept_name
        self._concept_status = concept_status
        self._concept_type = concept_type
        self._concept_updated = concept_updated
        self._is_times_tag = is_times_tag
        self._vernacular = vernacular

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConceptRelation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConceptRelation of this ConceptRelation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concept_created(self):
        """Gets the concept_created of this ConceptRelation.


        :return: The concept_created of this ConceptRelation.
        :rtype: str
        """
        return self._concept_created

    @concept_created.setter
    def concept_created(self, concept_created):
        """Sets the concept_created of this ConceptRelation.


        :param concept_created: The concept_created of this ConceptRelation.
        :type concept_created: str
        """

        self._concept_created = concept_created

    @property
    def concept_id(self):
        """Gets the concept_id of this ConceptRelation.


        :return: The concept_id of this ConceptRelation.
        :rtype: int
        """
        return self._concept_id

    @concept_id.setter
    def concept_id(self, concept_id):
        """Sets the concept_id of this ConceptRelation.


        :param concept_id: The concept_id of this ConceptRelation.
        :type concept_id: int
        """

        self._concept_id = concept_id

    @property
    def concept_name(self):
        """Gets the concept_name of this ConceptRelation.


        :return: The concept_name of this ConceptRelation.
        :rtype: str
        """
        return self._concept_name

    @concept_name.setter
    def concept_name(self, concept_name):
        """Sets the concept_name of this ConceptRelation.


        :param concept_name: The concept_name of this ConceptRelation.
        :type concept_name: str
        """

        self._concept_name = concept_name

    @property
    def concept_status(self):
        """Gets the concept_status of this ConceptRelation.


        :return: The concept_status of this ConceptRelation.
        :rtype: str
        """
        return self._concept_status

    @concept_status.setter
    def concept_status(self, concept_status):
        """Sets the concept_status of this ConceptRelation.


        :param concept_status: The concept_status of this ConceptRelation.
        :type concept_status: str
        """

        self._concept_status = concept_status

    @property
    def concept_type(self):
        """Gets the concept_type of this ConceptRelation.


        :return: The concept_type of this ConceptRelation.
        :rtype: str
        """
        return self._concept_type

    @concept_type.setter
    def concept_type(self, concept_type):
        """Sets the concept_type of this ConceptRelation.


        :param concept_type: The concept_type of this ConceptRelation.
        :type concept_type: str
        """

        self._concept_type = concept_type

    @property
    def concept_updated(self):
        """Gets the concept_updated of this ConceptRelation.


        :return: The concept_updated of this ConceptRelation.
        :rtype: str
        """
        return self._concept_updated

    @concept_updated.setter
    def concept_updated(self, concept_updated):
        """Sets the concept_updated of this ConceptRelation.


        :param concept_updated: The concept_updated of this ConceptRelation.
        :type concept_updated: str
        """

        self._concept_updated = concept_updated

    @property
    def is_times_tag(self):
        """Gets the is_times_tag of this ConceptRelation.


        :return: The is_times_tag of this ConceptRelation.
        :rtype: int
        """
        return self._is_times_tag

    @is_times_tag.setter
    def is_times_tag(self, is_times_tag):
        """Sets the is_times_tag of this ConceptRelation.


        :param is_times_tag: The is_times_tag of this ConceptRelation.
        :type is_times_tag: int
        """

        self._is_times_tag = is_times_tag

    @property
    def vernacular(self):
        """Gets the vernacular of this ConceptRelation.


        :return: The vernacular of this ConceptRelation.
        :rtype: str
        """
        return self._vernacular

    @vernacular.setter
    def vernacular(self, vernacular):
        """Sets the vernacular of this ConceptRelation.


        :param vernacular: The vernacular of this ConceptRelation.
        :type vernacular: str
        """

        self._vernacular = vernacular
