# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.concept_article_list import ConceptArticleList
from openapi_server.models.concept_combinations_inner import ConceptCombinationsInner
from openapi_server.models.concept_links_inner import ConceptLinksInner
from openapi_server.models.concept_relation import ConceptRelation
from openapi_server.models.concept_scope_notes_inner import ConceptScopeNotesInner
from openapi_server.models.concept_taxonomy_inner import ConceptTaxonomyInner
from openapi_server import util


class Concept(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ancestors: List[ConceptRelation]=None, article_list: ConceptArticleList=None, combinations: List[ConceptCombinationsInner]=None, concept_created: str=None, concept_id: int=None, concept_name: str=None, concept_status: str=None, concept_type: str=None, concept_updated: str=None, descendants: List[ConceptRelation]=None, is_times_tag: int=None, links: List[ConceptLinksInner]=None, scope_notes: List[ConceptScopeNotesInner]=None, search_api_query: str=None, taxonomy: List[ConceptTaxonomyInner]=None, vernacular: str=None):
        """Concept - a model defined in OpenAPI

        :param ancestors: The ancestors of this Concept.
        :param article_list: The article_list of this Concept.
        :param combinations: The combinations of this Concept.
        :param concept_created: The concept_created of this Concept.
        :param concept_id: The concept_id of this Concept.
        :param concept_name: The concept_name of this Concept.
        :param concept_status: The concept_status of this Concept.
        :param concept_type: The concept_type of this Concept.
        :param concept_updated: The concept_updated of this Concept.
        :param descendants: The descendants of this Concept.
        :param is_times_tag: The is_times_tag of this Concept.
        :param links: The links of this Concept.
        :param scope_notes: The scope_notes of this Concept.
        :param search_api_query: The search_api_query of this Concept.
        :param taxonomy: The taxonomy of this Concept.
        :param vernacular: The vernacular of this Concept.
        """
        self.openapi_types = {
            'ancestors': List[ConceptRelation],
            'article_list': ConceptArticleList,
            'combinations': List[ConceptCombinationsInner],
            'concept_created': str,
            'concept_id': int,
            'concept_name': str,
            'concept_status': str,
            'concept_type': str,
            'concept_updated': str,
            'descendants': List[ConceptRelation],
            'is_times_tag': int,
            'links': List[ConceptLinksInner],
            'scope_notes': List[ConceptScopeNotesInner],
            'search_api_query': str,
            'taxonomy': List[ConceptTaxonomyInner],
            'vernacular': str
        }

        self.attribute_map = {
            'ancestors': 'ancestors',
            'article_list': 'article_list',
            'combinations': 'combinations',
            'concept_created': 'concept_created',
            'concept_id': 'concept_id',
            'concept_name': 'concept_name',
            'concept_status': 'concept_status',
            'concept_type': 'concept_type',
            'concept_updated': 'concept_updated',
            'descendants': 'descendants',
            'is_times_tag': 'is_times_tag',
            'links': 'links',
            'scope_notes': 'scope_notes',
            'search_api_query': 'search_api_query',
            'taxonomy': 'taxonomy',
            'vernacular': 'vernacular'
        }

        self._ancestors = ancestors
        self._article_list = article_list
        self._combinations = combinations
        self._concept_created = concept_created
        self._concept_id = concept_id
        self._concept_name = concept_name
        self._concept_status = concept_status
        self._concept_type = concept_type
        self._concept_updated = concept_updated
        self._descendants = descendants
        self._is_times_tag = is_times_tag
        self._links = links
        self._scope_notes = scope_notes
        self._search_api_query = search_api_query
        self._taxonomy = taxonomy
        self._vernacular = vernacular

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Concept':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Concept of this Concept.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ancestors(self):
        """Gets the ancestors of this Concept.


        :return: The ancestors of this Concept.
        :rtype: List[ConceptRelation]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """Sets the ancestors of this Concept.


        :param ancestors: The ancestors of this Concept.
        :type ancestors: List[ConceptRelation]
        """

        self._ancestors = ancestors

    @property
    def article_list(self):
        """Gets the article_list of this Concept.


        :return: The article_list of this Concept.
        :rtype: ConceptArticleList
        """
        return self._article_list

    @article_list.setter
    def article_list(self, article_list):
        """Sets the article_list of this Concept.


        :param article_list: The article_list of this Concept.
        :type article_list: ConceptArticleList
        """

        self._article_list = article_list

    @property
    def combinations(self):
        """Gets the combinations of this Concept.


        :return: The combinations of this Concept.
        :rtype: List[ConceptCombinationsInner]
        """
        return self._combinations

    @combinations.setter
    def combinations(self, combinations):
        """Sets the combinations of this Concept.


        :param combinations: The combinations of this Concept.
        :type combinations: List[ConceptCombinationsInner]
        """

        self._combinations = combinations

    @property
    def concept_created(self):
        """Gets the concept_created of this Concept.


        :return: The concept_created of this Concept.
        :rtype: str
        """
        return self._concept_created

    @concept_created.setter
    def concept_created(self, concept_created):
        """Sets the concept_created of this Concept.


        :param concept_created: The concept_created of this Concept.
        :type concept_created: str
        """

        self._concept_created = concept_created

    @property
    def concept_id(self):
        """Gets the concept_id of this Concept.


        :return: The concept_id of this Concept.
        :rtype: int
        """
        return self._concept_id

    @concept_id.setter
    def concept_id(self, concept_id):
        """Sets the concept_id of this Concept.


        :param concept_id: The concept_id of this Concept.
        :type concept_id: int
        """

        self._concept_id = concept_id

    @property
    def concept_name(self):
        """Gets the concept_name of this Concept.


        :return: The concept_name of this Concept.
        :rtype: str
        """
        return self._concept_name

    @concept_name.setter
    def concept_name(self, concept_name):
        """Sets the concept_name of this Concept.


        :param concept_name: The concept_name of this Concept.
        :type concept_name: str
        """

        self._concept_name = concept_name

    @property
    def concept_status(self):
        """Gets the concept_status of this Concept.


        :return: The concept_status of this Concept.
        :rtype: str
        """
        return self._concept_status

    @concept_status.setter
    def concept_status(self, concept_status):
        """Sets the concept_status of this Concept.


        :param concept_status: The concept_status of this Concept.
        :type concept_status: str
        """

        self._concept_status = concept_status

    @property
    def concept_type(self):
        """Gets the concept_type of this Concept.


        :return: The concept_type of this Concept.
        :rtype: str
        """
        return self._concept_type

    @concept_type.setter
    def concept_type(self, concept_type):
        """Sets the concept_type of this Concept.


        :param concept_type: The concept_type of this Concept.
        :type concept_type: str
        """

        self._concept_type = concept_type

    @property
    def concept_updated(self):
        """Gets the concept_updated of this Concept.


        :return: The concept_updated of this Concept.
        :rtype: str
        """
        return self._concept_updated

    @concept_updated.setter
    def concept_updated(self, concept_updated):
        """Sets the concept_updated of this Concept.


        :param concept_updated: The concept_updated of this Concept.
        :type concept_updated: str
        """

        self._concept_updated = concept_updated

    @property
    def descendants(self):
        """Gets the descendants of this Concept.


        :return: The descendants of this Concept.
        :rtype: List[ConceptRelation]
        """
        return self._descendants

    @descendants.setter
    def descendants(self, descendants):
        """Sets the descendants of this Concept.


        :param descendants: The descendants of this Concept.
        :type descendants: List[ConceptRelation]
        """

        self._descendants = descendants

    @property
    def is_times_tag(self):
        """Gets the is_times_tag of this Concept.


        :return: The is_times_tag of this Concept.
        :rtype: int
        """
        return self._is_times_tag

    @is_times_tag.setter
    def is_times_tag(self, is_times_tag):
        """Sets the is_times_tag of this Concept.


        :param is_times_tag: The is_times_tag of this Concept.
        :type is_times_tag: int
        """

        self._is_times_tag = is_times_tag

    @property
    def links(self):
        """Gets the links of this Concept.


        :return: The links of this Concept.
        :rtype: List[ConceptLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Concept.


        :param links: The links of this Concept.
        :type links: List[ConceptLinksInner]
        """

        self._links = links

    @property
    def scope_notes(self):
        """Gets the scope_notes of this Concept.


        :return: The scope_notes of this Concept.
        :rtype: List[ConceptScopeNotesInner]
        """
        return self._scope_notes

    @scope_notes.setter
    def scope_notes(self, scope_notes):
        """Sets the scope_notes of this Concept.


        :param scope_notes: The scope_notes of this Concept.
        :type scope_notes: List[ConceptScopeNotesInner]
        """

        self._scope_notes = scope_notes

    @property
    def search_api_query(self):
        """Gets the search_api_query of this Concept.


        :return: The search_api_query of this Concept.
        :rtype: str
        """
        return self._search_api_query

    @search_api_query.setter
    def search_api_query(self, search_api_query):
        """Sets the search_api_query of this Concept.


        :param search_api_query: The search_api_query of this Concept.
        :type search_api_query: str
        """

        self._search_api_query = search_api_query

    @property
    def taxonomy(self):
        """Gets the taxonomy of this Concept.


        :return: The taxonomy of this Concept.
        :rtype: List[ConceptTaxonomyInner]
        """
        return self._taxonomy

    @taxonomy.setter
    def taxonomy(self, taxonomy):
        """Sets the taxonomy of this Concept.


        :param taxonomy: The taxonomy of this Concept.
        :type taxonomy: List[ConceptTaxonomyInner]
        """

        self._taxonomy = taxonomy

    @property
    def vernacular(self):
        """Gets the vernacular of this Concept.


        :return: The vernacular of this Concept.
        :rtype: str
        """
        return self._vernacular

    @vernacular.setter
    def vernacular(self, vernacular):
        """Sets the vernacular of this Concept.


        :param vernacular: The vernacular of this Concept.
        :type vernacular: str
        """

        self._vernacular = vernacular
