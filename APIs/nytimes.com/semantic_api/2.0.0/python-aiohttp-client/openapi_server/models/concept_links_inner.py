# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConceptLinksInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concept_id: int=None, concept_name: str=None, concept_status: str=None, concept_type: str=None, is_times_tag: int=None, link: str=None, link_id: int=None, link_type: str=None, mapping_type: str=None, relation: str=None):
        """ConceptLinksInner - a model defined in OpenAPI

        :param concept_id: The concept_id of this ConceptLinksInner.
        :param concept_name: The concept_name of this ConceptLinksInner.
        :param concept_status: The concept_status of this ConceptLinksInner.
        :param concept_type: The concept_type of this ConceptLinksInner.
        :param is_times_tag: The is_times_tag of this ConceptLinksInner.
        :param link: The link of this ConceptLinksInner.
        :param link_id: The link_id of this ConceptLinksInner.
        :param link_type: The link_type of this ConceptLinksInner.
        :param mapping_type: The mapping_type of this ConceptLinksInner.
        :param relation: The relation of this ConceptLinksInner.
        """
        self.openapi_types = {
            'concept_id': int,
            'concept_name': str,
            'concept_status': str,
            'concept_type': str,
            'is_times_tag': int,
            'link': str,
            'link_id': int,
            'link_type': str,
            'mapping_type': str,
            'relation': str
        }

        self.attribute_map = {
            'concept_id': 'concept_id',
            'concept_name': 'concept_name',
            'concept_status': 'concept_status',
            'concept_type': 'concept_type',
            'is_times_tag': 'is_times_tag',
            'link': 'link',
            'link_id': 'link_id',
            'link_type': 'link_type',
            'mapping_type': 'mapping_type',
            'relation': 'relation'
        }

        self._concept_id = concept_id
        self._concept_name = concept_name
        self._concept_status = concept_status
        self._concept_type = concept_type
        self._is_times_tag = is_times_tag
        self._link = link
        self._link_id = link_id
        self._link_type = link_type
        self._mapping_type = mapping_type
        self._relation = relation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConceptLinksInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Concept_links_inner of this ConceptLinksInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concept_id(self):
        """Gets the concept_id of this ConceptLinksInner.


        :return: The concept_id of this ConceptLinksInner.
        :rtype: int
        """
        return self._concept_id

    @concept_id.setter
    def concept_id(self, concept_id):
        """Sets the concept_id of this ConceptLinksInner.


        :param concept_id: The concept_id of this ConceptLinksInner.
        :type concept_id: int
        """

        self._concept_id = concept_id

    @property
    def concept_name(self):
        """Gets the concept_name of this ConceptLinksInner.


        :return: The concept_name of this ConceptLinksInner.
        :rtype: str
        """
        return self._concept_name

    @concept_name.setter
    def concept_name(self, concept_name):
        """Sets the concept_name of this ConceptLinksInner.


        :param concept_name: The concept_name of this ConceptLinksInner.
        :type concept_name: str
        """

        self._concept_name = concept_name

    @property
    def concept_status(self):
        """Gets the concept_status of this ConceptLinksInner.


        :return: The concept_status of this ConceptLinksInner.
        :rtype: str
        """
        return self._concept_status

    @concept_status.setter
    def concept_status(self, concept_status):
        """Sets the concept_status of this ConceptLinksInner.


        :param concept_status: The concept_status of this ConceptLinksInner.
        :type concept_status: str
        """

        self._concept_status = concept_status

    @property
    def concept_type(self):
        """Gets the concept_type of this ConceptLinksInner.


        :return: The concept_type of this ConceptLinksInner.
        :rtype: str
        """
        return self._concept_type

    @concept_type.setter
    def concept_type(self, concept_type):
        """Sets the concept_type of this ConceptLinksInner.


        :param concept_type: The concept_type of this ConceptLinksInner.
        :type concept_type: str
        """

        self._concept_type = concept_type

    @property
    def is_times_tag(self):
        """Gets the is_times_tag of this ConceptLinksInner.


        :return: The is_times_tag of this ConceptLinksInner.
        :rtype: int
        """
        return self._is_times_tag

    @is_times_tag.setter
    def is_times_tag(self, is_times_tag):
        """Sets the is_times_tag of this ConceptLinksInner.


        :param is_times_tag: The is_times_tag of this ConceptLinksInner.
        :type is_times_tag: int
        """

        self._is_times_tag = is_times_tag

    @property
    def link(self):
        """Gets the link of this ConceptLinksInner.


        :return: The link of this ConceptLinksInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ConceptLinksInner.


        :param link: The link of this ConceptLinksInner.
        :type link: str
        """

        self._link = link

    @property
    def link_id(self):
        """Gets the link_id of this ConceptLinksInner.


        :return: The link_id of this ConceptLinksInner.
        :rtype: int
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """Sets the link_id of this ConceptLinksInner.


        :param link_id: The link_id of this ConceptLinksInner.
        :type link_id: int
        """

        self._link_id = link_id

    @property
    def link_type(self):
        """Gets the link_type of this ConceptLinksInner.


        :return: The link_type of this ConceptLinksInner.
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this ConceptLinksInner.


        :param link_type: The link_type of this ConceptLinksInner.
        :type link_type: str
        """

        self._link_type = link_type

    @property
    def mapping_type(self):
        """Gets the mapping_type of this ConceptLinksInner.


        :return: The mapping_type of this ConceptLinksInner.
        :rtype: str
        """
        return self._mapping_type

    @mapping_type.setter
    def mapping_type(self, mapping_type):
        """Sets the mapping_type of this ConceptLinksInner.


        :param mapping_type: The mapping_type of this ConceptLinksInner.
        :type mapping_type: str
        """

        self._mapping_type = mapping_type

    @property
    def relation(self):
        """Gets the relation of this ConceptLinksInner.


        :return: The relation of this ConceptLinksInner.
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this ConceptLinksInner.


        :param relation: The relation of this ConceptLinksInner.
        :type relation: str
        """

        self._relation = relation
