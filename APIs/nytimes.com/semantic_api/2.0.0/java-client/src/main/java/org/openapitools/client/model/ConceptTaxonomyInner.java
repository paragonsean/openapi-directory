/*
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConceptTaxonomyInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:32.898468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConceptTaxonomyInner {
  public static final String SERIALIZED_NAME_SOURCE_CONCEPT_ID = "source_concept_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONCEPT_ID)
  private Integer sourceConceptId;

  public static final String SERIALIZED_NAME_SOURCE_CONCEPT_NAME = "source_concept_name";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONCEPT_NAME)
  private String sourceConceptName;

  public static final String SERIALIZED_NAME_SOURCE_CONCEPT_TYPE = "source_concept_type";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONCEPT_TYPE)
  private String sourceConceptType;

  public static final String SERIALIZED_NAME_SOURCE_CONCEPT_VERNACULAR = "source_concept_vernacular";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONCEPT_VERNACULAR)
  private String sourceConceptVernacular;

  public static final String SERIALIZED_NAME_TARGET_CONCEPT_ID = "target_concept_id";
  @SerializedName(SERIALIZED_NAME_TARGET_CONCEPT_ID)
  private Integer targetConceptId;

  public static final String SERIALIZED_NAME_TARGET_CONCEPT_NAME = "target_concept_name";
  @SerializedName(SERIALIZED_NAME_TARGET_CONCEPT_NAME)
  private String targetConceptName;

  public static final String SERIALIZED_NAME_TARGET_CONCEPT_TYPE = "target_concept_type";
  @SerializedName(SERIALIZED_NAME_TARGET_CONCEPT_TYPE)
  private String targetConceptType;

  public static final String SERIALIZED_NAME_TARGET_CONCEPT_VERNACULAR = "target_concept_vernacular";
  @SerializedName(SERIALIZED_NAME_TARGET_CONCEPT_VERNACULAR)
  private String targetConceptVernacular;

  public static final String SERIALIZED_NAME_TAXONOMIC_RELATION = "taxonomic_relation";
  @SerializedName(SERIALIZED_NAME_TAXONOMIC_RELATION)
  private String taxonomicRelation;

  public static final String SERIALIZED_NAME_TAXONOMIC_VERIFICATION_STATUS = "taxonomic_verification_status";
  @SerializedName(SERIALIZED_NAME_TAXONOMIC_VERIFICATION_STATUS)
  private String taxonomicVerificationStatus;

  public ConceptTaxonomyInner() {
  }

  public ConceptTaxonomyInner sourceConceptId(Integer sourceConceptId) {
    this.sourceConceptId = sourceConceptId;
    return this;
  }

  /**
   * Get sourceConceptId
   * @return sourceConceptId
   */
  @javax.annotation.Nullable
  public Integer getSourceConceptId() {
    return sourceConceptId;
  }

  public void setSourceConceptId(Integer sourceConceptId) {
    this.sourceConceptId = sourceConceptId;
  }


  public ConceptTaxonomyInner sourceConceptName(String sourceConceptName) {
    this.sourceConceptName = sourceConceptName;
    return this;
  }

  /**
   * Get sourceConceptName
   * @return sourceConceptName
   */
  @javax.annotation.Nullable
  public String getSourceConceptName() {
    return sourceConceptName;
  }

  public void setSourceConceptName(String sourceConceptName) {
    this.sourceConceptName = sourceConceptName;
  }


  public ConceptTaxonomyInner sourceConceptType(String sourceConceptType) {
    this.sourceConceptType = sourceConceptType;
    return this;
  }

  /**
   * Get sourceConceptType
   * @return sourceConceptType
   */
  @javax.annotation.Nullable
  public String getSourceConceptType() {
    return sourceConceptType;
  }

  public void setSourceConceptType(String sourceConceptType) {
    this.sourceConceptType = sourceConceptType;
  }


  public ConceptTaxonomyInner sourceConceptVernacular(String sourceConceptVernacular) {
    this.sourceConceptVernacular = sourceConceptVernacular;
    return this;
  }

  /**
   * Get sourceConceptVernacular
   * @return sourceConceptVernacular
   */
  @javax.annotation.Nullable
  public String getSourceConceptVernacular() {
    return sourceConceptVernacular;
  }

  public void setSourceConceptVernacular(String sourceConceptVernacular) {
    this.sourceConceptVernacular = sourceConceptVernacular;
  }


  public ConceptTaxonomyInner targetConceptId(Integer targetConceptId) {
    this.targetConceptId = targetConceptId;
    return this;
  }

  /**
   * Get targetConceptId
   * @return targetConceptId
   */
  @javax.annotation.Nullable
  public Integer getTargetConceptId() {
    return targetConceptId;
  }

  public void setTargetConceptId(Integer targetConceptId) {
    this.targetConceptId = targetConceptId;
  }


  public ConceptTaxonomyInner targetConceptName(String targetConceptName) {
    this.targetConceptName = targetConceptName;
    return this;
  }

  /**
   * Get targetConceptName
   * @return targetConceptName
   */
  @javax.annotation.Nullable
  public String getTargetConceptName() {
    return targetConceptName;
  }

  public void setTargetConceptName(String targetConceptName) {
    this.targetConceptName = targetConceptName;
  }


  public ConceptTaxonomyInner targetConceptType(String targetConceptType) {
    this.targetConceptType = targetConceptType;
    return this;
  }

  /**
   * Get targetConceptType
   * @return targetConceptType
   */
  @javax.annotation.Nullable
  public String getTargetConceptType() {
    return targetConceptType;
  }

  public void setTargetConceptType(String targetConceptType) {
    this.targetConceptType = targetConceptType;
  }


  public ConceptTaxonomyInner targetConceptVernacular(String targetConceptVernacular) {
    this.targetConceptVernacular = targetConceptVernacular;
    return this;
  }

  /**
   * Get targetConceptVernacular
   * @return targetConceptVernacular
   */
  @javax.annotation.Nullable
  public String getTargetConceptVernacular() {
    return targetConceptVernacular;
  }

  public void setTargetConceptVernacular(String targetConceptVernacular) {
    this.targetConceptVernacular = targetConceptVernacular;
  }


  public ConceptTaxonomyInner taxonomicRelation(String taxonomicRelation) {
    this.taxonomicRelation = taxonomicRelation;
    return this;
  }

  /**
   * Get taxonomicRelation
   * @return taxonomicRelation
   */
  @javax.annotation.Nullable
  public String getTaxonomicRelation() {
    return taxonomicRelation;
  }

  public void setTaxonomicRelation(String taxonomicRelation) {
    this.taxonomicRelation = taxonomicRelation;
  }


  public ConceptTaxonomyInner taxonomicVerificationStatus(String taxonomicVerificationStatus) {
    this.taxonomicVerificationStatus = taxonomicVerificationStatus;
    return this;
  }

  /**
   * Get taxonomicVerificationStatus
   * @return taxonomicVerificationStatus
   */
  @javax.annotation.Nullable
  public String getTaxonomicVerificationStatus() {
    return taxonomicVerificationStatus;
  }

  public void setTaxonomicVerificationStatus(String taxonomicVerificationStatus) {
    this.taxonomicVerificationStatus = taxonomicVerificationStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConceptTaxonomyInner conceptTaxonomyInner = (ConceptTaxonomyInner) o;
    return Objects.equals(this.sourceConceptId, conceptTaxonomyInner.sourceConceptId) &&
        Objects.equals(this.sourceConceptName, conceptTaxonomyInner.sourceConceptName) &&
        Objects.equals(this.sourceConceptType, conceptTaxonomyInner.sourceConceptType) &&
        Objects.equals(this.sourceConceptVernacular, conceptTaxonomyInner.sourceConceptVernacular) &&
        Objects.equals(this.targetConceptId, conceptTaxonomyInner.targetConceptId) &&
        Objects.equals(this.targetConceptName, conceptTaxonomyInner.targetConceptName) &&
        Objects.equals(this.targetConceptType, conceptTaxonomyInner.targetConceptType) &&
        Objects.equals(this.targetConceptVernacular, conceptTaxonomyInner.targetConceptVernacular) &&
        Objects.equals(this.taxonomicRelation, conceptTaxonomyInner.taxonomicRelation) &&
        Objects.equals(this.taxonomicVerificationStatus, conceptTaxonomyInner.taxonomicVerificationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceConceptId, sourceConceptName, sourceConceptType, sourceConceptVernacular, targetConceptId, targetConceptName, targetConceptType, targetConceptVernacular, taxonomicRelation, taxonomicVerificationStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConceptTaxonomyInner {\n");
    sb.append("    sourceConceptId: ").append(toIndentedString(sourceConceptId)).append("\n");
    sb.append("    sourceConceptName: ").append(toIndentedString(sourceConceptName)).append("\n");
    sb.append("    sourceConceptType: ").append(toIndentedString(sourceConceptType)).append("\n");
    sb.append("    sourceConceptVernacular: ").append(toIndentedString(sourceConceptVernacular)).append("\n");
    sb.append("    targetConceptId: ").append(toIndentedString(targetConceptId)).append("\n");
    sb.append("    targetConceptName: ").append(toIndentedString(targetConceptName)).append("\n");
    sb.append("    targetConceptType: ").append(toIndentedString(targetConceptType)).append("\n");
    sb.append("    targetConceptVernacular: ").append(toIndentedString(targetConceptVernacular)).append("\n");
    sb.append("    taxonomicRelation: ").append(toIndentedString(taxonomicRelation)).append("\n");
    sb.append("    taxonomicVerificationStatus: ").append(toIndentedString(taxonomicVerificationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("source_concept_id");
    openapiFields.add("source_concept_name");
    openapiFields.add("source_concept_type");
    openapiFields.add("source_concept_vernacular");
    openapiFields.add("target_concept_id");
    openapiFields.add("target_concept_name");
    openapiFields.add("target_concept_type");
    openapiFields.add("target_concept_vernacular");
    openapiFields.add("taxonomic_relation");
    openapiFields.add("taxonomic_verification_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConceptTaxonomyInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConceptTaxonomyInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConceptTaxonomyInner is not found in the empty JSON string", ConceptTaxonomyInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConceptTaxonomyInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConceptTaxonomyInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("source_concept_name") != null && !jsonObj.get("source_concept_name").isJsonNull()) && !jsonObj.get("source_concept_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_concept_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_concept_name").toString()));
      }
      if ((jsonObj.get("source_concept_type") != null && !jsonObj.get("source_concept_type").isJsonNull()) && !jsonObj.get("source_concept_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_concept_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_concept_type").toString()));
      }
      if ((jsonObj.get("source_concept_vernacular") != null && !jsonObj.get("source_concept_vernacular").isJsonNull()) && !jsonObj.get("source_concept_vernacular").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_concept_vernacular` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_concept_vernacular").toString()));
      }
      if ((jsonObj.get("target_concept_name") != null && !jsonObj.get("target_concept_name").isJsonNull()) && !jsonObj.get("target_concept_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_concept_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_concept_name").toString()));
      }
      if ((jsonObj.get("target_concept_type") != null && !jsonObj.get("target_concept_type").isJsonNull()) && !jsonObj.get("target_concept_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_concept_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_concept_type").toString()));
      }
      if ((jsonObj.get("target_concept_vernacular") != null && !jsonObj.get("target_concept_vernacular").isJsonNull()) && !jsonObj.get("target_concept_vernacular").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_concept_vernacular` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_concept_vernacular").toString()));
      }
      if ((jsonObj.get("taxonomic_relation") != null && !jsonObj.get("taxonomic_relation").isJsonNull()) && !jsonObj.get("taxonomic_relation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxonomic_relation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxonomic_relation").toString()));
      }
      if ((jsonObj.get("taxonomic_verification_status") != null && !jsonObj.get("taxonomic_verification_status").isJsonNull()) && !jsonObj.get("taxonomic_verification_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxonomic_verification_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxonomic_verification_status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConceptTaxonomyInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConceptTaxonomyInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConceptTaxonomyInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConceptTaxonomyInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ConceptTaxonomyInner>() {
           @Override
           public void write(JsonWriter out, ConceptTaxonomyInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConceptTaxonomyInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConceptTaxonomyInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConceptTaxonomyInner
   * @throws IOException if the JSON string is invalid with respect to ConceptTaxonomyInner
   */
  public static ConceptTaxonomyInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConceptTaxonomyInner.class);
  }

  /**
   * Convert an instance of ConceptTaxonomyInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

