/*
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConceptArticleList;
import org.openapitools.client.model.ConceptCombinationsInner;
import org.openapitools.client.model.ConceptLinksInner;
import org.openapitools.client.model.ConceptRelation;
import org.openapitools.client.model.ConceptScopeNotesInner;
import org.openapitools.client.model.ConceptTaxonomyInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Concept
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:32.898468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Concept {
  public static final String SERIALIZED_NAME_ANCESTORS = "ancestors";
  @SerializedName(SERIALIZED_NAME_ANCESTORS)
  private List<ConceptRelation> ancestors = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARTICLE_LIST = "article_list";
  @SerializedName(SERIALIZED_NAME_ARTICLE_LIST)
  private ConceptArticleList articleList;

  public static final String SERIALIZED_NAME_COMBINATIONS = "combinations";
  @SerializedName(SERIALIZED_NAME_COMBINATIONS)
  private List<ConceptCombinationsInner> combinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONCEPT_CREATED = "concept_created";
  @SerializedName(SERIALIZED_NAME_CONCEPT_CREATED)
  private String conceptCreated;

  public static final String SERIALIZED_NAME_CONCEPT_ID = "concept_id";
  @SerializedName(SERIALIZED_NAME_CONCEPT_ID)
  private Integer conceptId;

  public static final String SERIALIZED_NAME_CONCEPT_NAME = "concept_name";
  @SerializedName(SERIALIZED_NAME_CONCEPT_NAME)
  private String conceptName;

  public static final String SERIALIZED_NAME_CONCEPT_STATUS = "concept_status";
  @SerializedName(SERIALIZED_NAME_CONCEPT_STATUS)
  private String conceptStatus;

  public static final String SERIALIZED_NAME_CONCEPT_TYPE = "concept_type";
  @SerializedName(SERIALIZED_NAME_CONCEPT_TYPE)
  private String conceptType;

  public static final String SERIALIZED_NAME_CONCEPT_UPDATED = "concept_updated";
  @SerializedName(SERIALIZED_NAME_CONCEPT_UPDATED)
  private String conceptUpdated;

  public static final String SERIALIZED_NAME_DESCENDANTS = "descendants";
  @SerializedName(SERIALIZED_NAME_DESCENDANTS)
  private List<ConceptRelation> descendants = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_TIMES_TAG = "is_times_tag";
  @SerializedName(SERIALIZED_NAME_IS_TIMES_TAG)
  private Integer isTimesTag;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ConceptLinksInner> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPE_NOTES = "scope_notes";
  @SerializedName(SERIALIZED_NAME_SCOPE_NOTES)
  private List<ConceptScopeNotesInner> scopeNotes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEARCH_API_QUERY = "search_api_query";
  @SerializedName(SERIALIZED_NAME_SEARCH_API_QUERY)
  private String searchApiQuery;

  public static final String SERIALIZED_NAME_TAXONOMY = "taxonomy";
  @SerializedName(SERIALIZED_NAME_TAXONOMY)
  private List<ConceptTaxonomyInner> taxonomy = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERNACULAR = "vernacular";
  @SerializedName(SERIALIZED_NAME_VERNACULAR)
  private String vernacular;

  public Concept() {
  }

  public Concept ancestors(List<ConceptRelation> ancestors) {
    this.ancestors = ancestors;
    return this;
  }

  public Concept addAncestorsItem(ConceptRelation ancestorsItem) {
    if (this.ancestors == null) {
      this.ancestors = new ArrayList<>();
    }
    this.ancestors.add(ancestorsItem);
    return this;
  }

  /**
   * Get ancestors
   * @return ancestors
   */
  @javax.annotation.Nullable
  public List<ConceptRelation> getAncestors() {
    return ancestors;
  }

  public void setAncestors(List<ConceptRelation> ancestors) {
    this.ancestors = ancestors;
  }


  public Concept articleList(ConceptArticleList articleList) {
    this.articleList = articleList;
    return this;
  }

  /**
   * Get articleList
   * @return articleList
   */
  @javax.annotation.Nullable
  public ConceptArticleList getArticleList() {
    return articleList;
  }

  public void setArticleList(ConceptArticleList articleList) {
    this.articleList = articleList;
  }


  public Concept combinations(List<ConceptCombinationsInner> combinations) {
    this.combinations = combinations;
    return this;
  }

  public Concept addCombinationsItem(ConceptCombinationsInner combinationsItem) {
    if (this.combinations == null) {
      this.combinations = new ArrayList<>();
    }
    this.combinations.add(combinationsItem);
    return this;
  }

  /**
   * Get combinations
   * @return combinations
   */
  @javax.annotation.Nullable
  public List<ConceptCombinationsInner> getCombinations() {
    return combinations;
  }

  public void setCombinations(List<ConceptCombinationsInner> combinations) {
    this.combinations = combinations;
  }


  public Concept conceptCreated(String conceptCreated) {
    this.conceptCreated = conceptCreated;
    return this;
  }

  /**
   * Get conceptCreated
   * @return conceptCreated
   */
  @javax.annotation.Nullable
  public String getConceptCreated() {
    return conceptCreated;
  }

  public void setConceptCreated(String conceptCreated) {
    this.conceptCreated = conceptCreated;
  }


  public Concept conceptId(Integer conceptId) {
    this.conceptId = conceptId;
    return this;
  }

  /**
   * Get conceptId
   * @return conceptId
   */
  @javax.annotation.Nullable
  public Integer getConceptId() {
    return conceptId;
  }

  public void setConceptId(Integer conceptId) {
    this.conceptId = conceptId;
  }


  public Concept conceptName(String conceptName) {
    this.conceptName = conceptName;
    return this;
  }

  /**
   * Get conceptName
   * @return conceptName
   */
  @javax.annotation.Nullable
  public String getConceptName() {
    return conceptName;
  }

  public void setConceptName(String conceptName) {
    this.conceptName = conceptName;
  }


  public Concept conceptStatus(String conceptStatus) {
    this.conceptStatus = conceptStatus;
    return this;
  }

  /**
   * Get conceptStatus
   * @return conceptStatus
   */
  @javax.annotation.Nullable
  public String getConceptStatus() {
    return conceptStatus;
  }

  public void setConceptStatus(String conceptStatus) {
    this.conceptStatus = conceptStatus;
  }


  public Concept conceptType(String conceptType) {
    this.conceptType = conceptType;
    return this;
  }

  /**
   * Get conceptType
   * @return conceptType
   */
  @javax.annotation.Nullable
  public String getConceptType() {
    return conceptType;
  }

  public void setConceptType(String conceptType) {
    this.conceptType = conceptType;
  }


  public Concept conceptUpdated(String conceptUpdated) {
    this.conceptUpdated = conceptUpdated;
    return this;
  }

  /**
   * Get conceptUpdated
   * @return conceptUpdated
   */
  @javax.annotation.Nullable
  public String getConceptUpdated() {
    return conceptUpdated;
  }

  public void setConceptUpdated(String conceptUpdated) {
    this.conceptUpdated = conceptUpdated;
  }


  public Concept descendants(List<ConceptRelation> descendants) {
    this.descendants = descendants;
    return this;
  }

  public Concept addDescendantsItem(ConceptRelation descendantsItem) {
    if (this.descendants == null) {
      this.descendants = new ArrayList<>();
    }
    this.descendants.add(descendantsItem);
    return this;
  }

  /**
   * Get descendants
   * @return descendants
   */
  @javax.annotation.Nullable
  public List<ConceptRelation> getDescendants() {
    return descendants;
  }

  public void setDescendants(List<ConceptRelation> descendants) {
    this.descendants = descendants;
  }


  public Concept isTimesTag(Integer isTimesTag) {
    this.isTimesTag = isTimesTag;
    return this;
  }

  /**
   * Get isTimesTag
   * @return isTimesTag
   */
  @javax.annotation.Nullable
  public Integer getIsTimesTag() {
    return isTimesTag;
  }

  public void setIsTimesTag(Integer isTimesTag) {
    this.isTimesTag = isTimesTag;
  }


  public Concept links(List<ConceptLinksInner> links) {
    this.links = links;
    return this;
  }

  public Concept addLinksItem(ConceptLinksInner linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<ConceptLinksInner> getLinks() {
    return links;
  }

  public void setLinks(List<ConceptLinksInner> links) {
    this.links = links;
  }


  public Concept scopeNotes(List<ConceptScopeNotesInner> scopeNotes) {
    this.scopeNotes = scopeNotes;
    return this;
  }

  public Concept addScopeNotesItem(ConceptScopeNotesInner scopeNotesItem) {
    if (this.scopeNotes == null) {
      this.scopeNotes = new ArrayList<>();
    }
    this.scopeNotes.add(scopeNotesItem);
    return this;
  }

  /**
   * Get scopeNotes
   * @return scopeNotes
   */
  @javax.annotation.Nullable
  public List<ConceptScopeNotesInner> getScopeNotes() {
    return scopeNotes;
  }

  public void setScopeNotes(List<ConceptScopeNotesInner> scopeNotes) {
    this.scopeNotes = scopeNotes;
  }


  public Concept searchApiQuery(String searchApiQuery) {
    this.searchApiQuery = searchApiQuery;
    return this;
  }

  /**
   * Get searchApiQuery
   * @return searchApiQuery
   */
  @javax.annotation.Nullable
  public String getSearchApiQuery() {
    return searchApiQuery;
  }

  public void setSearchApiQuery(String searchApiQuery) {
    this.searchApiQuery = searchApiQuery;
  }


  public Concept taxonomy(List<ConceptTaxonomyInner> taxonomy) {
    this.taxonomy = taxonomy;
    return this;
  }

  public Concept addTaxonomyItem(ConceptTaxonomyInner taxonomyItem) {
    if (this.taxonomy == null) {
      this.taxonomy = new ArrayList<>();
    }
    this.taxonomy.add(taxonomyItem);
    return this;
  }

  /**
   * Get taxonomy
   * @return taxonomy
   */
  @javax.annotation.Nullable
  public List<ConceptTaxonomyInner> getTaxonomy() {
    return taxonomy;
  }

  public void setTaxonomy(List<ConceptTaxonomyInner> taxonomy) {
    this.taxonomy = taxonomy;
  }


  public Concept vernacular(String vernacular) {
    this.vernacular = vernacular;
    return this;
  }

  /**
   * Get vernacular
   * @return vernacular
   */
  @javax.annotation.Nullable
  public String getVernacular() {
    return vernacular;
  }

  public void setVernacular(String vernacular) {
    this.vernacular = vernacular;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Concept concept = (Concept) o;
    return Objects.equals(this.ancestors, concept.ancestors) &&
        Objects.equals(this.articleList, concept.articleList) &&
        Objects.equals(this.combinations, concept.combinations) &&
        Objects.equals(this.conceptCreated, concept.conceptCreated) &&
        Objects.equals(this.conceptId, concept.conceptId) &&
        Objects.equals(this.conceptName, concept.conceptName) &&
        Objects.equals(this.conceptStatus, concept.conceptStatus) &&
        Objects.equals(this.conceptType, concept.conceptType) &&
        Objects.equals(this.conceptUpdated, concept.conceptUpdated) &&
        Objects.equals(this.descendants, concept.descendants) &&
        Objects.equals(this.isTimesTag, concept.isTimesTag) &&
        Objects.equals(this.links, concept.links) &&
        Objects.equals(this.scopeNotes, concept.scopeNotes) &&
        Objects.equals(this.searchApiQuery, concept.searchApiQuery) &&
        Objects.equals(this.taxonomy, concept.taxonomy) &&
        Objects.equals(this.vernacular, concept.vernacular);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ancestors, articleList, combinations, conceptCreated, conceptId, conceptName, conceptStatus, conceptType, conceptUpdated, descendants, isTimesTag, links, scopeNotes, searchApiQuery, taxonomy, vernacular);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Concept {\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("    articleList: ").append(toIndentedString(articleList)).append("\n");
    sb.append("    combinations: ").append(toIndentedString(combinations)).append("\n");
    sb.append("    conceptCreated: ").append(toIndentedString(conceptCreated)).append("\n");
    sb.append("    conceptId: ").append(toIndentedString(conceptId)).append("\n");
    sb.append("    conceptName: ").append(toIndentedString(conceptName)).append("\n");
    sb.append("    conceptStatus: ").append(toIndentedString(conceptStatus)).append("\n");
    sb.append("    conceptType: ").append(toIndentedString(conceptType)).append("\n");
    sb.append("    conceptUpdated: ").append(toIndentedString(conceptUpdated)).append("\n");
    sb.append("    descendants: ").append(toIndentedString(descendants)).append("\n");
    sb.append("    isTimesTag: ").append(toIndentedString(isTimesTag)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    scopeNotes: ").append(toIndentedString(scopeNotes)).append("\n");
    sb.append("    searchApiQuery: ").append(toIndentedString(searchApiQuery)).append("\n");
    sb.append("    taxonomy: ").append(toIndentedString(taxonomy)).append("\n");
    sb.append("    vernacular: ").append(toIndentedString(vernacular)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ancestors");
    openapiFields.add("article_list");
    openapiFields.add("combinations");
    openapiFields.add("concept_created");
    openapiFields.add("concept_id");
    openapiFields.add("concept_name");
    openapiFields.add("concept_status");
    openapiFields.add("concept_type");
    openapiFields.add("concept_updated");
    openapiFields.add("descendants");
    openapiFields.add("is_times_tag");
    openapiFields.add("links");
    openapiFields.add("scope_notes");
    openapiFields.add("search_api_query");
    openapiFields.add("taxonomy");
    openapiFields.add("vernacular");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Concept
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Concept.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Concept is not found in the empty JSON string", Concept.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Concept.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Concept` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ancestors") != null && !jsonObj.get("ancestors").isJsonNull()) {
        JsonArray jsonArrayancestors = jsonObj.getAsJsonArray("ancestors");
        if (jsonArrayancestors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ancestors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ancestors` to be an array in the JSON string but got `%s`", jsonObj.get("ancestors").toString()));
          }

          // validate the optional field `ancestors` (array)
          for (int i = 0; i < jsonArrayancestors.size(); i++) {
            ConceptRelation.validateJsonElement(jsonArrayancestors.get(i));
          };
        }
      }
      // validate the optional field `article_list`
      if (jsonObj.get("article_list") != null && !jsonObj.get("article_list").isJsonNull()) {
        ConceptArticleList.validateJsonElement(jsonObj.get("article_list"));
      }
      if (jsonObj.get("combinations") != null && !jsonObj.get("combinations").isJsonNull()) {
        JsonArray jsonArraycombinations = jsonObj.getAsJsonArray("combinations");
        if (jsonArraycombinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("combinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `combinations` to be an array in the JSON string but got `%s`", jsonObj.get("combinations").toString()));
          }

          // validate the optional field `combinations` (array)
          for (int i = 0; i < jsonArraycombinations.size(); i++) {
            ConceptCombinationsInner.validateJsonElement(jsonArraycombinations.get(i));
          };
        }
      }
      if ((jsonObj.get("concept_created") != null && !jsonObj.get("concept_created").isJsonNull()) && !jsonObj.get("concept_created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concept_created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concept_created").toString()));
      }
      if ((jsonObj.get("concept_name") != null && !jsonObj.get("concept_name").isJsonNull()) && !jsonObj.get("concept_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concept_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concept_name").toString()));
      }
      if ((jsonObj.get("concept_status") != null && !jsonObj.get("concept_status").isJsonNull()) && !jsonObj.get("concept_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concept_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concept_status").toString()));
      }
      if ((jsonObj.get("concept_type") != null && !jsonObj.get("concept_type").isJsonNull()) && !jsonObj.get("concept_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concept_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concept_type").toString()));
      }
      if ((jsonObj.get("concept_updated") != null && !jsonObj.get("concept_updated").isJsonNull()) && !jsonObj.get("concept_updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concept_updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concept_updated").toString()));
      }
      if (jsonObj.get("descendants") != null && !jsonObj.get("descendants").isJsonNull()) {
        JsonArray jsonArraydescendants = jsonObj.getAsJsonArray("descendants");
        if (jsonArraydescendants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("descendants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `descendants` to be an array in the JSON string but got `%s`", jsonObj.get("descendants").toString()));
          }

          // validate the optional field `descendants` (array)
          for (int i = 0; i < jsonArraydescendants.size(); i++) {
            ConceptRelation.validateJsonElement(jsonArraydescendants.get(i));
          };
        }
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ConceptLinksInner.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if (jsonObj.get("scope_notes") != null && !jsonObj.get("scope_notes").isJsonNull()) {
        JsonArray jsonArrayscopeNotes = jsonObj.getAsJsonArray("scope_notes");
        if (jsonArrayscopeNotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scope_notes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scope_notes` to be an array in the JSON string but got `%s`", jsonObj.get("scope_notes").toString()));
          }

          // validate the optional field `scope_notes` (array)
          for (int i = 0; i < jsonArrayscopeNotes.size(); i++) {
            ConceptScopeNotesInner.validateJsonElement(jsonArrayscopeNotes.get(i));
          };
        }
      }
      if ((jsonObj.get("search_api_query") != null && !jsonObj.get("search_api_query").isJsonNull()) && !jsonObj.get("search_api_query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_api_query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_api_query").toString()));
      }
      if (jsonObj.get("taxonomy") != null && !jsonObj.get("taxonomy").isJsonNull()) {
        JsonArray jsonArraytaxonomy = jsonObj.getAsJsonArray("taxonomy");
        if (jsonArraytaxonomy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxonomy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxonomy` to be an array in the JSON string but got `%s`", jsonObj.get("taxonomy").toString()));
          }

          // validate the optional field `taxonomy` (array)
          for (int i = 0; i < jsonArraytaxonomy.size(); i++) {
            ConceptTaxonomyInner.validateJsonElement(jsonArraytaxonomy.get(i));
          };
        }
      }
      if ((jsonObj.get("vernacular") != null && !jsonObj.get("vernacular").isJsonNull()) && !jsonObj.get("vernacular").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vernacular` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vernacular").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Concept.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Concept' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Concept> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Concept.class));

       return (TypeAdapter<T>) new TypeAdapter<Concept>() {
           @Override
           public void write(JsonWriter out, Concept value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Concept read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Concept given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Concept
   * @throws IOException if the JSON string is invalid with respect to Concept
   */
  public static Concept fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Concept.class);
  }

  /**
   * Convert an instance of Concept to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

