/*
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConceptLinksInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:32.898468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConceptLinksInner {
  public static final String SERIALIZED_NAME_CONCEPT_ID = "concept_id";
  @SerializedName(SERIALIZED_NAME_CONCEPT_ID)
  private Integer conceptId;

  public static final String SERIALIZED_NAME_CONCEPT_NAME = "concept_name";
  @SerializedName(SERIALIZED_NAME_CONCEPT_NAME)
  private String conceptName;

  public static final String SERIALIZED_NAME_CONCEPT_STATUS = "concept_status";
  @SerializedName(SERIALIZED_NAME_CONCEPT_STATUS)
  private String conceptStatus;

  public static final String SERIALIZED_NAME_CONCEPT_TYPE = "concept_type";
  @SerializedName(SERIALIZED_NAME_CONCEPT_TYPE)
  private String conceptType;

  public static final String SERIALIZED_NAME_IS_TIMES_TAG = "is_times_tag";
  @SerializedName(SERIALIZED_NAME_IS_TIMES_TAG)
  private Integer isTimesTag;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINK_ID = "link_id";
  @SerializedName(SERIALIZED_NAME_LINK_ID)
  private Integer linkId;

  public static final String SERIALIZED_NAME_LINK_TYPE = "link_type";
  @SerializedName(SERIALIZED_NAME_LINK_TYPE)
  private String linkType;

  public static final String SERIALIZED_NAME_MAPPING_TYPE = "mapping_type";
  @SerializedName(SERIALIZED_NAME_MAPPING_TYPE)
  private String mappingType;

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  private String relation;

  public ConceptLinksInner() {
  }

  public ConceptLinksInner conceptId(Integer conceptId) {
    this.conceptId = conceptId;
    return this;
  }

  /**
   * Get conceptId
   * @return conceptId
   */
  @javax.annotation.Nullable
  public Integer getConceptId() {
    return conceptId;
  }

  public void setConceptId(Integer conceptId) {
    this.conceptId = conceptId;
  }


  public ConceptLinksInner conceptName(String conceptName) {
    this.conceptName = conceptName;
    return this;
  }

  /**
   * Get conceptName
   * @return conceptName
   */
  @javax.annotation.Nullable
  public String getConceptName() {
    return conceptName;
  }

  public void setConceptName(String conceptName) {
    this.conceptName = conceptName;
  }


  public ConceptLinksInner conceptStatus(String conceptStatus) {
    this.conceptStatus = conceptStatus;
    return this;
  }

  /**
   * Get conceptStatus
   * @return conceptStatus
   */
  @javax.annotation.Nullable
  public String getConceptStatus() {
    return conceptStatus;
  }

  public void setConceptStatus(String conceptStatus) {
    this.conceptStatus = conceptStatus;
  }


  public ConceptLinksInner conceptType(String conceptType) {
    this.conceptType = conceptType;
    return this;
  }

  /**
   * Get conceptType
   * @return conceptType
   */
  @javax.annotation.Nullable
  public String getConceptType() {
    return conceptType;
  }

  public void setConceptType(String conceptType) {
    this.conceptType = conceptType;
  }


  public ConceptLinksInner isTimesTag(Integer isTimesTag) {
    this.isTimesTag = isTimesTag;
    return this;
  }

  /**
   * Get isTimesTag
   * @return isTimesTag
   */
  @javax.annotation.Nullable
  public Integer getIsTimesTag() {
    return isTimesTag;
  }

  public void setIsTimesTag(Integer isTimesTag) {
    this.isTimesTag = isTimesTag;
  }


  public ConceptLinksInner link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public ConceptLinksInner linkId(Integer linkId) {
    this.linkId = linkId;
    return this;
  }

  /**
   * Get linkId
   * @return linkId
   */
  @javax.annotation.Nullable
  public Integer getLinkId() {
    return linkId;
  }

  public void setLinkId(Integer linkId) {
    this.linkId = linkId;
  }


  public ConceptLinksInner linkType(String linkType) {
    this.linkType = linkType;
    return this;
  }

  /**
   * Get linkType
   * @return linkType
   */
  @javax.annotation.Nullable
  public String getLinkType() {
    return linkType;
  }

  public void setLinkType(String linkType) {
    this.linkType = linkType;
  }


  public ConceptLinksInner mappingType(String mappingType) {
    this.mappingType = mappingType;
    return this;
  }

  /**
   * Get mappingType
   * @return mappingType
   */
  @javax.annotation.Nullable
  public String getMappingType() {
    return mappingType;
  }

  public void setMappingType(String mappingType) {
    this.mappingType = mappingType;
  }


  public ConceptLinksInner relation(String relation) {
    this.relation = relation;
    return this;
  }

  /**
   * Get relation
   * @return relation
   */
  @javax.annotation.Nullable
  public String getRelation() {
    return relation;
  }

  public void setRelation(String relation) {
    this.relation = relation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConceptLinksInner conceptLinksInner = (ConceptLinksInner) o;
    return Objects.equals(this.conceptId, conceptLinksInner.conceptId) &&
        Objects.equals(this.conceptName, conceptLinksInner.conceptName) &&
        Objects.equals(this.conceptStatus, conceptLinksInner.conceptStatus) &&
        Objects.equals(this.conceptType, conceptLinksInner.conceptType) &&
        Objects.equals(this.isTimesTag, conceptLinksInner.isTimesTag) &&
        Objects.equals(this.link, conceptLinksInner.link) &&
        Objects.equals(this.linkId, conceptLinksInner.linkId) &&
        Objects.equals(this.linkType, conceptLinksInner.linkType) &&
        Objects.equals(this.mappingType, conceptLinksInner.mappingType) &&
        Objects.equals(this.relation, conceptLinksInner.relation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conceptId, conceptName, conceptStatus, conceptType, isTimesTag, link, linkId, linkType, mappingType, relation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConceptLinksInner {\n");
    sb.append("    conceptId: ").append(toIndentedString(conceptId)).append("\n");
    sb.append("    conceptName: ").append(toIndentedString(conceptName)).append("\n");
    sb.append("    conceptStatus: ").append(toIndentedString(conceptStatus)).append("\n");
    sb.append("    conceptType: ").append(toIndentedString(conceptType)).append("\n");
    sb.append("    isTimesTag: ").append(toIndentedString(isTimesTag)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkId: ").append(toIndentedString(linkId)).append("\n");
    sb.append("    linkType: ").append(toIndentedString(linkType)).append("\n");
    sb.append("    mappingType: ").append(toIndentedString(mappingType)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("concept_id");
    openapiFields.add("concept_name");
    openapiFields.add("concept_status");
    openapiFields.add("concept_type");
    openapiFields.add("is_times_tag");
    openapiFields.add("link");
    openapiFields.add("link_id");
    openapiFields.add("link_type");
    openapiFields.add("mapping_type");
    openapiFields.add("relation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConceptLinksInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConceptLinksInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConceptLinksInner is not found in the empty JSON string", ConceptLinksInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConceptLinksInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConceptLinksInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("concept_name") != null && !jsonObj.get("concept_name").isJsonNull()) && !jsonObj.get("concept_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concept_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concept_name").toString()));
      }
      if ((jsonObj.get("concept_status") != null && !jsonObj.get("concept_status").isJsonNull()) && !jsonObj.get("concept_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concept_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concept_status").toString()));
      }
      if ((jsonObj.get("concept_type") != null && !jsonObj.get("concept_type").isJsonNull()) && !jsonObj.get("concept_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concept_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concept_type").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("link_type") != null && !jsonObj.get("link_type").isJsonNull()) && !jsonObj.get("link_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_type").toString()));
      }
      if ((jsonObj.get("mapping_type") != null && !jsonObj.get("mapping_type").isJsonNull()) && !jsonObj.get("mapping_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapping_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapping_type").toString()));
      }
      if ((jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull()) && !jsonObj.get("relation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConceptLinksInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConceptLinksInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConceptLinksInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConceptLinksInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ConceptLinksInner>() {
           @Override
           public void write(JsonWriter out, ConceptLinksInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConceptLinksInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConceptLinksInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConceptLinksInner
   * @throws IOException if the JSON string is invalid with respect to ConceptLinksInner
   */
  public static ConceptLinksInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConceptLinksInner.class);
  }

  /**
   * Convert an instance of ConceptLinksInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

