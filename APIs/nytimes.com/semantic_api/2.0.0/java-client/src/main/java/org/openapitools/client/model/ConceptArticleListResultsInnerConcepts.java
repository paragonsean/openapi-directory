/*
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConceptArticleListResultsInnerConcepts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:32.898468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConceptArticleListResultsInnerConcepts {
  public static final String SERIALIZED_NAME_NYTD_DES = "nytd_des";
  @SerializedName(SERIALIZED_NAME_NYTD_DES)
  private List<String> nytdDes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NYTD_ORG = "nytd_org";
  @SerializedName(SERIALIZED_NAME_NYTD_ORG)
  private List<String> nytdOrg = new ArrayList<>();

  public static final String SERIALIZED_NAME_NYTD_PER = "nytd_per";
  @SerializedName(SERIALIZED_NAME_NYTD_PER)
  private List<String> nytdPer = new ArrayList<>();

  public ConceptArticleListResultsInnerConcepts() {
  }

  public ConceptArticleListResultsInnerConcepts nytdDes(List<String> nytdDes) {
    this.nytdDes = nytdDes;
    return this;
  }

  public ConceptArticleListResultsInnerConcepts addNytdDesItem(String nytdDesItem) {
    if (this.nytdDes == null) {
      this.nytdDes = new ArrayList<>();
    }
    this.nytdDes.add(nytdDesItem);
    return this;
  }

  /**
   * Get nytdDes
   * @return nytdDes
   */
  @javax.annotation.Nullable
  public List<String> getNytdDes() {
    return nytdDes;
  }

  public void setNytdDes(List<String> nytdDes) {
    this.nytdDes = nytdDes;
  }


  public ConceptArticleListResultsInnerConcepts nytdOrg(List<String> nytdOrg) {
    this.nytdOrg = nytdOrg;
    return this;
  }

  public ConceptArticleListResultsInnerConcepts addNytdOrgItem(String nytdOrgItem) {
    if (this.nytdOrg == null) {
      this.nytdOrg = new ArrayList<>();
    }
    this.nytdOrg.add(nytdOrgItem);
    return this;
  }

  /**
   * Get nytdOrg
   * @return nytdOrg
   */
  @javax.annotation.Nullable
  public List<String> getNytdOrg() {
    return nytdOrg;
  }

  public void setNytdOrg(List<String> nytdOrg) {
    this.nytdOrg = nytdOrg;
  }


  public ConceptArticleListResultsInnerConcepts nytdPer(List<String> nytdPer) {
    this.nytdPer = nytdPer;
    return this;
  }

  public ConceptArticleListResultsInnerConcepts addNytdPerItem(String nytdPerItem) {
    if (this.nytdPer == null) {
      this.nytdPer = new ArrayList<>();
    }
    this.nytdPer.add(nytdPerItem);
    return this;
  }

  /**
   * Get nytdPer
   * @return nytdPer
   */
  @javax.annotation.Nullable
  public List<String> getNytdPer() {
    return nytdPer;
  }

  public void setNytdPer(List<String> nytdPer) {
    this.nytdPer = nytdPer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConceptArticleListResultsInnerConcepts conceptArticleListResultsInnerConcepts = (ConceptArticleListResultsInnerConcepts) o;
    return Objects.equals(this.nytdDes, conceptArticleListResultsInnerConcepts.nytdDes) &&
        Objects.equals(this.nytdOrg, conceptArticleListResultsInnerConcepts.nytdOrg) &&
        Objects.equals(this.nytdPer, conceptArticleListResultsInnerConcepts.nytdPer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nytdDes, nytdOrg, nytdPer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConceptArticleListResultsInnerConcepts {\n");
    sb.append("    nytdDes: ").append(toIndentedString(nytdDes)).append("\n");
    sb.append("    nytdOrg: ").append(toIndentedString(nytdOrg)).append("\n");
    sb.append("    nytdPer: ").append(toIndentedString(nytdPer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nytd_des");
    openapiFields.add("nytd_org");
    openapiFields.add("nytd_per");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConceptArticleListResultsInnerConcepts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConceptArticleListResultsInnerConcepts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConceptArticleListResultsInnerConcepts is not found in the empty JSON string", ConceptArticleListResultsInnerConcepts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConceptArticleListResultsInnerConcepts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConceptArticleListResultsInnerConcepts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("nytd_des") != null && !jsonObj.get("nytd_des").isJsonNull() && !jsonObj.get("nytd_des").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nytd_des` to be an array in the JSON string but got `%s`", jsonObj.get("nytd_des").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nytd_org") != null && !jsonObj.get("nytd_org").isJsonNull() && !jsonObj.get("nytd_org").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nytd_org` to be an array in the JSON string but got `%s`", jsonObj.get("nytd_org").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nytd_per") != null && !jsonObj.get("nytd_per").isJsonNull() && !jsonObj.get("nytd_per").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nytd_per` to be an array in the JSON string but got `%s`", jsonObj.get("nytd_per").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConceptArticleListResultsInnerConcepts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConceptArticleListResultsInnerConcepts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConceptArticleListResultsInnerConcepts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConceptArticleListResultsInnerConcepts.class));

       return (TypeAdapter<T>) new TypeAdapter<ConceptArticleListResultsInnerConcepts>() {
           @Override
           public void write(JsonWriter out, ConceptArticleListResultsInnerConcepts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConceptArticleListResultsInnerConcepts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConceptArticleListResultsInnerConcepts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConceptArticleListResultsInnerConcepts
   * @throws IOException if the JSON string is invalid with respect to ConceptArticleListResultsInnerConcepts
   */
  public static ConceptArticleListResultsInnerConcepts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConceptArticleListResultsInnerConcepts.class);
  }

  /**
   * Convert an instance of ConceptArticleListResultsInnerConcepts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

