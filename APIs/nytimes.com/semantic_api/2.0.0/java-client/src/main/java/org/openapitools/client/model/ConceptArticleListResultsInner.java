/*
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConceptArticleListResultsInnerConcepts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConceptArticleListResultsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:32.898468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConceptArticleListResultsInner {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BYLINE = "byline";
  @SerializedName(SERIALIZED_NAME_BYLINE)
  private String byline;

  public static final String SERIALIZED_NAME_CONCEPTS = "concepts";
  @SerializedName(SERIALIZED_NAME_CONCEPTS)
  private ConceptArticleListResultsInnerConcepts concepts;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "document_type";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE_OF_MATERIAL = "type_of_material";
  @SerializedName(SERIALIZED_NAME_TYPE_OF_MATERIAL)
  private String typeOfMaterial;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ConceptArticleListResultsInner() {
  }

  public ConceptArticleListResultsInner body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public ConceptArticleListResultsInner byline(String byline) {
    this.byline = byline;
    return this;
  }

  /**
   * Get byline
   * @return byline
   */
  @javax.annotation.Nullable
  public String getByline() {
    return byline;
  }

  public void setByline(String byline) {
    this.byline = byline;
  }


  public ConceptArticleListResultsInner concepts(ConceptArticleListResultsInnerConcepts concepts) {
    this.concepts = concepts;
    return this;
  }

  /**
   * Get concepts
   * @return concepts
   */
  @javax.annotation.Nullable
  public ConceptArticleListResultsInnerConcepts getConcepts() {
    return concepts;
  }

  public void setConcepts(ConceptArticleListResultsInnerConcepts concepts) {
    this.concepts = concepts;
  }


  public ConceptArticleListResultsInner date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public ConceptArticleListResultsInner documentType(String documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * Get documentType
   * @return documentType
   */
  @javax.annotation.Nullable
  public String getDocumentType() {
    return documentType;
  }

  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public ConceptArticleListResultsInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ConceptArticleListResultsInner typeOfMaterial(String typeOfMaterial) {
    this.typeOfMaterial = typeOfMaterial;
    return this;
  }

  /**
   * Get typeOfMaterial
   * @return typeOfMaterial
   */
  @javax.annotation.Nullable
  public String getTypeOfMaterial() {
    return typeOfMaterial;
  }

  public void setTypeOfMaterial(String typeOfMaterial) {
    this.typeOfMaterial = typeOfMaterial;
  }


  public ConceptArticleListResultsInner url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConceptArticleListResultsInner conceptArticleListResultsInner = (ConceptArticleListResultsInner) o;
    return Objects.equals(this.body, conceptArticleListResultsInner.body) &&
        Objects.equals(this.byline, conceptArticleListResultsInner.byline) &&
        Objects.equals(this.concepts, conceptArticleListResultsInner.concepts) &&
        Objects.equals(this.date, conceptArticleListResultsInner.date) &&
        Objects.equals(this.documentType, conceptArticleListResultsInner.documentType) &&
        Objects.equals(this.title, conceptArticleListResultsInner.title) &&
        Objects.equals(this.typeOfMaterial, conceptArticleListResultsInner.typeOfMaterial) &&
        Objects.equals(this.url, conceptArticleListResultsInner.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, byline, concepts, date, documentType, title, typeOfMaterial, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConceptArticleListResultsInner {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    byline: ").append(toIndentedString(byline)).append("\n");
    sb.append("    concepts: ").append(toIndentedString(concepts)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    typeOfMaterial: ").append(toIndentedString(typeOfMaterial)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("byline");
    openapiFields.add("concepts");
    openapiFields.add("date");
    openapiFields.add("document_type");
    openapiFields.add("title");
    openapiFields.add("type_of_material");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConceptArticleListResultsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConceptArticleListResultsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConceptArticleListResultsInner is not found in the empty JSON string", ConceptArticleListResultsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConceptArticleListResultsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConceptArticleListResultsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("byline") != null && !jsonObj.get("byline").isJsonNull()) && !jsonObj.get("byline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `byline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("byline").toString()));
      }
      // validate the optional field `concepts`
      if (jsonObj.get("concepts") != null && !jsonObj.get("concepts").isJsonNull()) {
        ConceptArticleListResultsInnerConcepts.validateJsonElement(jsonObj.get("concepts"));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("document_type") != null && !jsonObj.get("document_type").isJsonNull()) && !jsonObj.get("document_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_type").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type_of_material") != null && !jsonObj.get("type_of_material").isJsonNull()) && !jsonObj.get("type_of_material").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_of_material` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_of_material").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConceptArticleListResultsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConceptArticleListResultsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConceptArticleListResultsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConceptArticleListResultsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ConceptArticleListResultsInner>() {
           @Override
           public void write(JsonWriter out, ConceptArticleListResultsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConceptArticleListResultsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConceptArticleListResultsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConceptArticleListResultsInner
   * @throws IOException if the JSON string is invalid with respect to ConceptArticleListResultsInner
   */
  public static ConceptArticleListResultsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConceptArticleListResultsInner.class);
  }

  /**
   * Convert an instance of ConceptArticleListResultsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

