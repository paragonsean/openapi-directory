/*
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConceptScopeNotesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:32.898468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConceptScopeNotesInner {
  public static final String SERIALIZED_NAME_SCOPE_NOTE = "scope_note";
  @SerializedName(SERIALIZED_NAME_SCOPE_NOTE)
  private String scopeNote;

  public static final String SERIALIZED_NAME_SCOPE_NOTE_NAME = "scope_note_name";
  @SerializedName(SERIALIZED_NAME_SCOPE_NOTE_NAME)
  private String scopeNoteName;

  public static final String SERIALIZED_NAME_SCOPE_NOTE_TYPE = "scope_note_type";
  @SerializedName(SERIALIZED_NAME_SCOPE_NOTE_TYPE)
  private String scopeNoteType;

  public ConceptScopeNotesInner() {
  }

  public ConceptScopeNotesInner scopeNote(String scopeNote) {
    this.scopeNote = scopeNote;
    return this;
  }

  /**
   * Get scopeNote
   * @return scopeNote
   */
  @javax.annotation.Nullable
  public String getScopeNote() {
    return scopeNote;
  }

  public void setScopeNote(String scopeNote) {
    this.scopeNote = scopeNote;
  }


  public ConceptScopeNotesInner scopeNoteName(String scopeNoteName) {
    this.scopeNoteName = scopeNoteName;
    return this;
  }

  /**
   * Get scopeNoteName
   * @return scopeNoteName
   */
  @javax.annotation.Nullable
  public String getScopeNoteName() {
    return scopeNoteName;
  }

  public void setScopeNoteName(String scopeNoteName) {
    this.scopeNoteName = scopeNoteName;
  }


  public ConceptScopeNotesInner scopeNoteType(String scopeNoteType) {
    this.scopeNoteType = scopeNoteType;
    return this;
  }

  /**
   * Get scopeNoteType
   * @return scopeNoteType
   */
  @javax.annotation.Nullable
  public String getScopeNoteType() {
    return scopeNoteType;
  }

  public void setScopeNoteType(String scopeNoteType) {
    this.scopeNoteType = scopeNoteType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConceptScopeNotesInner conceptScopeNotesInner = (ConceptScopeNotesInner) o;
    return Objects.equals(this.scopeNote, conceptScopeNotesInner.scopeNote) &&
        Objects.equals(this.scopeNoteName, conceptScopeNotesInner.scopeNoteName) &&
        Objects.equals(this.scopeNoteType, conceptScopeNotesInner.scopeNoteType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scopeNote, scopeNoteName, scopeNoteType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConceptScopeNotesInner {\n");
    sb.append("    scopeNote: ").append(toIndentedString(scopeNote)).append("\n");
    sb.append("    scopeNoteName: ").append(toIndentedString(scopeNoteName)).append("\n");
    sb.append("    scopeNoteType: ").append(toIndentedString(scopeNoteType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scope_note");
    openapiFields.add("scope_note_name");
    openapiFields.add("scope_note_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConceptScopeNotesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConceptScopeNotesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConceptScopeNotesInner is not found in the empty JSON string", ConceptScopeNotesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConceptScopeNotesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConceptScopeNotesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("scope_note") != null && !jsonObj.get("scope_note").isJsonNull()) && !jsonObj.get("scope_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope_note").toString()));
      }
      if ((jsonObj.get("scope_note_name") != null && !jsonObj.get("scope_note_name").isJsonNull()) && !jsonObj.get("scope_note_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope_note_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope_note_name").toString()));
      }
      if ((jsonObj.get("scope_note_type") != null && !jsonObj.get("scope_note_type").isJsonNull()) && !jsonObj.get("scope_note_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope_note_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope_note_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConceptScopeNotesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConceptScopeNotesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConceptScopeNotesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConceptScopeNotesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ConceptScopeNotesInner>() {
           @Override
           public void write(JsonWriter out, ConceptScopeNotesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConceptScopeNotesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConceptScopeNotesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConceptScopeNotesInner
   * @throws IOException if the JSON string is invalid with respect to ConceptScopeNotesInner
   */
  public static ConceptScopeNotesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConceptScopeNotesInner.class);
  }

  /**
   * Convert an instance of ConceptScopeNotesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

