/*
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConceptCombinationsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:32.898468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConceptCombinationsInner {
  public static final String SERIALIZED_NAME_COMBINATION_NOTE = "combination_note";
  @SerializedName(SERIALIZED_NAME_COMBINATION_NOTE)
  private String combinationNote;

  public static final String SERIALIZED_NAME_COMBINATION_SOURCE_CONCEPT_ID = "combination_source_concept_id";
  @SerializedName(SERIALIZED_NAME_COMBINATION_SOURCE_CONCEPT_ID)
  private Integer combinationSourceConceptId;

  public static final String SERIALIZED_NAME_COMBINATION_SOURCE_CONCEPT_NAME = "combination_source_concept_name";
  @SerializedName(SERIALIZED_NAME_COMBINATION_SOURCE_CONCEPT_NAME)
  private String combinationSourceConceptName;

  public static final String SERIALIZED_NAME_COMBINATION_SOURCE_CONCEPT_TYPE = "combination_source_concept_type";
  @SerializedName(SERIALIZED_NAME_COMBINATION_SOURCE_CONCEPT_TYPE)
  private String combinationSourceConceptType;

  public static final String SERIALIZED_NAME_COMBINATION_TARGET_CONCEPT_ID = "combination_target_concept_id";
  @SerializedName(SERIALIZED_NAME_COMBINATION_TARGET_CONCEPT_ID)
  private Integer combinationTargetConceptId;

  public static final String SERIALIZED_NAME_COMBINATION_TARGET_CONCEPT_NAME = "combination_target_concept_name";
  @SerializedName(SERIALIZED_NAME_COMBINATION_TARGET_CONCEPT_NAME)
  private String combinationTargetConceptName;

  public static final String SERIALIZED_NAME_COMBINATION_TARGET_CONCEPT_TYPE = "combination_target_concept_type";
  @SerializedName(SERIALIZED_NAME_COMBINATION_TARGET_CONCEPT_TYPE)
  private String combinationTargetConceptType;

  public ConceptCombinationsInner() {
  }

  public ConceptCombinationsInner combinationNote(String combinationNote) {
    this.combinationNote = combinationNote;
    return this;
  }

  /**
   * Get combinationNote
   * @return combinationNote
   */
  @javax.annotation.Nullable
  public String getCombinationNote() {
    return combinationNote;
  }

  public void setCombinationNote(String combinationNote) {
    this.combinationNote = combinationNote;
  }


  public ConceptCombinationsInner combinationSourceConceptId(Integer combinationSourceConceptId) {
    this.combinationSourceConceptId = combinationSourceConceptId;
    return this;
  }

  /**
   * Get combinationSourceConceptId
   * @return combinationSourceConceptId
   */
  @javax.annotation.Nullable
  public Integer getCombinationSourceConceptId() {
    return combinationSourceConceptId;
  }

  public void setCombinationSourceConceptId(Integer combinationSourceConceptId) {
    this.combinationSourceConceptId = combinationSourceConceptId;
  }


  public ConceptCombinationsInner combinationSourceConceptName(String combinationSourceConceptName) {
    this.combinationSourceConceptName = combinationSourceConceptName;
    return this;
  }

  /**
   * Get combinationSourceConceptName
   * @return combinationSourceConceptName
   */
  @javax.annotation.Nullable
  public String getCombinationSourceConceptName() {
    return combinationSourceConceptName;
  }

  public void setCombinationSourceConceptName(String combinationSourceConceptName) {
    this.combinationSourceConceptName = combinationSourceConceptName;
  }


  public ConceptCombinationsInner combinationSourceConceptType(String combinationSourceConceptType) {
    this.combinationSourceConceptType = combinationSourceConceptType;
    return this;
  }

  /**
   * Get combinationSourceConceptType
   * @return combinationSourceConceptType
   */
  @javax.annotation.Nullable
  public String getCombinationSourceConceptType() {
    return combinationSourceConceptType;
  }

  public void setCombinationSourceConceptType(String combinationSourceConceptType) {
    this.combinationSourceConceptType = combinationSourceConceptType;
  }


  public ConceptCombinationsInner combinationTargetConceptId(Integer combinationTargetConceptId) {
    this.combinationTargetConceptId = combinationTargetConceptId;
    return this;
  }

  /**
   * Get combinationTargetConceptId
   * @return combinationTargetConceptId
   */
  @javax.annotation.Nullable
  public Integer getCombinationTargetConceptId() {
    return combinationTargetConceptId;
  }

  public void setCombinationTargetConceptId(Integer combinationTargetConceptId) {
    this.combinationTargetConceptId = combinationTargetConceptId;
  }


  public ConceptCombinationsInner combinationTargetConceptName(String combinationTargetConceptName) {
    this.combinationTargetConceptName = combinationTargetConceptName;
    return this;
  }

  /**
   * Get combinationTargetConceptName
   * @return combinationTargetConceptName
   */
  @javax.annotation.Nullable
  public String getCombinationTargetConceptName() {
    return combinationTargetConceptName;
  }

  public void setCombinationTargetConceptName(String combinationTargetConceptName) {
    this.combinationTargetConceptName = combinationTargetConceptName;
  }


  public ConceptCombinationsInner combinationTargetConceptType(String combinationTargetConceptType) {
    this.combinationTargetConceptType = combinationTargetConceptType;
    return this;
  }

  /**
   * Get combinationTargetConceptType
   * @return combinationTargetConceptType
   */
  @javax.annotation.Nullable
  public String getCombinationTargetConceptType() {
    return combinationTargetConceptType;
  }

  public void setCombinationTargetConceptType(String combinationTargetConceptType) {
    this.combinationTargetConceptType = combinationTargetConceptType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConceptCombinationsInner conceptCombinationsInner = (ConceptCombinationsInner) o;
    return Objects.equals(this.combinationNote, conceptCombinationsInner.combinationNote) &&
        Objects.equals(this.combinationSourceConceptId, conceptCombinationsInner.combinationSourceConceptId) &&
        Objects.equals(this.combinationSourceConceptName, conceptCombinationsInner.combinationSourceConceptName) &&
        Objects.equals(this.combinationSourceConceptType, conceptCombinationsInner.combinationSourceConceptType) &&
        Objects.equals(this.combinationTargetConceptId, conceptCombinationsInner.combinationTargetConceptId) &&
        Objects.equals(this.combinationTargetConceptName, conceptCombinationsInner.combinationTargetConceptName) &&
        Objects.equals(this.combinationTargetConceptType, conceptCombinationsInner.combinationTargetConceptType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(combinationNote, combinationSourceConceptId, combinationSourceConceptName, combinationSourceConceptType, combinationTargetConceptId, combinationTargetConceptName, combinationTargetConceptType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConceptCombinationsInner {\n");
    sb.append("    combinationNote: ").append(toIndentedString(combinationNote)).append("\n");
    sb.append("    combinationSourceConceptId: ").append(toIndentedString(combinationSourceConceptId)).append("\n");
    sb.append("    combinationSourceConceptName: ").append(toIndentedString(combinationSourceConceptName)).append("\n");
    sb.append("    combinationSourceConceptType: ").append(toIndentedString(combinationSourceConceptType)).append("\n");
    sb.append("    combinationTargetConceptId: ").append(toIndentedString(combinationTargetConceptId)).append("\n");
    sb.append("    combinationTargetConceptName: ").append(toIndentedString(combinationTargetConceptName)).append("\n");
    sb.append("    combinationTargetConceptType: ").append(toIndentedString(combinationTargetConceptType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("combination_note");
    openapiFields.add("combination_source_concept_id");
    openapiFields.add("combination_source_concept_name");
    openapiFields.add("combination_source_concept_type");
    openapiFields.add("combination_target_concept_id");
    openapiFields.add("combination_target_concept_name");
    openapiFields.add("combination_target_concept_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConceptCombinationsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConceptCombinationsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConceptCombinationsInner is not found in the empty JSON string", ConceptCombinationsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConceptCombinationsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConceptCombinationsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("combination_note") != null && !jsonObj.get("combination_note").isJsonNull()) && !jsonObj.get("combination_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `combination_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("combination_note").toString()));
      }
      if ((jsonObj.get("combination_source_concept_name") != null && !jsonObj.get("combination_source_concept_name").isJsonNull()) && !jsonObj.get("combination_source_concept_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `combination_source_concept_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("combination_source_concept_name").toString()));
      }
      if ((jsonObj.get("combination_source_concept_type") != null && !jsonObj.get("combination_source_concept_type").isJsonNull()) && !jsonObj.get("combination_source_concept_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `combination_source_concept_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("combination_source_concept_type").toString()));
      }
      if ((jsonObj.get("combination_target_concept_name") != null && !jsonObj.get("combination_target_concept_name").isJsonNull()) && !jsonObj.get("combination_target_concept_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `combination_target_concept_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("combination_target_concept_name").toString()));
      }
      if ((jsonObj.get("combination_target_concept_type") != null && !jsonObj.get("combination_target_concept_type").isJsonNull()) && !jsonObj.get("combination_target_concept_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `combination_target_concept_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("combination_target_concept_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConceptCombinationsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConceptCombinationsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConceptCombinationsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConceptCombinationsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ConceptCombinationsInner>() {
           @Override
           public void write(JsonWriter out, ConceptCombinationsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConceptCombinationsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConceptCombinationsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConceptCombinationsInner
   * @throws IOException if the JSON string is invalid with respect to ConceptCombinationsInner
   */
  public static ConceptCombinationsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConceptCombinationsInner.class);
  }

  /**
   * Convert an instance of ConceptCombinationsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

