/*
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ConceptTaxonomyInner
 */
public class ConceptTaxonomyInnerTest {
    private final ConceptTaxonomyInner model = new ConceptTaxonomyInner();

    /**
     * Model tests for ConceptTaxonomyInner
     */
    @Test
    public void testConceptTaxonomyInner() {
        // TODO: test ConceptTaxonomyInner
    }

    /**
     * Test the property 'sourceConceptId'
     */
    @Test
    public void sourceConceptIdTest() {
        // TODO: test sourceConceptId
    }

    /**
     * Test the property 'sourceConceptName'
     */
    @Test
    public void sourceConceptNameTest() {
        // TODO: test sourceConceptName
    }

    /**
     * Test the property 'sourceConceptType'
     */
    @Test
    public void sourceConceptTypeTest() {
        // TODO: test sourceConceptType
    }

    /**
     * Test the property 'sourceConceptVernacular'
     */
    @Test
    public void sourceConceptVernacularTest() {
        // TODO: test sourceConceptVernacular
    }

    /**
     * Test the property 'targetConceptId'
     */
    @Test
    public void targetConceptIdTest() {
        // TODO: test targetConceptId
    }

    /**
     * Test the property 'targetConceptName'
     */
    @Test
    public void targetConceptNameTest() {
        // TODO: test targetConceptName
    }

    /**
     * Test the property 'targetConceptType'
     */
    @Test
    public void targetConceptTypeTest() {
        // TODO: test targetConceptType
    }

    /**
     * Test the property 'targetConceptVernacular'
     */
    @Test
    public void targetConceptVernacularTest() {
        // TODO: test targetConceptVernacular
    }

    /**
     * Test the property 'taxonomicRelation'
     */
    @Test
    public void taxonomicRelationTest() {
        // TODO: test taxonomicRelation
    }

    /**
     * Test the property 'taxonomicVerificationStatus'
     */
    @Test
    public void taxonomicVerificationStatusTest() {
        // TODO: test taxonomicVerificationStatus
    }

}
