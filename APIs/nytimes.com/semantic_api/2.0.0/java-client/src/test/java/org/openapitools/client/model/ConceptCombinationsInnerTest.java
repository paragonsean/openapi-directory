/*
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ConceptCombinationsInner
 */
public class ConceptCombinationsInnerTest {
    private final ConceptCombinationsInner model = new ConceptCombinationsInner();

    /**
     * Model tests for ConceptCombinationsInner
     */
    @Test
    public void testConceptCombinationsInner() {
        // TODO: test ConceptCombinationsInner
    }

    /**
     * Test the property 'combinationNote'
     */
    @Test
    public void combinationNoteTest() {
        // TODO: test combinationNote
    }

    /**
     * Test the property 'combinationSourceConceptId'
     */
    @Test
    public void combinationSourceConceptIdTest() {
        // TODO: test combinationSourceConceptId
    }

    /**
     * Test the property 'combinationSourceConceptName'
     */
    @Test
    public void combinationSourceConceptNameTest() {
        // TODO: test combinationSourceConceptName
    }

    /**
     * Test the property 'combinationSourceConceptType'
     */
    @Test
    public void combinationSourceConceptTypeTest() {
        // TODO: test combinationSourceConceptType
    }

    /**
     * Test the property 'combinationTargetConceptId'
     */
    @Test
    public void combinationTargetConceptIdTest() {
        // TODO: test combinationTargetConceptId
    }

    /**
     * Test the property 'combinationTargetConceptName'
     */
    @Test
    public void combinationTargetConceptNameTest() {
        // TODO: test combinationTargetConceptName
    }

    /**
     * Test the property 'combinationTargetConceptType'
     */
    @Test
    public void combinationTargetConceptTypeTest() {
        // TODO: test combinationTargetConceptType
    }

}
