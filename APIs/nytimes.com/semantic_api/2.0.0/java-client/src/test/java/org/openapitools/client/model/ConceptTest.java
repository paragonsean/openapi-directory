/*
 * Semantic API
 * The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).  The Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConceptArticleList;
import org.openapitools.client.model.ConceptCombinationsInner;
import org.openapitools.client.model.ConceptLinksInner;
import org.openapitools.client.model.ConceptRelation;
import org.openapitools.client.model.ConceptScopeNotesInner;
import org.openapitools.client.model.ConceptTaxonomyInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Concept
 */
public class ConceptTest {
    private final Concept model = new Concept();

    /**
     * Model tests for Concept
     */
    @Test
    public void testConcept() {
        // TODO: test Concept
    }

    /**
     * Test the property 'ancestors'
     */
    @Test
    public void ancestorsTest() {
        // TODO: test ancestors
    }

    /**
     * Test the property 'articleList'
     */
    @Test
    public void articleListTest() {
        // TODO: test articleList
    }

    /**
     * Test the property 'combinations'
     */
    @Test
    public void combinationsTest() {
        // TODO: test combinations
    }

    /**
     * Test the property 'conceptCreated'
     */
    @Test
    public void conceptCreatedTest() {
        // TODO: test conceptCreated
    }

    /**
     * Test the property 'conceptId'
     */
    @Test
    public void conceptIdTest() {
        // TODO: test conceptId
    }

    /**
     * Test the property 'conceptName'
     */
    @Test
    public void conceptNameTest() {
        // TODO: test conceptName
    }

    /**
     * Test the property 'conceptStatus'
     */
    @Test
    public void conceptStatusTest() {
        // TODO: test conceptStatus
    }

    /**
     * Test the property 'conceptType'
     */
    @Test
    public void conceptTypeTest() {
        // TODO: test conceptType
    }

    /**
     * Test the property 'conceptUpdated'
     */
    @Test
    public void conceptUpdatedTest() {
        // TODO: test conceptUpdated
    }

    /**
     * Test the property 'descendants'
     */
    @Test
    public void descendantsTest() {
        // TODO: test descendants
    }

    /**
     * Test the property 'isTimesTag'
     */
    @Test
    public void isTimesTagTest() {
        // TODO: test isTimesTag
    }

    /**
     * Test the property 'links'
     */
    @Test
    public void linksTest() {
        // TODO: test links
    }

    /**
     * Test the property 'scopeNotes'
     */
    @Test
    public void scopeNotesTest() {
        // TODO: test scopeNotes
    }

    /**
     * Test the property 'searchApiQuery'
     */
    @Test
    public void searchApiQueryTest() {
        // TODO: test searchApiQuery
    }

    /**
     * Test the property 'taxonomy'
     */
    @Test
    public void taxonomyTest() {
        // TODO: test taxonomy
    }

    /**
     * Test the property 'vernacular'
     */
    @Test
    public void vernacularTest() {
        // TODO: test vernacular
    }

}
