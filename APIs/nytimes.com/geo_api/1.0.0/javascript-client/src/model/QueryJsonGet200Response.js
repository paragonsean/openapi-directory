/**
 * Geographic API
 * The Geographic API extends the Semantic API, using a linked data approach to enhance location concepts used in The New York Times' controlled vocabulary and data resources which combine them with the GeoNames database, an authoritative and free to use database of global geographical places, names and features. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Event from './Event';

/**
 * The QueryJsonGet200Response model module.
 * @module model/QueryJsonGet200Response
 * @version 1.0.0
 */
class QueryJsonGet200Response {
    /**
     * Constructs a new <code>QueryJsonGet200Response</code>.
     * @alias module:model/QueryJsonGet200Response
     */
    constructor() { 
        
        QueryJsonGet200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryJsonGet200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryJsonGet200Response} obj Optional instance to populate.
     * @return {module:model/QueryJsonGet200Response} The populated <code>QueryJsonGet200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryJsonGet200Response();

            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [Event]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryJsonGet200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryJsonGet200Response</code>.
     */
    static validateJSON(data) {
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                Event.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Event>} results
 */
QueryJsonGet200Response.prototype['results'] = undefined;






export default QueryJsonGet200Response;

