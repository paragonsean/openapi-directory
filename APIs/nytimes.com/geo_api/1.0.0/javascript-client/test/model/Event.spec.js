/**
 * Geographic API
 * The Geographic API extends the Semantic API, using a linked data approach to enhance location concepts used in The New York Times' controlled vocabulary and data resources which combine them with the GeoNames database, an authoritative and free to use database of global geographical places, names and features. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GeographicApi);
  }
}(this, function(expect, GeographicApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GeographicApi.Event();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Event', function() {
    it('should create an instance of Event', function() {
      // uncomment below and update the code to test Event
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be.a(GeographicApi.Event);
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property criticName (base name: "critic_name")', function() {
      // uncomment below and update the code to test the property criticName
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property eventDetailUrl (base name: "event_detail_url")', function() {
      // uncomment below and update the code to test the property eventDetailUrl
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property eventId (base name: "event_id")', function() {
      // uncomment below and update the code to test the property eventId
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property eventName (base name: "event_name")', function() {
      // uncomment below and update the code to test the property eventName
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property eventScheduleId (base name: "event_schedule_id")', function() {
      // uncomment below and update the code to test the property eventScheduleId
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property festival (base name: "festival")', function() {
      // uncomment below and update the code to test the property festival
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property filmRating (base name: "film_rating")', function() {
      // uncomment below and update the code to test the property filmRating
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property free (base name: "free")', function() {
      // uncomment below and update the code to test the property free
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property kidFriendly (base name: "kid_friendly")', function() {
      // uncomment below and update the code to test the property kidFriendly
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property lastChance (base name: "last_chance")', function() {
      // uncomment below and update the code to test the property lastChance
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property lastModified (base name: "last_modified")', function() {
      // uncomment below and update the code to test the property lastModified
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property longRunningShow (base name: "long_running_show")', function() {
      // uncomment below and update the code to test the property longRunningShow
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property previewsAndOpenings (base name: "previews_and_openings")', function() {
      // uncomment below and update the code to test the property previewsAndOpenings
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property recurDays (base name: "recur_days")', function() {
      // uncomment below and update the code to test the property recurDays
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property recurringStartDate (base name: "recurring_start_date")', function() {
      // uncomment below and update the code to test the property recurringStartDate
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property timesPick (base name: "times_pick")', function() {
      // uncomment below and update the code to test the property timesPick
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property webDescription (base name: "web_description")', function() {
      // uncomment below and update the code to test the property webDescription
      //var instance = new GeographicApi.Event();
      //expect(instance).to.be();
    });

  });

}));
