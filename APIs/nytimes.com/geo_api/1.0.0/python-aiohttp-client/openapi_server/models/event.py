# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, critic_name: str=None, event_detail_url: str=None, event_id: int=None, event_name: str=None, event_schedule_id: int=None, festival: bool=None, film_rating: bool=None, free: bool=None, kid_friendly: bool=None, last_chance: bool=None, last_modified: str=None, long_running_show: bool=None, previews_and_openings: bool=None, recur_days: List[str]=None, recurring_start_date: str=None, state: str=None, times_pick: bool=None, web_description: str=None):
        """Event - a model defined in OpenAPI

        :param city: The city of this Event.
        :param critic_name: The critic_name of this Event.
        :param event_detail_url: The event_detail_url of this Event.
        :param event_id: The event_id of this Event.
        :param event_name: The event_name of this Event.
        :param event_schedule_id: The event_schedule_id of this Event.
        :param festival: The festival of this Event.
        :param film_rating: The film_rating of this Event.
        :param free: The free of this Event.
        :param kid_friendly: The kid_friendly of this Event.
        :param last_chance: The last_chance of this Event.
        :param last_modified: The last_modified of this Event.
        :param long_running_show: The long_running_show of this Event.
        :param previews_and_openings: The previews_and_openings of this Event.
        :param recur_days: The recur_days of this Event.
        :param recurring_start_date: The recurring_start_date of this Event.
        :param state: The state of this Event.
        :param times_pick: The times_pick of this Event.
        :param web_description: The web_description of this Event.
        """
        self.openapi_types = {
            'city': str,
            'critic_name': str,
            'event_detail_url': str,
            'event_id': int,
            'event_name': str,
            'event_schedule_id': int,
            'festival': bool,
            'film_rating': bool,
            'free': bool,
            'kid_friendly': bool,
            'last_chance': bool,
            'last_modified': str,
            'long_running_show': bool,
            'previews_and_openings': bool,
            'recur_days': List[str],
            'recurring_start_date': str,
            'state': str,
            'times_pick': bool,
            'web_description': str
        }

        self.attribute_map = {
            'city': 'city',
            'critic_name': 'critic_name',
            'event_detail_url': 'event_detail_url',
            'event_id': 'event_id',
            'event_name': 'event_name',
            'event_schedule_id': 'event_schedule_id',
            'festival': 'festival',
            'film_rating': 'film_rating',
            'free': 'free',
            'kid_friendly': 'kid_friendly',
            'last_chance': 'last_chance',
            'last_modified': 'last_modified',
            'long_running_show': 'long_running_show',
            'previews_and_openings': 'previews_and_openings',
            'recur_days': 'recur_days',
            'recurring_start_date': 'recurring_start_date',
            'state': 'state',
            'times_pick': 'times_pick',
            'web_description': 'web_description'
        }

        self._city = city
        self._critic_name = critic_name
        self._event_detail_url = event_detail_url
        self._event_id = event_id
        self._event_name = event_name
        self._event_schedule_id = event_schedule_id
        self._festival = festival
        self._film_rating = film_rating
        self._free = free
        self._kid_friendly = kid_friendly
        self._last_chance = last_chance
        self._last_modified = last_modified
        self._long_running_show = long_running_show
        self._previews_and_openings = previews_and_openings
        self._recur_days = recur_days
        self._recurring_start_date = recurring_start_date
        self._state = state
        self._times_pick = times_pick
        self._web_description = web_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Event.


        :return: The city of this Event.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Event.


        :param city: The city of this Event.
        :type city: str
        """

        self._city = city

    @property
    def critic_name(self):
        """Gets the critic_name of this Event.


        :return: The critic_name of this Event.
        :rtype: str
        """
        return self._critic_name

    @critic_name.setter
    def critic_name(self, critic_name):
        """Sets the critic_name of this Event.


        :param critic_name: The critic_name of this Event.
        :type critic_name: str
        """

        self._critic_name = critic_name

    @property
    def event_detail_url(self):
        """Gets the event_detail_url of this Event.


        :return: The event_detail_url of this Event.
        :rtype: str
        """
        return self._event_detail_url

    @event_detail_url.setter
    def event_detail_url(self, event_detail_url):
        """Sets the event_detail_url of this Event.


        :param event_detail_url: The event_detail_url of this Event.
        :type event_detail_url: str
        """

        self._event_detail_url = event_detail_url

    @property
    def event_id(self):
        """Gets the event_id of this Event.


        :return: The event_id of this Event.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Event.


        :param event_id: The event_id of this Event.
        :type event_id: int
        """

        self._event_id = event_id

    @property
    def event_name(self):
        """Gets the event_name of this Event.


        :return: The event_name of this Event.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this Event.


        :param event_name: The event_name of this Event.
        :type event_name: str
        """

        self._event_name = event_name

    @property
    def event_schedule_id(self):
        """Gets the event_schedule_id of this Event.


        :return: The event_schedule_id of this Event.
        :rtype: int
        """
        return self._event_schedule_id

    @event_schedule_id.setter
    def event_schedule_id(self, event_schedule_id):
        """Sets the event_schedule_id of this Event.


        :param event_schedule_id: The event_schedule_id of this Event.
        :type event_schedule_id: int
        """

        self._event_schedule_id = event_schedule_id

    @property
    def festival(self):
        """Gets the festival of this Event.


        :return: The festival of this Event.
        :rtype: bool
        """
        return self._festival

    @festival.setter
    def festival(self, festival):
        """Sets the festival of this Event.


        :param festival: The festival of this Event.
        :type festival: bool
        """

        self._festival = festival

    @property
    def film_rating(self):
        """Gets the film_rating of this Event.


        :return: The film_rating of this Event.
        :rtype: bool
        """
        return self._film_rating

    @film_rating.setter
    def film_rating(self, film_rating):
        """Sets the film_rating of this Event.


        :param film_rating: The film_rating of this Event.
        :type film_rating: bool
        """

        self._film_rating = film_rating

    @property
    def free(self):
        """Gets the free of this Event.


        :return: The free of this Event.
        :rtype: bool
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this Event.


        :param free: The free of this Event.
        :type free: bool
        """

        self._free = free

    @property
    def kid_friendly(self):
        """Gets the kid_friendly of this Event.


        :return: The kid_friendly of this Event.
        :rtype: bool
        """
        return self._kid_friendly

    @kid_friendly.setter
    def kid_friendly(self, kid_friendly):
        """Sets the kid_friendly of this Event.


        :param kid_friendly: The kid_friendly of this Event.
        :type kid_friendly: bool
        """

        self._kid_friendly = kid_friendly

    @property
    def last_chance(self):
        """Gets the last_chance of this Event.


        :return: The last_chance of this Event.
        :rtype: bool
        """
        return self._last_chance

    @last_chance.setter
    def last_chance(self, last_chance):
        """Sets the last_chance of this Event.


        :param last_chance: The last_chance of this Event.
        :type last_chance: bool
        """

        self._last_chance = last_chance

    @property
    def last_modified(self):
        """Gets the last_modified of this Event.


        :return: The last_modified of this Event.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Event.


        :param last_modified: The last_modified of this Event.
        :type last_modified: str
        """

        self._last_modified = last_modified

    @property
    def long_running_show(self):
        """Gets the long_running_show of this Event.


        :return: The long_running_show of this Event.
        :rtype: bool
        """
        return self._long_running_show

    @long_running_show.setter
    def long_running_show(self, long_running_show):
        """Sets the long_running_show of this Event.


        :param long_running_show: The long_running_show of this Event.
        :type long_running_show: bool
        """

        self._long_running_show = long_running_show

    @property
    def previews_and_openings(self):
        """Gets the previews_and_openings of this Event.


        :return: The previews_and_openings of this Event.
        :rtype: bool
        """
        return self._previews_and_openings

    @previews_and_openings.setter
    def previews_and_openings(self, previews_and_openings):
        """Sets the previews_and_openings of this Event.


        :param previews_and_openings: The previews_and_openings of this Event.
        :type previews_and_openings: bool
        """

        self._previews_and_openings = previews_and_openings

    @property
    def recur_days(self):
        """Gets the recur_days of this Event.


        :return: The recur_days of this Event.
        :rtype: List[str]
        """
        return self._recur_days

    @recur_days.setter
    def recur_days(self, recur_days):
        """Sets the recur_days of this Event.


        :param recur_days: The recur_days of this Event.
        :type recur_days: List[str]
        """

        self._recur_days = recur_days

    @property
    def recurring_start_date(self):
        """Gets the recurring_start_date of this Event.


        :return: The recurring_start_date of this Event.
        :rtype: str
        """
        return self._recurring_start_date

    @recurring_start_date.setter
    def recurring_start_date(self, recurring_start_date):
        """Sets the recurring_start_date of this Event.


        :param recurring_start_date: The recurring_start_date of this Event.
        :type recurring_start_date: str
        """

        self._recurring_start_date = recurring_start_date

    @property
    def state(self):
        """Gets the state of this Event.


        :return: The state of this Event.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Event.


        :param state: The state of this Event.
        :type state: str
        """

        self._state = state

    @property
    def times_pick(self):
        """Gets the times_pick of this Event.


        :return: The times_pick of this Event.
        :rtype: bool
        """
        return self._times_pick

    @times_pick.setter
    def times_pick(self, times_pick):
        """Sets the times_pick of this Event.


        :param times_pick: The times_pick of this Event.
        :type times_pick: bool
        """

        self._times_pick = times_pick

    @property
    def web_description(self):
        """Gets the web_description of this Event.


        :return: The web_description of this Event.
        :rtype: str
        """
        return self._web_description

    @web_description.setter
    def web_description(self, web_description):
        """Sets the web_description of this Event.


        :param web_description: The web_description of this Event.
        :type web_description: str
        """

        self._web_description = web_description
