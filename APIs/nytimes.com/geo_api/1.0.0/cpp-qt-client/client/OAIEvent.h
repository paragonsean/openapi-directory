/**
 * Geographic API
 * The Geographic API extends the Semantic API, using a linked data approach to enhance location concepts used in The New York Times' controlled vocabulary and data resources which combine them with the GeoNames database, an authoritative and free to use database of global geographical places, names and features. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvent.h
 *
 * 
 */

#ifndef OAIEvent_H
#define OAIEvent_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEvent : public OAIObject {
public:
    OAIEvent();
    OAIEvent(QString json);
    ~OAIEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getCriticName() const;
    void setCriticName(const QString &critic_name);
    bool is_critic_name_Set() const;
    bool is_critic_name_Valid() const;

    QString getEventDetailUrl() const;
    void setEventDetailUrl(const QString &event_detail_url);
    bool is_event_detail_url_Set() const;
    bool is_event_detail_url_Valid() const;

    qint32 getEventId() const;
    void setEventId(const qint32 &event_id);
    bool is_event_id_Set() const;
    bool is_event_id_Valid() const;

    QString getEventName() const;
    void setEventName(const QString &event_name);
    bool is_event_name_Set() const;
    bool is_event_name_Valid() const;

    qint32 getEventScheduleId() const;
    void setEventScheduleId(const qint32 &event_schedule_id);
    bool is_event_schedule_id_Set() const;
    bool is_event_schedule_id_Valid() const;

    bool isFestival() const;
    void setFestival(const bool &festival);
    bool is_festival_Set() const;
    bool is_festival_Valid() const;

    bool isFilmRating() const;
    void setFilmRating(const bool &film_rating);
    bool is_film_rating_Set() const;
    bool is_film_rating_Valid() const;

    bool isFree() const;
    void setFree(const bool &free);
    bool is_free_Set() const;
    bool is_free_Valid() const;

    bool isKidFriendly() const;
    void setKidFriendly(const bool &kid_friendly);
    bool is_kid_friendly_Set() const;
    bool is_kid_friendly_Valid() const;

    bool isLastChance() const;
    void setLastChance(const bool &last_chance);
    bool is_last_chance_Set() const;
    bool is_last_chance_Valid() const;

    QString getLastModified() const;
    void setLastModified(const QString &last_modified);
    bool is_last_modified_Set() const;
    bool is_last_modified_Valid() const;

    bool isLongRunningShow() const;
    void setLongRunningShow(const bool &long_running_show);
    bool is_long_running_show_Set() const;
    bool is_long_running_show_Valid() const;

    bool isPreviewsAndOpenings() const;
    void setPreviewsAndOpenings(const bool &previews_and_openings);
    bool is_previews_and_openings_Set() const;
    bool is_previews_and_openings_Valid() const;

    QList<QString> getRecurDays() const;
    void setRecurDays(const QList<QString> &recur_days);
    bool is_recur_days_Set() const;
    bool is_recur_days_Valid() const;

    QString getRecurringStartDate() const;
    void setRecurringStartDate(const QString &recurring_start_date);
    bool is_recurring_start_date_Set() const;
    bool is_recurring_start_date_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    bool isTimesPick() const;
    void setTimesPick(const bool &times_pick);
    bool is_times_pick_Set() const;
    bool is_times_pick_Valid() const;

    QString getWebDescription() const;
    void setWebDescription(const QString &web_description);
    bool is_web_description_Set() const;
    bool is_web_description_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString m_critic_name;
    bool m_critic_name_isSet;
    bool m_critic_name_isValid;

    QString m_event_detail_url;
    bool m_event_detail_url_isSet;
    bool m_event_detail_url_isValid;

    qint32 m_event_id;
    bool m_event_id_isSet;
    bool m_event_id_isValid;

    QString m_event_name;
    bool m_event_name_isSet;
    bool m_event_name_isValid;

    qint32 m_event_schedule_id;
    bool m_event_schedule_id_isSet;
    bool m_event_schedule_id_isValid;

    bool m_festival;
    bool m_festival_isSet;
    bool m_festival_isValid;

    bool m_film_rating;
    bool m_film_rating_isSet;
    bool m_film_rating_isValid;

    bool m_free;
    bool m_free_isSet;
    bool m_free_isValid;

    bool m_kid_friendly;
    bool m_kid_friendly_isSet;
    bool m_kid_friendly_isValid;

    bool m_last_chance;
    bool m_last_chance_isSet;
    bool m_last_chance_isValid;

    QString m_last_modified;
    bool m_last_modified_isSet;
    bool m_last_modified_isValid;

    bool m_long_running_show;
    bool m_long_running_show_isSet;
    bool m_long_running_show_isValid;

    bool m_previews_and_openings;
    bool m_previews_and_openings_isSet;
    bool m_previews_and_openings_isValid;

    QList<QString> m_recur_days;
    bool m_recur_days_isSet;
    bool m_recur_days_isValid;

    QString m_recurring_start_date;
    bool m_recurring_start_date_isSet;
    bool m_recurring_start_date_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    bool m_times_pick;
    bool m_times_pick_isSet;
    bool m_times_pick_isValid;

    QString m_web_description;
    bool m_web_description_isSet;
    bool m_web_description_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvent)

#endif // OAIEvent_H
