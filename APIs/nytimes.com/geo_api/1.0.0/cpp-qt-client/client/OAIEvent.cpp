/**
 * Geographic API
 * The Geographic API extends the Semantic API, using a linked data approach to enhance location concepts used in The New York Times' controlled vocabulary and data resources which combine them with the GeoNames database, an authoritative and free to use database of global geographical places, names and features. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_critic_name_isSet = false;
    m_critic_name_isValid = false;

    m_event_detail_url_isSet = false;
    m_event_detail_url_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_event_schedule_id_isSet = false;
    m_event_schedule_id_isValid = false;

    m_festival_isSet = false;
    m_festival_isValid = false;

    m_film_rating_isSet = false;
    m_film_rating_isValid = false;

    m_free_isSet = false;
    m_free_isValid = false;

    m_kid_friendly_isSet = false;
    m_kid_friendly_isValid = false;

    m_last_chance_isSet = false;
    m_last_chance_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_long_running_show_isSet = false;
    m_long_running_show_isValid = false;

    m_previews_and_openings_isSet = false;
    m_previews_and_openings_isValid = false;

    m_recur_days_isSet = false;
    m_recur_days_isValid = false;

    m_recurring_start_date_isSet = false;
    m_recurring_start_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_times_pick_isSet = false;
    m_times_pick_isValid = false;

    m_web_description_isSet = false;
    m_web_description_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_critic_name_isValid = ::OpenAPI::fromJsonValue(m_critic_name, json[QString("critic_name")]);
    m_critic_name_isSet = !json[QString("critic_name")].isNull() && m_critic_name_isValid;

    m_event_detail_url_isValid = ::OpenAPI::fromJsonValue(m_event_detail_url, json[QString("event_detail_url")]);
    m_event_detail_url_isSet = !json[QString("event_detail_url")].isNull() && m_event_detail_url_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("event_id")]);
    m_event_id_isSet = !json[QString("event_id")].isNull() && m_event_id_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("event_name")]);
    m_event_name_isSet = !json[QString("event_name")].isNull() && m_event_name_isValid;

    m_event_schedule_id_isValid = ::OpenAPI::fromJsonValue(m_event_schedule_id, json[QString("event_schedule_id")]);
    m_event_schedule_id_isSet = !json[QString("event_schedule_id")].isNull() && m_event_schedule_id_isValid;

    m_festival_isValid = ::OpenAPI::fromJsonValue(m_festival, json[QString("festival")]);
    m_festival_isSet = !json[QString("festival")].isNull() && m_festival_isValid;

    m_film_rating_isValid = ::OpenAPI::fromJsonValue(m_film_rating, json[QString("film_rating")]);
    m_film_rating_isSet = !json[QString("film_rating")].isNull() && m_film_rating_isValid;

    m_free_isValid = ::OpenAPI::fromJsonValue(m_free, json[QString("free")]);
    m_free_isSet = !json[QString("free")].isNull() && m_free_isValid;

    m_kid_friendly_isValid = ::OpenAPI::fromJsonValue(m_kid_friendly, json[QString("kid_friendly")]);
    m_kid_friendly_isSet = !json[QString("kid_friendly")].isNull() && m_kid_friendly_isValid;

    m_last_chance_isValid = ::OpenAPI::fromJsonValue(m_last_chance, json[QString("last_chance")]);
    m_last_chance_isSet = !json[QString("last_chance")].isNull() && m_last_chance_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("last_modified")]);
    m_last_modified_isSet = !json[QString("last_modified")].isNull() && m_last_modified_isValid;

    m_long_running_show_isValid = ::OpenAPI::fromJsonValue(m_long_running_show, json[QString("long_running_show")]);
    m_long_running_show_isSet = !json[QString("long_running_show")].isNull() && m_long_running_show_isValid;

    m_previews_and_openings_isValid = ::OpenAPI::fromJsonValue(m_previews_and_openings, json[QString("previews_and_openings")]);
    m_previews_and_openings_isSet = !json[QString("previews_and_openings")].isNull() && m_previews_and_openings_isValid;

    m_recur_days_isValid = ::OpenAPI::fromJsonValue(m_recur_days, json[QString("recur_days")]);
    m_recur_days_isSet = !json[QString("recur_days")].isNull() && m_recur_days_isValid;

    m_recurring_start_date_isValid = ::OpenAPI::fromJsonValue(m_recurring_start_date, json[QString("recurring_start_date")]);
    m_recurring_start_date_isSet = !json[QString("recurring_start_date")].isNull() && m_recurring_start_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_times_pick_isValid = ::OpenAPI::fromJsonValue(m_times_pick, json[QString("times_pick")]);
    m_times_pick_isSet = !json[QString("times_pick")].isNull() && m_times_pick_isValid;

    m_web_description_isValid = ::OpenAPI::fromJsonValue(m_web_description, json[QString("web_description")]);
    m_web_description_isSet = !json[QString("web_description")].isNull() && m_web_description_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_critic_name_isSet) {
        obj.insert(QString("critic_name"), ::OpenAPI::toJsonValue(m_critic_name));
    }
    if (m_event_detail_url_isSet) {
        obj.insert(QString("event_detail_url"), ::OpenAPI::toJsonValue(m_event_detail_url));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("event_id"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_name_isSet) {
        obj.insert(QString("event_name"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_event_schedule_id_isSet) {
        obj.insert(QString("event_schedule_id"), ::OpenAPI::toJsonValue(m_event_schedule_id));
    }
    if (m_festival_isSet) {
        obj.insert(QString("festival"), ::OpenAPI::toJsonValue(m_festival));
    }
    if (m_film_rating_isSet) {
        obj.insert(QString("film_rating"), ::OpenAPI::toJsonValue(m_film_rating));
    }
    if (m_free_isSet) {
        obj.insert(QString("free"), ::OpenAPI::toJsonValue(m_free));
    }
    if (m_kid_friendly_isSet) {
        obj.insert(QString("kid_friendly"), ::OpenAPI::toJsonValue(m_kid_friendly));
    }
    if (m_last_chance_isSet) {
        obj.insert(QString("last_chance"), ::OpenAPI::toJsonValue(m_last_chance));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("last_modified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_long_running_show_isSet) {
        obj.insert(QString("long_running_show"), ::OpenAPI::toJsonValue(m_long_running_show));
    }
    if (m_previews_and_openings_isSet) {
        obj.insert(QString("previews_and_openings"), ::OpenAPI::toJsonValue(m_previews_and_openings));
    }
    if (m_recur_days.size() > 0) {
        obj.insert(QString("recur_days"), ::OpenAPI::toJsonValue(m_recur_days));
    }
    if (m_recurring_start_date_isSet) {
        obj.insert(QString("recurring_start_date"), ::OpenAPI::toJsonValue(m_recurring_start_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_times_pick_isSet) {
        obj.insert(QString("times_pick"), ::OpenAPI::toJsonValue(m_times_pick));
    }
    if (m_web_description_isSet) {
        obj.insert(QString("web_description"), ::OpenAPI::toJsonValue(m_web_description));
    }
    return obj;
}

QString OAIEvent::getCity() const {
    return m_city;
}
void OAIEvent::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIEvent::is_city_Set() const{
    return m_city_isSet;
}

bool OAIEvent::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIEvent::getCriticName() const {
    return m_critic_name;
}
void OAIEvent::setCriticName(const QString &critic_name) {
    m_critic_name = critic_name;
    m_critic_name_isSet = true;
}

bool OAIEvent::is_critic_name_Set() const{
    return m_critic_name_isSet;
}

bool OAIEvent::is_critic_name_Valid() const{
    return m_critic_name_isValid;
}

QString OAIEvent::getEventDetailUrl() const {
    return m_event_detail_url;
}
void OAIEvent::setEventDetailUrl(const QString &event_detail_url) {
    m_event_detail_url = event_detail_url;
    m_event_detail_url_isSet = true;
}

bool OAIEvent::is_event_detail_url_Set() const{
    return m_event_detail_url_isSet;
}

bool OAIEvent::is_event_detail_url_Valid() const{
    return m_event_detail_url_isValid;
}

qint32 OAIEvent::getEventId() const {
    return m_event_id;
}
void OAIEvent::setEventId(const qint32 &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIEvent::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIEvent::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIEvent::getEventName() const {
    return m_event_name;
}
void OAIEvent::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIEvent::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIEvent::is_event_name_Valid() const{
    return m_event_name_isValid;
}

qint32 OAIEvent::getEventScheduleId() const {
    return m_event_schedule_id;
}
void OAIEvent::setEventScheduleId(const qint32 &event_schedule_id) {
    m_event_schedule_id = event_schedule_id;
    m_event_schedule_id_isSet = true;
}

bool OAIEvent::is_event_schedule_id_Set() const{
    return m_event_schedule_id_isSet;
}

bool OAIEvent::is_event_schedule_id_Valid() const{
    return m_event_schedule_id_isValid;
}

bool OAIEvent::isFestival() const {
    return m_festival;
}
void OAIEvent::setFestival(const bool &festival) {
    m_festival = festival;
    m_festival_isSet = true;
}

bool OAIEvent::is_festival_Set() const{
    return m_festival_isSet;
}

bool OAIEvent::is_festival_Valid() const{
    return m_festival_isValid;
}

bool OAIEvent::isFilmRating() const {
    return m_film_rating;
}
void OAIEvent::setFilmRating(const bool &film_rating) {
    m_film_rating = film_rating;
    m_film_rating_isSet = true;
}

bool OAIEvent::is_film_rating_Set() const{
    return m_film_rating_isSet;
}

bool OAIEvent::is_film_rating_Valid() const{
    return m_film_rating_isValid;
}

bool OAIEvent::isFree() const {
    return m_free;
}
void OAIEvent::setFree(const bool &free) {
    m_free = free;
    m_free_isSet = true;
}

bool OAIEvent::is_free_Set() const{
    return m_free_isSet;
}

bool OAIEvent::is_free_Valid() const{
    return m_free_isValid;
}

bool OAIEvent::isKidFriendly() const {
    return m_kid_friendly;
}
void OAIEvent::setKidFriendly(const bool &kid_friendly) {
    m_kid_friendly = kid_friendly;
    m_kid_friendly_isSet = true;
}

bool OAIEvent::is_kid_friendly_Set() const{
    return m_kid_friendly_isSet;
}

bool OAIEvent::is_kid_friendly_Valid() const{
    return m_kid_friendly_isValid;
}

bool OAIEvent::isLastChance() const {
    return m_last_chance;
}
void OAIEvent::setLastChance(const bool &last_chance) {
    m_last_chance = last_chance;
    m_last_chance_isSet = true;
}

bool OAIEvent::is_last_chance_Set() const{
    return m_last_chance_isSet;
}

bool OAIEvent::is_last_chance_Valid() const{
    return m_last_chance_isValid;
}

QString OAIEvent::getLastModified() const {
    return m_last_modified;
}
void OAIEvent::setLastModified(const QString &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIEvent::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIEvent::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

bool OAIEvent::isLongRunningShow() const {
    return m_long_running_show;
}
void OAIEvent::setLongRunningShow(const bool &long_running_show) {
    m_long_running_show = long_running_show;
    m_long_running_show_isSet = true;
}

bool OAIEvent::is_long_running_show_Set() const{
    return m_long_running_show_isSet;
}

bool OAIEvent::is_long_running_show_Valid() const{
    return m_long_running_show_isValid;
}

bool OAIEvent::isPreviewsAndOpenings() const {
    return m_previews_and_openings;
}
void OAIEvent::setPreviewsAndOpenings(const bool &previews_and_openings) {
    m_previews_and_openings = previews_and_openings;
    m_previews_and_openings_isSet = true;
}

bool OAIEvent::is_previews_and_openings_Set() const{
    return m_previews_and_openings_isSet;
}

bool OAIEvent::is_previews_and_openings_Valid() const{
    return m_previews_and_openings_isValid;
}

QList<QString> OAIEvent::getRecurDays() const {
    return m_recur_days;
}
void OAIEvent::setRecurDays(const QList<QString> &recur_days) {
    m_recur_days = recur_days;
    m_recur_days_isSet = true;
}

bool OAIEvent::is_recur_days_Set() const{
    return m_recur_days_isSet;
}

bool OAIEvent::is_recur_days_Valid() const{
    return m_recur_days_isValid;
}

QString OAIEvent::getRecurringStartDate() const {
    return m_recurring_start_date;
}
void OAIEvent::setRecurringStartDate(const QString &recurring_start_date) {
    m_recurring_start_date = recurring_start_date;
    m_recurring_start_date_isSet = true;
}

bool OAIEvent::is_recurring_start_date_Set() const{
    return m_recurring_start_date_isSet;
}

bool OAIEvent::is_recurring_start_date_Valid() const{
    return m_recurring_start_date_isValid;
}

QString OAIEvent::getState() const {
    return m_state;
}
void OAIEvent::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIEvent::is_state_Set() const{
    return m_state_isSet;
}

bool OAIEvent::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIEvent::isTimesPick() const {
    return m_times_pick;
}
void OAIEvent::setTimesPick(const bool &times_pick) {
    m_times_pick = times_pick;
    m_times_pick_isSet = true;
}

bool OAIEvent::is_times_pick_Set() const{
    return m_times_pick_isSet;
}

bool OAIEvent::is_times_pick_Valid() const{
    return m_times_pick_isValid;
}

QString OAIEvent::getWebDescription() const {
    return m_web_description;
}
void OAIEvent::setWebDescription(const QString &web_description) {
    m_web_description = web_description;
    m_web_description_isSet = true;
}

bool OAIEvent::is_web_description_Set() const{
    return m_web_description_isSet;
}

bool OAIEvent::is_web_description_Valid() const{
    return m_web_description_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_critic_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_detail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_schedule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_festival_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_film_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kid_friendly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_chance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_running_show_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previews_and_openings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recur_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_times_pick_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
