/**
 * Geographic API
 * The Geographic API extends the Semantic API, using a linked data approach to enhance location concepts used in The New York Times' controlled vocabulary and data resources which combine them with the GeoNames database, an authoritative and free to use database of global geographical places, names and features. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_query_json_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_query_json_get_200_response::OAI_query_json_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_query_json_get_200_response::OAI_query_json_get_200_response() {
    this->initializeModel();
}

OAI_query_json_get_200_response::~OAI_query_json_get_200_response() {}

void OAI_query_json_get_200_response::initializeModel() {

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAI_query_json_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_query_json_get_200_response::fromJsonObject(QJsonObject json) {

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;
}

QString OAI_query_json_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_query_json_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

QList<OAIEvent> OAI_query_json_get_200_response::getResults() const {
    return m_results;
}
void OAI_query_json_get_200_response::setResults(const QList<OAIEvent> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAI_query_json_get_200_response::is_results_Set() const{
    return m_results_isSet;
}

bool OAI_query_json_get_200_response::is_results_Valid() const{
    return m_results_isValid;
}

bool OAI_query_json_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_query_json_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
