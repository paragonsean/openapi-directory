/*
 * Geographic API
 * The Geographic API extends the Semantic API, using a linked data approach to enhance location concepts used in The New York Times' controlled vocabulary and data resources which combine them with the GeoNames database, an authoritative and free to use database of global geographical places, names and features. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.QueryJsonGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queryJsonGet
     * @param name A displayable name for the specified place. (optional)
     * @param latitude The latitude of the specified place.  (optional)
     * @param longitude The longitude of the specified place. (optional)
     * @param elevation The elevation of the specified place, in meters. (optional)
     * @param sw Along with ne, forms a bounded box using the longitude and latitude coordinates specified as the southwest corner. The search results are limited to the resulting box. Two float values, separated by a comma &#x60;latitude,longitude&#x60; &lt;br/&gt; The ne parameter is required to use this parameter. (optional)
     * @param query Search keywords to perform a text search on the fields: web_description, event_name and venue_name. &#39;AND&#39; searches can be performed by wrapping query terms in quotes. If you do not specify a query, all results will be returned.  (optional)
     * @param filter Filters search results based on the facets provided.  For more information on the values you can filter on, see Facets.  (optional)
     * @param dateRange Start date to end date in the following format- YYYY-MM-DD:YYYY-MM-DD (optional)
     * @param facets When facets is set to 1, a count of all facets will be included in the response. (optional, default to 0)
     * @param sort Sorts your results on the fields specified. &lt;br/&gt; &#x60;sort_value1+[asc | desc],sort_value2+[asc|desc],[...]&#x60;&lt;br/&gt; Appending +asc to a facet or response will sort results on that value in ascending order. Appending +desc to a facet or response  will sort results in descending order. You can sort on multiple fields. You can sort on any facet. For the list of responses you can sort on, see the Sortable Field column in the Response table. &lt;br/&gt;&lt;br/&gt;If you are doing a spatial search with the ll parameter, you can also sort by the distance from the center of the search: dist+[asc | desc] &lt;br/&gt; **Note:** either +asc or +desc is required when using the sort parameter.  (optional)
     * @param limit Limits the number of results returned (optional, default to 20)
     * @param offset Sets the starting point of the result set (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of events </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryJsonGetCall(String name, String latitude, String longitude, Integer elevation, String sw, String query, String filter, String dateRange, Integer facets, String sort, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/query.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (elevation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elevation", elevation));
        }

        if (sw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sw", sw));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (dateRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_range", dateRange));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryJsonGetValidateBeforeCall(String name, String latitude, String longitude, Integer elevation, String sw, String query, String filter, String dateRange, Integer facets, String sort, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return queryJsonGetCall(name, latitude, longitude, elevation, sw, query, filter, dateRange, facets, sort, limit, offset, _callback);

    }

    /**
     * Geographic API
     * Geographic API
     * @param name A displayable name for the specified place. (optional)
     * @param latitude The latitude of the specified place.  (optional)
     * @param longitude The longitude of the specified place. (optional)
     * @param elevation The elevation of the specified place, in meters. (optional)
     * @param sw Along with ne, forms a bounded box using the longitude and latitude coordinates specified as the southwest corner. The search results are limited to the resulting box. Two float values, separated by a comma &#x60;latitude,longitude&#x60; &lt;br/&gt; The ne parameter is required to use this parameter. (optional)
     * @param query Search keywords to perform a text search on the fields: web_description, event_name and venue_name. &#39;AND&#39; searches can be performed by wrapping query terms in quotes. If you do not specify a query, all results will be returned.  (optional)
     * @param filter Filters search results based on the facets provided.  For more information on the values you can filter on, see Facets.  (optional)
     * @param dateRange Start date to end date in the following format- YYYY-MM-DD:YYYY-MM-DD (optional)
     * @param facets When facets is set to 1, a count of all facets will be included in the response. (optional, default to 0)
     * @param sort Sorts your results on the fields specified. &lt;br/&gt; &#x60;sort_value1+[asc | desc],sort_value2+[asc|desc],[...]&#x60;&lt;br/&gt; Appending +asc to a facet or response will sort results on that value in ascending order. Appending +desc to a facet or response  will sort results in descending order. You can sort on multiple fields. You can sort on any facet. For the list of responses you can sort on, see the Sortable Field column in the Response table. &lt;br/&gt;&lt;br/&gt;If you are doing a spatial search with the ll parameter, you can also sort by the distance from the center of the search: dist+[asc | desc] &lt;br/&gt; **Note:** either +asc or +desc is required when using the sort parameter.  (optional)
     * @param limit Limits the number of results returned (optional, default to 20)
     * @param offset Sets the starting point of the result set (optional, default to 0)
     * @return QueryJsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of events </td><td>  -  </td></tr>
     </table>
     */
    public QueryJsonGet200Response queryJsonGet(String name, String latitude, String longitude, Integer elevation, String sw, String query, String filter, String dateRange, Integer facets, String sort, Integer limit, Integer offset) throws ApiException {
        ApiResponse<QueryJsonGet200Response> localVarResp = queryJsonGetWithHttpInfo(name, latitude, longitude, elevation, sw, query, filter, dateRange, facets, sort, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Geographic API
     * Geographic API
     * @param name A displayable name for the specified place. (optional)
     * @param latitude The latitude of the specified place.  (optional)
     * @param longitude The longitude of the specified place. (optional)
     * @param elevation The elevation of the specified place, in meters. (optional)
     * @param sw Along with ne, forms a bounded box using the longitude and latitude coordinates specified as the southwest corner. The search results are limited to the resulting box. Two float values, separated by a comma &#x60;latitude,longitude&#x60; &lt;br/&gt; The ne parameter is required to use this parameter. (optional)
     * @param query Search keywords to perform a text search on the fields: web_description, event_name and venue_name. &#39;AND&#39; searches can be performed by wrapping query terms in quotes. If you do not specify a query, all results will be returned.  (optional)
     * @param filter Filters search results based on the facets provided.  For more information on the values you can filter on, see Facets.  (optional)
     * @param dateRange Start date to end date in the following format- YYYY-MM-DD:YYYY-MM-DD (optional)
     * @param facets When facets is set to 1, a count of all facets will be included in the response. (optional, default to 0)
     * @param sort Sorts your results on the fields specified. &lt;br/&gt; &#x60;sort_value1+[asc | desc],sort_value2+[asc|desc],[...]&#x60;&lt;br/&gt; Appending +asc to a facet or response will sort results on that value in ascending order. Appending +desc to a facet or response  will sort results in descending order. You can sort on multiple fields. You can sort on any facet. For the list of responses you can sort on, see the Sortable Field column in the Response table. &lt;br/&gt;&lt;br/&gt;If you are doing a spatial search with the ll parameter, you can also sort by the distance from the center of the search: dist+[asc | desc] &lt;br/&gt; **Note:** either +asc or +desc is required when using the sort parameter.  (optional)
     * @param limit Limits the number of results returned (optional, default to 20)
     * @param offset Sets the starting point of the result set (optional, default to 0)
     * @return ApiResponse&lt;QueryJsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of events </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryJsonGet200Response> queryJsonGetWithHttpInfo(String name, String latitude, String longitude, Integer elevation, String sw, String query, String filter, String dateRange, Integer facets, String sort, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = queryJsonGetValidateBeforeCall(name, latitude, longitude, elevation, sw, query, filter, dateRange, facets, sort, limit, offset, null);
        Type localVarReturnType = new TypeToken<QueryJsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Geographic API (asynchronously)
     * Geographic API
     * @param name A displayable name for the specified place. (optional)
     * @param latitude The latitude of the specified place.  (optional)
     * @param longitude The longitude of the specified place. (optional)
     * @param elevation The elevation of the specified place, in meters. (optional)
     * @param sw Along with ne, forms a bounded box using the longitude and latitude coordinates specified as the southwest corner. The search results are limited to the resulting box. Two float values, separated by a comma &#x60;latitude,longitude&#x60; &lt;br/&gt; The ne parameter is required to use this parameter. (optional)
     * @param query Search keywords to perform a text search on the fields: web_description, event_name and venue_name. &#39;AND&#39; searches can be performed by wrapping query terms in quotes. If you do not specify a query, all results will be returned.  (optional)
     * @param filter Filters search results based on the facets provided.  For more information on the values you can filter on, see Facets.  (optional)
     * @param dateRange Start date to end date in the following format- YYYY-MM-DD:YYYY-MM-DD (optional)
     * @param facets When facets is set to 1, a count of all facets will be included in the response. (optional, default to 0)
     * @param sort Sorts your results on the fields specified. &lt;br/&gt; &#x60;sort_value1+[asc | desc],sort_value2+[asc|desc],[...]&#x60;&lt;br/&gt; Appending +asc to a facet or response will sort results on that value in ascending order. Appending +desc to a facet or response  will sort results in descending order. You can sort on multiple fields. You can sort on any facet. For the list of responses you can sort on, see the Sortable Field column in the Response table. &lt;br/&gt;&lt;br/&gt;If you are doing a spatial search with the ll parameter, you can also sort by the distance from the center of the search: dist+[asc | desc] &lt;br/&gt; **Note:** either +asc or +desc is required when using the sort parameter.  (optional)
     * @param limit Limits the number of results returned (optional, default to 20)
     * @param offset Sets the starting point of the result set (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of events </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryJsonGetAsync(String name, String latitude, String longitude, Integer elevation, String sw, String query, String filter, String dateRange, Integer facets, String sort, Integer limit, Integer offset, final ApiCallback<QueryJsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryJsonGetValidateBeforeCall(name, latitude, longitude, elevation, sw, query, filter, dateRange, facets, sort, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<QueryJsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
