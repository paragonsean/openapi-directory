/*
 * Geographic API
 * The Geographic API extends the Semantic API, using a linked data approach to enhance location concepts used in The New York Times' controlled vocabulary and data resources which combine them with the GeoNames database, an authoritative and free to use database of global geographical places, names and features. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:33.020728-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CRITIC_NAME = "critic_name";
  @SerializedName(SERIALIZED_NAME_CRITIC_NAME)
  private String criticName;

  public static final String SERIALIZED_NAME_EVENT_DETAIL_URL = "event_detail_url";
  @SerializedName(SERIALIZED_NAME_EVENT_DETAIL_URL)
  private String eventDetailUrl;

  public static final String SERIALIZED_NAME_EVENT_ID = "event_id";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private Integer eventId;

  public static final String SERIALIZED_NAME_EVENT_NAME = "event_name";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_EVENT_SCHEDULE_ID = "event_schedule_id";
  @SerializedName(SERIALIZED_NAME_EVENT_SCHEDULE_ID)
  private Integer eventScheduleId;

  public static final String SERIALIZED_NAME_FESTIVAL = "festival";
  @SerializedName(SERIALIZED_NAME_FESTIVAL)
  private Boolean festival;

  public static final String SERIALIZED_NAME_FILM_RATING = "film_rating";
  @SerializedName(SERIALIZED_NAME_FILM_RATING)
  private Boolean filmRating;

  public static final String SERIALIZED_NAME_FREE = "free";
  @SerializedName(SERIALIZED_NAME_FREE)
  private Boolean free;

  public static final String SERIALIZED_NAME_KID_FRIENDLY = "kid_friendly";
  @SerializedName(SERIALIZED_NAME_KID_FRIENDLY)
  private Boolean kidFriendly;

  public static final String SERIALIZED_NAME_LAST_CHANCE = "last_chance";
  @SerializedName(SERIALIZED_NAME_LAST_CHANCE)
  private Boolean lastChance;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_LONG_RUNNING_SHOW = "long_running_show";
  @SerializedName(SERIALIZED_NAME_LONG_RUNNING_SHOW)
  private Boolean longRunningShow;

  public static final String SERIALIZED_NAME_PREVIEWS_AND_OPENINGS = "previews_and_openings";
  @SerializedName(SERIALIZED_NAME_PREVIEWS_AND_OPENINGS)
  private Boolean previewsAndOpenings;

  public static final String SERIALIZED_NAME_RECUR_DAYS = "recur_days";
  @SerializedName(SERIALIZED_NAME_RECUR_DAYS)
  private List<String> recurDays = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECURRING_START_DATE = "recurring_start_date";
  @SerializedName(SERIALIZED_NAME_RECURRING_START_DATE)
  private String recurringStartDate;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TIMES_PICK = "times_pick";
  @SerializedName(SERIALIZED_NAME_TIMES_PICK)
  private Boolean timesPick;

  public static final String SERIALIZED_NAME_WEB_DESCRIPTION = "web_description";
  @SerializedName(SERIALIZED_NAME_WEB_DESCRIPTION)
  private String webDescription;

  public Event() {
  }

  public Event city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Event criticName(String criticName) {
    this.criticName = criticName;
    return this;
  }

  /**
   * Get criticName
   * @return criticName
   */
  @javax.annotation.Nullable
  public String getCriticName() {
    return criticName;
  }

  public void setCriticName(String criticName) {
    this.criticName = criticName;
  }


  public Event eventDetailUrl(String eventDetailUrl) {
    this.eventDetailUrl = eventDetailUrl;
    return this;
  }

  /**
   * Get eventDetailUrl
   * @return eventDetailUrl
   */
  @javax.annotation.Nullable
  public String getEventDetailUrl() {
    return eventDetailUrl;
  }

  public void setEventDetailUrl(String eventDetailUrl) {
    this.eventDetailUrl = eventDetailUrl;
  }


  public Event eventId(Integer eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Get eventId
   * @return eventId
   */
  @javax.annotation.Nullable
  public Integer getEventId() {
    return eventId;
  }

  public void setEventId(Integer eventId) {
    this.eventId = eventId;
  }


  public Event eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Get eventName
   * @return eventName
   */
  @javax.annotation.Nullable
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public Event eventScheduleId(Integer eventScheduleId) {
    this.eventScheduleId = eventScheduleId;
    return this;
  }

  /**
   * Get eventScheduleId
   * @return eventScheduleId
   */
  @javax.annotation.Nullable
  public Integer getEventScheduleId() {
    return eventScheduleId;
  }

  public void setEventScheduleId(Integer eventScheduleId) {
    this.eventScheduleId = eventScheduleId;
  }


  public Event festival(Boolean festival) {
    this.festival = festival;
    return this;
  }

  /**
   * Get festival
   * @return festival
   */
  @javax.annotation.Nullable
  public Boolean getFestival() {
    return festival;
  }

  public void setFestival(Boolean festival) {
    this.festival = festival;
  }


  public Event filmRating(Boolean filmRating) {
    this.filmRating = filmRating;
    return this;
  }

  /**
   * Get filmRating
   * @return filmRating
   */
  @javax.annotation.Nullable
  public Boolean getFilmRating() {
    return filmRating;
  }

  public void setFilmRating(Boolean filmRating) {
    this.filmRating = filmRating;
  }


  public Event free(Boolean free) {
    this.free = free;
    return this;
  }

  /**
   * Get free
   * @return free
   */
  @javax.annotation.Nullable
  public Boolean getFree() {
    return free;
  }

  public void setFree(Boolean free) {
    this.free = free;
  }


  public Event kidFriendly(Boolean kidFriendly) {
    this.kidFriendly = kidFriendly;
    return this;
  }

  /**
   * Get kidFriendly
   * @return kidFriendly
   */
  @javax.annotation.Nullable
  public Boolean getKidFriendly() {
    return kidFriendly;
  }

  public void setKidFriendly(Boolean kidFriendly) {
    this.kidFriendly = kidFriendly;
  }


  public Event lastChance(Boolean lastChance) {
    this.lastChance = lastChance;
    return this;
  }

  /**
   * Get lastChance
   * @return lastChance
   */
  @javax.annotation.Nullable
  public Boolean getLastChance() {
    return lastChance;
  }

  public void setLastChance(Boolean lastChance) {
    this.lastChance = lastChance;
  }


  public Event lastModified(String lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public String getLastModified() {
    return lastModified;
  }

  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }


  public Event longRunningShow(Boolean longRunningShow) {
    this.longRunningShow = longRunningShow;
    return this;
  }

  /**
   * Get longRunningShow
   * @return longRunningShow
   */
  @javax.annotation.Nullable
  public Boolean getLongRunningShow() {
    return longRunningShow;
  }

  public void setLongRunningShow(Boolean longRunningShow) {
    this.longRunningShow = longRunningShow;
  }


  public Event previewsAndOpenings(Boolean previewsAndOpenings) {
    this.previewsAndOpenings = previewsAndOpenings;
    return this;
  }

  /**
   * Get previewsAndOpenings
   * @return previewsAndOpenings
   */
  @javax.annotation.Nullable
  public Boolean getPreviewsAndOpenings() {
    return previewsAndOpenings;
  }

  public void setPreviewsAndOpenings(Boolean previewsAndOpenings) {
    this.previewsAndOpenings = previewsAndOpenings;
  }


  public Event recurDays(List<String> recurDays) {
    this.recurDays = recurDays;
    return this;
  }

  public Event addRecurDaysItem(String recurDaysItem) {
    if (this.recurDays == null) {
      this.recurDays = new ArrayList<>();
    }
    this.recurDays.add(recurDaysItem);
    return this;
  }

  /**
   * Get recurDays
   * @return recurDays
   */
  @javax.annotation.Nullable
  public List<String> getRecurDays() {
    return recurDays;
  }

  public void setRecurDays(List<String> recurDays) {
    this.recurDays = recurDays;
  }


  public Event recurringStartDate(String recurringStartDate) {
    this.recurringStartDate = recurringStartDate;
    return this;
  }

  /**
   * Get recurringStartDate
   * @return recurringStartDate
   */
  @javax.annotation.Nullable
  public String getRecurringStartDate() {
    return recurringStartDate;
  }

  public void setRecurringStartDate(String recurringStartDate) {
    this.recurringStartDate = recurringStartDate;
  }


  public Event state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Event timesPick(Boolean timesPick) {
    this.timesPick = timesPick;
    return this;
  }

  /**
   * Get timesPick
   * @return timesPick
   */
  @javax.annotation.Nullable
  public Boolean getTimesPick() {
    return timesPick;
  }

  public void setTimesPick(Boolean timesPick) {
    this.timesPick = timesPick;
  }


  public Event webDescription(String webDescription) {
    this.webDescription = webDescription;
    return this;
  }

  /**
   * Get webDescription
   * @return webDescription
   */
  @javax.annotation.Nullable
  public String getWebDescription() {
    return webDescription;
  }

  public void setWebDescription(String webDescription) {
    this.webDescription = webDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.city, event.city) &&
        Objects.equals(this.criticName, event.criticName) &&
        Objects.equals(this.eventDetailUrl, event.eventDetailUrl) &&
        Objects.equals(this.eventId, event.eventId) &&
        Objects.equals(this.eventName, event.eventName) &&
        Objects.equals(this.eventScheduleId, event.eventScheduleId) &&
        Objects.equals(this.festival, event.festival) &&
        Objects.equals(this.filmRating, event.filmRating) &&
        Objects.equals(this.free, event.free) &&
        Objects.equals(this.kidFriendly, event.kidFriendly) &&
        Objects.equals(this.lastChance, event.lastChance) &&
        Objects.equals(this.lastModified, event.lastModified) &&
        Objects.equals(this.longRunningShow, event.longRunningShow) &&
        Objects.equals(this.previewsAndOpenings, event.previewsAndOpenings) &&
        Objects.equals(this.recurDays, event.recurDays) &&
        Objects.equals(this.recurringStartDate, event.recurringStartDate) &&
        Objects.equals(this.state, event.state) &&
        Objects.equals(this.timesPick, event.timesPick) &&
        Objects.equals(this.webDescription, event.webDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, criticName, eventDetailUrl, eventId, eventName, eventScheduleId, festival, filmRating, free, kidFriendly, lastChance, lastModified, longRunningShow, previewsAndOpenings, recurDays, recurringStartDate, state, timesPick, webDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    criticName: ").append(toIndentedString(criticName)).append("\n");
    sb.append("    eventDetailUrl: ").append(toIndentedString(eventDetailUrl)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    eventScheduleId: ").append(toIndentedString(eventScheduleId)).append("\n");
    sb.append("    festival: ").append(toIndentedString(festival)).append("\n");
    sb.append("    filmRating: ").append(toIndentedString(filmRating)).append("\n");
    sb.append("    free: ").append(toIndentedString(free)).append("\n");
    sb.append("    kidFriendly: ").append(toIndentedString(kidFriendly)).append("\n");
    sb.append("    lastChance: ").append(toIndentedString(lastChance)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    longRunningShow: ").append(toIndentedString(longRunningShow)).append("\n");
    sb.append("    previewsAndOpenings: ").append(toIndentedString(previewsAndOpenings)).append("\n");
    sb.append("    recurDays: ").append(toIndentedString(recurDays)).append("\n");
    sb.append("    recurringStartDate: ").append(toIndentedString(recurringStartDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    timesPick: ").append(toIndentedString(timesPick)).append("\n");
    sb.append("    webDescription: ").append(toIndentedString(webDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("critic_name");
    openapiFields.add("event_detail_url");
    openapiFields.add("event_id");
    openapiFields.add("event_name");
    openapiFields.add("event_schedule_id");
    openapiFields.add("festival");
    openapiFields.add("film_rating");
    openapiFields.add("free");
    openapiFields.add("kid_friendly");
    openapiFields.add("last_chance");
    openapiFields.add("last_modified");
    openapiFields.add("long_running_show");
    openapiFields.add("previews_and_openings");
    openapiFields.add("recur_days");
    openapiFields.add("recurring_start_date");
    openapiFields.add("state");
    openapiFields.add("times_pick");
    openapiFields.add("web_description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("critic_name") != null && !jsonObj.get("critic_name").isJsonNull()) && !jsonObj.get("critic_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `critic_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("critic_name").toString()));
      }
      if ((jsonObj.get("event_detail_url") != null && !jsonObj.get("event_detail_url").isJsonNull()) && !jsonObj.get("event_detail_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_detail_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_detail_url").toString()));
      }
      if ((jsonObj.get("event_name") != null && !jsonObj.get("event_name").isJsonNull()) && !jsonObj.get("event_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_name").toString()));
      }
      if ((jsonObj.get("last_modified") != null && !jsonObj.get("last_modified").isJsonNull()) && !jsonObj.get("last_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recur_days") != null && !jsonObj.get("recur_days").isJsonNull() && !jsonObj.get("recur_days").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recur_days` to be an array in the JSON string but got `%s`", jsonObj.get("recur_days").toString()));
      }
      if ((jsonObj.get("recurring_start_date") != null && !jsonObj.get("recurring_start_date").isJsonNull()) && !jsonObj.get("recurring_start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurring_start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurring_start_date").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("web_description") != null && !jsonObj.get("web_description").isJsonNull()) && !jsonObj.get("web_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `web_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("web_description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

