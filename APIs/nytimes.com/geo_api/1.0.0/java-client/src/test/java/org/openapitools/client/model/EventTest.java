/*
 * Geographic API
 * The Geographic API extends the Semantic API, using a linked data approach to enhance location concepts used in The New York Times' controlled vocabulary and data resources which combine them with the GeoNames database, an authoritative and free to use database of global geographical places, names and features. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Event
 */
public class EventTest {
    private final Event model = new Event();

    /**
     * Model tests for Event
     */
    @Test
    public void testEvent() {
        // TODO: test Event
    }

    /**
     * Test the property 'city'
     */
    @Test
    public void cityTest() {
        // TODO: test city
    }

    /**
     * Test the property 'criticName'
     */
    @Test
    public void criticNameTest() {
        // TODO: test criticName
    }

    /**
     * Test the property 'eventDetailUrl'
     */
    @Test
    public void eventDetailUrlTest() {
        // TODO: test eventDetailUrl
    }

    /**
     * Test the property 'eventId'
     */
    @Test
    public void eventIdTest() {
        // TODO: test eventId
    }

    /**
     * Test the property 'eventName'
     */
    @Test
    public void eventNameTest() {
        // TODO: test eventName
    }

    /**
     * Test the property 'eventScheduleId'
     */
    @Test
    public void eventScheduleIdTest() {
        // TODO: test eventScheduleId
    }

    /**
     * Test the property 'festival'
     */
    @Test
    public void festivalTest() {
        // TODO: test festival
    }

    /**
     * Test the property 'filmRating'
     */
    @Test
    public void filmRatingTest() {
        // TODO: test filmRating
    }

    /**
     * Test the property 'free'
     */
    @Test
    public void freeTest() {
        // TODO: test free
    }

    /**
     * Test the property 'kidFriendly'
     */
    @Test
    public void kidFriendlyTest() {
        // TODO: test kidFriendly
    }

    /**
     * Test the property 'lastChance'
     */
    @Test
    public void lastChanceTest() {
        // TODO: test lastChance
    }

    /**
     * Test the property 'lastModified'
     */
    @Test
    public void lastModifiedTest() {
        // TODO: test lastModified
    }

    /**
     * Test the property 'longRunningShow'
     */
    @Test
    public void longRunningShowTest() {
        // TODO: test longRunningShow
    }

    /**
     * Test the property 'previewsAndOpenings'
     */
    @Test
    public void previewsAndOpeningsTest() {
        // TODO: test previewsAndOpenings
    }

    /**
     * Test the property 'recurDays'
     */
    @Test
    public void recurDaysTest() {
        // TODO: test recurDays
    }

    /**
     * Test the property 'recurringStartDate'
     */
    @Test
    public void recurringStartDateTest() {
        // TODO: test recurringStartDate
    }

    /**
     * Test the property 'state'
     */
    @Test
    public void stateTest() {
        // TODO: test state
    }

    /**
     * Test the property 'timesPick'
     */
    @Test
    public void timesPickTest() {
        // TODO: test timesPick
    }

    /**
     * Test the property 'webDescription'
     */
    @Test
    public void webDescriptionTest() {
        // TODO: test webDescription
    }

}
