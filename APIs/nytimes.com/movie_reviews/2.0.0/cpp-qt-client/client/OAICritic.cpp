/**
 * Movie Reviews API
 * With the Movie Reviews API, you can search New York Times movie reviews by keyword and get lists of NYT Critics' Picks.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICritic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICritic::OAICritic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICritic::OAICritic() {
    this->initializeModel();
}

OAICritic::~OAICritic() {}

void OAICritic::initializeModel() {

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_multimedia_isSet = false;
    m_multimedia_isValid = false;

    m_seo_name_isSet = false;
    m_seo_name_isValid = false;

    m_sort_name_isSet = false;
    m_sort_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICritic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICritic::fromJsonObject(QJsonObject json) {

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_multimedia_isValid = ::OpenAPI::fromJsonValue(m_multimedia, json[QString("multimedia")]);
    m_multimedia_isSet = !json[QString("multimedia")].isNull() && m_multimedia_isValid;

    m_seo_name_isValid = ::OpenAPI::fromJsonValue(m_seo_name, json[QString("seo_name")]);
    m_seo_name_isSet = !json[QString("seo_name")].isNull() && m_seo_name_isValid;

    m_sort_name_isValid = ::OpenAPI::fromJsonValue(m_sort_name, json[QString("sort_name")]);
    m_sort_name_isSet = !json[QString("sort_name")].isNull() && m_sort_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICritic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICritic::asJsonObject() const {
    QJsonObject obj;
    if (m_bio_isSet) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_multimedia.isSet()) {
        obj.insert(QString("multimedia"), ::OpenAPI::toJsonValue(m_multimedia));
    }
    if (m_seo_name_isSet) {
        obj.insert(QString("seo_name"), ::OpenAPI::toJsonValue(m_seo_name));
    }
    if (m_sort_name_isSet) {
        obj.insert(QString("sort_name"), ::OpenAPI::toJsonValue(m_sort_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICritic::getBio() const {
    return m_bio;
}
void OAICritic::setBio(const QString &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAICritic::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAICritic::is_bio_Valid() const{
    return m_bio_isValid;
}

QString OAICritic::getDisplayName() const {
    return m_display_name;
}
void OAICritic::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICritic::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICritic::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAICritic_multimedia OAICritic::getMultimedia() const {
    return m_multimedia;
}
void OAICritic::setMultimedia(const OAICritic_multimedia &multimedia) {
    m_multimedia = multimedia;
    m_multimedia_isSet = true;
}

bool OAICritic::is_multimedia_Set() const{
    return m_multimedia_isSet;
}

bool OAICritic::is_multimedia_Valid() const{
    return m_multimedia_isValid;
}

QString OAICritic::getSeoName() const {
    return m_seo_name;
}
void OAICritic::setSeoName(const QString &seo_name) {
    m_seo_name = seo_name;
    m_seo_name_isSet = true;
}

bool OAICritic::is_seo_name_Set() const{
    return m_seo_name_isSet;
}

bool OAICritic::is_seo_name_Valid() const{
    return m_seo_name_isValid;
}

QString OAICritic::getSortName() const {
    return m_sort_name;
}
void OAICritic::setSortName(const QString &sort_name) {
    m_sort_name = sort_name;
    m_sort_name_isSet = true;
}

bool OAICritic::is_sort_name_Set() const{
    return m_sort_name_isSet;
}

bool OAICritic::is_sort_name_Valid() const{
    return m_sort_name_isValid;
}

QString OAICritic::getStatus() const {
    return m_status;
}
void OAICritic::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICritic::is_status_Set() const{
    return m_status_isSet;
}

bool OAICritic::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICritic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multimedia.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seo_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICritic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
