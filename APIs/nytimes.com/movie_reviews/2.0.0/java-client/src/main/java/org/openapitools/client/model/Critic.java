/*
 * Movie Reviews API
 * With the Movie Reviews API, you can search New York Times movie reviews by keyword and get lists of NYT Critics' Picks.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CriticMultimedia;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Critic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:28.954816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Critic {
  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MULTIMEDIA = "multimedia";
  @SerializedName(SERIALIZED_NAME_MULTIMEDIA)
  private CriticMultimedia multimedia;

  public static final String SERIALIZED_NAME_SEO_NAME = "seo_name";
  @SerializedName(SERIALIZED_NAME_SEO_NAME)
  private String seoName;

  public static final String SERIALIZED_NAME_SORT_NAME = "sort_name";
  @SerializedName(SERIALIZED_NAME_SORT_NAME)
  private String sortName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public Critic() {
  }

  public Critic bio(String bio) {
    this.bio = bio;
    return this;
  }

  /**
   * Get bio
   * @return bio
   */
  @javax.annotation.Nullable
  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }


  public Critic displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Critic multimedia(CriticMultimedia multimedia) {
    this.multimedia = multimedia;
    return this;
  }

  /**
   * Get multimedia
   * @return multimedia
   */
  @javax.annotation.Nullable
  public CriticMultimedia getMultimedia() {
    return multimedia;
  }

  public void setMultimedia(CriticMultimedia multimedia) {
    this.multimedia = multimedia;
  }


  public Critic seoName(String seoName) {
    this.seoName = seoName;
    return this;
  }

  /**
   * Get seoName
   * @return seoName
   */
  @javax.annotation.Nullable
  public String getSeoName() {
    return seoName;
  }

  public void setSeoName(String seoName) {
    this.seoName = seoName;
  }


  public Critic sortName(String sortName) {
    this.sortName = sortName;
    return this;
  }

  /**
   * Get sortName
   * @return sortName
   */
  @javax.annotation.Nullable
  public String getSortName() {
    return sortName;
  }

  public void setSortName(String sortName) {
    this.sortName = sortName;
  }


  public Critic status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Critic critic = (Critic) o;
    return Objects.equals(this.bio, critic.bio) &&
        Objects.equals(this.displayName, critic.displayName) &&
        Objects.equals(this.multimedia, critic.multimedia) &&
        Objects.equals(this.seoName, critic.seoName) &&
        Objects.equals(this.sortName, critic.sortName) &&
        Objects.equals(this.status, critic.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bio, displayName, multimedia, seoName, sortName, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Critic {\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    multimedia: ").append(toIndentedString(multimedia)).append("\n");
    sb.append("    seoName: ").append(toIndentedString(seoName)).append("\n");
    sb.append("    sortName: ").append(toIndentedString(sortName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bio");
    openapiFields.add("display_name");
    openapiFields.add("multimedia");
    openapiFields.add("seo_name");
    openapiFields.add("sort_name");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Critic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Critic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Critic is not found in the empty JSON string", Critic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Critic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Critic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      // validate the optional field `multimedia`
      if (jsonObj.get("multimedia") != null && !jsonObj.get("multimedia").isJsonNull()) {
        CriticMultimedia.validateJsonElement(jsonObj.get("multimedia"));
      }
      if ((jsonObj.get("seo_name") != null && !jsonObj.get("seo_name").isJsonNull()) && !jsonObj.get("seo_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seo_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seo_name").toString()));
      }
      if ((jsonObj.get("sort_name") != null && !jsonObj.get("sort_name").isJsonNull()) && !jsonObj.get("sort_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort_name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Critic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Critic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Critic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Critic.class));

       return (TypeAdapter<T>) new TypeAdapter<Critic>() {
           @Override
           public void write(JsonWriter out, Critic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Critic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Critic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Critic
   * @throws IOException if the JSON string is invalid with respect to Critic
   */
  public static Critic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Critic.class);
  }

  /**
   * Convert an instance of Critic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

