/*
 * Movie Reviews API
 * With the Movie Reviews API, you can search New York Times movie reviews by keyword and get lists of NYT Critics' Picks.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CriticsResourceTypeJsonGet200Response;
import org.openapitools.client.model.ReviewsSearchJsonGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for criticsResourceTypeJsonGet
     * @param resourceType all | full-time | part-time | [reviewer-name]  Specify all to get all Times reviewers, or specify full-time or part-time to get that subset. Specify a reviewer&#39;s name to get details about a particular reviewer.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Movie Critics </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criticsResourceTypeJsonGetCall(String resourceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/critics/{resource-type}.json"
            .replace("{" + "resource-type" + "}", localVarApiClient.escapeString(resourceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call criticsResourceTypeJsonGetValidateBeforeCall(String resourceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling criticsResourceTypeJsonGet(Async)");
        }

        return criticsResourceTypeJsonGetCall(resourceType, _callback);

    }

    /**
     * 
     * 
     * @param resourceType all | full-time | part-time | [reviewer-name]  Specify all to get all Times reviewers, or specify full-time or part-time to get that subset. Specify a reviewer&#39;s name to get details about a particular reviewer.  (required)
     * @return CriticsResourceTypeJsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Movie Critics </td><td>  -  </td></tr>
     </table>
     */
    public CriticsResourceTypeJsonGet200Response criticsResourceTypeJsonGet(String resourceType) throws ApiException {
        ApiResponse<CriticsResourceTypeJsonGet200Response> localVarResp = criticsResourceTypeJsonGetWithHttpInfo(resourceType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resourceType all | full-time | part-time | [reviewer-name]  Specify all to get all Times reviewers, or specify full-time or part-time to get that subset. Specify a reviewer&#39;s name to get details about a particular reviewer.  (required)
     * @return ApiResponse&lt;CriticsResourceTypeJsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Movie Critics </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CriticsResourceTypeJsonGet200Response> criticsResourceTypeJsonGetWithHttpInfo(String resourceType) throws ApiException {
        okhttp3.Call localVarCall = criticsResourceTypeJsonGetValidateBeforeCall(resourceType, null);
        Type localVarReturnType = new TypeToken<CriticsResourceTypeJsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resourceType all | full-time | part-time | [reviewer-name]  Specify all to get all Times reviewers, or specify full-time or part-time to get that subset. Specify a reviewer&#39;s name to get details about a particular reviewer.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Movie Critics </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criticsResourceTypeJsonGetAsync(String resourceType, final ApiCallback<CriticsResourceTypeJsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = criticsResourceTypeJsonGetValidateBeforeCall(resourceType, _callback);
        Type localVarReturnType = new TypeToken<CriticsResourceTypeJsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsResourceTypeJsonGet
     * @param resourceType Specify all to retrieve all reviews, including NYT Critics&#39; Picks.  Specify picks to get NYT Critics&#39; Picks currently in theaters.   (required)
     * @param offset Positive integer, multiple of 20 (optional, default to 20)
     * @param order Sets the sort order of the results.  Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.  If you do not specify a sort order, the results will be ordered by publication-date.  (optional, default to by-publication-date)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Movies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsResourceTypeJsonGetCall(String resourceType, Integer offset, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reviews/{resource-type}.json"
            .replace("{" + "resource-type" + "}", localVarApiClient.escapeString(resourceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsResourceTypeJsonGetValidateBeforeCall(String resourceType, Integer offset, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling reviewsResourceTypeJsonGet(Async)");
        }

        return reviewsResourceTypeJsonGetCall(resourceType, offset, order, _callback);

    }

    /**
     * 
     * 
     * @param resourceType Specify all to retrieve all reviews, including NYT Critics&#39; Picks.  Specify picks to get NYT Critics&#39; Picks currently in theaters.   (required)
     * @param offset Positive integer, multiple of 20 (optional, default to 20)
     * @param order Sets the sort order of the results.  Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.  If you do not specify a sort order, the results will be ordered by publication-date.  (optional, default to by-publication-date)
     * @return ReviewsSearchJsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Movies </td><td>  -  </td></tr>
     </table>
     */
    public ReviewsSearchJsonGet200Response reviewsResourceTypeJsonGet(String resourceType, Integer offset, String order) throws ApiException {
        ApiResponse<ReviewsSearchJsonGet200Response> localVarResp = reviewsResourceTypeJsonGetWithHttpInfo(resourceType, offset, order);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resourceType Specify all to retrieve all reviews, including NYT Critics&#39; Picks.  Specify picks to get NYT Critics&#39; Picks currently in theaters.   (required)
     * @param offset Positive integer, multiple of 20 (optional, default to 20)
     * @param order Sets the sort order of the results.  Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.  If you do not specify a sort order, the results will be ordered by publication-date.  (optional, default to by-publication-date)
     * @return ApiResponse&lt;ReviewsSearchJsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Movies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReviewsSearchJsonGet200Response> reviewsResourceTypeJsonGetWithHttpInfo(String resourceType, Integer offset, String order) throws ApiException {
        okhttp3.Call localVarCall = reviewsResourceTypeJsonGetValidateBeforeCall(resourceType, offset, order, null);
        Type localVarReturnType = new TypeToken<ReviewsSearchJsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resourceType Specify all to retrieve all reviews, including NYT Critics&#39; Picks.  Specify picks to get NYT Critics&#39; Picks currently in theaters.   (required)
     * @param offset Positive integer, multiple of 20 (optional, default to 20)
     * @param order Sets the sort order of the results.  Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.  If you do not specify a sort order, the results will be ordered by publication-date.  (optional, default to by-publication-date)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Movies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsResourceTypeJsonGetAsync(String resourceType, Integer offset, String order, final ApiCallback<ReviewsSearchJsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsResourceTypeJsonGetValidateBeforeCall(resourceType, offset, order, _callback);
        Type localVarReturnType = new TypeToken<ReviewsSearchJsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsSearchJsonGet
     * @param query Search keywords; matches movie title and indexed terms  To limit your search to exact matches only, surround your search string with single quotation marks (e.g., query&#x3D;&#39;28+days+later&#39;). Otherwise, responses will include partial matches (\&quot;head words\&quot;) as well as exact matches (e.g., president will match president, presidents and presidential).      If you specify multiple terms without quotation marks, they will be combined in an OR search.      If you omit the query parameter, your request will be equivalent to a reviews and NYT Critics&#39; Picks request.  (optional)
     * @param criticsPick Set this parameter to Y to limit the results to NYT Critics&#39; Picks. To get only those movies that have not been highlighted by Times critics, specify critics-pick&#x3D;N. (To get all reviews regardless of critics-pick status, simply omit this parameter.)  (optional)
     * @param reviewer Include this parameter to limit your results to reviews by a specific critic. Reviewer names should be formatted like this: Manohla Dargis.  (optional)
     * @param publicationDate Single date: YYYY-MM-DD  Start and end date: YYYY-MM-DD;YYYY-MM-DD  The publication-date is the date the review was first published in The Times.  (optional)
     * @param openingDate Single date: YYYY-MM-DD  Start and end date: YYYY-MM-DD;YYYY-MM-DD  The opening-date is the date the movie&#39;s opening date in the New York region.  (optional)
     * @param offset Positive integer, multiple of 20 (optional, default to 20)
     * @param order Sets the sort order of the results.  Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.  If you do not specify a sort order, the results will be ordered by publication-date.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Movies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsSearchJsonGetCall(String query, String criticsPick, String reviewer, String publicationDate, String openingDate, Integer offset, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reviews/search.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (criticsPick != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("critics-pick", criticsPick));
        }

        if (reviewer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reviewer", reviewer));
        }

        if (publicationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publication-date", publicationDate));
        }

        if (openingDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opening-date", openingDate));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsSearchJsonGetValidateBeforeCall(String query, String criticsPick, String reviewer, String publicationDate, String openingDate, Integer offset, String order, final ApiCallback _callback) throws ApiException {
        return reviewsSearchJsonGetCall(query, criticsPick, reviewer, publicationDate, openingDate, offset, order, _callback);

    }

    /**
     * 
     * 
     * @param query Search keywords; matches movie title and indexed terms  To limit your search to exact matches only, surround your search string with single quotation marks (e.g., query&#x3D;&#39;28+days+later&#39;). Otherwise, responses will include partial matches (\&quot;head words\&quot;) as well as exact matches (e.g., president will match president, presidents and presidential).      If you specify multiple terms without quotation marks, they will be combined in an OR search.      If you omit the query parameter, your request will be equivalent to a reviews and NYT Critics&#39; Picks request.  (optional)
     * @param criticsPick Set this parameter to Y to limit the results to NYT Critics&#39; Picks. To get only those movies that have not been highlighted by Times critics, specify critics-pick&#x3D;N. (To get all reviews regardless of critics-pick status, simply omit this parameter.)  (optional)
     * @param reviewer Include this parameter to limit your results to reviews by a specific critic. Reviewer names should be formatted like this: Manohla Dargis.  (optional)
     * @param publicationDate Single date: YYYY-MM-DD  Start and end date: YYYY-MM-DD;YYYY-MM-DD  The publication-date is the date the review was first published in The Times.  (optional)
     * @param openingDate Single date: YYYY-MM-DD  Start and end date: YYYY-MM-DD;YYYY-MM-DD  The opening-date is the date the movie&#39;s opening date in the New York region.  (optional)
     * @param offset Positive integer, multiple of 20 (optional, default to 20)
     * @param order Sets the sort order of the results.  Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.  If you do not specify a sort order, the results will be ordered by publication-date.  (optional)
     * @return ReviewsSearchJsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Movies </td><td>  -  </td></tr>
     </table>
     */
    public ReviewsSearchJsonGet200Response reviewsSearchJsonGet(String query, String criticsPick, String reviewer, String publicationDate, String openingDate, Integer offset, String order) throws ApiException {
        ApiResponse<ReviewsSearchJsonGet200Response> localVarResp = reviewsSearchJsonGetWithHttpInfo(query, criticsPick, reviewer, publicationDate, openingDate, offset, order);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param query Search keywords; matches movie title and indexed terms  To limit your search to exact matches only, surround your search string with single quotation marks (e.g., query&#x3D;&#39;28+days+later&#39;). Otherwise, responses will include partial matches (\&quot;head words\&quot;) as well as exact matches (e.g., president will match president, presidents and presidential).      If you specify multiple terms without quotation marks, they will be combined in an OR search.      If you omit the query parameter, your request will be equivalent to a reviews and NYT Critics&#39; Picks request.  (optional)
     * @param criticsPick Set this parameter to Y to limit the results to NYT Critics&#39; Picks. To get only those movies that have not been highlighted by Times critics, specify critics-pick&#x3D;N. (To get all reviews regardless of critics-pick status, simply omit this parameter.)  (optional)
     * @param reviewer Include this parameter to limit your results to reviews by a specific critic. Reviewer names should be formatted like this: Manohla Dargis.  (optional)
     * @param publicationDate Single date: YYYY-MM-DD  Start and end date: YYYY-MM-DD;YYYY-MM-DD  The publication-date is the date the review was first published in The Times.  (optional)
     * @param openingDate Single date: YYYY-MM-DD  Start and end date: YYYY-MM-DD;YYYY-MM-DD  The opening-date is the date the movie&#39;s opening date in the New York region.  (optional)
     * @param offset Positive integer, multiple of 20 (optional, default to 20)
     * @param order Sets the sort order of the results.  Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.  If you do not specify a sort order, the results will be ordered by publication-date.  (optional)
     * @return ApiResponse&lt;ReviewsSearchJsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Movies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReviewsSearchJsonGet200Response> reviewsSearchJsonGetWithHttpInfo(String query, String criticsPick, String reviewer, String publicationDate, String openingDate, Integer offset, String order) throws ApiException {
        okhttp3.Call localVarCall = reviewsSearchJsonGetValidateBeforeCall(query, criticsPick, reviewer, publicationDate, openingDate, offset, order, null);
        Type localVarReturnType = new TypeToken<ReviewsSearchJsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param query Search keywords; matches movie title and indexed terms  To limit your search to exact matches only, surround your search string with single quotation marks (e.g., query&#x3D;&#39;28+days+later&#39;). Otherwise, responses will include partial matches (\&quot;head words\&quot;) as well as exact matches (e.g., president will match president, presidents and presidential).      If you specify multiple terms without quotation marks, they will be combined in an OR search.      If you omit the query parameter, your request will be equivalent to a reviews and NYT Critics&#39; Picks request.  (optional)
     * @param criticsPick Set this parameter to Y to limit the results to NYT Critics&#39; Picks. To get only those movies that have not been highlighted by Times critics, specify critics-pick&#x3D;N. (To get all reviews regardless of critics-pick status, simply omit this parameter.)  (optional)
     * @param reviewer Include this parameter to limit your results to reviews by a specific critic. Reviewer names should be formatted like this: Manohla Dargis.  (optional)
     * @param publicationDate Single date: YYYY-MM-DD  Start and end date: YYYY-MM-DD;YYYY-MM-DD  The publication-date is the date the review was first published in The Times.  (optional)
     * @param openingDate Single date: YYYY-MM-DD  Start and end date: YYYY-MM-DD;YYYY-MM-DD  The opening-date is the date the movie&#39;s opening date in the New York region.  (optional)
     * @param offset Positive integer, multiple of 20 (optional, default to 20)
     * @param order Sets the sort order of the results.  Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.  If you do not specify a sort order, the results will be ordered by publication-date.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Movies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsSearchJsonGetAsync(String query, String criticsPick, String reviewer, String publicationDate, String openingDate, Integer offset, String order, final ApiCallback<ReviewsSearchJsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsSearchJsonGetValidateBeforeCall(query, criticsPick, reviewer, publicationDate, openingDate, offset, order, _callback);
        Type localVarReturnType = new TypeToken<ReviewsSearchJsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
