/**
 * Movie Reviews API
 * With the Movie Reviews API, you can search New York Times movie reviews by keyword and get lists of NYT Critics' Picks.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CriticMultimedia from './CriticMultimedia';

/**
 * The Critic model module.
 * @module model/Critic
 * @version 2.0.0
 */
class Critic {
    /**
     * Constructs a new <code>Critic</code>.
     * @alias module:model/Critic
     */
    constructor() { 
        
        Critic.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Critic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Critic} obj Optional instance to populate.
     * @return {module:model/Critic} The populated <code>Critic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Critic();

            if (data.hasOwnProperty('bio')) {
                obj['bio'] = ApiClient.convertToType(data['bio'], 'String');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('multimedia')) {
                obj['multimedia'] = CriticMultimedia.constructFromObject(data['multimedia']);
            }
            if (data.hasOwnProperty('seo_name')) {
                obj['seo_name'] = ApiClient.convertToType(data['seo_name'], 'String');
            }
            if (data.hasOwnProperty('sort_name')) {
                obj['sort_name'] = ApiClient.convertToType(data['sort_name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Critic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Critic</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bio'] && !(typeof data['bio'] === 'string' || data['bio'] instanceof String)) {
            throw new Error("Expected the field `bio` to be a primitive type in the JSON string but got " + data['bio']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // validate the optional field `multimedia`
        if (data['multimedia']) { // data not null
          CriticMultimedia.validateJSON(data['multimedia']);
        }
        // ensure the json data is a string
        if (data['seo_name'] && !(typeof data['seo_name'] === 'string' || data['seo_name'] instanceof String)) {
            throw new Error("Expected the field `seo_name` to be a primitive type in the JSON string but got " + data['seo_name']);
        }
        // ensure the json data is a string
        if (data['sort_name'] && !(typeof data['sort_name'] === 'string' || data['sort_name'] instanceof String)) {
            throw new Error("Expected the field `sort_name` to be a primitive type in the JSON string but got " + data['sort_name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {String} bio
 */
Critic.prototype['bio'] = undefined;

/**
 * @member {String} display_name
 */
Critic.prototype['display_name'] = undefined;

/**
 * @member {module:model/CriticMultimedia} multimedia
 */
Critic.prototype['multimedia'] = undefined;

/**
 * @member {String} seo_name
 */
Critic.prototype['seo_name'] = undefined;

/**
 * @member {String} sort_name
 */
Critic.prototype['sort_name'] = undefined;

/**
 * @member {String} status
 */
Critic.prototype['status'] = undefined;






export default Critic;

