/**
 * Movie Reviews API
 * With the Movie Reviews API, you can search New York Times movie reviews by keyword and get lists of NYT Critics' Picks.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MovieLink from './MovieLink';
import MovieMultimedia from './MovieMultimedia';

/**
 * The Movie model module.
 * @module model/Movie
 * @version 2.0.0
 */
class Movie {
    /**
     * Constructs a new <code>Movie</code>.
     * @alias module:model/Movie
     */
    constructor() { 
        
        Movie.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Movie</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Movie} obj Optional instance to populate.
     * @return {module:model/Movie} The populated <code>Movie</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Movie();

            if (data.hasOwnProperty('byline')) {
                obj['byline'] = ApiClient.convertToType(data['byline'], 'String');
            }
            if (data.hasOwnProperty('critics_pick')) {
                obj['critics_pick'] = ApiClient.convertToType(data['critics_pick'], 'Number');
            }
            if (data.hasOwnProperty('date_updated')) {
                obj['date_updated'] = ApiClient.convertToType(data['date_updated'], 'String');
            }
            if (data.hasOwnProperty('display_title')) {
                obj['display_title'] = ApiClient.convertToType(data['display_title'], 'String');
            }
            if (data.hasOwnProperty('headline')) {
                obj['headline'] = ApiClient.convertToType(data['headline'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = MovieLink.constructFromObject(data['link']);
            }
            if (data.hasOwnProperty('mpaa_rating')) {
                obj['mpaa_rating'] = ApiClient.convertToType(data['mpaa_rating'], 'String');
            }
            if (data.hasOwnProperty('multimedia')) {
                obj['multimedia'] = MovieMultimedia.constructFromObject(data['multimedia']);
            }
            if (data.hasOwnProperty('opening_date')) {
                obj['opening_date'] = ApiClient.convertToType(data['opening_date'], 'String');
            }
            if (data.hasOwnProperty('publication_date')) {
                obj['publication_date'] = ApiClient.convertToType(data['publication_date'], 'String');
            }
            if (data.hasOwnProperty('summary_short')) {
                obj['summary_short'] = ApiClient.convertToType(data['summary_short'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Movie</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Movie</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['byline'] && !(typeof data['byline'] === 'string' || data['byline'] instanceof String)) {
            throw new Error("Expected the field `byline` to be a primitive type in the JSON string but got " + data['byline']);
        }
        // ensure the json data is a string
        if (data['date_updated'] && !(typeof data['date_updated'] === 'string' || data['date_updated'] instanceof String)) {
            throw new Error("Expected the field `date_updated` to be a primitive type in the JSON string but got " + data['date_updated']);
        }
        // ensure the json data is a string
        if (data['display_title'] && !(typeof data['display_title'] === 'string' || data['display_title'] instanceof String)) {
            throw new Error("Expected the field `display_title` to be a primitive type in the JSON string but got " + data['display_title']);
        }
        // ensure the json data is a string
        if (data['headline'] && !(typeof data['headline'] === 'string' || data['headline'] instanceof String)) {
            throw new Error("Expected the field `headline` to be a primitive type in the JSON string but got " + data['headline']);
        }
        // validate the optional field `link`
        if (data['link']) { // data not null
          MovieLink.validateJSON(data['link']);
        }
        // ensure the json data is a string
        if (data['mpaa_rating'] && !(typeof data['mpaa_rating'] === 'string' || data['mpaa_rating'] instanceof String)) {
            throw new Error("Expected the field `mpaa_rating` to be a primitive type in the JSON string but got " + data['mpaa_rating']);
        }
        // validate the optional field `multimedia`
        if (data['multimedia']) { // data not null
          MovieMultimedia.validateJSON(data['multimedia']);
        }
        // ensure the json data is a string
        if (data['opening_date'] && !(typeof data['opening_date'] === 'string' || data['opening_date'] instanceof String)) {
            throw new Error("Expected the field `opening_date` to be a primitive type in the JSON string but got " + data['opening_date']);
        }
        // ensure the json data is a string
        if (data['publication_date'] && !(typeof data['publication_date'] === 'string' || data['publication_date'] instanceof String)) {
            throw new Error("Expected the field `publication_date` to be a primitive type in the JSON string but got " + data['publication_date']);
        }
        // ensure the json data is a string
        if (data['summary_short'] && !(typeof data['summary_short'] === 'string' || data['summary_short'] instanceof String)) {
            throw new Error("Expected the field `summary_short` to be a primitive type in the JSON string but got " + data['summary_short']);
        }

        return true;
    }


}



/**
 * @member {String} byline
 */
Movie.prototype['byline'] = undefined;

/**
 * @member {Number} critics_pick
 */
Movie.prototype['critics_pick'] = undefined;

/**
 * @member {String} date_updated
 */
Movie.prototype['date_updated'] = undefined;

/**
 * @member {String} display_title
 */
Movie.prototype['display_title'] = undefined;

/**
 * @member {String} headline
 */
Movie.prototype['headline'] = undefined;

/**
 * @member {module:model/MovieLink} link
 */
Movie.prototype['link'] = undefined;

/**
 * @member {String} mpaa_rating
 */
Movie.prototype['mpaa_rating'] = undefined;

/**
 * @member {module:model/MovieMultimedia} multimedia
 */
Movie.prototype['multimedia'] = undefined;

/**
 * @member {String} opening_date
 */
Movie.prototype['opening_date'] = undefined;

/**
 * @member {String} publication_date
 */
Movie.prototype['publication_date'] = undefined;

/**
 * @member {String} summary_short
 */
Movie.prototype['summary_short'] = undefined;






export default Movie;

