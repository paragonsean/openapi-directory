/**
 * Movie Reviews API
 * With the Movie Reviews API, you can search New York Times movie reviews by keyword and get lists of NYT Critics' Picks.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CriticMultimediaResource model module.
 * @module model/CriticMultimediaResource
 * @version 2.0.0
 */
class CriticMultimediaResource {
    /**
     * Constructs a new <code>CriticMultimediaResource</code>.
     * @alias module:model/CriticMultimediaResource
     */
    constructor() { 
        
        CriticMultimediaResource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CriticMultimediaResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CriticMultimediaResource} obj Optional instance to populate.
     * @return {module:model/CriticMultimediaResource} The populated <code>CriticMultimediaResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CriticMultimediaResource();

            if (data.hasOwnProperty('credit')) {
                obj['credit'] = ApiClient.convertToType(data['credit'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('src')) {
                obj['src'] = ApiClient.convertToType(data['src'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CriticMultimediaResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CriticMultimediaResource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['credit'] && !(typeof data['credit'] === 'string' || data['credit'] instanceof String)) {
            throw new Error("Expected the field `credit` to be a primitive type in the JSON string but got " + data['credit']);
        }
        // ensure the json data is a string
        if (data['src'] && !(typeof data['src'] === 'string' || data['src'] instanceof String)) {
            throw new Error("Expected the field `src` to be a primitive type in the JSON string but got " + data['src']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} credit
 */
CriticMultimediaResource.prototype['credit'] = undefined;

/**
 * @member {Number} height
 */
CriticMultimediaResource.prototype['height'] = undefined;

/**
 * @member {String} src
 */
CriticMultimediaResource.prototype['src'] = undefined;

/**
 * @member {String} type
 */
CriticMultimediaResource.prototype['type'] = undefined;

/**
 * @member {Number} width
 */
CriticMultimediaResource.prototype['width'] = undefined;






export default CriticMultimediaResource;

