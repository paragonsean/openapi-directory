/**
 * Archive API
 * The Archive API provides lists of NYT articles by month going back to 1851.  You can use it to build your own local database of NYT article metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDoc.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDoc::OAIDoc(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDoc::OAIDoc() {
    this->initializeModel();
}

OAIDoc::~OAIDoc() {}

void OAIDoc::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_abstract_isSet = false;
    m_abstract_isValid = false;

    m_blog_isSet = false;
    m_blog_isValid = false;

    m_byline_isSet = false;
    m_byline_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_headline_isSet = false;
    m_headline_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_lead_paragraph_isSet = false;
    m_lead_paragraph_isValid = false;

    m_multimedia_isSet = false;
    m_multimedia_isValid = false;

    m_news_desk_isSet = false;
    m_news_desk_isValid = false;

    m_print_page_isSet = false;
    m_print_page_isValid = false;

    m_pub_date_isSet = false;
    m_pub_date_isValid = false;

    m_section_name_isSet = false;
    m_section_name_isValid = false;

    m_slideshow_credits_isSet = false;
    m_slideshow_credits_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_subsection_name_isSet = false;
    m_subsection_name_isValid = false;

    m_type_of_material_isSet = false;
    m_type_of_material_isValid = false;

    m_web_url_isSet = false;
    m_web_url_isValid = false;

    m_word_count_isSet = false;
    m_word_count_isValid = false;
}

void OAIDoc::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDoc::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_abstract_isValid = ::OpenAPI::fromJsonValue(m_abstract, json[QString("abstract")]);
    m_abstract_isSet = !json[QString("abstract")].isNull() && m_abstract_isValid;

    m_blog_isValid = ::OpenAPI::fromJsonValue(m_blog, json[QString("blog")]);
    m_blog_isSet = !json[QString("blog")].isNull() && m_blog_isValid;

    m_byline_isValid = ::OpenAPI::fromJsonValue(m_byline, json[QString("byline")]);
    m_byline_isSet = !json[QString("byline")].isNull() && m_byline_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("document_type")]);
    m_document_type_isSet = !json[QString("document_type")].isNull() && m_document_type_isValid;

    m_headline_isValid = ::OpenAPI::fromJsonValue(m_headline, json[QString("headline")]);
    m_headline_isSet = !json[QString("headline")].isNull() && m_headline_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_lead_paragraph_isValid = ::OpenAPI::fromJsonValue(m_lead_paragraph, json[QString("lead_paragraph")]);
    m_lead_paragraph_isSet = !json[QString("lead_paragraph")].isNull() && m_lead_paragraph_isValid;

    m_multimedia_isValid = ::OpenAPI::fromJsonValue(m_multimedia, json[QString("multimedia")]);
    m_multimedia_isSet = !json[QString("multimedia")].isNull() && m_multimedia_isValid;

    m_news_desk_isValid = ::OpenAPI::fromJsonValue(m_news_desk, json[QString("news_desk")]);
    m_news_desk_isSet = !json[QString("news_desk")].isNull() && m_news_desk_isValid;

    m_print_page_isValid = ::OpenAPI::fromJsonValue(m_print_page, json[QString("print_page")]);
    m_print_page_isSet = !json[QString("print_page")].isNull() && m_print_page_isValid;

    m_pub_date_isValid = ::OpenAPI::fromJsonValue(m_pub_date, json[QString("pub_date")]);
    m_pub_date_isSet = !json[QString("pub_date")].isNull() && m_pub_date_isValid;

    m_section_name_isValid = ::OpenAPI::fromJsonValue(m_section_name, json[QString("section_name")]);
    m_section_name_isSet = !json[QString("section_name")].isNull() && m_section_name_isValid;

    m_slideshow_credits_isValid = ::OpenAPI::fromJsonValue(m_slideshow_credits, json[QString("slideshow_credits")]);
    m_slideshow_credits_isSet = !json[QString("slideshow_credits")].isNull() && m_slideshow_credits_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_subsection_name_isValid = ::OpenAPI::fromJsonValue(m_subsection_name, json[QString("subsection_name")]);
    m_subsection_name_isSet = !json[QString("subsection_name")].isNull() && m_subsection_name_isValid;

    m_type_of_material_isValid = ::OpenAPI::fromJsonValue(m_type_of_material, json[QString("type_of_material")]);
    m_type_of_material_isSet = !json[QString("type_of_material")].isNull() && m_type_of_material_isValid;

    m_web_url_isValid = ::OpenAPI::fromJsonValue(m_web_url, json[QString("web_url")]);
    m_web_url_isSet = !json[QString("web_url")].isNull() && m_web_url_isValid;

    m_word_count_isValid = ::OpenAPI::fromJsonValue(m_word_count, json[QString("word_count")]);
    m_word_count_isSet = !json[QString("word_count")].isNull() && m_word_count_isValid;
}

QString OAIDoc::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDoc::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_abstract_isSet) {
        obj.insert(QString("abstract"), ::OpenAPI::toJsonValue(m_abstract));
    }
    if (m_blog.size() > 0) {
        obj.insert(QString("blog"), ::OpenAPI::toJsonValue(m_blog));
    }
    if (m_byline.isSet()) {
        obj.insert(QString("byline"), ::OpenAPI::toJsonValue(m_byline));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("document_type"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_headline.isSet()) {
        obj.insert(QString("headline"), ::OpenAPI::toJsonValue(m_headline));
    }
    if (m_keywords.isSet()) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_lead_paragraph_isSet) {
        obj.insert(QString("lead_paragraph"), ::OpenAPI::toJsonValue(m_lead_paragraph));
    }
    if (m_multimedia.size() > 0) {
        obj.insert(QString("multimedia"), ::OpenAPI::toJsonValue(m_multimedia));
    }
    if (m_news_desk_isSet) {
        obj.insert(QString("news_desk"), ::OpenAPI::toJsonValue(m_news_desk));
    }
    if (m_print_page_isSet) {
        obj.insert(QString("print_page"), ::OpenAPI::toJsonValue(m_print_page));
    }
    if (m_pub_date_isSet) {
        obj.insert(QString("pub_date"), ::OpenAPI::toJsonValue(m_pub_date));
    }
    if (m_section_name_isSet) {
        obj.insert(QString("section_name"), ::OpenAPI::toJsonValue(m_section_name));
    }
    if (m_slideshow_credits_isSet) {
        obj.insert(QString("slideshow_credits"), ::OpenAPI::toJsonValue(m_slideshow_credits));
    }
    if (m_snippet_isSet) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_subsection_name_isSet) {
        obj.insert(QString("subsection_name"), ::OpenAPI::toJsonValue(m_subsection_name));
    }
    if (m_type_of_material_isSet) {
        obj.insert(QString("type_of_material"), ::OpenAPI::toJsonValue(m_type_of_material));
    }
    if (m_web_url_isSet) {
        obj.insert(QString("web_url"), ::OpenAPI::toJsonValue(m_web_url));
    }
    if (m_word_count_isSet) {
        obj.insert(QString("word_count"), ::OpenAPI::toJsonValue(m_word_count));
    }
    return obj;
}

QString OAIDoc::getId() const {
    return m__id;
}
void OAIDoc::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIDoc::is__id_Set() const{
    return m__id_isSet;
}

bool OAIDoc::is__id_Valid() const{
    return m__id_isValid;
}

QString OAIDoc::getAbstract() const {
    return m_abstract;
}
void OAIDoc::setAbstract(const QString &abstract) {
    m_abstract = abstract;
    m_abstract_isSet = true;
}

bool OAIDoc::is_abstract_Set() const{
    return m_abstract_isSet;
}

bool OAIDoc::is_abstract_Valid() const{
    return m_abstract_isValid;
}

QList<QJsonValue> OAIDoc::getBlog() const {
    return m_blog;
}
void OAIDoc::setBlog(const QList<QJsonValue> &blog) {
    m_blog = blog;
    m_blog_isSet = true;
}

bool OAIDoc::is_blog_Set() const{
    return m_blog_isSet;
}

bool OAIDoc::is_blog_Valid() const{
    return m_blog_isValid;
}

OAIDoc_byline OAIDoc::getByline() const {
    return m_byline;
}
void OAIDoc::setByline(const OAIDoc_byline &byline) {
    m_byline = byline;
    m_byline_isSet = true;
}

bool OAIDoc::is_byline_Set() const{
    return m_byline_isSet;
}

bool OAIDoc::is_byline_Valid() const{
    return m_byline_isValid;
}

QString OAIDoc::getDocumentType() const {
    return m_document_type;
}
void OAIDoc::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIDoc::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIDoc::is_document_type_Valid() const{
    return m_document_type_isValid;
}

OAIDoc_headline OAIDoc::getHeadline() const {
    return m_headline;
}
void OAIDoc::setHeadline(const OAIDoc_headline &headline) {
    m_headline = headline;
    m_headline_isSet = true;
}

bool OAIDoc::is_headline_Set() const{
    return m_headline_isSet;
}

bool OAIDoc::is_headline_Valid() const{
    return m_headline_isValid;
}

OAIDoc_keywords OAIDoc::getKeywords() const {
    return m_keywords;
}
void OAIDoc::setKeywords(const OAIDoc_keywords &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIDoc::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIDoc::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAIDoc::getLeadParagraph() const {
    return m_lead_paragraph;
}
void OAIDoc::setLeadParagraph(const QString &lead_paragraph) {
    m_lead_paragraph = lead_paragraph;
    m_lead_paragraph_isSet = true;
}

bool OAIDoc::is_lead_paragraph_Set() const{
    return m_lead_paragraph_isSet;
}

bool OAIDoc::is_lead_paragraph_Valid() const{
    return m_lead_paragraph_isValid;
}

QList<OAIDoc_multimedia_inner> OAIDoc::getMultimedia() const {
    return m_multimedia;
}
void OAIDoc::setMultimedia(const QList<OAIDoc_multimedia_inner> &multimedia) {
    m_multimedia = multimedia;
    m_multimedia_isSet = true;
}

bool OAIDoc::is_multimedia_Set() const{
    return m_multimedia_isSet;
}

bool OAIDoc::is_multimedia_Valid() const{
    return m_multimedia_isValid;
}

QString OAIDoc::getNewsDesk() const {
    return m_news_desk;
}
void OAIDoc::setNewsDesk(const QString &news_desk) {
    m_news_desk = news_desk;
    m_news_desk_isSet = true;
}

bool OAIDoc::is_news_desk_Set() const{
    return m_news_desk_isSet;
}

bool OAIDoc::is_news_desk_Valid() const{
    return m_news_desk_isValid;
}

QString OAIDoc::getPrintPage() const {
    return m_print_page;
}
void OAIDoc::setPrintPage(const QString &print_page) {
    m_print_page = print_page;
    m_print_page_isSet = true;
}

bool OAIDoc::is_print_page_Set() const{
    return m_print_page_isSet;
}

bool OAIDoc::is_print_page_Valid() const{
    return m_print_page_isValid;
}

QString OAIDoc::getPubDate() const {
    return m_pub_date;
}
void OAIDoc::setPubDate(const QString &pub_date) {
    m_pub_date = pub_date;
    m_pub_date_isSet = true;
}

bool OAIDoc::is_pub_date_Set() const{
    return m_pub_date_isSet;
}

bool OAIDoc::is_pub_date_Valid() const{
    return m_pub_date_isValid;
}

QString OAIDoc::getSectionName() const {
    return m_section_name;
}
void OAIDoc::setSectionName(const QString &section_name) {
    m_section_name = section_name;
    m_section_name_isSet = true;
}

bool OAIDoc::is_section_name_Set() const{
    return m_section_name_isSet;
}

bool OAIDoc::is_section_name_Valid() const{
    return m_section_name_isValid;
}

QString OAIDoc::getSlideshowCredits() const {
    return m_slideshow_credits;
}
void OAIDoc::setSlideshowCredits(const QString &slideshow_credits) {
    m_slideshow_credits = slideshow_credits;
    m_slideshow_credits_isSet = true;
}

bool OAIDoc::is_slideshow_credits_Set() const{
    return m_slideshow_credits_isSet;
}

bool OAIDoc::is_slideshow_credits_Valid() const{
    return m_slideshow_credits_isValid;
}

QString OAIDoc::getSnippet() const {
    return m_snippet;
}
void OAIDoc::setSnippet(const QString &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAIDoc::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAIDoc::is_snippet_Valid() const{
    return m_snippet_isValid;
}

QString OAIDoc::getSource() const {
    return m_source;
}
void OAIDoc::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDoc::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDoc::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIDoc::getSubsectionName() const {
    return m_subsection_name;
}
void OAIDoc::setSubsectionName(const QString &subsection_name) {
    m_subsection_name = subsection_name;
    m_subsection_name_isSet = true;
}

bool OAIDoc::is_subsection_name_Set() const{
    return m_subsection_name_isSet;
}

bool OAIDoc::is_subsection_name_Valid() const{
    return m_subsection_name_isValid;
}

QString OAIDoc::getTypeOfMaterial() const {
    return m_type_of_material;
}
void OAIDoc::setTypeOfMaterial(const QString &type_of_material) {
    m_type_of_material = type_of_material;
    m_type_of_material_isSet = true;
}

bool OAIDoc::is_type_of_material_Set() const{
    return m_type_of_material_isSet;
}

bool OAIDoc::is_type_of_material_Valid() const{
    return m_type_of_material_isValid;
}

QString OAIDoc::getWebUrl() const {
    return m_web_url;
}
void OAIDoc::setWebUrl(const QString &web_url) {
    m_web_url = web_url;
    m_web_url_isSet = true;
}

bool OAIDoc::is_web_url_Set() const{
    return m_web_url_isSet;
}

bool OAIDoc::is_web_url_Valid() const{
    return m_web_url_isValid;
}

QString OAIDoc::getWordCount() const {
    return m_word_count;
}
void OAIDoc::setWordCount(const QString &word_count) {
    m_word_count = word_count;
    m_word_count_isSet = true;
}

bool OAIDoc::is_word_count_Set() const{
    return m_word_count_isSet;
}

bool OAIDoc::is_word_count_Valid() const{
    return m_word_count_isValid;
}

bool OAIDoc::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_abstract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blog.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_byline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_paragraph_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multimedia.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_news_desk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pub_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slideshow_credits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subsection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDoc::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
