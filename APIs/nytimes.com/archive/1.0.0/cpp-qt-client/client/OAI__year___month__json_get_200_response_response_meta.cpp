/**
 * Archive API
 * The Archive API provides lists of NYT articles by month going back to 1851.  You can use it to build your own local database of NYT article metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI__year___month__json_get_200_response_response_meta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI__year___month__json_get_200_response_response_meta::OAI__year___month__json_get_200_response_response_meta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI__year___month__json_get_200_response_response_meta::OAI__year___month__json_get_200_response_response_meta() {
    this->initializeModel();
}

OAI__year___month__json_get_200_response_response_meta::~OAI__year___month__json_get_200_response_response_meta() {}

void OAI__year___month__json_get_200_response_response_meta::initializeModel() {

    m_hits_isSet = false;
    m_hits_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAI__year___month__json_get_200_response_response_meta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI__year___month__json_get_200_response_response_meta::fromJsonObject(QJsonObject json) {

    m_hits_isValid = ::OpenAPI::fromJsonValue(m_hits, json[QString("hits")]);
    m_hits_isSet = !json[QString("hits")].isNull() && m_hits_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAI__year___month__json_get_200_response_response_meta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI__year___month__json_get_200_response_response_meta::asJsonObject() const {
    QJsonObject obj;
    if (m_hits_isSet) {
        obj.insert(QString("hits"), ::OpenAPI::toJsonValue(m_hits));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

qint32 OAI__year___month__json_get_200_response_response_meta::getHits() const {
    return m_hits;
}
void OAI__year___month__json_get_200_response_response_meta::setHits(const qint32 &hits) {
    m_hits = hits;
    m_hits_isSet = true;
}

bool OAI__year___month__json_get_200_response_response_meta::is_hits_Set() const{
    return m_hits_isSet;
}

bool OAI__year___month__json_get_200_response_response_meta::is_hits_Valid() const{
    return m_hits_isValid;
}

qint32 OAI__year___month__json_get_200_response_response_meta::getOffset() const {
    return m_offset;
}
void OAI__year___month__json_get_200_response_response_meta::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAI__year___month__json_get_200_response_response_meta::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAI__year___month__json_get_200_response_response_meta::is_offset_Valid() const{
    return m_offset_isValid;
}

qint32 OAI__year___month__json_get_200_response_response_meta::getTime() const {
    return m_time;
}
void OAI__year___month__json_get_200_response_response_meta::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAI__year___month__json_get_200_response_response_meta::is_time_Set() const{
    return m_time_isSet;
}

bool OAI__year___month__json_get_200_response_response_meta::is_time_Valid() const{
    return m_time_isValid;
}

bool OAI__year___month__json_get_200_response_response_meta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI__year___month__json_get_200_response_response_meta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
