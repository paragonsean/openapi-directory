/**
 * Community API
 * Get access to comments from registered users on New York Times articles.  NOTE: This API is deprecated.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGET_user_content_by_date_json_200_response.h"
#include "OAIGET_user_content_recent_json_200_response.h"
#include "OAIGET_user_content_url_json_200_response.h"
#include "OAIGET_user_content_user_json_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  date QString [optional]
    */
    virtual void gETUserContentByDateJson(const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>());


    virtual void gETUserContentRecentJson();

    /**
    * @param[in]  url QString [optional]
    */
    virtual void gETUserContentUrlJson(const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint32 [optional]
    */
    virtual void gETUserContentUserJson(const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETUserContentByDateJsonCallback(OAIHttpRequestWorker *worker);
    void gETUserContentRecentJsonCallback(OAIHttpRequestWorker *worker);
    void gETUserContentUrlJsonCallback(OAIHttpRequestWorker *worker);
    void gETUserContentUserJsonCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETUserContentByDateJsonSignal(OAIGET_user_content_by_date_json_200_response summary);
    void gETUserContentRecentJsonSignal(OAIGET_user_content_recent_json_200_response summary);
    void gETUserContentUrlJsonSignal(OAIGET_user_content_url_json_200_response summary);
    void gETUserContentUserJsonSignal(OAIGET_user_content_user_json_200_response summary);


    void gETUserContentByDateJsonSignalFull(OAIHttpRequestWorker *worker, OAIGET_user_content_by_date_json_200_response summary);
    void gETUserContentRecentJsonSignalFull(OAIHttpRequestWorker *worker, OAIGET_user_content_recent_json_200_response summary);
    void gETUserContentUrlJsonSignalFull(OAIHttpRequestWorker *worker, OAIGET_user_content_url_json_200_response summary);
    void gETUserContentUserJsonSignalFull(OAIHttpRequestWorker *worker, OAIGET_user_content_user_json_200_response summary);

    Q_DECL_DEPRECATED_X("Use gETUserContentByDateJsonSignalError() instead")
    void gETUserContentByDateJsonSignalE(OAIGET_user_content_by_date_json_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUserContentByDateJsonSignalError(OAIGET_user_content_by_date_json_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUserContentRecentJsonSignalError() instead")
    void gETUserContentRecentJsonSignalE(OAIGET_user_content_recent_json_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUserContentRecentJsonSignalError(OAIGET_user_content_recent_json_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUserContentUrlJsonSignalError() instead")
    void gETUserContentUrlJsonSignalE(OAIGET_user_content_url_json_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUserContentUrlJsonSignalError(OAIGET_user_content_url_json_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUserContentUserJsonSignalError() instead")
    void gETUserContentUserJsonSignalE(OAIGET_user_content_user_json_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUserContentUserJsonSignalError(OAIGET_user_content_user_json_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETUserContentByDateJsonSignalErrorFull() instead")
    void gETUserContentByDateJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUserContentByDateJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUserContentRecentJsonSignalErrorFull() instead")
    void gETUserContentRecentJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUserContentRecentJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUserContentUrlJsonSignalErrorFull() instead")
    void gETUserContentUrlJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUserContentUrlJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUserContentUserJsonSignalErrorFull() instead")
    void gETUserContentUserJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUserContentUserJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
