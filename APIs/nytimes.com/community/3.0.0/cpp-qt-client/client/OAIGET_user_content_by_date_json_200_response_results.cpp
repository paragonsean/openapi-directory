/**
 * Community API
 * Get access to comments from registered users on New York Times articles.  NOTE: This API is deprecated.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGET_user_content_by_date_json_200_response_results.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGET_user_content_by_date_json_200_response_results::OAIGET_user_content_by_date_json_200_response_results(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGET_user_content_by_date_json_200_response_results::OAIGET_user_content_by_date_json_200_response_results() {
    this->initializeModel();
}

OAIGET_user_content_by_date_json_200_response_results::~OAIGET_user_content_by_date_json_200_response_results() {}

void OAIGET_user_content_by_date_json_200_response_results::initializeModel() {

    m_api_timestamp_isSet = false;
    m_api_timestamp_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_total_comments_found_isSet = false;
    m_total_comments_found_isValid = false;

    m_total_comments_returned_isSet = false;
    m_total_comments_returned_isValid = false;
}

void OAIGET_user_content_by_date_json_200_response_results::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGET_user_content_by_date_json_200_response_results::fromJsonObject(QJsonObject json) {

    m_api_timestamp_isValid = ::OpenAPI::fromJsonValue(m_api_timestamp, json[QString("api_timestamp")]);
    m_api_timestamp_isSet = !json[QString("api_timestamp")].isNull() && m_api_timestamp_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_total_comments_found_isValid = ::OpenAPI::fromJsonValue(m_total_comments_found, json[QString("totalCommentsFound")]);
    m_total_comments_found_isSet = !json[QString("totalCommentsFound")].isNull() && m_total_comments_found_isValid;

    m_total_comments_returned_isValid = ::OpenAPI::fromJsonValue(m_total_comments_returned, json[QString("totalCommentsReturned")]);
    m_total_comments_returned_isSet = !json[QString("totalCommentsReturned")].isNull() && m_total_comments_returned_isValid;
}

QString OAIGET_user_content_by_date_json_200_response_results::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGET_user_content_by_date_json_200_response_results::asJsonObject() const {
    QJsonObject obj;
    if (m_api_timestamp_isSet) {
        obj.insert(QString("api_timestamp"), ::OpenAPI::toJsonValue(m_api_timestamp));
    }
    if (m_comments.size() > 0) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_total_comments_found_isSet) {
        obj.insert(QString("totalCommentsFound"), ::OpenAPI::toJsonValue(m_total_comments_found));
    }
    if (m_total_comments_returned_isSet) {
        obj.insert(QString("totalCommentsReturned"), ::OpenAPI::toJsonValue(m_total_comments_returned));
    }
    return obj;
}

QString OAIGET_user_content_by_date_json_200_response_results::getApiTimestamp() const {
    return m_api_timestamp;
}
void OAIGET_user_content_by_date_json_200_response_results::setApiTimestamp(const QString &api_timestamp) {
    m_api_timestamp = api_timestamp;
    m_api_timestamp_isSet = true;
}

bool OAIGET_user_content_by_date_json_200_response_results::is_api_timestamp_Set() const{
    return m_api_timestamp_isSet;
}

bool OAIGET_user_content_by_date_json_200_response_results::is_api_timestamp_Valid() const{
    return m_api_timestamp_isValid;
}

QList<OAIGET_user_content_by_date_json_200_response_results_comments_inner> OAIGET_user_content_by_date_json_200_response_results::getComments() const {
    return m_comments;
}
void OAIGET_user_content_by_date_json_200_response_results::setComments(const QList<OAIGET_user_content_by_date_json_200_response_results_comments_inner> &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIGET_user_content_by_date_json_200_response_results::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIGET_user_content_by_date_json_200_response_results::is_comments_Valid() const{
    return m_comments_isValid;
}

qint32 OAIGET_user_content_by_date_json_200_response_results::getTotalCommentsFound() const {
    return m_total_comments_found;
}
void OAIGET_user_content_by_date_json_200_response_results::setTotalCommentsFound(const qint32 &total_comments_found) {
    m_total_comments_found = total_comments_found;
    m_total_comments_found_isSet = true;
}

bool OAIGET_user_content_by_date_json_200_response_results::is_total_comments_found_Set() const{
    return m_total_comments_found_isSet;
}

bool OAIGET_user_content_by_date_json_200_response_results::is_total_comments_found_Valid() const{
    return m_total_comments_found_isValid;
}

qint32 OAIGET_user_content_by_date_json_200_response_results::getTotalCommentsReturned() const {
    return m_total_comments_returned;
}
void OAIGET_user_content_by_date_json_200_response_results::setTotalCommentsReturned(const qint32 &total_comments_returned) {
    m_total_comments_returned = total_comments_returned;
    m_total_comments_returned_isSet = true;
}

bool OAIGET_user_content_by_date_json_200_response_results::is_total_comments_returned_Set() const{
    return m_total_comments_returned_isSet;
}

bool OAIGET_user_content_by_date_json_200_response_results::is_total_comments_returned_Valid() const{
    return m_total_comments_returned_isValid;
}

bool OAIGET_user_content_by_date_json_200_response_results::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_comments_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_comments_returned_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGET_user_content_by_date_json_200_response_results::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
