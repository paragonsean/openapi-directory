/**
 * Community API
 * Get access to comments from registered users on New York Times articles.  NOTE: This API is deprecated.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGET_user_content_url_json_200_response_results.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGET_user_content_url_json_200_response_results::OAIGET_user_content_url_json_200_response_results(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGET_user_content_url_json_200_response_results::OAIGET_user_content_url_json_200_response_results() {
    this->initializeModel();
}

OAIGET_user_content_url_json_200_response_results::~OAIGET_user_content_url_json_200_response_results() {}

void OAIGET_user_content_url_json_200_response_results::initializeModel() {

    m_api_timestamp_isSet = false;
    m_api_timestamp_isValid = false;

    m_caller_id_isSet = false;
    m_caller_id_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_depth_limit_isSet = false;
    m_depth_limit_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_reply_limit_isSet = false;
    m_reply_limit_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_total_comments_found_isSet = false;
    m_total_comments_found_isValid = false;

    m_total_comments_returned_isSet = false;
    m_total_comments_returned_isValid = false;

    m_total_editors_selection_found_isSet = false;
    m_total_editors_selection_found_isValid = false;

    m_total_editors_selection_returned_isSet = false;
    m_total_editors_selection_returned_isValid = false;

    m_total_parent_comments_found_isSet = false;
    m_total_parent_comments_found_isValid = false;

    m_total_parent_comments_returned_isSet = false;
    m_total_parent_comments_returned_isValid = false;

    m_total_recommendations_found_isSet = false;
    m_total_recommendations_found_isValid = false;

    m_total_recommendations_returned_isSet = false;
    m_total_recommendations_returned_isValid = false;

    m_total_reply_comments_found_isSet = false;
    m_total_reply_comments_found_isValid = false;

    m_total_reply_comments_returned_isSet = false;
    m_total_reply_comments_returned_isValid = false;

    m_total_reporter_reply_comments_found_isSet = false;
    m_total_reporter_reply_comments_found_isValid = false;

    m_total_reporter_reply_comments_returned_isSet = false;
    m_total_reporter_reply_comments_returned_isValid = false;
}

void OAIGET_user_content_url_json_200_response_results::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGET_user_content_url_json_200_response_results::fromJsonObject(QJsonObject json) {

    m_api_timestamp_isValid = ::OpenAPI::fromJsonValue(m_api_timestamp, json[QString("api_timestamp")]);
    m_api_timestamp_isSet = !json[QString("api_timestamp")].isNull() && m_api_timestamp_isValid;

    m_caller_id_isValid = ::OpenAPI::fromJsonValue(m_caller_id, json[QString("callerID")]);
    m_caller_id_isSet = !json[QString("callerID")].isNull() && m_caller_id_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_depth_limit_isValid = ::OpenAPI::fromJsonValue(m_depth_limit, json[QString("depthLimit")]);
    m_depth_limit_isSet = !json[QString("depthLimit")].isNull() && m_depth_limit_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_reply_limit_isValid = ::OpenAPI::fromJsonValue(m_reply_limit, json[QString("replyLimit")]);
    m_reply_limit_isSet = !json[QString("replyLimit")].isNull() && m_reply_limit_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_total_comments_found_isValid = ::OpenAPI::fromJsonValue(m_total_comments_found, json[QString("totalCommentsFound")]);
    m_total_comments_found_isSet = !json[QString("totalCommentsFound")].isNull() && m_total_comments_found_isValid;

    m_total_comments_returned_isValid = ::OpenAPI::fromJsonValue(m_total_comments_returned, json[QString("totalCommentsReturned")]);
    m_total_comments_returned_isSet = !json[QString("totalCommentsReturned")].isNull() && m_total_comments_returned_isValid;

    m_total_editors_selection_found_isValid = ::OpenAPI::fromJsonValue(m_total_editors_selection_found, json[QString("totalEditorsSelectionFound")]);
    m_total_editors_selection_found_isSet = !json[QString("totalEditorsSelectionFound")].isNull() && m_total_editors_selection_found_isValid;

    m_total_editors_selection_returned_isValid = ::OpenAPI::fromJsonValue(m_total_editors_selection_returned, json[QString("totalEditorsSelectionReturned")]);
    m_total_editors_selection_returned_isSet = !json[QString("totalEditorsSelectionReturned")].isNull() && m_total_editors_selection_returned_isValid;

    m_total_parent_comments_found_isValid = ::OpenAPI::fromJsonValue(m_total_parent_comments_found, json[QString("totalParentCommentsFound")]);
    m_total_parent_comments_found_isSet = !json[QString("totalParentCommentsFound")].isNull() && m_total_parent_comments_found_isValid;

    m_total_parent_comments_returned_isValid = ::OpenAPI::fromJsonValue(m_total_parent_comments_returned, json[QString("totalParentCommentsReturned")]);
    m_total_parent_comments_returned_isSet = !json[QString("totalParentCommentsReturned")].isNull() && m_total_parent_comments_returned_isValid;

    m_total_recommendations_found_isValid = ::OpenAPI::fromJsonValue(m_total_recommendations_found, json[QString("totalRecommendationsFound")]);
    m_total_recommendations_found_isSet = !json[QString("totalRecommendationsFound")].isNull() && m_total_recommendations_found_isValid;

    m_total_recommendations_returned_isValid = ::OpenAPI::fromJsonValue(m_total_recommendations_returned, json[QString("totalRecommendationsReturned")]);
    m_total_recommendations_returned_isSet = !json[QString("totalRecommendationsReturned")].isNull() && m_total_recommendations_returned_isValid;

    m_total_reply_comments_found_isValid = ::OpenAPI::fromJsonValue(m_total_reply_comments_found, json[QString("totalReplyCommentsFound")]);
    m_total_reply_comments_found_isSet = !json[QString("totalReplyCommentsFound")].isNull() && m_total_reply_comments_found_isValid;

    m_total_reply_comments_returned_isValid = ::OpenAPI::fromJsonValue(m_total_reply_comments_returned, json[QString("totalReplyCommentsReturned")]);
    m_total_reply_comments_returned_isSet = !json[QString("totalReplyCommentsReturned")].isNull() && m_total_reply_comments_returned_isValid;

    m_total_reporter_reply_comments_found_isValid = ::OpenAPI::fromJsonValue(m_total_reporter_reply_comments_found, json[QString("totalReporterReplyCommentsFound")]);
    m_total_reporter_reply_comments_found_isSet = !json[QString("totalReporterReplyCommentsFound")].isNull() && m_total_reporter_reply_comments_found_isValid;

    m_total_reporter_reply_comments_returned_isValid = ::OpenAPI::fromJsonValue(m_total_reporter_reply_comments_returned, json[QString("totalReporterReplyCommentsReturned")]);
    m_total_reporter_reply_comments_returned_isSet = !json[QString("totalReporterReplyCommentsReturned")].isNull() && m_total_reporter_reply_comments_returned_isValid;
}

QString OAIGET_user_content_url_json_200_response_results::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGET_user_content_url_json_200_response_results::asJsonObject() const {
    QJsonObject obj;
    if (m_api_timestamp_isSet) {
        obj.insert(QString("api_timestamp"), ::OpenAPI::toJsonValue(m_api_timestamp));
    }
    if (m_caller_id_isSet) {
        obj.insert(QString("callerID"), ::OpenAPI::toJsonValue(m_caller_id));
    }
    if (m_comments.size() > 0) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_depth_limit_isSet) {
        obj.insert(QString("depthLimit"), ::OpenAPI::toJsonValue(m_depth_limit));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_reply_limit_isSet) {
        obj.insert(QString("replyLimit"), ::OpenAPI::toJsonValue(m_reply_limit));
    }
    if (m_sort_isSet) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_total_comments_found_isSet) {
        obj.insert(QString("totalCommentsFound"), ::OpenAPI::toJsonValue(m_total_comments_found));
    }
    if (m_total_comments_returned_isSet) {
        obj.insert(QString("totalCommentsReturned"), ::OpenAPI::toJsonValue(m_total_comments_returned));
    }
    if (m_total_editors_selection_found_isSet) {
        obj.insert(QString("totalEditorsSelectionFound"), ::OpenAPI::toJsonValue(m_total_editors_selection_found));
    }
    if (m_total_editors_selection_returned_isSet) {
        obj.insert(QString("totalEditorsSelectionReturned"), ::OpenAPI::toJsonValue(m_total_editors_selection_returned));
    }
    if (m_total_parent_comments_found_isSet) {
        obj.insert(QString("totalParentCommentsFound"), ::OpenAPI::toJsonValue(m_total_parent_comments_found));
    }
    if (m_total_parent_comments_returned_isSet) {
        obj.insert(QString("totalParentCommentsReturned"), ::OpenAPI::toJsonValue(m_total_parent_comments_returned));
    }
    if (m_total_recommendations_found_isSet) {
        obj.insert(QString("totalRecommendationsFound"), ::OpenAPI::toJsonValue(m_total_recommendations_found));
    }
    if (m_total_recommendations_returned_isSet) {
        obj.insert(QString("totalRecommendationsReturned"), ::OpenAPI::toJsonValue(m_total_recommendations_returned));
    }
    if (m_total_reply_comments_found_isSet) {
        obj.insert(QString("totalReplyCommentsFound"), ::OpenAPI::toJsonValue(m_total_reply_comments_found));
    }
    if (m_total_reply_comments_returned_isSet) {
        obj.insert(QString("totalReplyCommentsReturned"), ::OpenAPI::toJsonValue(m_total_reply_comments_returned));
    }
    if (m_total_reporter_reply_comments_found_isSet) {
        obj.insert(QString("totalReporterReplyCommentsFound"), ::OpenAPI::toJsonValue(m_total_reporter_reply_comments_found));
    }
    if (m_total_reporter_reply_comments_returned_isSet) {
        obj.insert(QString("totalReporterReplyCommentsReturned"), ::OpenAPI::toJsonValue(m_total_reporter_reply_comments_returned));
    }
    return obj;
}

QString OAIGET_user_content_url_json_200_response_results::getApiTimestamp() const {
    return m_api_timestamp;
}
void OAIGET_user_content_url_json_200_response_results::setApiTimestamp(const QString &api_timestamp) {
    m_api_timestamp = api_timestamp;
    m_api_timestamp_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_api_timestamp_Set() const{
    return m_api_timestamp_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_api_timestamp_Valid() const{
    return m_api_timestamp_isValid;
}

QJsonValue OAIGET_user_content_url_json_200_response_results::getCallerId() const {
    return m_caller_id;
}
void OAIGET_user_content_url_json_200_response_results::setCallerId(const QJsonValue &caller_id) {
    m_caller_id = caller_id;
    m_caller_id_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_caller_id_Set() const{
    return m_caller_id_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_caller_id_Valid() const{
    return m_caller_id_isValid;
}

QList<OAIGET_user_content_url_json_200_response_results_comments_inner> OAIGET_user_content_url_json_200_response_results::getComments() const {
    return m_comments;
}
void OAIGET_user_content_url_json_200_response_results::setComments(const QList<OAIGET_user_content_url_json_200_response_results_comments_inner> &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_comments_Valid() const{
    return m_comments_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getDepthLimit() const {
    return m_depth_limit;
}
void OAIGET_user_content_url_json_200_response_results::setDepthLimit(const qint32 &depth_limit) {
    m_depth_limit = depth_limit;
    m_depth_limit_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_depth_limit_Set() const{
    return m_depth_limit_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_depth_limit_Valid() const{
    return m_depth_limit_isValid;
}

QString OAIGET_user_content_url_json_200_response_results::getFilter() const {
    return m_filter;
}
void OAIGET_user_content_url_json_200_response_results::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getPage() const {
    return m_page;
}
void OAIGET_user_content_url_json_200_response_results::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_page_Set() const{
    return m_page_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getReplyLimit() const {
    return m_reply_limit;
}
void OAIGET_user_content_url_json_200_response_results::setReplyLimit(const qint32 &reply_limit) {
    m_reply_limit = reply_limit;
    m_reply_limit_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_reply_limit_Set() const{
    return m_reply_limit_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_reply_limit_Valid() const{
    return m_reply_limit_isValid;
}

QString OAIGET_user_content_url_json_200_response_results::getSort() const {
    return m_sort;
}
void OAIGET_user_content_url_json_200_response_results::setSort(const QString &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_sort_Valid() const{
    return m_sort_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getTotalCommentsFound() const {
    return m_total_comments_found;
}
void OAIGET_user_content_url_json_200_response_results::setTotalCommentsFound(const qint32 &total_comments_found) {
    m_total_comments_found = total_comments_found;
    m_total_comments_found_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_comments_found_Set() const{
    return m_total_comments_found_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_comments_found_Valid() const{
    return m_total_comments_found_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getTotalCommentsReturned() const {
    return m_total_comments_returned;
}
void OAIGET_user_content_url_json_200_response_results::setTotalCommentsReturned(const qint32 &total_comments_returned) {
    m_total_comments_returned = total_comments_returned;
    m_total_comments_returned_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_comments_returned_Set() const{
    return m_total_comments_returned_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_comments_returned_Valid() const{
    return m_total_comments_returned_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getTotalEditorsSelectionFound() const {
    return m_total_editors_selection_found;
}
void OAIGET_user_content_url_json_200_response_results::setTotalEditorsSelectionFound(const qint32 &total_editors_selection_found) {
    m_total_editors_selection_found = total_editors_selection_found;
    m_total_editors_selection_found_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_editors_selection_found_Set() const{
    return m_total_editors_selection_found_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_editors_selection_found_Valid() const{
    return m_total_editors_selection_found_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getTotalEditorsSelectionReturned() const {
    return m_total_editors_selection_returned;
}
void OAIGET_user_content_url_json_200_response_results::setTotalEditorsSelectionReturned(const qint32 &total_editors_selection_returned) {
    m_total_editors_selection_returned = total_editors_selection_returned;
    m_total_editors_selection_returned_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_editors_selection_returned_Set() const{
    return m_total_editors_selection_returned_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_editors_selection_returned_Valid() const{
    return m_total_editors_selection_returned_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getTotalParentCommentsFound() const {
    return m_total_parent_comments_found;
}
void OAIGET_user_content_url_json_200_response_results::setTotalParentCommentsFound(const qint32 &total_parent_comments_found) {
    m_total_parent_comments_found = total_parent_comments_found;
    m_total_parent_comments_found_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_parent_comments_found_Set() const{
    return m_total_parent_comments_found_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_parent_comments_found_Valid() const{
    return m_total_parent_comments_found_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getTotalParentCommentsReturned() const {
    return m_total_parent_comments_returned;
}
void OAIGET_user_content_url_json_200_response_results::setTotalParentCommentsReturned(const qint32 &total_parent_comments_returned) {
    m_total_parent_comments_returned = total_parent_comments_returned;
    m_total_parent_comments_returned_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_parent_comments_returned_Set() const{
    return m_total_parent_comments_returned_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_parent_comments_returned_Valid() const{
    return m_total_parent_comments_returned_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getTotalRecommendationsFound() const {
    return m_total_recommendations_found;
}
void OAIGET_user_content_url_json_200_response_results::setTotalRecommendationsFound(const qint32 &total_recommendations_found) {
    m_total_recommendations_found = total_recommendations_found;
    m_total_recommendations_found_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_recommendations_found_Set() const{
    return m_total_recommendations_found_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_recommendations_found_Valid() const{
    return m_total_recommendations_found_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getTotalRecommendationsReturned() const {
    return m_total_recommendations_returned;
}
void OAIGET_user_content_url_json_200_response_results::setTotalRecommendationsReturned(const qint32 &total_recommendations_returned) {
    m_total_recommendations_returned = total_recommendations_returned;
    m_total_recommendations_returned_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_recommendations_returned_Set() const{
    return m_total_recommendations_returned_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_recommendations_returned_Valid() const{
    return m_total_recommendations_returned_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getTotalReplyCommentsFound() const {
    return m_total_reply_comments_found;
}
void OAIGET_user_content_url_json_200_response_results::setTotalReplyCommentsFound(const qint32 &total_reply_comments_found) {
    m_total_reply_comments_found = total_reply_comments_found;
    m_total_reply_comments_found_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_reply_comments_found_Set() const{
    return m_total_reply_comments_found_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_reply_comments_found_Valid() const{
    return m_total_reply_comments_found_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getTotalReplyCommentsReturned() const {
    return m_total_reply_comments_returned;
}
void OAIGET_user_content_url_json_200_response_results::setTotalReplyCommentsReturned(const qint32 &total_reply_comments_returned) {
    m_total_reply_comments_returned = total_reply_comments_returned;
    m_total_reply_comments_returned_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_reply_comments_returned_Set() const{
    return m_total_reply_comments_returned_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_reply_comments_returned_Valid() const{
    return m_total_reply_comments_returned_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getTotalReporterReplyCommentsFound() const {
    return m_total_reporter_reply_comments_found;
}
void OAIGET_user_content_url_json_200_response_results::setTotalReporterReplyCommentsFound(const qint32 &total_reporter_reply_comments_found) {
    m_total_reporter_reply_comments_found = total_reporter_reply_comments_found;
    m_total_reporter_reply_comments_found_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_reporter_reply_comments_found_Set() const{
    return m_total_reporter_reply_comments_found_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_reporter_reply_comments_found_Valid() const{
    return m_total_reporter_reply_comments_found_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results::getTotalReporterReplyCommentsReturned() const {
    return m_total_reporter_reply_comments_returned;
}
void OAIGET_user_content_url_json_200_response_results::setTotalReporterReplyCommentsReturned(const qint32 &total_reporter_reply_comments_returned) {
    m_total_reporter_reply_comments_returned = total_reporter_reply_comments_returned;
    m_total_reporter_reply_comments_returned_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_reporter_reply_comments_returned_Set() const{
    return m_total_reporter_reply_comments_returned_isSet;
}

bool OAIGET_user_content_url_json_200_response_results::is_total_reporter_reply_comments_returned_Valid() const{
    return m_total_reporter_reply_comments_returned_isValid;
}

bool OAIGET_user_content_url_json_200_response_results::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_comments_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_comments_returned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_editors_selection_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_editors_selection_returned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_parent_comments_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_parent_comments_returned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_recommendations_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_recommendations_returned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_reply_comments_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_reply_comments_returned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_reporter_reply_comments_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_reporter_reply_comments_returned_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGET_user_content_url_json_200_response_results::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
