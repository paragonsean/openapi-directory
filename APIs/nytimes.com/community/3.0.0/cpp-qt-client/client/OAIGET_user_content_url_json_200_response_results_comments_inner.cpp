/**
 * Community API
 * Get access to comments from registered users on New York Times articles.  NOTE: This API is deprecated.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGET_user_content_url_json_200_response_results_comments_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGET_user_content_url_json_200_response_results_comments_inner::OAIGET_user_content_url_json_200_response_results_comments_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGET_user_content_url_json_200_response_results_comments_inner::OAIGET_user_content_url_json_200_response_results_comments_inner() {
    this->initializeModel();
}

OAIGET_user_content_url_json_200_response_results_comments_inner::~OAIGET_user_content_url_json_200_response_results_comments_inner() {}

void OAIGET_user_content_url_json_200_response_results_comments_inner::initializeModel() {

    m_approve_date_isSet = false;
    m_approve_date_isValid = false;

    m_comment_body_isSet = false;
    m_comment_body_isValid = false;

    m_comment_id_isSet = false;
    m_comment_id_isValid = false;

    m_comment_sequence_isSet = false;
    m_comment_sequence_isValid = false;

    m_comment_title_isSet = false;
    m_comment_title_isValid = false;

    m_comment_type_isSet = false;
    m_comment_type_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_depth_isSet = false;
    m_depth_isValid = false;

    m_editors_selection_isSet = false;
    m_editors_selection_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_parent_user_display_name_isSet = false;
    m_parent_user_display_name_isValid = false;

    m_perm_id_isSet = false;
    m_perm_id_isValid = false;

    m_pic_url_isSet = false;
    m_pic_url_isValid = false;

    m_recommendations_isSet = false;
    m_recommendations_isValid = false;

    m_recommended_flag_isSet = false;
    m_recommended_flag_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_reply_count_isSet = false;
    m_reply_count_isValid = false;

    m_report_abuse_flag_isSet = false;
    m_report_abuse_flag_isValid = false;

    m_sharing_isSet = false;
    m_sharing_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timespeople_isSet = false;
    m_timespeople_isValid = false;

    m_trusted_isSet = false;
    m_trusted_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;

    m_user_display_name_isSet = false;
    m_user_display_name_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_location_isSet = false;
    m_user_location_isValid = false;

    m_user_title_isSet = false;
    m_user_title_isValid = false;

    m_user_url_isSet = false;
    m_user_url_isValid = false;
}

void OAIGET_user_content_url_json_200_response_results_comments_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGET_user_content_url_json_200_response_results_comments_inner::fromJsonObject(QJsonObject json) {

    m_approve_date_isValid = ::OpenAPI::fromJsonValue(m_approve_date, json[QString("approveDate")]);
    m_approve_date_isSet = !json[QString("approveDate")].isNull() && m_approve_date_isValid;

    m_comment_body_isValid = ::OpenAPI::fromJsonValue(m_comment_body, json[QString("commentBody")]);
    m_comment_body_isSet = !json[QString("commentBody")].isNull() && m_comment_body_isValid;

    m_comment_id_isValid = ::OpenAPI::fromJsonValue(m_comment_id, json[QString("commentID")]);
    m_comment_id_isSet = !json[QString("commentID")].isNull() && m_comment_id_isValid;

    m_comment_sequence_isValid = ::OpenAPI::fromJsonValue(m_comment_sequence, json[QString("commentSequence")]);
    m_comment_sequence_isSet = !json[QString("commentSequence")].isNull() && m_comment_sequence_isValid;

    m_comment_title_isValid = ::OpenAPI::fromJsonValue(m_comment_title, json[QString("commentTitle")]);
    m_comment_title_isSet = !json[QString("commentTitle")].isNull() && m_comment_title_isValid;

    m_comment_type_isValid = ::OpenAPI::fromJsonValue(m_comment_type, json[QString("commentType")]);
    m_comment_type_isSet = !json[QString("commentType")].isNull() && m_comment_type_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_depth_isValid = ::OpenAPI::fromJsonValue(m_depth, json[QString("depth")]);
    m_depth_isSet = !json[QString("depth")].isNull() && m_depth_isValid;

    m_editors_selection_isValid = ::OpenAPI::fromJsonValue(m_editors_selection, json[QString("editorsSelection")]);
    m_editors_selection_isSet = !json[QString("editorsSelection")].isNull() && m_editors_selection_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentID")]);
    m_parent_id_isSet = !json[QString("parentID")].isNull() && m_parent_id_isValid;

    m_parent_user_display_name_isValid = ::OpenAPI::fromJsonValue(m_parent_user_display_name, json[QString("parentUserDisplayName")]);
    m_parent_user_display_name_isSet = !json[QString("parentUserDisplayName")].isNull() && m_parent_user_display_name_isValid;

    m_perm_id_isValid = ::OpenAPI::fromJsonValue(m_perm_id, json[QString("permID")]);
    m_perm_id_isSet = !json[QString("permID")].isNull() && m_perm_id_isValid;

    m_pic_url_isValid = ::OpenAPI::fromJsonValue(m_pic_url, json[QString("picURL")]);
    m_pic_url_isSet = !json[QString("picURL")].isNull() && m_pic_url_isValid;

    m_recommendations_isValid = ::OpenAPI::fromJsonValue(m_recommendations, json[QString("recommendations")]);
    m_recommendations_isSet = !json[QString("recommendations")].isNull() && m_recommendations_isValid;

    m_recommended_flag_isValid = ::OpenAPI::fromJsonValue(m_recommended_flag, json[QString("recommendedFlag")]);
    m_recommended_flag_isSet = !json[QString("recommendedFlag")].isNull() && m_recommended_flag_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("replies")]);
    m_replies_isSet = !json[QString("replies")].isNull() && m_replies_isValid;

    m_reply_count_isValid = ::OpenAPI::fromJsonValue(m_reply_count, json[QString("replyCount")]);
    m_reply_count_isSet = !json[QString("replyCount")].isNull() && m_reply_count_isValid;

    m_report_abuse_flag_isValid = ::OpenAPI::fromJsonValue(m_report_abuse_flag, json[QString("reportAbuseFlag")]);
    m_report_abuse_flag_isSet = !json[QString("reportAbuseFlag")].isNull() && m_report_abuse_flag_isValid;

    m_sharing_isValid = ::OpenAPI::fromJsonValue(m_sharing, json[QString("sharing")]);
    m_sharing_isSet = !json[QString("sharing")].isNull() && m_sharing_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timespeople_isValid = ::OpenAPI::fromJsonValue(m_timespeople, json[QString("timespeople")]);
    m_timespeople_isSet = !json[QString("timespeople")].isNull() && m_timespeople_isValid;

    m_trusted_isValid = ::OpenAPI::fromJsonValue(m_trusted, json[QString("trusted")]);
    m_trusted_isSet = !json[QString("trusted")].isNull() && m_trusted_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("updateDate")]);
    m_update_date_isSet = !json[QString("updateDate")].isNull() && m_update_date_isValid;

    m_user_display_name_isValid = ::OpenAPI::fromJsonValue(m_user_display_name, json[QString("userDisplayName")]);
    m_user_display_name_isSet = !json[QString("userDisplayName")].isNull() && m_user_display_name_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userID")]);
    m_user_id_isSet = !json[QString("userID")].isNull() && m_user_id_isValid;

    m_user_location_isValid = ::OpenAPI::fromJsonValue(m_user_location, json[QString("userLocation")]);
    m_user_location_isSet = !json[QString("userLocation")].isNull() && m_user_location_isValid;

    m_user_title_isValid = ::OpenAPI::fromJsonValue(m_user_title, json[QString("userTitle")]);
    m_user_title_isSet = !json[QString("userTitle")].isNull() && m_user_title_isValid;

    m_user_url_isValid = ::OpenAPI::fromJsonValue(m_user_url, json[QString("userURL")]);
    m_user_url_isSet = !json[QString("userURL")].isNull() && m_user_url_isValid;
}

QString OAIGET_user_content_url_json_200_response_results_comments_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGET_user_content_url_json_200_response_results_comments_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_approve_date_isSet) {
        obj.insert(QString("approveDate"), ::OpenAPI::toJsonValue(m_approve_date));
    }
    if (m_comment_body_isSet) {
        obj.insert(QString("commentBody"), ::OpenAPI::toJsonValue(m_comment_body));
    }
    if (m_comment_id_isSet) {
        obj.insert(QString("commentID"), ::OpenAPI::toJsonValue(m_comment_id));
    }
    if (m_comment_sequence_isSet) {
        obj.insert(QString("commentSequence"), ::OpenAPI::toJsonValue(m_comment_sequence));
    }
    if (m_comment_title_isSet) {
        obj.insert(QString("commentTitle"), ::OpenAPI::toJsonValue(m_comment_title));
    }
    if (m_comment_type_isSet) {
        obj.insert(QString("commentType"), ::OpenAPI::toJsonValue(m_comment_type));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_depth_isSet) {
        obj.insert(QString("depth"), ::OpenAPI::toJsonValue(m_depth));
    }
    if (m_editors_selection_isSet) {
        obj.insert(QString("editorsSelection"), ::OpenAPI::toJsonValue(m_editors_selection));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentID"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_parent_user_display_name_isSet) {
        obj.insert(QString("parentUserDisplayName"), ::OpenAPI::toJsonValue(m_parent_user_display_name));
    }
    if (m_perm_id_isSet) {
        obj.insert(QString("permID"), ::OpenAPI::toJsonValue(m_perm_id));
    }
    if (m_pic_url_isSet) {
        obj.insert(QString("picURL"), ::OpenAPI::toJsonValue(m_pic_url));
    }
    if (m_recommendations_isSet) {
        obj.insert(QString("recommendations"), ::OpenAPI::toJsonValue(m_recommendations));
    }
    if (m_recommended_flag_isSet) {
        obj.insert(QString("recommendedFlag"), ::OpenAPI::toJsonValue(m_recommended_flag));
    }
    if (m_replies.size() > 0) {
        obj.insert(QString("replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_reply_count_isSet) {
        obj.insert(QString("replyCount"), ::OpenAPI::toJsonValue(m_reply_count));
    }
    if (m_report_abuse_flag_isSet) {
        obj.insert(QString("reportAbuseFlag"), ::OpenAPI::toJsonValue(m_report_abuse_flag));
    }
    if (m_sharing_isSet) {
        obj.insert(QString("sharing"), ::OpenAPI::toJsonValue(m_sharing));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timespeople_isSet) {
        obj.insert(QString("timespeople"), ::OpenAPI::toJsonValue(m_timespeople));
    }
    if (m_trusted_isSet) {
        obj.insert(QString("trusted"), ::OpenAPI::toJsonValue(m_trusted));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("updateDate"), ::OpenAPI::toJsonValue(m_update_date));
    }
    if (m_user_display_name_isSet) {
        obj.insert(QString("userDisplayName"), ::OpenAPI::toJsonValue(m_user_display_name));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userID"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_location_isSet) {
        obj.insert(QString("userLocation"), ::OpenAPI::toJsonValue(m_user_location));
    }
    if (m_user_title_isSet) {
        obj.insert(QString("userTitle"), ::OpenAPI::toJsonValue(m_user_title));
    }
    if (m_user_url_isSet) {
        obj.insert(QString("userURL"), ::OpenAPI::toJsonValue(m_user_url));
    }
    return obj;
}

QString OAIGET_user_content_url_json_200_response_results_comments_inner::getApproveDate() const {
    return m_approve_date;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setApproveDate(const QString &approve_date) {
    m_approve_date = approve_date;
    m_approve_date_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_approve_date_Set() const{
    return m_approve_date_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_approve_date_Valid() const{
    return m_approve_date_isValid;
}

QString OAIGET_user_content_url_json_200_response_results_comments_inner::getCommentBody() const {
    return m_comment_body;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setCommentBody(const QString &comment_body) {
    m_comment_body = comment_body;
    m_comment_body_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_comment_body_Set() const{
    return m_comment_body_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_comment_body_Valid() const{
    return m_comment_body_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results_comments_inner::getCommentId() const {
    return m_comment_id;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setCommentId(const qint32 &comment_id) {
    m_comment_id = comment_id;
    m_comment_id_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_comment_id_Set() const{
    return m_comment_id_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_comment_id_Valid() const{
    return m_comment_id_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results_comments_inner::getCommentSequence() const {
    return m_comment_sequence;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setCommentSequence(const qint32 &comment_sequence) {
    m_comment_sequence = comment_sequence;
    m_comment_sequence_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_comment_sequence_Set() const{
    return m_comment_sequence_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_comment_sequence_Valid() const{
    return m_comment_sequence_isValid;
}

QString OAIGET_user_content_url_json_200_response_results_comments_inner::getCommentTitle() const {
    return m_comment_title;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setCommentTitle(const QString &comment_title) {
    m_comment_title = comment_title;
    m_comment_title_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_comment_title_Set() const{
    return m_comment_title_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_comment_title_Valid() const{
    return m_comment_title_isValid;
}

QString OAIGET_user_content_url_json_200_response_results_comments_inner::getCommentType() const {
    return m_comment_type;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setCommentType(const QString &comment_type) {
    m_comment_type = comment_type;
    m_comment_type_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_comment_type_Set() const{
    return m_comment_type_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_comment_type_Valid() const{
    return m_comment_type_isValid;
}

QString OAIGET_user_content_url_json_200_response_results_comments_inner::getCreateDate() const {
    return m_create_date;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setCreateDate(const QString &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_create_date_Valid() const{
    return m_create_date_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results_comments_inner::getDepth() const {
    return m_depth;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setDepth(const qint32 &depth) {
    m_depth = depth;
    m_depth_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_depth_Set() const{
    return m_depth_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_depth_Valid() const{
    return m_depth_isValid;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::isEditorsSelection() const {
    return m_editors_selection;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setEditorsSelection(const bool &editors_selection) {
    m_editors_selection = editors_selection;
    m_editors_selection_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_editors_selection_Set() const{
    return m_editors_selection_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_editors_selection_Valid() const{
    return m_editors_selection_isValid;
}

QJsonValue OAIGET_user_content_url_json_200_response_results_comments_inner::getParentId() const {
    return m_parent_id;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setParentId(const QJsonValue &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QJsonValue OAIGET_user_content_url_json_200_response_results_comments_inner::getParentUserDisplayName() const {
    return m_parent_user_display_name;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setParentUserDisplayName(const QJsonValue &parent_user_display_name) {
    m_parent_user_display_name = parent_user_display_name;
    m_parent_user_display_name_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_parent_user_display_name_Set() const{
    return m_parent_user_display_name_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_parent_user_display_name_Valid() const{
    return m_parent_user_display_name_isValid;
}

QString OAIGET_user_content_url_json_200_response_results_comments_inner::getPermId() const {
    return m_perm_id;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setPermId(const QString &perm_id) {
    m_perm_id = perm_id;
    m_perm_id_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_perm_id_Set() const{
    return m_perm_id_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_perm_id_Valid() const{
    return m_perm_id_isValid;
}

QString OAIGET_user_content_url_json_200_response_results_comments_inner::getPicUrl() const {
    return m_pic_url;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setPicUrl(const QString &pic_url) {
    m_pic_url = pic_url;
    m_pic_url_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_pic_url_Set() const{
    return m_pic_url_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_pic_url_Valid() const{
    return m_pic_url_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results_comments_inner::getRecommendations() const {
    return m_recommendations;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setRecommendations(const qint32 &recommendations) {
    m_recommendations = recommendations;
    m_recommendations_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_recommendations_Set() const{
    return m_recommendations_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_recommendations_Valid() const{
    return m_recommendations_isValid;
}

QJsonValue OAIGET_user_content_url_json_200_response_results_comments_inner::getRecommendedFlag() const {
    return m_recommended_flag;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setRecommendedFlag(const QJsonValue &recommended_flag) {
    m_recommended_flag = recommended_flag;
    m_recommended_flag_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_recommended_flag_Set() const{
    return m_recommended_flag_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_recommended_flag_Valid() const{
    return m_recommended_flag_isValid;
}

QList<QJsonValue> OAIGET_user_content_url_json_200_response_results_comments_inner::getReplies() const {
    return m_replies;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setReplies(const QList<QJsonValue> &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_replies_Valid() const{
    return m_replies_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results_comments_inner::getReplyCount() const {
    return m_reply_count;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setReplyCount(const qint32 &reply_count) {
    m_reply_count = reply_count;
    m_reply_count_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_reply_count_Set() const{
    return m_reply_count_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_reply_count_Valid() const{
    return m_reply_count_isValid;
}

QJsonValue OAIGET_user_content_url_json_200_response_results_comments_inner::getReportAbuseFlag() const {
    return m_report_abuse_flag;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setReportAbuseFlag(const QJsonValue &report_abuse_flag) {
    m_report_abuse_flag = report_abuse_flag;
    m_report_abuse_flag_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_report_abuse_flag_Set() const{
    return m_report_abuse_flag_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_report_abuse_flag_Valid() const{
    return m_report_abuse_flag_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results_comments_inner::getSharing() const {
    return m_sharing;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setSharing(const qint32 &sharing) {
    m_sharing = sharing;
    m_sharing_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_sharing_Set() const{
    return m_sharing_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_sharing_Valid() const{
    return m_sharing_isValid;
}

QString OAIGET_user_content_url_json_200_response_results_comments_inner::getStatus() const {
    return m_status;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results_comments_inner::getTimespeople() const {
    return m_timespeople;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setTimespeople(const qint32 &timespeople) {
    m_timespeople = timespeople;
    m_timespeople_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_timespeople_Set() const{
    return m_timespeople_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_timespeople_Valid() const{
    return m_timespeople_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results_comments_inner::getTrusted() const {
    return m_trusted;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setTrusted(const qint32 &trusted) {
    m_trusted = trusted;
    m_trusted_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_trusted_Set() const{
    return m_trusted_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_trusted_Valid() const{
    return m_trusted_isValid;
}

QString OAIGET_user_content_url_json_200_response_results_comments_inner::getUpdateDate() const {
    return m_update_date;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setUpdateDate(const QString &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_update_date_Valid() const{
    return m_update_date_isValid;
}

QString OAIGET_user_content_url_json_200_response_results_comments_inner::getUserDisplayName() const {
    return m_user_display_name;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setUserDisplayName(const QString &user_display_name) {
    m_user_display_name = user_display_name;
    m_user_display_name_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_user_display_name_Set() const{
    return m_user_display_name_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_user_display_name_Valid() const{
    return m_user_display_name_isValid;
}

qint32 OAIGET_user_content_url_json_200_response_results_comments_inner::getUserId() const {
    return m_user_id;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIGET_user_content_url_json_200_response_results_comments_inner::getUserLocation() const {
    return m_user_location;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setUserLocation(const QString &user_location) {
    m_user_location = user_location;
    m_user_location_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_user_location_Set() const{
    return m_user_location_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_user_location_Valid() const{
    return m_user_location_isValid;
}

QJsonValue OAIGET_user_content_url_json_200_response_results_comments_inner::getUserTitle() const {
    return m_user_title;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setUserTitle(const QJsonValue &user_title) {
    m_user_title = user_title;
    m_user_title_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_user_title_Set() const{
    return m_user_title_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_user_title_Valid() const{
    return m_user_title_isValid;
}

QJsonValue OAIGET_user_content_url_json_200_response_results_comments_inner::getUserUrl() const {
    return m_user_url;
}
void OAIGET_user_content_url_json_200_response_results_comments_inner::setUserUrl(const QJsonValue &user_url) {
    m_user_url = user_url;
    m_user_url_isSet = true;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_user_url_Set() const{
    return m_user_url_isSet;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::is_user_url_Valid() const{
    return m_user_url_isValid;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approve_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editors_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_user_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pic_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_abuse_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timespeople_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGET_user_content_url_json_200_response_results_comments_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
