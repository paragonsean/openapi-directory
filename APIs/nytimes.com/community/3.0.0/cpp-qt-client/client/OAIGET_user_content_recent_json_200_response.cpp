/**
 * Community API
 * Get access to comments from registered users on New York Times articles.  NOTE: This API is deprecated.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGET_user_content_recent_json_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGET_user_content_recent_json_200_response::OAIGET_user_content_recent_json_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGET_user_content_recent_json_200_response::OAIGET_user_content_recent_json_200_response() {
    this->initializeModel();
}

OAIGET_user_content_recent_json_200_response::~OAIGET_user_content_recent_json_200_response() {}

void OAIGET_user_content_recent_json_200_response::initializeModel() {

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_debug_isSet = false;
    m_debug_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGET_user_content_recent_json_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGET_user_content_recent_json_200_response::fromJsonObject(QJsonObject json) {

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_debug_isValid = ::OpenAPI::fromJsonValue(m_debug, json[QString("debug")]);
    m_debug_isSet = !json[QString("debug")].isNull() && m_debug_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGET_user_content_recent_json_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGET_user_content_recent_json_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_debug.isSet()) {
        obj.insert(QString("debug"), ::OpenAPI::toJsonValue(m_debug));
    }
    if (m_results.isSet()) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIGET_user_content_recent_json_200_response::getCopyright() const {
    return m_copyright;
}
void OAIGET_user_content_recent_json_200_response::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAIGET_user_content_recent_json_200_response::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAIGET_user_content_recent_json_200_response::is_copyright_Valid() const{
    return m_copyright_isValid;
}

OAIGET_user_content_by_date_json_200_response_debug OAIGET_user_content_recent_json_200_response::getDebug() const {
    return m_debug;
}
void OAIGET_user_content_recent_json_200_response::setDebug(const OAIGET_user_content_by_date_json_200_response_debug &debug) {
    m_debug = debug;
    m_debug_isSet = true;
}

bool OAIGET_user_content_recent_json_200_response::is_debug_Set() const{
    return m_debug_isSet;
}

bool OAIGET_user_content_recent_json_200_response::is_debug_Valid() const{
    return m_debug_isValid;
}

OAIGET_user_content_recent_json_200_response_results OAIGET_user_content_recent_json_200_response::getResults() const {
    return m_results;
}
void OAIGET_user_content_recent_json_200_response::setResults(const OAIGET_user_content_recent_json_200_response_results &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIGET_user_content_recent_json_200_response::is_results_Set() const{
    return m_results_isSet;
}

bool OAIGET_user_content_recent_json_200_response::is_results_Valid() const{
    return m_results_isValid;
}

QString OAIGET_user_content_recent_json_200_response::getStatus() const {
    return m_status;
}
void OAIGET_user_content_recent_json_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGET_user_content_recent_json_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGET_user_content_recent_json_200_response::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGET_user_content_recent_json_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGET_user_content_recent_json_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
