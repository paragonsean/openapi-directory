/**
 * Community API
 * Get access to comments from registered users on New York Times articles.  NOTE: This API is deprecated.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGET_user_content_url_json_200_response_results.h
 *
 * 
 */

#ifndef OAIGET_user_content_url_json_200_response_results_H
#define OAIGET_user_content_url_json_200_response_results_H

#include <QJsonObject>

#include "OAIGET_user_content_url_json_200_response_results_comments_inner.h"
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGET_user_content_url_json_200_response_results_comments_inner;

class OAIGET_user_content_url_json_200_response_results : public OAIObject {
public:
    OAIGET_user_content_url_json_200_response_results();
    OAIGET_user_content_url_json_200_response_results(QString json);
    ~OAIGET_user_content_url_json_200_response_results() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApiTimestamp() const;
    void setApiTimestamp(const QString &api_timestamp);
    bool is_api_timestamp_Set() const;
    bool is_api_timestamp_Valid() const;

    QJsonValue getCallerId() const;
    void setCallerId(const QJsonValue &caller_id);
    bool is_caller_id_Set() const;
    bool is_caller_id_Valid() const;

    QList<OAIGET_user_content_url_json_200_response_results_comments_inner> getComments() const;
    void setComments(const QList<OAIGET_user_content_url_json_200_response_results_comments_inner> &comments);
    bool is_comments_Set() const;
    bool is_comments_Valid() const;

    qint32 getDepthLimit() const;
    void setDepthLimit(const qint32 &depth_limit);
    bool is_depth_limit_Set() const;
    bool is_depth_limit_Valid() const;

    QString getFilter() const;
    void setFilter(const QString &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    qint32 getPage() const;
    void setPage(const qint32 &page);
    bool is_page_Set() const;
    bool is_page_Valid() const;

    qint32 getReplyLimit() const;
    void setReplyLimit(const qint32 &reply_limit);
    bool is_reply_limit_Set() const;
    bool is_reply_limit_Valid() const;

    QString getSort() const;
    void setSort(const QString &sort);
    bool is_sort_Set() const;
    bool is_sort_Valid() const;

    qint32 getTotalCommentsFound() const;
    void setTotalCommentsFound(const qint32 &total_comments_found);
    bool is_total_comments_found_Set() const;
    bool is_total_comments_found_Valid() const;

    qint32 getTotalCommentsReturned() const;
    void setTotalCommentsReturned(const qint32 &total_comments_returned);
    bool is_total_comments_returned_Set() const;
    bool is_total_comments_returned_Valid() const;

    qint32 getTotalEditorsSelectionFound() const;
    void setTotalEditorsSelectionFound(const qint32 &total_editors_selection_found);
    bool is_total_editors_selection_found_Set() const;
    bool is_total_editors_selection_found_Valid() const;

    qint32 getTotalEditorsSelectionReturned() const;
    void setTotalEditorsSelectionReturned(const qint32 &total_editors_selection_returned);
    bool is_total_editors_selection_returned_Set() const;
    bool is_total_editors_selection_returned_Valid() const;

    qint32 getTotalParentCommentsFound() const;
    void setTotalParentCommentsFound(const qint32 &total_parent_comments_found);
    bool is_total_parent_comments_found_Set() const;
    bool is_total_parent_comments_found_Valid() const;

    qint32 getTotalParentCommentsReturned() const;
    void setTotalParentCommentsReturned(const qint32 &total_parent_comments_returned);
    bool is_total_parent_comments_returned_Set() const;
    bool is_total_parent_comments_returned_Valid() const;

    qint32 getTotalRecommendationsFound() const;
    void setTotalRecommendationsFound(const qint32 &total_recommendations_found);
    bool is_total_recommendations_found_Set() const;
    bool is_total_recommendations_found_Valid() const;

    qint32 getTotalRecommendationsReturned() const;
    void setTotalRecommendationsReturned(const qint32 &total_recommendations_returned);
    bool is_total_recommendations_returned_Set() const;
    bool is_total_recommendations_returned_Valid() const;

    qint32 getTotalReplyCommentsFound() const;
    void setTotalReplyCommentsFound(const qint32 &total_reply_comments_found);
    bool is_total_reply_comments_found_Set() const;
    bool is_total_reply_comments_found_Valid() const;

    qint32 getTotalReplyCommentsReturned() const;
    void setTotalReplyCommentsReturned(const qint32 &total_reply_comments_returned);
    bool is_total_reply_comments_returned_Set() const;
    bool is_total_reply_comments_returned_Valid() const;

    qint32 getTotalReporterReplyCommentsFound() const;
    void setTotalReporterReplyCommentsFound(const qint32 &total_reporter_reply_comments_found);
    bool is_total_reporter_reply_comments_found_Set() const;
    bool is_total_reporter_reply_comments_found_Valid() const;

    qint32 getTotalReporterReplyCommentsReturned() const;
    void setTotalReporterReplyCommentsReturned(const qint32 &total_reporter_reply_comments_returned);
    bool is_total_reporter_reply_comments_returned_Set() const;
    bool is_total_reporter_reply_comments_returned_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_api_timestamp;
    bool m_api_timestamp_isSet;
    bool m_api_timestamp_isValid;

    QJsonValue m_caller_id;
    bool m_caller_id_isSet;
    bool m_caller_id_isValid;

    QList<OAIGET_user_content_url_json_200_response_results_comments_inner> m_comments;
    bool m_comments_isSet;
    bool m_comments_isValid;

    qint32 m_depth_limit;
    bool m_depth_limit_isSet;
    bool m_depth_limit_isValid;

    QString m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    qint32 m_page;
    bool m_page_isSet;
    bool m_page_isValid;

    qint32 m_reply_limit;
    bool m_reply_limit_isSet;
    bool m_reply_limit_isValid;

    QString m_sort;
    bool m_sort_isSet;
    bool m_sort_isValid;

    qint32 m_total_comments_found;
    bool m_total_comments_found_isSet;
    bool m_total_comments_found_isValid;

    qint32 m_total_comments_returned;
    bool m_total_comments_returned_isSet;
    bool m_total_comments_returned_isValid;

    qint32 m_total_editors_selection_found;
    bool m_total_editors_selection_found_isSet;
    bool m_total_editors_selection_found_isValid;

    qint32 m_total_editors_selection_returned;
    bool m_total_editors_selection_returned_isSet;
    bool m_total_editors_selection_returned_isValid;

    qint32 m_total_parent_comments_found;
    bool m_total_parent_comments_found_isSet;
    bool m_total_parent_comments_found_isValid;

    qint32 m_total_parent_comments_returned;
    bool m_total_parent_comments_returned_isSet;
    bool m_total_parent_comments_returned_isValid;

    qint32 m_total_recommendations_found;
    bool m_total_recommendations_found_isSet;
    bool m_total_recommendations_found_isValid;

    qint32 m_total_recommendations_returned;
    bool m_total_recommendations_returned_isSet;
    bool m_total_recommendations_returned_isValid;

    qint32 m_total_reply_comments_found;
    bool m_total_reply_comments_found_isSet;
    bool m_total_reply_comments_found_isValid;

    qint32 m_total_reply_comments_returned;
    bool m_total_reply_comments_returned_isSet;
    bool m_total_reply_comments_returned_isValid;

    qint32 m_total_reporter_reply_comments_found;
    bool m_total_reporter_reply_comments_found_isSet;
    bool m_total_reporter_reply_comments_found_isValid;

    qint32 m_total_reporter_reply_comments_returned;
    bool m_total_reporter_reply_comments_returned_isSet;
    bool m_total_reporter_reply_comments_returned_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGET_user_content_url_json_200_response_results)

#endif // OAIGET_user_content_url_json_200_response_results_H
