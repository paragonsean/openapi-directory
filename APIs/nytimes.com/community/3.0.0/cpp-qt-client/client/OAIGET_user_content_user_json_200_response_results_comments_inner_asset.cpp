/**
 * Community API
 * Get access to comments from registered users on New York Times articles.  NOTE: This API is deprecated.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGET_user_content_user_json_200_response_results_comments_inner_asset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGET_user_content_user_json_200_response_results_comments_inner_asset::OAIGET_user_content_user_json_200_response_results_comments_inner_asset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGET_user_content_user_json_200_response_results_comments_inner_asset::OAIGET_user_content_user_json_200_response_results_comments_inner_asset() {
    this->initializeModel();
}

OAIGET_user_content_user_json_200_response_results_comments_inner_asset::~OAIGET_user_content_user_json_200_response_results_comments_inner_asset() {}

void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::initializeModel() {

    m_all_properties_isSet = false;
    m_all_properties_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_asset_title_isSet = false;
    m_asset_title_isValid = false;

    m_asset_url_isSet = false;
    m_asset_url_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_taxonomy_isSet = false;
    m_taxonomy_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;
}

void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::fromJsonObject(QJsonObject json) {

    m_all_properties_isValid = ::OpenAPI::fromJsonValue(m_all_properties, json[QString("all-properties")]);
    m_all_properties_isSet = !json[QString("all-properties")].isNull() && m_all_properties_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetID")]);
    m_asset_id_isSet = !json[QString("assetID")].isNull() && m_asset_id_isValid;

    m_asset_title_isValid = ::OpenAPI::fromJsonValue(m_asset_title, json[QString("assetTitle")]);
    m_asset_title_isSet = !json[QString("assetTitle")].isNull() && m_asset_title_isValid;

    m_asset_url_isValid = ::OpenAPI::fromJsonValue(m_asset_url, json[QString("assetURL")]);
    m_asset_url_isSet = !json[QString("assetURL")].isNull() && m_asset_url_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_taxonomy_isValid = ::OpenAPI::fromJsonValue(m_taxonomy, json[QString("taxonomy")]);
    m_taxonomy_isSet = !json[QString("taxonomy")].isNull() && m_taxonomy_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("updateDate")]);
    m_update_date_isSet = !json[QString("updateDate")].isNull() && m_update_date_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendorID")]);
    m_vendor_id_isSet = !json[QString("vendorID")].isNull() && m_vendor_id_isValid;
}

QString OAIGET_user_content_user_json_200_response_results_comments_inner_asset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGET_user_content_user_json_200_response_results_comments_inner_asset::asJsonObject() const {
    QJsonObject obj;
    if (m_all_properties.size() > 0) {
        obj.insert(QString("all-properties"), ::OpenAPI::toJsonValue(m_all_properties));
    }
    if (m_asset_id_isSet) {
        obj.insert(QString("assetID"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_asset_title_isSet) {
        obj.insert(QString("assetTitle"), ::OpenAPI::toJsonValue(m_asset_title));
    }
    if (m_asset_url_isSet) {
        obj.insert(QString("assetURL"), ::OpenAPI::toJsonValue(m_asset_url));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_taxonomy_isSet) {
        obj.insert(QString("taxonomy"), ::OpenAPI::toJsonValue(m_taxonomy));
    }
    if (m_text.size() > 0) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("updateDate"), ::OpenAPI::toJsonValue(m_update_date));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendorID"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    return obj;
}

QList<OAIGET_user_content_recent_json_200_response_results_comments_inner_asset_all_properties_inner> OAIGET_user_content_user_json_200_response_results_comments_inner_asset::getAllProperties() const {
    return m_all_properties;
}
void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::setAllProperties(const QList<OAIGET_user_content_recent_json_200_response_results_comments_inner_asset_all_properties_inner> &all_properties) {
    m_all_properties = all_properties;
    m_all_properties_isSet = true;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_all_properties_Set() const{
    return m_all_properties_isSet;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_all_properties_Valid() const{
    return m_all_properties_isValid;
}

qint32 OAIGET_user_content_user_json_200_response_results_comments_inner_asset::getAssetId() const {
    return m_asset_id;
}
void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::setAssetId(const qint32 &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIGET_user_content_user_json_200_response_results_comments_inner_asset::getAssetTitle() const {
    return m_asset_title;
}
void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::setAssetTitle(const QString &asset_title) {
    m_asset_title = asset_title;
    m_asset_title_isSet = true;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_asset_title_Set() const{
    return m_asset_title_isSet;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_asset_title_Valid() const{
    return m_asset_title_isValid;
}

QString OAIGET_user_content_user_json_200_response_results_comments_inner_asset::getAssetUrl() const {
    return m_asset_url;
}
void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::setAssetUrl(const QString &asset_url) {
    m_asset_url = asset_url;
    m_asset_url_isSet = true;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_asset_url_Set() const{
    return m_asset_url_isSet;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_asset_url_Valid() const{
    return m_asset_url_isValid;
}

QString OAIGET_user_content_user_json_200_response_results_comments_inner_asset::getCreateDate() const {
    return m_create_date;
}
void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::setCreateDate(const QString &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QList<OAIGET_user_content_user_json_200_response_results_comments_inner_asset_labels_inner> OAIGET_user_content_user_json_200_response_results_comments_inner_asset::getLabels() const {
    return m_labels;
}
void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::setLabels(const QList<OAIGET_user_content_user_json_200_response_results_comments_inner_asset_labels_inner> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIGET_user_content_user_json_200_response_results_comments_inner_asset_properties OAIGET_user_content_user_json_200_response_results_comments_inner_asset::getProperties() const {
    return m_properties;
}
void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::setProperties(const OAIGET_user_content_user_json_200_response_results_comments_inner_asset_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIGET_user_content_user_json_200_response_results_comments_inner_asset::getSource() const {
    return m_source;
}
void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_source_Set() const{
    return m_source_isSet;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIGET_user_content_user_json_200_response_results_comments_inner_asset::getTaxonomy() const {
    return m_taxonomy;
}
void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::setTaxonomy(const QString &taxonomy) {
    m_taxonomy = taxonomy;
    m_taxonomy_isSet = true;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_taxonomy_Set() const{
    return m_taxonomy_isSet;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_taxonomy_Valid() const{
    return m_taxonomy_isValid;
}

QList<OAIObject> OAIGET_user_content_user_json_200_response_results_comments_inner_asset::getText() const {
    return m_text;
}
void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::setText(const QList<OAIObject> &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIGET_user_content_user_json_200_response_results_comments_inner_asset::getUpdateDate() const {
    return m_update_date;
}
void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::setUpdateDate(const QString &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_update_date_Valid() const{
    return m_update_date_isValid;
}

QString OAIGET_user_content_user_json_200_response_results_comments_inner_asset::getVendorId() const {
    return m_vendor_id;
}
void OAIGET_user_content_user_json_200_response_results_comments_inner_asset::setVendorId(const QString &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxonomy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGET_user_content_user_json_200_response_results_comments_inner_asset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
