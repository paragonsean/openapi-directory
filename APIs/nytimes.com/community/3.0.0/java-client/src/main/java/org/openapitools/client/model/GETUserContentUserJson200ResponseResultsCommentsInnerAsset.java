/*
 * Community API
 * Get access to comments from registered users on New York Times articles.  NOTE: This API is deprecated.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GETUserContentRecentJson200ResponseResultsCommentsInnerAssetAllPropertiesInner;
import org.openapitools.client.model.GETUserContentUserJson200ResponseResultsCommentsInnerAssetLabelsInner;
import org.openapitools.client.model.GETUserContentUserJson200ResponseResultsCommentsInnerAssetProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GETUserContentUserJson200ResponseResultsCommentsInnerAsset
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:30.780759-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GETUserContentUserJson200ResponseResultsCommentsInnerAsset {
  public static final String SERIALIZED_NAME_ALL_PROPERTIES = "all-properties";
  @SerializedName(SERIALIZED_NAME_ALL_PROPERTIES)
  private List<GETUserContentRecentJson200ResponseResultsCommentsInnerAssetAllPropertiesInner> allProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSET_I_D = "assetID";
  @SerializedName(SERIALIZED_NAME_ASSET_I_D)
  private Integer assetID;

  public static final String SERIALIZED_NAME_ASSET_TITLE = "assetTitle";
  @SerializedName(SERIALIZED_NAME_ASSET_TITLE)
  private String assetTitle;

  public static final String SERIALIZED_NAME_ASSET_U_R_L = "assetURL";
  @SerializedName(SERIALIZED_NAME_ASSET_U_R_L)
  private String assetURL;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private String createDate;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<GETUserContentUserJson200ResponseResultsCommentsInnerAssetLabelsInner> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private GETUserContentUserJson200ResponseResultsCommentsInnerAssetProperties properties;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TAXONOMY = "taxonomy";
  @SerializedName(SERIALIZED_NAME_TAXONOMY)
  private String taxonomy;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private List<Object> text = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_DATE = "updateDate";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private String updateDate;

  public static final String SERIALIZED_NAME_VENDOR_I_D = "vendorID";
  @SerializedName(SERIALIZED_NAME_VENDOR_I_D)
  private String vendorID;

  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset() {
  }

  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset allProperties(List<GETUserContentRecentJson200ResponseResultsCommentsInnerAssetAllPropertiesInner> allProperties) {
    this.allProperties = allProperties;
    return this;
  }

  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset addAllPropertiesItem(GETUserContentRecentJson200ResponseResultsCommentsInnerAssetAllPropertiesInner allPropertiesItem) {
    if (this.allProperties == null) {
      this.allProperties = new ArrayList<>();
    }
    this.allProperties.add(allPropertiesItem);
    return this;
  }

  /**
   * Get allProperties
   * @return allProperties
   */
  @javax.annotation.Nullable
  public List<GETUserContentRecentJson200ResponseResultsCommentsInnerAssetAllPropertiesInner> getAllProperties() {
    return allProperties;
  }

  public void setAllProperties(List<GETUserContentRecentJson200ResponseResultsCommentsInnerAssetAllPropertiesInner> allProperties) {
    this.allProperties = allProperties;
  }


  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset assetID(Integer assetID) {
    this.assetID = assetID;
    return this;
  }

  /**
   * Get assetID
   * @return assetID
   */
  @javax.annotation.Nullable
  public Integer getAssetID() {
    return assetID;
  }

  public void setAssetID(Integer assetID) {
    this.assetID = assetID;
  }


  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset assetTitle(String assetTitle) {
    this.assetTitle = assetTitle;
    return this;
  }

  /**
   * Get assetTitle
   * @return assetTitle
   */
  @javax.annotation.Nullable
  public String getAssetTitle() {
    return assetTitle;
  }

  public void setAssetTitle(String assetTitle) {
    this.assetTitle = assetTitle;
  }


  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset assetURL(String assetURL) {
    this.assetURL = assetURL;
    return this;
  }

  /**
   * Get assetURL
   * @return assetURL
   */
  @javax.annotation.Nullable
  public String getAssetURL() {
    return assetURL;
  }

  public void setAssetURL(String assetURL) {
    this.assetURL = assetURL;
  }


  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset createDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public String getCreateDate() {
    return createDate;
  }

  public void setCreateDate(String createDate) {
    this.createDate = createDate;
  }


  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset labels(List<GETUserContentUserJson200ResponseResultsCommentsInnerAssetLabelsInner> labels) {
    this.labels = labels;
    return this;
  }

  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset addLabelsItem(GETUserContentUserJson200ResponseResultsCommentsInnerAssetLabelsInner labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<GETUserContentUserJson200ResponseResultsCommentsInnerAssetLabelsInner> getLabels() {
    return labels;
  }

  public void setLabels(List<GETUserContentUserJson200ResponseResultsCommentsInnerAssetLabelsInner> labels) {
    this.labels = labels;
  }


  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset properties(GETUserContentUserJson200ResponseResultsCommentsInnerAssetProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public GETUserContentUserJson200ResponseResultsCommentsInnerAssetProperties getProperties() {
    return properties;
  }

  public void setProperties(GETUserContentUserJson200ResponseResultsCommentsInnerAssetProperties properties) {
    this.properties = properties;
  }


  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset taxonomy(String taxonomy) {
    this.taxonomy = taxonomy;
    return this;
  }

  /**
   * Get taxonomy
   * @return taxonomy
   */
  @javax.annotation.Nullable
  public String getTaxonomy() {
    return taxonomy;
  }

  public void setTaxonomy(String taxonomy) {
    this.taxonomy = taxonomy;
  }


  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset text(List<Object> text) {
    this.text = text;
    return this;
  }

  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset addTextItem(Object textItem) {
    if (this.text == null) {
      this.text = new ArrayList<>();
    }
    this.text.add(textItem);
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public List<Object> getText() {
    return text;
  }

  public void setText(List<Object> text) {
    this.text = text;
  }


  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset updateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  /**
   * Get updateDate
   * @return updateDate
   */
  @javax.annotation.Nullable
  public String getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
  }


  public GETUserContentUserJson200ResponseResultsCommentsInnerAsset vendorID(String vendorID) {
    this.vendorID = vendorID;
    return this;
  }

  /**
   * Get vendorID
   * @return vendorID
   */
  @javax.annotation.Nullable
  public String getVendorID() {
    return vendorID;
  }

  public void setVendorID(String vendorID) {
    this.vendorID = vendorID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GETUserContentUserJson200ResponseResultsCommentsInnerAsset geTUserContentUserJson200ResponseResultsCommentsInnerAsset = (GETUserContentUserJson200ResponseResultsCommentsInnerAsset) o;
    return Objects.equals(this.allProperties, geTUserContentUserJson200ResponseResultsCommentsInnerAsset.allProperties) &&
        Objects.equals(this.assetID, geTUserContentUserJson200ResponseResultsCommentsInnerAsset.assetID) &&
        Objects.equals(this.assetTitle, geTUserContentUserJson200ResponseResultsCommentsInnerAsset.assetTitle) &&
        Objects.equals(this.assetURL, geTUserContentUserJson200ResponseResultsCommentsInnerAsset.assetURL) &&
        Objects.equals(this.createDate, geTUserContentUserJson200ResponseResultsCommentsInnerAsset.createDate) &&
        Objects.equals(this.labels, geTUserContentUserJson200ResponseResultsCommentsInnerAsset.labels) &&
        Objects.equals(this.properties, geTUserContentUserJson200ResponseResultsCommentsInnerAsset.properties) &&
        Objects.equals(this.source, geTUserContentUserJson200ResponseResultsCommentsInnerAsset.source) &&
        Objects.equals(this.taxonomy, geTUserContentUserJson200ResponseResultsCommentsInnerAsset.taxonomy) &&
        Objects.equals(this.text, geTUserContentUserJson200ResponseResultsCommentsInnerAsset.text) &&
        Objects.equals(this.updateDate, geTUserContentUserJson200ResponseResultsCommentsInnerAsset.updateDate) &&
        Objects.equals(this.vendorID, geTUserContentUserJson200ResponseResultsCommentsInnerAsset.vendorID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allProperties, assetID, assetTitle, assetURL, createDate, labels, properties, source, taxonomy, text, updateDate, vendorID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GETUserContentUserJson200ResponseResultsCommentsInnerAsset {\n");
    sb.append("    allProperties: ").append(toIndentedString(allProperties)).append("\n");
    sb.append("    assetID: ").append(toIndentedString(assetID)).append("\n");
    sb.append("    assetTitle: ").append(toIndentedString(assetTitle)).append("\n");
    sb.append("    assetURL: ").append(toIndentedString(assetURL)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    taxonomy: ").append(toIndentedString(taxonomy)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("    vendorID: ").append(toIndentedString(vendorID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("all-properties");
    openapiFields.add("assetID");
    openapiFields.add("assetTitle");
    openapiFields.add("assetURL");
    openapiFields.add("createDate");
    openapiFields.add("labels");
    openapiFields.add("properties");
    openapiFields.add("source");
    openapiFields.add("taxonomy");
    openapiFields.add("text");
    openapiFields.add("updateDate");
    openapiFields.add("vendorID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GETUserContentUserJson200ResponseResultsCommentsInnerAsset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GETUserContentUserJson200ResponseResultsCommentsInnerAsset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GETUserContentUserJson200ResponseResultsCommentsInnerAsset is not found in the empty JSON string", GETUserContentUserJson200ResponseResultsCommentsInnerAsset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GETUserContentUserJson200ResponseResultsCommentsInnerAsset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GETUserContentUserJson200ResponseResultsCommentsInnerAsset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("all-properties") != null && !jsonObj.get("all-properties").isJsonNull()) {
        JsonArray jsonArrayallProperties = jsonObj.getAsJsonArray("all-properties");
        if (jsonArrayallProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("all-properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `all-properties` to be an array in the JSON string but got `%s`", jsonObj.get("all-properties").toString()));
          }

          // validate the optional field `all-properties` (array)
          for (int i = 0; i < jsonArrayallProperties.size(); i++) {
            GETUserContentRecentJson200ResponseResultsCommentsInnerAssetAllPropertiesInner.validateJsonElement(jsonArrayallProperties.get(i));
          };
        }
      }
      if ((jsonObj.get("assetTitle") != null && !jsonObj.get("assetTitle").isJsonNull()) && !jsonObj.get("assetTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetTitle").toString()));
      }
      if ((jsonObj.get("assetURL") != null && !jsonObj.get("assetURL").isJsonNull()) && !jsonObj.get("assetURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetURL").toString()));
      }
      if ((jsonObj.get("createDate") != null && !jsonObj.get("createDate").isJsonNull()) && !jsonObj.get("createDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createDate").toString()));
      }
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
        if (jsonArraylabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
          }

          // validate the optional field `labels` (array)
          for (int i = 0; i < jsonArraylabels.size(); i++) {
            GETUserContentUserJson200ResponseResultsCommentsInnerAssetLabelsInner.validateJsonElement(jsonArraylabels.get(i));
          };
        }
      }
      // validate the optional field `properties`
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        GETUserContentUserJson200ResponseResultsCommentsInnerAssetProperties.validateJsonElement(jsonObj.get("properties"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("taxonomy") != null && !jsonObj.get("taxonomy").isJsonNull()) && !jsonObj.get("taxonomy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxonomy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxonomy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull() && !jsonObj.get("text").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be an array in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("updateDate") != null && !jsonObj.get("updateDate").isJsonNull()) && !jsonObj.get("updateDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateDate").toString()));
      }
      if ((jsonObj.get("vendorID") != null && !jsonObj.get("vendorID").isJsonNull()) && !jsonObj.get("vendorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GETUserContentUserJson200ResponseResultsCommentsInnerAsset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GETUserContentUserJson200ResponseResultsCommentsInnerAsset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GETUserContentUserJson200ResponseResultsCommentsInnerAsset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GETUserContentUserJson200ResponseResultsCommentsInnerAsset.class));

       return (TypeAdapter<T>) new TypeAdapter<GETUserContentUserJson200ResponseResultsCommentsInnerAsset>() {
           @Override
           public void write(JsonWriter out, GETUserContentUserJson200ResponseResultsCommentsInnerAsset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GETUserContentUserJson200ResponseResultsCommentsInnerAsset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GETUserContentUserJson200ResponseResultsCommentsInnerAsset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GETUserContentUserJson200ResponseResultsCommentsInnerAsset
   * @throws IOException if the JSON string is invalid with respect to GETUserContentUserJson200ResponseResultsCommentsInnerAsset
   */
  public static GETUserContentUserJson200ResponseResultsCommentsInnerAsset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GETUserContentUserJson200ResponseResultsCommentsInnerAsset.class);
  }

  /**
   * Convert an instance of GETUserContentUserJson200ResponseResultsCommentsInnerAsset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

