/**
 * Community API
 * Get access to comments from registered users on New York Times articles.  NOTE: This API is deprecated.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GETUserContentRecentJson200ResponseResultsCommentsInnerAssetAllPropertiesInner from './GETUserContentRecentJson200ResponseResultsCommentsInnerAssetAllPropertiesInner';
import GETUserContentRecentJson200ResponseResultsCommentsInnerAssetProperties from './GETUserContentRecentJson200ResponseResultsCommentsInnerAssetProperties';

/**
 * The GETUserContentRecentJson200ResponseResultsCommentsInnerAsset model module.
 * @module model/GETUserContentRecentJson200ResponseResultsCommentsInnerAsset
 * @version 3.0.0
 */
class GETUserContentRecentJson200ResponseResultsCommentsInnerAsset {
    /**
     * Constructs a new <code>GETUserContentRecentJson200ResponseResultsCommentsInnerAsset</code>.
     * @alias module:model/GETUserContentRecentJson200ResponseResultsCommentsInnerAsset
     */
    constructor() { 
        
        GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GETUserContentRecentJson200ResponseResultsCommentsInnerAsset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GETUserContentRecentJson200ResponseResultsCommentsInnerAsset} obj Optional instance to populate.
     * @return {module:model/GETUserContentRecentJson200ResponseResultsCommentsInnerAsset} The populated <code>GETUserContentRecentJson200ResponseResultsCommentsInnerAsset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GETUserContentRecentJson200ResponseResultsCommentsInnerAsset();

            if (data.hasOwnProperty('all-properties')) {
                obj['all-properties'] = ApiClient.convertToType(data['all-properties'], [GETUserContentRecentJson200ResponseResultsCommentsInnerAssetAllPropertiesInner]);
            }
            if (data.hasOwnProperty('assetID')) {
                obj['assetID'] = ApiClient.convertToType(data['assetID'], 'Number');
            }
            if (data.hasOwnProperty('assetTitle')) {
                obj['assetTitle'] = ApiClient.convertToType(data['assetTitle'], 'String');
            }
            if (data.hasOwnProperty('assetURL')) {
                obj['assetURL'] = ApiClient.convertToType(data['assetURL'], 'String');
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Object]);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = GETUserContentRecentJson200ResponseResultsCommentsInnerAssetProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('taxonomy')) {
                obj['taxonomy'] = ApiClient.convertToType(data['taxonomy'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], [Object]);
            }
            if (data.hasOwnProperty('updateDate')) {
                obj['updateDate'] = ApiClient.convertToType(data['updateDate'], 'String');
            }
            if (data.hasOwnProperty('vendorID')) {
                obj['vendorID'] = ApiClient.convertToType(data['vendorID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GETUserContentRecentJson200ResponseResultsCommentsInnerAsset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GETUserContentRecentJson200ResponseResultsCommentsInnerAsset</code>.
     */
    static validateJSON(data) {
        if (data['all-properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['all-properties'])) {
                throw new Error("Expected the field `all-properties` to be an array in the JSON data but got " + data['all-properties']);
            }
            // validate the optional field `all-properties` (array)
            for (const item of data['all-properties']) {
                GETUserContentRecentJson200ResponseResultsCommentsInnerAssetAllPropertiesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['assetTitle'] && !(typeof data['assetTitle'] === 'string' || data['assetTitle'] instanceof String)) {
            throw new Error("Expected the field `assetTitle` to be a primitive type in the JSON string but got " + data['assetTitle']);
        }
        // ensure the json data is a string
        if (data['assetURL'] && !(typeof data['assetURL'] === 'string' || data['assetURL'] instanceof String)) {
            throw new Error("Expected the field `assetURL` to be a primitive type in the JSON string but got " + data['assetURL']);
        }
        // ensure the json data is a string
        if (data['createDate'] && !(typeof data['createDate'] === 'string' || data['createDate'] instanceof String)) {
            throw new Error("Expected the field `createDate` to be a primitive type in the JSON string but got " + data['createDate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          GETUserContentRecentJson200ResponseResultsCommentsInnerAssetProperties.validateJSON(data['properties']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['taxonomy'] && !(typeof data['taxonomy'] === 'string' || data['taxonomy'] instanceof String)) {
            throw new Error("Expected the field `taxonomy` to be a primitive type in the JSON string but got " + data['taxonomy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['text'])) {
            throw new Error("Expected the field `text` to be an array in the JSON data but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['updateDate'] && !(typeof data['updateDate'] === 'string' || data['updateDate'] instanceof String)) {
            throw new Error("Expected the field `updateDate` to be a primitive type in the JSON string but got " + data['updateDate']);
        }
        // ensure the json data is a string
        if (data['vendorID'] && !(typeof data['vendorID'] === 'string' || data['vendorID'] instanceof String)) {
            throw new Error("Expected the field `vendorID` to be a primitive type in the JSON string but got " + data['vendorID']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/GETUserContentRecentJson200ResponseResultsCommentsInnerAssetAllPropertiesInner>} all-properties
 */
GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.prototype['all-properties'] = undefined;

/**
 * @member {Number} assetID
 */
GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.prototype['assetID'] = undefined;

/**
 * @member {String} assetTitle
 */
GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.prototype['assetTitle'] = undefined;

/**
 * @member {String} assetURL
 */
GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.prototype['assetURL'] = undefined;

/**
 * @member {String} createDate
 */
GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.prototype['createDate'] = undefined;

/**
 * @member {Array.<Object>} labels
 */
GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.prototype['labels'] = undefined;

/**
 * @member {module:model/GETUserContentRecentJson200ResponseResultsCommentsInnerAssetProperties} properties
 */
GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.prototype['properties'] = undefined;

/**
 * @member {String} source
 */
GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.prototype['source'] = undefined;

/**
 * @member {String} taxonomy
 */
GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.prototype['taxonomy'] = undefined;

/**
 * @member {Array.<Object>} text
 */
GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.prototype['text'] = undefined;

/**
 * @member {String} updateDate
 */
GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.prototype['updateDate'] = undefined;

/**
 * @member {String} vendorID
 */
GETUserContentRecentJson200ResponseResultsCommentsInnerAsset.prototype['vendorID'] = undefined;






export default GETUserContentRecentJson200ResponseResultsCommentsInnerAsset;

