/**
 * Most Popular API
 * Get lists of NYT Articles based on shares, emails, and views.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticleWithCountType_media_inner_media_metadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticleWithCountType_media_inner_media_metadata::OAIArticleWithCountType_media_inner_media_metadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticleWithCountType_media_inner_media_metadata::OAIArticleWithCountType_media_inner_media_metadata() {
    this->initializeModel();
}

OAIArticleWithCountType_media_inner_media_metadata::~OAIArticleWithCountType_media_inner_media_metadata() {}

void OAIArticleWithCountType_media_inner_media_metadata::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIArticleWithCountType_media_inner_media_metadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticleWithCountType_media_inner_media_metadata::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIArticleWithCountType_media_inner_media_metadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticleWithCountType_media_inner_media_metadata::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIArticleWithCountType_media_inner_media_metadata::getFormat() const {
    return m_format;
}
void OAIArticleWithCountType_media_inner_media_metadata::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIArticleWithCountType_media_inner_media_metadata::is_format_Set() const{
    return m_format_isSet;
}

bool OAIArticleWithCountType_media_inner_media_metadata::is_format_Valid() const{
    return m_format_isValid;
}

qint32 OAIArticleWithCountType_media_inner_media_metadata::getHeight() const {
    return m_height;
}
void OAIArticleWithCountType_media_inner_media_metadata::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIArticleWithCountType_media_inner_media_metadata::is_height_Set() const{
    return m_height_isSet;
}

bool OAIArticleWithCountType_media_inner_media_metadata::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIArticleWithCountType_media_inner_media_metadata::getUrl() const {
    return m_url;
}
void OAIArticleWithCountType_media_inner_media_metadata::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIArticleWithCountType_media_inner_media_metadata::is_url_Set() const{
    return m_url_isSet;
}

bool OAIArticleWithCountType_media_inner_media_metadata::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIArticleWithCountType_media_inner_media_metadata::getWidth() const {
    return m_width;
}
void OAIArticleWithCountType_media_inner_media_metadata::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIArticleWithCountType_media_inner_media_metadata::is_width_Set() const{
    return m_width_isSet;
}

bool OAIArticleWithCountType_media_inner_media_metadata::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIArticleWithCountType_media_inner_media_metadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticleWithCountType_media_inner_media_metadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
