/**
 * Most Popular API
 * Get lists of NYT Articles based on shares, emails, and views.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticleWithCountType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticleWithCountType::OAIArticleWithCountType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticleWithCountType::OAIArticleWithCountType() {
    this->initializeModel();
}

OAIArticleWithCountType::~OAIArticleWithCountType() {}

void OAIArticleWithCountType::initializeModel() {

    m_abstract_isSet = false;
    m_abstract_isValid = false;

    m_byline_isSet = false;
    m_byline_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_count_type_isSet = false;
    m_count_type_isValid = false;

    m_des_facet_isSet = false;
    m_des_facet_isValid = false;

    m_geo_facet_isSet = false;
    m_geo_facet_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_org_facet_isSet = false;
    m_org_facet_isValid = false;

    m_per_facet_isSet = false;
    m_per_facet_isValid = false;

    m_published_date_isSet = false;
    m_published_date_isValid = false;

    m_section_isSet = false;
    m_section_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIArticleWithCountType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticleWithCountType::fromJsonObject(QJsonObject json) {

    m_abstract_isValid = ::OpenAPI::fromJsonValue(m_abstract, json[QString("abstract")]);
    m_abstract_isSet = !json[QString("abstract")].isNull() && m_abstract_isValid;

    m_byline_isValid = ::OpenAPI::fromJsonValue(m_byline, json[QString("byline")]);
    m_byline_isSet = !json[QString("byline")].isNull() && m_byline_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("column")]);
    m_column_isSet = !json[QString("column")].isNull() && m_column_isValid;

    m_count_type_isValid = ::OpenAPI::fromJsonValue(m_count_type, json[QString("count_type")]);
    m_count_type_isSet = !json[QString("count_type")].isNull() && m_count_type_isValid;

    m_des_facet_isValid = ::OpenAPI::fromJsonValue(m_des_facet, json[QString("des_facet")]);
    m_des_facet_isSet = !json[QString("des_facet")].isNull() && m_des_facet_isValid;

    m_geo_facet_isValid = ::OpenAPI::fromJsonValue(m_geo_facet, json[QString("geo_facet")]);
    m_geo_facet_isSet = !json[QString("geo_facet")].isNull() && m_geo_facet_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_org_facet_isValid = ::OpenAPI::fromJsonValue(m_org_facet, json[QString("org_facet")]);
    m_org_facet_isSet = !json[QString("org_facet")].isNull() && m_org_facet_isValid;

    m_per_facet_isValid = ::OpenAPI::fromJsonValue(m_per_facet, json[QString("per_facet")]);
    m_per_facet_isSet = !json[QString("per_facet")].isNull() && m_per_facet_isValid;

    m_published_date_isValid = ::OpenAPI::fromJsonValue(m_published_date, json[QString("published_date")]);
    m_published_date_isSet = !json[QString("published_date")].isNull() && m_published_date_isValid;

    m_section_isValid = ::OpenAPI::fromJsonValue(m_section, json[QString("section")]);
    m_section_isSet = !json[QString("section")].isNull() && m_section_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIArticleWithCountType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticleWithCountType::asJsonObject() const {
    QJsonObject obj;
    if (m_abstract_isSet) {
        obj.insert(QString("abstract"), ::OpenAPI::toJsonValue(m_abstract));
    }
    if (m_byline_isSet) {
        obj.insert(QString("byline"), ::OpenAPI::toJsonValue(m_byline));
    }
    if (m_column_isSet) {
        obj.insert(QString("column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_count_type_isSet) {
        obj.insert(QString("count_type"), ::OpenAPI::toJsonValue(m_count_type));
    }
    if (m_des_facet.size() > 0) {
        obj.insert(QString("des_facet"), ::OpenAPI::toJsonValue(m_des_facet));
    }
    if (m_geo_facet.isSet()) {
        obj.insert(QString("geo_facet"), ::OpenAPI::toJsonValue(m_geo_facet));
    }
    if (m_media.size() > 0) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_org_facet.size() > 0) {
        obj.insert(QString("org_facet"), ::OpenAPI::toJsonValue(m_org_facet));
    }
    if (m_per_facet.size() > 0) {
        obj.insert(QString("per_facet"), ::OpenAPI::toJsonValue(m_per_facet));
    }
    if (m_published_date_isSet) {
        obj.insert(QString("published_date"), ::OpenAPI::toJsonValue(m_published_date));
    }
    if (m_section_isSet) {
        obj.insert(QString("section"), ::OpenAPI::toJsonValue(m_section));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIArticleWithCountType::getAbstract() const {
    return m_abstract;
}
void OAIArticleWithCountType::setAbstract(const QString &abstract) {
    m_abstract = abstract;
    m_abstract_isSet = true;
}

bool OAIArticleWithCountType::is_abstract_Set() const{
    return m_abstract_isSet;
}

bool OAIArticleWithCountType::is_abstract_Valid() const{
    return m_abstract_isValid;
}

QString OAIArticleWithCountType::getByline() const {
    return m_byline;
}
void OAIArticleWithCountType::setByline(const QString &byline) {
    m_byline = byline;
    m_byline_isSet = true;
}

bool OAIArticleWithCountType::is_byline_Set() const{
    return m_byline_isSet;
}

bool OAIArticleWithCountType::is_byline_Valid() const{
    return m_byline_isValid;
}

QString OAIArticleWithCountType::getColumn() const {
    return m_column;
}
void OAIArticleWithCountType::setColumn(const QString &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIArticleWithCountType::is_column_Set() const{
    return m_column_isSet;
}

bool OAIArticleWithCountType::is_column_Valid() const{
    return m_column_isValid;
}

QString OAIArticleWithCountType::getCountType() const {
    return m_count_type;
}
void OAIArticleWithCountType::setCountType(const QString &count_type) {
    m_count_type = count_type;
    m_count_type_isSet = true;
}

bool OAIArticleWithCountType::is_count_type_Set() const{
    return m_count_type_isSet;
}

bool OAIArticleWithCountType::is_count_type_Valid() const{
    return m_count_type_isValid;
}

QList<QJsonValue> OAIArticleWithCountType::getDesFacet() const {
    return m_des_facet;
}
void OAIArticleWithCountType::setDesFacet(const QList<QJsonValue> &des_facet) {
    m_des_facet = des_facet;
    m_des_facet_isSet = true;
}

bool OAIArticleWithCountType::is_des_facet_Set() const{
    return m_des_facet_isSet;
}

bool OAIArticleWithCountType::is_des_facet_Valid() const{
    return m_des_facet_isValid;
}

OAIGeoFacet OAIArticleWithCountType::getGeoFacet() const {
    return m_geo_facet;
}
void OAIArticleWithCountType::setGeoFacet(const OAIGeoFacet &geo_facet) {
    m_geo_facet = geo_facet;
    m_geo_facet_isSet = true;
}

bool OAIArticleWithCountType::is_geo_facet_Set() const{
    return m_geo_facet_isSet;
}

bool OAIArticleWithCountType::is_geo_facet_Valid() const{
    return m_geo_facet_isValid;
}

QList<OAIArticleWithCountType_media_inner> OAIArticleWithCountType::getMedia() const {
    return m_media;
}
void OAIArticleWithCountType::setMedia(const QList<OAIArticleWithCountType_media_inner> &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIArticleWithCountType::is_media_Set() const{
    return m_media_isSet;
}

bool OAIArticleWithCountType::is_media_Valid() const{
    return m_media_isValid;
}

QList<QJsonValue> OAIArticleWithCountType::getOrgFacet() const {
    return m_org_facet;
}
void OAIArticleWithCountType::setOrgFacet(const QList<QJsonValue> &org_facet) {
    m_org_facet = org_facet;
    m_org_facet_isSet = true;
}

bool OAIArticleWithCountType::is_org_facet_Set() const{
    return m_org_facet_isSet;
}

bool OAIArticleWithCountType::is_org_facet_Valid() const{
    return m_org_facet_isValid;
}

QList<QJsonValue> OAIArticleWithCountType::getPerFacet() const {
    return m_per_facet;
}
void OAIArticleWithCountType::setPerFacet(const QList<QJsonValue> &per_facet) {
    m_per_facet = per_facet;
    m_per_facet_isSet = true;
}

bool OAIArticleWithCountType::is_per_facet_Set() const{
    return m_per_facet_isSet;
}

bool OAIArticleWithCountType::is_per_facet_Valid() const{
    return m_per_facet_isValid;
}

QString OAIArticleWithCountType::getPublishedDate() const {
    return m_published_date;
}
void OAIArticleWithCountType::setPublishedDate(const QString &published_date) {
    m_published_date = published_date;
    m_published_date_isSet = true;
}

bool OAIArticleWithCountType::is_published_date_Set() const{
    return m_published_date_isSet;
}

bool OAIArticleWithCountType::is_published_date_Valid() const{
    return m_published_date_isValid;
}

QString OAIArticleWithCountType::getSection() const {
    return m_section;
}
void OAIArticleWithCountType::setSection(const QString &section) {
    m_section = section;
    m_section_isSet = true;
}

bool OAIArticleWithCountType::is_section_Set() const{
    return m_section_isSet;
}

bool OAIArticleWithCountType::is_section_Valid() const{
    return m_section_isValid;
}

QString OAIArticleWithCountType::getSource() const {
    return m_source;
}
void OAIArticleWithCountType::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIArticleWithCountType::is_source_Set() const{
    return m_source_isSet;
}

bool OAIArticleWithCountType::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIArticleWithCountType::getTitle() const {
    return m_title;
}
void OAIArticleWithCountType::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIArticleWithCountType::is_title_Set() const{
    return m_title_isSet;
}

bool OAIArticleWithCountType::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIArticleWithCountType::getUrl() const {
    return m_url;
}
void OAIArticleWithCountType::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIArticleWithCountType::is_url_Set() const{
    return m_url_isSet;
}

bool OAIArticleWithCountType::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIArticleWithCountType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abstract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_byline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_des_facet.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_facet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_facet.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_facet.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticleWithCountType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
