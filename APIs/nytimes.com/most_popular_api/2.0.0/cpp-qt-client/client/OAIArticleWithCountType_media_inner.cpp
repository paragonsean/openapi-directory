/**
 * Most Popular API
 * Get lists of NYT Articles based on shares, emails, and views.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticleWithCountType_media_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticleWithCountType_media_inner::OAIArticleWithCountType_media_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticleWithCountType_media_inner::OAIArticleWithCountType_media_inner() {
    this->initializeModel();
}

OAIArticleWithCountType_media_inner::~OAIArticleWithCountType_media_inner() {}

void OAIArticleWithCountType_media_inner::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_media_metadata_isSet = false;
    m_media_metadata_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIArticleWithCountType_media_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticleWithCountType_media_inner::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_media_metadata_isValid = ::OpenAPI::fromJsonValue(m_media_metadata, json[QString("media-metadata")]);
    m_media_metadata_isSet = !json[QString("media-metadata")].isNull() && m_media_metadata_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIArticleWithCountType_media_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticleWithCountType_media_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_media_metadata.isSet()) {
        obj.insert(QString("media-metadata"), ::OpenAPI::toJsonValue(m_media_metadata));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIArticleWithCountType_media_inner::getCaption() const {
    return m_caption;
}
void OAIArticleWithCountType_media_inner::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIArticleWithCountType_media_inner::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIArticleWithCountType_media_inner::is_caption_Valid() const{
    return m_caption_isValid;
}

QString OAIArticleWithCountType_media_inner::getCopyright() const {
    return m_copyright;
}
void OAIArticleWithCountType_media_inner::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAIArticleWithCountType_media_inner::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAIArticleWithCountType_media_inner::is_copyright_Valid() const{
    return m_copyright_isValid;
}

OAIArticleWithCountType_media_inner_media_metadata OAIArticleWithCountType_media_inner::getMediaMetadata() const {
    return m_media_metadata;
}
void OAIArticleWithCountType_media_inner::setMediaMetadata(const OAIArticleWithCountType_media_inner_media_metadata &media_metadata) {
    m_media_metadata = media_metadata;
    m_media_metadata_isSet = true;
}

bool OAIArticleWithCountType_media_inner::is_media_metadata_Set() const{
    return m_media_metadata_isSet;
}

bool OAIArticleWithCountType_media_inner::is_media_metadata_Valid() const{
    return m_media_metadata_isValid;
}

QString OAIArticleWithCountType_media_inner::getSubtype() const {
    return m_subtype;
}
void OAIArticleWithCountType_media_inner::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIArticleWithCountType_media_inner::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIArticleWithCountType_media_inner::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QString OAIArticleWithCountType_media_inner::getType() const {
    return m_type;
}
void OAIArticleWithCountType_media_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIArticleWithCountType_media_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIArticleWithCountType_media_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIArticleWithCountType_media_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticleWithCountType_media_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
