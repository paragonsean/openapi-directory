/**
 * Most Popular API
 * Get lists of NYT Articles based on shares, emails, and views.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIArticleWithCountType.h
 *
 * 
 */

#ifndef OAIArticleWithCountType_H
#define OAIArticleWithCountType_H

#include <QJsonObject>

#include "OAIArticleWithCountType_media_inner.h"
#include "OAIGeoFacet.h"
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIArticleWithCountType_media_inner;

class OAIArticleWithCountType : public OAIObject {
public:
    OAIArticleWithCountType();
    OAIArticleWithCountType(QString json);
    ~OAIArticleWithCountType() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAbstract() const;
    void setAbstract(const QString &abstract);
    bool is_abstract_Set() const;
    bool is_abstract_Valid() const;

    QString getByline() const;
    void setByline(const QString &byline);
    bool is_byline_Set() const;
    bool is_byline_Valid() const;

    QString getColumn() const;
    void setColumn(const QString &column);
    bool is_column_Set() const;
    bool is_column_Valid() const;

    QString getCountType() const;
    void setCountType(const QString &count_type);
    bool is_count_type_Set() const;
    bool is_count_type_Valid() const;

    QList<QJsonValue> getDesFacet() const;
    void setDesFacet(const QList<QJsonValue> &des_facet);
    bool is_des_facet_Set() const;
    bool is_des_facet_Valid() const;

    OAIGeoFacet getGeoFacet() const;
    void setGeoFacet(const OAIGeoFacet &geo_facet);
    bool is_geo_facet_Set() const;
    bool is_geo_facet_Valid() const;

    QList<OAIArticleWithCountType_media_inner> getMedia() const;
    void setMedia(const QList<OAIArticleWithCountType_media_inner> &media);
    bool is_media_Set() const;
    bool is_media_Valid() const;

    QList<QJsonValue> getOrgFacet() const;
    void setOrgFacet(const QList<QJsonValue> &org_facet);
    bool is_org_facet_Set() const;
    bool is_org_facet_Valid() const;

    QList<QJsonValue> getPerFacet() const;
    void setPerFacet(const QList<QJsonValue> &per_facet);
    bool is_per_facet_Set() const;
    bool is_per_facet_Valid() const;

    QString getPublishedDate() const;
    void setPublishedDate(const QString &published_date);
    bool is_published_date_Set() const;
    bool is_published_date_Valid() const;

    QString getSection() const;
    void setSection(const QString &section);
    bool is_section_Set() const;
    bool is_section_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_abstract;
    bool m_abstract_isSet;
    bool m_abstract_isValid;

    QString m_byline;
    bool m_byline_isSet;
    bool m_byline_isValid;

    QString m_column;
    bool m_column_isSet;
    bool m_column_isValid;

    QString m_count_type;
    bool m_count_type_isSet;
    bool m_count_type_isValid;

    QList<QJsonValue> m_des_facet;
    bool m_des_facet_isSet;
    bool m_des_facet_isValid;

    OAIGeoFacet m_geo_facet;
    bool m_geo_facet_isSet;
    bool m_geo_facet_isValid;

    QList<OAIArticleWithCountType_media_inner> m_media;
    bool m_media_isSet;
    bool m_media_isValid;

    QList<QJsonValue> m_org_facet;
    bool m_org_facet_isSet;
    bool m_org_facet_isValid;

    QList<QJsonValue> m_per_facet;
    bool m_per_facet_isSet;
    bool m_per_facet_isValid;

    QString m_published_date;
    bool m_published_date_isSet;
    bool m_published_date_isValid;

    QString m_section;
    bool m_section_isSet;
    bool m_section_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIArticleWithCountType)

#endif // OAIArticleWithCountType_H
