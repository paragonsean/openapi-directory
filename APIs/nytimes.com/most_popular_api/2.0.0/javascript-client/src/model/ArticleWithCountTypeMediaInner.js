/**
 * Most Popular API
 * Get lists of NYT Articles based on shares, emails, and views.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArticleWithCountTypeMediaInnerMediaMetadata from './ArticleWithCountTypeMediaInnerMediaMetadata';

/**
 * The ArticleWithCountTypeMediaInner model module.
 * @module model/ArticleWithCountTypeMediaInner
 * @version 2.0.0
 */
class ArticleWithCountTypeMediaInner {
    /**
     * Constructs a new <code>ArticleWithCountTypeMediaInner</code>.
     * @alias module:model/ArticleWithCountTypeMediaInner
     */
    constructor() { 
        
        ArticleWithCountTypeMediaInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArticleWithCountTypeMediaInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleWithCountTypeMediaInner} obj Optional instance to populate.
     * @return {module:model/ArticleWithCountTypeMediaInner} The populated <code>ArticleWithCountTypeMediaInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleWithCountTypeMediaInner();

            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('copyright')) {
                obj['copyright'] = ApiClient.convertToType(data['copyright'], 'String');
            }
            if (data.hasOwnProperty('media-metadata')) {
                obj['media-metadata'] = ArticleWithCountTypeMediaInnerMediaMetadata.constructFromObject(data['media-metadata']);
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = ApiClient.convertToType(data['subtype'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleWithCountTypeMediaInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleWithCountTypeMediaInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        // ensure the json data is a string
        if (data['copyright'] && !(typeof data['copyright'] === 'string' || data['copyright'] instanceof String)) {
            throw new Error("Expected the field `copyright` to be a primitive type in the JSON string but got " + data['copyright']);
        }
        // validate the optional field `media-metadata`
        if (data['media-metadata']) { // data not null
          ArticleWithCountTypeMediaInnerMediaMetadata.validateJSON(data['media-metadata']);
        }
        // ensure the json data is a string
        if (data['subtype'] && !(typeof data['subtype'] === 'string' || data['subtype'] instanceof String)) {
            throw new Error("Expected the field `subtype` to be a primitive type in the JSON string but got " + data['subtype']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} caption
 */
ArticleWithCountTypeMediaInner.prototype['caption'] = undefined;

/**
 * @member {String} copyright
 */
ArticleWithCountTypeMediaInner.prototype['copyright'] = undefined;

/**
 * @member {module:model/ArticleWithCountTypeMediaInnerMediaMetadata} media-metadata
 */
ArticleWithCountTypeMediaInner.prototype['media-metadata'] = undefined;

/**
 * @member {String} subtype
 */
ArticleWithCountTypeMediaInner.prototype['subtype'] = undefined;

/**
 * @member {String} type
 */
ArticleWithCountTypeMediaInner.prototype['type'] = undefined;






export default ArticleWithCountTypeMediaInner;

