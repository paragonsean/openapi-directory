/**
 * Most Popular API
 * Get lists of NYT Articles based on shares, emails, and views.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GeoFacet from './GeoFacet';

/**
 * The Article model module.
 * @module model/Article
 * @version 2.0.0
 */
class Article {
    /**
     * Constructs a new <code>Article</code>.
     * @alias module:model/Article
     */
    constructor() { 
        
        Article.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Article</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Article} obj Optional instance to populate.
     * @return {module:model/Article} The populated <code>Article</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Article();

            if (data.hasOwnProperty('abstract')) {
                obj['abstract'] = ApiClient.convertToType(data['abstract'], 'String');
            }
            if (data.hasOwnProperty('byline')) {
                obj['byline'] = ApiClient.convertToType(data['byline'], 'String');
            }
            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'String');
            }
            if (data.hasOwnProperty('des_facet')) {
                obj['des_facet'] = ApiClient.convertToType(data['des_facet'], [Object]);
            }
            if (data.hasOwnProperty('geo_facet')) {
                obj['geo_facet'] = GeoFacet.constructFromObject(data['geo_facet']);
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], [Object]);
            }
            if (data.hasOwnProperty('org_facet')) {
                obj['org_facet'] = ApiClient.convertToType(data['org_facet'], [Object]);
            }
            if (data.hasOwnProperty('per_facet')) {
                obj['per_facet'] = ApiClient.convertToType(data['per_facet'], [Object]);
            }
            if (data.hasOwnProperty('published_date')) {
                obj['published_date'] = ApiClient.convertToType(data['published_date'], 'String');
            }
            if (data.hasOwnProperty('section')) {
                obj['section'] = ApiClient.convertToType(data['section'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Article</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Article</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['abstract'] && !(typeof data['abstract'] === 'string' || data['abstract'] instanceof String)) {
            throw new Error("Expected the field `abstract` to be a primitive type in the JSON string but got " + data['abstract']);
        }
        // ensure the json data is a string
        if (data['byline'] && !(typeof data['byline'] === 'string' || data['byline'] instanceof String)) {
            throw new Error("Expected the field `byline` to be a primitive type in the JSON string but got " + data['byline']);
        }
        // ensure the json data is a string
        if (data['column'] && !(typeof data['column'] === 'string' || data['column'] instanceof String)) {
            throw new Error("Expected the field `column` to be a primitive type in the JSON string but got " + data['column']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['des_facet'])) {
            throw new Error("Expected the field `des_facet` to be an array in the JSON data but got " + data['des_facet']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['media'])) {
            throw new Error("Expected the field `media` to be an array in the JSON data but got " + data['media']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['org_facet'])) {
            throw new Error("Expected the field `org_facet` to be an array in the JSON data but got " + data['org_facet']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['per_facet'])) {
            throw new Error("Expected the field `per_facet` to be an array in the JSON data but got " + data['per_facet']);
        }
        // ensure the json data is a string
        if (data['published_date'] && !(typeof data['published_date'] === 'string' || data['published_date'] instanceof String)) {
            throw new Error("Expected the field `published_date` to be a primitive type in the JSON string but got " + data['published_date']);
        }
        // ensure the json data is a string
        if (data['section'] && !(typeof data['section'] === 'string' || data['section'] instanceof String)) {
            throw new Error("Expected the field `section` to be a primitive type in the JSON string but got " + data['section']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {String} abstract
 */
Article.prototype['abstract'] = undefined;

/**
 * @member {String} byline
 */
Article.prototype['byline'] = undefined;

/**
 * @member {String} column
 */
Article.prototype['column'] = undefined;

/**
 * @member {Array.<Object>} des_facet
 */
Article.prototype['des_facet'] = undefined;

/**
 * @member {module:model/GeoFacet} geo_facet
 */
Article.prototype['geo_facet'] = undefined;

/**
 * @member {Array.<Object>} media
 */
Article.prototype['media'] = undefined;

/**
 * @member {Array.<Object>} org_facet
 */
Article.prototype['org_facet'] = undefined;

/**
 * @member {Array.<Object>} per_facet
 */
Article.prototype['per_facet'] = undefined;

/**
 * @member {String} published_date
 */
Article.prototype['published_date'] = undefined;

/**
 * @member {String} section
 */
Article.prototype['section'] = undefined;

/**
 * @member {String} source
 */
Article.prototype['source'] = undefined;

/**
 * @member {String} title
 */
Article.prototype['title'] = undefined;

/**
 * @member {String} url
 */
Article.prototype['url'] = undefined;






export default Article;

