# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article_with_count_type_media_inner import ArticleWithCountTypeMediaInner
from openapi_server.models.geo_facet import GeoFacet
from openapi_server import util


class ArticleWithCountType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abstract: str=None, byline: str=None, column: str=None, count_type: str=None, des_facet: List[object]=None, geo_facet: GeoFacet=None, media: List[ArticleWithCountTypeMediaInner]=None, org_facet: List[object]=None, per_facet: List[object]=None, published_date: str=None, section: str=None, source: str=None, title: str=None, url: str=None):
        """ArticleWithCountType - a model defined in OpenAPI

        :param abstract: The abstract of this ArticleWithCountType.
        :param byline: The byline of this ArticleWithCountType.
        :param column: The column of this ArticleWithCountType.
        :param count_type: The count_type of this ArticleWithCountType.
        :param des_facet: The des_facet of this ArticleWithCountType.
        :param geo_facet: The geo_facet of this ArticleWithCountType.
        :param media: The media of this ArticleWithCountType.
        :param org_facet: The org_facet of this ArticleWithCountType.
        :param per_facet: The per_facet of this ArticleWithCountType.
        :param published_date: The published_date of this ArticleWithCountType.
        :param section: The section of this ArticleWithCountType.
        :param source: The source of this ArticleWithCountType.
        :param title: The title of this ArticleWithCountType.
        :param url: The url of this ArticleWithCountType.
        """
        self.openapi_types = {
            'abstract': str,
            'byline': str,
            'column': str,
            'count_type': str,
            'des_facet': List[object],
            'geo_facet': GeoFacet,
            'media': List[ArticleWithCountTypeMediaInner],
            'org_facet': List[object],
            'per_facet': List[object],
            'published_date': str,
            'section': str,
            'source': str,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'abstract': 'abstract',
            'byline': 'byline',
            'column': 'column',
            'count_type': 'count_type',
            'des_facet': 'des_facet',
            'geo_facet': 'geo_facet',
            'media': 'media',
            'org_facet': 'org_facet',
            'per_facet': 'per_facet',
            'published_date': 'published_date',
            'section': 'section',
            'source': 'source',
            'title': 'title',
            'url': 'url'
        }

        self._abstract = abstract
        self._byline = byline
        self._column = column
        self._count_type = count_type
        self._des_facet = des_facet
        self._geo_facet = geo_facet
        self._media = media
        self._org_facet = org_facet
        self._per_facet = per_facet
        self._published_date = published_date
        self._section = section
        self._source = source
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArticleWithCountType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArticleWithCountType of this ArticleWithCountType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abstract(self):
        """Gets the abstract of this ArticleWithCountType.


        :return: The abstract of this ArticleWithCountType.
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this ArticleWithCountType.


        :param abstract: The abstract of this ArticleWithCountType.
        :type abstract: str
        """

        self._abstract = abstract

    @property
    def byline(self):
        """Gets the byline of this ArticleWithCountType.


        :return: The byline of this ArticleWithCountType.
        :rtype: str
        """
        return self._byline

    @byline.setter
    def byline(self, byline):
        """Sets the byline of this ArticleWithCountType.


        :param byline: The byline of this ArticleWithCountType.
        :type byline: str
        """

        self._byline = byline

    @property
    def column(self):
        """Gets the column of this ArticleWithCountType.


        :return: The column of this ArticleWithCountType.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this ArticleWithCountType.


        :param column: The column of this ArticleWithCountType.
        :type column: str
        """

        self._column = column

    @property
    def count_type(self):
        """Gets the count_type of this ArticleWithCountType.


        :return: The count_type of this ArticleWithCountType.
        :rtype: str
        """
        return self._count_type

    @count_type.setter
    def count_type(self, count_type):
        """Sets the count_type of this ArticleWithCountType.


        :param count_type: The count_type of this ArticleWithCountType.
        :type count_type: str
        """

        self._count_type = count_type

    @property
    def des_facet(self):
        """Gets the des_facet of this ArticleWithCountType.


        :return: The des_facet of this ArticleWithCountType.
        :rtype: List[object]
        """
        return self._des_facet

    @des_facet.setter
    def des_facet(self, des_facet):
        """Sets the des_facet of this ArticleWithCountType.


        :param des_facet: The des_facet of this ArticleWithCountType.
        :type des_facet: List[object]
        """

        self._des_facet = des_facet

    @property
    def geo_facet(self):
        """Gets the geo_facet of this ArticleWithCountType.


        :return: The geo_facet of this ArticleWithCountType.
        :rtype: GeoFacet
        """
        return self._geo_facet

    @geo_facet.setter
    def geo_facet(self, geo_facet):
        """Sets the geo_facet of this ArticleWithCountType.


        :param geo_facet: The geo_facet of this ArticleWithCountType.
        :type geo_facet: GeoFacet
        """

        self._geo_facet = geo_facet

    @property
    def media(self):
        """Gets the media of this ArticleWithCountType.


        :return: The media of this ArticleWithCountType.
        :rtype: List[ArticleWithCountTypeMediaInner]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this ArticleWithCountType.


        :param media: The media of this ArticleWithCountType.
        :type media: List[ArticleWithCountTypeMediaInner]
        """

        self._media = media

    @property
    def org_facet(self):
        """Gets the org_facet of this ArticleWithCountType.


        :return: The org_facet of this ArticleWithCountType.
        :rtype: List[object]
        """
        return self._org_facet

    @org_facet.setter
    def org_facet(self, org_facet):
        """Sets the org_facet of this ArticleWithCountType.


        :param org_facet: The org_facet of this ArticleWithCountType.
        :type org_facet: List[object]
        """

        self._org_facet = org_facet

    @property
    def per_facet(self):
        """Gets the per_facet of this ArticleWithCountType.


        :return: The per_facet of this ArticleWithCountType.
        :rtype: List[object]
        """
        return self._per_facet

    @per_facet.setter
    def per_facet(self, per_facet):
        """Sets the per_facet of this ArticleWithCountType.


        :param per_facet: The per_facet of this ArticleWithCountType.
        :type per_facet: List[object]
        """

        self._per_facet = per_facet

    @property
    def published_date(self):
        """Gets the published_date of this ArticleWithCountType.


        :return: The published_date of this ArticleWithCountType.
        :rtype: str
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """Sets the published_date of this ArticleWithCountType.


        :param published_date: The published_date of this ArticleWithCountType.
        :type published_date: str
        """

        self._published_date = published_date

    @property
    def section(self):
        """Gets the section of this ArticleWithCountType.


        :return: The section of this ArticleWithCountType.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this ArticleWithCountType.


        :param section: The section of this ArticleWithCountType.
        :type section: str
        """

        self._section = section

    @property
    def source(self):
        """Gets the source of this ArticleWithCountType.


        :return: The source of this ArticleWithCountType.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ArticleWithCountType.


        :param source: The source of this ArticleWithCountType.
        :type source: str
        """

        self._source = source

    @property
    def title(self):
        """Gets the title of this ArticleWithCountType.


        :return: The title of this ArticleWithCountType.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ArticleWithCountType.


        :param title: The title of this ArticleWithCountType.
        :type title: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this ArticleWithCountType.


        :return: The url of this ArticleWithCountType.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ArticleWithCountType.


        :param url: The url of this ArticleWithCountType.
        :type url: str
        """

        self._url = url
