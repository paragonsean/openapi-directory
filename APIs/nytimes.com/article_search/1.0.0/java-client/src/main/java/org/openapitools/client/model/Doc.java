/*
 * Article Search API
 * With the Article Search API, you can search New York Times articles from Sept. 18, 1851 to today, retrieving headlines, abstracts, lead paragraphs, links to associated multimedia and other article metadata.     Note: In URI examples and field names, italics indicate placeholders for variables or values. Brackets [ ] indicate optional items. Parentheses ( ) are not a convention â€” when URIs include parentheses, interpret them literally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DocByline;
import org.openapitools.client.model.DocHeadline;
import org.openapitools.client.model.DocKeywords;
import org.openapitools.client.model.DocMultimediaInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Doc
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:39.499896-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Doc {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ABSTRACT = "abstract";
  @SerializedName(SERIALIZED_NAME_ABSTRACT)
  private String _abstract;

  public static final String SERIALIZED_NAME_BLOG = "blog";
  @SerializedName(SERIALIZED_NAME_BLOG)
  private List<Object> blog = new ArrayList<>();

  public static final String SERIALIZED_NAME_BYLINE = "byline";
  @SerializedName(SERIALIZED_NAME_BYLINE)
  private DocByline byline;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "document_type";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_HEADLINE = "headline";
  @SerializedName(SERIALIZED_NAME_HEADLINE)
  private DocHeadline headline;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private DocKeywords keywords;

  public static final String SERIALIZED_NAME_LEAD_PARAGRAPH = "lead_paragraph";
  @SerializedName(SERIALIZED_NAME_LEAD_PARAGRAPH)
  private String leadParagraph;

  public static final String SERIALIZED_NAME_MULTIMEDIA = "multimedia";
  @SerializedName(SERIALIZED_NAME_MULTIMEDIA)
  private List<DocMultimediaInner> multimedia = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEWS_DESK = "news_desk";
  @SerializedName(SERIALIZED_NAME_NEWS_DESK)
  private String newsDesk;

  public static final String SERIALIZED_NAME_PRINT_PAGE = "print_page";
  @SerializedName(SERIALIZED_NAME_PRINT_PAGE)
  private String printPage;

  public static final String SERIALIZED_NAME_PUB_DATE = "pub_date";
  @SerializedName(SERIALIZED_NAME_PUB_DATE)
  private String pubDate;

  public static final String SERIALIZED_NAME_SECTION_NAME = "section_name";
  @SerializedName(SERIALIZED_NAME_SECTION_NAME)
  private String sectionName;

  public static final String SERIALIZED_NAME_SLIDESHOW_CREDITS = "slideshow_credits";
  @SerializedName(SERIALIZED_NAME_SLIDESHOW_CREDITS)
  private String slideshowCredits;

  public static final String SERIALIZED_NAME_SNIPPET = "snippet";
  @SerializedName(SERIALIZED_NAME_SNIPPET)
  private String snippet;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SUBSECTION_NAME = "subsection_name";
  @SerializedName(SERIALIZED_NAME_SUBSECTION_NAME)
  private String subsectionName;

  public static final String SERIALIZED_NAME_TYPE_OF_MATERIAL = "type_of_material";
  @SerializedName(SERIALIZED_NAME_TYPE_OF_MATERIAL)
  private String typeOfMaterial;

  public static final String SERIALIZED_NAME_WEB_URL = "web_url";
  @SerializedName(SERIALIZED_NAME_WEB_URL)
  private String webUrl;

  public static final String SERIALIZED_NAME_WORD_COUNT = "word_count";
  @SerializedName(SERIALIZED_NAME_WORD_COUNT)
  private String wordCount;

  public Doc() {
  }

  public Doc id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Doc _abstract(String _abstract) {
    this._abstract = _abstract;
    return this;
  }

  /**
   * Get _abstract
   * @return _abstract
   */
  @javax.annotation.Nullable
  public String getAbstract() {
    return _abstract;
  }

  public void setAbstract(String _abstract) {
    this._abstract = _abstract;
  }


  public Doc blog(List<Object> blog) {
    this.blog = blog;
    return this;
  }

  public Doc addBlogItem(Object blogItem) {
    if (this.blog == null) {
      this.blog = new ArrayList<>();
    }
    this.blog.add(blogItem);
    return this;
  }

  /**
   * Get blog
   * @return blog
   */
  @javax.annotation.Nullable
  public List<Object> getBlog() {
    return blog;
  }

  public void setBlog(List<Object> blog) {
    this.blog = blog;
  }


  public Doc byline(DocByline byline) {
    this.byline = byline;
    return this;
  }

  /**
   * Get byline
   * @return byline
   */
  @javax.annotation.Nullable
  public DocByline getByline() {
    return byline;
  }

  public void setByline(DocByline byline) {
    this.byline = byline;
  }


  public Doc documentType(String documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * Get documentType
   * @return documentType
   */
  @javax.annotation.Nullable
  public String getDocumentType() {
    return documentType;
  }

  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public Doc headline(DocHeadline headline) {
    this.headline = headline;
    return this;
  }

  /**
   * Get headline
   * @return headline
   */
  @javax.annotation.Nullable
  public DocHeadline getHeadline() {
    return headline;
  }

  public void setHeadline(DocHeadline headline) {
    this.headline = headline;
  }


  public Doc keywords(DocKeywords keywords) {
    this.keywords = keywords;
    return this;
  }

  /**
   * Get keywords
   * @return keywords
   */
  @javax.annotation.Nullable
  public DocKeywords getKeywords() {
    return keywords;
  }

  public void setKeywords(DocKeywords keywords) {
    this.keywords = keywords;
  }


  public Doc leadParagraph(String leadParagraph) {
    this.leadParagraph = leadParagraph;
    return this;
  }

  /**
   * Get leadParagraph
   * @return leadParagraph
   */
  @javax.annotation.Nullable
  public String getLeadParagraph() {
    return leadParagraph;
  }

  public void setLeadParagraph(String leadParagraph) {
    this.leadParagraph = leadParagraph;
  }


  public Doc multimedia(List<DocMultimediaInner> multimedia) {
    this.multimedia = multimedia;
    return this;
  }

  public Doc addMultimediaItem(DocMultimediaInner multimediaItem) {
    if (this.multimedia == null) {
      this.multimedia = new ArrayList<>();
    }
    this.multimedia.add(multimediaItem);
    return this;
  }

  /**
   * Get multimedia
   * @return multimedia
   */
  @javax.annotation.Nullable
  public List<DocMultimediaInner> getMultimedia() {
    return multimedia;
  }

  public void setMultimedia(List<DocMultimediaInner> multimedia) {
    this.multimedia = multimedia;
  }


  public Doc newsDesk(String newsDesk) {
    this.newsDesk = newsDesk;
    return this;
  }

  /**
   * Get newsDesk
   * @return newsDesk
   */
  @javax.annotation.Nullable
  public String getNewsDesk() {
    return newsDesk;
  }

  public void setNewsDesk(String newsDesk) {
    this.newsDesk = newsDesk;
  }


  public Doc printPage(String printPage) {
    this.printPage = printPage;
    return this;
  }

  /**
   * Get printPage
   * @return printPage
   */
  @javax.annotation.Nullable
  public String getPrintPage() {
    return printPage;
  }

  public void setPrintPage(String printPage) {
    this.printPage = printPage;
  }


  public Doc pubDate(String pubDate) {
    this.pubDate = pubDate;
    return this;
  }

  /**
   * Get pubDate
   * @return pubDate
   */
  @javax.annotation.Nullable
  public String getPubDate() {
    return pubDate;
  }

  public void setPubDate(String pubDate) {
    this.pubDate = pubDate;
  }


  public Doc sectionName(String sectionName) {
    this.sectionName = sectionName;
    return this;
  }

  /**
   * Get sectionName
   * @return sectionName
   */
  @javax.annotation.Nullable
  public String getSectionName() {
    return sectionName;
  }

  public void setSectionName(String sectionName) {
    this.sectionName = sectionName;
  }


  public Doc slideshowCredits(String slideshowCredits) {
    this.slideshowCredits = slideshowCredits;
    return this;
  }

  /**
   * Get slideshowCredits
   * @return slideshowCredits
   */
  @javax.annotation.Nullable
  public String getSlideshowCredits() {
    return slideshowCredits;
  }

  public void setSlideshowCredits(String slideshowCredits) {
    this.slideshowCredits = slideshowCredits;
  }


  public Doc snippet(String snippet) {
    this.snippet = snippet;
    return this;
  }

  /**
   * Get snippet
   * @return snippet
   */
  @javax.annotation.Nullable
  public String getSnippet() {
    return snippet;
  }

  public void setSnippet(String snippet) {
    this.snippet = snippet;
  }


  public Doc source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public Doc subsectionName(String subsectionName) {
    this.subsectionName = subsectionName;
    return this;
  }

  /**
   * Get subsectionName
   * @return subsectionName
   */
  @javax.annotation.Nullable
  public String getSubsectionName() {
    return subsectionName;
  }

  public void setSubsectionName(String subsectionName) {
    this.subsectionName = subsectionName;
  }


  public Doc typeOfMaterial(String typeOfMaterial) {
    this.typeOfMaterial = typeOfMaterial;
    return this;
  }

  /**
   * Get typeOfMaterial
   * @return typeOfMaterial
   */
  @javax.annotation.Nullable
  public String getTypeOfMaterial() {
    return typeOfMaterial;
  }

  public void setTypeOfMaterial(String typeOfMaterial) {
    this.typeOfMaterial = typeOfMaterial;
  }


  public Doc webUrl(String webUrl) {
    this.webUrl = webUrl;
    return this;
  }

  /**
   * Get webUrl
   * @return webUrl
   */
  @javax.annotation.Nullable
  public String getWebUrl() {
    return webUrl;
  }

  public void setWebUrl(String webUrl) {
    this.webUrl = webUrl;
  }


  public Doc wordCount(String wordCount) {
    this.wordCount = wordCount;
    return this;
  }

  /**
   * Get wordCount
   * @return wordCount
   */
  @javax.annotation.Nullable
  public String getWordCount() {
    return wordCount;
  }

  public void setWordCount(String wordCount) {
    this.wordCount = wordCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Doc doc = (Doc) o;
    return Objects.equals(this.id, doc.id) &&
        Objects.equals(this._abstract, doc._abstract) &&
        Objects.equals(this.blog, doc.blog) &&
        Objects.equals(this.byline, doc.byline) &&
        Objects.equals(this.documentType, doc.documentType) &&
        Objects.equals(this.headline, doc.headline) &&
        Objects.equals(this.keywords, doc.keywords) &&
        Objects.equals(this.leadParagraph, doc.leadParagraph) &&
        Objects.equals(this.multimedia, doc.multimedia) &&
        Objects.equals(this.newsDesk, doc.newsDesk) &&
        Objects.equals(this.printPage, doc.printPage) &&
        Objects.equals(this.pubDate, doc.pubDate) &&
        Objects.equals(this.sectionName, doc.sectionName) &&
        Objects.equals(this.slideshowCredits, doc.slideshowCredits) &&
        Objects.equals(this.snippet, doc.snippet) &&
        Objects.equals(this.source, doc.source) &&
        Objects.equals(this.subsectionName, doc.subsectionName) &&
        Objects.equals(this.typeOfMaterial, doc.typeOfMaterial) &&
        Objects.equals(this.webUrl, doc.webUrl) &&
        Objects.equals(this.wordCount, doc.wordCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, _abstract, blog, byline, documentType, headline, keywords, leadParagraph, multimedia, newsDesk, printPage, pubDate, sectionName, slideshowCredits, snippet, source, subsectionName, typeOfMaterial, webUrl, wordCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Doc {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _abstract: ").append(toIndentedString(_abstract)).append("\n");
    sb.append("    blog: ").append(toIndentedString(blog)).append("\n");
    sb.append("    byline: ").append(toIndentedString(byline)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    leadParagraph: ").append(toIndentedString(leadParagraph)).append("\n");
    sb.append("    multimedia: ").append(toIndentedString(multimedia)).append("\n");
    sb.append("    newsDesk: ").append(toIndentedString(newsDesk)).append("\n");
    sb.append("    printPage: ").append(toIndentedString(printPage)).append("\n");
    sb.append("    pubDate: ").append(toIndentedString(pubDate)).append("\n");
    sb.append("    sectionName: ").append(toIndentedString(sectionName)).append("\n");
    sb.append("    slideshowCredits: ").append(toIndentedString(slideshowCredits)).append("\n");
    sb.append("    snippet: ").append(toIndentedString(snippet)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    subsectionName: ").append(toIndentedString(subsectionName)).append("\n");
    sb.append("    typeOfMaterial: ").append(toIndentedString(typeOfMaterial)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("    wordCount: ").append(toIndentedString(wordCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("abstract");
    openapiFields.add("blog");
    openapiFields.add("byline");
    openapiFields.add("document_type");
    openapiFields.add("headline");
    openapiFields.add("keywords");
    openapiFields.add("lead_paragraph");
    openapiFields.add("multimedia");
    openapiFields.add("news_desk");
    openapiFields.add("print_page");
    openapiFields.add("pub_date");
    openapiFields.add("section_name");
    openapiFields.add("slideshow_credits");
    openapiFields.add("snippet");
    openapiFields.add("source");
    openapiFields.add("subsection_name");
    openapiFields.add("type_of_material");
    openapiFields.add("web_url");
    openapiFields.add("word_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Doc
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Doc.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Doc is not found in the empty JSON string", Doc.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Doc.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Doc` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("abstract") != null && !jsonObj.get("abstract").isJsonNull()) && !jsonObj.get("abstract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abstract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abstract").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blog") != null && !jsonObj.get("blog").isJsonNull() && !jsonObj.get("blog").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blog` to be an array in the JSON string but got `%s`", jsonObj.get("blog").toString()));
      }
      // validate the optional field `byline`
      if (jsonObj.get("byline") != null && !jsonObj.get("byline").isJsonNull()) {
        DocByline.validateJsonElement(jsonObj.get("byline"));
      }
      if ((jsonObj.get("document_type") != null && !jsonObj.get("document_type").isJsonNull()) && !jsonObj.get("document_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_type").toString()));
      }
      // validate the optional field `headline`
      if (jsonObj.get("headline") != null && !jsonObj.get("headline").isJsonNull()) {
        DocHeadline.validateJsonElement(jsonObj.get("headline"));
      }
      // validate the optional field `keywords`
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull()) {
        DocKeywords.validateJsonElement(jsonObj.get("keywords"));
      }
      if ((jsonObj.get("lead_paragraph") != null && !jsonObj.get("lead_paragraph").isJsonNull()) && !jsonObj.get("lead_paragraph").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lead_paragraph` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lead_paragraph").toString()));
      }
      if (jsonObj.get("multimedia") != null && !jsonObj.get("multimedia").isJsonNull()) {
        JsonArray jsonArraymultimedia = jsonObj.getAsJsonArray("multimedia");
        if (jsonArraymultimedia != null) {
          // ensure the json data is an array
          if (!jsonObj.get("multimedia").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `multimedia` to be an array in the JSON string but got `%s`", jsonObj.get("multimedia").toString()));
          }

          // validate the optional field `multimedia` (array)
          for (int i = 0; i < jsonArraymultimedia.size(); i++) {
            DocMultimediaInner.validateJsonElement(jsonArraymultimedia.get(i));
          };
        }
      }
      if ((jsonObj.get("news_desk") != null && !jsonObj.get("news_desk").isJsonNull()) && !jsonObj.get("news_desk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `news_desk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("news_desk").toString()));
      }
      if ((jsonObj.get("print_page") != null && !jsonObj.get("print_page").isJsonNull()) && !jsonObj.get("print_page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `print_page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("print_page").toString()));
      }
      if ((jsonObj.get("pub_date") != null && !jsonObj.get("pub_date").isJsonNull()) && !jsonObj.get("pub_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pub_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pub_date").toString()));
      }
      if ((jsonObj.get("section_name") != null && !jsonObj.get("section_name").isJsonNull()) && !jsonObj.get("section_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `section_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("section_name").toString()));
      }
      if ((jsonObj.get("slideshow_credits") != null && !jsonObj.get("slideshow_credits").isJsonNull()) && !jsonObj.get("slideshow_credits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slideshow_credits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slideshow_credits").toString()));
      }
      if ((jsonObj.get("snippet") != null && !jsonObj.get("snippet").isJsonNull()) && !jsonObj.get("snippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snippet").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("subsection_name") != null && !jsonObj.get("subsection_name").isJsonNull()) && !jsonObj.get("subsection_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subsection_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subsection_name").toString()));
      }
      if ((jsonObj.get("type_of_material") != null && !jsonObj.get("type_of_material").isJsonNull()) && !jsonObj.get("type_of_material").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_of_material` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_of_material").toString()));
      }
      if ((jsonObj.get("web_url") != null && !jsonObj.get("web_url").isJsonNull()) && !jsonObj.get("web_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `web_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("web_url").toString()));
      }
      if ((jsonObj.get("word_count") != null && !jsonObj.get("word_count").isJsonNull()) && !jsonObj.get("word_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `word_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("word_count").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Doc.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Doc' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Doc> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Doc.class));

       return (TypeAdapter<T>) new TypeAdapter<Doc>() {
           @Override
           public void write(JsonWriter out, Doc value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Doc read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Doc given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Doc
   * @throws IOException if the JSON string is invalid with respect to Doc
   */
  public static Doc fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Doc.class);
  }

  /**
   * Convert an instance of Doc to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

