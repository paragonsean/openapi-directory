/*
 * Article Search API
 * With the Article Search API, you can search New York Times articles from Sept. 18, 1851 to today, retrieving headlines, abstracts, lead paragraphs, links to associated multimedia and other article metadata.     Note: In URI examples and field names, italics indicate placeholders for variables or values. Brackets [ ] indicate optional items. Parentheses ( ) are not a convention â€” when URIs include parentheses, interpret them literally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocHeadline
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:39.499896-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocHeadline {
  public static final String SERIALIZED_NAME_KICKER = "kicker";
  @SerializedName(SERIALIZED_NAME_KICKER)
  private String kicker;

  public static final String SERIALIZED_NAME_MAIN = "main";
  @SerializedName(SERIALIZED_NAME_MAIN)
  private String main;

  public DocHeadline() {
  }

  public DocHeadline kicker(String kicker) {
    this.kicker = kicker;
    return this;
  }

  /**
   * Get kicker
   * @return kicker
   */
  @javax.annotation.Nullable
  public String getKicker() {
    return kicker;
  }

  public void setKicker(String kicker) {
    this.kicker = kicker;
  }


  public DocHeadline main(String main) {
    this.main = main;
    return this;
  }

  /**
   * Get main
   * @return main
   */
  @javax.annotation.Nullable
  public String getMain() {
    return main;
  }

  public void setMain(String main) {
    this.main = main;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocHeadline docHeadline = (DocHeadline) o;
    return Objects.equals(this.kicker, docHeadline.kicker) &&
        Objects.equals(this.main, docHeadline.main);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kicker, main);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocHeadline {\n");
    sb.append("    kicker: ").append(toIndentedString(kicker)).append("\n");
    sb.append("    main: ").append(toIndentedString(main)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kicker");
    openapiFields.add("main");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocHeadline
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocHeadline.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocHeadline is not found in the empty JSON string", DocHeadline.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocHeadline.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocHeadline` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kicker") != null && !jsonObj.get("kicker").isJsonNull()) && !jsonObj.get("kicker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kicker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kicker").toString()));
      }
      if ((jsonObj.get("main") != null && !jsonObj.get("main").isJsonNull()) && !jsonObj.get("main").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocHeadline.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocHeadline' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocHeadline> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocHeadline.class));

       return (TypeAdapter<T>) new TypeAdapter<DocHeadline>() {
           @Override
           public void write(JsonWriter out, DocHeadline value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocHeadline read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocHeadline given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocHeadline
   * @throws IOException if the JSON string is invalid with respect to DocHeadline
   */
  public static DocHeadline fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocHeadline.class);
  }

  /**
   * Convert an instance of DocHeadline to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

