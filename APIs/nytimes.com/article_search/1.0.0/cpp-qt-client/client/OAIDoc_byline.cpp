/**
 * Article Search API
 * With the Article Search API, you can search New York Times articles from Sept. 18, 1851 to today, retrieving headlines, abstracts, lead paragraphs, links to associated multimedia and other article metadata.     Note: In URI examples and field names, italics indicate placeholders for variables or values. Brackets [ ] indicate optional items. Parentheses ( ) are not a convention â€” when URIs include parentheses, interpret them literally.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDoc_byline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDoc_byline::OAIDoc_byline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDoc_byline::OAIDoc_byline() {
    this->initializeModel();
}

OAIDoc_byline::~OAIDoc_byline() {}

void OAIDoc_byline::initializeModel() {

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_original_isSet = false;
    m_original_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;
}

void OAIDoc_byline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDoc_byline::fromJsonObject(QJsonObject json) {

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_original_isValid = ::OpenAPI::fromJsonValue(m_original, json[QString("original")]);
    m_original_isSet = !json[QString("original")].isNull() && m_original_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;
}

QString OAIDoc_byline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDoc_byline::asJsonObject() const {
    QJsonObject obj;
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_original_isSet) {
        obj.insert(QString("original"), ::OpenAPI::toJsonValue(m_original));
    }
    if (m_person.size() > 0) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    return obj;
}

QString OAIDoc_byline::getOrganization() const {
    return m_organization;
}
void OAIDoc_byline::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIDoc_byline::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIDoc_byline::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIDoc_byline::getOriginal() const {
    return m_original;
}
void OAIDoc_byline::setOriginal(const QString &original) {
    m_original = original;
    m_original_isSet = true;
}

bool OAIDoc_byline::is_original_Set() const{
    return m_original_isSet;
}

bool OAIDoc_byline::is_original_Valid() const{
    return m_original_isValid;
}

QList<QJsonValue> OAIDoc_byline::getPerson() const {
    return m_person;
}
void OAIDoc_byline::setPerson(const QList<QJsonValue> &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAIDoc_byline::is_person_Set() const{
    return m_person_isSet;
}

bool OAIDoc_byline::is_person_Valid() const{
    return m_person_isValid;
}

bool OAIDoc_byline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDoc_byline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
