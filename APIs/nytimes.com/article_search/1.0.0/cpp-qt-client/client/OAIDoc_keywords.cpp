/**
 * Article Search API
 * With the Article Search API, you can search New York Times articles from Sept. 18, 1851 to today, retrieving headlines, abstracts, lead paragraphs, links to associated multimedia and other article metadata.     Note: In URI examples and field names, italics indicate placeholders for variables or values. Brackets [ ] indicate optional items. Parentheses ( ) are not a convention â€” when URIs include parentheses, interpret them literally.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDoc_keywords.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDoc_keywords::OAIDoc_keywords(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDoc_keywords::OAIDoc_keywords() {
    this->initializeModel();
}

OAIDoc_keywords::~OAIDoc_keywords() {}

void OAIDoc_keywords::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDoc_keywords::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDoc_keywords::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDoc_keywords::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDoc_keywords::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIDoc_keywords::getName() const {
    return m_name;
}
void OAIDoc_keywords::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDoc_keywords::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDoc_keywords::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDoc_keywords::getRank() const {
    return m_rank;
}
void OAIDoc_keywords::setRank(const QString &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIDoc_keywords::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIDoc_keywords::is_rank_Valid() const{
    return m_rank_isValid;
}

QString OAIDoc_keywords::getValue() const {
    return m_value;
}
void OAIDoc_keywords::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDoc_keywords::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDoc_keywords::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDoc_keywords::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDoc_keywords::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
