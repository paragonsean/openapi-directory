/**
 * Article Search API
 * With the Article Search API, you can search New York Times articles from Sept. 18, 1851 to today, retrieving headlines, abstracts, lead paragraphs, links to associated multimedia and other article metadata.     Note: In URI examples and field names, italics indicate placeholders for variables or values. Brackets [ ] indicate optional items. Parentheses ( ) are not a convention â€” when URIs include parentheses, interpret them literally.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDoc_multimedia_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDoc_multimedia_inner::OAIDoc_multimedia_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDoc_multimedia_inner::OAIDoc_multimedia_inner() {
    this->initializeModel();
}

OAIDoc_multimedia_inner::~OAIDoc_multimedia_inner() {}

void OAIDoc_multimedia_inner::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIDoc_multimedia_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDoc_multimedia_inner::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIDoc_multimedia_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDoc_multimedia_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIDoc_multimedia_inner::getCaption() const {
    return m_caption;
}
void OAIDoc_multimedia_inner::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIDoc_multimedia_inner::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIDoc_multimedia_inner::is_caption_Valid() const{
    return m_caption_isValid;
}

QString OAIDoc_multimedia_inner::getCopyright() const {
    return m_copyright;
}
void OAIDoc_multimedia_inner::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAIDoc_multimedia_inner::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAIDoc_multimedia_inner::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QString OAIDoc_multimedia_inner::getFormat() const {
    return m_format;
}
void OAIDoc_multimedia_inner::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIDoc_multimedia_inner::is_format_Set() const{
    return m_format_isSet;
}

bool OAIDoc_multimedia_inner::is_format_Valid() const{
    return m_format_isValid;
}

qint32 OAIDoc_multimedia_inner::getHeight() const {
    return m_height;
}
void OAIDoc_multimedia_inner::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIDoc_multimedia_inner::is_height_Set() const{
    return m_height_isSet;
}

bool OAIDoc_multimedia_inner::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIDoc_multimedia_inner::getSubtype() const {
    return m_subtype;
}
void OAIDoc_multimedia_inner::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIDoc_multimedia_inner::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIDoc_multimedia_inner::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QString OAIDoc_multimedia_inner::getType() const {
    return m_type;
}
void OAIDoc_multimedia_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDoc_multimedia_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDoc_multimedia_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDoc_multimedia_inner::getUrl() const {
    return m_url;
}
void OAIDoc_multimedia_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDoc_multimedia_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDoc_multimedia_inner::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIDoc_multimedia_inner::getWidth() const {
    return m_width;
}
void OAIDoc_multimedia_inner::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIDoc_multimedia_inner::is_width_Set() const{
    return m_width_isSet;
}

bool OAIDoc_multimedia_inner::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIDoc_multimedia_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDoc_multimedia_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
