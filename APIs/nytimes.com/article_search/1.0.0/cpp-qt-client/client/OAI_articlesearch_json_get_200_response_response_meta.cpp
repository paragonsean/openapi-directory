/**
 * Article Search API
 * With the Article Search API, you can search New York Times articles from Sept. 18, 1851 to today, retrieving headlines, abstracts, lead paragraphs, links to associated multimedia and other article metadata.     Note: In URI examples and field names, italics indicate placeholders for variables or values. Brackets [ ] indicate optional items. Parentheses ( ) are not a convention â€” when URIs include parentheses, interpret them literally.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_articlesearch_json_get_200_response_response_meta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_articlesearch_json_get_200_response_response_meta::OAI_articlesearch_json_get_200_response_response_meta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_articlesearch_json_get_200_response_response_meta::OAI_articlesearch_json_get_200_response_response_meta() {
    this->initializeModel();
}

OAI_articlesearch_json_get_200_response_response_meta::~OAI_articlesearch_json_get_200_response_response_meta() {}

void OAI_articlesearch_json_get_200_response_response_meta::initializeModel() {

    m_hits_isSet = false;
    m_hits_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAI_articlesearch_json_get_200_response_response_meta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_articlesearch_json_get_200_response_response_meta::fromJsonObject(QJsonObject json) {

    m_hits_isValid = ::OpenAPI::fromJsonValue(m_hits, json[QString("hits")]);
    m_hits_isSet = !json[QString("hits")].isNull() && m_hits_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAI_articlesearch_json_get_200_response_response_meta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_articlesearch_json_get_200_response_response_meta::asJsonObject() const {
    QJsonObject obj;
    if (m_hits_isSet) {
        obj.insert(QString("hits"), ::OpenAPI::toJsonValue(m_hits));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

qint32 OAI_articlesearch_json_get_200_response_response_meta::getHits() const {
    return m_hits;
}
void OAI_articlesearch_json_get_200_response_response_meta::setHits(const qint32 &hits) {
    m_hits = hits;
    m_hits_isSet = true;
}

bool OAI_articlesearch_json_get_200_response_response_meta::is_hits_Set() const{
    return m_hits_isSet;
}

bool OAI_articlesearch_json_get_200_response_response_meta::is_hits_Valid() const{
    return m_hits_isValid;
}

qint32 OAI_articlesearch_json_get_200_response_response_meta::getOffset() const {
    return m_offset;
}
void OAI_articlesearch_json_get_200_response_response_meta::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAI_articlesearch_json_get_200_response_response_meta::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAI_articlesearch_json_get_200_response_response_meta::is_offset_Valid() const{
    return m_offset_isValid;
}

qint32 OAI_articlesearch_json_get_200_response_response_meta::getTime() const {
    return m_time;
}
void OAI_articlesearch_json_get_200_response_response_meta::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAI_articlesearch_json_get_200_response_response_meta::is_time_Set() const{
    return m_time_isSet;
}

bool OAI_articlesearch_json_get_200_response_response_meta::is_time_Valid() const{
    return m_time_isValid;
}

bool OAI_articlesearch_json_get_200_response_response_meta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_articlesearch_json_get_200_response_response_meta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
