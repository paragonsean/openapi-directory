/**
 * Books API
 * The Books API provides information about book reviews and The New York Times bestsellers lists.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGET_lists_overview_format_200_response_results_lists_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGET_lists_overview_format_200_response_results_lists_inner::OAIGET_lists_overview_format_200_response_results_lists_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGET_lists_overview_format_200_response_results_lists_inner::OAIGET_lists_overview_format_200_response_results_lists_inner() {
    this->initializeModel();
}

OAIGET_lists_overview_format_200_response_results_lists_inner::~OAIGET_lists_overview_format_200_response_results_lists_inner() {}

void OAIGET_lists_overview_format_200_response_results_lists_inner::initializeModel() {

    m_books_isSet = false;
    m_books_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_list_id_isSet = false;
    m_list_id_isValid = false;

    m_list_image_isSet = false;
    m_list_image_isValid = false;

    m_list_name_isSet = false;
    m_list_name_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIGET_lists_overview_format_200_response_results_lists_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGET_lists_overview_format_200_response_results_lists_inner::fromJsonObject(QJsonObject json) {

    m_books_isValid = ::OpenAPI::fromJsonValue(m_books, json[QString("books")]);
    m_books_isSet = !json[QString("books")].isNull() && m_books_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_list_id_isValid = ::OpenAPI::fromJsonValue(m_list_id, json[QString("list_id")]);
    m_list_id_isSet = !json[QString("list_id")].isNull() && m_list_id_isValid;

    m_list_image_isValid = ::OpenAPI::fromJsonValue(m_list_image, json[QString("list_image")]);
    m_list_image_isSet = !json[QString("list_image")].isNull() && m_list_image_isValid;

    m_list_name_isValid = ::OpenAPI::fromJsonValue(m_list_name, json[QString("list_name")]);
    m_list_name_isSet = !json[QString("list_name")].isNull() && m_list_name_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIGET_lists_overview_format_200_response_results_lists_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGET_lists_overview_format_200_response_results_lists_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_books.size() > 0) {
        obj.insert(QString("books"), ::OpenAPI::toJsonValue(m_books));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_list_id_isSet) {
        obj.insert(QString("list_id"), ::OpenAPI::toJsonValue(m_list_id));
    }
    if (m_list_image_isSet) {
        obj.insert(QString("list_image"), ::OpenAPI::toJsonValue(m_list_image));
    }
    if (m_list_name_isSet) {
        obj.insert(QString("list_name"), ::OpenAPI::toJsonValue(m_list_name));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QList<OAIGET_lists_overview_format_200_response_results_lists_inner_books_inner> OAIGET_lists_overview_format_200_response_results_lists_inner::getBooks() const {
    return m_books;
}
void OAIGET_lists_overview_format_200_response_results_lists_inner::setBooks(const QList<OAIGET_lists_overview_format_200_response_results_lists_inner_books_inner> &books) {
    m_books = books;
    m_books_isSet = true;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::is_books_Set() const{
    return m_books_isSet;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::is_books_Valid() const{
    return m_books_isValid;
}

QString OAIGET_lists_overview_format_200_response_results_lists_inner::getDisplayName() const {
    return m_display_name;
}
void OAIGET_lists_overview_format_200_response_results_lists_inner::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIGET_lists_overview_format_200_response_results_lists_inner::getListId() const {
    return m_list_id;
}
void OAIGET_lists_overview_format_200_response_results_lists_inner::setListId(const qint32 &list_id) {
    m_list_id = list_id;
    m_list_id_isSet = true;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::is_list_id_Set() const{
    return m_list_id_isSet;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::is_list_id_Valid() const{
    return m_list_id_isValid;
}

QString OAIGET_lists_overview_format_200_response_results_lists_inner::getListImage() const {
    return m_list_image;
}
void OAIGET_lists_overview_format_200_response_results_lists_inner::setListImage(const QString &list_image) {
    m_list_image = list_image;
    m_list_image_isSet = true;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::is_list_image_Set() const{
    return m_list_image_isSet;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::is_list_image_Valid() const{
    return m_list_image_isValid;
}

QString OAIGET_lists_overview_format_200_response_results_lists_inner::getListName() const {
    return m_list_name;
}
void OAIGET_lists_overview_format_200_response_results_lists_inner::setListName(const QString &list_name) {
    m_list_name = list_name;
    m_list_name_isSet = true;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::is_list_name_Set() const{
    return m_list_name_isSet;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::is_list_name_Valid() const{
    return m_list_name_isValid;
}

QString OAIGET_lists_overview_format_200_response_results_lists_inner::getUpdated() const {
    return m_updated;
}
void OAIGET_lists_overview_format_200_response_results_lists_inner::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_books.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGET_lists_overview_format_200_response_results_lists_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
