/**
 * Books API
 * The Books API provides information about book reviews and The New York Times bestsellers lists.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGET_lists_best_sellers_history_json_200_response.h"
#include "OAIGET_lists_date_list_json_200_response.h"
#include "OAIGET_lists_format_200_response.h"
#include "OAIGET_lists_names_format_200_response.h"
#include "OAIGET_lists_overview_format_200_response.h"
#include "OAIGET_reviews_format_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  age_group QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  contributor QString [optional]
    * @param[in]  isbn QString [optional]
    * @param[in]  price QString [optional]
    * @param[in]  publisher QString [optional]
    * @param[in]  title QString [optional]
    */
    virtual void gETListsBestSellersHistoryJson(const ::OpenAPI::OptionalParam<QString> &age_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contributor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &isbn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &price = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &publisher = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  date QString [required]
    * @param[in]  list QString [required]
    * @param[in]  isbn qint32 [optional]
    * @param[in]  list_name QString [optional]
    * @param[in]  published_date QDateTime [optional]
    * @param[in]  bestsellers_date QString [optional]
    * @param[in]  weeks_on_list qint32 [optional]
    * @param[in]  rank QString [optional]
    * @param[in]  rank_last_week qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void gETListsDateListJson(const QString &date, const QString &list, const ::OpenAPI::OptionalParam<qint32> &isbn = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &list_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &published_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &bestsellers_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &weeks_on_list = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &rank = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &rank_last_week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  list QString [optional]
    * @param[in]  weeks_on_list qint32 [optional]
    * @param[in]  bestsellers_date QDateTime [optional]
    * @param[in]  date QString [optional]
    * @param[in]  isbn QString [optional]
    * @param[in]  published_date QString [optional]
    * @param[in]  rank qint32 [optional]
    * @param[in]  rank_last_week qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void gETListsFormat(const QString &format, const ::OpenAPI::OptionalParam<QString> &list = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &weeks_on_list = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &bestsellers_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &isbn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &published_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &rank = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rank_last_week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  api_key QString [optional]
    */
    virtual void gETListsNamesFormat(const QString &format, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  published_date QString [optional]
    * @param[in]  api_key QString [optional]
    */
    virtual void gETListsOverviewFormat(const QString &format, const ::OpenAPI::OptionalParam<QString> &published_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  isbn qint32 [optional]
    * @param[in]  title QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  api_key QString [optional]
    */
    virtual void gETReviewsFormat(const QString &format, const ::OpenAPI::OptionalParam<qint32> &isbn = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETListsBestSellersHistoryJsonCallback(OAIHttpRequestWorker *worker);
    void gETListsDateListJsonCallback(OAIHttpRequestWorker *worker);
    void gETListsFormatCallback(OAIHttpRequestWorker *worker);
    void gETListsNamesFormatCallback(OAIHttpRequestWorker *worker);
    void gETListsOverviewFormatCallback(OAIHttpRequestWorker *worker);
    void gETReviewsFormatCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETListsBestSellersHistoryJsonSignal(OAIGET_lists_best_sellers_history_json_200_response summary);
    void gETListsDateListJsonSignal(OAIGET_lists_date_list_json_200_response summary);
    void gETListsFormatSignal(OAIGET_lists_format_200_response summary);
    void gETListsNamesFormatSignal(OAIGET_lists_names_format_200_response summary);
    void gETListsOverviewFormatSignal(OAIGET_lists_overview_format_200_response summary);
    void gETReviewsFormatSignal(OAIGET_reviews_format_200_response summary);


    void gETListsBestSellersHistoryJsonSignalFull(OAIHttpRequestWorker *worker, OAIGET_lists_best_sellers_history_json_200_response summary);
    void gETListsDateListJsonSignalFull(OAIHttpRequestWorker *worker, OAIGET_lists_date_list_json_200_response summary);
    void gETListsFormatSignalFull(OAIHttpRequestWorker *worker, OAIGET_lists_format_200_response summary);
    void gETListsNamesFormatSignalFull(OAIHttpRequestWorker *worker, OAIGET_lists_names_format_200_response summary);
    void gETListsOverviewFormatSignalFull(OAIHttpRequestWorker *worker, OAIGET_lists_overview_format_200_response summary);
    void gETReviewsFormatSignalFull(OAIHttpRequestWorker *worker, OAIGET_reviews_format_200_response summary);

    Q_DECL_DEPRECATED_X("Use gETListsBestSellersHistoryJsonSignalError() instead")
    void gETListsBestSellersHistoryJsonSignalE(OAIGET_lists_best_sellers_history_json_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListsBestSellersHistoryJsonSignalError(OAIGET_lists_best_sellers_history_json_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListsDateListJsonSignalError() instead")
    void gETListsDateListJsonSignalE(OAIGET_lists_date_list_json_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListsDateListJsonSignalError(OAIGET_lists_date_list_json_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListsFormatSignalError() instead")
    void gETListsFormatSignalE(OAIGET_lists_format_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListsFormatSignalError(OAIGET_lists_format_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListsNamesFormatSignalError() instead")
    void gETListsNamesFormatSignalE(OAIGET_lists_names_format_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListsNamesFormatSignalError(OAIGET_lists_names_format_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListsOverviewFormatSignalError() instead")
    void gETListsOverviewFormatSignalE(OAIGET_lists_overview_format_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListsOverviewFormatSignalError(OAIGET_lists_overview_format_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETReviewsFormatSignalError() instead")
    void gETReviewsFormatSignalE(OAIGET_reviews_format_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETReviewsFormatSignalError(OAIGET_reviews_format_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETListsBestSellersHistoryJsonSignalErrorFull() instead")
    void gETListsBestSellersHistoryJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListsBestSellersHistoryJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListsDateListJsonSignalErrorFull() instead")
    void gETListsDateListJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListsDateListJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListsFormatSignalErrorFull() instead")
    void gETListsFormatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListsFormatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListsNamesFormatSignalErrorFull() instead")
    void gETListsNamesFormatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListsNamesFormatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListsOverviewFormatSignalErrorFull() instead")
    void gETListsOverviewFormatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListsOverviewFormatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETReviewsFormatSignalErrorFull() instead")
    void gETReviewsFormatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETReviewsFormatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
