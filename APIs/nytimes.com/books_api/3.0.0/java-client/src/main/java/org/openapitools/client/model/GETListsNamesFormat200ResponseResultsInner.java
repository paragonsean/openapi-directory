/*
 * Books API
 * The Books API provides information about book reviews and The New York Times bestsellers lists.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GETListsNamesFormat200ResponseResultsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:36.772134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GETListsNamesFormat200ResponseResultsInner {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LIST_NAME = "list_name";
  @SerializedName(SERIALIZED_NAME_LIST_NAME)
  private String listName;

  public static final String SERIALIZED_NAME_LIST_NAME_ENCODED = "list_name_encoded";
  @SerializedName(SERIALIZED_NAME_LIST_NAME_ENCODED)
  private String listNameEncoded;

  public static final String SERIALIZED_NAME_NEWEST_PUBLISHED_DATE = "newest_published_date";
  @SerializedName(SERIALIZED_NAME_NEWEST_PUBLISHED_DATE)
  private String newestPublishedDate;

  public static final String SERIALIZED_NAME_OLDEST_PUBLISHED_DATE = "oldest_published_date";
  @SerializedName(SERIALIZED_NAME_OLDEST_PUBLISHED_DATE)
  private String oldestPublishedDate;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public GETListsNamesFormat200ResponseResultsInner() {
  }

  public GETListsNamesFormat200ResponseResultsInner displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GETListsNamesFormat200ResponseResultsInner listName(String listName) {
    this.listName = listName;
    return this;
  }

  /**
   * Get listName
   * @return listName
   */
  @javax.annotation.Nullable
  public String getListName() {
    return listName;
  }

  public void setListName(String listName) {
    this.listName = listName;
  }


  public GETListsNamesFormat200ResponseResultsInner listNameEncoded(String listNameEncoded) {
    this.listNameEncoded = listNameEncoded;
    return this;
  }

  /**
   * Get listNameEncoded
   * @return listNameEncoded
   */
  @javax.annotation.Nullable
  public String getListNameEncoded() {
    return listNameEncoded;
  }

  public void setListNameEncoded(String listNameEncoded) {
    this.listNameEncoded = listNameEncoded;
  }


  public GETListsNamesFormat200ResponseResultsInner newestPublishedDate(String newestPublishedDate) {
    this.newestPublishedDate = newestPublishedDate;
    return this;
  }

  /**
   * Get newestPublishedDate
   * @return newestPublishedDate
   */
  @javax.annotation.Nullable
  public String getNewestPublishedDate() {
    return newestPublishedDate;
  }

  public void setNewestPublishedDate(String newestPublishedDate) {
    this.newestPublishedDate = newestPublishedDate;
  }


  public GETListsNamesFormat200ResponseResultsInner oldestPublishedDate(String oldestPublishedDate) {
    this.oldestPublishedDate = oldestPublishedDate;
    return this;
  }

  /**
   * Get oldestPublishedDate
   * @return oldestPublishedDate
   */
  @javax.annotation.Nullable
  public String getOldestPublishedDate() {
    return oldestPublishedDate;
  }

  public void setOldestPublishedDate(String oldestPublishedDate) {
    this.oldestPublishedDate = oldestPublishedDate;
  }


  public GETListsNamesFormat200ResponseResultsInner updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GETListsNamesFormat200ResponseResultsInner geTListsNamesFormat200ResponseResultsInner = (GETListsNamesFormat200ResponseResultsInner) o;
    return Objects.equals(this.displayName, geTListsNamesFormat200ResponseResultsInner.displayName) &&
        Objects.equals(this.listName, geTListsNamesFormat200ResponseResultsInner.listName) &&
        Objects.equals(this.listNameEncoded, geTListsNamesFormat200ResponseResultsInner.listNameEncoded) &&
        Objects.equals(this.newestPublishedDate, geTListsNamesFormat200ResponseResultsInner.newestPublishedDate) &&
        Objects.equals(this.oldestPublishedDate, geTListsNamesFormat200ResponseResultsInner.oldestPublishedDate) &&
        Objects.equals(this.updated, geTListsNamesFormat200ResponseResultsInner.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, listName, listNameEncoded, newestPublishedDate, oldestPublishedDate, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GETListsNamesFormat200ResponseResultsInner {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    listName: ").append(toIndentedString(listName)).append("\n");
    sb.append("    listNameEncoded: ").append(toIndentedString(listNameEncoded)).append("\n");
    sb.append("    newestPublishedDate: ").append(toIndentedString(newestPublishedDate)).append("\n");
    sb.append("    oldestPublishedDate: ").append(toIndentedString(oldestPublishedDate)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("display_name");
    openapiFields.add("list_name");
    openapiFields.add("list_name_encoded");
    openapiFields.add("newest_published_date");
    openapiFields.add("oldest_published_date");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GETListsNamesFormat200ResponseResultsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GETListsNamesFormat200ResponseResultsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GETListsNamesFormat200ResponseResultsInner is not found in the empty JSON string", GETListsNamesFormat200ResponseResultsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GETListsNamesFormat200ResponseResultsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GETListsNamesFormat200ResponseResultsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("list_name") != null && !jsonObj.get("list_name").isJsonNull()) && !jsonObj.get("list_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_name").toString()));
      }
      if ((jsonObj.get("list_name_encoded") != null && !jsonObj.get("list_name_encoded").isJsonNull()) && !jsonObj.get("list_name_encoded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_name_encoded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_name_encoded").toString()));
      }
      if ((jsonObj.get("newest_published_date") != null && !jsonObj.get("newest_published_date").isJsonNull()) && !jsonObj.get("newest_published_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newest_published_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newest_published_date").toString()));
      }
      if ((jsonObj.get("oldest_published_date") != null && !jsonObj.get("oldest_published_date").isJsonNull()) && !jsonObj.get("oldest_published_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldest_published_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldest_published_date").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GETListsNamesFormat200ResponseResultsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GETListsNamesFormat200ResponseResultsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GETListsNamesFormat200ResponseResultsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GETListsNamesFormat200ResponseResultsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GETListsNamesFormat200ResponseResultsInner>() {
           @Override
           public void write(JsonWriter out, GETListsNamesFormat200ResponseResultsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GETListsNamesFormat200ResponseResultsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GETListsNamesFormat200ResponseResultsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GETListsNamesFormat200ResponseResultsInner
   * @throws IOException if the JSON string is invalid with respect to GETListsNamesFormat200ResponseResultsInner
   */
  public static GETListsNamesFormat200ResponseResultsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GETListsNamesFormat200ResponseResultsInner.class);
  }

  /**
   * Convert an instance of GETListsNamesFormat200ResponseResultsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

