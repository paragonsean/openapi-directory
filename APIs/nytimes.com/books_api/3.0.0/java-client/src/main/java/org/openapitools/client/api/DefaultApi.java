/*
 * Books API
 * The Books API provides information about book reviews and The New York Times bestsellers lists.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GETListsBestSellersHistoryJson200Response;
import org.openapitools.client.model.GETListsDateListJson200Response;
import org.openapitools.client.model.GETListsFormat200Response;
import org.openapitools.client.model.GETListsNamesFormat200Response;
import org.openapitools.client.model.GETListsOverviewFormat200Response;
import org.openapitools.client.model.GETReviewsFormat200Response;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETListsBestSellersHistoryJson
     * @param ageGroup The target age group for the best seller. (optional)
     * @param author The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).  When searching the author field, you can specify any combination of first, middle and last names.  When sort-by is set to author, the results will be sorted by author&#39;s first name.  (optional)
     * @param contributor The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).  When searching, you can specify any combination of first, middle and last names of any of the contributors.  When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed.  (optional)
     * @param isbn International Standard Book Number, 10 or 13 digits  A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229). (optional)
     * @param price The publisher&#39;s list price of the best seller, including decimal point (optional)
     * @param publisher The standardized name of the publisher (optional)
     * @param title The title of the best seller  When searching, you can specify a portion of a title or a full title. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListsBestSellersHistoryJsonCall(String ageGroup, String author, String contributor, String isbn, String price, String publisher, String title, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/best-sellers/history.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ageGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("age-group", ageGroup));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (contributor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contributor", contributor));
        }

        if (isbn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isbn", isbn));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        if (publisher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publisher", publisher));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListsBestSellersHistoryJsonValidateBeforeCall(String ageGroup, String author, String contributor, String isbn, String price, String publisher, String title, final ApiCallback _callback) throws ApiException {
        return gETListsBestSellersHistoryJsonCall(ageGroup, author, contributor, isbn, price, publisher, title, _callback);

    }

    /**
     * Best Seller History List
     * 
     * @param ageGroup The target age group for the best seller. (optional)
     * @param author The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).  When searching the author field, you can specify any combination of first, middle and last names.  When sort-by is set to author, the results will be sorted by author&#39;s first name.  (optional)
     * @param contributor The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).  When searching, you can specify any combination of first, middle and last names of any of the contributors.  When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed.  (optional)
     * @param isbn International Standard Book Number, 10 or 13 digits  A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229). (optional)
     * @param price The publisher&#39;s list price of the best seller, including decimal point (optional)
     * @param publisher The standardized name of the publisher (optional)
     * @param title The title of the best seller  When searching, you can specify a portion of a title or a full title. (optional)
     * @return GETListsBestSellersHistoryJson200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GETListsBestSellersHistoryJson200Response gETListsBestSellersHistoryJson(String ageGroup, String author, String contributor, String isbn, String price, String publisher, String title) throws ApiException {
        ApiResponse<GETListsBestSellersHistoryJson200Response> localVarResp = gETListsBestSellersHistoryJsonWithHttpInfo(ageGroup, author, contributor, isbn, price, publisher, title);
        return localVarResp.getData();
    }

    /**
     * Best Seller History List
     * 
     * @param ageGroup The target age group for the best seller. (optional)
     * @param author The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).  When searching the author field, you can specify any combination of first, middle and last names.  When sort-by is set to author, the results will be sorted by author&#39;s first name.  (optional)
     * @param contributor The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).  When searching, you can specify any combination of first, middle and last names of any of the contributors.  When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed.  (optional)
     * @param isbn International Standard Book Number, 10 or 13 digits  A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229). (optional)
     * @param price The publisher&#39;s list price of the best seller, including decimal point (optional)
     * @param publisher The standardized name of the publisher (optional)
     * @param title The title of the best seller  When searching, you can specify a portion of a title or a full title. (optional)
     * @return ApiResponse&lt;GETListsBestSellersHistoryJson200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GETListsBestSellersHistoryJson200Response> gETListsBestSellersHistoryJsonWithHttpInfo(String ageGroup, String author, String contributor, String isbn, String price, String publisher, String title) throws ApiException {
        okhttp3.Call localVarCall = gETListsBestSellersHistoryJsonValidateBeforeCall(ageGroup, author, contributor, isbn, price, publisher, title, null);
        Type localVarReturnType = new TypeToken<GETListsBestSellersHistoryJson200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Best Seller History List (asynchronously)
     * 
     * @param ageGroup The target age group for the best seller. (optional)
     * @param author The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).  When searching the author field, you can specify any combination of first, middle and last names.  When sort-by is set to author, the results will be sorted by author&#39;s first name.  (optional)
     * @param contributor The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).  When searching, you can specify any combination of first, middle and last names of any of the contributors.  When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed.  (optional)
     * @param isbn International Standard Book Number, 10 or 13 digits  A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229). (optional)
     * @param price The publisher&#39;s list price of the best seller, including decimal point (optional)
     * @param publisher The standardized name of the publisher (optional)
     * @param title The title of the best seller  When searching, you can specify a portion of a title or a full title. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListsBestSellersHistoryJsonAsync(String ageGroup, String author, String contributor, String isbn, String price, String publisher, String title, final ApiCallback<GETListsBestSellersHistoryJson200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListsBestSellersHistoryJsonValidateBeforeCall(ageGroup, author, contributor, isbn, price, publisher, title, _callback);
        Type localVarReturnType = new TypeToken<GETListsBestSellersHistoryJson200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListsDateListJson
     * @param date  (required)
     * @param _list Name of the Best Sellers List. You can get the full list from /lists/names.json (required)
     * @param isbn International Standard Book Number, 10 or 13 digits (optional)
     * @param listName The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.) (optional)
     * @param publishedDate YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     * @param bestsellersDate YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
     * @param weeksOnList The number of weeks that the best seller has been on list-name, as of bestsellers-date (optional)
     * @param rank The rank of the best seller on list-name as of bestsellers-date (optional)
     * @param rankLastWeek The rank of the best seller on list-name one week prior to bestsellers-date (optional)
     * @param offset Sets the starting point of the result set (optional)
     * @param sortOrder The default is ASC (ascending). The sort-order parameter is used with the sort-by parameter — for details, see each request type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListsDateListJsonCall(String date, String _list, Integer isbn, String listName, OffsetDateTime publishedDate, String bestsellersDate, Integer weeksOnList, String rank, Integer rankLastWeek, Integer offset, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{date}/{list}.json"
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()))
            .replace("{" + "list" + "}", localVarApiClient.escapeString(_list.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isbn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isbn", isbn));
        }

        if (listName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list-name", listName));
        }

        if (publishedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published-date", publishedDate));
        }

        if (bestsellersDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bestsellers-date", bestsellersDate));
        }

        if (weeksOnList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weeks-on-list", weeksOnList));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rank", rank));
        }

        if (rankLastWeek != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rank-last-week", rankLastWeek));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort-order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListsDateListJsonValidateBeforeCall(String date, String _list, Integer isbn, String listName, OffsetDateTime publishedDate, String bestsellersDate, Integer weeksOnList, String rank, Integer rankLastWeek, Integer offset, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling gETListsDateListJson(Async)");
        }

        // verify the required parameter '_list' is set
        if (_list == null) {
            throw new ApiException("Missing the required parameter '_list' when calling gETListsDateListJson(Async)");
        }

        return gETListsDateListJsonCall(date, _list, isbn, listName, publishedDate, bestsellersDate, weeksOnList, rank, rankLastWeek, offset, sortOrder, _callback);

    }

    /**
     * Best Seller List by Date
     * 
     * @param date  (required)
     * @param _list Name of the Best Sellers List. You can get the full list from /lists/names.json (required)
     * @param isbn International Standard Book Number, 10 or 13 digits (optional)
     * @param listName The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.) (optional)
     * @param publishedDate YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     * @param bestsellersDate YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
     * @param weeksOnList The number of weeks that the best seller has been on list-name, as of bestsellers-date (optional)
     * @param rank The rank of the best seller on list-name as of bestsellers-date (optional)
     * @param rankLastWeek The rank of the best seller on list-name one week prior to bestsellers-date (optional)
     * @param offset Sets the starting point of the result set (optional)
     * @param sortOrder The default is ASC (ascending). The sort-order parameter is used with the sort-by parameter — for details, see each request type. (optional)
     * @return GETListsDateListJson200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GETListsDateListJson200Response gETListsDateListJson(String date, String _list, Integer isbn, String listName, OffsetDateTime publishedDate, String bestsellersDate, Integer weeksOnList, String rank, Integer rankLastWeek, Integer offset, String sortOrder) throws ApiException {
        ApiResponse<GETListsDateListJson200Response> localVarResp = gETListsDateListJsonWithHttpInfo(date, _list, isbn, listName, publishedDate, bestsellersDate, weeksOnList, rank, rankLastWeek, offset, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Best Seller List by Date
     * 
     * @param date  (required)
     * @param _list Name of the Best Sellers List. You can get the full list from /lists/names.json (required)
     * @param isbn International Standard Book Number, 10 or 13 digits (optional)
     * @param listName The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.) (optional)
     * @param publishedDate YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     * @param bestsellersDate YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
     * @param weeksOnList The number of weeks that the best seller has been on list-name, as of bestsellers-date (optional)
     * @param rank The rank of the best seller on list-name as of bestsellers-date (optional)
     * @param rankLastWeek The rank of the best seller on list-name one week prior to bestsellers-date (optional)
     * @param offset Sets the starting point of the result set (optional)
     * @param sortOrder The default is ASC (ascending). The sort-order parameter is used with the sort-by parameter — for details, see each request type. (optional)
     * @return ApiResponse&lt;GETListsDateListJson200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GETListsDateListJson200Response> gETListsDateListJsonWithHttpInfo(String date, String _list, Integer isbn, String listName, OffsetDateTime publishedDate, String bestsellersDate, Integer weeksOnList, String rank, Integer rankLastWeek, Integer offset, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = gETListsDateListJsonValidateBeforeCall(date, _list, isbn, listName, publishedDate, bestsellersDate, weeksOnList, rank, rankLastWeek, offset, sortOrder, null);
        Type localVarReturnType = new TypeToken<GETListsDateListJson200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Best Seller List by Date (asynchronously)
     * 
     * @param date  (required)
     * @param _list Name of the Best Sellers List. You can get the full list from /lists/names.json (required)
     * @param isbn International Standard Book Number, 10 or 13 digits (optional)
     * @param listName The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.) (optional)
     * @param publishedDate YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     * @param bestsellersDate YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
     * @param weeksOnList The number of weeks that the best seller has been on list-name, as of bestsellers-date (optional)
     * @param rank The rank of the best seller on list-name as of bestsellers-date (optional)
     * @param rankLastWeek The rank of the best seller on list-name one week prior to bestsellers-date (optional)
     * @param offset Sets the starting point of the result set (optional)
     * @param sortOrder The default is ASC (ascending). The sort-order parameter is used with the sort-by parameter — for details, see each request type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListsDateListJsonAsync(String date, String _list, Integer isbn, String listName, OffsetDateTime publishedDate, String bestsellersDate, Integer weeksOnList, String rank, Integer rankLastWeek, Integer offset, String sortOrder, final ApiCallback<GETListsDateListJson200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListsDateListJsonValidateBeforeCall(date, _list, isbn, listName, publishedDate, bestsellersDate, weeksOnList, rank, rankLastWeek, offset, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<GETListsDateListJson200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListsFormat
     * @param format  (required)
     * @param _list The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.) (optional)
     * @param weeksOnList The number of weeks that the best seller has been on list-name, as of bestsellers-date (optional)
     * @param bestsellersDate YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
     * @param date YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     * @param isbn International Standard Book Number, 10 or 13 digits (optional)
     * @param publishedDate YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     * @param rank The rank of the best seller on list-name as of bestsellers-date (optional)
     * @param rankLastWeek The rank of the best seller on list-name one week prior to bestsellers-date (optional)
     * @param offset Sets the starting point of the result set (optional)
     * @param sortOrder Sets the sort order of the result set (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListsFormatCall(String format, String _list, Integer weeksOnList, OffsetDateTime bestsellersDate, String date, String isbn, String publishedDate, Integer rank, Integer rankLastWeek, Integer offset, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists.{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_list != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list", _list));
        }

        if (weeksOnList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weeks-on-list", weeksOnList));
        }

        if (bestsellersDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bestsellers-date", bestsellersDate));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (isbn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isbn", isbn));
        }

        if (publishedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published-date", publishedDate));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rank", rank));
        }

        if (rankLastWeek != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rank-last-week", rankLastWeek));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort-order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListsFormatValidateBeforeCall(String format, String _list, Integer weeksOnList, OffsetDateTime bestsellersDate, String date, String isbn, String publishedDate, Integer rank, Integer rankLastWeek, Integer offset, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling gETListsFormat(Async)");
        }

        return gETListsFormatCall(format, _list, weeksOnList, bestsellersDate, date, isbn, publishedDate, rank, rankLastWeek, offset, sortOrder, _callback);

    }

    /**
     * Best Seller List
     * 
     * @param format  (required)
     * @param _list The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.) (optional)
     * @param weeksOnList The number of weeks that the best seller has been on list-name, as of bestsellers-date (optional)
     * @param bestsellersDate YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
     * @param date YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     * @param isbn International Standard Book Number, 10 or 13 digits (optional)
     * @param publishedDate YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     * @param rank The rank of the best seller on list-name as of bestsellers-date (optional)
     * @param rankLastWeek The rank of the best seller on list-name one week prior to bestsellers-date (optional)
     * @param offset Sets the starting point of the result set (optional)
     * @param sortOrder Sets the sort order of the result set (optional)
     * @return GETListsFormat200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GETListsFormat200Response gETListsFormat(String format, String _list, Integer weeksOnList, OffsetDateTime bestsellersDate, String date, String isbn, String publishedDate, Integer rank, Integer rankLastWeek, Integer offset, String sortOrder) throws ApiException {
        ApiResponse<GETListsFormat200Response> localVarResp = gETListsFormatWithHttpInfo(format, _list, weeksOnList, bestsellersDate, date, isbn, publishedDate, rank, rankLastWeek, offset, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Best Seller List
     * 
     * @param format  (required)
     * @param _list The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.) (optional)
     * @param weeksOnList The number of weeks that the best seller has been on list-name, as of bestsellers-date (optional)
     * @param bestsellersDate YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
     * @param date YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     * @param isbn International Standard Book Number, 10 or 13 digits (optional)
     * @param publishedDate YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     * @param rank The rank of the best seller on list-name as of bestsellers-date (optional)
     * @param rankLastWeek The rank of the best seller on list-name one week prior to bestsellers-date (optional)
     * @param offset Sets the starting point of the result set (optional)
     * @param sortOrder Sets the sort order of the result set (optional)
     * @return ApiResponse&lt;GETListsFormat200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GETListsFormat200Response> gETListsFormatWithHttpInfo(String format, String _list, Integer weeksOnList, OffsetDateTime bestsellersDate, String date, String isbn, String publishedDate, Integer rank, Integer rankLastWeek, Integer offset, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = gETListsFormatValidateBeforeCall(format, _list, weeksOnList, bestsellersDate, date, isbn, publishedDate, rank, rankLastWeek, offset, sortOrder, null);
        Type localVarReturnType = new TypeToken<GETListsFormat200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Best Seller List (asynchronously)
     * 
     * @param format  (required)
     * @param _list The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.) (optional)
     * @param weeksOnList The number of weeks that the best seller has been on list-name, as of bestsellers-date (optional)
     * @param bestsellersDate YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
     * @param date YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     * @param isbn International Standard Book Number, 10 or 13 digits (optional)
     * @param publishedDate YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     * @param rank The rank of the best seller on list-name as of bestsellers-date (optional)
     * @param rankLastWeek The rank of the best seller on list-name one week prior to bestsellers-date (optional)
     * @param offset Sets the starting point of the result set (optional)
     * @param sortOrder Sets the sort order of the result set (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListsFormatAsync(String format, String _list, Integer weeksOnList, OffsetDateTime bestsellersDate, String date, String isbn, String publishedDate, Integer rank, Integer rankLastWeek, Integer offset, String sortOrder, final ApiCallback<GETListsFormat200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListsFormatValidateBeforeCall(format, _list, weeksOnList, bestsellersDate, date, isbn, publishedDate, rank, rankLastWeek, offset, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<GETListsFormat200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListsNamesFormat
     * @param format  (required)
     * @param apiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListsNamesFormatCall(String format, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/names.{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListsNamesFormatValidateBeforeCall(String format, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling gETListsNamesFormat(Async)");
        }

        return gETListsNamesFormatCall(format, apiKey, _callback);

    }

    /**
     * Best Seller List Names
     * 
     * @param format  (required)
     * @param apiKey  (optional)
     * @return GETListsNamesFormat200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GETListsNamesFormat200Response gETListsNamesFormat(String format, String apiKey) throws ApiException {
        ApiResponse<GETListsNamesFormat200Response> localVarResp = gETListsNamesFormatWithHttpInfo(format, apiKey);
        return localVarResp.getData();
    }

    /**
     * Best Seller List Names
     * 
     * @param format  (required)
     * @param apiKey  (optional)
     * @return ApiResponse&lt;GETListsNamesFormat200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GETListsNamesFormat200Response> gETListsNamesFormatWithHttpInfo(String format, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = gETListsNamesFormatValidateBeforeCall(format, apiKey, null);
        Type localVarReturnType = new TypeToken<GETListsNamesFormat200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Best Seller List Names (asynchronously)
     * 
     * @param format  (required)
     * @param apiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListsNamesFormatAsync(String format, String apiKey, final ApiCallback<GETListsNamesFormat200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListsNamesFormatValidateBeforeCall(format, apiKey, _callback);
        Type localVarReturnType = new TypeToken<GETListsNamesFormat200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListsOverviewFormat
     * @param format  (required)
     * @param publishedDate The best-seller list publication date. YYYY-MM-DD  You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published_date, the current week&#39;s best-sellers lists will be returned. (optional)
     * @param apiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListsOverviewFormatCall(String format, String publishedDate, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/overview.{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (publishedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_date", publishedDate));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListsOverviewFormatValidateBeforeCall(String format, String publishedDate, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling gETListsOverviewFormat(Async)");
        }

        return gETListsOverviewFormatCall(format, publishedDate, apiKey, _callback);

    }

    /**
     * Best Seller List Overview
     * 
     * @param format  (required)
     * @param publishedDate The best-seller list publication date. YYYY-MM-DD  You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published_date, the current week&#39;s best-sellers lists will be returned. (optional)
     * @param apiKey  (optional)
     * @return GETListsOverviewFormat200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GETListsOverviewFormat200Response gETListsOverviewFormat(String format, String publishedDate, String apiKey) throws ApiException {
        ApiResponse<GETListsOverviewFormat200Response> localVarResp = gETListsOverviewFormatWithHttpInfo(format, publishedDate, apiKey);
        return localVarResp.getData();
    }

    /**
     * Best Seller List Overview
     * 
     * @param format  (required)
     * @param publishedDate The best-seller list publication date. YYYY-MM-DD  You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published_date, the current week&#39;s best-sellers lists will be returned. (optional)
     * @param apiKey  (optional)
     * @return ApiResponse&lt;GETListsOverviewFormat200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GETListsOverviewFormat200Response> gETListsOverviewFormatWithHttpInfo(String format, String publishedDate, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = gETListsOverviewFormatValidateBeforeCall(format, publishedDate, apiKey, null);
        Type localVarReturnType = new TypeToken<GETListsOverviewFormat200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Best Seller List Overview (asynchronously)
     * 
     * @param format  (required)
     * @param publishedDate The best-seller list publication date. YYYY-MM-DD  You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published_date, the current week&#39;s best-sellers lists will be returned. (optional)
     * @param apiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListsOverviewFormatAsync(String format, String publishedDate, String apiKey, final ApiCallback<GETListsOverviewFormat200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListsOverviewFormatValidateBeforeCall(format, publishedDate, apiKey, _callback);
        Type localVarReturnType = new TypeToken<GETListsOverviewFormat200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETReviewsFormat
     * @param format  (required)
     * @param isbn Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs. (optional)
     * @param title You’ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20. (optional)
     * @param author You’ll need to enter the author’s first and last name, separated by a space. This space will be converted into the characters %20. (optional)
     * @param apiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETReviewsFormatCall(String format, Integer isbn, String title, String author, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reviews.{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isbn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isbn", isbn));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETReviewsFormatValidateBeforeCall(String format, Integer isbn, String title, String author, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling gETReviewsFormat(Async)");
        }

        return gETReviewsFormatCall(format, isbn, title, author, apiKey, _callback);

    }

    /**
     * Reviews
     * 
     * @param format  (required)
     * @param isbn Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs. (optional)
     * @param title You’ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20. (optional)
     * @param author You’ll need to enter the author’s first and last name, separated by a space. This space will be converted into the characters %20. (optional)
     * @param apiKey  (optional)
     * @return GETReviewsFormat200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GETReviewsFormat200Response gETReviewsFormat(String format, Integer isbn, String title, String author, String apiKey) throws ApiException {
        ApiResponse<GETReviewsFormat200Response> localVarResp = gETReviewsFormatWithHttpInfo(format, isbn, title, author, apiKey);
        return localVarResp.getData();
    }

    /**
     * Reviews
     * 
     * @param format  (required)
     * @param isbn Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs. (optional)
     * @param title You’ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20. (optional)
     * @param author You’ll need to enter the author’s first and last name, separated by a space. This space will be converted into the characters %20. (optional)
     * @param apiKey  (optional)
     * @return ApiResponse&lt;GETReviewsFormat200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GETReviewsFormat200Response> gETReviewsFormatWithHttpInfo(String format, Integer isbn, String title, String author, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = gETReviewsFormatValidateBeforeCall(format, isbn, title, author, apiKey, null);
        Type localVarReturnType = new TypeToken<GETReviewsFormat200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reviews (asynchronously)
     * 
     * @param format  (required)
     * @param isbn Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs. (optional)
     * @param title You’ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20. (optional)
     * @param author You’ll need to enter the author’s first and last name, separated by a space. This space will be converted into the characters %20. (optional)
     * @param apiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETReviewsFormatAsync(String format, Integer isbn, String title, String author, String apiKey, final ApiCallback<GETReviewsFormat200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETReviewsFormatValidateBeforeCall(format, isbn, title, author, apiKey, _callback);
        Type localVarReturnType = new TypeToken<GETReviewsFormat200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
