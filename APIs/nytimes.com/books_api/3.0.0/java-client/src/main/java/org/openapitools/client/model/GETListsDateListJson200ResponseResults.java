/*
 * Books API
 * The Books API provides information about book reviews and The New York Times bestsellers lists.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GETListsDateListJson200ResponseResultsBooksInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GETListsDateListJson200ResponseResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:36.772134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GETListsDateListJson200ResponseResults {
  public static final String SERIALIZED_NAME_BESTSELLERS_DATE = "bestsellers_date";
  @SerializedName(SERIALIZED_NAME_BESTSELLERS_DATE)
  private String bestsellersDate;

  public static final String SERIALIZED_NAME_BOOKS = "books";
  @SerializedName(SERIALIZED_NAME_BOOKS)
  private List<GETListsDateListJson200ResponseResultsBooksInner> books = new ArrayList<>();

  public static final String SERIALIZED_NAME_CORRECTIONS = "corrections";
  @SerializedName(SERIALIZED_NAME_CORRECTIONS)
  private List<Object> corrections = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LIST_NAME = "list_name";
  @SerializedName(SERIALIZED_NAME_LIST_NAME)
  private String listName;

  public static final String SERIALIZED_NAME_NORMAL_LIST_ENDS_AT = "normal_list_ends_at";
  @SerializedName(SERIALIZED_NAME_NORMAL_LIST_ENDS_AT)
  private Integer normalListEndsAt;

  public static final String SERIALIZED_NAME_PUBLISHED_DATE = "published_date";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_DATE)
  private String publishedDate;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public GETListsDateListJson200ResponseResults() {
  }

  public GETListsDateListJson200ResponseResults bestsellersDate(String bestsellersDate) {
    this.bestsellersDate = bestsellersDate;
    return this;
  }

  /**
   * Get bestsellersDate
   * @return bestsellersDate
   */
  @javax.annotation.Nullable
  public String getBestsellersDate() {
    return bestsellersDate;
  }

  public void setBestsellersDate(String bestsellersDate) {
    this.bestsellersDate = bestsellersDate;
  }


  public GETListsDateListJson200ResponseResults books(List<GETListsDateListJson200ResponseResultsBooksInner> books) {
    this.books = books;
    return this;
  }

  public GETListsDateListJson200ResponseResults addBooksItem(GETListsDateListJson200ResponseResultsBooksInner booksItem) {
    if (this.books == null) {
      this.books = new ArrayList<>();
    }
    this.books.add(booksItem);
    return this;
  }

  /**
   * Get books
   * @return books
   */
  @javax.annotation.Nullable
  public List<GETListsDateListJson200ResponseResultsBooksInner> getBooks() {
    return books;
  }

  public void setBooks(List<GETListsDateListJson200ResponseResultsBooksInner> books) {
    this.books = books;
  }


  public GETListsDateListJson200ResponseResults corrections(List<Object> corrections) {
    this.corrections = corrections;
    return this;
  }

  public GETListsDateListJson200ResponseResults addCorrectionsItem(Object correctionsItem) {
    if (this.corrections == null) {
      this.corrections = new ArrayList<>();
    }
    this.corrections.add(correctionsItem);
    return this;
  }

  /**
   * Get corrections
   * @return corrections
   */
  @javax.annotation.Nullable
  public List<Object> getCorrections() {
    return corrections;
  }

  public void setCorrections(List<Object> corrections) {
    this.corrections = corrections;
  }


  public GETListsDateListJson200ResponseResults displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GETListsDateListJson200ResponseResults listName(String listName) {
    this.listName = listName;
    return this;
  }

  /**
   * Get listName
   * @return listName
   */
  @javax.annotation.Nullable
  public String getListName() {
    return listName;
  }

  public void setListName(String listName) {
    this.listName = listName;
  }


  public GETListsDateListJson200ResponseResults normalListEndsAt(Integer normalListEndsAt) {
    this.normalListEndsAt = normalListEndsAt;
    return this;
  }

  /**
   * Get normalListEndsAt
   * @return normalListEndsAt
   */
  @javax.annotation.Nullable
  public Integer getNormalListEndsAt() {
    return normalListEndsAt;
  }

  public void setNormalListEndsAt(Integer normalListEndsAt) {
    this.normalListEndsAt = normalListEndsAt;
  }


  public GETListsDateListJson200ResponseResults publishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
    return this;
  }

  /**
   * Get publishedDate
   * @return publishedDate
   */
  @javax.annotation.Nullable
  public String getPublishedDate() {
    return publishedDate;
  }

  public void setPublishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
  }


  public GETListsDateListJson200ResponseResults updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GETListsDateListJson200ResponseResults geTListsDateListJson200ResponseResults = (GETListsDateListJson200ResponseResults) o;
    return Objects.equals(this.bestsellersDate, geTListsDateListJson200ResponseResults.bestsellersDate) &&
        Objects.equals(this.books, geTListsDateListJson200ResponseResults.books) &&
        Objects.equals(this.corrections, geTListsDateListJson200ResponseResults.corrections) &&
        Objects.equals(this.displayName, geTListsDateListJson200ResponseResults.displayName) &&
        Objects.equals(this.listName, geTListsDateListJson200ResponseResults.listName) &&
        Objects.equals(this.normalListEndsAt, geTListsDateListJson200ResponseResults.normalListEndsAt) &&
        Objects.equals(this.publishedDate, geTListsDateListJson200ResponseResults.publishedDate) &&
        Objects.equals(this.updated, geTListsDateListJson200ResponseResults.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestsellersDate, books, corrections, displayName, listName, normalListEndsAt, publishedDate, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GETListsDateListJson200ResponseResults {\n");
    sb.append("    bestsellersDate: ").append(toIndentedString(bestsellersDate)).append("\n");
    sb.append("    books: ").append(toIndentedString(books)).append("\n");
    sb.append("    corrections: ").append(toIndentedString(corrections)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    listName: ").append(toIndentedString(listName)).append("\n");
    sb.append("    normalListEndsAt: ").append(toIndentedString(normalListEndsAt)).append("\n");
    sb.append("    publishedDate: ").append(toIndentedString(publishedDate)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bestsellers_date");
    openapiFields.add("books");
    openapiFields.add("corrections");
    openapiFields.add("display_name");
    openapiFields.add("list_name");
    openapiFields.add("normal_list_ends_at");
    openapiFields.add("published_date");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GETListsDateListJson200ResponseResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GETListsDateListJson200ResponseResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GETListsDateListJson200ResponseResults is not found in the empty JSON string", GETListsDateListJson200ResponseResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GETListsDateListJson200ResponseResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GETListsDateListJson200ResponseResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bestsellers_date") != null && !jsonObj.get("bestsellers_date").isJsonNull()) && !jsonObj.get("bestsellers_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bestsellers_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bestsellers_date").toString()));
      }
      if (jsonObj.get("books") != null && !jsonObj.get("books").isJsonNull()) {
        JsonArray jsonArraybooks = jsonObj.getAsJsonArray("books");
        if (jsonArraybooks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("books").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `books` to be an array in the JSON string but got `%s`", jsonObj.get("books").toString()));
          }

          // validate the optional field `books` (array)
          for (int i = 0; i < jsonArraybooks.size(); i++) {
            GETListsDateListJson200ResponseResultsBooksInner.validateJsonElement(jsonArraybooks.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("corrections") != null && !jsonObj.get("corrections").isJsonNull() && !jsonObj.get("corrections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `corrections` to be an array in the JSON string but got `%s`", jsonObj.get("corrections").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("list_name") != null && !jsonObj.get("list_name").isJsonNull()) && !jsonObj.get("list_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_name").toString()));
      }
      if ((jsonObj.get("published_date") != null && !jsonObj.get("published_date").isJsonNull()) && !jsonObj.get("published_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_date").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GETListsDateListJson200ResponseResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GETListsDateListJson200ResponseResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GETListsDateListJson200ResponseResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GETListsDateListJson200ResponseResults.class));

       return (TypeAdapter<T>) new TypeAdapter<GETListsDateListJson200ResponseResults>() {
           @Override
           public void write(JsonWriter out, GETListsDateListJson200ResponseResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GETListsDateListJson200ResponseResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GETListsDateListJson200ResponseResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GETListsDateListJson200ResponseResults
   * @throws IOException if the JSON string is invalid with respect to GETListsDateListJson200ResponseResults
   */
  public static GETListsDateListJson200ResponseResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GETListsDateListJson200ResponseResults.class);
  }

  /**
   * Convert an instance of GETListsDateListJson200ResponseResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

