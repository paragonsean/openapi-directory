/**
 * Books API
 * The Books API provides information about book reviews and The New York Times bestsellers lists.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GETListsBestSellersHistoryJson200Response from '../model/GETListsBestSellersHistoryJson200Response';
import GETListsDateListJson200Response from '../model/GETListsDateListJson200Response';
import GETListsFormat200Response from '../model/GETListsFormat200Response';
import GETListsNamesFormat200Response from '../model/GETListsNamesFormat200Response';
import GETListsOverviewFormat200Response from '../model/GETListsOverviewFormat200Response';
import GETReviewsFormat200Response from '../model/GETReviewsFormat200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 3.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETListsBestSellersHistoryJson operation.
     * @callback module:api/DefaultApi~gETListsBestSellersHistoryJsonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GETListsBestSellersHistoryJson200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Best Seller History List
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [ageGroup] The target age group for the best seller.
     * @param {String} [author] The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).  When searching the author field, you can specify any combination of first, middle and last names.  When sort-by is set to author, the results will be sorted by author's first name. 
     * @param {String} [contributor] The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).  When searching, you can specify any combination of first, middle and last names of any of the contributors.  When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed. 
     * @param {String} [isbn] International Standard Book Number, 10 or 13 digits  A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229).
     * @param {String} [price] The publisher's list price of the best seller, including decimal point
     * @param {String} [publisher] The standardized name of the publisher
     * @param {String} [title] The title of the best seller  When searching, you can specify a portion of a title or a full title.
     * @param {module:api/DefaultApi~gETListsBestSellersHistoryJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GETListsBestSellersHistoryJson200Response}
     */
    gETListsBestSellersHistoryJson(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'age-group': opts['ageGroup'],
        'author': opts['author'],
        'contributor': opts['contributor'],
        'isbn': opts['isbn'],
        'price': opts['price'],
        'publisher': opts['publisher'],
        'title': opts['title']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GETListsBestSellersHistoryJson200Response;
      return this.apiClient.callApi(
        '/lists/best-sellers/history.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETListsDateListJson operation.
     * @callback module:api/DefaultApi~gETListsDateListJsonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GETListsDateListJson200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Best Seller List by Date
     * 
     * @param {String} date 
     * @param {String} list Name of the Best Sellers List. You can get the full list from /lists/names.json
     * @param {Object} opts Optional parameters
     * @param {Number} [isbn] International Standard Book Number, 10 or 13 digits
     * @param {String} [listName] The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.)
     * @param {Date} [publishedDate] YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date)
     * @param {String} [bestsellersDate] YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29).
     * @param {Number} [weeksOnList] The number of weeks that the best seller has been on list-name, as of bestsellers-date
     * @param {String} [rank] The rank of the best seller on list-name as of bestsellers-date
     * @param {Number} [rankLastWeek] The rank of the best seller on list-name one week prior to bestsellers-date
     * @param {Number} [offset] Sets the starting point of the result set
     * @param {module:model/String} [sortOrder] The default is ASC (ascending). The sort-order parameter is used with the sort-by parameter â€” for details, see each request type.
     * @param {module:api/DefaultApi~gETListsDateListJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GETListsDateListJson200Response}
     */
    gETListsDateListJson(date, list, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling gETListsDateListJson");
      }
      // verify the required parameter 'list' is set
      if (list === undefined || list === null) {
        throw new Error("Missing the required parameter 'list' when calling gETListsDateListJson");
      }

      let pathParams = {
        'date': date,
        'list': list
      };
      let queryParams = {
        'isbn': opts['isbn'],
        'list-name': opts['listName'],
        'published-date': opts['publishedDate'],
        'bestsellers-date': opts['bestsellersDate'],
        'weeks-on-list': opts['weeksOnList'],
        'rank': opts['rank'],
        'rank-last-week': opts['rankLastWeek'],
        'offset': opts['offset'],
        'sort-order': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GETListsDateListJson200Response;
      return this.apiClient.callApi(
        '/lists/{date}/{list}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETListsFormat operation.
     * @callback module:api/DefaultApi~gETListsFormatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GETListsFormat200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Best Seller List
     * 
     * @param {module:model/String} format 
     * @param {Object} opts Optional parameters
     * @param {String} [list] The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.)
     * @param {Number} [weeksOnList] The number of weeks that the best seller has been on list-name, as of bestsellers-date
     * @param {Date} [bestsellersDate] YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29).
     * @param {String} [date] YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date)
     * @param {String} [isbn] International Standard Book Number, 10 or 13 digits
     * @param {String} [publishedDate] YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date)
     * @param {Number} [rank] The rank of the best seller on list-name as of bestsellers-date
     * @param {Number} [rankLastWeek] The rank of the best seller on list-name one week prior to bestsellers-date
     * @param {Number} [offset] Sets the starting point of the result set
     * @param {module:model/String} [sortOrder] Sets the sort order of the result set
     * @param {module:api/DefaultApi~gETListsFormatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GETListsFormat200Response}
     */
    gETListsFormat(format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gETListsFormat");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
        'list': opts['list'],
        'weeks-on-list': opts['weeksOnList'],
        'bestsellers-date': opts['bestsellersDate'],
        'date': opts['date'],
        'isbn': opts['isbn'],
        'published-date': opts['publishedDate'],
        'rank': opts['rank'],
        'rank-last-week': opts['rankLastWeek'],
        'offset': opts['offset'],
        'sort-order': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GETListsFormat200Response;
      return this.apiClient.callApi(
        '/lists.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETListsNamesFormat operation.
     * @callback module:api/DefaultApi~gETListsNamesFormatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GETListsNamesFormat200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Best Seller List Names
     * 
     * @param {module:model/String} format 
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] 
     * @param {module:api/DefaultApi~gETListsNamesFormatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GETListsNamesFormat200Response}
     */
    gETListsNamesFormat(format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gETListsNamesFormat");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
        'api-key': opts['apiKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GETListsNamesFormat200Response;
      return this.apiClient.callApi(
        '/lists/names.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETListsOverviewFormat operation.
     * @callback module:api/DefaultApi~gETListsOverviewFormatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GETListsOverviewFormat200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Best Seller List Overview
     * 
     * @param {module:model/String} format 
     * @param {Object} opts Optional parameters
     * @param {String} [publishedDate] The best-seller list publication date. YYYY-MM-DD  You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published_date, the current week's best-sellers lists will be returned.
     * @param {String} [apiKey] 
     * @param {module:api/DefaultApi~gETListsOverviewFormatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GETListsOverviewFormat200Response}
     */
    gETListsOverviewFormat(format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gETListsOverviewFormat");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
        'published_date': opts['publishedDate'],
        'api-key': opts['apiKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GETListsOverviewFormat200Response;
      return this.apiClient.callApi(
        '/lists/overview.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETReviewsFormat operation.
     * @callback module:api/DefaultApi~gETReviewsFormatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GETReviewsFormat200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reviews
     * 
     * @param {module:model/String} format 
     * @param {Object} opts Optional parameters
     * @param {Number} [isbn] Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs.
     * @param {String} [title] Youâ€™ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20.
     * @param {String} [author] Youâ€™ll need to enter the authorâ€™s first and last name, separated by a space. This space will be converted into the characters %20.
     * @param {String} [apiKey] 
     * @param {module:api/DefaultApi~gETReviewsFormatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GETReviewsFormat200Response}
     */
    gETReviewsFormat(format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gETReviewsFormat");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
        'isbn': opts['isbn'],
        'title': opts['title'],
        'author': opts['author'],
        'api-key': opts['apiKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GETReviewsFormat200Response;
      return this.apiClient.callApi(
        '/reviews.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
