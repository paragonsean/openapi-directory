/**
 * Times Newswire API
 * With the Times Newswire API, you can get links and metadata for Times articles and blog posts as soon as they are published on NYTimes.com. The Times Newswire API provides an up-to-the-minute stream of published items.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticle::OAIArticle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticle::OAIArticle() {
    this->initializeModel();
}

OAIArticle::~OAIArticle() {}

void OAIArticle::initializeModel() {

    m_abstract_isSet = false;
    m_abstract_isValid = false;

    m_blog_name_isSet = false;
    m_blog_name_isValid = false;

    m_byline_isSet = false;
    m_byline_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_des_facet_isSet = false;
    m_des_facet_isValid = false;

    m_geo_facet_isSet = false;
    m_geo_facet_isValid = false;

    m_headline_isSet = false;
    m_headline_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;

    m_kicker_isSet = false;
    m_kicker_isValid = false;

    m_material_type_facet_isSet = false;
    m_material_type_facet_isValid = false;

    m_multimedia_isSet = false;
    m_multimedia_isValid = false;

    m_org_facet_isSet = false;
    m_org_facet_isValid = false;

    m_per_facet_isSet = false;
    m_per_facet_isValid = false;

    m_published_date_isSet = false;
    m_published_date_isValid = false;

    m_related_urls_isSet = false;
    m_related_urls_isValid = false;

    m_section_isSet = false;
    m_section_isValid = false;

    m_short_url_isSet = false;
    m_short_url_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_subsection_isSet = false;
    m_subsection_isValid = false;

    m_thumbnail_standard_isSet = false;
    m_thumbnail_standard_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_date_isSet = false;
    m_updated_date_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIArticle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticle::fromJsonObject(QJsonObject json) {

    m_abstract_isValid = ::OpenAPI::fromJsonValue(m_abstract, json[QString("abstract")]);
    m_abstract_isSet = !json[QString("abstract")].isNull() && m_abstract_isValid;

    m_blog_name_isValid = ::OpenAPI::fromJsonValue(m_blog_name, json[QString("blog_name")]);
    m_blog_name_isSet = !json[QString("blog_name")].isNull() && m_blog_name_isValid;

    m_byline_isValid = ::OpenAPI::fromJsonValue(m_byline, json[QString("byline")]);
    m_byline_isSet = !json[QString("byline")].isNull() && m_byline_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("created_date")]);
    m_created_date_isSet = !json[QString("created_date")].isNull() && m_created_date_isValid;

    m_des_facet_isValid = ::OpenAPI::fromJsonValue(m_des_facet, json[QString("des_facet")]);
    m_des_facet_isSet = !json[QString("des_facet")].isNull() && m_des_facet_isValid;

    m_geo_facet_isValid = ::OpenAPI::fromJsonValue(m_geo_facet, json[QString("geo_facet")]);
    m_geo_facet_isSet = !json[QString("geo_facet")].isNull() && m_geo_facet_isValid;

    m_headline_isValid = ::OpenAPI::fromJsonValue(m_headline, json[QString("headline")]);
    m_headline_isSet = !json[QString("headline")].isNull() && m_headline_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("item_type")]);
    m_item_type_isSet = !json[QString("item_type")].isNull() && m_item_type_isValid;

    m_kicker_isValid = ::OpenAPI::fromJsonValue(m_kicker, json[QString("kicker")]);
    m_kicker_isSet = !json[QString("kicker")].isNull() && m_kicker_isValid;

    m_material_type_facet_isValid = ::OpenAPI::fromJsonValue(m_material_type_facet, json[QString("material_type_facet")]);
    m_material_type_facet_isSet = !json[QString("material_type_facet")].isNull() && m_material_type_facet_isValid;

    m_multimedia_isValid = ::OpenAPI::fromJsonValue(m_multimedia, json[QString("multimedia")]);
    m_multimedia_isSet = !json[QString("multimedia")].isNull() && m_multimedia_isValid;

    m_org_facet_isValid = ::OpenAPI::fromJsonValue(m_org_facet, json[QString("org_facet")]);
    m_org_facet_isSet = !json[QString("org_facet")].isNull() && m_org_facet_isValid;

    m_per_facet_isValid = ::OpenAPI::fromJsonValue(m_per_facet, json[QString("per_facet")]);
    m_per_facet_isSet = !json[QString("per_facet")].isNull() && m_per_facet_isValid;

    m_published_date_isValid = ::OpenAPI::fromJsonValue(m_published_date, json[QString("published_date")]);
    m_published_date_isSet = !json[QString("published_date")].isNull() && m_published_date_isValid;

    m_related_urls_isValid = ::OpenAPI::fromJsonValue(m_related_urls, json[QString("related_urls")]);
    m_related_urls_isSet = !json[QString("related_urls")].isNull() && m_related_urls_isValid;

    m_section_isValid = ::OpenAPI::fromJsonValue(m_section, json[QString("section")]);
    m_section_isSet = !json[QString("section")].isNull() && m_section_isValid;

    m_short_url_isValid = ::OpenAPI::fromJsonValue(m_short_url, json[QString("short_url")]);
    m_short_url_isSet = !json[QString("short_url")].isNull() && m_short_url_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_subsection_isValid = ::OpenAPI::fromJsonValue(m_subsection, json[QString("subsection")]);
    m_subsection_isSet = !json[QString("subsection")].isNull() && m_subsection_isValid;

    m_thumbnail_standard_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_standard, json[QString("thumbnail_standard")]);
    m_thumbnail_standard_isSet = !json[QString("thumbnail_standard")].isNull() && m_thumbnail_standard_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_date_isValid = ::OpenAPI::fromJsonValue(m_updated_date, json[QString("updated_date")]);
    m_updated_date_isSet = !json[QString("updated_date")].isNull() && m_updated_date_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIArticle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticle::asJsonObject() const {
    QJsonObject obj;
    if (m_abstract_isSet) {
        obj.insert(QString("abstract"), ::OpenAPI::toJsonValue(m_abstract));
    }
    if (m_blog_name_isSet) {
        obj.insert(QString("blog_name"), ::OpenAPI::toJsonValue(m_blog_name));
    }
    if (m_byline_isSet) {
        obj.insert(QString("byline"), ::OpenAPI::toJsonValue(m_byline));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("created_date"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_des_facet.size() > 0) {
        obj.insert(QString("des_facet"), ::OpenAPI::toJsonValue(m_des_facet));
    }
    if (m_geo_facet.size() > 0) {
        obj.insert(QString("geo_facet"), ::OpenAPI::toJsonValue(m_geo_facet));
    }
    if (m_headline_isSet) {
        obj.insert(QString("headline"), ::OpenAPI::toJsonValue(m_headline));
    }
    if (m_item_type_isSet) {
        obj.insert(QString("item_type"), ::OpenAPI::toJsonValue(m_item_type));
    }
    if (m_kicker_isSet) {
        obj.insert(QString("kicker"), ::OpenAPI::toJsonValue(m_kicker));
    }
    if (m_material_type_facet_isSet) {
        obj.insert(QString("material_type_facet"), ::OpenAPI::toJsonValue(m_material_type_facet));
    }
    if (m_multimedia.size() > 0) {
        obj.insert(QString("multimedia"), ::OpenAPI::toJsonValue(m_multimedia));
    }
    if (m_org_facet_isSet) {
        obj.insert(QString("org_facet"), ::OpenAPI::toJsonValue(m_org_facet));
    }
    if (m_per_facet.size() > 0) {
        obj.insert(QString("per_facet"), ::OpenAPI::toJsonValue(m_per_facet));
    }
    if (m_published_date_isSet) {
        obj.insert(QString("published_date"), ::OpenAPI::toJsonValue(m_published_date));
    }
    if (m_related_urls.size() > 0) {
        obj.insert(QString("related_urls"), ::OpenAPI::toJsonValue(m_related_urls));
    }
    if (m_section_isSet) {
        obj.insert(QString("section"), ::OpenAPI::toJsonValue(m_section));
    }
    if (m_short_url_isSet) {
        obj.insert(QString("short_url"), ::OpenAPI::toJsonValue(m_short_url));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_subsection_isSet) {
        obj.insert(QString("subsection"), ::OpenAPI::toJsonValue(m_subsection));
    }
    if (m_thumbnail_standard_isSet) {
        obj.insert(QString("thumbnail_standard"), ::OpenAPI::toJsonValue(m_thumbnail_standard));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_date_isSet) {
        obj.insert(QString("updated_date"), ::OpenAPI::toJsonValue(m_updated_date));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIArticle::getAbstract() const {
    return m_abstract;
}
void OAIArticle::setAbstract(const QString &abstract) {
    m_abstract = abstract;
    m_abstract_isSet = true;
}

bool OAIArticle::is_abstract_Set() const{
    return m_abstract_isSet;
}

bool OAIArticle::is_abstract_Valid() const{
    return m_abstract_isValid;
}

QString OAIArticle::getBlogName() const {
    return m_blog_name;
}
void OAIArticle::setBlogName(const QString &blog_name) {
    m_blog_name = blog_name;
    m_blog_name_isSet = true;
}

bool OAIArticle::is_blog_name_Set() const{
    return m_blog_name_isSet;
}

bool OAIArticle::is_blog_name_Valid() const{
    return m_blog_name_isValid;
}

QString OAIArticle::getByline() const {
    return m_byline;
}
void OAIArticle::setByline(const QString &byline) {
    m_byline = byline;
    m_byline_isSet = true;
}

bool OAIArticle::is_byline_Set() const{
    return m_byline_isSet;
}

bool OAIArticle::is_byline_Valid() const{
    return m_byline_isValid;
}

QString OAIArticle::getCreatedDate() const {
    return m_created_date;
}
void OAIArticle::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIArticle::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIArticle::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QList<QString> OAIArticle::getDesFacet() const {
    return m_des_facet;
}
void OAIArticle::setDesFacet(const QList<QString> &des_facet) {
    m_des_facet = des_facet;
    m_des_facet_isSet = true;
}

bool OAIArticle::is_des_facet_Set() const{
    return m_des_facet_isSet;
}

bool OAIArticle::is_des_facet_Valid() const{
    return m_des_facet_isValid;
}

QList<QString> OAIArticle::getGeoFacet() const {
    return m_geo_facet;
}
void OAIArticle::setGeoFacet(const QList<QString> &geo_facet) {
    m_geo_facet = geo_facet;
    m_geo_facet_isSet = true;
}

bool OAIArticle::is_geo_facet_Set() const{
    return m_geo_facet_isSet;
}

bool OAIArticle::is_geo_facet_Valid() const{
    return m_geo_facet_isValid;
}

QString OAIArticle::getHeadline() const {
    return m_headline;
}
void OAIArticle::setHeadline(const QString &headline) {
    m_headline = headline;
    m_headline_isSet = true;
}

bool OAIArticle::is_headline_Set() const{
    return m_headline_isSet;
}

bool OAIArticle::is_headline_Valid() const{
    return m_headline_isValid;
}

QString OAIArticle::getItemType() const {
    return m_item_type;
}
void OAIArticle::setItemType(const QString &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAIArticle::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAIArticle::is_item_type_Valid() const{
    return m_item_type_isValid;
}

QString OAIArticle::getKicker() const {
    return m_kicker;
}
void OAIArticle::setKicker(const QString &kicker) {
    m_kicker = kicker;
    m_kicker_isSet = true;
}

bool OAIArticle::is_kicker_Set() const{
    return m_kicker_isSet;
}

bool OAIArticle::is_kicker_Valid() const{
    return m_kicker_isValid;
}

QString OAIArticle::getMaterialTypeFacet() const {
    return m_material_type_facet;
}
void OAIArticle::setMaterialTypeFacet(const QString &material_type_facet) {
    m_material_type_facet = material_type_facet;
    m_material_type_facet_isSet = true;
}

bool OAIArticle::is_material_type_facet_Set() const{
    return m_material_type_facet_isSet;
}

bool OAIArticle::is_material_type_facet_Valid() const{
    return m_material_type_facet_isValid;
}

QList<OAIArticle_multimedia_inner> OAIArticle::getMultimedia() const {
    return m_multimedia;
}
void OAIArticle::setMultimedia(const QList<OAIArticle_multimedia_inner> &multimedia) {
    m_multimedia = multimedia;
    m_multimedia_isSet = true;
}

bool OAIArticle::is_multimedia_Set() const{
    return m_multimedia_isSet;
}

bool OAIArticle::is_multimedia_Valid() const{
    return m_multimedia_isValid;
}

QString OAIArticle::getOrgFacet() const {
    return m_org_facet;
}
void OAIArticle::setOrgFacet(const QString &org_facet) {
    m_org_facet = org_facet;
    m_org_facet_isSet = true;
}

bool OAIArticle::is_org_facet_Set() const{
    return m_org_facet_isSet;
}

bool OAIArticle::is_org_facet_Valid() const{
    return m_org_facet_isValid;
}

QList<QString> OAIArticle::getPerFacet() const {
    return m_per_facet;
}
void OAIArticle::setPerFacet(const QList<QString> &per_facet) {
    m_per_facet = per_facet;
    m_per_facet_isSet = true;
}

bool OAIArticle::is_per_facet_Set() const{
    return m_per_facet_isSet;
}

bool OAIArticle::is_per_facet_Valid() const{
    return m_per_facet_isValid;
}

QString OAIArticle::getPublishedDate() const {
    return m_published_date;
}
void OAIArticle::setPublishedDate(const QString &published_date) {
    m_published_date = published_date;
    m_published_date_isSet = true;
}

bool OAIArticle::is_published_date_Set() const{
    return m_published_date_isSet;
}

bool OAIArticle::is_published_date_Valid() const{
    return m_published_date_isValid;
}

QList<OAIArticle_related_urls_inner> OAIArticle::getRelatedUrls() const {
    return m_related_urls;
}
void OAIArticle::setRelatedUrls(const QList<OAIArticle_related_urls_inner> &related_urls) {
    m_related_urls = related_urls;
    m_related_urls_isSet = true;
}

bool OAIArticle::is_related_urls_Set() const{
    return m_related_urls_isSet;
}

bool OAIArticle::is_related_urls_Valid() const{
    return m_related_urls_isValid;
}

QString OAIArticle::getSection() const {
    return m_section;
}
void OAIArticle::setSection(const QString &section) {
    m_section = section;
    m_section_isSet = true;
}

bool OAIArticle::is_section_Set() const{
    return m_section_isSet;
}

bool OAIArticle::is_section_Valid() const{
    return m_section_isValid;
}

QString OAIArticle::getShortUrl() const {
    return m_short_url;
}
void OAIArticle::setShortUrl(const QString &short_url) {
    m_short_url = short_url;
    m_short_url_isSet = true;
}

bool OAIArticle::is_short_url_Set() const{
    return m_short_url_isSet;
}

bool OAIArticle::is_short_url_Valid() const{
    return m_short_url_isValid;
}

QString OAIArticle::getSource() const {
    return m_source;
}
void OAIArticle::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIArticle::is_source_Set() const{
    return m_source_isSet;
}

bool OAIArticle::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIArticle::getSubsection() const {
    return m_subsection;
}
void OAIArticle::setSubsection(const QString &subsection) {
    m_subsection = subsection;
    m_subsection_isSet = true;
}

bool OAIArticle::is_subsection_Set() const{
    return m_subsection_isSet;
}

bool OAIArticle::is_subsection_Valid() const{
    return m_subsection_isValid;
}

QString OAIArticle::getThumbnailStandard() const {
    return m_thumbnail_standard;
}
void OAIArticle::setThumbnailStandard(const QString &thumbnail_standard) {
    m_thumbnail_standard = thumbnail_standard;
    m_thumbnail_standard_isSet = true;
}

bool OAIArticle::is_thumbnail_standard_Set() const{
    return m_thumbnail_standard_isSet;
}

bool OAIArticle::is_thumbnail_standard_Valid() const{
    return m_thumbnail_standard_isValid;
}

QString OAIArticle::getTitle() const {
    return m_title;
}
void OAIArticle::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIArticle::is_title_Set() const{
    return m_title_isSet;
}

bool OAIArticle::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIArticle::getUpdatedDate() const {
    return m_updated_date;
}
void OAIArticle::setUpdatedDate(const QString &updated_date) {
    m_updated_date = updated_date;
    m_updated_date_isSet = true;
}

bool OAIArticle::is_updated_date_Set() const{
    return m_updated_date_isSet;
}

bool OAIArticle::is_updated_date_Valid() const{
    return m_updated_date_isValid;
}

QString OAIArticle::getUrl() const {
    return m_url;
}
void OAIArticle::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIArticle::is_url_Set() const{
    return m_url_isSet;
}

bool OAIArticle::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIArticle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abstract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blog_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_byline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_des_facet.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_facet.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kicker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_type_facet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multimedia.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_facet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_facet.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subsection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_standard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
