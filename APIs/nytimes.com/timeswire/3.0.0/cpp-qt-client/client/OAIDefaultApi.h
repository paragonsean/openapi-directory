/**
 * Times Newswire API
 * With the Times Newswire API, you can get links and metadata for Times articles and blog posts as soon as they are published on NYTimes.com. The Times Newswire API provides an up-to-the-minute stream of published items.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_content_json_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  url QString [required]
    */
    virtual void contentJsonGet(const QString &url);

    /**
    * @param[in]  source QString [required]
    * @param[in]  section QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void contentSourceSectionJsonGet(const QString &source, const QString &section, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  section QString [required]
    * @param[in]  time_period qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void contentSourceSectionTimePeriodJsonGet(const QString &source, const QString &section, const qint32 &time_period, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void contentJsonGetCallback(OAIHttpRequestWorker *worker);
    void contentSourceSectionJsonGetCallback(OAIHttpRequestWorker *worker);
    void contentSourceSectionTimePeriodJsonGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void contentJsonGetSignal(OAI_content_json_get_200_response summary);
    void contentSourceSectionJsonGetSignal(OAI_content_json_get_200_response summary);
    void contentSourceSectionTimePeriodJsonGetSignal(OAI_content_json_get_200_response summary);


    void contentJsonGetSignalFull(OAIHttpRequestWorker *worker, OAI_content_json_get_200_response summary);
    void contentSourceSectionJsonGetSignalFull(OAIHttpRequestWorker *worker, OAI_content_json_get_200_response summary);
    void contentSourceSectionTimePeriodJsonGetSignalFull(OAIHttpRequestWorker *worker, OAI_content_json_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use contentJsonGetSignalError() instead")
    void contentJsonGetSignalE(OAI_content_json_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentJsonGetSignalError(OAI_content_json_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSourceSectionJsonGetSignalError() instead")
    void contentSourceSectionJsonGetSignalE(OAI_content_json_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSourceSectionJsonGetSignalError(OAI_content_json_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSourceSectionTimePeriodJsonGetSignalError() instead")
    void contentSourceSectionTimePeriodJsonGetSignalE(OAI_content_json_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSourceSectionTimePeriodJsonGetSignalError(OAI_content_json_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use contentJsonGetSignalErrorFull() instead")
    void contentJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSourceSectionJsonGetSignalErrorFull() instead")
    void contentSourceSectionJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSourceSectionJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSourceSectionTimePeriodJsonGetSignalErrorFull() instead")
    void contentSourceSectionTimePeriodJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSourceSectionTimePeriodJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
