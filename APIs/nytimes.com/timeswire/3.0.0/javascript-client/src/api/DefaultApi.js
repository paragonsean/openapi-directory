/**
 * Times Newswire API
 * With the Times Newswire API, you can get links and metadata for Times articles and blog posts as soon as they are published on NYTimes.com. The Times Newswire API provides an up-to-the-minute stream of published items.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContentJsonGet200Response from '../model/ContentJsonGet200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 3.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentJsonGet operation.
     * @callback module:api/DefaultApi~contentJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentJsonGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} url The complete URL of a specific news item, URL-encoded or backslash-escaped
     * @param {module:api/DefaultApi~contentJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentJsonGet200Response}
     */
    contentJsonGet(url, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling contentJsonGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentJsonGet200Response;
      return this.apiClient.callApi(
        '/content.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSourceSectionJsonGet operation.
     * @callback module:api/DefaultApi~contentSourceSectionJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentJsonGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} source Limits the set of items by originating source  all = items from both The New York Times and The International New York Times nyt = New York Times items only iht = International New York Times items only 
     * @param {String} section Limits the set of items by one or more sections all | One or more section names, separated by semicolons   To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:  http://api.nytimes.com/svc/news/v3/content/section-list.json 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] Limits the number of results, between 1 and 20
     * @param {Number} [offset = 0)] Sets the starting point of the result set
     * @param {module:api/DefaultApi~contentSourceSectionJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentJsonGet200Response}
     */
    contentSourceSectionJsonGet(source, section, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling contentSourceSectionJsonGet");
      }
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling contentSourceSectionJsonGet");
      }

      let pathParams = {
        'source': source,
        'section': section
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentJsonGet200Response;
      return this.apiClient.callApi(
        '/content/{source}/{section}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSourceSectionTimePeriodJsonGet operation.
     * @callback module:api/DefaultApi~contentSourceSectionTimePeriodJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentJsonGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} source Limits the set of items by originating source  all = items from both The New York Times and The International New York Times nyt = New York Times items only iht = International New York Times items only 
     * @param {String} section Limits the set of items by one or more sections all | One or more section names, separated by semicolons   To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:  http://api.nytimes.com/svc/news/v3/content/section-list.json 
     * @param {Number} timePeriod Limits the set of items by time published, integer in number of hours
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] Limits the number of results, between 1 and 20
     * @param {Number} [offset = 0)] Sets the starting point of the result set
     * @param {module:api/DefaultApi~contentSourceSectionTimePeriodJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentJsonGet200Response}
     */
    contentSourceSectionTimePeriodJsonGet(source, section, timePeriod, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling contentSourceSectionTimePeriodJsonGet");
      }
      // verify the required parameter 'section' is set
      if (section === undefined || section === null) {
        throw new Error("Missing the required parameter 'section' when calling contentSourceSectionTimePeriodJsonGet");
      }
      // verify the required parameter 'timePeriod' is set
      if (timePeriod === undefined || timePeriod === null) {
        throw new Error("Missing the required parameter 'timePeriod' when calling contentSourceSectionTimePeriodJsonGet");
      }

      let pathParams = {
        'source': source,
        'section': section,
        'time-period': timePeriod
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentJsonGet200Response;
      return this.apiClient.callApi(
        '/content/{source}/{section}/{time-period}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
