/*
 * Times Newswire API
 * With the Times Newswire API, you can get links and metadata for Times articles and blog posts as soon as they are published on NYTimes.com. The Times Newswire API provides an up-to-the-minute stream of published items.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContentJsonGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for contentJsonGet
     * @param url The complete URL of a specific news item, URL-encoded or backslash-escaped (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Articles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentJsonGetCall(String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentJsonGetValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling contentJsonGet(Async)");
        }

        return contentJsonGetCall(url, _callback);

    }

    /**
     * 
     * 
     * @param url The complete URL of a specific news item, URL-encoded or backslash-escaped (required)
     * @return ContentJsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Articles </td><td>  -  </td></tr>
     </table>
     */
    public ContentJsonGet200Response contentJsonGet(String url) throws ApiException {
        ApiResponse<ContentJsonGet200Response> localVarResp = contentJsonGetWithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param url The complete URL of a specific news item, URL-encoded or backslash-escaped (required)
     * @return ApiResponse&lt;ContentJsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Articles </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentJsonGet200Response> contentJsonGetWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = contentJsonGetValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ContentJsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param url The complete URL of a specific news item, URL-encoded or backslash-escaped (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Articles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentJsonGetAsync(String url, final ApiCallback<ContentJsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentJsonGetValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ContentJsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSourceSectionJsonGet
     * @param source Limits the set of items by originating source  all &#x3D; items from both The New York Times and The International New York Times nyt &#x3D; New York Times items only iht &#x3D; International New York Times items only  (required)
     * @param section Limits the set of items by one or more sections all | One or more section names, separated by semicolons   To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:  http://api.nytimes.com/svc/news/v3/content/section-list.json  (required)
     * @param limit Limits the number of results, between 1 and 20 (optional, default to 20)
     * @param offset Sets the starting point of the result set (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Articles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSourceSectionJsonGetCall(String source, String section, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/{source}/{section}.json"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()))
            .replace("{" + "section" + "}", localVarApiClient.escapeString(section.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSourceSectionJsonGetValidateBeforeCall(String source, String section, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling contentSourceSectionJsonGet(Async)");
        }

        // verify the required parameter 'section' is set
        if (section == null) {
            throw new ApiException("Missing the required parameter 'section' when calling contentSourceSectionJsonGet(Async)");
        }

        return contentSourceSectionJsonGetCall(source, section, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param source Limits the set of items by originating source  all &#x3D; items from both The New York Times and The International New York Times nyt &#x3D; New York Times items only iht &#x3D; International New York Times items only  (required)
     * @param section Limits the set of items by one or more sections all | One or more section names, separated by semicolons   To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:  http://api.nytimes.com/svc/news/v3/content/section-list.json  (required)
     * @param limit Limits the number of results, between 1 and 20 (optional, default to 20)
     * @param offset Sets the starting point of the result set (optional, default to 0)
     * @return ContentJsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Articles </td><td>  -  </td></tr>
     </table>
     */
    public ContentJsonGet200Response contentSourceSectionJsonGet(String source, String section, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ContentJsonGet200Response> localVarResp = contentSourceSectionJsonGetWithHttpInfo(source, section, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param source Limits the set of items by originating source  all &#x3D; items from both The New York Times and The International New York Times nyt &#x3D; New York Times items only iht &#x3D; International New York Times items only  (required)
     * @param section Limits the set of items by one or more sections all | One or more section names, separated by semicolons   To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:  http://api.nytimes.com/svc/news/v3/content/section-list.json  (required)
     * @param limit Limits the number of results, between 1 and 20 (optional, default to 20)
     * @param offset Sets the starting point of the result set (optional, default to 0)
     * @return ApiResponse&lt;ContentJsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Articles </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentJsonGet200Response> contentSourceSectionJsonGetWithHttpInfo(String source, String section, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = contentSourceSectionJsonGetValidateBeforeCall(source, section, limit, offset, null);
        Type localVarReturnType = new TypeToken<ContentJsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param source Limits the set of items by originating source  all &#x3D; items from both The New York Times and The International New York Times nyt &#x3D; New York Times items only iht &#x3D; International New York Times items only  (required)
     * @param section Limits the set of items by one or more sections all | One or more section names, separated by semicolons   To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:  http://api.nytimes.com/svc/news/v3/content/section-list.json  (required)
     * @param limit Limits the number of results, between 1 and 20 (optional, default to 20)
     * @param offset Sets the starting point of the result set (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Articles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSourceSectionJsonGetAsync(String source, String section, Integer limit, Integer offset, final ApiCallback<ContentJsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSourceSectionJsonGetValidateBeforeCall(source, section, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ContentJsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSourceSectionTimePeriodJsonGet
     * @param source Limits the set of items by originating source  all &#x3D; items from both The New York Times and The International New York Times nyt &#x3D; New York Times items only iht &#x3D; International New York Times items only  (required)
     * @param section Limits the set of items by one or more sections all | One or more section names, separated by semicolons   To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:  http://api.nytimes.com/svc/news/v3/content/section-list.json  (required)
     * @param timePeriod Limits the set of items by time published, integer in number of hours (required)
     * @param limit Limits the number of results, between 1 and 20 (optional, default to 20)
     * @param offset Sets the starting point of the result set (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Articles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSourceSectionTimePeriodJsonGetCall(String source, String section, Integer timePeriod, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/{source}/{section}/{time-period}.json"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()))
            .replace("{" + "section" + "}", localVarApiClient.escapeString(section.toString()))
            .replace("{" + "time-period" + "}", localVarApiClient.escapeString(timePeriod.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSourceSectionTimePeriodJsonGetValidateBeforeCall(String source, String section, Integer timePeriod, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling contentSourceSectionTimePeriodJsonGet(Async)");
        }

        // verify the required parameter 'section' is set
        if (section == null) {
            throw new ApiException("Missing the required parameter 'section' when calling contentSourceSectionTimePeriodJsonGet(Async)");
        }

        // verify the required parameter 'timePeriod' is set
        if (timePeriod == null) {
            throw new ApiException("Missing the required parameter 'timePeriod' when calling contentSourceSectionTimePeriodJsonGet(Async)");
        }

        return contentSourceSectionTimePeriodJsonGetCall(source, section, timePeriod, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param source Limits the set of items by originating source  all &#x3D; items from both The New York Times and The International New York Times nyt &#x3D; New York Times items only iht &#x3D; International New York Times items only  (required)
     * @param section Limits the set of items by one or more sections all | One or more section names, separated by semicolons   To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:  http://api.nytimes.com/svc/news/v3/content/section-list.json  (required)
     * @param timePeriod Limits the set of items by time published, integer in number of hours (required)
     * @param limit Limits the number of results, between 1 and 20 (optional, default to 20)
     * @param offset Sets the starting point of the result set (optional, default to 0)
     * @return ContentJsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Articles </td><td>  -  </td></tr>
     </table>
     */
    public ContentJsonGet200Response contentSourceSectionTimePeriodJsonGet(String source, String section, Integer timePeriod, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ContentJsonGet200Response> localVarResp = contentSourceSectionTimePeriodJsonGetWithHttpInfo(source, section, timePeriod, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param source Limits the set of items by originating source  all &#x3D; items from both The New York Times and The International New York Times nyt &#x3D; New York Times items only iht &#x3D; International New York Times items only  (required)
     * @param section Limits the set of items by one or more sections all | One or more section names, separated by semicolons   To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:  http://api.nytimes.com/svc/news/v3/content/section-list.json  (required)
     * @param timePeriod Limits the set of items by time published, integer in number of hours (required)
     * @param limit Limits the number of results, between 1 and 20 (optional, default to 20)
     * @param offset Sets the starting point of the result set (optional, default to 0)
     * @return ApiResponse&lt;ContentJsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Articles </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentJsonGet200Response> contentSourceSectionTimePeriodJsonGetWithHttpInfo(String source, String section, Integer timePeriod, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = contentSourceSectionTimePeriodJsonGetValidateBeforeCall(source, section, timePeriod, limit, offset, null);
        Type localVarReturnType = new TypeToken<ContentJsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param source Limits the set of items by originating source  all &#x3D; items from both The New York Times and The International New York Times nyt &#x3D; New York Times items only iht &#x3D; International New York Times items only  (required)
     * @param section Limits the set of items by one or more sections all | One or more section names, separated by semicolons   To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:  http://api.nytimes.com/svc/news/v3/content/section-list.json  (required)
     * @param timePeriod Limits the set of items by time published, integer in number of hours (required)
     * @param limit Limits the number of results, between 1 and 20 (optional, default to 20)
     * @param offset Sets the starting point of the result set (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Articles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSourceSectionTimePeriodJsonGetAsync(String source, String section, Integer timePeriod, Integer limit, Integer offset, final ApiCallback<ContentJsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSourceSectionTimePeriodJsonGetValidateBeforeCall(source, section, timePeriod, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ContentJsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
