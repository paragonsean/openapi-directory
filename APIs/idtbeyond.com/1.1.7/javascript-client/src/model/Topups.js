/**
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Topups model module.
 * @module model/Topups
 * @version 1.1.7
 */
class Topups {
    /**
     * Constructs a new <code>Topups</code>.
     * @alias module:model/Topups
     */
    constructor() { 
        
        Topups.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['carrier_code'] = 'Claro';
        obj['client_transaction_id'] = '';
        obj['country_code'] = 'GT';
        obj['mobile_number'] = '50231234567';
        obj['plan'] = 'Sandbox';
        obj['product_code'] = '';
        obj['terminal_id'] = 'Kiosk 5';
    }

    /**
     * Constructs a <code>Topups</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Topups} obj Optional instance to populate.
     * @return {module:model/Topups} The populated <code>Topups</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Topups();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('carrier_code')) {
                obj['carrier_code'] = ApiClient.convertToType(data['carrier_code'], 'String');
            }
            if (data.hasOwnProperty('client_transaction_id')) {
                obj['client_transaction_id'] = ApiClient.convertToType(data['client_transaction_id'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('mobile_number')) {
                obj['mobile_number'] = ApiClient.convertToType(data['mobile_number'], 'String');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = ApiClient.convertToType(data['plan'], 'String');
            }
            if (data.hasOwnProperty('product_code')) {
                obj['product_code'] = ApiClient.convertToType(data['product_code'], 'String');
            }
            if (data.hasOwnProperty('terminal_id')) {
                obj['terminal_id'] = ApiClient.convertToType(data['terminal_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Topups</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Topups</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['carrier_code'] && !(typeof data['carrier_code'] === 'string' || data['carrier_code'] instanceof String)) {
            throw new Error("Expected the field `carrier_code` to be a primitive type in the JSON string but got " + data['carrier_code']);
        }
        // ensure the json data is a string
        if (data['client_transaction_id'] && !(typeof data['client_transaction_id'] === 'string' || data['client_transaction_id'] instanceof String)) {
            throw new Error("Expected the field `client_transaction_id` to be a primitive type in the JSON string but got " + data['client_transaction_id']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['mobile_number'] && !(typeof data['mobile_number'] === 'string' || data['mobile_number'] instanceof String)) {
            throw new Error("Expected the field `mobile_number` to be a primitive type in the JSON string but got " + data['mobile_number']);
        }
        // ensure the json data is a string
        if (data['plan'] && !(typeof data['plan'] === 'string' || data['plan'] instanceof String)) {
            throw new Error("Expected the field `plan` to be a primitive type in the JSON string but got " + data['plan']);
        }
        // ensure the json data is a string
        if (data['product_code'] && !(typeof data['product_code'] === 'string' || data['product_code'] instanceof String)) {
            throw new Error("Expected the field `product_code` to be a primitive type in the JSON string but got " + data['product_code']);
        }
        // ensure the json data is a string
        if (data['terminal_id'] && !(typeof data['terminal_id'] === 'string' || data['terminal_id'] instanceof String)) {
            throw new Error("Expected the field `terminal_id` to be a primitive type in the JSON string but got " + data['terminal_id']);
        }

        return true;
    }


}



/**
 * The amount, in cents, of the product you are purchasing. '500' = $5.00
 * @member {Number} amount
 */
Topups.prototype['amount'] = undefined;

/**
 * Name of the mobile carrier. 'Claro'
 * @member {String} carrier_code
 * @default 'Claro'
 */
Topups.prototype['carrier_code'] = 'Claro';

/**
 * UNIQUE 15 char ID you use to track topups. 'trans0123456789'
 * @member {String} client_transaction_id
 * @default ''
 */
Topups.prototype['client_transaction_id'] = '';

/**
 * 2-digit code of the country in ISO 3166 format. 'GT'
 * @member {String} country_code
 * @default 'GT'
 */
Topups.prototype['country_code'] = 'GT';

/**
 * Mobile number to topup. VALIDATE prior to submission. '50231234567'
 * @member {String} mobile_number
 * @default '50231234567'
 */
Topups.prototype['mobile_number'] = '50231234567';

/**
 * The Application plan being used. Case-sensitive. 'Sandbox' or 'Production'
 * @member {String} plan
 * @default 'Sandbox'
 */
Topups.prototype['plan'] = 'Sandbox';

/**
 * Optional code to distinguish one particular product from another. '76560'
 * @member {String} product_code
 * @default ''
 */
Topups.prototype['product_code'] = '';

/**
 * ID for the Terminal used to perform the topup. 'Kiosk 5'
 * @member {String} terminal_id
 * @default 'Kiosk 5'
 */
Topups.prototype['terminal_id'] = 'Kiosk 5';






export default Topups;

