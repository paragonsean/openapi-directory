/**
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Topups from '../model/Topups';
import TopupsReports from '../model/TopupsReports';
import TopupsReversal from '../model/TopupsReversal';

/**
* Topups service.
* @module api/TopupsApi
* @version 1.1.7
*/
export default class TopupsApi {

    /**
    * Constructs a new TopupsApi. 
    * @alias module:api/TopupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the iatuTopupsPost operation.
     * @callback module:api/TopupsApi~iatuTopupsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Topup a mobile phone
     * Submits an IATU transaction request.
     * @param {String} xIdtBeyondAppId Application ID you would like to use
     * @param {String} xIdtBeyondAppKey Application KEY you would like to use
     * @param {module:model/Topups} body Topups details
     * @param {module:api/TopupsApi~iatuTopupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iatuTopupsPost(xIdtBeyondAppId, xIdtBeyondAppKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xIdtBeyondAppId' is set
      if (xIdtBeyondAppId === undefined || xIdtBeyondAppId === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppId' when calling iatuTopupsPost");
      }
      // verify the required parameter 'xIdtBeyondAppKey' is set
      if (xIdtBeyondAppKey === undefined || xIdtBeyondAppKey === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuTopupsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling iatuTopupsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idt-beyond-app-id': xIdtBeyondAppId,
        'x-idt-beyond-app-key': xIdtBeyondAppKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/iatu/topups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iatuTopupsReportsAllCsvGet operation.
     * @callback module:api/TopupsApi~iatuTopupsReportsAllCsvGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of account topups in CSV
     * Returns topups by date range in CSV.
     * @param {String} xIdtBeyondAppId Application ID you would like to use
     * @param {String} xIdtBeyondAppKey Application KEY you would like to use
     * @param {String} dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). '2016-01-28'
     * @param {String} dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). '2016-01-28'
     * @param {module:api/TopupsApi~iatuTopupsReportsAllCsvGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iatuTopupsReportsAllCsvGet(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, callback) {
      let postBody = null;
      // verify the required parameter 'xIdtBeyondAppId' is set
      if (xIdtBeyondAppId === undefined || xIdtBeyondAppId === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppId' when calling iatuTopupsReportsAllCsvGet");
      }
      // verify the required parameter 'xIdtBeyondAppKey' is set
      if (xIdtBeyondAppKey === undefined || xIdtBeyondAppKey === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuTopupsReportsAllCsvGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling iatuTopupsReportsAllCsvGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling iatuTopupsReportsAllCsvGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'date_from': dateFrom,
        'date_to': dateTo
      };
      let headerParams = {
        'x-idt-beyond-app-id': xIdtBeyondAppId,
        'x-idt-beyond-app-key': xIdtBeyondAppKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/iatu/topups/reports/all.csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iatuTopupsReportsAllGet operation.
     * @callback module:api/TopupsApi~iatuTopupsReportsAllGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of account topups in JSON
     * Returns topups by date range.
     * @param {String} xIdtBeyondAppId Application ID you would like to use
     * @param {String} xIdtBeyondAppKey Application KEY you would like to use
     * @param {String} dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). '2016-01-28'
     * @param {String} dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). '2016-01-28'
     * @param {module:api/TopupsApi~iatuTopupsReportsAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iatuTopupsReportsAllGet(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, callback) {
      let postBody = null;
      // verify the required parameter 'xIdtBeyondAppId' is set
      if (xIdtBeyondAppId === undefined || xIdtBeyondAppId === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppId' when calling iatuTopupsReportsAllGet");
      }
      // verify the required parameter 'xIdtBeyondAppKey' is set
      if (xIdtBeyondAppKey === undefined || xIdtBeyondAppKey === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuTopupsReportsAllGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling iatuTopupsReportsAllGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling iatuTopupsReportsAllGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'date_from': dateFrom,
        'date_to': dateTo
      };
      let headerParams = {
        'x-idt-beyond-app-id': xIdtBeyondAppId,
        'x-idt-beyond-app-key': xIdtBeyondAppKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/iatu/topups/reports/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iatuTopupsReportsPost operation.
     * @callback module:api/TopupsApi~iatuTopupsReportsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search topups transactions
     * Search topups transactions, by date, with client_transaction_id or to_service_number. Use 'client_transaction_id' to search by transaction number, or 'to_service_number' to get transaction status.
     * @param {String} xIdtBeyondAppId Application ID you would like to use
     * @param {String} xIdtBeyondAppKey Application KEY you would like to use
     * @param {module:model/TopupsReports} body Topups reports request details
     * @param {module:api/TopupsApi~iatuTopupsReportsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iatuTopupsReportsPost(xIdtBeyondAppId, xIdtBeyondAppKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xIdtBeyondAppId' is set
      if (xIdtBeyondAppId === undefined || xIdtBeyondAppId === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppId' when calling iatuTopupsReportsPost");
      }
      // verify the required parameter 'xIdtBeyondAppKey' is set
      if (xIdtBeyondAppKey === undefined || xIdtBeyondAppKey === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuTopupsReportsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling iatuTopupsReportsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idt-beyond-app-id': xIdtBeyondAppId,
        'x-idt-beyond-app-key': xIdtBeyondAppKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/iatu/topups/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iatuTopupsReportsTotalsGet operation.
     * @callback module:api/TopupsApi~iatuTopupsReportsTotalsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summary of account topups in JSON
     * Returns topups totals by date range.
     * @param {String} xIdtBeyondAppId Application ID you would like to use
     * @param {String} xIdtBeyondAppKey Application KEY you would like to use
     * @param {String} dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). '2016-01-28'
     * @param {String} dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). '2016-01-28'
     * @param {module:api/TopupsApi~iatuTopupsReportsTotalsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iatuTopupsReportsTotalsGet(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, callback) {
      let postBody = null;
      // verify the required parameter 'xIdtBeyondAppId' is set
      if (xIdtBeyondAppId === undefined || xIdtBeyondAppId === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppId' when calling iatuTopupsReportsTotalsGet");
      }
      // verify the required parameter 'xIdtBeyondAppKey' is set
      if (xIdtBeyondAppKey === undefined || xIdtBeyondAppKey === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuTopupsReportsTotalsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling iatuTopupsReportsTotalsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling iatuTopupsReportsTotalsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'date_from': dateFrom,
        'date_to': dateTo
      };
      let headerParams = {
        'x-idt-beyond-app-id': xIdtBeyondAppId,
        'x-idt-beyond-app-key': xIdtBeyondAppKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/iatu/topups/reports/totals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iatuTopupsReversePost operation.
     * @callback module:api/TopupsApi~iatuTopupsReversePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reversal of a Topup
     * Occasionally, a carrier will not be able to successfully complete a topup request. In this case, we will attempt to automatically reverse the transaction for you, and return the money into your account. In the case when this is not possible, you may need to request a reverse on the transaction that has a status of 'transaction_status' 'notredeemed'.
     * @param {String} xIdtBeyondAppId Application ID you would like to use
     * @param {String} xIdtBeyondAppKey Application KEY you would like to use
     * @param {module:model/TopupsReversal} body Topups details
     * @param {module:api/TopupsApi~iatuTopupsReversePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iatuTopupsReversePost(xIdtBeyondAppId, xIdtBeyondAppKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'xIdtBeyondAppId' is set
      if (xIdtBeyondAppId === undefined || xIdtBeyondAppId === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppId' when calling iatuTopupsReversePost");
      }
      // verify the required parameter 'xIdtBeyondAppKey' is set
      if (xIdtBeyondAppKey === undefined || xIdtBeyondAppKey === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuTopupsReversePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling iatuTopupsReversePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idt-beyond-app-id': xIdtBeyondAppId,
        'x-idt-beyond-app-key': xIdtBeyondAppKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/iatu/topups/reverse', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
