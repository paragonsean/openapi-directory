/**
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Products service.
* @module api/ProductsApi
* @version 1.1.7
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the iatuProductsReportsAllCsvGet operation.
     * @callback module:api/ProductsApi~iatuProductsReportsAllCsvGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of products in CSV format
     * Returns a CSV of products, ranges, and their commissions percentages.
     * @param {String} xIdtBeyondAppId Application ID you would like to use
     * @param {String} xIdtBeyondAppKey Application KEY you would like to use
     * @param {module:api/ProductsApi~iatuProductsReportsAllCsvGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iatuProductsReportsAllCsvGet(xIdtBeyondAppId, xIdtBeyondAppKey, callback) {
      let postBody = null;
      // verify the required parameter 'xIdtBeyondAppId' is set
      if (xIdtBeyondAppId === undefined || xIdtBeyondAppId === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppId' when calling iatuProductsReportsAllCsvGet");
      }
      // verify the required parameter 'xIdtBeyondAppKey' is set
      if (xIdtBeyondAppKey === undefined || xIdtBeyondAppKey === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuProductsReportsAllCsvGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idt-beyond-app-id': xIdtBeyondAppId,
        'x-idt-beyond-app-key': xIdtBeyondAppKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/iatu/products/reports/all.csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iatuProductsReportsAllGet operation.
     * @callback module:api/ProductsApi~iatuProductsReportsAllGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of products in JSON format
     * Returns a JSON list of products, ranges, and their commissions percentages.
     * @param {String} xIdtBeyondAppId Application ID you would like to use
     * @param {String} xIdtBeyondAppKey Application KEY you would like to use
     * @param {module:api/ProductsApi~iatuProductsReportsAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iatuProductsReportsAllGet(xIdtBeyondAppId, xIdtBeyondAppKey, callback) {
      let postBody = null;
      // verify the required parameter 'xIdtBeyondAppId' is set
      if (xIdtBeyondAppId === undefined || xIdtBeyondAppId === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppId' when calling iatuProductsReportsAllGet");
      }
      // verify the required parameter 'xIdtBeyondAppKey' is set
      if (xIdtBeyondAppKey === undefined || xIdtBeyondAppKey === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuProductsReportsAllGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idt-beyond-app-id': xIdtBeyondAppId,
        'x-idt-beyond-app-key': xIdtBeyondAppKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/iatu/products/reports/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iatuProductsReportsLocalValueGet operation.
     * @callback module:api/ProductsApi~iatuProductsReportsLocalValueGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the estimated Local Value of a product
     * Returns a CSV of products, ranges, and their commissions percentages.
     * @param {String} xIdtBeyondAppId Application ID you would like to use
     * @param {String} xIdtBeyondAppKey Application KEY you would like to use
     * @param {String} countryCode 2-digit code of the country in ISO 3166 format. 'GT'
     * @param {String} carrierCode Name of the mobile carrier. 'Claro'
     * @param {Number} amount This is the amount, in cents, of the product you are purchasing. '500' = $5.00
     * @param {String} currencyCode The currency code (ISO 4217) on the product you are querying. 'USD'
     * @param {module:api/ProductsApi~iatuProductsReportsLocalValueGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iatuProductsReportsLocalValueGet(xIdtBeyondAppId, xIdtBeyondAppKey, countryCode, carrierCode, amount, currencyCode, callback) {
      let postBody = null;
      // verify the required parameter 'xIdtBeyondAppId' is set
      if (xIdtBeyondAppId === undefined || xIdtBeyondAppId === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppId' when calling iatuProductsReportsLocalValueGet");
      }
      // verify the required parameter 'xIdtBeyondAppKey' is set
      if (xIdtBeyondAppKey === undefined || xIdtBeyondAppKey === null) {
        throw new Error("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuProductsReportsLocalValueGet");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling iatuProductsReportsLocalValueGet");
      }
      // verify the required parameter 'carrierCode' is set
      if (carrierCode === undefined || carrierCode === null) {
        throw new Error("Missing the required parameter 'carrierCode' when calling iatuProductsReportsLocalValueGet");
      }
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling iatuProductsReportsLocalValueGet");
      }
      // verify the required parameter 'currencyCode' is set
      if (currencyCode === undefined || currencyCode === null) {
        throw new Error("Missing the required parameter 'currencyCode' when calling iatuProductsReportsLocalValueGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'country_code': countryCode,
        'carrier_code': carrierCode,
        'amount': amount,
        'currency_code': currencyCode
      };
      let headerParams = {
        'x-idt-beyond-app-id': xIdtBeyondAppId,
        'x-idt-beyond-app-key': xIdtBeyondAppKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/iatu/products/reports/local-value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
