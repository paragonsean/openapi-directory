/**
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Topups from './model/Topups';
import TopupsReports from './model/TopupsReports';
import TopupsReversal from './model/TopupsReversal';
import AccountApi from './api/AccountApi';
import ChargesApi from './api/ChargesApi';
import ProductsApi from './api/ProductsApi';
import TopupsApi from './api/TopupsApi';
import UtilitiesApi from './api/UtilitiesApi';


/**
* Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ActiveDocumentationForV1 = require('index'); // See note below*.
* var xxxSvc = new ActiveDocumentationForV1.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ActiveDocumentationForV1.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ActiveDocumentationForV1.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ActiveDocumentationForV1.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.1.7
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Topups model constructor.
     * @property {module:model/Topups}
     */
    Topups,

    /**
     * The TopupsReports model constructor.
     * @property {module:model/TopupsReports}
     */
    TopupsReports,

    /**
     * The TopupsReversal model constructor.
     * @property {module:model/TopupsReversal}
     */
    TopupsReversal,

    /**
    * The AccountApi service constructor.
    * @property {module:api/AccountApi}
    */
    AccountApi,

    /**
    * The ChargesApi service constructor.
    * @property {module:api/ChargesApi}
    */
    ChargesApi,

    /**
    * The ProductsApi service constructor.
    * @property {module:api/ProductsApi}
    */
    ProductsApi,

    /**
    * The TopupsApi service constructor.
    * @property {module:api/TopupsApi}
    */
    TopupsApi,

    /**
    * The UtilitiesApi service constructor.
    * @property {module:api/UtilitiesApi}
    */
    UtilitiesApi
};
