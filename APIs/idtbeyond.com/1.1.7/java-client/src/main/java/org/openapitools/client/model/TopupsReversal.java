/*
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TopupsReversal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:03.305151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TopupsReversal {
  public static final String SERIALIZED_NAME_CLIENT_TRANSACTION_ID = "client_transaction_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_TRANSACTION_ID)
  private String clientTransactionId = "trans0123456789";

  public static final String SERIALIZED_NAME_TO_SERVICE_NUMBER = "to_service_number";
  @SerializedName(SERIALIZED_NAME_TO_SERVICE_NUMBER)
  private String toServiceNumber = "123456789";

  public TopupsReversal() {
  }

  public TopupsReversal clientTransactionId(String clientTransactionId) {
    this.clientTransactionId = clientTransactionId;
    return this;
  }

  /**
   * UNIQUE 15 char ID you use to track topups. &#39;trans0123456789&#39;
   * @return clientTransactionId
   */
  @javax.annotation.Nullable
  public String getClientTransactionId() {
    return clientTransactionId;
  }

  public void setClientTransactionId(String clientTransactionId) {
    this.clientTransactionId = clientTransactionId;
  }


  public TopupsReversal toServiceNumber(String toServiceNumber) {
    this.toServiceNumber = toServiceNumber;
    return this;
  }

  /**
   * UNIQUE IDT transaction number found in the response of a successful topup request. &#39;0123456789&#39;
   * @return toServiceNumber
   */
  @javax.annotation.Nullable
  public String getToServiceNumber() {
    return toServiceNumber;
  }

  public void setToServiceNumber(String toServiceNumber) {
    this.toServiceNumber = toServiceNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopupsReversal topupsReversal = (TopupsReversal) o;
    return Objects.equals(this.clientTransactionId, topupsReversal.clientTransactionId) &&
        Objects.equals(this.toServiceNumber, topupsReversal.toServiceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientTransactionId, toServiceNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopupsReversal {\n");
    sb.append("    clientTransactionId: ").append(toIndentedString(clientTransactionId)).append("\n");
    sb.append("    toServiceNumber: ").append(toIndentedString(toServiceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_transaction_id");
    openapiFields.add("to_service_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TopupsReversal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopupsReversal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopupsReversal is not found in the empty JSON string", TopupsReversal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopupsReversal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopupsReversal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_transaction_id") != null && !jsonObj.get("client_transaction_id").isJsonNull()) && !jsonObj.get("client_transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_transaction_id").toString()));
      }
      if ((jsonObj.get("to_service_number") != null && !jsonObj.get("to_service_number").isJsonNull()) && !jsonObj.get("to_service_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_service_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_service_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopupsReversal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopupsReversal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopupsReversal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopupsReversal.class));

       return (TypeAdapter<T>) new TypeAdapter<TopupsReversal>() {
           @Override
           public void write(JsonWriter out, TopupsReversal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopupsReversal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TopupsReversal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TopupsReversal
   * @throws IOException if the JSON string is invalid with respect to TopupsReversal
   */
  public static TopupsReversal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopupsReversal.class);
  }

  /**
   * Convert an instance of TopupsReversal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

