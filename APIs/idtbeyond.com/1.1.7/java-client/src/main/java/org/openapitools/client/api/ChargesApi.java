/*
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChargesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChargesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChargesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for iatuChargesReportsAllCsvGet
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful charges CSV response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuChargesReportsAllCsvGetCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iatu/charges/reports/all.csv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuChargesReportsAllCsvGetValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuChargesReportsAllCsvGet(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuChargesReportsAllCsvGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling iatuChargesReportsAllCsvGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling iatuChargesReportsAllCsvGet(Async)");
        }

        return iatuChargesReportsAllCsvGetCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, _callback);

    }

    /**
     * List of account charges in CSV
     * Returns charges by date range in CSV.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful charges CSV response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuChargesReportsAllCsvGet(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo) throws ApiException {
        iatuChargesReportsAllCsvGetWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo);
    }

    /**
     * List of account charges in CSV
     * Returns charges by date range in CSV.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful charges CSV response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuChargesReportsAllCsvGetWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo) throws ApiException {
        okhttp3.Call localVarCall = iatuChargesReportsAllCsvGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List of account charges in CSV (asynchronously)
     * Returns charges by date range in CSV.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful charges CSV response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuChargesReportsAllCsvGetAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuChargesReportsAllCsvGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iatuChargesReportsAllGet
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful charges JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuChargesReportsAllGetCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iatu/charges/reports/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuChargesReportsAllGetValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuChargesReportsAllGet(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuChargesReportsAllGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling iatuChargesReportsAllGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling iatuChargesReportsAllGet(Async)");
        }

        return iatuChargesReportsAllGetCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, _callback);

    }

    /**
     * List of account charges in JSON
     * Returns charges by date range.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful charges JSON response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuChargesReportsAllGet(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo) throws ApiException {
        iatuChargesReportsAllGetWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo);
    }

    /**
     * List of account charges in JSON
     * Returns charges by date range.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful charges JSON response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuChargesReportsAllGetWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo) throws ApiException {
        okhttp3.Call localVarCall = iatuChargesReportsAllGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List of account charges in JSON (asynchronously)
     * Returns charges by date range.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful charges JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuChargesReportsAllGetAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuChargesReportsAllGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
