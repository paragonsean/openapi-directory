/*
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Topups;
import org.openapitools.client.model.TopupsReports;
import org.openapitools.client.model.TopupsReversal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TopupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TopupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for iatuTopupsPost
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param body Topups details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The transaction has been completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The transaction has been received, but the final status is unknown. Please query by the client_transaction_id to get the current status of the transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> X not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There is an error in your transaction. Please check the error code contained in the result for more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuTopupsPostCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, Topups body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/iatu/topups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuTopupsPostValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, Topups body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuTopupsPost(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuTopupsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling iatuTopupsPost(Async)");
        }

        return iatuTopupsPostCall(xIdtBeyondAppId, xIdtBeyondAppKey, body, _callback);

    }

    /**
     * Topup a mobile phone
     * Submits an IATU transaction request.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param body Topups details (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The transaction has been completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The transaction has been received, but the final status is unknown. Please query by the client_transaction_id to get the current status of the transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> X not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There is an error in your transaction. Please check the error code contained in the result for more information. </td><td>  -  </td></tr>
     </table>
     */
    public void iatuTopupsPost(String xIdtBeyondAppId, String xIdtBeyondAppKey, Topups body) throws ApiException {
        iatuTopupsPostWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey, body);
    }

    /**
     * Topup a mobile phone
     * Submits an IATU transaction request.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param body Topups details (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The transaction has been completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The transaction has been received, but the final status is unknown. Please query by the client_transaction_id to get the current status of the transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> X not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There is an error in your transaction. Please check the error code contained in the result for more information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuTopupsPostWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey, Topups body) throws ApiException {
        okhttp3.Call localVarCall = iatuTopupsPostValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Topup a mobile phone (asynchronously)
     * Submits an IATU transaction request.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param body Topups details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The transaction has been completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The transaction has been received, but the final status is unknown. Please query by the client_transaction_id to get the current status of the transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> X not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There is an error in your transaction. Please check the error code contained in the result for more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuTopupsPostAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, Topups body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuTopupsPostValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iatuTopupsReportsAllCsvGet
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups CSV response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuTopupsReportsAllCsvGetCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iatu/topups/reports/all.csv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuTopupsReportsAllCsvGetValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuTopupsReportsAllCsvGet(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuTopupsReportsAllCsvGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling iatuTopupsReportsAllCsvGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling iatuTopupsReportsAllCsvGet(Async)");
        }

        return iatuTopupsReportsAllCsvGetCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, _callback);

    }

    /**
     * List of account topups in CSV
     * Returns topups by date range in CSV.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups CSV response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuTopupsReportsAllCsvGet(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo) throws ApiException {
        iatuTopupsReportsAllCsvGetWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo);
    }

    /**
     * List of account topups in CSV
     * Returns topups by date range in CSV.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups CSV response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuTopupsReportsAllCsvGetWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo) throws ApiException {
        okhttp3.Call localVarCall = iatuTopupsReportsAllCsvGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List of account topups in CSV (asynchronously)
     * Returns topups by date range in CSV.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups CSV response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuTopupsReportsAllCsvGetAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuTopupsReportsAllCsvGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iatuTopupsReportsAllGet
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuTopupsReportsAllGetCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iatu/topups/reports/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuTopupsReportsAllGetValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuTopupsReportsAllGet(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuTopupsReportsAllGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling iatuTopupsReportsAllGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling iatuTopupsReportsAllGet(Async)");
        }

        return iatuTopupsReportsAllGetCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, _callback);

    }

    /**
     * List of account topups in JSON
     * Returns topups by date range.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups JSON response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuTopupsReportsAllGet(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo) throws ApiException {
        iatuTopupsReportsAllGetWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo);
    }

    /**
     * List of account topups in JSON
     * Returns topups by date range.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups JSON response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuTopupsReportsAllGetWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo) throws ApiException {
        okhttp3.Call localVarCall = iatuTopupsReportsAllGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List of account topups in JSON (asynchronously)
     * Returns topups by date range.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuTopupsReportsAllGetAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuTopupsReportsAllGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iatuTopupsReportsPost
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param body Topups reports request details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuTopupsReportsPostCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, TopupsReports body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/iatu/topups/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuTopupsReportsPostValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, TopupsReports body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuTopupsReportsPost(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuTopupsReportsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling iatuTopupsReportsPost(Async)");
        }

        return iatuTopupsReportsPostCall(xIdtBeyondAppId, xIdtBeyondAppKey, body, _callback);

    }

    /**
     * Search topups transactions
     * Search topups transactions, by date, with client_transaction_id or to_service_number. Use &#39;client_transaction_id&#39; to search by transaction number, or &#39;to_service_number&#39; to get transaction status.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param body Topups reports request details (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups JSON response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuTopupsReportsPost(String xIdtBeyondAppId, String xIdtBeyondAppKey, TopupsReports body) throws ApiException {
        iatuTopupsReportsPostWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey, body);
    }

    /**
     * Search topups transactions
     * Search topups transactions, by date, with client_transaction_id or to_service_number. Use &#39;client_transaction_id&#39; to search by transaction number, or &#39;to_service_number&#39; to get transaction status.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param body Topups reports request details (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups JSON response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuTopupsReportsPostWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey, TopupsReports body) throws ApiException {
        okhttp3.Call localVarCall = iatuTopupsReportsPostValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search topups transactions (asynchronously)
     * Search topups transactions, by date, with client_transaction_id or to_service_number. Use &#39;client_transaction_id&#39; to search by transaction number, or &#39;to_service_number&#39; to get transaction status.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param body Topups reports request details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuTopupsReportsPostAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, TopupsReports body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuTopupsReportsPostValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iatuTopupsReportsTotalsGet
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuTopupsReportsTotalsGetCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iatu/topups/reports/totals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuTopupsReportsTotalsGetValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuTopupsReportsTotalsGet(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuTopupsReportsTotalsGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling iatuTopupsReportsTotalsGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling iatuTopupsReportsTotalsGet(Async)");
        }

        return iatuTopupsReportsTotalsGetCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, _callback);

    }

    /**
     * Summary of account topups in JSON
     * Returns topups totals by date range.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups JSON response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuTopupsReportsTotalsGet(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo) throws ApiException {
        iatuTopupsReportsTotalsGetWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo);
    }

    /**
     * Summary of account topups in JSON
     * Returns topups totals by date range.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups JSON response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuTopupsReportsTotalsGetWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo) throws ApiException {
        okhttp3.Call localVarCall = iatuTopupsReportsTotalsGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Summary of account topups in JSON (asynchronously)
     * Returns topups totals by date range.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param dateFrom The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param dateTo The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). &#39;2016-01-28&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful topups JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuTopupsReportsTotalsGetAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, String dateFrom, String dateTo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuTopupsReportsTotalsGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, dateFrom, dateTo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iatuTopupsReversePost
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param body Topups details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful charges JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuTopupsReversePostCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, TopupsReversal body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/iatu/topups/reverse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuTopupsReversePostValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, TopupsReversal body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuTopupsReversePost(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuTopupsReversePost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling iatuTopupsReversePost(Async)");
        }

        return iatuTopupsReversePostCall(xIdtBeyondAppId, xIdtBeyondAppKey, body, _callback);

    }

    /**
     * Reversal of a Topup
     * Occasionally, a carrier will not be able to successfully complete a topup request. In this case, we will attempt to automatically reverse the transaction for you, and return the money into your account. In the case when this is not possible, you may need to request a reverse on the transaction that has a status of &#39;transaction_status&#39; &#39;notredeemed&#39;.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param body Topups details (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful charges JSON response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuTopupsReversePost(String xIdtBeyondAppId, String xIdtBeyondAppKey, TopupsReversal body) throws ApiException {
        iatuTopupsReversePostWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey, body);
    }

    /**
     * Reversal of a Topup
     * Occasionally, a carrier will not be able to successfully complete a topup request. In this case, we will attempt to automatically reverse the transaction for you, and return the money into your account. In the case when this is not possible, you may need to request a reverse on the transaction that has a status of &#39;transaction_status&#39; &#39;notredeemed&#39;.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param body Topups details (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful charges JSON response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuTopupsReversePostWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey, TopupsReversal body) throws ApiException {
        okhttp3.Call localVarCall = iatuTopupsReversePostValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reversal of a Topup (asynchronously)
     * Occasionally, a carrier will not be able to successfully complete a topup request. In this case, we will attempt to automatically reverse the transaction for you, and return the money into your account. In the case when this is not possible, you may need to request a reverse on the transaction that has a status of &#39;transaction_status&#39; &#39;notredeemed&#39;.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param body Topups details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful charges JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuTopupsReversePostAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, TopupsReversal body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuTopupsReversePostValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
