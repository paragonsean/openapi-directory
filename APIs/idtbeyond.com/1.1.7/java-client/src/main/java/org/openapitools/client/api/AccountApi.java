/*
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for iatuBalanceGet
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful balance JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuBalanceGetCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iatu/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuBalanceGetValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuBalanceGet(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuBalanceGet(Async)");
        }

        return iatuBalanceGetCall(xIdtBeyondAppId, xIdtBeyondAppKey, _callback);

    }

    /**
     * Account balance
     * Returns a JSON of the account balance.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful balance JSON response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuBalanceGet(String xIdtBeyondAppId, String xIdtBeyondAppKey) throws ApiException {
        iatuBalanceGetWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey);
    }

    /**
     * Account balance
     * Returns a JSON of the account balance.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful balance JSON response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuBalanceGetWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey) throws ApiException {
        okhttp3.Call localVarCall = iatuBalanceGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Account balance (asynchronously)
     * Returns a JSON of the account balance.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful balance JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuBalanceGetAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuBalanceGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
