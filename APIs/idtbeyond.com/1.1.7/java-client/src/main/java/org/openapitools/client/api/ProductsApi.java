/*
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for iatuProductsReportsAllCsvGet
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products CSV response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuProductsReportsAllCsvGetCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iatu/products/reports/all.csv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuProductsReportsAllCsvGetValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuProductsReportsAllCsvGet(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuProductsReportsAllCsvGet(Async)");
        }

        return iatuProductsReportsAllCsvGetCall(xIdtBeyondAppId, xIdtBeyondAppKey, _callback);

    }

    /**
     * Get a list of products in CSV format
     * Returns a CSV of products, ranges, and their commissions percentages.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products CSV response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuProductsReportsAllCsvGet(String xIdtBeyondAppId, String xIdtBeyondAppKey) throws ApiException {
        iatuProductsReportsAllCsvGetWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey);
    }

    /**
     * Get a list of products in CSV format
     * Returns a CSV of products, ranges, and their commissions percentages.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products CSV response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuProductsReportsAllCsvGetWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey) throws ApiException {
        okhttp3.Call localVarCall = iatuProductsReportsAllCsvGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a list of products in CSV format (asynchronously)
     * Returns a CSV of products, ranges, and their commissions percentages.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products CSV response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuProductsReportsAllCsvGetAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuProductsReportsAllCsvGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iatuProductsReportsAllGet
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuProductsReportsAllGetCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iatu/products/reports/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuProductsReportsAllGetValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuProductsReportsAllGet(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuProductsReportsAllGet(Async)");
        }

        return iatuProductsReportsAllGetCall(xIdtBeyondAppId, xIdtBeyondAppKey, _callback);

    }

    /**
     * Get a list of products in JSON format
     * Returns a JSON list of products, ranges, and their commissions percentages.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products JSON response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuProductsReportsAllGet(String xIdtBeyondAppId, String xIdtBeyondAppKey) throws ApiException {
        iatuProductsReportsAllGetWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey);
    }

    /**
     * Get a list of products in JSON format
     * Returns a JSON list of products, ranges, and their commissions percentages.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products JSON response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuProductsReportsAllGetWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey) throws ApiException {
        okhttp3.Call localVarCall = iatuProductsReportsAllGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a list of products in JSON format (asynchronously)
     * Returns a JSON list of products, ranges, and their commissions percentages.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuProductsReportsAllGetAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuProductsReportsAllGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iatuProductsReportsLocalValueGet
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param countryCode 2-digit code of the country in ISO 3166 format. &#39;GT&#39; (required)
     * @param carrierCode Name of the mobile carrier. &#39;Claro&#39; (required)
     * @param amount This is the amount, in cents, of the product you are purchasing. &#39;500&#39; &#x3D; $5.00 (required)
     * @param currencyCode The currency code (ISO 4217) on the product you are querying. &#39;USD&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Local value response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuProductsReportsLocalValueGetCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String countryCode, String carrierCode, Integer amount, String currencyCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iatu/products/reports/local-value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_code", countryCode));
        }

        if (carrierCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carrier_code", carrierCode));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_code", currencyCode));
        }

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuProductsReportsLocalValueGetValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String countryCode, String carrierCode, Integer amount, String currencyCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuProductsReportsLocalValueGet(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuProductsReportsLocalValueGet(Async)");
        }

        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling iatuProductsReportsLocalValueGet(Async)");
        }

        // verify the required parameter 'carrierCode' is set
        if (carrierCode == null) {
            throw new ApiException("Missing the required parameter 'carrierCode' when calling iatuProductsReportsLocalValueGet(Async)");
        }

        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling iatuProductsReportsLocalValueGet(Async)");
        }

        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling iatuProductsReportsLocalValueGet(Async)");
        }

        return iatuProductsReportsLocalValueGetCall(xIdtBeyondAppId, xIdtBeyondAppKey, countryCode, carrierCode, amount, currencyCode, _callback);

    }

    /**
     * Get the estimated Local Value of a product
     * Returns a CSV of products, ranges, and their commissions percentages.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param countryCode 2-digit code of the country in ISO 3166 format. &#39;GT&#39; (required)
     * @param carrierCode Name of the mobile carrier. &#39;Claro&#39; (required)
     * @param amount This is the amount, in cents, of the product you are purchasing. &#39;500&#39; &#x3D; $5.00 (required)
     * @param currencyCode The currency code (ISO 4217) on the product you are querying. &#39;USD&#39; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Local value response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuProductsReportsLocalValueGet(String xIdtBeyondAppId, String xIdtBeyondAppKey, String countryCode, String carrierCode, Integer amount, String currencyCode) throws ApiException {
        iatuProductsReportsLocalValueGetWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey, countryCode, carrierCode, amount, currencyCode);
    }

    /**
     * Get the estimated Local Value of a product
     * Returns a CSV of products, ranges, and their commissions percentages.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param countryCode 2-digit code of the country in ISO 3166 format. &#39;GT&#39; (required)
     * @param carrierCode Name of the mobile carrier. &#39;Claro&#39; (required)
     * @param amount This is the amount, in cents, of the product you are purchasing. &#39;500&#39; &#x3D; $5.00 (required)
     * @param currencyCode The currency code (ISO 4217) on the product you are querying. &#39;USD&#39; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Local value response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuProductsReportsLocalValueGetWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey, String countryCode, String carrierCode, Integer amount, String currencyCode) throws ApiException {
        okhttp3.Call localVarCall = iatuProductsReportsLocalValueGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, countryCode, carrierCode, amount, currencyCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the estimated Local Value of a product (asynchronously)
     * Returns a CSV of products, ranges, and their commissions percentages.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param countryCode 2-digit code of the country in ISO 3166 format. &#39;GT&#39; (required)
     * @param carrierCode Name of the mobile carrier. &#39;Claro&#39; (required)
     * @param amount This is the amount, in cents, of the product you are purchasing. &#39;500&#39; &#x3D; $5.00 (required)
     * @param currencyCode The currency code (ISO 4217) on the product you are querying. &#39;USD&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Local value response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuProductsReportsLocalValueGetAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, String countryCode, String carrierCode, Integer amount, String currencyCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuProductsReportsLocalValueGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, countryCode, carrierCode, amount, currencyCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
