/*
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UtilitiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UtilitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UtilitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for iatuNumberValidatorGet
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param countryCode 2-digit code of the country in ISO 3166 format. &#39;BR&#39; (required)
     * @param mobileNumber The mobile number you would like to validate. &#39;5521983115555&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Local value response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuNumberValidatorGetCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String countryCode, String mobileNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iatu/number-validator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_code", countryCode));
        }

        if (mobileNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mobile_number", mobileNumber));
        }

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuNumberValidatorGetValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, String countryCode, String mobileNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuNumberValidatorGet(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuNumberValidatorGet(Async)");
        }

        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling iatuNumberValidatorGet(Async)");
        }

        // verify the required parameter 'mobileNumber' is set
        if (mobileNumber == null) {
            throw new ApiException("Missing the required parameter 'mobileNumber' when calling iatuNumberValidatorGet(Async)");
        }

        return iatuNumberValidatorGetCall(xIdtBeyondAppId, xIdtBeyondAppKey, countryCode, mobileNumber, _callback);

    }

    /**
     * Mobile number validation
     * Checks to verify if the phone number is valid for the country supplied.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param countryCode 2-digit code of the country in ISO 3166 format. &#39;BR&#39; (required)
     * @param mobileNumber The mobile number you would like to validate. &#39;5521983115555&#39; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Local value response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuNumberValidatorGet(String xIdtBeyondAppId, String xIdtBeyondAppKey, String countryCode, String mobileNumber) throws ApiException {
        iatuNumberValidatorGetWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey, countryCode, mobileNumber);
    }

    /**
     * Mobile number validation
     * Checks to verify if the phone number is valid for the country supplied.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param countryCode 2-digit code of the country in ISO 3166 format. &#39;BR&#39; (required)
     * @param mobileNumber The mobile number you would like to validate. &#39;5521983115555&#39; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Local value response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuNumberValidatorGetWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey, String countryCode, String mobileNumber) throws ApiException {
        okhttp3.Call localVarCall = iatuNumberValidatorGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, countryCode, mobileNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mobile number validation (asynchronously)
     * Checks to verify if the phone number is valid for the country supplied.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param countryCode 2-digit code of the country in ISO 3166 format. &#39;BR&#39; (required)
     * @param mobileNumber The mobile number you would like to validate. &#39;5521983115555&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Local value response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuNumberValidatorGetAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, String countryCode, String mobileNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuNumberValidatorGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, countryCode, mobileNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iatuProductsPromotionsGet
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Promotions JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuProductsPromotionsGetCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iatu/products/promotions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iatuProductsPromotionsGetValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling iatuProductsPromotionsGet(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling iatuProductsPromotionsGet(Async)");
        }

        return iatuProductsPromotionsGetCall(xIdtBeyondAppId, xIdtBeyondAppKey, _callback);

    }

    /**
     * Current promotions
     * Returns a JSON of the current promotions.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Promotions JSON response </td><td>  -  </td></tr>
     </table>
     */
    public void iatuProductsPromotionsGet(String xIdtBeyondAppId, String xIdtBeyondAppKey) throws ApiException {
        iatuProductsPromotionsGetWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey);
    }

    /**
     * Current promotions
     * Returns a JSON of the current promotions.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Promotions JSON response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iatuProductsPromotionsGetWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey) throws ApiException {
        okhttp3.Call localVarCall = iatuProductsPromotionsGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Current promotions (asynchronously)
     * Returns a JSON of the current promotions.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Promotions JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iatuProductsPromotionsGetAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iatuProductsPromotionsGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusGet
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful status JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusGetCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIdtBeyondAppId != null) {
            localVarHeaderParams.put("x-idt-beyond-app-id", localVarApiClient.parameterToString(xIdtBeyondAppId));
        }

        if (xIdtBeyondAppKey != null) {
            localVarHeaderParams.put("x-idt-beyond-app-key", localVarApiClient.parameterToString(xIdtBeyondAppKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusGetValidateBeforeCall(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdtBeyondAppId' is set
        if (xIdtBeyondAppId == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppId' when calling statusGet(Async)");
        }

        // verify the required parameter 'xIdtBeyondAppKey' is set
        if (xIdtBeyondAppKey == null) {
            throw new ApiException("Missing the required parameter 'xIdtBeyondAppKey' when calling statusGet(Async)");
        }

        return statusGetCall(xIdtBeyondAppId, xIdtBeyondAppKey, _callback);

    }

    /**
     * Status check
     * Returns a JSON of the API status.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful status JSON response </td><td>  -  </td></tr>
     </table>
     */
    public void statusGet(String xIdtBeyondAppId, String xIdtBeyondAppKey) throws ApiException {
        statusGetWithHttpInfo(xIdtBeyondAppId, xIdtBeyondAppKey);
    }

    /**
     * Status check
     * Returns a JSON of the API status.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful status JSON response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> statusGetWithHttpInfo(String xIdtBeyondAppId, String xIdtBeyondAppKey) throws ApiException {
        okhttp3.Call localVarCall = statusGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Status check (asynchronously)
     * Returns a JSON of the API status.
     * @param xIdtBeyondAppId Application ID you would like to use (required)
     * @param xIdtBeyondAppKey Application KEY you would like to use (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful status JSON response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusGetAsync(String xIdtBeyondAppId, String xIdtBeyondAppKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusGetValidateBeforeCall(xIdtBeyondAppId, xIdtBeyondAppKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
