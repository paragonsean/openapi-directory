/*
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TopupsReports
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:03.305151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TopupsReports {
  public static final String SERIALIZED_NAME_CLIENT_TRANSACTION_ID = "client_transaction_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_TRANSACTION_ID)
  private String clientTransactionId = "trans0123456789";

  public static final String SERIALIZED_NAME_DATE_FROM = "date_from";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private String dateFrom = "2016-01-28";

  public static final String SERIALIZED_NAME_DATE_TO = "date_to";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private String dateTo = "2016-01-28";

  public static final String SERIALIZED_NAME_TO_SERVICE_NUMBER = "to_service_number";
  @SerializedName(SERIALIZED_NAME_TO_SERVICE_NUMBER)
  private String toServiceNumber = "123456789";

  public static final String SERIALIZED_NAME_TYPE_OF_REPORT = "type_of_report";
  @SerializedName(SERIALIZED_NAME_TYPE_OF_REPORT)
  private String typeOfReport = "client_transaction_id or to_service_number";

  public TopupsReports() {
  }

  public TopupsReports clientTransactionId(String clientTransactionId) {
    this.clientTransactionId = clientTransactionId;
    return this;
  }

  /**
   * The UNIQUE 15 char ID used to track topups. &#39;trans0123456789&#39;
   * @return clientTransactionId
   */
  @javax.annotation.Nullable
  public String getClientTransactionId() {
    return clientTransactionId;
  }

  public void setClientTransactionId(String clientTransactionId) {
    this.clientTransactionId = clientTransactionId;
  }


  public TopupsReports dateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

  /**
   * The beginning date of the search IN YYYY-MM-DD format (America/New_York timezone). Not used in query by to_service_number. &#39;2016-01-28&#39;
   * @return dateFrom
   */
  @javax.annotation.Nullable
  public String getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
  }


  public TopupsReports dateTo(String dateTo) {
    this.dateTo = dateTo;
    return this;
  }

  /**
   * The ending date of the search IN YYYY-MM-DD format (America/New_York timezone). Not used in query by to_service_number. &#39;2016-01-28&#39;
   * @return dateTo
   */
  @javax.annotation.Nullable
  public String getDateTo() {
    return dateTo;
  }

  public void setDateTo(String dateTo) {
    this.dateTo = dateTo;
  }


  public TopupsReports toServiceNumber(String toServiceNumber) {
    this.toServiceNumber = toServiceNumber;
    return this;
  }

  /**
   * Enter the to_service_number returned in the response to track the current transaction status. &#39;0123456789&#39;
   * @return toServiceNumber
   */
  @javax.annotation.Nullable
  public String getToServiceNumber() {
    return toServiceNumber;
  }

  public void setToServiceNumber(String toServiceNumber) {
    this.toServiceNumber = toServiceNumber;
  }


  public TopupsReports typeOfReport(String typeOfReport) {
    this.typeOfReport = typeOfReport;
    return this;
  }

  /**
   * The type of query you would like to search by.
   * @return typeOfReport
   */
  @javax.annotation.Nullable
  public String getTypeOfReport() {
    return typeOfReport;
  }

  public void setTypeOfReport(String typeOfReport) {
    this.typeOfReport = typeOfReport;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopupsReports topupsReports = (TopupsReports) o;
    return Objects.equals(this.clientTransactionId, topupsReports.clientTransactionId) &&
        Objects.equals(this.dateFrom, topupsReports.dateFrom) &&
        Objects.equals(this.dateTo, topupsReports.dateTo) &&
        Objects.equals(this.toServiceNumber, topupsReports.toServiceNumber) &&
        Objects.equals(this.typeOfReport, topupsReports.typeOfReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientTransactionId, dateFrom, dateTo, toServiceNumber, typeOfReport);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopupsReports {\n");
    sb.append("    clientTransactionId: ").append(toIndentedString(clientTransactionId)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    toServiceNumber: ").append(toIndentedString(toServiceNumber)).append("\n");
    sb.append("    typeOfReport: ").append(toIndentedString(typeOfReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_transaction_id");
    openapiFields.add("date_from");
    openapiFields.add("date_to");
    openapiFields.add("to_service_number");
    openapiFields.add("type_of_report");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TopupsReports
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopupsReports.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopupsReports is not found in the empty JSON string", TopupsReports.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopupsReports.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopupsReports` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_transaction_id") != null && !jsonObj.get("client_transaction_id").isJsonNull()) && !jsonObj.get("client_transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_transaction_id").toString()));
      }
      if ((jsonObj.get("date_from") != null && !jsonObj.get("date_from").isJsonNull()) && !jsonObj.get("date_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_from").toString()));
      }
      if ((jsonObj.get("date_to") != null && !jsonObj.get("date_to").isJsonNull()) && !jsonObj.get("date_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_to").toString()));
      }
      if ((jsonObj.get("to_service_number") != null && !jsonObj.get("to_service_number").isJsonNull()) && !jsonObj.get("to_service_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_service_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_service_number").toString()));
      }
      if ((jsonObj.get("type_of_report") != null && !jsonObj.get("type_of_report").isJsonNull()) && !jsonObj.get("type_of_report").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_of_report` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_of_report").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopupsReports.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopupsReports' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopupsReports> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopupsReports.class));

       return (TypeAdapter<T>) new TypeAdapter<TopupsReports>() {
           @Override
           public void write(JsonWriter out, TopupsReports value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopupsReports read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TopupsReports given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TopupsReports
   * @throws IOException if the JSON string is invalid with respect to TopupsReports
   */
  public static TopupsReports fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopupsReports.class);
  }

  /**
   * Convert an instance of TopupsReports to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

