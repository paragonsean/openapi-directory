# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Topups(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, carrier_code: str='Claro', client_transaction_id: str='', country_code: str='GT', mobile_number: str='50231234567', plan: str='Sandbox', product_code: str='', terminal_id: str='Kiosk 5'):
        """Topups - a model defined in OpenAPI

        :param amount: The amount of this Topups.
        :param carrier_code: The carrier_code of this Topups.
        :param client_transaction_id: The client_transaction_id of this Topups.
        :param country_code: The country_code of this Topups.
        :param mobile_number: The mobile_number of this Topups.
        :param plan: The plan of this Topups.
        :param product_code: The product_code of this Topups.
        :param terminal_id: The terminal_id of this Topups.
        """
        self.openapi_types = {
            'amount': int,
            'carrier_code': str,
            'client_transaction_id': str,
            'country_code': str,
            'mobile_number': str,
            'plan': str,
            'product_code': str,
            'terminal_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'carrier_code': 'carrier_code',
            'client_transaction_id': 'client_transaction_id',
            'country_code': 'country_code',
            'mobile_number': 'mobile_number',
            'plan': 'plan',
            'product_code': 'product_code',
            'terminal_id': 'terminal_id'
        }

        self._amount = amount
        self._carrier_code = carrier_code
        self._client_transaction_id = client_transaction_id
        self._country_code = country_code
        self._mobile_number = mobile_number
        self._plan = plan
        self._product_code = product_code
        self._terminal_id = terminal_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Topups':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Topups of this Topups.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Topups.

        The amount, in cents, of the product you are purchasing. '500' = $5.00

        :return: The amount of this Topups.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Topups.

        The amount, in cents, of the product you are purchasing. '500' = $5.00

        :param amount: The amount of this Topups.
        :type amount: int
        """

        self._amount = amount

    @property
    def carrier_code(self):
        """Gets the carrier_code of this Topups.

        Name of the mobile carrier. 'Claro'

        :return: The carrier_code of this Topups.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this Topups.

        Name of the mobile carrier. 'Claro'

        :param carrier_code: The carrier_code of this Topups.
        :type carrier_code: str
        """

        self._carrier_code = carrier_code

    @property
    def client_transaction_id(self):
        """Gets the client_transaction_id of this Topups.

        UNIQUE 15 char ID you use to track topups. 'trans0123456789'

        :return: The client_transaction_id of this Topups.
        :rtype: str
        """
        return self._client_transaction_id

    @client_transaction_id.setter
    def client_transaction_id(self, client_transaction_id):
        """Sets the client_transaction_id of this Topups.

        UNIQUE 15 char ID you use to track topups. 'trans0123456789'

        :param client_transaction_id: The client_transaction_id of this Topups.
        :type client_transaction_id: str
        """

        self._client_transaction_id = client_transaction_id

    @property
    def country_code(self):
        """Gets the country_code of this Topups.

        2-digit code of the country in ISO 3166 format. 'GT'

        :return: The country_code of this Topups.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Topups.

        2-digit code of the country in ISO 3166 format. 'GT'

        :param country_code: The country_code of this Topups.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def mobile_number(self):
        """Gets the mobile_number of this Topups.

        Mobile number to topup. VALIDATE prior to submission. '50231234567'

        :return: The mobile_number of this Topups.
        :rtype: str
        """
        return self._mobile_number

    @mobile_number.setter
    def mobile_number(self, mobile_number):
        """Sets the mobile_number of this Topups.

        Mobile number to topup. VALIDATE prior to submission. '50231234567'

        :param mobile_number: The mobile_number of this Topups.
        :type mobile_number: str
        """

        self._mobile_number = mobile_number

    @property
    def plan(self):
        """Gets the plan of this Topups.

        The Application plan being used. Case-sensitive. 'Sandbox' or 'Production'

        :return: The plan of this Topups.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Topups.

        The Application plan being used. Case-sensitive. 'Sandbox' or 'Production'

        :param plan: The plan of this Topups.
        :type plan: str
        """

        self._plan = plan

    @property
    def product_code(self):
        """Gets the product_code of this Topups.

        Optional code to distinguish one particular product from another. '76560'

        :return: The product_code of this Topups.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this Topups.

        Optional code to distinguish one particular product from another. '76560'

        :param product_code: The product_code of this Topups.
        :type product_code: str
        """

        self._product_code = product_code

    @property
    def terminal_id(self):
        """Gets the terminal_id of this Topups.

        ID for the Terminal used to perform the topup. 'Kiosk 5'

        :return: The terminal_id of this Topups.
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this Topups.

        ID for the Terminal used to perform the topup. 'Kiosk 5'

        :param terminal_id: The terminal_id of this Topups.
        :type terminal_id: str
        """

        self._terminal_id = terminal_id
