/**
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopupsReversal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopupsReversal::OAITopupsReversal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopupsReversal::OAITopupsReversal() {
    this->initializeModel();
}

OAITopupsReversal::~OAITopupsReversal() {}

void OAITopupsReversal::initializeModel() {

    m_client_transaction_id_isSet = false;
    m_client_transaction_id_isValid = false;

    m_to_service_number_isSet = false;
    m_to_service_number_isValid = false;
}

void OAITopupsReversal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopupsReversal::fromJsonObject(QJsonObject json) {

    m_client_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_client_transaction_id, json[QString("client_transaction_id")]);
    m_client_transaction_id_isSet = !json[QString("client_transaction_id")].isNull() && m_client_transaction_id_isValid;

    m_to_service_number_isValid = ::OpenAPI::fromJsonValue(m_to_service_number, json[QString("to_service_number")]);
    m_to_service_number_isSet = !json[QString("to_service_number")].isNull() && m_to_service_number_isValid;
}

QString OAITopupsReversal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopupsReversal::asJsonObject() const {
    QJsonObject obj;
    if (m_client_transaction_id_isSet) {
        obj.insert(QString("client_transaction_id"), ::OpenAPI::toJsonValue(m_client_transaction_id));
    }
    if (m_to_service_number_isSet) {
        obj.insert(QString("to_service_number"), ::OpenAPI::toJsonValue(m_to_service_number));
    }
    return obj;
}

QString OAITopupsReversal::getClientTransactionId() const {
    return m_client_transaction_id;
}
void OAITopupsReversal::setClientTransactionId(const QString &client_transaction_id) {
    m_client_transaction_id = client_transaction_id;
    m_client_transaction_id_isSet = true;
}

bool OAITopupsReversal::is_client_transaction_id_Set() const{
    return m_client_transaction_id_isSet;
}

bool OAITopupsReversal::is_client_transaction_id_Valid() const{
    return m_client_transaction_id_isValid;
}

QString OAITopupsReversal::getToServiceNumber() const {
    return m_to_service_number;
}
void OAITopupsReversal::setToServiceNumber(const QString &to_service_number) {
    m_to_service_number = to_service_number;
    m_to_service_number_isSet = true;
}

bool OAITopupsReversal::is_to_service_number_Set() const{
    return m_to_service_number_isSet;
}

bool OAITopupsReversal::is_to_service_number_Valid() const{
    return m_to_service_number_isValid;
}

bool OAITopupsReversal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_service_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopupsReversal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
