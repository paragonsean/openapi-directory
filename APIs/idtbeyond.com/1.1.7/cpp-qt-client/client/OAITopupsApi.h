/**
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITopupsApi_H
#define OAI_OAITopupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITopups.h"
#include "OAITopupsReports.h"
#include "OAITopupsReversal.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITopupsApi : public QObject {
    Q_OBJECT

public:
    OAITopupsApi(const int timeOut = 0);
    ~OAITopupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_idt_beyond_app_id QString [required]
    * @param[in]  x_idt_beyond_app_key QString [required]
    * @param[in]  body OAITopups [required]
    */
    virtual void iatuTopupsPost(const QString &x_idt_beyond_app_id, const QString &x_idt_beyond_app_key, const OAITopups &body);

    /**
    * @param[in]  x_idt_beyond_app_id QString [required]
    * @param[in]  x_idt_beyond_app_key QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    */
    virtual void iatuTopupsReportsAllCsvGet(const QString &x_idt_beyond_app_id, const QString &x_idt_beyond_app_key, const QString &date_from, const QString &date_to);

    /**
    * @param[in]  x_idt_beyond_app_id QString [required]
    * @param[in]  x_idt_beyond_app_key QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    */
    virtual void iatuTopupsReportsAllGet(const QString &x_idt_beyond_app_id, const QString &x_idt_beyond_app_key, const QString &date_from, const QString &date_to);

    /**
    * @param[in]  x_idt_beyond_app_id QString [required]
    * @param[in]  x_idt_beyond_app_key QString [required]
    * @param[in]  body OAITopupsReports [required]
    */
    virtual void iatuTopupsReportsPost(const QString &x_idt_beyond_app_id, const QString &x_idt_beyond_app_key, const OAITopupsReports &body);

    /**
    * @param[in]  x_idt_beyond_app_id QString [required]
    * @param[in]  x_idt_beyond_app_key QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    */
    virtual void iatuTopupsReportsTotalsGet(const QString &x_idt_beyond_app_id, const QString &x_idt_beyond_app_key, const QString &date_from, const QString &date_to);

    /**
    * @param[in]  x_idt_beyond_app_id QString [required]
    * @param[in]  x_idt_beyond_app_key QString [required]
    * @param[in]  body OAITopupsReversal [required]
    */
    virtual void iatuTopupsReversePost(const QString &x_idt_beyond_app_id, const QString &x_idt_beyond_app_key, const OAITopupsReversal &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void iatuTopupsPostCallback(OAIHttpRequestWorker *worker);
    void iatuTopupsReportsAllCsvGetCallback(OAIHttpRequestWorker *worker);
    void iatuTopupsReportsAllGetCallback(OAIHttpRequestWorker *worker);
    void iatuTopupsReportsPostCallback(OAIHttpRequestWorker *worker);
    void iatuTopupsReportsTotalsGetCallback(OAIHttpRequestWorker *worker);
    void iatuTopupsReversePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void iatuTopupsPostSignal();
    void iatuTopupsReportsAllCsvGetSignal();
    void iatuTopupsReportsAllGetSignal();
    void iatuTopupsReportsPostSignal();
    void iatuTopupsReportsTotalsGetSignal();
    void iatuTopupsReversePostSignal();


    void iatuTopupsPostSignalFull(OAIHttpRequestWorker *worker);
    void iatuTopupsReportsAllCsvGetSignalFull(OAIHttpRequestWorker *worker);
    void iatuTopupsReportsAllGetSignalFull(OAIHttpRequestWorker *worker);
    void iatuTopupsReportsPostSignalFull(OAIHttpRequestWorker *worker);
    void iatuTopupsReportsTotalsGetSignalFull(OAIHttpRequestWorker *worker);
    void iatuTopupsReversePostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use iatuTopupsPostSignalError() instead")
    void iatuTopupsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iatuTopupsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iatuTopupsReportsAllCsvGetSignalError() instead")
    void iatuTopupsReportsAllCsvGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iatuTopupsReportsAllCsvGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iatuTopupsReportsAllGetSignalError() instead")
    void iatuTopupsReportsAllGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iatuTopupsReportsAllGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iatuTopupsReportsPostSignalError() instead")
    void iatuTopupsReportsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iatuTopupsReportsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iatuTopupsReportsTotalsGetSignalError() instead")
    void iatuTopupsReportsTotalsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iatuTopupsReportsTotalsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iatuTopupsReversePostSignalError() instead")
    void iatuTopupsReversePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iatuTopupsReversePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use iatuTopupsPostSignalErrorFull() instead")
    void iatuTopupsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iatuTopupsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iatuTopupsReportsAllCsvGetSignalErrorFull() instead")
    void iatuTopupsReportsAllCsvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iatuTopupsReportsAllCsvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iatuTopupsReportsAllGetSignalErrorFull() instead")
    void iatuTopupsReportsAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iatuTopupsReportsAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iatuTopupsReportsPostSignalErrorFull() instead")
    void iatuTopupsReportsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iatuTopupsReportsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iatuTopupsReportsTotalsGetSignalErrorFull() instead")
    void iatuTopupsReportsTotalsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iatuTopupsReportsTotalsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iatuTopupsReversePostSignalErrorFull() instead")
    void iatuTopupsReversePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iatuTopupsReversePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
