/**
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopupsReports.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopupsReports::OAITopupsReports(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopupsReports::OAITopupsReports() {
    this->initializeModel();
}

OAITopupsReports::~OAITopupsReports() {}

void OAITopupsReports::initializeModel() {

    m_client_transaction_id_isSet = false;
    m_client_transaction_id_isValid = false;

    m_date_from_isSet = false;
    m_date_from_isValid = false;

    m_date_to_isSet = false;
    m_date_to_isValid = false;

    m_to_service_number_isSet = false;
    m_to_service_number_isValid = false;

    m_type_of_report_isSet = false;
    m_type_of_report_isValid = false;
}

void OAITopupsReports::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopupsReports::fromJsonObject(QJsonObject json) {

    m_client_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_client_transaction_id, json[QString("client_transaction_id")]);
    m_client_transaction_id_isSet = !json[QString("client_transaction_id")].isNull() && m_client_transaction_id_isValid;

    m_date_from_isValid = ::OpenAPI::fromJsonValue(m_date_from, json[QString("date_from")]);
    m_date_from_isSet = !json[QString("date_from")].isNull() && m_date_from_isValid;

    m_date_to_isValid = ::OpenAPI::fromJsonValue(m_date_to, json[QString("date_to")]);
    m_date_to_isSet = !json[QString("date_to")].isNull() && m_date_to_isValid;

    m_to_service_number_isValid = ::OpenAPI::fromJsonValue(m_to_service_number, json[QString("to_service_number")]);
    m_to_service_number_isSet = !json[QString("to_service_number")].isNull() && m_to_service_number_isValid;

    m_type_of_report_isValid = ::OpenAPI::fromJsonValue(m_type_of_report, json[QString("type_of_report")]);
    m_type_of_report_isSet = !json[QString("type_of_report")].isNull() && m_type_of_report_isValid;
}

QString OAITopupsReports::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopupsReports::asJsonObject() const {
    QJsonObject obj;
    if (m_client_transaction_id_isSet) {
        obj.insert(QString("client_transaction_id"), ::OpenAPI::toJsonValue(m_client_transaction_id));
    }
    if (m_date_from_isSet) {
        obj.insert(QString("date_from"), ::OpenAPI::toJsonValue(m_date_from));
    }
    if (m_date_to_isSet) {
        obj.insert(QString("date_to"), ::OpenAPI::toJsonValue(m_date_to));
    }
    if (m_to_service_number_isSet) {
        obj.insert(QString("to_service_number"), ::OpenAPI::toJsonValue(m_to_service_number));
    }
    if (m_type_of_report_isSet) {
        obj.insert(QString("type_of_report"), ::OpenAPI::toJsonValue(m_type_of_report));
    }
    return obj;
}

QString OAITopupsReports::getClientTransactionId() const {
    return m_client_transaction_id;
}
void OAITopupsReports::setClientTransactionId(const QString &client_transaction_id) {
    m_client_transaction_id = client_transaction_id;
    m_client_transaction_id_isSet = true;
}

bool OAITopupsReports::is_client_transaction_id_Set() const{
    return m_client_transaction_id_isSet;
}

bool OAITopupsReports::is_client_transaction_id_Valid() const{
    return m_client_transaction_id_isValid;
}

QString OAITopupsReports::getDateFrom() const {
    return m_date_from;
}
void OAITopupsReports::setDateFrom(const QString &date_from) {
    m_date_from = date_from;
    m_date_from_isSet = true;
}

bool OAITopupsReports::is_date_from_Set() const{
    return m_date_from_isSet;
}

bool OAITopupsReports::is_date_from_Valid() const{
    return m_date_from_isValid;
}

QString OAITopupsReports::getDateTo() const {
    return m_date_to;
}
void OAITopupsReports::setDateTo(const QString &date_to) {
    m_date_to = date_to;
    m_date_to_isSet = true;
}

bool OAITopupsReports::is_date_to_Set() const{
    return m_date_to_isSet;
}

bool OAITopupsReports::is_date_to_Valid() const{
    return m_date_to_isValid;
}

QString OAITopupsReports::getToServiceNumber() const {
    return m_to_service_number;
}
void OAITopupsReports::setToServiceNumber(const QString &to_service_number) {
    m_to_service_number = to_service_number;
    m_to_service_number_isSet = true;
}

bool OAITopupsReports::is_to_service_number_Set() const{
    return m_to_service_number_isSet;
}

bool OAITopupsReports::is_to_service_number_Valid() const{
    return m_to_service_number_isValid;
}

QString OAITopupsReports::getTypeOfReport() const {
    return m_type_of_report;
}
void OAITopupsReports::setTypeOfReport(const QString &type_of_report) {
    m_type_of_report = type_of_report;
    m_type_of_report_isSet = true;
}

bool OAITopupsReports::is_type_of_report_Set() const{
    return m_type_of_report_isSet;
}

bool OAITopupsReports::is_type_of_report_Valid() const{
    return m_type_of_report_isValid;
}

bool OAITopupsReports::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_service_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_report_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopupsReports::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
