/**
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUtilitiesApi_H
#define OAI_OAIUtilitiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUtilitiesApi : public QObject {
    Q_OBJECT

public:
    OAIUtilitiesApi(const int timeOut = 0);
    ~OAIUtilitiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_idt_beyond_app_id QString [required]
    * @param[in]  x_idt_beyond_app_key QString [required]
    * @param[in]  country_code QString [required]
    * @param[in]  mobile_number QString [required]
    */
    virtual void iatuNumberValidatorGet(const QString &x_idt_beyond_app_id, const QString &x_idt_beyond_app_key, const QString &country_code, const QString &mobile_number);

    /**
    * @param[in]  x_idt_beyond_app_id QString [required]
    * @param[in]  x_idt_beyond_app_key QString [required]
    */
    virtual void iatuProductsPromotionsGet(const QString &x_idt_beyond_app_id, const QString &x_idt_beyond_app_key);

    /**
    * @param[in]  x_idt_beyond_app_id QString [required]
    * @param[in]  x_idt_beyond_app_key QString [required]
    */
    virtual void statusGet(const QString &x_idt_beyond_app_id, const QString &x_idt_beyond_app_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void iatuNumberValidatorGetCallback(OAIHttpRequestWorker *worker);
    void iatuProductsPromotionsGetCallback(OAIHttpRequestWorker *worker);
    void statusGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void iatuNumberValidatorGetSignal();
    void iatuProductsPromotionsGetSignal();
    void statusGetSignal();


    void iatuNumberValidatorGetSignalFull(OAIHttpRequestWorker *worker);
    void iatuProductsPromotionsGetSignalFull(OAIHttpRequestWorker *worker);
    void statusGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use iatuNumberValidatorGetSignalError() instead")
    void iatuNumberValidatorGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iatuNumberValidatorGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iatuProductsPromotionsGetSignalError() instead")
    void iatuProductsPromotionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iatuProductsPromotionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statusGetSignalError() instead")
    void statusGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void statusGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use iatuNumberValidatorGetSignalErrorFull() instead")
    void iatuNumberValidatorGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iatuNumberValidatorGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iatuProductsPromotionsGetSignalErrorFull() instead")
    void iatuProductsPromotionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iatuProductsPromotionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statusGetSignalErrorFull() instead")
    void statusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
