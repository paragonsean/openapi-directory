/**
 * Active Documentation for /v1
 * Our active docs provide the ability to test out your account and to see the responses to your queries. The services are RESTful, and are accessed using standard HTTP methods over a secure HTTPS channel. Requests and responses are currently sent in JSON format, and have a base URL of /v1.
 *
 * The version of the OpenAPI document: 1.1.7
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopups.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopups::OAITopups(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopups::OAITopups() {
    this->initializeModel();
}

OAITopups::~OAITopups() {}

void OAITopups::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_carrier_code_isSet = false;
    m_carrier_code_isValid = false;

    m_client_transaction_id_isSet = false;
    m_client_transaction_id_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_mobile_number_isSet = false;
    m_mobile_number_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_product_code_isSet = false;
    m_product_code_isValid = false;

    m_terminal_id_isSet = false;
    m_terminal_id_isValid = false;
}

void OAITopups::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopups::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_code, json[QString("carrier_code")]);
    m_carrier_code_isSet = !json[QString("carrier_code")].isNull() && m_carrier_code_isValid;

    m_client_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_client_transaction_id, json[QString("client_transaction_id")]);
    m_client_transaction_id_isSet = !json[QString("client_transaction_id")].isNull() && m_client_transaction_id_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_mobile_number_isValid = ::OpenAPI::fromJsonValue(m_mobile_number, json[QString("mobile_number")]);
    m_mobile_number_isSet = !json[QString("mobile_number")].isNull() && m_mobile_number_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_product_code_isValid = ::OpenAPI::fromJsonValue(m_product_code, json[QString("product_code")]);
    m_product_code_isSet = !json[QString("product_code")].isNull() && m_product_code_isValid;

    m_terminal_id_isValid = ::OpenAPI::fromJsonValue(m_terminal_id, json[QString("terminal_id")]);
    m_terminal_id_isSet = !json[QString("terminal_id")].isNull() && m_terminal_id_isValid;
}

QString OAITopups::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopups::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_carrier_code_isSet) {
        obj.insert(QString("carrier_code"), ::OpenAPI::toJsonValue(m_carrier_code));
    }
    if (m_client_transaction_id_isSet) {
        obj.insert(QString("client_transaction_id"), ::OpenAPI::toJsonValue(m_client_transaction_id));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_mobile_number_isSet) {
        obj.insert(QString("mobile_number"), ::OpenAPI::toJsonValue(m_mobile_number));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_product_code_isSet) {
        obj.insert(QString("product_code"), ::OpenAPI::toJsonValue(m_product_code));
    }
    if (m_terminal_id_isSet) {
        obj.insert(QString("terminal_id"), ::OpenAPI::toJsonValue(m_terminal_id));
    }
    return obj;
}

qint32 OAITopups::getAmount() const {
    return m_amount;
}
void OAITopups::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITopups::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITopups::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITopups::getCarrierCode() const {
    return m_carrier_code;
}
void OAITopups::setCarrierCode(const QString &carrier_code) {
    m_carrier_code = carrier_code;
    m_carrier_code_isSet = true;
}

bool OAITopups::is_carrier_code_Set() const{
    return m_carrier_code_isSet;
}

bool OAITopups::is_carrier_code_Valid() const{
    return m_carrier_code_isValid;
}

QString OAITopups::getClientTransactionId() const {
    return m_client_transaction_id;
}
void OAITopups::setClientTransactionId(const QString &client_transaction_id) {
    m_client_transaction_id = client_transaction_id;
    m_client_transaction_id_isSet = true;
}

bool OAITopups::is_client_transaction_id_Set() const{
    return m_client_transaction_id_isSet;
}

bool OAITopups::is_client_transaction_id_Valid() const{
    return m_client_transaction_id_isValid;
}

QString OAITopups::getCountryCode() const {
    return m_country_code;
}
void OAITopups::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAITopups::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAITopups::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAITopups::getMobileNumber() const {
    return m_mobile_number;
}
void OAITopups::setMobileNumber(const QString &mobile_number) {
    m_mobile_number = mobile_number;
    m_mobile_number_isSet = true;
}

bool OAITopups::is_mobile_number_Set() const{
    return m_mobile_number_isSet;
}

bool OAITopups::is_mobile_number_Valid() const{
    return m_mobile_number_isValid;
}

QString OAITopups::getPlan() const {
    return m_plan;
}
void OAITopups::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAITopups::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAITopups::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAITopups::getProductCode() const {
    return m_product_code;
}
void OAITopups::setProductCode(const QString &product_code) {
    m_product_code = product_code;
    m_product_code_isSet = true;
}

bool OAITopups::is_product_code_Set() const{
    return m_product_code_isSet;
}

bool OAITopups::is_product_code_Valid() const{
    return m_product_code_isValid;
}

QString OAITopups::getTerminalId() const {
    return m_terminal_id;
}
void OAITopups::setTerminalId(const QString &terminal_id) {
    m_terminal_id = terminal_id;
    m_terminal_id_isSet = true;
}

bool OAITopups::is_terminal_id_Set() const{
    return m_terminal_id_isSet;
}

bool OAITopups::is_terminal_id_Valid() const{
    return m_terminal_id_isValid;
}

bool OAITopups::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopups::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
