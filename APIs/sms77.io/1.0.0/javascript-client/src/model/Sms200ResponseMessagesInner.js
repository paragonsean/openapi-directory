/**
 * seven.io API
 * seven.io Swagger API. Get your API-Key now at seven.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@seven.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Sms200ResponseMessagesInner model module.
 * @module model/Sms200ResponseMessagesInner
 * @version 1.0.0
 */
class Sms200ResponseMessagesInner {
    /**
     * Constructs a new <code>Sms200ResponseMessagesInner</code>.
     * @alias module:model/Sms200ResponseMessagesInner
     */
    constructor() { 
        
        Sms200ResponseMessagesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Sms200ResponseMessagesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sms200ResponseMessagesInner} obj Optional instance to populate.
     * @return {module:model/Sms200ResponseMessagesInner} The populated <code>Sms200ResponseMessagesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sms200ResponseMessagesInner();

            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('error_text')) {
                obj['error_text'] = ApiClient.convertToType(data['error_text'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], ['String']);
            }
            if (data.hasOwnProperty('parts')) {
                obj['parts'] = ApiClient.convertToType(data['parts'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('recipient')) {
                obj['recipient'] = ApiClient.convertToType(data['recipient'], 'String');
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sms200ResponseMessagesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sms200ResponseMessagesInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['error_text'] && !(typeof data['error_text'] === 'string' || data['error_text'] instanceof String)) {
            throw new Error("Expected the field `error_text` to be a primitive type in the JSON string but got " + data['error_text']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['messages'])) {
            throw new Error("Expected the field `messages` to be an array in the JSON data but got " + data['messages']);
        }
        // ensure the json data is a string
        if (data['recipient'] && !(typeof data['recipient'] === 'string' || data['recipient'] instanceof String)) {
            throw new Error("Expected the field `recipient` to be a primitive type in the JSON string but got " + data['recipient']);
        }
        // ensure the json data is a string
        if (data['sender'] && !(typeof data['sender'] === 'string' || data['sender'] instanceof String)) {
            throw new Error("Expected the field `sender` to be a primitive type in the JSON string but got " + data['sender']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * @member {String} encoding
 */
Sms200ResponseMessagesInner.prototype['encoding'] = undefined;

/**
 * @member {String} error
 */
Sms200ResponseMessagesInner.prototype['error'] = undefined;

/**
 * @member {String} error_text
 */
Sms200ResponseMessagesInner.prototype['error_text'] = undefined;

/**
 * @member {String} id
 */
Sms200ResponseMessagesInner.prototype['id'] = undefined;

/**
 * @member {Array.<String>} messages
 */
Sms200ResponseMessagesInner.prototype['messages'] = undefined;

/**
 * @member {Number} parts
 */
Sms200ResponseMessagesInner.prototype['parts'] = undefined;

/**
 * @member {Number} price
 */
Sms200ResponseMessagesInner.prototype['price'] = undefined;

/**
 * @member {String} recipient
 */
Sms200ResponseMessagesInner.prototype['recipient'] = undefined;

/**
 * @member {String} sender
 */
Sms200ResponseMessagesInner.prototype['sender'] = undefined;

/**
 * @member {Boolean} success
 */
Sms200ResponseMessagesInner.prototype['success'] = undefined;

/**
 * @member {String} text
 */
Sms200ResponseMessagesInner.prototype['text'] = undefined;






export default Sms200ResponseMessagesInner;

