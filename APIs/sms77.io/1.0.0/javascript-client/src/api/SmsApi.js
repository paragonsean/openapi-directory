/**
 * seven.io API
 * seven.io Swagger API. Get your API-Key now at seven.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@seven.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Sms200Response from '../model/Sms200Response';

/**
* Sms service.
* @module api/SmsApi
* @version 1.0.0
*/
export default class SmsApi {

    /**
    * Constructs a new SmsApi. 
    * @alias module:api/SmsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sms operation.
     * @callback module:api/SmsApi~smsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sms200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} text The actual text message to send.
     * @param {String} to The recipient number or group name.
     * @param {Object} opts Optional parameters
     * @param {String} [from] Set a custom sender name.
     * @param {String} [foreignId] Identifier to return in callbacks.
     * @param {String} [label] A custom label.
     * @param {String} [udh] A custom User Data Header.
     * @param {String} [delay] Date/Time for delayed dispatch.
     * @param {module:model/Number} [debug = 0)] Disable message sending.
     * @param {module:model/Number} [noReload = 0)] Enable sending of duplicated messages within 180 seconds.
     * @param {module:model/Number} [unicode = 0)] Force unicode encoding. Reduces sms length to 70 chars.
     * @param {module:model/Number} [flash = 0)] Send as flash.
     * @param {module:model/Number} [utf8 = 0)] Force UTF8 encoding.
     * @param {module:model/Number} [details = 0)] Attach message details to response.
     * @param {module:model/Number} [returnMsgId = 0)] Attach message ID to second row in a text response.
     * @param {module:model/Number} [json = 0)] Return a detailed JSON response.
     * @param {module:model/Number} [performanceTracking = 0)] Enable performance tracking for found URLs.
     * @param {module:api/SmsApi~smsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sms200Response}
     */
    sms(text, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling sms");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling sms");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text,
        'to': to,
        'from': opts['from'],
        'foreign_id': opts['foreignId'],
        'label': opts['label'],
        'udh': opts['udh'],
        'delay': opts['delay'],
        'debug': opts['debug'],
        'no_reload': opts['noReload'],
        'unicode': opts['unicode'],
        'flash': opts['flash'],
        'utf8': opts['utf8'],
        'details': opts['details'],
        'return_msg_id': opts['returnMsgId'],
        'json': opts['json'],
        'performance_tracking': opts['performanceTracking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = Sms200Response;
      return this.apiClient.callApi(
        '/sms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
