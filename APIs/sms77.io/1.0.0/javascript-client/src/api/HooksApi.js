/**
 * seven.io API
 * seven.io Swagger API. Get your API-Key now at seven.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@seven.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HooksGet200Response from '../model/HooksGet200Response';
import HooksPOST200Response from '../model/HooksPOST200Response';

/**
* Hooks service.
* @module api/HooksApi
* @version 1.0.0
*/
export default class HooksApi {

    /**
    * Constructs a new HooksApi. 
    * @alias module:api/HooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the hooksGet operation.
     * @callback module:api/HooksApi~hooksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HooksGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} action Determines the action to execute.
     * @param {module:api/HooksApi~hooksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HooksGet200Response}
     */
    hooksGet(action, callback) {
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling hooksGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'action': action
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HooksGet200Response;
      return this.apiClient.callApi(
        '/hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hooksPOST operation.
     * @callback module:api/HooksApi~hooksPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HooksPOST200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} action Determines the action to execute.
     * @param {Object} opts Optional parameters
     * @param {Number} [id] The Webhook ID you wish to unsubscribe.
     * @param {String} [targetUrl] Target URL of your Webhook.
     * @param {module:model/String} [eventType] Type of event for which you would like to receive a webhook.
     * @param {module:model/String} [requestMethod = 'POST')] Request method in which you want to receive the webhook.
     * @param {module:api/HooksApi~hooksPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HooksPOST200Response}
     */
    hooksPOST(action, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling hooksPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'action': action,
        'id': opts['id'],
        'target_url': opts['targetUrl'],
        'event_type': opts['eventType'],
        'request_method': opts['requestMethod']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HooksPOST200Response;
      return this.apiClient.callApi(
        '/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
