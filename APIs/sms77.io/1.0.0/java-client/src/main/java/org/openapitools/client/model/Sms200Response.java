/*
 * seven.io API
 * seven.io Swagger API. Get your API-Key now at seven.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@seven.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Sms200ResponseMessagesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sms200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:17.087354-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sms200Response {
  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Float balance;

  public static final String SERIALIZED_NAME_DEBUG = "debug";
  @SerializedName(SERIALIZED_NAME_DEBUG)
  private String debug;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<Sms200ResponseMessagesInner> messages = new ArrayList<>();

  /**
   * Gets or Sets smsType
   */
  @JsonAdapter(SmsTypeEnum.Adapter.class)
  public enum SmsTypeEnum {
    ECONOMY("economy"),
    
    DIRECT("direct");

    private String value;

    SmsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SmsTypeEnum fromValue(String value) {
      for (SmsTypeEnum b : SmsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SmsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SmsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SmsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SmsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SmsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SMS_TYPE = "sms_type";
  @SerializedName(SERIALIZED_NAME_SMS_TYPE)
  private SmsTypeEnum smsType;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private String success;

  public static final String SERIALIZED_NAME_TOTAL_PRICE = "total_price";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRICE)
  private Float totalPrice;

  public Sms200Response() {
  }

  public Sms200Response balance(Float balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Get balance
   * @return balance
   */
  @javax.annotation.Nullable
  public Float getBalance() {
    return balance;
  }

  public void setBalance(Float balance) {
    this.balance = balance;
  }


  public Sms200Response debug(String debug) {
    this.debug = debug;
    return this;
  }

  /**
   * Get debug
   * @return debug
   */
  @javax.annotation.Nullable
  public String getDebug() {
    return debug;
  }

  public void setDebug(String debug) {
    this.debug = debug;
  }


  public Sms200Response messages(List<Sms200ResponseMessagesInner> messages) {
    this.messages = messages;
    return this;
  }

  public Sms200Response addMessagesItem(Sms200ResponseMessagesInner messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * Get messages
   * @return messages
   */
  @javax.annotation.Nullable
  public List<Sms200ResponseMessagesInner> getMessages() {
    return messages;
  }

  public void setMessages(List<Sms200ResponseMessagesInner> messages) {
    this.messages = messages;
  }


  public Sms200Response smsType(SmsTypeEnum smsType) {
    this.smsType = smsType;
    return this;
  }

  /**
   * Get smsType
   * @return smsType
   */
  @javax.annotation.Nullable
  public SmsTypeEnum getSmsType() {
    return smsType;
  }

  public void setSmsType(SmsTypeEnum smsType) {
    this.smsType = smsType;
  }


  public Sms200Response success(String success) {
    this.success = success;
    return this;
  }

  /**
   * Get success
   * @return success
   */
  @javax.annotation.Nullable
  public String getSuccess() {
    return success;
  }

  public void setSuccess(String success) {
    this.success = success;
  }


  public Sms200Response totalPrice(Float totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

  /**
   * Get totalPrice
   * @return totalPrice
   */
  @javax.annotation.Nullable
  public Float getTotalPrice() {
    return totalPrice;
  }

  public void setTotalPrice(Float totalPrice) {
    this.totalPrice = totalPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sms200Response sms200Response = (Sms200Response) o;
    return Objects.equals(this.balance, sms200Response.balance) &&
        Objects.equals(this.debug, sms200Response.debug) &&
        Objects.equals(this.messages, sms200Response.messages) &&
        Objects.equals(this.smsType, sms200Response.smsType) &&
        Objects.equals(this.success, sms200Response.success) &&
        Objects.equals(this.totalPrice, sms200Response.totalPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balance, debug, messages, smsType, success, totalPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sms200Response {\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    debug: ").append(toIndentedString(debug)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    smsType: ").append(toIndentedString(smsType)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance");
    openapiFields.add("debug");
    openapiFields.add("messages");
    openapiFields.add("sms_type");
    openapiFields.add("success");
    openapiFields.add("total_price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sms200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sms200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sms200Response is not found in the empty JSON string", Sms200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sms200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sms200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("debug") != null && !jsonObj.get("debug").isJsonNull()) && !jsonObj.get("debug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debug").toString()));
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            Sms200ResponseMessagesInner.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      if ((jsonObj.get("sms_type") != null && !jsonObj.get("sms_type").isJsonNull()) && !jsonObj.get("sms_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sms_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sms_type").toString()));
      }
      // validate the optional field `sms_type`
      if (jsonObj.get("sms_type") != null && !jsonObj.get("sms_type").isJsonNull()) {
        SmsTypeEnum.validateJsonElement(jsonObj.get("sms_type"));
      }
      if ((jsonObj.get("success") != null && !jsonObj.get("success").isJsonNull()) && !jsonObj.get("success").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `success` to be a primitive type in the JSON string but got `%s`", jsonObj.get("success").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sms200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sms200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sms200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sms200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Sms200Response>() {
           @Override
           public void write(JsonWriter out, Sms200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sms200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sms200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sms200Response
   * @throws IOException if the JSON string is invalid with respect to Sms200Response
   */
  public static Sms200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sms200Response.class);
  }

  /**
   * Convert an instance of Sms200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

