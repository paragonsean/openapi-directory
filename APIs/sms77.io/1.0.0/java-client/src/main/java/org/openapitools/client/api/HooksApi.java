/*
 * seven.io API
 * seven.io Swagger API. Get your API-Key now at seven.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@seven.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HooksGet200Response;
import org.openapitools.client.model.HooksPOST200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HooksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for hooksGet
     * @param action Determines the action to execute. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hooksGetCall(String action, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hooksGetValidateBeforeCall(String action, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling hooksGet(Async)");
        }

        return hooksGetCall(action, _callback);

    }

    /**
     * 
     * 
     * @param action Determines the action to execute. (required)
     * @return HooksGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HooksGet200Response hooksGet(String action) throws ApiException {
        ApiResponse<HooksGet200Response> localVarResp = hooksGetWithHttpInfo(action);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param action Determines the action to execute. (required)
     * @return ApiResponse&lt;HooksGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HooksGet200Response> hooksGetWithHttpInfo(String action) throws ApiException {
        okhttp3.Call localVarCall = hooksGetValidateBeforeCall(action, null);
        Type localVarReturnType = new TypeToken<HooksGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param action Determines the action to execute. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hooksGetAsync(String action, final ApiCallback<HooksGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = hooksGetValidateBeforeCall(action, _callback);
        Type localVarReturnType = new TypeToken<HooksGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hooksPOST
     * @param action Determines the action to execute. (required)
     * @param id The Webhook ID you wish to unsubscribe. (optional)
     * @param targetUrl Target URL of your Webhook. (optional)
     * @param eventType Type of event for which you would like to receive a webhook. (optional)
     * @param requestMethod Request method in which you want to receive the webhook. (optional, default to POST)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook subscribed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hooksPOSTCall(String action, Integer id, String targetUrl, String eventType, String requestMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (targetUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_url", targetUrl));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event_type", eventType));
        }

        if (requestMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request_method", requestMethod));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hooksPOSTValidateBeforeCall(String action, Integer id, String targetUrl, String eventType, String requestMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling hooksPOST(Async)");
        }

        return hooksPOSTCall(action, id, targetUrl, eventType, requestMethod, _callback);

    }

    /**
     * 
     * 
     * @param action Determines the action to execute. (required)
     * @param id The Webhook ID you wish to unsubscribe. (optional)
     * @param targetUrl Target URL of your Webhook. (optional)
     * @param eventType Type of event for which you would like to receive a webhook. (optional)
     * @param requestMethod Request method in which you want to receive the webhook. (optional, default to POST)
     * @return HooksPOST200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook subscribed </td><td>  -  </td></tr>
     </table>
     */
    public HooksPOST200Response hooksPOST(String action, Integer id, String targetUrl, String eventType, String requestMethod) throws ApiException {
        ApiResponse<HooksPOST200Response> localVarResp = hooksPOSTWithHttpInfo(action, id, targetUrl, eventType, requestMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param action Determines the action to execute. (required)
     * @param id The Webhook ID you wish to unsubscribe. (optional)
     * @param targetUrl Target URL of your Webhook. (optional)
     * @param eventType Type of event for which you would like to receive a webhook. (optional)
     * @param requestMethod Request method in which you want to receive the webhook. (optional, default to POST)
     * @return ApiResponse&lt;HooksPOST200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook subscribed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HooksPOST200Response> hooksPOSTWithHttpInfo(String action, Integer id, String targetUrl, String eventType, String requestMethod) throws ApiException {
        okhttp3.Call localVarCall = hooksPOSTValidateBeforeCall(action, id, targetUrl, eventType, requestMethod, null);
        Type localVarReturnType = new TypeToken<HooksPOST200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param action Determines the action to execute. (required)
     * @param id The Webhook ID you wish to unsubscribe. (optional)
     * @param targetUrl Target URL of your Webhook. (optional)
     * @param eventType Type of event for which you would like to receive a webhook. (optional)
     * @param requestMethod Request method in which you want to receive the webhook. (optional, default to POST)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook subscribed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hooksPOSTAsync(String action, Integer id, String targetUrl, String eventType, String requestMethod, final ApiCallback<HooksPOST200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = hooksPOSTValidateBeforeCall(action, id, targetUrl, eventType, requestMethod, _callback);
        Type localVarReturnType = new TypeToken<HooksPOST200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
