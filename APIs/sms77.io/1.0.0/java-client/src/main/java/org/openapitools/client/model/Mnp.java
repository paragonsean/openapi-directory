/*
 * seven.io API
 * seven.io Swagger API. Get your API-Key now at seven.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@seven.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Mnp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:17.087354-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Mnp {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_INTERNATIONAL_FORMATTED = "international_formatted";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_FORMATTED)
  private String internationalFormatted;

  public static final String SERIALIZED_NAME_IS_PORTED = "isPorted";
  @SerializedName(SERIALIZED_NAME_IS_PORTED)
  private Boolean isPorted;

  public static final String SERIALIZED_NAME_MCCMNC = "mccmnc";
  @SerializedName(SERIALIZED_NAME_MCCMNC)
  private String mccmnc;

  public static final String SERIALIZED_NAME_NATIONAL_FORMAT = "national_format";
  @SerializedName(SERIALIZED_NAME_NATIONAL_FORMAT)
  private String nationalFormat;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public Mnp() {
  }

  public Mnp country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Mnp internationalFormatted(String internationalFormatted) {
    this.internationalFormatted = internationalFormatted;
    return this;
  }

  /**
   * Get internationalFormatted
   * @return internationalFormatted
   */
  @javax.annotation.Nullable
  public String getInternationalFormatted() {
    return internationalFormatted;
  }

  public void setInternationalFormatted(String internationalFormatted) {
    this.internationalFormatted = internationalFormatted;
  }


  public Mnp isPorted(Boolean isPorted) {
    this.isPorted = isPorted;
    return this;
  }

  /**
   * Get isPorted
   * @return isPorted
   */
  @javax.annotation.Nullable
  public Boolean getIsPorted() {
    return isPorted;
  }

  public void setIsPorted(Boolean isPorted) {
    this.isPorted = isPorted;
  }


  public Mnp mccmnc(String mccmnc) {
    this.mccmnc = mccmnc;
    return this;
  }

  /**
   * Get mccmnc
   * @return mccmnc
   */
  @javax.annotation.Nullable
  public String getMccmnc() {
    return mccmnc;
  }

  public void setMccmnc(String mccmnc) {
    this.mccmnc = mccmnc;
  }


  public Mnp nationalFormat(String nationalFormat) {
    this.nationalFormat = nationalFormat;
    return this;
  }

  /**
   * Get nationalFormat
   * @return nationalFormat
   */
  @javax.annotation.Nullable
  public String getNationalFormat() {
    return nationalFormat;
  }

  public void setNationalFormat(String nationalFormat) {
    this.nationalFormat = nationalFormat;
  }


  public Mnp network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public Mnp number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mnp mnp = (Mnp) o;
    return Objects.equals(this.country, mnp.country) &&
        Objects.equals(this.internationalFormatted, mnp.internationalFormatted) &&
        Objects.equals(this.isPorted, mnp.isPorted) &&
        Objects.equals(this.mccmnc, mnp.mccmnc) &&
        Objects.equals(this.nationalFormat, mnp.nationalFormat) &&
        Objects.equals(this.network, mnp.network) &&
        Objects.equals(this.number, mnp.number);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, internationalFormatted, isPorted, mccmnc, nationalFormat, network, number);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mnp {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    internationalFormatted: ").append(toIndentedString(internationalFormatted)).append("\n");
    sb.append("    isPorted: ").append(toIndentedString(isPorted)).append("\n");
    sb.append("    mccmnc: ").append(toIndentedString(mccmnc)).append("\n");
    sb.append("    nationalFormat: ").append(toIndentedString(nationalFormat)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("international_formatted");
    openapiFields.add("isPorted");
    openapiFields.add("mccmnc");
    openapiFields.add("national_format");
    openapiFields.add("network");
    openapiFields.add("number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Mnp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Mnp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Mnp is not found in the empty JSON string", Mnp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Mnp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Mnp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("international_formatted") != null && !jsonObj.get("international_formatted").isJsonNull()) && !jsonObj.get("international_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `international_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("international_formatted").toString()));
      }
      if ((jsonObj.get("mccmnc") != null && !jsonObj.get("mccmnc").isJsonNull()) && !jsonObj.get("mccmnc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mccmnc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mccmnc").toString()));
      }
      if ((jsonObj.get("national_format") != null && !jsonObj.get("national_format").isJsonNull()) && !jsonObj.get("national_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `national_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("national_format").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Mnp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Mnp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Mnp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Mnp.class));

       return (TypeAdapter<T>) new TypeAdapter<Mnp>() {
           @Override
           public void write(JsonWriter out, Mnp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Mnp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Mnp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Mnp
   * @throws IOException if the JSON string is invalid with respect to Mnp
   */
  public static Mnp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Mnp.class);
  }

  /**
   * Convert an instance of Mnp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

