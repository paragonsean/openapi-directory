/*
 * seven.io API
 * seven.io Swagger API. Get your API-Key now at seven.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@seven.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Sms200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SmsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SmsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SmsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for sms
     * @param text The actual text message to send. (required)
     * @param to The recipient number or group name. (required)
     * @param from Set a custom sender name. (optional)
     * @param foreignId Identifier to return in callbacks. (optional)
     * @param label A custom label. (optional)
     * @param udh A custom User Data Header. (optional)
     * @param delay Date/Time for delayed dispatch. (optional)
     * @param debug Disable message sending. (optional, default to 0)
     * @param noReload Enable sending of duplicated messages within 180 seconds. (optional, default to 0)
     * @param unicode Force unicode encoding. Reduces sms length to 70 chars. (optional, default to 0)
     * @param flash Send as flash. (optional, default to 0)
     * @param utf8 Force UTF8 encoding. (optional, default to 0)
     * @param details Attach message details to response. (optional, default to 0)
     * @param returnMsgId Attach message ID to second row in a text response. (optional, default to 0)
     * @param json Return a detailed JSON response. (optional, default to 0)
     * @param performanceTracking Enable performance tracking for found URLs. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smsCall(String text, String to, String from, String foreignId, String label, String udh, String delay, BigDecimal debug, BigDecimal noReload, BigDecimal unicode, BigDecimal flash, BigDecimal utf8, BigDecimal details, BigDecimal returnMsgId, BigDecimal json, BigDecimal performanceTracking, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (foreignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foreign_id", foreignId));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (udh != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("udh", udh));
        }

        if (delay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delay", delay));
        }

        if (debug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("debug", debug));
        }

        if (noReload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no_reload", noReload));
        }

        if (unicode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unicode", unicode));
        }

        if (flash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flash", flash));
        }

        if (utf8 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("utf8", utf8));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if (returnMsgId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_msg_id", returnMsgId));
        }

        if (json != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("json", json));
        }

        if (performanceTracking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("performance_tracking", performanceTracking));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smsValidateBeforeCall(String text, String to, String from, String foreignId, String label, String udh, String delay, BigDecimal debug, BigDecimal noReload, BigDecimal unicode, BigDecimal flash, BigDecimal utf8, BigDecimal details, BigDecimal returnMsgId, BigDecimal json, BigDecimal performanceTracking, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling sms(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling sms(Async)");
        }

        return smsCall(text, to, from, foreignId, label, udh, delay, debug, noReload, unicode, flash, utf8, details, returnMsgId, json, performanceTracking, _callback);

    }

    /**
     * 
     * 
     * @param text The actual text message to send. (required)
     * @param to The recipient number or group name. (required)
     * @param from Set a custom sender name. (optional)
     * @param foreignId Identifier to return in callbacks. (optional)
     * @param label A custom label. (optional)
     * @param udh A custom User Data Header. (optional)
     * @param delay Date/Time for delayed dispatch. (optional)
     * @param debug Disable message sending. (optional, default to 0)
     * @param noReload Enable sending of duplicated messages within 180 seconds. (optional, default to 0)
     * @param unicode Force unicode encoding. Reduces sms length to 70 chars. (optional, default to 0)
     * @param flash Send as flash. (optional, default to 0)
     * @param utf8 Force UTF8 encoding. (optional, default to 0)
     * @param details Attach message details to response. (optional, default to 0)
     * @param returnMsgId Attach message ID to second row in a text response. (optional, default to 0)
     * @param json Return a detailed JSON response. (optional, default to 0)
     * @param performanceTracking Enable performance tracking for found URLs. (optional, default to 0)
     * @return Sms200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Sms200Response sms(String text, String to, String from, String foreignId, String label, String udh, String delay, BigDecimal debug, BigDecimal noReload, BigDecimal unicode, BigDecimal flash, BigDecimal utf8, BigDecimal details, BigDecimal returnMsgId, BigDecimal json, BigDecimal performanceTracking) throws ApiException {
        ApiResponse<Sms200Response> localVarResp = smsWithHttpInfo(text, to, from, foreignId, label, udh, delay, debug, noReload, unicode, flash, utf8, details, returnMsgId, json, performanceTracking);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param text The actual text message to send. (required)
     * @param to The recipient number or group name. (required)
     * @param from Set a custom sender name. (optional)
     * @param foreignId Identifier to return in callbacks. (optional)
     * @param label A custom label. (optional)
     * @param udh A custom User Data Header. (optional)
     * @param delay Date/Time for delayed dispatch. (optional)
     * @param debug Disable message sending. (optional, default to 0)
     * @param noReload Enable sending of duplicated messages within 180 seconds. (optional, default to 0)
     * @param unicode Force unicode encoding. Reduces sms length to 70 chars. (optional, default to 0)
     * @param flash Send as flash. (optional, default to 0)
     * @param utf8 Force UTF8 encoding. (optional, default to 0)
     * @param details Attach message details to response. (optional, default to 0)
     * @param returnMsgId Attach message ID to second row in a text response. (optional, default to 0)
     * @param json Return a detailed JSON response. (optional, default to 0)
     * @param performanceTracking Enable performance tracking for found URLs. (optional, default to 0)
     * @return ApiResponse&lt;Sms200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sms200Response> smsWithHttpInfo(String text, String to, String from, String foreignId, String label, String udh, String delay, BigDecimal debug, BigDecimal noReload, BigDecimal unicode, BigDecimal flash, BigDecimal utf8, BigDecimal details, BigDecimal returnMsgId, BigDecimal json, BigDecimal performanceTracking) throws ApiException {
        okhttp3.Call localVarCall = smsValidateBeforeCall(text, to, from, foreignId, label, udh, delay, debug, noReload, unicode, flash, utf8, details, returnMsgId, json, performanceTracking, null);
        Type localVarReturnType = new TypeToken<Sms200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param text The actual text message to send. (required)
     * @param to The recipient number or group name. (required)
     * @param from Set a custom sender name. (optional)
     * @param foreignId Identifier to return in callbacks. (optional)
     * @param label A custom label. (optional)
     * @param udh A custom User Data Header. (optional)
     * @param delay Date/Time for delayed dispatch. (optional)
     * @param debug Disable message sending. (optional, default to 0)
     * @param noReload Enable sending of duplicated messages within 180 seconds. (optional, default to 0)
     * @param unicode Force unicode encoding. Reduces sms length to 70 chars. (optional, default to 0)
     * @param flash Send as flash. (optional, default to 0)
     * @param utf8 Force UTF8 encoding. (optional, default to 0)
     * @param details Attach message details to response. (optional, default to 0)
     * @param returnMsgId Attach message ID to second row in a text response. (optional, default to 0)
     * @param json Return a detailed JSON response. (optional, default to 0)
     * @param performanceTracking Enable performance tracking for found URLs. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smsAsync(String text, String to, String from, String foreignId, String label, String udh, String delay, BigDecimal debug, BigDecimal noReload, BigDecimal unicode, BigDecimal flash, BigDecimal utf8, BigDecimal details, BigDecimal returnMsgId, BigDecimal json, BigDecimal performanceTracking, final ApiCallback<Sms200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = smsValidateBeforeCall(text, to, from, foreignId, label, udh, delay, debug, noReload, unicode, flash, utf8, details, returnMsgId, json, performanceTracking, _callback);
        Type localVarReturnType = new TypeToken<Sms200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
