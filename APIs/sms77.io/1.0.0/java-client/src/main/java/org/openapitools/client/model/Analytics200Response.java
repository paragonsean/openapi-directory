/*
 * seven.io API
 * seven.io Swagger API. Get your API-Key now at seven.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@seven.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Analytics200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:17.087354-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Analytics200Response {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DIRECT = "direct";
  @SerializedName(SERIALIZED_NAME_DIRECT)
  private Integer direct;

  public static final String SERIALIZED_NAME_ECONOMY = "economy";
  @SerializedName(SERIALIZED_NAME_ECONOMY)
  private Integer economy;

  public static final String SERIALIZED_NAME_HLR = "hlr";
  @SerializedName(SERIALIZED_NAME_HLR)
  private Integer hlr;

  public static final String SERIALIZED_NAME_INBOUND = "inbound";
  @SerializedName(SERIALIZED_NAME_INBOUND)
  private Integer inbound;

  public static final String SERIALIZED_NAME_MNP = "mnp";
  @SerializedName(SERIALIZED_NAME_MNP)
  private Integer mnp;

  public static final String SERIALIZED_NAME_USAGE_EUR = "usage_eur";
  @SerializedName(SERIALIZED_NAME_USAGE_EUR)
  private Float usageEur;

  public static final String SERIALIZED_NAME_VOICE = "voice";
  @SerializedName(SERIALIZED_NAME_VOICE)
  private Integer voice;

  public Analytics200Response() {
  }

  public Analytics200Response date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public Analytics200Response direct(Integer direct) {
    this.direct = direct;
    return this;
  }

  /**
   * Get direct
   * @return direct
   */
  @javax.annotation.Nullable
  public Integer getDirect() {
    return direct;
  }

  public void setDirect(Integer direct) {
    this.direct = direct;
  }


  public Analytics200Response economy(Integer economy) {
    this.economy = economy;
    return this;
  }

  /**
   * Get economy
   * @return economy
   */
  @javax.annotation.Nullable
  public Integer getEconomy() {
    return economy;
  }

  public void setEconomy(Integer economy) {
    this.economy = economy;
  }


  public Analytics200Response hlr(Integer hlr) {
    this.hlr = hlr;
    return this;
  }

  /**
   * Get hlr
   * @return hlr
   */
  @javax.annotation.Nullable
  public Integer getHlr() {
    return hlr;
  }

  public void setHlr(Integer hlr) {
    this.hlr = hlr;
  }


  public Analytics200Response inbound(Integer inbound) {
    this.inbound = inbound;
    return this;
  }

  /**
   * Get inbound
   * @return inbound
   */
  @javax.annotation.Nullable
  public Integer getInbound() {
    return inbound;
  }

  public void setInbound(Integer inbound) {
    this.inbound = inbound;
  }


  public Analytics200Response mnp(Integer mnp) {
    this.mnp = mnp;
    return this;
  }

  /**
   * Get mnp
   * @return mnp
   */
  @javax.annotation.Nullable
  public Integer getMnp() {
    return mnp;
  }

  public void setMnp(Integer mnp) {
    this.mnp = mnp;
  }


  public Analytics200Response usageEur(Float usageEur) {
    this.usageEur = usageEur;
    return this;
  }

  /**
   * Get usageEur
   * @return usageEur
   */
  @javax.annotation.Nullable
  public Float getUsageEur() {
    return usageEur;
  }

  public void setUsageEur(Float usageEur) {
    this.usageEur = usageEur;
  }


  public Analytics200Response voice(Integer voice) {
    this.voice = voice;
    return this;
  }

  /**
   * Get voice
   * @return voice
   */
  @javax.annotation.Nullable
  public Integer getVoice() {
    return voice;
  }

  public void setVoice(Integer voice) {
    this.voice = voice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Analytics200Response analytics200Response = (Analytics200Response) o;
    return Objects.equals(this.date, analytics200Response.date) &&
        Objects.equals(this.direct, analytics200Response.direct) &&
        Objects.equals(this.economy, analytics200Response.economy) &&
        Objects.equals(this.hlr, analytics200Response.hlr) &&
        Objects.equals(this.inbound, analytics200Response.inbound) &&
        Objects.equals(this.mnp, analytics200Response.mnp) &&
        Objects.equals(this.usageEur, analytics200Response.usageEur) &&
        Objects.equals(this.voice, analytics200Response.voice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, direct, economy, hlr, inbound, mnp, usageEur, voice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Analytics200Response {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    direct: ").append(toIndentedString(direct)).append("\n");
    sb.append("    economy: ").append(toIndentedString(economy)).append("\n");
    sb.append("    hlr: ").append(toIndentedString(hlr)).append("\n");
    sb.append("    inbound: ").append(toIndentedString(inbound)).append("\n");
    sb.append("    mnp: ").append(toIndentedString(mnp)).append("\n");
    sb.append("    usageEur: ").append(toIndentedString(usageEur)).append("\n");
    sb.append("    voice: ").append(toIndentedString(voice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("direct");
    openapiFields.add("economy");
    openapiFields.add("hlr");
    openapiFields.add("inbound");
    openapiFields.add("mnp");
    openapiFields.add("usage_eur");
    openapiFields.add("voice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Analytics200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Analytics200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Analytics200Response is not found in the empty JSON string", Analytics200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Analytics200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Analytics200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Analytics200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Analytics200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Analytics200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Analytics200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Analytics200Response>() {
           @Override
           public void write(JsonWriter out, Analytics200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Analytics200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Analytics200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Analytics200Response
   * @throws IOException if the JSON string is invalid with respect to Analytics200Response
   */
  public static Analytics200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Analytics200Response.class);
  }

  /**
   * Convert an instance of Analytics200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

