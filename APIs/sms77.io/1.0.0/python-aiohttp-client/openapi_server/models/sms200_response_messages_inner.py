# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sms200ResponseMessagesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoding: str=None, error: str=None, error_text: str=None, id: str=None, messages: List[str]=None, parts: int=None, price: int=None, recipient: str=None, sender: str=None, success: bool=None, text: str=None):
        """Sms200ResponseMessagesInner - a model defined in OpenAPI

        :param encoding: The encoding of this Sms200ResponseMessagesInner.
        :param error: The error of this Sms200ResponseMessagesInner.
        :param error_text: The error_text of this Sms200ResponseMessagesInner.
        :param id: The id of this Sms200ResponseMessagesInner.
        :param messages: The messages of this Sms200ResponseMessagesInner.
        :param parts: The parts of this Sms200ResponseMessagesInner.
        :param price: The price of this Sms200ResponseMessagesInner.
        :param recipient: The recipient of this Sms200ResponseMessagesInner.
        :param sender: The sender of this Sms200ResponseMessagesInner.
        :param success: The success of this Sms200ResponseMessagesInner.
        :param text: The text of this Sms200ResponseMessagesInner.
        """
        self.openapi_types = {
            'encoding': str,
            'error': str,
            'error_text': str,
            'id': str,
            'messages': List[str],
            'parts': int,
            'price': int,
            'recipient': str,
            'sender': str,
            'success': bool,
            'text': str
        }

        self.attribute_map = {
            'encoding': 'encoding',
            'error': 'error',
            'error_text': 'error_text',
            'id': 'id',
            'messages': 'messages',
            'parts': 'parts',
            'price': 'price',
            'recipient': 'recipient',
            'sender': 'sender',
            'success': 'success',
            'text': 'text'
        }

        self._encoding = encoding
        self._error = error
        self._error_text = error_text
        self._id = id
        self._messages = messages
        self._parts = parts
        self._price = price
        self._recipient = recipient
        self._sender = sender
        self._success = success
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sms200ResponseMessagesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sms_200_response_messages_inner of this Sms200ResponseMessagesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoding(self):
        """Gets the encoding of this Sms200ResponseMessagesInner.


        :return: The encoding of this Sms200ResponseMessagesInner.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this Sms200ResponseMessagesInner.


        :param encoding: The encoding of this Sms200ResponseMessagesInner.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def error(self):
        """Gets the error of this Sms200ResponseMessagesInner.


        :return: The error of this Sms200ResponseMessagesInner.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Sms200ResponseMessagesInner.


        :param error: The error of this Sms200ResponseMessagesInner.
        :type error: str
        """

        self._error = error

    @property
    def error_text(self):
        """Gets the error_text of this Sms200ResponseMessagesInner.


        :return: The error_text of this Sms200ResponseMessagesInner.
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """Sets the error_text of this Sms200ResponseMessagesInner.


        :param error_text: The error_text of this Sms200ResponseMessagesInner.
        :type error_text: str
        """

        self._error_text = error_text

    @property
    def id(self):
        """Gets the id of this Sms200ResponseMessagesInner.


        :return: The id of this Sms200ResponseMessagesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sms200ResponseMessagesInner.


        :param id: The id of this Sms200ResponseMessagesInner.
        :type id: str
        """

        self._id = id

    @property
    def messages(self):
        """Gets the messages of this Sms200ResponseMessagesInner.


        :return: The messages of this Sms200ResponseMessagesInner.
        :rtype: List[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Sms200ResponseMessagesInner.


        :param messages: The messages of this Sms200ResponseMessagesInner.
        :type messages: List[str]
        """

        self._messages = messages

    @property
    def parts(self):
        """Gets the parts of this Sms200ResponseMessagesInner.


        :return: The parts of this Sms200ResponseMessagesInner.
        :rtype: int
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this Sms200ResponseMessagesInner.


        :param parts: The parts of this Sms200ResponseMessagesInner.
        :type parts: int
        """

        self._parts = parts

    @property
    def price(self):
        """Gets the price of this Sms200ResponseMessagesInner.


        :return: The price of this Sms200ResponseMessagesInner.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Sms200ResponseMessagesInner.


        :param price: The price of this Sms200ResponseMessagesInner.
        :type price: int
        """

        self._price = price

    @property
    def recipient(self):
        """Gets the recipient of this Sms200ResponseMessagesInner.


        :return: The recipient of this Sms200ResponseMessagesInner.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this Sms200ResponseMessagesInner.


        :param recipient: The recipient of this Sms200ResponseMessagesInner.
        :type recipient: str
        """

        self._recipient = recipient

    @property
    def sender(self):
        """Gets the sender of this Sms200ResponseMessagesInner.


        :return: The sender of this Sms200ResponseMessagesInner.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this Sms200ResponseMessagesInner.


        :param sender: The sender of this Sms200ResponseMessagesInner.
        :type sender: str
        """

        self._sender = sender

    @property
    def success(self):
        """Gets the success of this Sms200ResponseMessagesInner.


        :return: The success of this Sms200ResponseMessagesInner.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this Sms200ResponseMessagesInner.


        :param success: The success of this Sms200ResponseMessagesInner.
        :type success: bool
        """

        self._success = success

    @property
    def text(self):
        """Gets the text of this Sms200ResponseMessagesInner.


        :return: The text of this Sms200ResponseMessagesInner.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Sms200ResponseMessagesInner.


        :param text: The text of this Sms200ResponseMessagesInner.
        :type text: str
        """

        self._text = text
