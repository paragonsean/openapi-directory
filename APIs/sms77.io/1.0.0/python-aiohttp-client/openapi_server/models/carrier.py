# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Carrier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, name: str=None, network_code: str=None, network_type: str=None):
        """Carrier - a model defined in OpenAPI

        :param country: The country of this Carrier.
        :param name: The name of this Carrier.
        :param network_code: The network_code of this Carrier.
        :param network_type: The network_type of this Carrier.
        """
        self.openapi_types = {
            'country': str,
            'name': str,
            'network_code': str,
            'network_type': str
        }

        self.attribute_map = {
            'country': 'country',
            'name': 'name',
            'network_code': 'network_code',
            'network_type': 'network_type'
        }

        self._country = country
        self._name = name
        self._network_code = network_code
        self._network_type = network_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Carrier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Carrier of this Carrier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this Carrier.


        :return: The country of this Carrier.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Carrier.


        :param country: The country of this Carrier.
        :type country: str
        """

        self._country = country

    @property
    def name(self):
        """Gets the name of this Carrier.


        :return: The name of this Carrier.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Carrier.


        :param name: The name of this Carrier.
        :type name: str
        """

        self._name = name

    @property
    def network_code(self):
        """Gets the network_code of this Carrier.


        :return: The network_code of this Carrier.
        :rtype: str
        """
        return self._network_code

    @network_code.setter
    def network_code(self, network_code):
        """Sets the network_code of this Carrier.


        :param network_code: The network_code of this Carrier.
        :type network_code: str
        """

        self._network_code = network_code

    @property
    def network_type(self):
        """Gets the network_type of this Carrier.


        :return: The network_type of this Carrier.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this Carrier.


        :param network_type: The network_type of this Carrier.
        :type network_type: str
        """
        allowed_values = ["fixed_line", "fixed_line_or_mobile", "mobile", "pager", "personal_number", "premium_rate", "shared_cost", "toll_free", "uan", "unknown", "voicemail", "voip"]  # noqa: E501
        if network_type not in allowed_values:
            raise ValueError(
                "Invalid value for `network_type` ({0}), must be one of {1}"
                .format(network_type, allowed_values)
            )

        self._network_type = network_type
