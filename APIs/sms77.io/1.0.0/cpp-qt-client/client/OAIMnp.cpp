/**
 * seven.io API
 * seven.io Swagger API. Get your API-Key now at seven.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@seven.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMnp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMnp::OAIMnp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMnp::OAIMnp() {
    this->initializeModel();
}

OAIMnp::~OAIMnp() {}

void OAIMnp::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_international_formatted_isSet = false;
    m_international_formatted_isValid = false;

    m_is_ported_isSet = false;
    m_is_ported_isValid = false;

    m_mccmnc_isSet = false;
    m_mccmnc_isValid = false;

    m_national_format_isSet = false;
    m_national_format_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;
}

void OAIMnp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMnp::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_international_formatted_isValid = ::OpenAPI::fromJsonValue(m_international_formatted, json[QString("international_formatted")]);
    m_international_formatted_isSet = !json[QString("international_formatted")].isNull() && m_international_formatted_isValid;

    m_is_ported_isValid = ::OpenAPI::fromJsonValue(m_is_ported, json[QString("isPorted")]);
    m_is_ported_isSet = !json[QString("isPorted")].isNull() && m_is_ported_isValid;

    m_mccmnc_isValid = ::OpenAPI::fromJsonValue(m_mccmnc, json[QString("mccmnc")]);
    m_mccmnc_isSet = !json[QString("mccmnc")].isNull() && m_mccmnc_isValid;

    m_national_format_isValid = ::OpenAPI::fromJsonValue(m_national_format, json[QString("national_format")]);
    m_national_format_isSet = !json[QString("national_format")].isNull() && m_national_format_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;
}

QString OAIMnp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMnp::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_international_formatted_isSet) {
        obj.insert(QString("international_formatted"), ::OpenAPI::toJsonValue(m_international_formatted));
    }
    if (m_is_ported_isSet) {
        obj.insert(QString("isPorted"), ::OpenAPI::toJsonValue(m_is_ported));
    }
    if (m_mccmnc_isSet) {
        obj.insert(QString("mccmnc"), ::OpenAPI::toJsonValue(m_mccmnc));
    }
    if (m_national_format_isSet) {
        obj.insert(QString("national_format"), ::OpenAPI::toJsonValue(m_national_format));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    return obj;
}

QString OAIMnp::getCountry() const {
    return m_country;
}
void OAIMnp::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIMnp::is_country_Set() const{
    return m_country_isSet;
}

bool OAIMnp::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIMnp::getInternationalFormatted() const {
    return m_international_formatted;
}
void OAIMnp::setInternationalFormatted(const QString &international_formatted) {
    m_international_formatted = international_formatted;
    m_international_formatted_isSet = true;
}

bool OAIMnp::is_international_formatted_Set() const{
    return m_international_formatted_isSet;
}

bool OAIMnp::is_international_formatted_Valid() const{
    return m_international_formatted_isValid;
}

bool OAIMnp::isIsPorted() const {
    return m_is_ported;
}
void OAIMnp::setIsPorted(const bool &is_ported) {
    m_is_ported = is_ported;
    m_is_ported_isSet = true;
}

bool OAIMnp::is_is_ported_Set() const{
    return m_is_ported_isSet;
}

bool OAIMnp::is_is_ported_Valid() const{
    return m_is_ported_isValid;
}

QString OAIMnp::getMccmnc() const {
    return m_mccmnc;
}
void OAIMnp::setMccmnc(const QString &mccmnc) {
    m_mccmnc = mccmnc;
    m_mccmnc_isSet = true;
}

bool OAIMnp::is_mccmnc_Set() const{
    return m_mccmnc_isSet;
}

bool OAIMnp::is_mccmnc_Valid() const{
    return m_mccmnc_isValid;
}

QString OAIMnp::getNationalFormat() const {
    return m_national_format;
}
void OAIMnp::setNationalFormat(const QString &national_format) {
    m_national_format = national_format;
    m_national_format_isSet = true;
}

bool OAIMnp::is_national_format_Set() const{
    return m_national_format_isSet;
}

bool OAIMnp::is_national_format_Valid() const{
    return m_national_format_isValid;
}

QString OAIMnp::getNetwork() const {
    return m_network;
}
void OAIMnp::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIMnp::is_network_Set() const{
    return m_network_isSet;
}

bool OAIMnp::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIMnp::getNumber() const {
    return m_number;
}
void OAIMnp::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIMnp::is_number_Set() const{
    return m_number_isSet;
}

bool OAIMnp::is_number_Valid() const{
    return m_number_isValid;
}

bool OAIMnp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mccmnc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMnp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
