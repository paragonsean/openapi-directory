/**
 * seven.io API
 * seven.io Swagger API. Get your API-Key now at seven.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@seven.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalytics_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalytics_200_response::OAIAnalytics_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalytics_200_response::OAIAnalytics_200_response() {
    this->initializeModel();
}

OAIAnalytics_200_response::~OAIAnalytics_200_response() {}

void OAIAnalytics_200_response::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_direct_isSet = false;
    m_direct_isValid = false;

    m_economy_isSet = false;
    m_economy_isValid = false;

    m_hlr_isSet = false;
    m_hlr_isValid = false;

    m_inbound_isSet = false;
    m_inbound_isValid = false;

    m_mnp_isSet = false;
    m_mnp_isValid = false;

    m_usage_eur_isSet = false;
    m_usage_eur_isValid = false;

    m_voice_isSet = false;
    m_voice_isValid = false;
}

void OAIAnalytics_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalytics_200_response::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_direct_isValid = ::OpenAPI::fromJsonValue(m_direct, json[QString("direct")]);
    m_direct_isSet = !json[QString("direct")].isNull() && m_direct_isValid;

    m_economy_isValid = ::OpenAPI::fromJsonValue(m_economy, json[QString("economy")]);
    m_economy_isSet = !json[QString("economy")].isNull() && m_economy_isValid;

    m_hlr_isValid = ::OpenAPI::fromJsonValue(m_hlr, json[QString("hlr")]);
    m_hlr_isSet = !json[QString("hlr")].isNull() && m_hlr_isValid;

    m_inbound_isValid = ::OpenAPI::fromJsonValue(m_inbound, json[QString("inbound")]);
    m_inbound_isSet = !json[QString("inbound")].isNull() && m_inbound_isValid;

    m_mnp_isValid = ::OpenAPI::fromJsonValue(m_mnp, json[QString("mnp")]);
    m_mnp_isSet = !json[QString("mnp")].isNull() && m_mnp_isValid;

    m_usage_eur_isValid = ::OpenAPI::fromJsonValue(m_usage_eur, json[QString("usage_eur")]);
    m_usage_eur_isSet = !json[QString("usage_eur")].isNull() && m_usage_eur_isValid;

    m_voice_isValid = ::OpenAPI::fromJsonValue(m_voice, json[QString("voice")]);
    m_voice_isSet = !json[QString("voice")].isNull() && m_voice_isValid;
}

QString OAIAnalytics_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalytics_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_direct_isSet) {
        obj.insert(QString("direct"), ::OpenAPI::toJsonValue(m_direct));
    }
    if (m_economy_isSet) {
        obj.insert(QString("economy"), ::OpenAPI::toJsonValue(m_economy));
    }
    if (m_hlr_isSet) {
        obj.insert(QString("hlr"), ::OpenAPI::toJsonValue(m_hlr));
    }
    if (m_inbound_isSet) {
        obj.insert(QString("inbound"), ::OpenAPI::toJsonValue(m_inbound));
    }
    if (m_mnp_isSet) {
        obj.insert(QString("mnp"), ::OpenAPI::toJsonValue(m_mnp));
    }
    if (m_usage_eur_isSet) {
        obj.insert(QString("usage_eur"), ::OpenAPI::toJsonValue(m_usage_eur));
    }
    if (m_voice_isSet) {
        obj.insert(QString("voice"), ::OpenAPI::toJsonValue(m_voice));
    }
    return obj;
}

QString OAIAnalytics_200_response::getDate() const {
    return m_date;
}
void OAIAnalytics_200_response::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAnalytics_200_response::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAnalytics_200_response::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIAnalytics_200_response::getDirect() const {
    return m_direct;
}
void OAIAnalytics_200_response::setDirect(const qint32 &direct) {
    m_direct = direct;
    m_direct_isSet = true;
}

bool OAIAnalytics_200_response::is_direct_Set() const{
    return m_direct_isSet;
}

bool OAIAnalytics_200_response::is_direct_Valid() const{
    return m_direct_isValid;
}

qint32 OAIAnalytics_200_response::getEconomy() const {
    return m_economy;
}
void OAIAnalytics_200_response::setEconomy(const qint32 &economy) {
    m_economy = economy;
    m_economy_isSet = true;
}

bool OAIAnalytics_200_response::is_economy_Set() const{
    return m_economy_isSet;
}

bool OAIAnalytics_200_response::is_economy_Valid() const{
    return m_economy_isValid;
}

qint32 OAIAnalytics_200_response::getHlr() const {
    return m_hlr;
}
void OAIAnalytics_200_response::setHlr(const qint32 &hlr) {
    m_hlr = hlr;
    m_hlr_isSet = true;
}

bool OAIAnalytics_200_response::is_hlr_Set() const{
    return m_hlr_isSet;
}

bool OAIAnalytics_200_response::is_hlr_Valid() const{
    return m_hlr_isValid;
}

qint32 OAIAnalytics_200_response::getInbound() const {
    return m_inbound;
}
void OAIAnalytics_200_response::setInbound(const qint32 &inbound) {
    m_inbound = inbound;
    m_inbound_isSet = true;
}

bool OAIAnalytics_200_response::is_inbound_Set() const{
    return m_inbound_isSet;
}

bool OAIAnalytics_200_response::is_inbound_Valid() const{
    return m_inbound_isValid;
}

qint32 OAIAnalytics_200_response::getMnp() const {
    return m_mnp;
}
void OAIAnalytics_200_response::setMnp(const qint32 &mnp) {
    m_mnp = mnp;
    m_mnp_isSet = true;
}

bool OAIAnalytics_200_response::is_mnp_Set() const{
    return m_mnp_isSet;
}

bool OAIAnalytics_200_response::is_mnp_Valid() const{
    return m_mnp_isValid;
}

float OAIAnalytics_200_response::getUsageEur() const {
    return m_usage_eur;
}
void OAIAnalytics_200_response::setUsageEur(const float &usage_eur) {
    m_usage_eur = usage_eur;
    m_usage_eur_isSet = true;
}

bool OAIAnalytics_200_response::is_usage_eur_Set() const{
    return m_usage_eur_isSet;
}

bool OAIAnalytics_200_response::is_usage_eur_Valid() const{
    return m_usage_eur_isValid;
}

qint32 OAIAnalytics_200_response::getVoice() const {
    return m_voice;
}
void OAIAnalytics_200_response::setVoice(const qint32 &voice) {
    m_voice = voice;
    m_voice_isSet = true;
}

bool OAIAnalytics_200_response::is_voice_Set() const{
    return m_voice_isSet;
}

bool OAIAnalytics_200_response::is_voice_Valid() const{
    return m_voice_isValid;
}

bool OAIAnalytics_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_economy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hlr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mnp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_eur_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalytics_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
