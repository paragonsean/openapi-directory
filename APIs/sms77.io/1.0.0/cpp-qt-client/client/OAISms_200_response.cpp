/**
 * seven.io API
 * seven.io Swagger API. Get your API-Key now at seven.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@seven.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISms_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISms_200_response::OAISms_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISms_200_response::OAISms_200_response() {
    this->initializeModel();
}

OAISms_200_response::~OAISms_200_response() {}

void OAISms_200_response::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_debug_isSet = false;
    m_debug_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_sms_type_isSet = false;
    m_sms_type_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_total_price_isSet = false;
    m_total_price_isValid = false;
}

void OAISms_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISms_200_response::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_debug_isValid = ::OpenAPI::fromJsonValue(m_debug, json[QString("debug")]);
    m_debug_isSet = !json[QString("debug")].isNull() && m_debug_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_sms_type_isValid = ::OpenAPI::fromJsonValue(m_sms_type, json[QString("sms_type")]);
    m_sms_type_isSet = !json[QString("sms_type")].isNull() && m_sms_type_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_total_price_isValid = ::OpenAPI::fromJsonValue(m_total_price, json[QString("total_price")]);
    m_total_price_isSet = !json[QString("total_price")].isNull() && m_total_price_isValid;
}

QString OAISms_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISms_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_debug_isSet) {
        obj.insert(QString("debug"), ::OpenAPI::toJsonValue(m_debug));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_sms_type_isSet) {
        obj.insert(QString("sms_type"), ::OpenAPI::toJsonValue(m_sms_type));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_total_price_isSet) {
        obj.insert(QString("total_price"), ::OpenAPI::toJsonValue(m_total_price));
    }
    return obj;
}

float OAISms_200_response::getBalance() const {
    return m_balance;
}
void OAISms_200_response::setBalance(const float &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAISms_200_response::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAISms_200_response::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAISms_200_response::getDebug() const {
    return m_debug;
}
void OAISms_200_response::setDebug(const QString &debug) {
    m_debug = debug;
    m_debug_isSet = true;
}

bool OAISms_200_response::is_debug_Set() const{
    return m_debug_isSet;
}

bool OAISms_200_response::is_debug_Valid() const{
    return m_debug_isValid;
}

QList<OAISms_200_response_messages_inner> OAISms_200_response::getMessages() const {
    return m_messages;
}
void OAISms_200_response::setMessages(const QList<OAISms_200_response_messages_inner> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAISms_200_response::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAISms_200_response::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAISms_200_response::getSmsType() const {
    return m_sms_type;
}
void OAISms_200_response::setSmsType(const QString &sms_type) {
    m_sms_type = sms_type;
    m_sms_type_isSet = true;
}

bool OAISms_200_response::is_sms_type_Set() const{
    return m_sms_type_isSet;
}

bool OAISms_200_response::is_sms_type_Valid() const{
    return m_sms_type_isValid;
}

QString OAISms_200_response::getSuccess() const {
    return m_success;
}
void OAISms_200_response::setSuccess(const QString &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAISms_200_response::is_success_Set() const{
    return m_success_isSet;
}

bool OAISms_200_response::is_success_Valid() const{
    return m_success_isValid;
}

float OAISms_200_response::getTotalPrice() const {
    return m_total_price;
}
void OAISms_200_response::setTotalPrice(const float &total_price) {
    m_total_price = total_price;
    m_total_price_isSet = true;
}

bool OAISms_200_response::is_total_price_Set() const{
    return m_total_price_isSet;
}

bool OAISms_200_response::is_total_price_Valid() const{
    return m_total_price_isValid;
}

bool OAISms_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISms_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
