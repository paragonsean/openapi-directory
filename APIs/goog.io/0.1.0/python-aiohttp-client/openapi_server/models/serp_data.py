# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SerpData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query: str=None, website: str=None):
        """SerpData - a model defined in OpenAPI

        :param query: The query of this SerpData.
        :param website: The website of this SerpData.
        """
        self.openapi_types = {
            'query': str,
            'website': str
        }

        self.attribute_map = {
            'query': 'query',
            'website': 'website'
        }

        self._query = query
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SerpData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SerpData of this SerpData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query(self):
        """Gets the query of this SerpData.


        :return: The query of this SerpData.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SerpData.


        :param query: The query of this SerpData.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def website(self):
        """Gets the website of this SerpData.


        :return: The website of this SerpData.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this SerpData.


        :param website: The website of this SerpData.
        :type website: str
        """
        if website is None:
            raise ValueError("Invalid value for `website`, must not be `None`")

        self._website = website
