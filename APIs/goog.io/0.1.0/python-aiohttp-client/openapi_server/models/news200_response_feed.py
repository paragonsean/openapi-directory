# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class News200ResponseFeed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, generator: str=None, generator_detail: str=None, language: str=None, link: str=None, links: str=None, publisher: str=None, publisher_detail: str=None, rights: str=None, rights_detail: str=None, subtitle: str=None, subtitle_detail: str=None, title: str=None, updated: str=None, updated_parsed: str=None):
        """News200ResponseFeed - a model defined in OpenAPI

        :param generator: The generator of this News200ResponseFeed.
        :param generator_detail: The generator_detail of this News200ResponseFeed.
        :param language: The language of this News200ResponseFeed.
        :param link: The link of this News200ResponseFeed.
        :param links: The links of this News200ResponseFeed.
        :param publisher: The publisher of this News200ResponseFeed.
        :param publisher_detail: The publisher_detail of this News200ResponseFeed.
        :param rights: The rights of this News200ResponseFeed.
        :param rights_detail: The rights_detail of this News200ResponseFeed.
        :param subtitle: The subtitle of this News200ResponseFeed.
        :param subtitle_detail: The subtitle_detail of this News200ResponseFeed.
        :param title: The title of this News200ResponseFeed.
        :param updated: The updated of this News200ResponseFeed.
        :param updated_parsed: The updated_parsed of this News200ResponseFeed.
        """
        self.openapi_types = {
            'generator': str,
            'generator_detail': str,
            'language': str,
            'link': str,
            'links': str,
            'publisher': str,
            'publisher_detail': str,
            'rights': str,
            'rights_detail': str,
            'subtitle': str,
            'subtitle_detail': str,
            'title': str,
            'updated': str,
            'updated_parsed': str
        }

        self.attribute_map = {
            'generator': 'generator',
            'generator_detail': 'generator_detail',
            'language': 'language',
            'link': 'link',
            'links': 'links',
            'publisher': 'publisher',
            'publisher_detail': 'publisher_detail',
            'rights': 'rights',
            'rights_detail': 'rights_detail',
            'subtitle': 'subtitle',
            'subtitle_detail': 'subtitle_detail',
            'title': 'title',
            'updated': 'updated',
            'updated_parsed': 'updated_parsed'
        }

        self._generator = generator
        self._generator_detail = generator_detail
        self._language = language
        self._link = link
        self._links = links
        self._publisher = publisher
        self._publisher_detail = publisher_detail
        self._rights = rights
        self._rights_detail = rights_detail
        self._subtitle = subtitle
        self._subtitle_detail = subtitle_detail
        self._title = title
        self._updated = updated
        self._updated_parsed = updated_parsed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'News200ResponseFeed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The News_200_response_feed of this News200ResponseFeed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def generator(self):
        """Gets the generator of this News200ResponseFeed.


        :return: The generator of this News200ResponseFeed.
        :rtype: str
        """
        return self._generator

    @generator.setter
    def generator(self, generator):
        """Sets the generator of this News200ResponseFeed.


        :param generator: The generator of this News200ResponseFeed.
        :type generator: str
        """

        self._generator = generator

    @property
    def generator_detail(self):
        """Gets the generator_detail of this News200ResponseFeed.


        :return: The generator_detail of this News200ResponseFeed.
        :rtype: str
        """
        return self._generator_detail

    @generator_detail.setter
    def generator_detail(self, generator_detail):
        """Sets the generator_detail of this News200ResponseFeed.


        :param generator_detail: The generator_detail of this News200ResponseFeed.
        :type generator_detail: str
        """

        self._generator_detail = generator_detail

    @property
    def language(self):
        """Gets the language of this News200ResponseFeed.


        :return: The language of this News200ResponseFeed.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this News200ResponseFeed.


        :param language: The language of this News200ResponseFeed.
        :type language: str
        """

        self._language = language

    @property
    def link(self):
        """Gets the link of this News200ResponseFeed.


        :return: The link of this News200ResponseFeed.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this News200ResponseFeed.


        :param link: The link of this News200ResponseFeed.
        :type link: str
        """

        self._link = link

    @property
    def links(self):
        """Gets the links of this News200ResponseFeed.


        :return: The links of this News200ResponseFeed.
        :rtype: str
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this News200ResponseFeed.


        :param links: The links of this News200ResponseFeed.
        :type links: str
        """

        self._links = links

    @property
    def publisher(self):
        """Gets the publisher of this News200ResponseFeed.


        :return: The publisher of this News200ResponseFeed.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this News200ResponseFeed.


        :param publisher: The publisher of this News200ResponseFeed.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def publisher_detail(self):
        """Gets the publisher_detail of this News200ResponseFeed.


        :return: The publisher_detail of this News200ResponseFeed.
        :rtype: str
        """
        return self._publisher_detail

    @publisher_detail.setter
    def publisher_detail(self, publisher_detail):
        """Sets the publisher_detail of this News200ResponseFeed.


        :param publisher_detail: The publisher_detail of this News200ResponseFeed.
        :type publisher_detail: str
        """

        self._publisher_detail = publisher_detail

    @property
    def rights(self):
        """Gets the rights of this News200ResponseFeed.


        :return: The rights of this News200ResponseFeed.
        :rtype: str
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this News200ResponseFeed.


        :param rights: The rights of this News200ResponseFeed.
        :type rights: str
        """

        self._rights = rights

    @property
    def rights_detail(self):
        """Gets the rights_detail of this News200ResponseFeed.


        :return: The rights_detail of this News200ResponseFeed.
        :rtype: str
        """
        return self._rights_detail

    @rights_detail.setter
    def rights_detail(self, rights_detail):
        """Sets the rights_detail of this News200ResponseFeed.


        :param rights_detail: The rights_detail of this News200ResponseFeed.
        :type rights_detail: str
        """

        self._rights_detail = rights_detail

    @property
    def subtitle(self):
        """Gets the subtitle of this News200ResponseFeed.


        :return: The subtitle of this News200ResponseFeed.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this News200ResponseFeed.


        :param subtitle: The subtitle of this News200ResponseFeed.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def subtitle_detail(self):
        """Gets the subtitle_detail of this News200ResponseFeed.


        :return: The subtitle_detail of this News200ResponseFeed.
        :rtype: str
        """
        return self._subtitle_detail

    @subtitle_detail.setter
    def subtitle_detail(self, subtitle_detail):
        """Sets the subtitle_detail of this News200ResponseFeed.


        :param subtitle_detail: The subtitle_detail of this News200ResponseFeed.
        :type subtitle_detail: str
        """

        self._subtitle_detail = subtitle_detail

    @property
    def title(self):
        """Gets the title of this News200ResponseFeed.


        :return: The title of this News200ResponseFeed.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this News200ResponseFeed.


        :param title: The title of this News200ResponseFeed.
        :type title: str
        """

        self._title = title

    @property
    def updated(self):
        """Gets the updated of this News200ResponseFeed.


        :return: The updated of this News200ResponseFeed.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this News200ResponseFeed.


        :param updated: The updated of this News200ResponseFeed.
        :type updated: str
        """

        self._updated = updated

    @property
    def updated_parsed(self):
        """Gets the updated_parsed of this News200ResponseFeed.


        :return: The updated_parsed of this News200ResponseFeed.
        :rtype: str
        """
        return self._updated_parsed

    @updated_parsed.setter
    def updated_parsed(self, updated_parsed):
        """Sets the updated_parsed of this News200ResponseFeed.


        :param updated_parsed: The updated_parsed of this News200ResponseFeed.
        :type updated_parsed: str
        """

        self._updated_parsed = updated_parsed
