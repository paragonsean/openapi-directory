# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.images200_response_image_results_inner import Images200ResponseImageResultsInner
from openapi_server import util


class Images200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answers: List[str]=None, image_results: List[Images200ResponseImageResultsInner]=None, results: List[object]=None, total: int=None):
        """Images200Response - a model defined in OpenAPI

        :param answers: The answers of this Images200Response.
        :param image_results: The image_results of this Images200Response.
        :param results: The results of this Images200Response.
        :param total: The total of this Images200Response.
        """
        self.openapi_types = {
            'answers': List[str],
            'image_results': List[Images200ResponseImageResultsInner],
            'results': List[object],
            'total': int
        }

        self.attribute_map = {
            'answers': 'answers',
            'image_results': 'image_results',
            'results': 'results',
            'total': 'total'
        }

        self._answers = answers
        self._image_results = image_results
        self._results = results
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Images200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Images_200_response of this Images200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answers(self):
        """Gets the answers of this Images200Response.


        :return: The answers of this Images200Response.
        :rtype: List[str]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this Images200Response.


        :param answers: The answers of this Images200Response.
        :type answers: List[str]
        """

        self._answers = answers

    @property
    def image_results(self):
        """Gets the image_results of this Images200Response.


        :return: The image_results of this Images200Response.
        :rtype: List[Images200ResponseImageResultsInner]
        """
        return self._image_results

    @image_results.setter
    def image_results(self, image_results):
        """Sets the image_results of this Images200Response.


        :param image_results: The image_results of this Images200Response.
        :type image_results: List[Images200ResponseImageResultsInner]
        """

        self._image_results = image_results

    @property
    def results(self):
        """Gets the results of this Images200Response.


        :return: The results of this Images200Response.
        :rtype: List[object]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this Images200Response.


        :param results: The results of this Images200Response.
        :type results: List[object]
        """

        self._results = results

    @property
    def total(self):
        """Gets the total of this Images200Response.


        :return: The total of this Images200Response.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Images200Response.


        :param total: The total of this Images200Response.
        :type total: int
        """

        self._total = total
