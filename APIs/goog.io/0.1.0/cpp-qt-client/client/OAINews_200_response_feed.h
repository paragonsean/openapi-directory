/**
 * goog.io | Unoffical Google Search API
 * # Intoduction  This is the OpenAPI V3 documentation for https://api.goog.io  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  Googio is the ultimate search API for Google Searches, Google News, and Google SERP. # Docs  > An Unofficial Google Search API  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  # Example Code   Check out [Github repo](https://github.com/googio/googio_examples) for example code for calling the API with various languages.  # Authentication  ### API Key  Optional API key for authenticated access. Note that we use \"API key\" interchangably in these docs.  Authenticated requests must include an `apikey` header containing your subscription's API Key.  | Security Schema Type | Header Name | Example Token | | --- | --- | --- | | API Key | `apikey` | c5bfb018-ab46-4e61-9271-4ec7e9c04a6e |  In the following example, `YOU_APIKEY` represents the auth token for your account.  ``` curl --header 'apikey: YOU_APIKEY' ```  You can view and manage your API keys in the [Dashboard](/dashboard).  Be sure to keep your API keys secure. Do not share them in publicly accessible areas such as GitHub, client-side code, and so forth.  Also note that all API requests must be made over **HTTPS**. Calls made over plain HTTP will attempt to be automatically upgraded to HTTPS, though this use cases is discouraged.   ## Rate Limits  API requests may be rate limited depending on your subscription plan and traffic patterns. The following response headers will be present in these cases:  | Header | Description | | ------ | ----------- | | `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make. | | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. | | `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |  When the rate limit is **exceeded**, an error is returned with the status \"**429 Too Many Requests**\":  ```json {   \"error\": {     \"code\": \"too_many_requests\",     \"message\": \"Rate limit exceeded\"   } } ```    ## Errors  This API uses conventional HTTP response codes to indicate the success or failure of API requests. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, endpoint not found, etc.). Codes in the `5xx` range indicate an error with our API (these are rare).   
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@goog.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINews_200_response_feed.h
 *
 * 
 */

#ifndef OAINews_200_response_feed_H
#define OAINews_200_response_feed_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINews_200_response_feed : public OAIObject {
public:
    OAINews_200_response_feed();
    OAINews_200_response_feed(QString json);
    ~OAINews_200_response_feed() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getGenerator() const;
    void setGenerator(const QString &generator);
    bool is_generator_Set() const;
    bool is_generator_Valid() const;

    QString getGeneratorDetail() const;
    void setGeneratorDetail(const QString &generator_detail);
    bool is_generator_detail_Set() const;
    bool is_generator_detail_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    QString getLinks() const;
    void setLinks(const QString &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QString getPublisher() const;
    void setPublisher(const QString &publisher);
    bool is_publisher_Set() const;
    bool is_publisher_Valid() const;

    QString getPublisherDetail() const;
    void setPublisherDetail(const QString &publisher_detail);
    bool is_publisher_detail_Set() const;
    bool is_publisher_detail_Valid() const;

    QString getRights() const;
    void setRights(const QString &rights);
    bool is_rights_Set() const;
    bool is_rights_Valid() const;

    QString getRightsDetail() const;
    void setRightsDetail(const QString &rights_detail);
    bool is_rights_detail_Set() const;
    bool is_rights_detail_Valid() const;

    QString getSubtitle() const;
    void setSubtitle(const QString &subtitle);
    bool is_subtitle_Set() const;
    bool is_subtitle_Valid() const;

    QString getSubtitleDetail() const;
    void setSubtitleDetail(const QString &subtitle_detail);
    bool is_subtitle_detail_Set() const;
    bool is_subtitle_detail_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getUpdated() const;
    void setUpdated(const QString &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    QString getUpdatedParsed() const;
    void setUpdatedParsed(const QString &updated_parsed);
    bool is_updated_parsed_Set() const;
    bool is_updated_parsed_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_generator;
    bool m_generator_isSet;
    bool m_generator_isValid;

    QString m_generator_detail;
    bool m_generator_detail_isSet;
    bool m_generator_detail_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    QString m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QString m_publisher;
    bool m_publisher_isSet;
    bool m_publisher_isValid;

    QString m_publisher_detail;
    bool m_publisher_detail_isSet;
    bool m_publisher_detail_isValid;

    QString m_rights;
    bool m_rights_isSet;
    bool m_rights_isValid;

    QString m_rights_detail;
    bool m_rights_detail_isSet;
    bool m_rights_detail_isValid;

    QString m_subtitle;
    bool m_subtitle_isSet;
    bool m_subtitle_isValid;

    QString m_subtitle_detail;
    bool m_subtitle_detail_isSet;
    bool m_subtitle_detail_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    QString m_updated_parsed;
    bool m_updated_parsed_isSet;
    bool m_updated_parsed_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINews_200_response_feed)

#endif // OAINews_200_response_feed_H
