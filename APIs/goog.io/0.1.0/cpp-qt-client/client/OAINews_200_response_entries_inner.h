/**
 * goog.io | Unoffical Google Search API
 * # Intoduction  This is the OpenAPI V3 documentation for https://api.goog.io  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  Googio is the ultimate search API for Google Searches, Google News, and Google SERP. # Docs  > An Unofficial Google Search API  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  # Example Code   Check out [Github repo](https://github.com/googio/googio_examples) for example code for calling the API with various languages.  # Authentication  ### API Key  Optional API key for authenticated access. Note that we use \"API key\" interchangably in these docs.  Authenticated requests must include an `apikey` header containing your subscription's API Key.  | Security Schema Type | Header Name | Example Token | | --- | --- | --- | | API Key | `apikey` | c5bfb018-ab46-4e61-9271-4ec7e9c04a6e |  In the following example, `YOU_APIKEY` represents the auth token for your account.  ``` curl --header 'apikey: YOU_APIKEY' ```  You can view and manage your API keys in the [Dashboard](/dashboard).  Be sure to keep your API keys secure. Do not share them in publicly accessible areas such as GitHub, client-side code, and so forth.  Also note that all API requests must be made over **HTTPS**. Calls made over plain HTTP will attempt to be automatically upgraded to HTTPS, though this use cases is discouraged.   ## Rate Limits  API requests may be rate limited depending on your subscription plan and traffic patterns. The following response headers will be present in these cases:  | Header | Description | | ------ | ----------- | | `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make. | | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. | | `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |  When the rate limit is **exceeded**, an error is returned with the status \"**429 Too Many Requests**\":  ```json {   \"error\": {     \"code\": \"too_many_requests\",     \"message\": \"Rate limit exceeded\"   } } ```    ## Errors  This API uses conventional HTTP response codes to indicate the success or failure of API requests. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, endpoint not found, etc.). Codes in the `5xx` range indicate an error with our API (these are rare).   
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@goog.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINews_200_response_entries_inner.h
 *
 * 
 */

#ifndef OAINews_200_response_entries_inner_H
#define OAINews_200_response_entries_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINews_200_response_entries_inner : public OAIObject {
public:
    OAINews_200_response_entries_inner();
    OAINews_200_response_entries_inner(QString json);
    ~OAINews_200_response_entries_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getGuidislink() const;
    void setGuidislink(const QString &guidislink);
    bool is_guidislink_Set() const;
    bool is_guidislink_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    QString getLinks() const;
    void setLinks(const QString &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QString getPublished() const;
    void setPublished(const QString &published);
    bool is_published_Set() const;
    bool is_published_Valid() const;

    QString getPublishedParsed() const;
    void setPublishedParsed(const QString &published_parsed);
    bool is_published_parsed_Set() const;
    bool is_published_parsed_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getSubArticles() const;
    void setSubArticles(const QString &sub_articles);
    bool is_sub_articles_Set() const;
    bool is_sub_articles_Valid() const;

    QString getSummary() const;
    void setSummary(const QString &summary);
    bool is_summary_Set() const;
    bool is_summary_Valid() const;

    QString getSummaryDetail() const;
    void setSummaryDetail(const QString &summary_detail);
    bool is_summary_detail_Set() const;
    bool is_summary_detail_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getTitleDetail() const;
    void setTitleDetail(const QString &title_detail);
    bool is_title_detail_Set() const;
    bool is_title_detail_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_guidislink;
    bool m_guidislink_isSet;
    bool m_guidislink_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    QString m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QString m_published;
    bool m_published_isSet;
    bool m_published_isValid;

    QString m_published_parsed;
    bool m_published_parsed_isSet;
    bool m_published_parsed_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_sub_articles;
    bool m_sub_articles_isSet;
    bool m_sub_articles_isValid;

    QString m_summary;
    bool m_summary_isSet;
    bool m_summary_isValid;

    QString m_summary_detail;
    bool m_summary_detail_isSet;
    bool m_summary_detail_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_title_detail;
    bool m_title_detail_isSet;
    bool m_title_detail_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINews_200_response_entries_inner)

#endif // OAINews_200_response_entries_inner_H
