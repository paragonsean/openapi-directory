/**
 * goog.io | Unoffical Google Search API
 * # Intoduction  This is the OpenAPI V3 documentation for https://api.goog.io  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  Googio is the ultimate search API for Google Searches, Google News, and Google SERP. # Docs  > An Unofficial Google Search API  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  # Example Code   Check out [Github repo](https://github.com/googio/googio_examples) for example code for calling the API with various languages.  # Authentication  ### API Key  Optional API key for authenticated access. Note that we use \"API key\" interchangably in these docs.  Authenticated requests must include an `apikey` header containing your subscription's API Key.  | Security Schema Type | Header Name | Example Token | | --- | --- | --- | | API Key | `apikey` | c5bfb018-ab46-4e61-9271-4ec7e9c04a6e |  In the following example, `YOU_APIKEY` represents the auth token for your account.  ``` curl --header 'apikey: YOU_APIKEY' ```  You can view and manage your API keys in the [Dashboard](/dashboard).  Be sure to keep your API keys secure. Do not share them in publicly accessible areas such as GitHub, client-side code, and so forth.  Also note that all API requests must be made over **HTTPS**. Calls made over plain HTTP will attempt to be automatically upgraded to HTTPS, though this use cases is discouraged.   ## Rate Limits  API requests may be rate limited depending on your subscription plan and traffic patterns. The following response headers will be present in these cases:  | Header | Description | | ------ | ----------- | | `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make. | | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. | | `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |  When the rate limit is **exceeded**, an error is returned with the status \"**429 Too Many Requests**\":  ```json {   \"error\": {     \"code\": \"too_many_requests\",     \"message\": \"Rate limit exceeded\"   } } ```    ## Errors  This API uses conventional HTTP response codes to indicate the success or failure of API requests. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, endpoint not found, etc.). Codes in the `5xx` range indicate an error with our API (these are rare).   
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@goog.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINews_200_response_feed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINews_200_response_feed::OAINews_200_response_feed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINews_200_response_feed::OAINews_200_response_feed() {
    this->initializeModel();
}

OAINews_200_response_feed::~OAINews_200_response_feed() {}

void OAINews_200_response_feed::initializeModel() {

    m_generator_isSet = false;
    m_generator_isValid = false;

    m_generator_detail_isSet = false;
    m_generator_detail_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_publisher_detail_isSet = false;
    m_publisher_detail_isValid = false;

    m_rights_isSet = false;
    m_rights_isValid = false;

    m_rights_detail_isSet = false;
    m_rights_detail_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_subtitle_detail_isSet = false;
    m_subtitle_detail_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_updated_parsed_isSet = false;
    m_updated_parsed_isValid = false;
}

void OAINews_200_response_feed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINews_200_response_feed::fromJsonObject(QJsonObject json) {

    m_generator_isValid = ::OpenAPI::fromJsonValue(m_generator, json[QString("generator")]);
    m_generator_isSet = !json[QString("generator")].isNull() && m_generator_isValid;

    m_generator_detail_isValid = ::OpenAPI::fromJsonValue(m_generator_detail, json[QString("generator_detail")]);
    m_generator_detail_isSet = !json[QString("generator_detail")].isNull() && m_generator_detail_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_publisher_detail_isValid = ::OpenAPI::fromJsonValue(m_publisher_detail, json[QString("publisher_detail")]);
    m_publisher_detail_isSet = !json[QString("publisher_detail")].isNull() && m_publisher_detail_isValid;

    m_rights_isValid = ::OpenAPI::fromJsonValue(m_rights, json[QString("rights")]);
    m_rights_isSet = !json[QString("rights")].isNull() && m_rights_isValid;

    m_rights_detail_isValid = ::OpenAPI::fromJsonValue(m_rights_detail, json[QString("rights_detail")]);
    m_rights_detail_isSet = !json[QString("rights_detail")].isNull() && m_rights_detail_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_subtitle_detail_isValid = ::OpenAPI::fromJsonValue(m_subtitle_detail, json[QString("subtitle_detail")]);
    m_subtitle_detail_isSet = !json[QString("subtitle_detail")].isNull() && m_subtitle_detail_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_updated_parsed_isValid = ::OpenAPI::fromJsonValue(m_updated_parsed, json[QString("updated_parsed")]);
    m_updated_parsed_isSet = !json[QString("updated_parsed")].isNull() && m_updated_parsed_isValid;
}

QString OAINews_200_response_feed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINews_200_response_feed::asJsonObject() const {
    QJsonObject obj;
    if (m_generator_isSet) {
        obj.insert(QString("generator"), ::OpenAPI::toJsonValue(m_generator));
    }
    if (m_generator_detail_isSet) {
        obj.insert(QString("generator_detail"), ::OpenAPI::toJsonValue(m_generator_detail));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_publisher_detail_isSet) {
        obj.insert(QString("publisher_detail"), ::OpenAPI::toJsonValue(m_publisher_detail));
    }
    if (m_rights_isSet) {
        obj.insert(QString("rights"), ::OpenAPI::toJsonValue(m_rights));
    }
    if (m_rights_detail_isSet) {
        obj.insert(QString("rights_detail"), ::OpenAPI::toJsonValue(m_rights_detail));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_subtitle_detail_isSet) {
        obj.insert(QString("subtitle_detail"), ::OpenAPI::toJsonValue(m_subtitle_detail));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_updated_parsed_isSet) {
        obj.insert(QString("updated_parsed"), ::OpenAPI::toJsonValue(m_updated_parsed));
    }
    return obj;
}

QString OAINews_200_response_feed::getGenerator() const {
    return m_generator;
}
void OAINews_200_response_feed::setGenerator(const QString &generator) {
    m_generator = generator;
    m_generator_isSet = true;
}

bool OAINews_200_response_feed::is_generator_Set() const{
    return m_generator_isSet;
}

bool OAINews_200_response_feed::is_generator_Valid() const{
    return m_generator_isValid;
}

QString OAINews_200_response_feed::getGeneratorDetail() const {
    return m_generator_detail;
}
void OAINews_200_response_feed::setGeneratorDetail(const QString &generator_detail) {
    m_generator_detail = generator_detail;
    m_generator_detail_isSet = true;
}

bool OAINews_200_response_feed::is_generator_detail_Set() const{
    return m_generator_detail_isSet;
}

bool OAINews_200_response_feed::is_generator_detail_Valid() const{
    return m_generator_detail_isValid;
}

QString OAINews_200_response_feed::getLanguage() const {
    return m_language;
}
void OAINews_200_response_feed::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAINews_200_response_feed::is_language_Set() const{
    return m_language_isSet;
}

bool OAINews_200_response_feed::is_language_Valid() const{
    return m_language_isValid;
}

QString OAINews_200_response_feed::getLink() const {
    return m_link;
}
void OAINews_200_response_feed::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAINews_200_response_feed::is_link_Set() const{
    return m_link_isSet;
}

bool OAINews_200_response_feed::is_link_Valid() const{
    return m_link_isValid;
}

QString OAINews_200_response_feed::getLinks() const {
    return m_links;
}
void OAINews_200_response_feed::setLinks(const QString &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAINews_200_response_feed::is_links_Set() const{
    return m_links_isSet;
}

bool OAINews_200_response_feed::is_links_Valid() const{
    return m_links_isValid;
}

QString OAINews_200_response_feed::getPublisher() const {
    return m_publisher;
}
void OAINews_200_response_feed::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAINews_200_response_feed::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAINews_200_response_feed::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAINews_200_response_feed::getPublisherDetail() const {
    return m_publisher_detail;
}
void OAINews_200_response_feed::setPublisherDetail(const QString &publisher_detail) {
    m_publisher_detail = publisher_detail;
    m_publisher_detail_isSet = true;
}

bool OAINews_200_response_feed::is_publisher_detail_Set() const{
    return m_publisher_detail_isSet;
}

bool OAINews_200_response_feed::is_publisher_detail_Valid() const{
    return m_publisher_detail_isValid;
}

QString OAINews_200_response_feed::getRights() const {
    return m_rights;
}
void OAINews_200_response_feed::setRights(const QString &rights) {
    m_rights = rights;
    m_rights_isSet = true;
}

bool OAINews_200_response_feed::is_rights_Set() const{
    return m_rights_isSet;
}

bool OAINews_200_response_feed::is_rights_Valid() const{
    return m_rights_isValid;
}

QString OAINews_200_response_feed::getRightsDetail() const {
    return m_rights_detail;
}
void OAINews_200_response_feed::setRightsDetail(const QString &rights_detail) {
    m_rights_detail = rights_detail;
    m_rights_detail_isSet = true;
}

bool OAINews_200_response_feed::is_rights_detail_Set() const{
    return m_rights_detail_isSet;
}

bool OAINews_200_response_feed::is_rights_detail_Valid() const{
    return m_rights_detail_isValid;
}

QString OAINews_200_response_feed::getSubtitle() const {
    return m_subtitle;
}
void OAINews_200_response_feed::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAINews_200_response_feed::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAINews_200_response_feed::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

QString OAINews_200_response_feed::getSubtitleDetail() const {
    return m_subtitle_detail;
}
void OAINews_200_response_feed::setSubtitleDetail(const QString &subtitle_detail) {
    m_subtitle_detail = subtitle_detail;
    m_subtitle_detail_isSet = true;
}

bool OAINews_200_response_feed::is_subtitle_detail_Set() const{
    return m_subtitle_detail_isSet;
}

bool OAINews_200_response_feed::is_subtitle_detail_Valid() const{
    return m_subtitle_detail_isValid;
}

QString OAINews_200_response_feed::getTitle() const {
    return m_title;
}
void OAINews_200_response_feed::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAINews_200_response_feed::is_title_Set() const{
    return m_title_isSet;
}

bool OAINews_200_response_feed::is_title_Valid() const{
    return m_title_isValid;
}

QString OAINews_200_response_feed::getUpdated() const {
    return m_updated;
}
void OAINews_200_response_feed::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAINews_200_response_feed::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAINews_200_response_feed::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAINews_200_response_feed::getUpdatedParsed() const {
    return m_updated_parsed;
}
void OAINews_200_response_feed::setUpdatedParsed(const QString &updated_parsed) {
    m_updated_parsed = updated_parsed;
    m_updated_parsed_isSet = true;
}

bool OAINews_200_response_feed::is_updated_parsed_Set() const{
    return m_updated_parsed_isSet;
}

bool OAINews_200_response_feed::is_updated_parsed_Valid() const{
    return m_updated_parsed_isValid;
}

bool OAINews_200_response_feed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_generator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generator_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rights_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_parsed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINews_200_response_feed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
