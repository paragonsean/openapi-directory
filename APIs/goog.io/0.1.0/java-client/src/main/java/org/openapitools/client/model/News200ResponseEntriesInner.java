/*
 * goog.io | Unoffical Google Search API
 * # Intoduction  This is the OpenAPI V3 documentation for https://api.goog.io  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  Googio is the ultimate search API for Google Searches, Google News, and Google SERP. # Docs  > An Unofficial Google Search API  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  # Example Code   Check out [Github repo](https://github.com/googio/googio_examples) for example code for calling the API with various languages.  # Authentication  ### API Key  Optional API key for authenticated access. Note that we use \"API key\" interchangably in these docs.  Authenticated requests must include an `apikey` header containing your subscription's API Key.  | Security Schema Type | Header Name | Example Token | | --- | --- | --- | | API Key | `apikey` | c5bfb018-ab46-4e61-9271-4ec7e9c04a6e |  In the following example, `YOU_APIKEY` represents the auth token for your account.  ``` curl --header 'apikey: YOU_APIKEY' ```  You can view and manage your API keys in the [Dashboard](/dashboard).  Be sure to keep your API keys secure. Do not share them in publicly accessible areas such as GitHub, client-side code, and so forth.  Also note that all API requests must be made over **HTTPS**. Calls made over plain HTTP will attempt to be automatically upgraded to HTTPS, though this use cases is discouraged.   ## Rate Limits  API requests may be rate limited depending on your subscription plan and traffic patterns. The following response headers will be present in these cases:  | Header | Description | | ------ | ----------- | | `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make. | | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. | | `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |  When the rate limit is **exceeded**, an error is returned with the status \"**429 Too Many Requests**\":  ```json {   \"error\": {     \"code\": \"too_many_requests\",     \"message\": \"Rate limit exceeded\"   } } ```    ## Errors  This API uses conventional HTTP response codes to indicate the success or failure of API requests. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, endpoint not found, etc.). Codes in the `5xx` range indicate an error with our API (these are rare).   
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@goog.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * News200ResponseEntriesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:34.319451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class News200ResponseEntriesInner {
  public static final String SERIALIZED_NAME_GUIDISLINK = "guidislink";
  @SerializedName(SERIALIZED_NAME_GUIDISLINK)
  private String guidislink;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private String links;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private String published;

  public static final String SERIALIZED_NAME_PUBLISHED_PARSED = "published_parsed";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_PARSED)
  private String publishedParsed;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SUB_ARTICLES = "sub_articles";
  @SerializedName(SERIALIZED_NAME_SUB_ARTICLES)
  private String subArticles;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_SUMMARY_DETAIL = "summary_detail";
  @SerializedName(SERIALIZED_NAME_SUMMARY_DETAIL)
  private String summaryDetail;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TITLE_DETAIL = "title_detail";
  @SerializedName(SERIALIZED_NAME_TITLE_DETAIL)
  private String titleDetail;

  public News200ResponseEntriesInner() {
  }

  public News200ResponseEntriesInner guidislink(String guidislink) {
    this.guidislink = guidislink;
    return this;
  }

  /**
   * Get guidislink
   * @return guidislink
   */
  @javax.annotation.Nullable
  public String getGuidislink() {
    return guidislink;
  }

  public void setGuidislink(String guidislink) {
    this.guidislink = guidislink;
  }


  public News200ResponseEntriesInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public News200ResponseEntriesInner link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public News200ResponseEntriesInner links(String links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public String getLinks() {
    return links;
  }

  public void setLinks(String links) {
    this.links = links;
  }


  public News200ResponseEntriesInner published(String published) {
    this.published = published;
    return this;
  }

  /**
   * Get published
   * @return published
   */
  @javax.annotation.Nullable
  public String getPublished() {
    return published;
  }

  public void setPublished(String published) {
    this.published = published;
  }


  public News200ResponseEntriesInner publishedParsed(String publishedParsed) {
    this.publishedParsed = publishedParsed;
    return this;
  }

  /**
   * Get publishedParsed
   * @return publishedParsed
   */
  @javax.annotation.Nullable
  public String getPublishedParsed() {
    return publishedParsed;
  }

  public void setPublishedParsed(String publishedParsed) {
    this.publishedParsed = publishedParsed;
  }


  public News200ResponseEntriesInner source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public News200ResponseEntriesInner subArticles(String subArticles) {
    this.subArticles = subArticles;
    return this;
  }

  /**
   * Get subArticles
   * @return subArticles
   */
  @javax.annotation.Nullable
  public String getSubArticles() {
    return subArticles;
  }

  public void setSubArticles(String subArticles) {
    this.subArticles = subArticles;
  }


  public News200ResponseEntriesInner summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public News200ResponseEntriesInner summaryDetail(String summaryDetail) {
    this.summaryDetail = summaryDetail;
    return this;
  }

  /**
   * Get summaryDetail
   * @return summaryDetail
   */
  @javax.annotation.Nullable
  public String getSummaryDetail() {
    return summaryDetail;
  }

  public void setSummaryDetail(String summaryDetail) {
    this.summaryDetail = summaryDetail;
  }


  public News200ResponseEntriesInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public News200ResponseEntriesInner titleDetail(String titleDetail) {
    this.titleDetail = titleDetail;
    return this;
  }

  /**
   * Get titleDetail
   * @return titleDetail
   */
  @javax.annotation.Nullable
  public String getTitleDetail() {
    return titleDetail;
  }

  public void setTitleDetail(String titleDetail) {
    this.titleDetail = titleDetail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    News200ResponseEntriesInner news200ResponseEntriesInner = (News200ResponseEntriesInner) o;
    return Objects.equals(this.guidislink, news200ResponseEntriesInner.guidislink) &&
        Objects.equals(this.id, news200ResponseEntriesInner.id) &&
        Objects.equals(this.link, news200ResponseEntriesInner.link) &&
        Objects.equals(this.links, news200ResponseEntriesInner.links) &&
        Objects.equals(this.published, news200ResponseEntriesInner.published) &&
        Objects.equals(this.publishedParsed, news200ResponseEntriesInner.publishedParsed) &&
        Objects.equals(this.source, news200ResponseEntriesInner.source) &&
        Objects.equals(this.subArticles, news200ResponseEntriesInner.subArticles) &&
        Objects.equals(this.summary, news200ResponseEntriesInner.summary) &&
        Objects.equals(this.summaryDetail, news200ResponseEntriesInner.summaryDetail) &&
        Objects.equals(this.title, news200ResponseEntriesInner.title) &&
        Objects.equals(this.titleDetail, news200ResponseEntriesInner.titleDetail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guidislink, id, link, links, published, publishedParsed, source, subArticles, summary, summaryDetail, title, titleDetail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class News200ResponseEntriesInner {\n");
    sb.append("    guidislink: ").append(toIndentedString(guidislink)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    publishedParsed: ").append(toIndentedString(publishedParsed)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    subArticles: ").append(toIndentedString(subArticles)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    summaryDetail: ").append(toIndentedString(summaryDetail)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    titleDetail: ").append(toIndentedString(titleDetail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("guidislink");
    openapiFields.add("id");
    openapiFields.add("link");
    openapiFields.add("links");
    openapiFields.add("published");
    openapiFields.add("published_parsed");
    openapiFields.add("source");
    openapiFields.add("sub_articles");
    openapiFields.add("summary");
    openapiFields.add("summary_detail");
    openapiFields.add("title");
    openapiFields.add("title_detail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to News200ResponseEntriesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!News200ResponseEntriesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in News200ResponseEntriesInner is not found in the empty JSON string", News200ResponseEntriesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!News200ResponseEntriesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `News200ResponseEntriesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("guidislink") != null && !jsonObj.get("guidislink").isJsonNull()) && !jsonObj.get("guidislink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guidislink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guidislink").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) && !jsonObj.get("links").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `links` to be a primitive type in the JSON string but got `%s`", jsonObj.get("links").toString()));
      }
      if ((jsonObj.get("published") != null && !jsonObj.get("published").isJsonNull()) && !jsonObj.get("published").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published").toString()));
      }
      if ((jsonObj.get("published_parsed") != null && !jsonObj.get("published_parsed").isJsonNull()) && !jsonObj.get("published_parsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_parsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_parsed").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("sub_articles") != null && !jsonObj.get("sub_articles").isJsonNull()) && !jsonObj.get("sub_articles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_articles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_articles").toString()));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if ((jsonObj.get("summary_detail") != null && !jsonObj.get("summary_detail").isJsonNull()) && !jsonObj.get("summary_detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary_detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary_detail").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("title_detail") != null && !jsonObj.get("title_detail").isJsonNull()) && !jsonObj.get("title_detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_detail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!News200ResponseEntriesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'News200ResponseEntriesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<News200ResponseEntriesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(News200ResponseEntriesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<News200ResponseEntriesInner>() {
           @Override
           public void write(JsonWriter out, News200ResponseEntriesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public News200ResponseEntriesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of News200ResponseEntriesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of News200ResponseEntriesInner
   * @throws IOException if the JSON string is invalid with respect to News200ResponseEntriesInner
   */
  public static News200ResponseEntriesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, News200ResponseEntriesInner.class);
  }

  /**
   * Convert an instance of News200ResponseEntriesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

