/*
 * goog.io | Unoffical Google Search API
 * # Intoduction  This is the OpenAPI V3 documentation for https://api.goog.io  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  Googio is the ultimate search API for Google Searches, Google News, and Google SERP. # Docs  > An Unofficial Google Search API  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  # Example Code   Check out [Github repo](https://github.com/googio/googio_examples) for example code for calling the API with various languages.  # Authentication  ### API Key  Optional API key for authenticated access. Note that we use \"API key\" interchangably in these docs.  Authenticated requests must include an `apikey` header containing your subscription's API Key.  | Security Schema Type | Header Name | Example Token | | --- | --- | --- | | API Key | `apikey` | c5bfb018-ab46-4e61-9271-4ec7e9c04a6e |  In the following example, `YOU_APIKEY` represents the auth token for your account.  ``` curl --header 'apikey: YOU_APIKEY' ```  You can view and manage your API keys in the [Dashboard](/dashboard).  Be sure to keep your API keys secure. Do not share them in publicly accessible areas such as GitHub, client-side code, and so forth.  Also note that all API requests must be made over **HTTPS**. Calls made over plain HTTP will attempt to be automatically upgraded to HTTPS, though this use cases is discouraged.   ## Rate Limits  API requests may be rate limited depending on your subscription plan and traffic patterns. The following response headers will be present in these cases:  | Header | Description | | ------ | ----------- | | `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make. | | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. | | `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |  When the rate limit is **exceeded**, an error is returned with the status \"**429 Too Many Requests**\":  ```json {   \"error\": {     \"code\": \"too_many_requests\",     \"message\": \"Rate limit exceeded\"   } } ```    ## Errors  This API uses conventional HTTP response codes to indicate the success or failure of API requests. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, endpoint not found, etc.). Codes in the `5xx` range indicate an error with our API (these are rare).   
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@goog.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * News200ResponseFeed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:34.319451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class News200ResponseFeed {
  public static final String SERIALIZED_NAME_GENERATOR = "generator";
  @SerializedName(SERIALIZED_NAME_GENERATOR)
  private String generator;

  public static final String SERIALIZED_NAME_GENERATOR_DETAIL = "generator_detail";
  @SerializedName(SERIALIZED_NAME_GENERATOR_DETAIL)
  private String generatorDetail;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private String links;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_PUBLISHER_DETAIL = "publisher_detail";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_DETAIL)
  private String publisherDetail;

  public static final String SERIALIZED_NAME_RIGHTS = "rights";
  @SerializedName(SERIALIZED_NAME_RIGHTS)
  private String rights;

  public static final String SERIALIZED_NAME_RIGHTS_DETAIL = "rights_detail";
  @SerializedName(SERIALIZED_NAME_RIGHTS_DETAIL)
  private String rightsDetail;

  public static final String SERIALIZED_NAME_SUBTITLE = "subtitle";
  @SerializedName(SERIALIZED_NAME_SUBTITLE)
  private String subtitle;

  public static final String SERIALIZED_NAME_SUBTITLE_DETAIL = "subtitle_detail";
  @SerializedName(SERIALIZED_NAME_SUBTITLE_DETAIL)
  private String subtitleDetail;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_UPDATED_PARSED = "updated_parsed";
  @SerializedName(SERIALIZED_NAME_UPDATED_PARSED)
  private String updatedParsed;

  public News200ResponseFeed() {
  }

  public News200ResponseFeed generator(String generator) {
    this.generator = generator;
    return this;
  }

  /**
   * Get generator
   * @return generator
   */
  @javax.annotation.Nullable
  public String getGenerator() {
    return generator;
  }

  public void setGenerator(String generator) {
    this.generator = generator;
  }


  public News200ResponseFeed generatorDetail(String generatorDetail) {
    this.generatorDetail = generatorDetail;
    return this;
  }

  /**
   * Get generatorDetail
   * @return generatorDetail
   */
  @javax.annotation.Nullable
  public String getGeneratorDetail() {
    return generatorDetail;
  }

  public void setGeneratorDetail(String generatorDetail) {
    this.generatorDetail = generatorDetail;
  }


  public News200ResponseFeed language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public News200ResponseFeed link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public News200ResponseFeed links(String links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public String getLinks() {
    return links;
  }

  public void setLinks(String links) {
    this.links = links;
  }


  public News200ResponseFeed publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * Get publisher
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public News200ResponseFeed publisherDetail(String publisherDetail) {
    this.publisherDetail = publisherDetail;
    return this;
  }

  /**
   * Get publisherDetail
   * @return publisherDetail
   */
  @javax.annotation.Nullable
  public String getPublisherDetail() {
    return publisherDetail;
  }

  public void setPublisherDetail(String publisherDetail) {
    this.publisherDetail = publisherDetail;
  }


  public News200ResponseFeed rights(String rights) {
    this.rights = rights;
    return this;
  }

  /**
   * Get rights
   * @return rights
   */
  @javax.annotation.Nullable
  public String getRights() {
    return rights;
  }

  public void setRights(String rights) {
    this.rights = rights;
  }


  public News200ResponseFeed rightsDetail(String rightsDetail) {
    this.rightsDetail = rightsDetail;
    return this;
  }

  /**
   * Get rightsDetail
   * @return rightsDetail
   */
  @javax.annotation.Nullable
  public String getRightsDetail() {
    return rightsDetail;
  }

  public void setRightsDetail(String rightsDetail) {
    this.rightsDetail = rightsDetail;
  }


  public News200ResponseFeed subtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

  /**
   * Get subtitle
   * @return subtitle
   */
  @javax.annotation.Nullable
  public String getSubtitle() {
    return subtitle;
  }

  public void setSubtitle(String subtitle) {
    this.subtitle = subtitle;
  }


  public News200ResponseFeed subtitleDetail(String subtitleDetail) {
    this.subtitleDetail = subtitleDetail;
    return this;
  }

  /**
   * Get subtitleDetail
   * @return subtitleDetail
   */
  @javax.annotation.Nullable
  public String getSubtitleDetail() {
    return subtitleDetail;
  }

  public void setSubtitleDetail(String subtitleDetail) {
    this.subtitleDetail = subtitleDetail;
  }


  public News200ResponseFeed title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public News200ResponseFeed updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public News200ResponseFeed updatedParsed(String updatedParsed) {
    this.updatedParsed = updatedParsed;
    return this;
  }

  /**
   * Get updatedParsed
   * @return updatedParsed
   */
  @javax.annotation.Nullable
  public String getUpdatedParsed() {
    return updatedParsed;
  }

  public void setUpdatedParsed(String updatedParsed) {
    this.updatedParsed = updatedParsed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    News200ResponseFeed news200ResponseFeed = (News200ResponseFeed) o;
    return Objects.equals(this.generator, news200ResponseFeed.generator) &&
        Objects.equals(this.generatorDetail, news200ResponseFeed.generatorDetail) &&
        Objects.equals(this.language, news200ResponseFeed.language) &&
        Objects.equals(this.link, news200ResponseFeed.link) &&
        Objects.equals(this.links, news200ResponseFeed.links) &&
        Objects.equals(this.publisher, news200ResponseFeed.publisher) &&
        Objects.equals(this.publisherDetail, news200ResponseFeed.publisherDetail) &&
        Objects.equals(this.rights, news200ResponseFeed.rights) &&
        Objects.equals(this.rightsDetail, news200ResponseFeed.rightsDetail) &&
        Objects.equals(this.subtitle, news200ResponseFeed.subtitle) &&
        Objects.equals(this.subtitleDetail, news200ResponseFeed.subtitleDetail) &&
        Objects.equals(this.title, news200ResponseFeed.title) &&
        Objects.equals(this.updated, news200ResponseFeed.updated) &&
        Objects.equals(this.updatedParsed, news200ResponseFeed.updatedParsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(generator, generatorDetail, language, link, links, publisher, publisherDetail, rights, rightsDetail, subtitle, subtitleDetail, title, updated, updatedParsed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class News200ResponseFeed {\n");
    sb.append("    generator: ").append(toIndentedString(generator)).append("\n");
    sb.append("    generatorDetail: ").append(toIndentedString(generatorDetail)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    publisherDetail: ").append(toIndentedString(publisherDetail)).append("\n");
    sb.append("    rights: ").append(toIndentedString(rights)).append("\n");
    sb.append("    rightsDetail: ").append(toIndentedString(rightsDetail)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    subtitleDetail: ").append(toIndentedString(subtitleDetail)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    updatedParsed: ").append(toIndentedString(updatedParsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("generator");
    openapiFields.add("generator_detail");
    openapiFields.add("language");
    openapiFields.add("link");
    openapiFields.add("links");
    openapiFields.add("publisher");
    openapiFields.add("publisher_detail");
    openapiFields.add("rights");
    openapiFields.add("rights_detail");
    openapiFields.add("subtitle");
    openapiFields.add("subtitle_detail");
    openapiFields.add("title");
    openapiFields.add("updated");
    openapiFields.add("updated_parsed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to News200ResponseFeed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!News200ResponseFeed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in News200ResponseFeed is not found in the empty JSON string", News200ResponseFeed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!News200ResponseFeed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `News200ResponseFeed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("generator") != null && !jsonObj.get("generator").isJsonNull()) && !jsonObj.get("generator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generator").toString()));
      }
      if ((jsonObj.get("generator_detail") != null && !jsonObj.get("generator_detail").isJsonNull()) && !jsonObj.get("generator_detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generator_detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generator_detail").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) && !jsonObj.get("links").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `links` to be a primitive type in the JSON string but got `%s`", jsonObj.get("links").toString()));
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      if ((jsonObj.get("publisher_detail") != null && !jsonObj.get("publisher_detail").isJsonNull()) && !jsonObj.get("publisher_detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher_detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher_detail").toString()));
      }
      if ((jsonObj.get("rights") != null && !jsonObj.get("rights").isJsonNull()) && !jsonObj.get("rights").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rights` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rights").toString()));
      }
      if ((jsonObj.get("rights_detail") != null && !jsonObj.get("rights_detail").isJsonNull()) && !jsonObj.get("rights_detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rights_detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rights_detail").toString()));
      }
      if ((jsonObj.get("subtitle") != null && !jsonObj.get("subtitle").isJsonNull()) && !jsonObj.get("subtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtitle").toString()));
      }
      if ((jsonObj.get("subtitle_detail") != null && !jsonObj.get("subtitle_detail").isJsonNull()) && !jsonObj.get("subtitle_detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtitle_detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtitle_detail").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if ((jsonObj.get("updated_parsed") != null && !jsonObj.get("updated_parsed").isJsonNull()) && !jsonObj.get("updated_parsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_parsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_parsed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!News200ResponseFeed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'News200ResponseFeed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<News200ResponseFeed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(News200ResponseFeed.class));

       return (TypeAdapter<T>) new TypeAdapter<News200ResponseFeed>() {
           @Override
           public void write(JsonWriter out, News200ResponseFeed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public News200ResponseFeed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of News200ResponseFeed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of News200ResponseFeed
   * @throws IOException if the JSON string is invalid with respect to News200ResponseFeed
   */
  public static News200ResponseFeed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, News200ResponseFeed.class);
  }

  /**
   * Convert an instance of News200ResponseFeed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

