/*
 * goog.io | Unoffical Google Search API
 * # Intoduction  This is the OpenAPI V3 documentation for https://api.goog.io  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  Googio is the ultimate search API for Google Searches, Google News, and Google SERP. # Docs  > An Unofficial Google Search API  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  # Example Code   Check out [Github repo](https://github.com/googio/googio_examples) for example code for calling the API with various languages.  # Authentication  ### API Key  Optional API key for authenticated access. Note that we use \"API key\" interchangably in these docs.  Authenticated requests must include an `apikey` header containing your subscription's API Key.  | Security Schema Type | Header Name | Example Token | | --- | --- | --- | | API Key | `apikey` | c5bfb018-ab46-4e61-9271-4ec7e9c04a6e |  In the following example, `YOU_APIKEY` represents the auth token for your account.  ``` curl --header 'apikey: YOU_APIKEY' ```  You can view and manage your API keys in the [Dashboard](/dashboard).  Be sure to keep your API keys secure. Do not share them in publicly accessible areas such as GitHub, client-side code, and so forth.  Also note that all API requests must be made over **HTTPS**. Calls made over plain HTTP will attempt to be automatically upgraded to HTTPS, though this use cases is discouraged.   ## Rate Limits  API requests may be rate limited depending on your subscription plan and traffic patterns. The following response headers will be present in these cases:  | Header | Description | | ------ | ----------- | | `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make. | | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. | | `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |  When the rate limit is **exceeded**, an error is returned with the status \"**429 Too Many Requests**\":  ```json {   \"error\": {     \"code\": \"too_many_requests\",     \"message\": \"Rate limit exceeded\"   } } ```    ## Errors  This API uses conventional HTTP response codes to indicate the success or failure of API requests. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, endpoint not found, etc.). Codes in the `5xx` range indicate an error with our API (these are rare).   
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@goog.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Crawl200Response;
import org.openapitools.client.model.GetTheStatusOfTheAPIService200Response;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.Images200Response;
import org.openapitools.client.model.News200Response;
import org.openapitools.client.model.Search200Response;
import org.openapitools.client.model.Serp200Response;
import org.openapitools.client.model.SerpData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for crawl
     * @param query  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/crawl/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crawlValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling crawl(Async)");
        }

        return crawlCall(query, _callback);

    }

    /**
     * Crawl
     * Perform Google Search   Parameters ---------- query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formating  Returns ------- json: a the html source of the results page
     * @param query  (required)
     * @return Crawl200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public Crawl200Response crawl(String query) throws ApiException {
        ApiResponse<Crawl200Response> localVarResp = crawlWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * Crawl
     * Perform Google Search   Parameters ---------- query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formating  Returns ------- json: a the html source of the results page
     * @param query  (required)
     * @return ApiResponse&lt;Crawl200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Crawl200Response> crawlWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = crawlValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<Crawl200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Crawl (asynchronously)
     * Perform Google Search   Parameters ---------- query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formating  Returns ------- json: a the html source of the results page
     * @param query  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlAsync(String query, final ApiCallback<Crawl200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = crawlValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<Crawl200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTheStatusOfTheAPIService
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTheStatusOfTheAPIServiceCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTheStatusOfTheAPIServiceValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTheStatusOfTheAPIServiceCall(_callback);

    }

    /**
     * Status
     * It \&quot;status\&quot; &#x3D;&#x3D; true then API is up, else the API is down
     * @return GetTheStatusOfTheAPIService200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetTheStatusOfTheAPIService200Response getTheStatusOfTheAPIService() throws ApiException {
        ApiResponse<GetTheStatusOfTheAPIService200Response> localVarResp = getTheStatusOfTheAPIServiceWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Status
     * It \&quot;status\&quot; &#x3D;&#x3D; true then API is up, else the API is down
     * @return ApiResponse&lt;GetTheStatusOfTheAPIService200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTheStatusOfTheAPIService200Response> getTheStatusOfTheAPIServiceWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTheStatusOfTheAPIServiceValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetTheStatusOfTheAPIService200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Status (asynchronously)
     * It \&quot;status\&quot; &#x3D;&#x3D; true then API is up, else the API is down
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTheStatusOfTheAPIServiceAsync(final ApiCallback<GetTheStatusOfTheAPIService200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTheStatusOfTheAPIServiceValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetTheStatusOfTheAPIService200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for images
     * @param query  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/images/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling images(Async)");
        }

        return imagesCall(query, _callback);

    }

    /**
     * Images
     * Perform Google Image Search  Parameters ---------- query : the string query to perform search. supports advance queries.  Returns ------- json: a list of results with the link, description, and title for each result
     * @param query  (required)
     * @return Images200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Images200Response images(String query) throws ApiException {
        ApiResponse<Images200Response> localVarResp = imagesWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * Images
     * Perform Google Image Search  Parameters ---------- query : the string query to perform search. supports advance queries.  Returns ------- json: a list of results with the link, description, and title for each result
     * @param query  (required)
     * @return ApiResponse&lt;Images200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Images200Response> imagesWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = imagesValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<Images200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Images (asynchronously)
     * Perform Google Image Search  Parameters ---------- query : the string query to perform search. supports advance queries.  Returns ------- json: a list of results with the link, description, and title for each result
     * @param query  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesAsync(String query, final ApiCallback<Images200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<Images200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for news
     * @param query  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity (WebDAV) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newsCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/news/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newsValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling news(Async)");
        }

        return newsCall(query, _callback);

    }

    /**
     * News
     * Perform Google News Search   Parameters ---------- query : the string query to perform search for Google news. A simple query for &#x60;president&#x60; will be &#x60;q&#x3D;president&#x60;. An example of multiple keyword would be &#x60;q&#x3D;news+about+presdient+trump&#x60;. News can also be filtered by country and language. For &#x60;US&#x60; news and in English the query will be &#x60;q&#x3D;trump&amp;ceid&#x3D;US:en&#x60; for news in Great Britian the query will be &#x60;q&#x3D;trump&amp;ceid&#x3D;GB:en&#x60;  Returns ------- json: {\&quot;feed\&quot;: { \&quot;title\&quot; : \&quot;trump\&quot; ...} , \&quot;entites\&quot;: [ {\&quot;title\&quot; : \&quot;Trump doubles down on divisive messaging in speech to honor Independence Day - CNN\&quot;, \&quot;links\&quot;: []} ...]}
     * @param query  (required)
     * @return News200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity (WebDAV) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public News200Response news(String query) throws ApiException {
        ApiResponse<News200Response> localVarResp = newsWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * News
     * Perform Google News Search   Parameters ---------- query : the string query to perform search for Google news. A simple query for &#x60;president&#x60; will be &#x60;q&#x3D;president&#x60;. An example of multiple keyword would be &#x60;q&#x3D;news+about+presdient+trump&#x60;. News can also be filtered by country and language. For &#x60;US&#x60; news and in English the query will be &#x60;q&#x3D;trump&amp;ceid&#x3D;US:en&#x60; for news in Great Britian the query will be &#x60;q&#x3D;trump&amp;ceid&#x3D;GB:en&#x60;  Returns ------- json: {\&quot;feed\&quot;: { \&quot;title\&quot; : \&quot;trump\&quot; ...} , \&quot;entites\&quot;: [ {\&quot;title\&quot; : \&quot;Trump doubles down on divisive messaging in speech to honor Independence Day - CNN\&quot;, \&quot;links\&quot;: []} ...]}
     * @param query  (required)
     * @return ApiResponse&lt;News200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity (WebDAV) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<News200Response> newsWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = newsValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<News200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * News (asynchronously)
     * Perform Google News Search   Parameters ---------- query : the string query to perform search for Google news. A simple query for &#x60;president&#x60; will be &#x60;q&#x3D;president&#x60;. An example of multiple keyword would be &#x60;q&#x3D;news+about+presdient+trump&#x60;. News can also be filtered by country and language. For &#x60;US&#x60; news and in English the query will be &#x60;q&#x3D;trump&amp;ceid&#x3D;US:en&#x60; for news in Great Britian the query will be &#x60;q&#x3D;trump&amp;ceid&#x3D;GB:en&#x60;  Returns ------- json: {\&quot;feed\&quot;: { \&quot;title\&quot; : \&quot;trump\&quot; ...} , \&quot;entites\&quot;: [ {\&quot;title\&quot; : \&quot;Trump doubles down on divisive messaging in speech to honor Independence Day - CNN\&quot;, \&quot;links\&quot;: []} ...]}
     * @param query  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity (WebDAV) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newsAsync(String query, final ApiCallback<News200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = newsValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<News200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for search
     * @param query  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/search/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling search(Async)");
        }

        return searchCall(query, _callback);

    }

    /**
     * Search
     * Perform Google Search  Parameters ---------- query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formating  Returns ------- json: a list of results with the link, description, and title for each result
     * @param query  (required)
     * @return Search200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public Search200Response search(String query) throws ApiException {
        ApiResponse<Search200Response> localVarResp = searchWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * Search
     * Perform Google Search  Parameters ---------- query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formating  Returns ------- json: a list of results with the link, description, and title for each result
     * @param query  (required)
     * @return ApiResponse&lt;Search200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Search200Response> searchWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<Search200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search (asynchronously)
     * Perform Google Search  Parameters ---------- query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formating  Returns ------- json: a list of results with the link, description, and title for each result
     * @param query  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAsync(String query, final ApiCallback<Search200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<Search200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serp
     * @param serpData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpCall(SerpData serpData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpData;

        // create path and map variables
        String localVarPath = "/v1/serp/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpValidateBeforeCall(SerpData serpData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serpData' is set
        if (serpData == null) {
            throw new ApiException("Missing the required parameter 'serpData' when calling serp(Async)");
        }

        return serpCall(serpData, _callback);

    }

    /**
     * SERP
     * Perform Google Search and search for website in Search Engine Results Pages (SERP)  Parameters ---------- query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formatting, it is recommended to set the query &#x60;&amp;num&#x3D;100&#x60;  Returns ------- json: a list of results with the query, website, searched_results, and position. json[\&quot;position\&quot;] will be set to -1 if website is not found in results
     * @param serpData  (required)
     * @return Serp200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public Serp200Response serp(SerpData serpData) throws ApiException {
        ApiResponse<Serp200Response> localVarResp = serpWithHttpInfo(serpData);
        return localVarResp.getData();
    }

    /**
     * SERP
     * Perform Google Search and search for website in Search Engine Results Pages (SERP)  Parameters ---------- query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formatting, it is recommended to set the query &#x60;&amp;num&#x3D;100&#x60;  Returns ------- json: a list of results with the query, website, searched_results, and position. json[\&quot;position\&quot;] will be set to -1 if website is not found in results
     * @param serpData  (required)
     * @return ApiResponse&lt;Serp200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Serp200Response> serpWithHttpInfo(SerpData serpData) throws ApiException {
        okhttp3.Call localVarCall = serpValidateBeforeCall(serpData, null);
        Type localVarReturnType = new TypeToken<Serp200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SERP (asynchronously)
     * Perform Google Search and search for website in Search Engine Results Pages (SERP)  Parameters ---------- query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formatting, it is recommended to set the query &#x60;&amp;num&#x3D;100&#x60;  Returns ------- json: a list of results with the query, website, searched_results, and position. json[\&quot;position\&quot;] will be set to -1 if website is not found in results
     * @param serpData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpAsync(SerpData serpData, final ApiCallback<Serp200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpValidateBeforeCall(serpData, _callback);
        Type localVarReturnType = new TypeToken<Serp200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
