/*
 * goog.io | Unoffical Google Search API
 * # Intoduction  This is the OpenAPI V3 documentation for https://api.goog.io  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  Googio is the ultimate search API for Google Searches, Google News, and Google SERP. # Docs  > An Unofficial Google Search API  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  # Example Code   Check out [Github repo](https://github.com/googio/googio_examples) for example code for calling the API with various languages.  # Authentication  ### API Key  Optional API key for authenticated access. Note that we use \"API key\" interchangably in these docs.  Authenticated requests must include an `apikey` header containing your subscription's API Key.  | Security Schema Type | Header Name | Example Token | | --- | --- | --- | | API Key | `apikey` | c5bfb018-ab46-4e61-9271-4ec7e9c04a6e |  In the following example, `YOU_APIKEY` represents the auth token for your account.  ``` curl --header 'apikey: YOU_APIKEY' ```  You can view and manage your API keys in the [Dashboard](/dashboard).  Be sure to keep your API keys secure. Do not share them in publicly accessible areas such as GitHub, client-side code, and so forth.  Also note that all API requests must be made over **HTTPS**. Calls made over plain HTTP will attempt to be automatically upgraded to HTTPS, though this use cases is discouraged.   ## Rate Limits  API requests may be rate limited depending on your subscription plan and traffic patterns. The following response headers will be present in these cases:  | Header | Description | | ------ | ----------- | | `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make. | | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. | | `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |  When the rate limit is **exceeded**, an error is returned with the status \"**429 Too Many Requests**\":  ```json {   \"error\": {     \"code\": \"too_many_requests\",     \"message\": \"Rate limit exceeded\"   } } ```    ## Errors  This API uses conventional HTTP response codes to indicate the success or failure of API requests. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, endpoint not found, etc.). Codes in the `5xx` range indicate an error with our API (these are rare).   
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@goog.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Images200ResponseImageResultsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Images200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:34.319451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Images200Response {
  public static final String SERIALIZED_NAME_ANSWERS = "answers";
  @SerializedName(SERIALIZED_NAME_ANSWERS)
  private List<String> answers = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_RESULTS = "image_results";
  @SerializedName(SERIALIZED_NAME_IMAGE_RESULTS)
  private List<Images200ResponseImageResultsInner> imageResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<Object> results = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public Images200Response() {
  }

  public Images200Response answers(List<String> answers) {
    this.answers = answers;
    return this;
  }

  public Images200Response addAnswersItem(String answersItem) {
    if (this.answers == null) {
      this.answers = new ArrayList<>();
    }
    this.answers.add(answersItem);
    return this;
  }

  /**
   * Get answers
   * @return answers
   */
  @javax.annotation.Nullable
  public List<String> getAnswers() {
    return answers;
  }

  public void setAnswers(List<String> answers) {
    this.answers = answers;
  }


  public Images200Response imageResults(List<Images200ResponseImageResultsInner> imageResults) {
    this.imageResults = imageResults;
    return this;
  }

  public Images200Response addImageResultsItem(Images200ResponseImageResultsInner imageResultsItem) {
    if (this.imageResults == null) {
      this.imageResults = new ArrayList<>();
    }
    this.imageResults.add(imageResultsItem);
    return this;
  }

  /**
   * Get imageResults
   * @return imageResults
   */
  @javax.annotation.Nullable
  public List<Images200ResponseImageResultsInner> getImageResults() {
    return imageResults;
  }

  public void setImageResults(List<Images200ResponseImageResultsInner> imageResults) {
    this.imageResults = imageResults;
  }


  public Images200Response results(List<Object> results) {
    this.results = results;
    return this;
  }

  public Images200Response addResultsItem(Object resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

  /**
   * Get results
   * @return results
   */
  @javax.annotation.Nullable
  public List<Object> getResults() {
    return results;
  }

  public void setResults(List<Object> results) {
    this.results = results;
  }


  public Images200Response total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Images200Response images200Response = (Images200Response) o;
    return Objects.equals(this.answers, images200Response.answers) &&
        Objects.equals(this.imageResults, images200Response.imageResults) &&
        Objects.equals(this.results, images200Response.results) &&
        Objects.equals(this.total, images200Response.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answers, imageResults, results, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Images200Response {\n");
    sb.append("    answers: ").append(toIndentedString(answers)).append("\n");
    sb.append("    imageResults: ").append(toIndentedString(imageResults)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answers");
    openapiFields.add("image_results");
    openapiFields.add("results");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Images200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Images200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Images200Response is not found in the empty JSON string", Images200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Images200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Images200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("answers") != null && !jsonObj.get("answers").isJsonNull() && !jsonObj.get("answers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `answers` to be an array in the JSON string but got `%s`", jsonObj.get("answers").toString()));
      }
      if (jsonObj.get("image_results") != null && !jsonObj.get("image_results").isJsonNull()) {
        JsonArray jsonArrayimageResults = jsonObj.getAsJsonArray("image_results");
        if (jsonArrayimageResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("image_results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `image_results` to be an array in the JSON string but got `%s`", jsonObj.get("image_results").toString()));
          }

          // validate the optional field `image_results` (array)
          for (int i = 0; i < jsonArrayimageResults.size(); i++) {
            Images200ResponseImageResultsInner.validateJsonElement(jsonArrayimageResults.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull() && !jsonObj.get("results").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Images200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Images200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Images200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Images200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Images200Response>() {
           @Override
           public void write(JsonWriter out, Images200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Images200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Images200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Images200Response
   * @throws IOException if the JSON string is invalid with respect to Images200Response
   */
  public static Images200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Images200Response.class);
  }

  /**
   * Convert an instance of Images200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

