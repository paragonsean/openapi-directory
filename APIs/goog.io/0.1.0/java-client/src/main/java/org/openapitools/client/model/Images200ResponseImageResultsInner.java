/*
 * goog.io | Unoffical Google Search API
 * # Intoduction  This is the OpenAPI V3 documentation for https://api.goog.io  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  Googio is the ultimate search API for Google Searches, Google News, and Google SERP. # Docs  > An Unofficial Google Search API  An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.  Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.  # Example Code   Check out [Github repo](https://github.com/googio/googio_examples) for example code for calling the API with various languages.  # Authentication  ### API Key  Optional API key for authenticated access. Note that we use \"API key\" interchangably in these docs.  Authenticated requests must include an `apikey` header containing your subscription's API Key.  | Security Schema Type | Header Name | Example Token | | --- | --- | --- | | API Key | `apikey` | c5bfb018-ab46-4e61-9271-4ec7e9c04a6e |  In the following example, `YOU_APIKEY` represents the auth token for your account.  ``` curl --header 'apikey: YOU_APIKEY' ```  You can view and manage your API keys in the [Dashboard](/dashboard).  Be sure to keep your API keys secure. Do not share them in publicly accessible areas such as GitHub, client-side code, and so forth.  Also note that all API requests must be made over **HTTPS**. Calls made over plain HTTP will attempt to be automatically upgraded to HTTPS, though this use cases is discouraged.   ## Rate Limits  API requests may be rate limited depending on your subscription plan and traffic patterns. The following response headers will be present in these cases:  | Header | Description | | ------ | ----------- | | `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make. | | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. | | `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |  When the rate limit is **exceeded**, an error is returned with the status \"**429 Too Many Requests**\":  ```json {   \"error\": {     \"code\": \"too_many_requests\",     \"message\": \"Rate limit exceeded\"   } } ```    ## Errors  This API uses conventional HTTP response codes to indicate the success or failure of API requests. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, endpoint not found, etc.). Codes in the `5xx` range indicate an error with our API (these are rare).   
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@goog.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Images200ResponseImageResultsInnerImage;
import org.openapitools.client.model.Images200ResponseImageResultsInnerLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Images200ResponseImageResultsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:34.319451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Images200ResponseImageResultsInner {
  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Images200ResponseImageResultsInnerImage image;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private Images200ResponseImageResultsInnerLink link;

  public Images200ResponseImageResultsInner() {
  }

  public Images200ResponseImageResultsInner image(Images200ResponseImageResultsInnerImage image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public Images200ResponseImageResultsInnerImage getImage() {
    return image;
  }

  public void setImage(Images200ResponseImageResultsInnerImage image) {
    this.image = image;
  }


  public Images200ResponseImageResultsInner link(Images200ResponseImageResultsInnerLink link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public Images200ResponseImageResultsInnerLink getLink() {
    return link;
  }

  public void setLink(Images200ResponseImageResultsInnerLink link) {
    this.link = link;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Images200ResponseImageResultsInner images200ResponseImageResultsInner = (Images200ResponseImageResultsInner) o;
    return Objects.equals(this.image, images200ResponseImageResultsInner.image) &&
        Objects.equals(this.link, images200ResponseImageResultsInner.link);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, link);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Images200ResponseImageResultsInner {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image");
    openapiFields.add("link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Images200ResponseImageResultsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Images200ResponseImageResultsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Images200ResponseImageResultsInner is not found in the empty JSON string", Images200ResponseImageResultsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Images200ResponseImageResultsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Images200ResponseImageResultsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Images200ResponseImageResultsInnerImage.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `link`
      if (jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) {
        Images200ResponseImageResultsInnerLink.validateJsonElement(jsonObj.get("link"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Images200ResponseImageResultsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Images200ResponseImageResultsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Images200ResponseImageResultsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Images200ResponseImageResultsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<Images200ResponseImageResultsInner>() {
           @Override
           public void write(JsonWriter out, Images200ResponseImageResultsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Images200ResponseImageResultsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Images200ResponseImageResultsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Images200ResponseImageResultsInner
   * @throws IOException if the JSON string is invalid with respect to Images200ResponseImageResultsInner
   */
  public static Images200ResponseImageResultsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Images200ResponseImageResultsInner.class);
  }

  /**
   * Convert an instance of Images200ResponseImageResultsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

