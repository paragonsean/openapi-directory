# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_target import RuleTarget
from openapi_server import util


class RuleTargetsInnerExclude(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _or: List[RuleTarget]=None):
        """RuleTargetsInnerExclude - a model defined in OpenAPI

        :param _or: The _or of this RuleTargetsInnerExclude.
        """
        self.openapi_types = {
            '_or': List[RuleTarget]
        }

        self.attribute_map = {
            '_or': 'or'
        }

        self.__or = _or

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleTargetsInnerExclude':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rule_targets_inner_exclude of this RuleTargetsInnerExclude.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _or(self):
        """Gets the _or of this RuleTargetsInnerExclude.


        :return: The _or of this RuleTargetsInnerExclude.
        :rtype: List[RuleTarget]
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this RuleTargetsInnerExclude.


        :param _or: The _or of this RuleTargetsInnerExclude.
        :type _or: List[RuleTarget]
        """

        self.__or = _or
