# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color import Color
from openapi_server.models.logo import Logo
from openapi_server import util


class BrandingConf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bar_color: Color=None, display_bar: bool=None, display_bar_login: bool=None, display_label: bool=None, display_motd: bool=None, label_color: Color=None, label_text: str=None, motd: str=None, small_logo: Logo=None, wide_logo: Logo=None):
        """BrandingConf - a model defined in OpenAPI

        :param bar_color: The bar_color of this BrandingConf.
        :param display_bar: The display_bar of this BrandingConf.
        :param display_bar_login: The display_bar_login of this BrandingConf.
        :param display_label: The display_label of this BrandingConf.
        :param display_motd: The display_motd of this BrandingConf.
        :param label_color: The label_color of this BrandingConf.
        :param label_text: The label_text of this BrandingConf.
        :param motd: The motd of this BrandingConf.
        :param small_logo: The small_logo of this BrandingConf.
        :param wide_logo: The wide_logo of this BrandingConf.
        """
        self.openapi_types = {
            'bar_color': Color,
            'display_bar': bool,
            'display_bar_login': bool,
            'display_label': bool,
            'display_motd': bool,
            'label_color': Color,
            'label_text': str,
            'motd': str,
            'small_logo': Logo,
            'wide_logo': Logo
        }

        self.attribute_map = {
            'bar_color': 'barColor',
            'display_bar': 'displayBar',
            'display_bar_login': 'displayBarLogin',
            'display_label': 'displayLabel',
            'display_motd': 'displayMotd',
            'label_color': 'labelColor',
            'label_text': 'labelText',
            'motd': 'motd',
            'small_logo': 'smallLogo',
            'wide_logo': 'wideLogo'
        }

        self._bar_color = bar_color
        self._display_bar = display_bar
        self._display_bar_login = display_bar_login
        self._display_label = display_label
        self._display_motd = display_motd
        self._label_color = label_color
        self._label_text = label_text
        self._motd = motd
        self._small_logo = small_logo
        self._wide_logo = wide_logo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandingConf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The branding-conf of this BrandingConf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bar_color(self):
        """Gets the bar_color of this BrandingConf.


        :return: The bar_color of this BrandingConf.
        :rtype: Color
        """
        return self._bar_color

    @bar_color.setter
    def bar_color(self, bar_color):
        """Sets the bar_color of this BrandingConf.


        :param bar_color: The bar_color of this BrandingConf.
        :type bar_color: Color
        """
        if bar_color is None:
            raise ValueError("Invalid value for `bar_color`, must not be `None`")

        self._bar_color = bar_color

    @property
    def display_bar(self):
        """Gets the display_bar of this BrandingConf.

        Whether header bar is displayed or not

        :return: The display_bar of this BrandingConf.
        :rtype: bool
        """
        return self._display_bar

    @display_bar.setter
    def display_bar(self, display_bar):
        """Sets the display_bar of this BrandingConf.

        Whether header bar is displayed or not

        :param display_bar: The display_bar of this BrandingConf.
        :type display_bar: bool
        """
        if display_bar is None:
            raise ValueError("Invalid value for `display_bar`, must not be `None`")

        self._display_bar = display_bar

    @property
    def display_bar_login(self):
        """Gets the display_bar_login of this BrandingConf.

        Whether header bar is displayed in login page or not

        :return: The display_bar_login of this BrandingConf.
        :rtype: bool
        """
        return self._display_bar_login

    @display_bar_login.setter
    def display_bar_login(self, display_bar_login):
        """Sets the display_bar_login of this BrandingConf.

        Whether header bar is displayed in login page or not

        :param display_bar_login: The display_bar_login of this BrandingConf.
        :type display_bar_login: bool
        """
        if display_bar_login is None:
            raise ValueError("Invalid value for `display_bar_login`, must not be `None`")

        self._display_bar_login = display_bar_login

    @property
    def display_label(self):
        """Gets the display_label of this BrandingConf.

        Whether header bar's label is displayed or not

        :return: The display_label of this BrandingConf.
        :rtype: bool
        """
        return self._display_label

    @display_label.setter
    def display_label(self, display_label):
        """Sets the display_label of this BrandingConf.

        Whether header bar's label is displayed or not

        :param display_label: The display_label of this BrandingConf.
        :type display_label: bool
        """
        if display_label is None:
            raise ValueError("Invalid value for `display_label`, must not be `None`")

        self._display_label = display_label

    @property
    def display_motd(self):
        """Gets the display_motd of this BrandingConf.

        Whether the message of the day is displayed in login page or not

        :return: The display_motd of this BrandingConf.
        :rtype: bool
        """
        return self._display_motd

    @display_motd.setter
    def display_motd(self, display_motd):
        """Sets the display_motd of this BrandingConf.

        Whether the message of the day is displayed in login page or not

        :param display_motd: The display_motd of this BrandingConf.
        :type display_motd: bool
        """
        if display_motd is None:
            raise ValueError("Invalid value for `display_motd`, must not be `None`")

        self._display_motd = display_motd

    @property
    def label_color(self):
        """Gets the label_color of this BrandingConf.


        :return: The label_color of this BrandingConf.
        :rtype: Color
        """
        return self._label_color

    @label_color.setter
    def label_color(self, label_color):
        """Sets the label_color of this BrandingConf.


        :param label_color: The label_color of this BrandingConf.
        :type label_color: Color
        """
        if label_color is None:
            raise ValueError("Invalid value for `label_color`, must not be `None`")

        self._label_color = label_color

    @property
    def label_text(self):
        """Gets the label_text of this BrandingConf.

        The header bar's label title

        :return: The label_text of this BrandingConf.
        :rtype: str
        """
        return self._label_text

    @label_text.setter
    def label_text(self, label_text):
        """Sets the label_text of this BrandingConf.

        The header bar's label title

        :param label_text: The label_text of this BrandingConf.
        :type label_text: str
        """
        if label_text is None:
            raise ValueError("Invalid value for `label_text`, must not be `None`")

        self._label_text = label_text

    @property
    def motd(self):
        """Gets the motd of this BrandingConf.

        Message of the day in login page

        :return: The motd of this BrandingConf.
        :rtype: str
        """
        return self._motd

    @motd.setter
    def motd(self, motd):
        """Sets the motd of this BrandingConf.

        Message of the day in login page

        :param motd: The motd of this BrandingConf.
        :type motd: str
        """
        if motd is None:
            raise ValueError("Invalid value for `motd`, must not be `None`")

        self._motd = motd

    @property
    def small_logo(self):
        """Gets the small_logo of this BrandingConf.


        :return: The small_logo of this BrandingConf.
        :rtype: Logo
        """
        return self._small_logo

    @small_logo.setter
    def small_logo(self, small_logo):
        """Sets the small_logo of this BrandingConf.


        :param small_logo: The small_logo of this BrandingConf.
        :type small_logo: Logo
        """
        if small_logo is None:
            raise ValueError("Invalid value for `small_logo`, must not be `None`")

        self._small_logo = small_logo

    @property
    def wide_logo(self):
        """Gets the wide_logo of this BrandingConf.


        :return: The wide_logo of this BrandingConf.
        :rtype: Logo
        """
        return self._wide_logo

    @wide_logo.setter
    def wide_logo(self, wide_logo):
        """Sets the wide_logo of this BrandingConf.


        :param wide_logo: The wide_logo of this BrandingConf.
        :type wide_logo: Logo
        """
        if wide_logo is None:
            raise ValueError("Invalid value for `wide_logo`, must not be `None`")

        self._wide_logo = wide_logo
