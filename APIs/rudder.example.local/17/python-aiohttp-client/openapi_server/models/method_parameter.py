# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.method_parameter_constraints import MethodParameterConstraints
from openapi_server import util


class MethodParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str='String', constraints: MethodParameterConstraints=None, description: str=None, name: str=None):
        """MethodParameter - a model defined in OpenAPI

        :param type: The type of this MethodParameter.
        :param constraints: The constraints of this MethodParameter.
        :param description: The description of this MethodParameter.
        :param name: The name of this MethodParameter.
        """
        self.openapi_types = {
            'type': str,
            'constraints': MethodParameterConstraints,
            'description': str,
            'name': str
        }

        self.attribute_map = {
            'type': '_type',
            'constraints': 'constraints',
            'description': 'description',
            'name': 'name'
        }

        self._type = type
        self._constraints = constraints
        self._description = description
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MethodParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The method-parameter of this MethodParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this MethodParameter.

        Type of the parameter

        :return: The type of this MethodParameter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MethodParameter.

        Type of the parameter

        :param type: The type of this MethodParameter.
        :type type: str
        """
        allowed_values = ["String", "HereString"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def constraints(self):
        """Gets the constraints of this MethodParameter.


        :return: The constraints of this MethodParameter.
        :rtype: MethodParameterConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this MethodParameter.


        :param constraints: The constraints of this MethodParameter.
        :type constraints: MethodParameterConstraints
        """
        if constraints is None:
            raise ValueError("Invalid value for `constraints`, must not be `None`")

        self._constraints = constraints

    @property
    def description(self):
        """Gets the description of this MethodParameter.

        Description of this parameter

        :return: The description of this MethodParameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MethodParameter.

        Description of this parameter

        :param description: The description of this MethodParameter.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this MethodParameter.

        Parameter name

        :return: The name of this MethodParameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MethodParameter.

        Parameter name

        :param name: The name of this MethodParameter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
