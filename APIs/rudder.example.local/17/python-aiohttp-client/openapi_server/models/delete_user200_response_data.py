# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delete_user200_response_data_deleted_user import DeleteUser200ResponseDataDeletedUser
from openapi_server import util


class DeleteUser200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted_user: DeleteUser200ResponseDataDeletedUser=None):
        """DeleteUser200ResponseData - a model defined in OpenAPI

        :param deleted_user: The deleted_user of this DeleteUser200ResponseData.
        """
        self.openapi_types = {
            'deleted_user': DeleteUser200ResponseDataDeletedUser
        }

        self.attribute_map = {
            'deleted_user': 'deletedUser'
        }

        self._deleted_user = deleted_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteUser200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The deleteUser_200_response_data of this DeleteUser200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted_user(self):
        """Gets the deleted_user of this DeleteUser200ResponseData.


        :return: The deleted_user of this DeleteUser200ResponseData.
        :rtype: DeleteUser200ResponseDataDeletedUser
        """
        return self._deleted_user

    @deleted_user.setter
    def deleted_user(self, deleted_user):
        """Sets the deleted_user of this DeleteUser200ResponseData.


        :param deleted_user: The deleted_user of this DeleteUser200ResponseData.
        :type deleted_user: DeleteUser200ResponseDataDeletedUser
        """
        if deleted_user is None:
            raise ValueError("Invalid value for `deleted_user`, must not be `None`")

        self._deleted_user = deleted_user
