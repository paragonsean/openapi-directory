# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.editor_technique_calls_inner import EditorTechniqueCallsInner
from openapi_server.models.technique_block_reporting_logic import TechniqueBlockReportingLogic
from openapi_server import util


class TechniqueBlock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calls: List[EditorTechniqueCallsInner]=None, component: str=None, condition: str=None, id: str=None, reporting_logic: TechniqueBlockReportingLogic=None):
        """TechniqueBlock - a model defined in OpenAPI

        :param calls: The calls of this TechniqueBlock.
        :param component: The component of this TechniqueBlock.
        :param condition: The condition of this TechniqueBlock.
        :param id: The id of this TechniqueBlock.
        :param reporting_logic: The reporting_logic of this TechniqueBlock.
        """
        self.openapi_types = {
            'calls': List[EditorTechniqueCallsInner],
            'component': str,
            'condition': str,
            'id': str,
            'reporting_logic': TechniqueBlockReportingLogic
        }

        self.attribute_map = {
            'calls': 'calls',
            'component': 'component',
            'condition': 'condition',
            'id': 'id',
            'reporting_logic': 'reportingLogic'
        }

        self._calls = calls
        self._component = component
        self._condition = condition
        self._id = id
        self._reporting_logic = reporting_logic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TechniqueBlock':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The technique-block of this TechniqueBlock.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calls(self):
        """Gets the calls of this TechniqueBlock.

        Method and blocks contained by this block

        :return: The calls of this TechniqueBlock.
        :rtype: List[EditorTechniqueCallsInner]
        """
        return self._calls

    @calls.setter
    def calls(self, calls):
        """Sets the calls of this TechniqueBlock.

        Method and blocks contained by this block

        :param calls: The calls of this TechniqueBlock.
        :type calls: List[EditorTechniqueCallsInner]
        """

        self._calls = calls

    @property
    def component(self):
        """Gets the component of this TechniqueBlock.

        Component is used in reporting to identify this method call. You can see it as a name

        :return: The component of this TechniqueBlock.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this TechniqueBlock.

        Component is used in reporting to identify this method call. You can see it as a name

        :param component: The component of this TechniqueBlock.
        :type component: str
        """

        self._component = component

    @property
    def condition(self):
        """Gets the condition of this TechniqueBlock.

        Condition to run this method.

        :return: The condition of this TechniqueBlock.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this TechniqueBlock.

        Condition to run this method.

        :param condition: The condition of this TechniqueBlock.
        :type condition: str
        """

        self._condition = condition

    @property
    def id(self):
        """Gets the id of this TechniqueBlock.

        Method call id

        :return: The id of this TechniqueBlock.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TechniqueBlock.

        Method call id

        :param id: The id of this TechniqueBlock.
        :type id: str
        """

        self._id = id

    @property
    def reporting_logic(self):
        """Gets the reporting_logic of this TechniqueBlock.


        :return: The reporting_logic of this TechniqueBlock.
        :rtype: TechniqueBlockReportingLogic
        """
        return self._reporting_logic

    @reporting_logic.setter
    def reporting_logic(self, reporting_logic):
        """Sets the reporting_logic of this TechniqueBlock.


        :param reporting_logic: The reporting_logic of this TechniqueBlock.
        :type reporting_logic: TechniqueBlockReportingLogic
        """

        self._reporting_logic = reporting_logic
