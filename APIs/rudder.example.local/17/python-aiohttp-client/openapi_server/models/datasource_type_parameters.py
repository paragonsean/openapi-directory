# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datasource_type_parameters_headers_inner import DatasourceTypeParametersHeadersInner
from openapi_server.models.datasource_type_parameters_request_mode import DatasourceTypeParametersRequestMode
from openapi_server import util


class DatasourceTypeParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_ssl: bool=None, headers: List[DatasourceTypeParametersHeadersInner]=None, path: str=None, request_method: str=None, request_mode: DatasourceTypeParametersRequestMode=None, request_timeout: int=None, url: str=None):
        """DatasourceTypeParameters - a model defined in OpenAPI

        :param check_ssl: The check_ssl of this DatasourceTypeParameters.
        :param headers: The headers of this DatasourceTypeParameters.
        :param path: The path of this DatasourceTypeParameters.
        :param request_method: The request_method of this DatasourceTypeParameters.
        :param request_mode: The request_mode of this DatasourceTypeParameters.
        :param request_timeout: The request_timeout of this DatasourceTypeParameters.
        :param url: The url of this DatasourceTypeParameters.
        """
        self.openapi_types = {
            'check_ssl': bool,
            'headers': List[DatasourceTypeParametersHeadersInner],
            'path': str,
            'request_method': str,
            'request_mode': DatasourceTypeParametersRequestMode,
            'request_timeout': int,
            'url': str
        }

        self.attribute_map = {
            'check_ssl': 'checkSsl',
            'headers': 'headers',
            'path': 'path',
            'request_method': 'requestMethod',
            'request_mode': 'requestMode',
            'request_timeout': 'requestTimeout',
            'url': 'url'
        }

        self._check_ssl = check_ssl
        self._headers = headers
        self._path = path
        self._request_method = request_method
        self._request_mode = request_mode
        self._request_timeout = request_timeout
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasourceTypeParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The datasource_type_parameters of this DatasourceTypeParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_ssl(self):
        """Gets the check_ssl of this DatasourceTypeParameters.

        Check SSL certificate validity for https. Must be set to false for self-signed certificate

        :return: The check_ssl of this DatasourceTypeParameters.
        :rtype: bool
        """
        return self._check_ssl

    @check_ssl.setter
    def check_ssl(self, check_ssl):
        """Sets the check_ssl of this DatasourceTypeParameters.

        Check SSL certificate validity for https. Must be set to false for self-signed certificate

        :param check_ssl: The check_ssl of this DatasourceTypeParameters.
        :type check_ssl: bool
        """

        self._check_ssl = check_ssl

    @property
    def headers(self):
        """Gets the headers of this DatasourceTypeParameters.

        Represent HTTP headers for the query. Rudder expansion available.

        :return: The headers of this DatasourceTypeParameters.
        :rtype: List[DatasourceTypeParametersHeadersInner]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this DatasourceTypeParameters.

        Represent HTTP headers for the query. Rudder expansion available.

        :param headers: The headers of this DatasourceTypeParameters.
        :type headers: List[DatasourceTypeParametersHeadersInner]
        """

        self._headers = headers

    @property
    def path(self):
        """Gets the path of this DatasourceTypeParameters.

        JSON path (as defined in [the specification](https://github.com/jayway/JsonPath/), without the leading `$.`) to find the interesting sub-json or string/number/boolean value in the answer. Let empty to use the whole answer as value.

        :return: The path of this DatasourceTypeParameters.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DatasourceTypeParameters.

        JSON path (as defined in [the specification](https://github.com/jayway/JsonPath/), without the leading `$.`) to find the interesting sub-json or string/number/boolean value in the answer. Let empty to use the whole answer as value.

        :param path: The path of this DatasourceTypeParameters.
        :type path: str
        """

        self._path = path

    @property
    def request_method(self):
        """Gets the request_method of this DatasourceTypeParameters.

        HTTP method to use to contact the URL.

        :return: The request_method of this DatasourceTypeParameters.
        :rtype: str
        """
        return self._request_method

    @request_method.setter
    def request_method(self, request_method):
        """Sets the request_method of this DatasourceTypeParameters.

        HTTP method to use to contact the URL.

        :param request_method: The request_method of this DatasourceTypeParameters.
        :type request_method: str
        """
        allowed_values = ["GET", "POST"]  # noqa: E501
        if request_method not in allowed_values:
            raise ValueError(
                "Invalid value for `request_method` ({0}), must be one of {1}"
                .format(request_method, allowed_values)
            )

        self._request_method = request_method

    @property
    def request_mode(self):
        """Gets the request_mode of this DatasourceTypeParameters.


        :return: The request_mode of this DatasourceTypeParameters.
        :rtype: DatasourceTypeParametersRequestMode
        """
        return self._request_mode

    @request_mode.setter
    def request_mode(self, request_mode):
        """Sets the request_mode of this DatasourceTypeParameters.


        :param request_mode: The request_mode of this DatasourceTypeParameters.
        :type request_mode: DatasourceTypeParametersRequestMode
        """

        self._request_mode = request_mode

    @property
    def request_timeout(self):
        """Gets the request_timeout of this DatasourceTypeParameters.

        Timeout in seconds for each HTTP request

        :return: The request_timeout of this DatasourceTypeParameters.
        :rtype: int
        """
        return self._request_timeout

    @request_timeout.setter
    def request_timeout(self, request_timeout):
        """Sets the request_timeout of this DatasourceTypeParameters.

        Timeout in seconds for each HTTP request

        :param request_timeout: The request_timeout of this DatasourceTypeParameters.
        :type request_timeout: int
        """

        self._request_timeout = request_timeout

    @property
    def url(self):
        """Gets the url of this DatasourceTypeParameters.

        URL to contact. Rudder expansion available.

        :return: The url of this DatasourceTypeParameters.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DatasourceTypeParameters.

        URL to contact. Rudder expansion available.

        :param url: The url of this DatasourceTypeParameters.
        :type url: str
        """

        self._url = url
