# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_full_software_inner_license import NodeFullSoftwareInnerLicense
from openapi_server import util


class NodeFullSoftwareInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, editor: str=None, license: NodeFullSoftwareInnerLicense=None, name: str=None, release_date: date=None, version: str=None):
        """NodeFullSoftwareInner - a model defined in OpenAPI

        :param description: The description of this NodeFullSoftwareInner.
        :param editor: The editor of this NodeFullSoftwareInner.
        :param license: The license of this NodeFullSoftwareInner.
        :param name: The name of this NodeFullSoftwareInner.
        :param release_date: The release_date of this NodeFullSoftwareInner.
        :param version: The version of this NodeFullSoftwareInner.
        """
        self.openapi_types = {
            'description': str,
            'editor': str,
            'license': NodeFullSoftwareInnerLicense,
            'name': str,
            'release_date': date,
            'version': str
        }

        self.attribute_map = {
            'description': 'description',
            'editor': 'editor',
            'license': 'license',
            'name': 'name',
            'release_date': 'releaseDate',
            'version': 'version'
        }

        self._description = description
        self._editor = editor
        self._license = license
        self._name = name
        self._release_date = release_date
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeFullSoftwareInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node_full_software_inner of this NodeFullSoftwareInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this NodeFullSoftwareInner.

        A description of the software

        :return: The description of this NodeFullSoftwareInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NodeFullSoftwareInner.

        A description of the software

        :param description: The description of this NodeFullSoftwareInner.
        :type description: str
        """

        self._description = description

    @property
    def editor(self):
        """Gets the editor of this NodeFullSoftwareInner.

        Editor of the software

        :return: The editor of this NodeFullSoftwareInner.
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this NodeFullSoftwareInner.

        Editor of the software

        :param editor: The editor of this NodeFullSoftwareInner.
        :type editor: str
        """

        self._editor = editor

    @property
    def license(self):
        """Gets the license of this NodeFullSoftwareInner.


        :return: The license of this NodeFullSoftwareInner.
        :rtype: NodeFullSoftwareInnerLicense
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this NodeFullSoftwareInner.


        :param license: The license of this NodeFullSoftwareInner.
        :type license: NodeFullSoftwareInnerLicense
        """

        self._license = license

    @property
    def name(self):
        """Gets the name of this NodeFullSoftwareInner.

        Name of the software (as reported by the node)

        :return: The name of this NodeFullSoftwareInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeFullSoftwareInner.

        Name of the software (as reported by the node)

        :param name: The name of this NodeFullSoftwareInner.
        :type name: str
        """

        self._name = name

    @property
    def release_date(self):
        """Gets the release_date of this NodeFullSoftwareInner.

        Release date of the software

        :return: The release_date of this NodeFullSoftwareInner.
        :rtype: date
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this NodeFullSoftwareInner.

        Release date of the software

        :param release_date: The release_date of this NodeFullSoftwareInner.
        :type release_date: date
        """

        self._release_date = release_date

    @property
    def version(self):
        """Gets the version of this NodeFullSoftwareInner.

        Version of the software

        :return: The version of this NodeFullSoftwareInner.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NodeFullSoftwareInner.

        Version of the software

        :param version: The version of this NodeFullSoftwareInner.
        :type version: str
        """

        self._version = version
