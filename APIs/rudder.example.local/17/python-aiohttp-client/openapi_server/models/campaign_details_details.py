# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.campaign_software_update import CampaignSoftwareUpdate
from openapi_server.models.campaign_software_update_software_update_inner import CampaignSoftwareUpdateSoftwareUpdateInner
from openapi_server.models.campaign_system_update import CampaignSystemUpdate
from openapi_server.models.rule_targets_inner import RuleTargetsInner
from openapi_server import util


class CampaignDetailsDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reboot: str=None, targets: List[List[RuleTargetsInner]]=None, software_update: List[CampaignSoftwareUpdateSoftwareUpdateInner]=None):
        """CampaignDetailsDetails - a model defined in OpenAPI

        :param reboot: The reboot of this CampaignDetailsDetails.
        :param targets: The targets of this CampaignDetailsDetails.
        :param software_update: The software_update of this CampaignDetailsDetails.
        """
        self.openapi_types = {
            'reboot': str,
            'targets': List[List[RuleTargetsInner]],
            'software_update': List[CampaignSoftwareUpdateSoftwareUpdateInner]
        }

        self.attribute_map = {
            'reboot': 'reboot',
            'targets': 'targets',
            'software_update': 'softwareUpdate'
        }

        self._reboot = reboot
        self._targets = targets
        self._software_update = software_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignDetailsDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The campaign_details_details of this CampaignDetailsDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reboot(self):
        """Gets the reboot of this CampaignDetailsDetails.

        Define the behavior after update

        :return: The reboot of this CampaignDetailsDetails.
        :rtype: str
        """
        return self._reboot

    @reboot.setter
    def reboot(self, reboot):
        """Sets the reboot of this CampaignDetailsDetails.

        Define the behavior after update

        :param reboot: The reboot of this CampaignDetailsDetails.
        :type reboot: str
        """
        allowed_values = ["as-needed", "disabled", "always", "services-only"]  # noqa: E501
        if reboot not in allowed_values:
            raise ValueError(
                "Invalid value for `reboot` ({0}), must be one of {1}"
                .format(reboot, allowed_values)
            )

        self._reboot = reboot

    @property
    def targets(self):
        """Gets the targets of this CampaignDetailsDetails.

        List of all  groups of node to target the campaign

        :return: The targets of this CampaignDetailsDetails.
        :rtype: List[List[RuleTargetsInner]]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this CampaignDetailsDetails.

        List of all  groups of node to target the campaign

        :param targets: The targets of this CampaignDetailsDetails.
        :type targets: List[List[RuleTargetsInner]]
        """

        self._targets = targets

    @property
    def software_update(self):
        """Gets the software_update of this CampaignDetailsDetails.

        List of all software to update

        :return: The software_update of this CampaignDetailsDetails.
        :rtype: List[CampaignSoftwareUpdateSoftwareUpdateInner]
        """
        return self._software_update

    @software_update.setter
    def software_update(self, software_update):
        """Sets the software_update of this CampaignDetailsDetails.

        List of all software to update

        :param software_update: The software_update of this CampaignDetailsDetails.
        :type software_update: List[CampaignSoftwareUpdateSoftwareUpdateInner]
        """

        self._software_update = software_update
