# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directive_node_compliance_compliance_details import DirectiveNodeComplianceComplianceDetails
from openapi_server.models.rule_compliance_component import RuleComplianceComponent
from openapi_server import util


class DirectiveNodeCompliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compliance: float=None, compliance_details: DirectiveNodeComplianceComplianceDetails=None, id: str=None, name: str=None, rules: RuleComplianceComponent=None):
        """DirectiveNodeCompliance - a model defined in OpenAPI

        :param compliance: The compliance of this DirectiveNodeCompliance.
        :param compliance_details: The compliance_details of this DirectiveNodeCompliance.
        :param id: The id of this DirectiveNodeCompliance.
        :param name: The name of this DirectiveNodeCompliance.
        :param rules: The rules of this DirectiveNodeCompliance.
        """
        self.openapi_types = {
            'compliance': float,
            'compliance_details': DirectiveNodeComplianceComplianceDetails,
            'id': str,
            'name': str,
            'rules': RuleComplianceComponent
        }

        self.attribute_map = {
            'compliance': 'compliance',
            'compliance_details': 'complianceDetails',
            'id': 'id',
            'name': 'name',
            'rules': 'rules'
        }

        self._compliance = compliance
        self._compliance_details = compliance_details
        self._id = id
        self._name = name
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DirectiveNodeCompliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The directive-node-compliance of this DirectiveNodeCompliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compliance(self):
        """Gets the compliance of this DirectiveNodeCompliance.

        Directive compliance level

        :return: The compliance of this DirectiveNodeCompliance.
        :rtype: float
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this DirectiveNodeCompliance.

        Directive compliance level

        :param compliance: The compliance of this DirectiveNodeCompliance.
        :type compliance: float
        """
        if compliance is None:
            raise ValueError("Invalid value for `compliance`, must not be `None`")

        self._compliance = compliance

    @property
    def compliance_details(self):
        """Gets the compliance_details of this DirectiveNodeCompliance.


        :return: The compliance_details of this DirectiveNodeCompliance.
        :rtype: DirectiveNodeComplianceComplianceDetails
        """
        return self._compliance_details

    @compliance_details.setter
    def compliance_details(self, compliance_details):
        """Sets the compliance_details of this DirectiveNodeCompliance.


        :param compliance_details: The compliance_details of this DirectiveNodeCompliance.
        :type compliance_details: DirectiveNodeComplianceComplianceDetails
        """
        if compliance_details is None:
            raise ValueError("Invalid value for `compliance_details`, must not be `None`")

        self._compliance_details = compliance_details

    @property
    def id(self):
        """Gets the id of this DirectiveNodeCompliance.

        id of the node

        :return: The id of this DirectiveNodeCompliance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DirectiveNodeCompliance.

        id of the node

        :param id: The id of this DirectiveNodeCompliance.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this DirectiveNodeCompliance.

        Name of the node

        :return: The name of this DirectiveNodeCompliance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DirectiveNodeCompliance.

        Name of the node

        :param name: The name of this DirectiveNodeCompliance.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this DirectiveNodeCompliance.


        :return: The rules of this DirectiveNodeCompliance.
        :rtype: RuleComplianceComponent
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this DirectiveNodeCompliance.


        :param rules: The rules of this DirectiveNodeCompliance.
        :type rules: RuleComplianceComponent
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules
