# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datasource_run_parameters_schedule import DatasourceRunParametersSchedule
from openapi_server import util


class DatasourceRunParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, on_generation: bool=None, on_new_node: bool=None, schedule: DatasourceRunParametersSchedule=None):
        """DatasourceRunParameters - a model defined in OpenAPI

        :param on_generation: The on_generation of this DatasourceRunParameters.
        :param on_new_node: The on_new_node of this DatasourceRunParameters.
        :param schedule: The schedule of this DatasourceRunParameters.
        """
        self.openapi_types = {
            'on_generation': bool,
            'on_new_node': bool,
            'schedule': DatasourceRunParametersSchedule
        }

        self.attribute_map = {
            'on_generation': 'onGeneration',
            'on_new_node': 'onNewNode',
            'schedule': 'schedule'
        }

        self._on_generation = on_generation
        self._on_new_node = on_new_node
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasourceRunParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The datasource_runParameters of this DatasourceRunParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def on_generation(self):
        """Gets the on_generation of this DatasourceRunParameters.

        Trigger a fetch at the beginning of a policy generation

        :return: The on_generation of this DatasourceRunParameters.
        :rtype: bool
        """
        return self._on_generation

    @on_generation.setter
    def on_generation(self, on_generation):
        """Sets the on_generation of this DatasourceRunParameters.

        Trigger a fetch at the beginning of a policy generation

        :param on_generation: The on_generation of this DatasourceRunParameters.
        :type on_generation: bool
        """

        self._on_generation = on_generation

    @property
    def on_new_node(self):
        """Gets the on_new_node of this DatasourceRunParameters.

        Trigger a fetch when a new node is accepted, for that node

        :return: The on_new_node of this DatasourceRunParameters.
        :rtype: bool
        """
        return self._on_new_node

    @on_new_node.setter
    def on_new_node(self, on_new_node):
        """Sets the on_new_node of this DatasourceRunParameters.

        Trigger a fetch when a new node is accepted, for that node

        :param on_new_node: The on_new_node of this DatasourceRunParameters.
        :type on_new_node: bool
        """

        self._on_new_node = on_new_node

    @property
    def schedule(self):
        """Gets the schedule of this DatasourceRunParameters.


        :return: The schedule of this DatasourceRunParameters.
        :rtype: DatasourceRunParametersSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this DatasourceRunParameters.


        :param schedule: The schedule of this DatasourceRunParameters.
        :type schedule: DatasourceRunParametersSchedule
        """

        self._schedule = schedule
