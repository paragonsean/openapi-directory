# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_key import AgentKey
from openapi_server.models.node_add_inner_properties_inner import NodeAddInnerPropertiesInner
from openapi_server import util


class NodeSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_key: AgentKey=None, policy_mode: str=None, properties: List[NodeAddInnerPropertiesInner]=None, state: str=None):
        """NodeSettings - a model defined in OpenAPI

        :param agent_key: The agent_key of this NodeSettings.
        :param policy_mode: The policy_mode of this NodeSettings.
        :param properties: The properties of this NodeSettings.
        :param state: The state of this NodeSettings.
        """
        self.openapi_types = {
            'agent_key': AgentKey,
            'policy_mode': str,
            'properties': List[NodeAddInnerPropertiesInner],
            'state': str
        }

        self.attribute_map = {
            'agent_key': 'agentKey',
            'policy_mode': 'policyMode',
            'properties': 'properties',
            'state': 'state'
        }

        self._agent_key = agent_key
        self._policy_mode = policy_mode
        self._properties = properties
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node-settings of this NodeSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_key(self):
        """Gets the agent_key of this NodeSettings.


        :return: The agent_key of this NodeSettings.
        :rtype: AgentKey
        """
        return self._agent_key

    @agent_key.setter
    def agent_key(self, agent_key):
        """Sets the agent_key of this NodeSettings.


        :param agent_key: The agent_key of this NodeSettings.
        :type agent_key: AgentKey
        """

        self._agent_key = agent_key

    @property
    def policy_mode(self):
        """Gets the policy_mode of this NodeSettings.

        In which mode the node will apply its configuration policy. Use `default` to use the global mode.

        :return: The policy_mode of this NodeSettings.
        :rtype: str
        """
        return self._policy_mode

    @policy_mode.setter
    def policy_mode(self, policy_mode):
        """Sets the policy_mode of this NodeSettings.

        In which mode the node will apply its configuration policy. Use `default` to use the global mode.

        :param policy_mode: The policy_mode of this NodeSettings.
        :type policy_mode: str
        """
        allowed_values = ["audit", "enforce", "default"]  # noqa: E501
        if policy_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_mode` ({0}), must be one of {1}"
                .format(policy_mode, allowed_values)
            )

        self._policy_mode = policy_mode

    @property
    def properties(self):
        """Gets the properties of this NodeSettings.


        :return: The properties of this NodeSettings.
        :rtype: List[NodeAddInnerPropertiesInner]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this NodeSettings.


        :param properties: The properties of this NodeSettings.
        :type properties: List[NodeAddInnerPropertiesInner]
        """

        self._properties = properties

    @property
    def state(self):
        """Gets the state of this NodeSettings.

        The node life cycle state. See [dedicated doc](https://docs.rudder.io/reference/current/usage/advanced_node_management.html#node-lifecycle) for more information.

        :return: The state of this NodeSettings.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NodeSettings.

        The node life cycle state. See [dedicated doc](https://docs.rudder.io/reference/current/usage/advanced_node_management.html#node-lifecycle) for more information.

        :param state: The state of this NodeSettings.
        :type state: str
        """
        allowed_values = ["enabled", "ignored", "empty-policies", "initializing", "preparing-eol"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
