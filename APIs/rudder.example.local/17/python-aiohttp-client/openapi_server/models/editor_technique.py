# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.editor_technique_calls_inner import EditorTechniqueCallsInner
from openapi_server.models.technique_parameter import TechniqueParameter
from openapi_server.models.technique_resource import TechniqueResource
from openapi_server import util


class EditorTechnique(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calls: List[EditorTechniqueCallsInner]=None, category: str=None, description: str=None, id: str=None, name: str=None, parameters: List[TechniqueParameter]=None, resources: List[TechniqueResource]=None, source: str=None, version: str=None):
        """EditorTechnique - a model defined in OpenAPI

        :param calls: The calls of this EditorTechnique.
        :param category: The category of this EditorTechnique.
        :param description: The description of this EditorTechnique.
        :param id: The id of this EditorTechnique.
        :param name: The name of this EditorTechnique.
        :param parameters: The parameters of this EditorTechnique.
        :param resources: The resources of this EditorTechnique.
        :param source: The source of this EditorTechnique.
        :param version: The version of this EditorTechnique.
        """
        self.openapi_types = {
            'calls': List[EditorTechniqueCallsInner],
            'category': str,
            'description': str,
            'id': str,
            'name': str,
            'parameters': List[TechniqueParameter],
            'resources': List[TechniqueResource],
            'source': str,
            'version': str
        }

        self.attribute_map = {
            'calls': 'calls',
            'category': 'category',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'parameters': 'parameters',
            'resources': 'resources',
            'source': 'source',
            'version': 'version'
        }

        self._calls = calls
        self._category = category
        self._description = description
        self._id = id
        self._name = name
        self._parameters = parameters
        self._resources = resources
        self._source = source
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditorTechnique':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The editor-technique of this EditorTechnique.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calls(self):
        """Gets the calls of this EditorTechnique.

        Method and blocks contained by this technique

        :return: The calls of this EditorTechnique.
        :rtype: List[EditorTechniqueCallsInner]
        """
        return self._calls

    @calls.setter
    def calls(self, calls):
        """Sets the calls of this EditorTechnique.

        Method and blocks contained by this technique

        :param calls: The calls of this EditorTechnique.
        :type calls: List[EditorTechniqueCallsInner]
        """

        self._calls = calls

    @property
    def category(self):
        """Gets the category of this EditorTechnique.

        category of this technique

        :return: The category of this EditorTechnique.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EditorTechnique.

        category of this technique

        :param category: The category of this EditorTechnique.
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this EditorTechnique.

        description of this technique

        :return: The description of this EditorTechnique.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EditorTechnique.

        description of this technique

        :param description: The description of this EditorTechnique.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this EditorTechnique.

        Technique id

        :return: The id of this EditorTechnique.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorTechnique.

        Technique id

        :param id: The id of this EditorTechnique.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EditorTechnique.

        Technique name

        :return: The name of this EditorTechnique.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditorTechnique.

        Technique name

        :param name: The name of this EditorTechnique.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this EditorTechnique.

        Parameters for this technique

        :return: The parameters of this EditorTechnique.
        :rtype: List[TechniqueParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this EditorTechnique.

        Parameters for this technique

        :param parameters: The parameters of this EditorTechnique.
        :type parameters: List[TechniqueParameter]
        """

        self._parameters = parameters

    @property
    def resources(self):
        """Gets the resources of this EditorTechnique.

        Resources for this technique

        :return: The resources of this EditorTechnique.
        :rtype: List[TechniqueResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this EditorTechnique.

        Resources for this technique

        :param resources: The resources of this EditorTechnique.
        :type resources: List[TechniqueResource]
        """

        self._resources = resources

    @property
    def source(self):
        """Gets the source of this EditorTechnique.

        Source of the technique, always editor here

        :return: The source of this EditorTechnique.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EditorTechnique.

        Source of the technique, always editor here

        :param source: The source of this EditorTechnique.
        :type source: str
        """

        self._source = source

    @property
    def version(self):
        """Gets the version of this EditorTechnique.

        version of this technique

        :return: The version of this EditorTechnique.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EditorTechnique.

        version of this technique

        :param version: The version of this EditorTechnique.
        :type version: str
        """

        self._version = version
