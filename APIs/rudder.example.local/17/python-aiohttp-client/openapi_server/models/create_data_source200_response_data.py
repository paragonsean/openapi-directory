# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datasource import Datasource
from openapi_server import util


class CreateDataSource200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datasources: List[Datasource]=None):
        """CreateDataSource200ResponseData - a model defined in OpenAPI

        :param datasources: The datasources of this CreateDataSource200ResponseData.
        """
        self.openapi_types = {
            'datasources': List[Datasource]
        }

        self.attribute_map = {
            'datasources': 'datasources'
        }

        self._datasources = datasources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataSource200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createDataSource_200_response_data of this CreateDataSource200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datasources(self):
        """Gets the datasources of this CreateDataSource200ResponseData.


        :return: The datasources of this CreateDataSource200ResponseData.
        :rtype: List[Datasource]
        """
        return self._datasources

    @datasources.setter
    def datasources(self, datasources):
        """Sets the datasources of this CreateDataSource200ResponseData.


        :param datasources: The datasources of this CreateDataSource200ResponseData.
        :type datasources: List[Datasource]
        """
        if datasources is None:
            raise ValueError("Invalid value for `datasources`, must not be `None`")

        self._datasources = datasources
