# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiVersionAllInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: object=None, version: int=None):
        """ApiVersionAllInner - a model defined in OpenAPI

        :param status: The status of this ApiVersionAllInner.
        :param version: The version of this ApiVersionAllInner.
        """
        self.openapi_types = {
            'status': object,
            'version': int
        }

        self.attribute_map = {
            'status': 'status',
            'version': 'version'
        }

        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiVersionAllInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The api_version_all_inner of this ApiVersionAllInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this ApiVersionAllInner.

        Status of the API, either maintained or deprecated

        :return: The status of this ApiVersionAllInner.
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiVersionAllInner.

        Status of the API, either maintained or deprecated

        :param status: The status of this ApiVersionAllInner.
        :type status: object
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def version(self):
        """Gets the version of this ApiVersionAllInner.

        API Version

        :return: The version of this ApiVersionAllInner.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ApiVersionAllInner.

        API Version

        :param version: The version of this ApiVersionAllInner.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
