# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.campaign_event_node_result_nodes_inner_result_software_updated_inner import CampaignEventNodeResultNodesInnerResultSoftwareUpdatedInner
from openapi_server import util


class CampaignEventNodeResultNodesInnerResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: str=None, output: str=None, software_updated: List[CampaignEventNodeResultNodesInnerResultSoftwareUpdatedInner]=None, status: str=None):
        """CampaignEventNodeResultNodesInnerResult - a model defined in OpenAPI

        :param errors: The errors of this CampaignEventNodeResultNodesInnerResult.
        :param output: The output of this CampaignEventNodeResultNodesInnerResult.
        :param software_updated: The software_updated of this CampaignEventNodeResultNodesInnerResult.
        :param status: The status of this CampaignEventNodeResultNodesInnerResult.
        """
        self.openapi_types = {
            'errors': str,
            'output': str,
            'software_updated': List[CampaignEventNodeResultNodesInnerResultSoftwareUpdatedInner],
            'status': str
        }

        self.attribute_map = {
            'errors': 'errors',
            'output': 'output',
            'software_updated': 'software-updated',
            'status': 'status'
        }

        self._errors = errors
        self._output = output
        self._software_updated = software_updated
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignEventNodeResultNodesInnerResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The campaign_event_node_result_nodes_inner_result of this CampaignEventNodeResultNodesInnerResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this CampaignEventNodeResultNodesInnerResult.

        campaign standard errors

        :return: The errors of this CampaignEventNodeResultNodesInnerResult.
        :rtype: str
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CampaignEventNodeResultNodesInnerResult.

        campaign standard errors

        :param errors: The errors of this CampaignEventNodeResultNodesInnerResult.
        :type errors: str
        """

        self._errors = errors

    @property
    def output(self):
        """Gets the output of this CampaignEventNodeResultNodesInnerResult.

        campaign standard output

        :return: The output of this CampaignEventNodeResultNodesInnerResult.
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this CampaignEventNodeResultNodesInnerResult.

        campaign standard output

        :param output: The output of this CampaignEventNodeResultNodesInnerResult.
        :type output: str
        """

        self._output = output

    @property
    def software_updated(self):
        """Gets the software_updated of this CampaignEventNodeResultNodesInnerResult.

        List of updated software

        :return: The software_updated of this CampaignEventNodeResultNodesInnerResult.
        :rtype: List[CampaignEventNodeResultNodesInnerResultSoftwareUpdatedInner]
        """
        return self._software_updated

    @software_updated.setter
    def software_updated(self, software_updated):
        """Sets the software_updated of this CampaignEventNodeResultNodesInnerResult.

        List of updated software

        :param software_updated: The software_updated of this CampaignEventNodeResultNodesInnerResult.
        :type software_updated: List[CampaignEventNodeResultNodesInnerResultSoftwareUpdatedInner]
        """

        self._software_updated = software_updated

    @property
    def status(self):
        """Gets the status of this CampaignEventNodeResultNodesInnerResult.

        Campaign result

        :return: The status of this CampaignEventNodeResultNodesInnerResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CampaignEventNodeResultNodesInnerResult.

        Campaign result

        :param status: The status of this CampaignEventNodeResultNodesInnerResult.
        :type status: str
        """
        allowed_values = ["success", "error", "scheduled", "missing"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
