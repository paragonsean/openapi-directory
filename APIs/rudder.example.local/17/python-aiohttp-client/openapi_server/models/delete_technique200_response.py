# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delete_technique200_response_data import DeleteTechnique200ResponseData
from openapi_server import util


class DeleteTechnique200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, data: DeleteTechnique200ResponseData=None, result: str=None):
        """DeleteTechnique200Response - a model defined in OpenAPI

        :param action: The action of this DeleteTechnique200Response.
        :param data: The data of this DeleteTechnique200Response.
        :param result: The result of this DeleteTechnique200Response.
        """
        self.openapi_types = {
            'action': str,
            'data': DeleteTechnique200ResponseData,
            'result': str
        }

        self.attribute_map = {
            'action': 'action',
            'data': 'data',
            'result': 'result'
        }

        self._action = action
        self._data = data
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteTechnique200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The deleteTechnique_200_response of this DeleteTechnique200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this DeleteTechnique200Response.

        The id of the action

        :return: The action of this DeleteTechnique200Response.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DeleteTechnique200Response.

        The id of the action

        :param action: The action of this DeleteTechnique200Response.
        :type action: str
        """
        allowed_values = ["listTechniques"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def data(self):
        """Gets the data of this DeleteTechnique200Response.


        :return: The data of this DeleteTechnique200Response.
        :rtype: DeleteTechnique200ResponseData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DeleteTechnique200Response.


        :param data: The data of this DeleteTechnique200Response.
        :type data: DeleteTechnique200ResponseData
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def result(self):
        """Gets the result of this DeleteTechnique200Response.

        Result of the request

        :return: The result of this DeleteTechnique200Response.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this DeleteTechnique200Response.

        Result of the request

        :param result: The result of this DeleteTechnique200Response.
        :type result: str
        """
        allowed_values = ["success", "error"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result
