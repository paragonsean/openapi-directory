# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directive_tags_inner import DirectiveTagsInner
from openapi_server.models.rule_targets_inner import RuleTargetsInner
from openapi_server import util


class RuleWithCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, directives: List[str]=None, display_name: str=None, enabled: bool=None, id: str=None, long_description: str=None, short_description: str=None, system: bool=None, tags: List[DirectiveTagsInner]=None, targets: List[RuleTargetsInner]=None):
        """RuleWithCategory - a model defined in OpenAPI

        :param category: The category of this RuleWithCategory.
        :param directives: The directives of this RuleWithCategory.
        :param display_name: The display_name of this RuleWithCategory.
        :param enabled: The enabled of this RuleWithCategory.
        :param id: The id of this RuleWithCategory.
        :param long_description: The long_description of this RuleWithCategory.
        :param short_description: The short_description of this RuleWithCategory.
        :param system: The system of this RuleWithCategory.
        :param tags: The tags of this RuleWithCategory.
        :param targets: The targets of this RuleWithCategory.
        """
        self.openapi_types = {
            'category': str,
            'directives': List[str],
            'display_name': str,
            'enabled': bool,
            'id': str,
            'long_description': str,
            'short_description': str,
            'system': bool,
            'tags': List[DirectiveTagsInner],
            'targets': List[RuleTargetsInner]
        }

        self.attribute_map = {
            'category': 'category',
            'directives': 'directives',
            'display_name': 'displayName',
            'enabled': 'enabled',
            'id': 'id',
            'long_description': 'longDescription',
            'short_description': 'shortDescription',
            'system': 'system',
            'tags': 'tags',
            'targets': 'targets'
        }

        self._category = category
        self._directives = directives
        self._display_name = display_name
        self._enabled = enabled
        self._id = id
        self._long_description = long_description
        self._short_description = short_description
        self._system = system
        self._tags = tags
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleWithCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rule-with-category of this RuleWithCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this RuleWithCategory.

        The parent category id.

        :return: The category of this RuleWithCategory.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this RuleWithCategory.

        The parent category id.

        :param category: The category of this RuleWithCategory.
        :type category: str
        """

        self._category = category

    @property
    def directives(self):
        """Gets the directives of this RuleWithCategory.

        Directives linked to the rule

        :return: The directives of this RuleWithCategory.
        :rtype: List[str]
        """
        return self._directives

    @directives.setter
    def directives(self, directives):
        """Sets the directives of this RuleWithCategory.

        Directives linked to the rule

        :param directives: The directives of this RuleWithCategory.
        :type directives: List[str]
        """

        self._directives = directives

    @property
    def display_name(self):
        """Gets the display_name of this RuleWithCategory.

        Rule name

        :return: The display_name of this RuleWithCategory.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RuleWithCategory.

        Rule name

        :param display_name: The display_name of this RuleWithCategory.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enabled(self):
        """Gets the enabled of this RuleWithCategory.

        Is the rule enabled

        :return: The enabled of this RuleWithCategory.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RuleWithCategory.

        Is the rule enabled

        :param enabled: The enabled of this RuleWithCategory.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this RuleWithCategory.

        Rule id

        :return: The id of this RuleWithCategory.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RuleWithCategory.

        Rule id

        :param id: The id of this RuleWithCategory.
        :type id: str
        """

        self._id = id

    @property
    def long_description(self):
        """Gets the long_description of this RuleWithCategory.

        Rule documentation

        :return: The long_description of this RuleWithCategory.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this RuleWithCategory.

        Rule documentation

        :param long_description: The long_description of this RuleWithCategory.
        :type long_description: str
        """

        self._long_description = long_description

    @property
    def short_description(self):
        """Gets the short_description of this RuleWithCategory.

        One line rule description

        :return: The short_description of this RuleWithCategory.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this RuleWithCategory.

        One line rule description

        :param short_description: The short_description of this RuleWithCategory.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def system(self):
        """Gets the system of this RuleWithCategory.

        If true it is an internal Rudder rule

        :return: The system of this RuleWithCategory.
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this RuleWithCategory.

        If true it is an internal Rudder rule

        :param system: The system of this RuleWithCategory.
        :type system: bool
        """

        self._system = system

    @property
    def tags(self):
        """Gets the tags of this RuleWithCategory.


        :return: The tags of this RuleWithCategory.
        :rtype: List[DirectiveTagsInner]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RuleWithCategory.


        :param tags: The tags of this RuleWithCategory.
        :type tags: List[DirectiveTagsInner]
        """

        self._tags = tags

    @property
    def targets(self):
        """Gets the targets of this RuleWithCategory.

        Node and special groups targeted by that rule

        :return: The targets of this RuleWithCategory.
        :rtype: List[RuleTargetsInner]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this RuleWithCategory.

        Node and special groups targeted by that rule

        :param targets: The targets of this RuleWithCategory.
        :type targets: List[RuleTargetsInner]
        """

        self._targets = targets
