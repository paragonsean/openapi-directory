# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_compliance_component_compliance_details import RuleComplianceComponentComplianceDetails
from openapi_server.models.rule_compliance_component_components_inner_values_inner import RuleComplianceComponentComponentsInnerValuesInner
from openapi_server import util


class RuleComplianceComponentComponentsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compliance: float=None, compliance_details: RuleComplianceComponentComplianceDetails=None, name: str=None, values: List[RuleComplianceComponentComponentsInnerValuesInner]=None):
        """RuleComplianceComponentComponentsInner - a model defined in OpenAPI

        :param compliance: The compliance of this RuleComplianceComponentComponentsInner.
        :param compliance_details: The compliance_details of this RuleComplianceComponentComponentsInner.
        :param name: The name of this RuleComplianceComponentComponentsInner.
        :param values: The values of this RuleComplianceComponentComponentsInner.
        """
        self.openapi_types = {
            'compliance': float,
            'compliance_details': RuleComplianceComponentComplianceDetails,
            'name': str,
            'values': List[RuleComplianceComponentComponentsInnerValuesInner]
        }

        self.attribute_map = {
            'compliance': 'compliance',
            'compliance_details': 'complianceDetails',
            'name': 'name',
            'values': 'values'
        }

        self._compliance = compliance
        self._compliance_details = compliance_details
        self._name = name
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleComplianceComponentComponentsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rule_compliance_component_components_inner of this RuleComplianceComponentComponentsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compliance(self):
        """Gets the compliance of this RuleComplianceComponentComponentsInner.

        directive compliance level

        :return: The compliance of this RuleComplianceComponentComponentsInner.
        :rtype: float
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this RuleComplianceComponentComponentsInner.

        directive compliance level

        :param compliance: The compliance of this RuleComplianceComponentComponentsInner.
        :type compliance: float
        """
        if compliance is None:
            raise ValueError("Invalid value for `compliance`, must not be `None`")

        self._compliance = compliance

    @property
    def compliance_details(self):
        """Gets the compliance_details of this RuleComplianceComponentComponentsInner.


        :return: The compliance_details of this RuleComplianceComponentComponentsInner.
        :rtype: RuleComplianceComponentComplianceDetails
        """
        return self._compliance_details

    @compliance_details.setter
    def compliance_details(self, compliance_details):
        """Sets the compliance_details of this RuleComplianceComponentComponentsInner.


        :param compliance_details: The compliance_details of this RuleComplianceComponentComponentsInner.
        :type compliance_details: RuleComplianceComponentComplianceDetails
        """
        if compliance_details is None:
            raise ValueError("Invalid value for `compliance_details`, must not be `None`")

        self._compliance_details = compliance_details

    @property
    def name(self):
        """Gets the name of this RuleComplianceComponentComponentsInner.

        Name of the component

        :return: The name of this RuleComplianceComponentComponentsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuleComplianceComponentComponentsInner.

        Name of the component

        :param name: The name of this RuleComplianceComponentComponentsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def values(self):
        """Gets the values of this RuleComplianceComponentComponentsInner.


        :return: The values of this RuleComplianceComponentComponentsInner.
        :rtype: List[RuleComplianceComponentComponentsInnerValuesInner]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this RuleComplianceComponentComponentsInner.


        :param values: The values of this RuleComplianceComponentComponentsInner.
        :type values: List[RuleComplianceComponentComponentsInnerValuesInner]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
