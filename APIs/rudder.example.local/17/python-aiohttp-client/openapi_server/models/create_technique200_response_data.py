# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_technique200_response_data_techniques import CreateTechnique200ResponseDataTechniques
from openapi_server import util


class CreateTechnique200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, techniques: CreateTechnique200ResponseDataTechniques=None):
        """CreateTechnique200ResponseData - a model defined in OpenAPI

        :param techniques: The techniques of this CreateTechnique200ResponseData.
        """
        self.openapi_types = {
            'techniques': CreateTechnique200ResponseDataTechniques
        }

        self.attribute_map = {
            'techniques': 'techniques'
        }

        self._techniques = techniques

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTechnique200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTechnique_200_response_data of this CreateTechnique200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def techniques(self):
        """Gets the techniques of this CreateTechnique200ResponseData.


        :return: The techniques of this CreateTechnique200ResponseData.
        :rtype: CreateTechnique200ResponseDataTechniques
        """
        return self._techniques

    @techniques.setter
    def techniques(self, techniques):
        """Sets the techniques of this CreateTechnique200ResponseData.


        :param techniques: The techniques of this CreateTechnique200ResponseData.
        :type techniques: CreateTechnique200ResponseDataTechniques
        """
        if techniques is None:
            raise ValueError("Invalid value for `techniques`, must not be `None`")

        self._techniques = techniques
