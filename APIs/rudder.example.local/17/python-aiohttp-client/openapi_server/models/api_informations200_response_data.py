# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_informations200_response_data_endpoints_inner import ApiInformations200ResponseDataEndpointsInner
from openapi_server import util


class ApiInformations200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documentation: str=None, endpoint_name: str=None, endpoints: List[ApiInformations200ResponseDataEndpointsInner]=None):
        """ApiInformations200ResponseData - a model defined in OpenAPI

        :param documentation: The documentation of this ApiInformations200ResponseData.
        :param endpoint_name: The endpoint_name of this ApiInformations200ResponseData.
        :param endpoints: The endpoints of this ApiInformations200ResponseData.
        """
        self.openapi_types = {
            'documentation': str,
            'endpoint_name': str,
            'endpoints': List[ApiInformations200ResponseDataEndpointsInner]
        }

        self.attribute_map = {
            'documentation': 'documentation',
            'endpoint_name': 'endpointName',
            'endpoints': 'endpoints'
        }

        self._documentation = documentation
        self._endpoint_name = endpoint_name
        self._endpoints = endpoints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiInformations200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The apiInformations_200_response_data of this ApiInformations200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documentation(self):
        """Gets the documentation of this ApiInformations200ResponseData.

        Link to Rudder API description

        :return: The documentation of this ApiInformations200ResponseData.
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this ApiInformations200ResponseData.

        Link to Rudder API description

        :param documentation: The documentation of this ApiInformations200ResponseData.
        :type documentation: str
        """
        if documentation is None:
            raise ValueError("Invalid value for `documentation`, must not be `None`")

        self._documentation = documentation

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this ApiInformations200ResponseData.

        The endpoint name as key and the endpoint description as value

        :return: The endpoint_name of this ApiInformations200ResponseData.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this ApiInformations200ResponseData.

        The endpoint name as key and the endpoint description as value

        :param endpoint_name: The endpoint_name of this ApiInformations200ResponseData.
        :type endpoint_name: str
        """
        if endpoint_name is None:
            raise ValueError("Invalid value for `endpoint_name`, must not be `None`")

        self._endpoint_name = endpoint_name

    @property
    def endpoints(self):
        """Gets the endpoints of this ApiInformations200ResponseData.


        :return: The endpoints of this ApiInformations200ResponseData.
        :rtype: List[ApiInformations200ResponseDataEndpointsInner]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ApiInformations200ResponseData.


        :param endpoints: The endpoints of this ApiInformations200ResponseData.
        :type endpoints: List[ApiInformations200ResponseDataEndpointsInner]
        """
        if endpoints is None:
            raise ValueError("Invalid value for `endpoints`, must not be `None`")

        self._endpoints = endpoints
