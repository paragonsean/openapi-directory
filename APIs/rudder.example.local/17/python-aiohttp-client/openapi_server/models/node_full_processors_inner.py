# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeFullProcessorsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arch: str=None, core: int=None, cpuid: str=None, description: str=None, external_clock: str=None, family_name: str=None, manufacturer: str=None, model: int=None, name: str=None, quantity: int=None, speed: int=None, stepping: int=None, thread: int=None):
        """NodeFullProcessorsInner - a model defined in OpenAPI

        :param arch: The arch of this NodeFullProcessorsInner.
        :param core: The core of this NodeFullProcessorsInner.
        :param cpuid: The cpuid of this NodeFullProcessorsInner.
        :param description: The description of this NodeFullProcessorsInner.
        :param external_clock: The external_clock of this NodeFullProcessorsInner.
        :param family_name: The family_name of this NodeFullProcessorsInner.
        :param manufacturer: The manufacturer of this NodeFullProcessorsInner.
        :param model: The model of this NodeFullProcessorsInner.
        :param name: The name of this NodeFullProcessorsInner.
        :param quantity: The quantity of this NodeFullProcessorsInner.
        :param speed: The speed of this NodeFullProcessorsInner.
        :param stepping: The stepping of this NodeFullProcessorsInner.
        :param thread: The thread of this NodeFullProcessorsInner.
        """
        self.openapi_types = {
            'arch': str,
            'core': int,
            'cpuid': str,
            'description': str,
            'external_clock': str,
            'family_name': str,
            'manufacturer': str,
            'model': int,
            'name': str,
            'quantity': int,
            'speed': int,
            'stepping': int,
            'thread': int
        }

        self.attribute_map = {
            'arch': 'arch',
            'core': 'core',
            'cpuid': 'cpuid',
            'description': 'description',
            'external_clock': 'externalClock',
            'family_name': 'familyName',
            'manufacturer': 'manufacturer',
            'model': 'model',
            'name': 'name',
            'quantity': 'quantity',
            'speed': 'speed',
            'stepping': 'stepping',
            'thread': 'thread'
        }

        self._arch = arch
        self._core = core
        self._cpuid = cpuid
        self._description = description
        self._external_clock = external_clock
        self._family_name = family_name
        self._manufacturer = manufacturer
        self._model = model
        self._name = name
        self._quantity = quantity
        self._speed = speed
        self._stepping = stepping
        self._thread = thread

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeFullProcessorsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node_full_processors_inner of this NodeFullProcessorsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arch(self):
        """Gets the arch of this NodeFullProcessorsInner.

        CPU architecture

        :return: The arch of this NodeFullProcessorsInner.
        :rtype: str
        """
        return self._arch

    @arch.setter
    def arch(self, arch):
        """Sets the arch of this NodeFullProcessorsInner.

        CPU architecture

        :param arch: The arch of this NodeFullProcessorsInner.
        :type arch: str
        """

        self._arch = arch

    @property
    def core(self):
        """Gets the core of this NodeFullProcessorsInner.

        Number of core for that CPU

        :return: The core of this NodeFullProcessorsInner.
        :rtype: int
        """
        return self._core

    @core.setter
    def core(self, core):
        """Sets the core of this NodeFullProcessorsInner.

        Number of core for that CPU

        :param core: The core of this NodeFullProcessorsInner.
        :type core: int
        """

        self._core = core

    @property
    def cpuid(self):
        """Gets the cpuid of this NodeFullProcessorsInner.

        Identifier of the CPU

        :return: The cpuid of this NodeFullProcessorsInner.
        :rtype: str
        """
        return self._cpuid

    @cpuid.setter
    def cpuid(self, cpuid):
        """Sets the cpuid of this NodeFullProcessorsInner.

        Identifier of the CPU

        :param cpuid: The cpuid of this NodeFullProcessorsInner.
        :type cpuid: str
        """

        self._cpuid = cpuid

    @property
    def description(self):
        """Gets the description of this NodeFullProcessorsInner.

        System provided description of the CPU

        :return: The description of this NodeFullProcessorsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NodeFullProcessorsInner.

        System provided description of the CPU

        :param description: The description of this NodeFullProcessorsInner.
        :type description: str
        """

        self._description = description

    @property
    def external_clock(self):
        """Gets the external_clock of this NodeFullProcessorsInner.

        External clock used by the CPU

        :return: The external_clock of this NodeFullProcessorsInner.
        :rtype: str
        """
        return self._external_clock

    @external_clock.setter
    def external_clock(self, external_clock):
        """Sets the external_clock of this NodeFullProcessorsInner.

        External clock used by the CPU

        :param external_clock: The external_clock of this NodeFullProcessorsInner.
        :type external_clock: str
        """

        self._external_clock = external_clock

    @property
    def family_name(self):
        """Gets the family_name of this NodeFullProcessorsInner.

        CPU family

        :return: The family_name of this NodeFullProcessorsInner.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this NodeFullProcessorsInner.

        CPU family

        :param family_name: The family_name of this NodeFullProcessorsInner.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def manufacturer(self):
        """Gets the manufacturer of this NodeFullProcessorsInner.

        CPU manufacturer

        :return: The manufacturer of this NodeFullProcessorsInner.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this NodeFullProcessorsInner.

        CPU manufacturer

        :param manufacturer: The manufacturer of this NodeFullProcessorsInner.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this NodeFullProcessorsInner.

        CPU model

        :return: The model of this NodeFullProcessorsInner.
        :rtype: int
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this NodeFullProcessorsInner.

        CPU model

        :param model: The model of this NodeFullProcessorsInner.
        :type model: int
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this NodeFullProcessorsInner.

        CPU name

        :return: The name of this NodeFullProcessorsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeFullProcessorsInner.

        CPU name

        :param name: The name of this NodeFullProcessorsInner.
        :type name: str
        """

        self._name = name

    @property
    def quantity(self):
        """Gets the quantity of this NodeFullProcessorsInner.

        Number of CPU with these features

        :return: The quantity of this NodeFullProcessorsInner.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this NodeFullProcessorsInner.

        Number of CPU with these features

        :param quantity: The quantity of this NodeFullProcessorsInner.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def speed(self):
        """Gets the speed of this NodeFullProcessorsInner.

        Speed (frequency) of the CPU

        :return: The speed of this NodeFullProcessorsInner.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this NodeFullProcessorsInner.

        Speed (frequency) of the CPU

        :param speed: The speed of this NodeFullProcessorsInner.
        :type speed: int
        """

        self._speed = speed

    @property
    def stepping(self):
        """Gets the stepping of this NodeFullProcessorsInner.

        Stepping or power management information

        :return: The stepping of this NodeFullProcessorsInner.
        :rtype: int
        """
        return self._stepping

    @stepping.setter
    def stepping(self, stepping):
        """Sets the stepping of this NodeFullProcessorsInner.

        Stepping or power management information

        :param stepping: The stepping of this NodeFullProcessorsInner.
        :type stepping: int
        """

        self._stepping = stepping

    @property
    def thread(self):
        """Gets the thread of this NodeFullProcessorsInner.

        Number of thread by core for the CPU

        :return: The thread of this NodeFullProcessorsInner.
        :rtype: int
        """
        return self._thread

    @thread.setter
    def thread(self, thread):
        """Sets the thread of this NodeFullProcessorsInner.

        Number of thread by core for the CPU

        :param thread: The thread of this NodeFullProcessorsInner.
        :type thread: int
        """

        self._thread = thread
