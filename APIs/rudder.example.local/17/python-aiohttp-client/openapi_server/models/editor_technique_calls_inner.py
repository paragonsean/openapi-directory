# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.technique_block import TechniqueBlock
from openapi_server.models.technique_block_reporting_logic import TechniqueBlockReportingLogic
from openapi_server.models.technique_method_call import TechniqueMethodCall
from openapi_server.models.technique_method_call_parameters_inner import TechniqueMethodCallParametersInner
from openapi_server import util


class EditorTechniqueCallsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component: str=None, condition: str=None, disable_reporting: bool=None, id: str=None, method: str=None, parameters: List[TechniqueMethodCallParametersInner]=None, calls: List[EditorTechniqueCallsInner]=None, reporting_logic: TechniqueBlockReportingLogic=None):
        """EditorTechniqueCallsInner - a model defined in OpenAPI

        :param component: The component of this EditorTechniqueCallsInner.
        :param condition: The condition of this EditorTechniqueCallsInner.
        :param disable_reporting: The disable_reporting of this EditorTechniqueCallsInner.
        :param id: The id of this EditorTechniqueCallsInner.
        :param method: The method of this EditorTechniqueCallsInner.
        :param parameters: The parameters of this EditorTechniqueCallsInner.
        :param calls: The calls of this EditorTechniqueCallsInner.
        :param reporting_logic: The reporting_logic of this EditorTechniqueCallsInner.
        """
        self.openapi_types = {
            'component': str,
            'condition': str,
            'disable_reporting': bool,
            'id': str,
            'method': str,
            'parameters': List[TechniqueMethodCallParametersInner],
            'calls': List[EditorTechniqueCallsInner],
            'reporting_logic': TechniqueBlockReportingLogic
        }

        self.attribute_map = {
            'component': 'component',
            'condition': 'condition',
            'disable_reporting': 'disableReporting',
            'id': 'id',
            'method': 'method',
            'parameters': 'parameters',
            'calls': 'calls',
            'reporting_logic': 'reportingLogic'
        }

        self._component = component
        self._condition = condition
        self._disable_reporting = disable_reporting
        self._id = id
        self._method = method
        self._parameters = parameters
        self._calls = calls
        self._reporting_logic = reporting_logic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditorTechniqueCallsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The editor_technique_calls_inner of this EditorTechniqueCallsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component(self):
        """Gets the component of this EditorTechniqueCallsInner.

        Component is used in reporting to identify this method call. You can see it as a name

        :return: The component of this EditorTechniqueCallsInner.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this EditorTechniqueCallsInner.

        Component is used in reporting to identify this method call. You can see it as a name

        :param component: The component of this EditorTechniqueCallsInner.
        :type component: str
        """

        self._component = component

    @property
    def condition(self):
        """Gets the condition of this EditorTechniqueCallsInner.

        Condition to run this method.

        :return: The condition of this EditorTechniqueCallsInner.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this EditorTechniqueCallsInner.

        Condition to run this method.

        :param condition: The condition of this EditorTechniqueCallsInner.
        :type condition: str
        """

        self._condition = condition

    @property
    def disable_reporting(self):
        """Gets the disable_reporting of this EditorTechniqueCallsInner.

        Should the reporting of this method be disabled

        :return: The disable_reporting of this EditorTechniqueCallsInner.
        :rtype: bool
        """
        return self._disable_reporting

    @disable_reporting.setter
    def disable_reporting(self, disable_reporting):
        """Sets the disable_reporting of this EditorTechniqueCallsInner.

        Should the reporting of this method be disabled

        :param disable_reporting: The disable_reporting of this EditorTechniqueCallsInner.
        :type disable_reporting: bool
        """

        self._disable_reporting = disable_reporting

    @property
    def id(self):
        """Gets the id of this EditorTechniqueCallsInner.

        Method call id

        :return: The id of this EditorTechniqueCallsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorTechniqueCallsInner.

        Method call id

        :param id: The id of this EditorTechniqueCallsInner.
        :type id: str
        """

        self._id = id

    @property
    def method(self):
        """Gets the method of this EditorTechniqueCallsInner.

        Id of the method called

        :return: The method of this EditorTechniqueCallsInner.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this EditorTechniqueCallsInner.

        Id of the method called

        :param method: The method of this EditorTechniqueCallsInner.
        :type method: str
        """

        self._method = method

    @property
    def parameters(self):
        """Gets the parameters of this EditorTechniqueCallsInner.

        Parameters for this method call

        :return: The parameters of this EditorTechniqueCallsInner.
        :rtype: List[TechniqueMethodCallParametersInner]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this EditorTechniqueCallsInner.

        Parameters for this method call

        :param parameters: The parameters of this EditorTechniqueCallsInner.
        :type parameters: List[TechniqueMethodCallParametersInner]
        """

        self._parameters = parameters

    @property
    def calls(self):
        """Gets the calls of this EditorTechniqueCallsInner.

        Method and blocks contained by this block

        :return: The calls of this EditorTechniqueCallsInner.
        :rtype: List[EditorTechniqueCallsInner]
        """
        return self._calls

    @calls.setter
    def calls(self, calls):
        """Sets the calls of this EditorTechniqueCallsInner.

        Method and blocks contained by this block

        :param calls: The calls of this EditorTechniqueCallsInner.
        :type calls: List[EditorTechniqueCallsInner]
        """

        self._calls = calls

    @property
    def reporting_logic(self):
        """Gets the reporting_logic of this EditorTechniqueCallsInner.


        :return: The reporting_logic of this EditorTechniqueCallsInner.
        :rtype: TechniqueBlockReportingLogic
        """
        return self._reporting_logic

    @reporting_logic.setter
    def reporting_logic(self, reporting_logic):
        """Sets the reporting_logic of this EditorTechniqueCallsInner.


        :param reporting_logic: The reporting_logic of this EditorTechniqueCallsInner.
        :type reporting_logic: TechniqueBlockReportingLogic
        """

        self._reporting_logic = reporting_logic
