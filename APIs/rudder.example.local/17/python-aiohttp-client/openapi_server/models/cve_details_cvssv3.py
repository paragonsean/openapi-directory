# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CveDetailsCvssv3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_score: float=None, base_severity: str=None, vector: str=None):
        """CveDetailsCvssv3 - a model defined in OpenAPI

        :param base_score: The base_score of this CveDetailsCvssv3.
        :param base_severity: The base_severity of this CveDetailsCvssv3.
        :param vector: The vector of this CveDetailsCvssv3.
        """
        self.openapi_types = {
            'base_score': float,
            'base_severity': str,
            'vector': str
        }

        self.attribute_map = {
            'base_score': 'baseScore',
            'base_severity': 'baseSeverity',
            'vector': 'vector'
        }

        self._base_score = base_score
        self._base_severity = base_severity
        self._vector = vector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CveDetailsCvssv3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cveDetails_cvssv3 of this CveDetailsCvssv3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_score(self):
        """Gets the base_score of this CveDetailsCvssv3.

        CVSS V3 base score

        :return: The base_score of this CveDetailsCvssv3.
        :rtype: float
        """
        return self._base_score

    @base_score.setter
    def base_score(self, base_score):
        """Sets the base_score of this CveDetailsCvssv3.

        CVSS V3 base score

        :param base_score: The base_score of this CveDetailsCvssv3.
        :type base_score: float
        """

        self._base_score = base_score

    @property
    def base_severity(self):
        """Gets the base_severity of this CveDetailsCvssv3.

        CVSS V3 Severity

        :return: The base_severity of this CveDetailsCvssv3.
        :rtype: str
        """
        return self._base_severity

    @base_severity.setter
    def base_severity(self, base_severity):
        """Sets the base_severity of this CveDetailsCvssv3.

        CVSS V3 Severity

        :param base_severity: The base_severity of this CveDetailsCvssv3.
        :type base_severity: str
        """
        allowed_values = ["critical", "high", "medium", "low", "none"]  # noqa: E501
        if base_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `base_severity` ({0}), must be one of {1}"
                .format(base_severity, allowed_values)
            )

        self._base_severity = base_severity

    @property
    def vector(self):
        """Gets the vector of this CveDetailsCvssv3.

        CVSS V3 vector

        :return: The vector of this CveDetailsCvssv3.
        :rtype: str
        """
        return self._vector

    @vector.setter
    def vector(self, vector):
        """Sets the vector of this CveDetailsCvssv3.

        CVSS V3 vector

        :param vector: The vector of this CveDetailsCvssv3.
        :type vector: str
        """

        self._vector = vector
