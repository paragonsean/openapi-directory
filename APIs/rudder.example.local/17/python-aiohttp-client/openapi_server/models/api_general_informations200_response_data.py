# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_endpoints_inner import ApiEndpointsInner
from openapi_server.models.api_versions import ApiVersions
from openapi_server import util


class ApiGeneralInformations200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_versions: List[ApiVersions]=None, documentation: str=None, endpoints: List[List[ApiEndpointsInner]]=None):
        """ApiGeneralInformations200ResponseData - a model defined in OpenAPI

        :param available_versions: The available_versions of this ApiGeneralInformations200ResponseData.
        :param documentation: The documentation of this ApiGeneralInformations200ResponseData.
        :param endpoints: The endpoints of this ApiGeneralInformations200ResponseData.
        """
        self.openapi_types = {
            'available_versions': List[ApiVersions],
            'documentation': str,
            'endpoints': List[List[ApiEndpointsInner]]
        }

        self.attribute_map = {
            'available_versions': 'availableVersions',
            'documentation': 'documentation',
            'endpoints': 'endpoints'
        }

        self._available_versions = available_versions
        self._documentation = documentation
        self._endpoints = endpoints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiGeneralInformations200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The apiGeneralInformations_200_response_data of this ApiGeneralInformations200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_versions(self):
        """Gets the available_versions of this ApiGeneralInformations200ResponseData.


        :return: The available_versions of this ApiGeneralInformations200ResponseData.
        :rtype: List[ApiVersions]
        """
        return self._available_versions

    @available_versions.setter
    def available_versions(self, available_versions):
        """Sets the available_versions of this ApiGeneralInformations200ResponseData.


        :param available_versions: The available_versions of this ApiGeneralInformations200ResponseData.
        :type available_versions: List[ApiVersions]
        """
        if available_versions is None:
            raise ValueError("Invalid value for `available_versions`, must not be `None`")

        self._available_versions = available_versions

    @property
    def documentation(self):
        """Gets the documentation of this ApiGeneralInformations200ResponseData.

        Link to Rudder API description

        :return: The documentation of this ApiGeneralInformations200ResponseData.
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this ApiGeneralInformations200ResponseData.

        Link to Rudder API description

        :param documentation: The documentation of this ApiGeneralInformations200ResponseData.
        :type documentation: str
        """
        if documentation is None:
            raise ValueError("Invalid value for `documentation`, must not be `None`")

        self._documentation = documentation

    @property
    def endpoints(self):
        """Gets the endpoints of this ApiGeneralInformations200ResponseData.


        :return: The endpoints of this ApiGeneralInformations200ResponseData.
        :rtype: List[List[ApiEndpointsInner]]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ApiGeneralInformations200ResponseData.


        :param endpoints: The endpoints of this ApiGeneralInformations200ResponseData.
        :type endpoints: List[List[ApiEndpointsInner]]
        """
        if endpoints is None:
            raise ValueError("Invalid value for `endpoints`, must not be `None`")

        self._endpoints = endpoints
