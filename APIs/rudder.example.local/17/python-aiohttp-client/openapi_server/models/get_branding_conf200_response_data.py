# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.branding_conf import BrandingConf
from openapi_server import util


class GetBrandingConf200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branding: BrandingConf=None):
        """GetBrandingConf200ResponseData - a model defined in OpenAPI

        :param branding: The branding of this GetBrandingConf200ResponseData.
        """
        self.openapi_types = {
            'branding': BrandingConf
        }

        self.attribute_map = {
            'branding': 'branding'
        }

        self._branding = branding

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetBrandingConf200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getBrandingConf_200_response_data of this GetBrandingConf200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branding(self):
        """Gets the branding of this GetBrandingConf200ResponseData.


        :return: The branding of this GetBrandingConf200ResponseData.
        :rtype: BrandingConf
        """
        return self._branding

    @branding.setter
    def branding(self, branding):
        """Sets the branding of this GetBrandingConf200ResponseData.


        :param branding: The branding of this GetBrandingConf200ResponseData.
        :type branding: BrandingConf
        """
        if branding is None:
            raise ValueError("Invalid value for `branding`, must not be `None`")

        self._branding = branding
