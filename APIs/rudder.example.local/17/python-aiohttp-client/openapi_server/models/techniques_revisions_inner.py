# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TechniquesRevisionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, _date: str=None, message: str=None, revision: str=None):
        """TechniquesRevisionsInner - a model defined in OpenAPI

        :param author: The author of this TechniquesRevisionsInner.
        :param _date: The _date of this TechniquesRevisionsInner.
        :param message: The message of this TechniquesRevisionsInner.
        :param revision: The revision of this TechniquesRevisionsInner.
        """
        self.openapi_types = {
            'author': str,
            '_date': str,
            'message': str,
            'revision': str
        }

        self.attribute_map = {
            'author': 'author',
            '_date': 'date',
            'message': 'message',
            'revision': 'revision'
        }

        self._author = author
        self.__date = _date
        self._message = message
        self._revision = revision

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TechniquesRevisionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The techniques_revisions_inner of this TechniquesRevisionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this TechniquesRevisionsInner.

        Commit's author

        :return: The author of this TechniquesRevisionsInner.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this TechniquesRevisionsInner.

        Commit's author

        :param author: The author of this TechniquesRevisionsInner.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def _date(self):
        """Gets the _date of this TechniquesRevisionsInner.

        Commit's date

        :return: The _date of this TechniquesRevisionsInner.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TechniquesRevisionsInner.

        Commit's date

        :param _date: The _date of this TechniquesRevisionsInner.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def message(self):
        """Gets the message of this TechniquesRevisionsInner.

        Commit's message

        :return: The message of this TechniquesRevisionsInner.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TechniquesRevisionsInner.

        Commit's message

        :param message: The message of this TechniquesRevisionsInner.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def revision(self):
        """Gets the revision of this TechniquesRevisionsInner.

        Revision ID

        :return: The revision of this TechniquesRevisionsInner.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this TechniquesRevisionsInner.

        Revision ID

        :param revision: The revision of this TechniquesRevisionsInner.
        :type revision: str
        """
        if revision is None:
            raise ValueError("Invalid value for `revision`, must not be `None`")

        self._revision = revision
