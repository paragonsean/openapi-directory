# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeFullManagementTechnologyInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[str]=None, name: str=None, node_kind: str=None, root_components: List[str]=None, version: str=None):
        """NodeFullManagementTechnologyInner - a model defined in OpenAPI

        :param capabilities: The capabilities of this NodeFullManagementTechnologyInner.
        :param name: The name of this NodeFullManagementTechnologyInner.
        :param node_kind: The node_kind of this NodeFullManagementTechnologyInner.
        :param root_components: The root_components of this NodeFullManagementTechnologyInner.
        :param version: The version of this NodeFullManagementTechnologyInner.
        """
        self.openapi_types = {
            'capabilities': List[str],
            'name': str,
            'node_kind': str,
            'root_components': List[str],
            'version': str
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'name': 'name',
            'node_kind': 'nodeKind',
            'root_components': 'rootComponents',
            'version': 'version'
        }

        self._capabilities = capabilities
        self._name = name
        self._node_kind = node_kind
        self._root_components = root_components
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeFullManagementTechnologyInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node_full_managementTechnology_inner of this NodeFullManagementTechnologyInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this NodeFullManagementTechnologyInner.

        List of agent capabilities

        :return: The capabilities of this NodeFullManagementTechnologyInner.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this NodeFullManagementTechnologyInner.

        List of agent capabilities

        :param capabilities: The capabilities of this NodeFullManagementTechnologyInner.
        :type capabilities: List[str]
        """

        self._capabilities = capabilities

    @property
    def name(self):
        """Gets the name of this NodeFullManagementTechnologyInner.

        Agent name

        :return: The name of this NodeFullManagementTechnologyInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeFullManagementTechnologyInner.

        Agent name

        :param name: The name of this NodeFullManagementTechnologyInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_kind(self):
        """Gets the node_kind of this NodeFullManagementTechnologyInner.

        kind of node for the management engine, like `root`, `relay`, `node`, `root-component`

        :return: The node_kind of this NodeFullManagementTechnologyInner.
        :rtype: str
        """
        return self._node_kind

    @node_kind.setter
    def node_kind(self, node_kind):
        """Sets the node_kind of this NodeFullManagementTechnologyInner.

        kind of node for the management engine, like `root`, `relay`, `node`, `root-component`

        :param node_kind: The node_kind of this NodeFullManagementTechnologyInner.
        :type node_kind: str
        """

        self._node_kind = node_kind

    @property
    def root_components(self):
        """Gets the root_components of this NodeFullManagementTechnologyInner.

        Roles fulfilled by the agent

        :return: The root_components of this NodeFullManagementTechnologyInner.
        :rtype: List[str]
        """
        return self._root_components

    @root_components.setter
    def root_components(self, root_components):
        """Sets the root_components of this NodeFullManagementTechnologyInner.

        Roles fulfilled by the agent

        :param root_components: The root_components of this NodeFullManagementTechnologyInner.
        :type root_components: List[str]
        """

        self._root_components = root_components

    @property
    def version(self):
        """Gets the version of this NodeFullManagementTechnologyInner.

        Agent version

        :return: The version of this NodeFullManagementTechnologyInner.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NodeFullManagementTechnologyInner.

        Agent version

        :param version: The version of this NodeFullManagementTechnologyInner.
        :type version: str
        """

        self._version = version
