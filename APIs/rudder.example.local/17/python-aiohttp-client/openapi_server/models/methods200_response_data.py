# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.methods import Methods
from openapi_server import util


class Methods200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, methods: Methods=None):
        """Methods200ResponseData - a model defined in OpenAPI

        :param methods: The methods of this Methods200ResponseData.
        """
        self.openapi_types = {
            'methods': Methods
        }

        self.attribute_map = {
            'methods': 'methods'
        }

        self._methods = methods

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Methods200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The methods_200_response_data of this Methods200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def methods(self):
        """Gets the methods of this Methods200ResponseData.


        :return: The methods of this Methods200ResponseData.
        :rtype: Methods
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this Methods200ResponseData.


        :param methods: The methods of this Methods200ResponseData.
        :type methods: Methods
        """
        if methods is None:
            raise ValueError("Invalid value for `methods`, must not be `None`")

        self._methods = methods
