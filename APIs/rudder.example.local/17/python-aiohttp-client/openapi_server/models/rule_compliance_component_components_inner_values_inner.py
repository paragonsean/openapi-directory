# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_compliance_component_components_inner_values_inner_reports_inner import RuleComplianceComponentComponentsInnerValuesInnerReportsInner
from openapi_server import util


class RuleComplianceComponentComponentsInnerValuesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reports: List[RuleComplianceComponentComponentsInnerValuesInnerReportsInner]=None, value: str=None):
        """RuleComplianceComponentComponentsInnerValuesInner - a model defined in OpenAPI

        :param reports: The reports of this RuleComplianceComponentComponentsInnerValuesInner.
        :param value: The value of this RuleComplianceComponentComponentsInnerValuesInner.
        """
        self.openapi_types = {
            'reports': List[RuleComplianceComponentComponentsInnerValuesInnerReportsInner],
            'value': str
        }

        self.attribute_map = {
            'reports': 'reports',
            'value': 'value'
        }

        self._reports = reports
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleComplianceComponentComponentsInnerValuesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rule_compliance_component_components_inner_values_inner of this RuleComplianceComponentComponentsInnerValuesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reports(self):
        """Gets the reports of this RuleComplianceComponentComponentsInnerValuesInner.


        :return: The reports of this RuleComplianceComponentComponentsInnerValuesInner.
        :rtype: List[RuleComplianceComponentComponentsInnerValuesInnerReportsInner]
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this RuleComplianceComponentComponentsInnerValuesInner.


        :param reports: The reports of this RuleComplianceComponentComponentsInnerValuesInner.
        :type reports: List[RuleComplianceComponentComponentsInnerValuesInnerReportsInner]
        """
        if reports is None:
            raise ValueError("Invalid value for `reports`, must not be `None`")

        self._reports = reports

    @property
    def value(self):
        """Gets the value of this RuleComplianceComponentComponentsInnerValuesInner.


        :return: The value of this RuleComplianceComponentComponentsInnerValuesInner.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RuleComplianceComponentComponentsInnerValuesInner.


        :param value: The value of this RuleComplianceComponentComponentsInnerValuesInner.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
