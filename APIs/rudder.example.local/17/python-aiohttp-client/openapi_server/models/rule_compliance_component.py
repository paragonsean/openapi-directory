# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_compliance_component_compliance_details import RuleComplianceComponentComplianceDetails
from openapi_server.models.rule_compliance_component_components_inner import RuleComplianceComponentComponentsInner
from openapi_server import util


class RuleComplianceComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compliance: float=None, compliance_details: RuleComplianceComponentComplianceDetails=None, components: List[RuleComplianceComponentComponentsInner]=None, id: str=None, name: str=None):
        """RuleComplianceComponent - a model defined in OpenAPI

        :param compliance: The compliance of this RuleComplianceComponent.
        :param compliance_details: The compliance_details of this RuleComplianceComponent.
        :param components: The components of this RuleComplianceComponent.
        :param id: The id of this RuleComplianceComponent.
        :param name: The name of this RuleComplianceComponent.
        """
        self.openapi_types = {
            'compliance': float,
            'compliance_details': RuleComplianceComponentComplianceDetails,
            'components': List[RuleComplianceComponentComponentsInner],
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'compliance': 'compliance',
            'compliance_details': 'complianceDetails',
            'components': 'components',
            'id': 'id',
            'name': 'name'
        }

        self._compliance = compliance
        self._compliance_details = compliance_details
        self._components = components
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleComplianceComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rule-compliance-component of this RuleComplianceComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compliance(self):
        """Gets the compliance of this RuleComplianceComponent.

        Rule compliance level

        :return: The compliance of this RuleComplianceComponent.
        :rtype: float
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this RuleComplianceComponent.

        Rule compliance level

        :param compliance: The compliance of this RuleComplianceComponent.
        :type compliance: float
        """
        if compliance is None:
            raise ValueError("Invalid value for `compliance`, must not be `None`")

        self._compliance = compliance

    @property
    def compliance_details(self):
        """Gets the compliance_details of this RuleComplianceComponent.


        :return: The compliance_details of this RuleComplianceComponent.
        :rtype: RuleComplianceComponentComplianceDetails
        """
        return self._compliance_details

    @compliance_details.setter
    def compliance_details(self, compliance_details):
        """Sets the compliance_details of this RuleComplianceComponent.


        :param compliance_details: The compliance_details of this RuleComplianceComponent.
        :type compliance_details: RuleComplianceComponentComplianceDetails
        """
        if compliance_details is None:
            raise ValueError("Invalid value for `compliance_details`, must not be `None`")

        self._compliance_details = compliance_details

    @property
    def components(self):
        """Gets the components of this RuleComplianceComponent.


        :return: The components of this RuleComplianceComponent.
        :rtype: List[RuleComplianceComponentComponentsInner]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this RuleComplianceComponent.


        :param components: The components of this RuleComplianceComponent.
        :type components: List[RuleComplianceComponentComponentsInner]
        """
        if components is None:
            raise ValueError("Invalid value for `components`, must not be `None`")

        self._components = components

    @property
    def id(self):
        """Gets the id of this RuleComplianceComponent.

        id of the rule

        :return: The id of this RuleComplianceComponent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RuleComplianceComponent.

        id of the rule

        :param id: The id of this RuleComplianceComponent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this RuleComplianceComponent.

        Name of the rule

        :return: The name of this RuleComplianceComponent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuleComplianceComponent.

        Name of the rule

        :param name: The name of this RuleComplianceComponent.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
