# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MethodParameterConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_empty_string: bool=None, allow_whitespace_string: bool=None, max_length: int=None, min_length: int=None, not_regex: str=None, regex: str=None, select: List[str]=None):
        """MethodParameterConstraints - a model defined in OpenAPI

        :param allow_empty_string: The allow_empty_string of this MethodParameterConstraints.
        :param allow_whitespace_string: The allow_whitespace_string of this MethodParameterConstraints.
        :param max_length: The max_length of this MethodParameterConstraints.
        :param min_length: The min_length of this MethodParameterConstraints.
        :param not_regex: The not_regex of this MethodParameterConstraints.
        :param regex: The regex of this MethodParameterConstraints.
        :param select: The select of this MethodParameterConstraints.
        """
        self.openapi_types = {
            'allow_empty_string': bool,
            'allow_whitespace_string': bool,
            'max_length': int,
            'min_length': int,
            'not_regex': str,
            'regex': str,
            'select': List[str]
        }

        self.attribute_map = {
            'allow_empty_string': 'allow_empty_string',
            'allow_whitespace_string': 'allow_whitespace_string',
            'max_length': 'max_length',
            'min_length': 'min_length',
            'not_regex': 'not_regex',
            'regex': 'regex',
            'select': 'select'
        }

        self._allow_empty_string = allow_empty_string
        self._allow_whitespace_string = allow_whitespace_string
        self._max_length = max_length
        self._min_length = min_length
        self._not_regex = not_regex
        self._regex = regex
        self._select = select

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MethodParameterConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The method_parameter_constraints of this MethodParameterConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_empty_string(self):
        """Gets the allow_empty_string of this MethodParameterConstraints.

        Can this parameter be empty?

        :return: The allow_empty_string of this MethodParameterConstraints.
        :rtype: bool
        """
        return self._allow_empty_string

    @allow_empty_string.setter
    def allow_empty_string(self, allow_empty_string):
        """Sets the allow_empty_string of this MethodParameterConstraints.

        Can this parameter be empty?

        :param allow_empty_string: The allow_empty_string of this MethodParameterConstraints.
        :type allow_empty_string: bool
        """
        if allow_empty_string is None:
            raise ValueError("Invalid value for `allow_empty_string`, must not be `None`")

        self._allow_empty_string = allow_empty_string

    @property
    def allow_whitespace_string(self):
        """Gets the allow_whitespace_string of this MethodParameterConstraints.

        Can this parameter allow trailing/ending spaces, or even a full whitespace string ?

        :return: The allow_whitespace_string of this MethodParameterConstraints.
        :rtype: bool
        """
        return self._allow_whitespace_string

    @allow_whitespace_string.setter
    def allow_whitespace_string(self, allow_whitespace_string):
        """Sets the allow_whitespace_string of this MethodParameterConstraints.

        Can this parameter allow trailing/ending spaces, or even a full whitespace string ?

        :param allow_whitespace_string: The allow_whitespace_string of this MethodParameterConstraints.
        :type allow_whitespace_string: bool
        """
        if allow_whitespace_string is None:
            raise ValueError("Invalid value for `allow_whitespace_string`, must not be `None`")

        self._allow_whitespace_string = allow_whitespace_string

    @property
    def max_length(self):
        """Gets the max_length of this MethodParameterConstraints.

        Maximum size of a parameter

        :return: The max_length of this MethodParameterConstraints.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this MethodParameterConstraints.

        Maximum size of a parameter

        :param max_length: The max_length of this MethodParameterConstraints.
        :type max_length: int
        """
        if max_length is None:
            raise ValueError("Invalid value for `max_length`, must not be `None`")

        self._max_length = max_length

    @property
    def min_length(self):
        """Gets the min_length of this MethodParameterConstraints.

        Minimal size of a parameter

        :return: The min_length of this MethodParameterConstraints.
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this MethodParameterConstraints.

        Minimal size of a parameter

        :param min_length: The min_length of this MethodParameterConstraints.
        :type min_length: int
        """
        if min_length is None:
            raise ValueError("Invalid value for `min_length`, must not be `None`")

        self._min_length = min_length

    @property
    def not_regex(self):
        """Gets the not_regex of this MethodParameterConstraints.

        A regexp to invalidate this parameter

        :return: The not_regex of this MethodParameterConstraints.
        :rtype: str
        """
        return self._not_regex

    @not_regex.setter
    def not_regex(self, not_regex):
        """Sets the not_regex of this MethodParameterConstraints.

        A regexp to invalidate this parameter

        :param not_regex: The not_regex of this MethodParameterConstraints.
        :type not_regex: str
        """
        if not_regex is None:
            raise ValueError("Invalid value for `not_regex`, must not be `None`")

        self._not_regex = not_regex

    @property
    def regex(self):
        """Gets the regex of this MethodParameterConstraints.

        A regex to validate this parameter

        :return: The regex of this MethodParameterConstraints.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this MethodParameterConstraints.

        A regex to validate this parameter

        :param regex: The regex of this MethodParameterConstraints.
        :type regex: str
        """
        if regex is None:
            raise ValueError("Invalid value for `regex`, must not be `None`")

        self._regex = regex

    @property
    def select(self):
        """Gets the select of this MethodParameterConstraints.

        List of items authorized for this parameter

        :return: The select of this MethodParameterConstraints.
        :rtype: List[str]
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this MethodParameterConstraints.

        List of items authorized for this parameter

        :param select: The select of this MethodParameterConstraints.
        :type select: List[str]
        """
        if select is None:
            raise ValueError("Invalid value for `select`, must not be `None`")

        self._select = select
