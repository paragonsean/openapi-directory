# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeFullVirtualMachinesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, memory: str=None, name: str=None, owner: str=None, status: str=None, subsystem: str=None, type: str=None, uuid: str=None, vcpu: str=None):
        """NodeFullVirtualMachinesInner - a model defined in OpenAPI

        :param description: The description of this NodeFullVirtualMachinesInner.
        :param memory: The memory of this NodeFullVirtualMachinesInner.
        :param name: The name of this NodeFullVirtualMachinesInner.
        :param owner: The owner of this NodeFullVirtualMachinesInner.
        :param status: The status of this NodeFullVirtualMachinesInner.
        :param subsystem: The subsystem of this NodeFullVirtualMachinesInner.
        :param type: The type of this NodeFullVirtualMachinesInner.
        :param uuid: The uuid of this NodeFullVirtualMachinesInner.
        :param vcpu: The vcpu of this NodeFullVirtualMachinesInner.
        """
        self.openapi_types = {
            'description': str,
            'memory': str,
            'name': str,
            'owner': str,
            'status': str,
            'subsystem': str,
            'type': str,
            'uuid': str,
            'vcpu': str
        }

        self.attribute_map = {
            'description': 'description',
            'memory': 'memory',
            'name': 'name',
            'owner': 'owner',
            'status': 'status',
            'subsystem': 'subsystem',
            'type': 'type',
            'uuid': 'uuid',
            'vcpu': 'vcpu'
        }

        self._description = description
        self._memory = memory
        self._name = name
        self._owner = owner
        self._status = status
        self._subsystem = subsystem
        self._type = type
        self._uuid = uuid
        self._vcpu = vcpu

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeFullVirtualMachinesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node_full_virtualMachines_inner of this NodeFullVirtualMachinesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this NodeFullVirtualMachinesInner.

        System provided description of the hosted virtual machine

        :return: The description of this NodeFullVirtualMachinesInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NodeFullVirtualMachinesInner.

        System provided description of the hosted virtual machine

        :param description: The description of this NodeFullVirtualMachinesInner.
        :type description: str
        """

        self._description = description

    @property
    def memory(self):
        """Gets the memory of this NodeFullVirtualMachinesInner.

        Memory allocated to the hosted virtual machine

        :return: The memory of this NodeFullVirtualMachinesInner.
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this NodeFullVirtualMachinesInner.

        Memory allocated to the hosted virtual machine

        :param memory: The memory of this NodeFullVirtualMachinesInner.
        :type memory: str
        """

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this NodeFullVirtualMachinesInner.

        Name of the hosted virtual machine

        :return: The name of this NodeFullVirtualMachinesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeFullVirtualMachinesInner.

        Name of the hosted virtual machine

        :param name: The name of this NodeFullVirtualMachinesInner.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this NodeFullVirtualMachinesInner.

        Owner of the hosted virtual machine

        :return: The owner of this NodeFullVirtualMachinesInner.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this NodeFullVirtualMachinesInner.

        Owner of the hosted virtual machine

        :param owner: The owner of this NodeFullVirtualMachinesInner.
        :type owner: str
        """

        self._owner = owner

    @property
    def status(self):
        """Gets the status of this NodeFullVirtualMachinesInner.

        Status (up, starting, etc) of the hosted virtual machine

        :return: The status of this NodeFullVirtualMachinesInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NodeFullVirtualMachinesInner.

        Status (up, starting, etc) of the hosted virtual machine

        :param status: The status of this NodeFullVirtualMachinesInner.
        :type status: str
        """

        self._status = status

    @property
    def subsystem(self):
        """Gets the subsystem of this NodeFullVirtualMachinesInner.

        Technology of the hosted virtual machine

        :return: The subsystem of this NodeFullVirtualMachinesInner.
        :rtype: str
        """
        return self._subsystem

    @subsystem.setter
    def subsystem(self, subsystem):
        """Sets the subsystem of this NodeFullVirtualMachinesInner.

        Technology of the hosted virtual machine

        :param subsystem: The subsystem of this NodeFullVirtualMachinesInner.
        :type subsystem: str
        """

        self._subsystem = subsystem

    @property
    def type(self):
        """Gets the type of this NodeFullVirtualMachinesInner.

        Type of the hosted virtual machine

        :return: The type of this NodeFullVirtualMachinesInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NodeFullVirtualMachinesInner.

        Type of the hosted virtual machine

        :param type: The type of this NodeFullVirtualMachinesInner.
        :type type: str
        """

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this NodeFullVirtualMachinesInner.

        Unique identifier of the hosted virtual machine

        :return: The uuid of this NodeFullVirtualMachinesInner.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this NodeFullVirtualMachinesInner.

        Unique identifier of the hosted virtual machine

        :param uuid: The uuid of this NodeFullVirtualMachinesInner.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def vcpu(self):
        """Gets the vcpu of this NodeFullVirtualMachinesInner.

        Number of virtual CPU allocated to the hosted virtual machine

        :return: The vcpu of this NodeFullVirtualMachinesInner.
        :rtype: str
        """
        return self._vcpu

    @vcpu.setter
    def vcpu(self, vcpu):
        """Sets the vcpu of this NodeFullVirtualMachinesInner.

        Number of virtual CPU allocated to the hosted virtual machine

        :param vcpu: The vcpu of this NodeFullVirtualMachinesInner.
        :type vcpu: str
        """

        self._vcpu = vcpu
