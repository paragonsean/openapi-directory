# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AgentKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, value: str=None):
        """AgentKey - a model defined in OpenAPI

        :param status: The status of this AgentKey.
        :param value: The value of this AgentKey.
        """
        self.openapi_types = {
            'status': str,
            'value': str
        }

        self.attribute_map = {
            'status': 'status',
            'value': 'value'
        }

        self._status = status
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The agent-key of this AgentKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this AgentKey.

        Certification status of the security token (reset to `undefined` to trust a new certificate). If `certified`, inventory signature check will be enforced

        :return: The status of this AgentKey.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AgentKey.

        Certification status of the security token (reset to `undefined` to trust a new certificate). If `certified`, inventory signature check will be enforced

        :param status: The status of this AgentKey.
        :type status: str
        """
        allowed_values = ["certified", "undefined"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def value(self):
        """Gets the value of this AgentKey.

        Certificate (or public key for <6.0 agents) used by the agent. Be careful write a \"\\n\" after header line and before footer line, JSON does not keep formatting in string.

        :return: The value of this AgentKey.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AgentKey.

        Certificate (or public key for <6.0 agents) used by the agent. Be careful write a \"\\n\" after header line and before footer line, JSON does not keep formatting in string.

        :param value: The value of this AgentKey.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
