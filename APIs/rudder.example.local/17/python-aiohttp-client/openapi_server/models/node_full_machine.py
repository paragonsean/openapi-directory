# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeFullMachine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, manufacturer: str=None, provider: str=None, serial_number: str=None, type: str=None):
        """NodeFullMachine - a model defined in OpenAPI

        :param id: The id of this NodeFullMachine.
        :param manufacturer: The manufacturer of this NodeFullMachine.
        :param provider: The provider of this NodeFullMachine.
        :param serial_number: The serial_number of this NodeFullMachine.
        :param type: The type of this NodeFullMachine.
        """
        self.openapi_types = {
            'id': str,
            'manufacturer': str,
            'provider': str,
            'serial_number': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'manufacturer': 'manufacturer',
            'provider': 'provider',
            'serial_number': 'serialNumber',
            'type': 'type'
        }

        self._id = id
        self._manufacturer = manufacturer
        self._provider = provider
        self._serial_number = serial_number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeFullMachine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node_full_machine of this NodeFullMachine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NodeFullMachine.

        Rudder unique identifier for the machine

        :return: The id of this NodeFullMachine.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeFullMachine.

        Rudder unique identifier for the machine

        :param id: The id of this NodeFullMachine.
        :type id: str
        """

        self._id = id

    @property
    def manufacturer(self):
        """Gets the manufacturer of this NodeFullMachine.

        Information about machine manufacturer

        :return: The manufacturer of this NodeFullMachine.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this NodeFullMachine.

        Information about machine manufacturer

        :param manufacturer: The manufacturer of this NodeFullMachine.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def provider(self):
        """Gets the provider of this NodeFullMachine.

        In the case of VM, the VM technology

        :return: The provider of this NodeFullMachine.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this NodeFullMachine.

        In the case of VM, the VM technology

        :param provider: The provider of this NodeFullMachine.
        :type provider: str
        """

        self._provider = provider

    @property
    def serial_number(self):
        """Gets the serial_number of this NodeFullMachine.

        If available, a unique identifier provided by the machine

        :return: The serial_number of this NodeFullMachine.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this NodeFullMachine.

        If available, a unique identifier provided by the machine

        :param serial_number: The serial_number of this NodeFullMachine.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def type(self):
        """Gets the type of this NodeFullMachine.

        Type of the machine

        :return: The type of this NodeFullMachine.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NodeFullMachine.

        Type of the machine

        :param type: The type of this NodeFullMachine.
        :type type: str
        """
        allowed_values = ["Physical", "Virtual"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
