# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Check(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, msg: str=None, name: str=None, status: str=None):
        """Check - a model defined in OpenAPI

        :param msg: The msg of this Check.
        :param name: The name of this Check.
        :param status: The status of this Check.
        """
        self.openapi_types = {
            'msg': str,
            'name': str,
            'status': str
        }

        self.attribute_map = {
            'msg': 'msg',
            'name': 'name',
            'status': 'status'
        }

        self._msg = msg
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Check':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The check of this Check.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def msg(self):
        """Gets the msg of this Check.

        Message about the check

        :return: The msg of this Check.
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this Check.

        Message about the check

        :param msg: The msg of this Check.
        :type msg: str
        """
        if msg is None:
            raise ValueError("Invalid value for `msg`, must not be `None`")

        self._msg = msg

    @property
    def name(self):
        """Gets the name of this Check.

        Name of the check

        :return: The name of this Check.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Check.

        Name of the check

        :param name: The name of this Check.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this Check.

        The severity status of the check

        :return: The status of this Check.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Check.

        The severity status of the check

        :param status: The status of this Check.
        :type status: str
        """
        allowed_values = ["Critical", "Warning", "Ok"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
