# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datasource_run_parameters import DatasourceRunParameters
from openapi_server.models.datasource_type import DatasourceType
from openapi_server import util


class Datasource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, enabled: bool=None, id: str=None, name: str=None, run_parameters: DatasourceRunParameters=None, type: DatasourceType=None, update_timeout: int=None):
        """Datasource - a model defined in OpenAPI

        :param description: The description of this Datasource.
        :param enabled: The enabled of this Datasource.
        :param id: The id of this Datasource.
        :param name: The name of this Datasource.
        :param run_parameters: The run_parameters of this Datasource.
        :param type: The type of this Datasource.
        :param update_timeout: The update_timeout of this Datasource.
        """
        self.openapi_types = {
            'description': str,
            'enabled': bool,
            'id': str,
            'name': str,
            'run_parameters': DatasourceRunParameters,
            'type': DatasourceType,
            'update_timeout': int
        }

        self.attribute_map = {
            'description': 'description',
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'run_parameters': 'runParameters',
            'type': 'type',
            'update_timeout': 'updateTimeout'
        }

        self._description = description
        self._enabled = enabled
        self._id = id
        self._name = name
        self._run_parameters = run_parameters
        self._type = type
        self._update_timeout = update_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Datasource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The datasource of this Datasource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Datasource.

        Description of the goal of the data source to create.

        :return: The description of this Datasource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Datasource.

        Description of the goal of the data source to create.

        :param description: The description of this Datasource.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this Datasource.

        Enable or disable data source.

        :return: The enabled of this Datasource.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Datasource.

        Enable or disable data source.

        :param enabled: The enabled of this Datasource.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this Datasource.

        Unique identifier of the data source to create.

        :return: The id of this Datasource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Datasource.

        Unique identifier of the data source to create.

        :param id: The id of this Datasource.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Datasource.

        The human readable name of the data source to create.

        :return: The name of this Datasource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Datasource.

        The human readable name of the data source to create.

        :param name: The name of this Datasource.
        :type name: str
        """

        self._name = name

    @property
    def run_parameters(self):
        """Gets the run_parameters of this Datasource.


        :return: The run_parameters of this Datasource.
        :rtype: DatasourceRunParameters
        """
        return self._run_parameters

    @run_parameters.setter
    def run_parameters(self, run_parameters):
        """Sets the run_parameters of this Datasource.


        :param run_parameters: The run_parameters of this Datasource.
        :type run_parameters: DatasourceRunParameters
        """

        self._run_parameters = run_parameters

    @property
    def type(self):
        """Gets the type of this Datasource.


        :return: The type of this Datasource.
        :rtype: DatasourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Datasource.


        :param type: The type of this Datasource.
        :type type: DatasourceType
        """

        self._type = type

    @property
    def update_timeout(self):
        """Gets the update_timeout of this Datasource.

        Duration in seconds before aborting data source update. The main goal is to prevent never ending requests. If a periodicity if configured, you should set that timeout at a lower value.

        :return: The update_timeout of this Datasource.
        :rtype: int
        """
        return self._update_timeout

    @update_timeout.setter
    def update_timeout(self, update_timeout):
        """Sets the update_timeout of this Datasource.

        Duration in seconds before aborting data source update. The main goal is to prevent never ending requests. If a periodicity if configured, you should set that timeout at a lower value.

        :param update_timeout: The update_timeout of this Datasource.
        :type update_timeout: int
        """

        self._update_timeout = update_timeout
