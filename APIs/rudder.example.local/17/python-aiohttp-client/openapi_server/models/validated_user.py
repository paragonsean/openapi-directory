# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidatedUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_validated: bool=None, user_exists: bool=None, username: str=None):
        """ValidatedUser - a model defined in OpenAPI

        :param is_validated: The is_validated of this ValidatedUser.
        :param user_exists: The user_exists of this ValidatedUser.
        :param username: The username of this ValidatedUser.
        """
        self.openapi_types = {
            'is_validated': bool,
            'user_exists': bool,
            'username': str
        }

        self.attribute_map = {
            'is_validated': 'isValidated',
            'user_exists': 'userExists',
            'username': 'username'
        }

        self._is_validated = is_validated
        self._user_exists = user_exists
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidatedUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The validated-user of this ValidatedUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_validated(self):
        """Gets the is_validated of this ValidatedUser.

        whether the user's actions generate chanque-request or not

        :return: The is_validated of this ValidatedUser.
        :rtype: bool
        """
        return self._is_validated

    @is_validated.setter
    def is_validated(self, is_validated):
        """Sets the is_validated of this ValidatedUser.

        whether the user's actions generate chanque-request or not

        :param is_validated: The is_validated of this ValidatedUser.
        :type is_validated: bool
        """
        if is_validated is None:
            raise ValueError("Invalid value for `is_validated`, must not be `None`")

        self._is_validated = is_validated

    @property
    def user_exists(self):
        """Gets the user_exists of this ValidatedUser.

        whether the user exists in file or not

        :return: The user_exists of this ValidatedUser.
        :rtype: bool
        """
        return self._user_exists

    @user_exists.setter
    def user_exists(self, user_exists):
        """Sets the user_exists of this ValidatedUser.

        whether the user exists in file or not

        :param user_exists: The user_exists of this ValidatedUser.
        :type user_exists: bool
        """
        if user_exists is None:
            raise ValueError("Invalid value for `user_exists`, must not be `None`")

        self._user_exists = user_exists

    @property
    def username(self):
        """Gets the username of this ValidatedUser.


        :return: The username of this ValidatedUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ValidatedUser.


        :param username: The username of this ValidatedUser.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
