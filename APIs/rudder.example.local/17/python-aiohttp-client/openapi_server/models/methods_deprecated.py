# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MethodsDeprecated(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, info: str=None, replaced_by: str=None):
        """MethodsDeprecated - a model defined in OpenAPI

        :param info: The info of this MethodsDeprecated.
        :param replaced_by: The replaced_by of this MethodsDeprecated.
        """
        self.openapi_types = {
            'info': str,
            'replaced_by': str
        }

        self.attribute_map = {
            'info': 'info',
            'replaced_by': 'replacedBy'
        }

        self._info = info
        self._replaced_by = replaced_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MethodsDeprecated':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The methods_deprecated of this MethodsDeprecated.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def info(self):
        """Gets the info of this MethodsDeprecated.

        Information notice about the deprecation, especially how to replace it

        :return: The info of this MethodsDeprecated.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this MethodsDeprecated.

        Information notice about the deprecation, especially how to replace it

        :param info: The info of this MethodsDeprecated.
        :type info: str
        """

        self._info = info

    @property
    def replaced_by(self):
        """Gets the replaced_by of this MethodsDeprecated.

        Id of the method replacing this method

        :return: The replaced_by of this MethodsDeprecated.
        :rtype: str
        """
        return self._replaced_by

    @replaced_by.setter
    def replaced_by(self, replaced_by):
        """Sets the replaced_by of this MethodsDeprecated.

        Id of the method replacing this method

        :param replaced_by: The replaced_by of this MethodsDeprecated.
        :type replaced_by: str
        """

        self._replaced_by = replaced_by
