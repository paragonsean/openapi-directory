# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MethodsCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter: str=None, prefix: str=None):
        """MethodsCondition - a model defined in OpenAPI

        :param parameter: The parameter of this MethodsCondition.
        :param prefix: The prefix of this MethodsCondition.
        """
        self.openapi_types = {
            'parameter': str,
            'prefix': str
        }

        self.attribute_map = {
            'parameter': 'parameter',
            'prefix': 'prefix'
        }

        self._parameter = parameter
        self._prefix = prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MethodsCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The methods_condition of this MethodsCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter(self):
        """Gets the parameter of this MethodsCondition.

        Id of the parameter used to generate condition

        :return: The parameter of this MethodsCondition.
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this MethodsCondition.

        Id of the parameter used to generate condition

        :param parameter: The parameter of this MethodsCondition.
        :type parameter: str
        """

        self._parameter = parameter

    @property
    def prefix(self):
        """Gets the prefix of this MethodsCondition.

        Prefix used to generate condition

        :return: The prefix of this MethodsCondition.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this MethodsCondition.

        Prefix used to generate condition

        :param prefix: The prefix of this MethodsCondition.
        :type prefix: str
        """

        self._prefix = prefix
