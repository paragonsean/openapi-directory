# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Os(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, name: str=None, service_pack: str=None, type: str=None, version: str=None):
        """Os - a model defined in OpenAPI

        :param full_name: The full_name of this Os.
        :param name: The name of this Os.
        :param service_pack: The service_pack of this Os.
        :param type: The type of this Os.
        :param version: The version of this Os.
        """
        self.openapi_types = {
            'full_name': str,
            'name': str,
            'service_pack': str,
            'type': str,
            'version': str
        }

        self.attribute_map = {
            'full_name': 'fullName',
            'name': 'name',
            'service_pack': 'servicePack',
            'type': 'type',
            'version': 'version'
        }

        self._full_name = full_name
        self._name = name
        self._service_pack = service_pack
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Os':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The os of this Os.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this Os.

        The long description name of the os

        :return: The full_name of this Os.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Os.

        The long description name of the os

        :param full_name: The full_name of this Os.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def name(self):
        """Gets the name of this Os.

        For Linux, a distribution, for Windows, the commercial name

        :return: The name of this Os.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Os.

        For Linux, a distribution, for Windows, the commercial name

        :param name: The name of this Os.
        :type name: str
        """
        allowed_values = ["debian", "kali", "ubuntu", "redhat", "centos", "fedora", "suse", "oracle", "scientific", "slackware", "xp", "vista", "seven", "10", "2000", "2003", "2008 r2", "2012", "2012 r2", "2016"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def service_pack(self):
        """Gets the service_pack of this Os.

        a service pack informationnal string

        :return: The service_pack of this Os.
        :rtype: str
        """
        return self._service_pack

    @service_pack.setter
    def service_pack(self, service_pack):
        """Sets the service_pack of this Os.

        a service pack informationnal string

        :param service_pack: The service_pack of this Os.
        :type service_pack: str
        """

        self._service_pack = service_pack

    @property
    def type(self):
        """Gets the type of this Os.


        :return: The type of this Os.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Os.


        :param type: The type of this Os.
        :type type: str
        """
        allowed_values = ["linux", "windows", "solaris", "aix", "freebsd", "unknown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """Gets the version of this Os.

        A string representation of the version

        :return: The version of this Os.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Os.

        A string representation of the version

        :param version: The version of this Os.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
