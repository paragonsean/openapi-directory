# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetRole200ResponseDataInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, rights: List[str]=None):
        """GetRole200ResponseDataInner - a model defined in OpenAPI

        :param id: The id of this GetRole200ResponseDataInner.
        :param rights: The rights of this GetRole200ResponseDataInner.
        """
        self.openapi_types = {
            'id': str,
            'rights': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'rights': 'rights'
        }

        self._id = id
        self._rights = rights

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRole200ResponseDataInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getRole_200_response_data_inner of this GetRole200ResponseDataInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GetRole200ResponseDataInner.

        Name of the role

        :return: The id of this GetRole200ResponseDataInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetRole200ResponseDataInner.

        Name of the role

        :param id: The id of this GetRole200ResponseDataInner.
        :type id: str
        """
        allowed_values = ["inventory", "compliance", "administrator", "etc"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def rights(self):
        """Gets the rights of this GetRole200ResponseDataInner.

        Role's rights

        :return: The rights of this GetRole200ResponseDataInner.
        :rtype: List[str]
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this GetRole200ResponseDataInner.

        Role's rights

        :param rights: The rights of this GetRole200ResponseDataInner.
        :type rights: List[str]
        """
        allowed_values = ["node_read", "userAccount_all"]  # noqa: E501
        if not set(rights).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `rights` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(rights) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._rights = rights
