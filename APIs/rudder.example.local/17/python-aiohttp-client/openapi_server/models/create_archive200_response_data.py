# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_archives200_response_data_full_inner import ListArchives200ResponseDataFullInner
from openapi_server import util


class CreateArchive200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full: ListArchives200ResponseDataFullInner=None):
        """CreateArchive200ResponseData - a model defined in OpenAPI

        :param full: The full of this CreateArchive200ResponseData.
        """
        self.openapi_types = {
            'full': ListArchives200ResponseDataFullInner
        }

        self.attribute_map = {
            'full': 'full'
        }

        self._full = full

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateArchive200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createArchive_200_response_data of this CreateArchive200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full(self):
        """Gets the full of this CreateArchive200ResponseData.


        :return: The full of this CreateArchive200ResponseData.
        :rtype: ListArchives200ResponseDataFullInner
        """
        return self._full

    @full.setter
    def full(self, full):
        """Sets the full of this CreateArchive200ResponseData.


        :param full: The full of this CreateArchive200ResponseData.
        :type full: ListArchives200ResponseDataFullInner
        """
        if full is None:
            raise ValueError("Invalid value for `full`, must not be `None`")

        self._full = full
