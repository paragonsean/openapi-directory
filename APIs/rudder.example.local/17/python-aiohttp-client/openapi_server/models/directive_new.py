# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directive_tags_inner import DirectiveTagsInner
from openapi_server import util


class DirectiveNew(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, enabled: bool=None, id: str=None, long_description: str=None, parameters: object=None, priority: int=None, short_description: str=None, source: str=None, system: bool=None, tags: List[DirectiveTagsInner]=None, technique_name: str=None, technique_version: str=None):
        """DirectiveNew - a model defined in OpenAPI

        :param display_name: The display_name of this DirectiveNew.
        :param enabled: The enabled of this DirectiveNew.
        :param id: The id of this DirectiveNew.
        :param long_description: The long_description of this DirectiveNew.
        :param parameters: The parameters of this DirectiveNew.
        :param priority: The priority of this DirectiveNew.
        :param short_description: The short_description of this DirectiveNew.
        :param source: The source of this DirectiveNew.
        :param system: The system of this DirectiveNew.
        :param tags: The tags of this DirectiveNew.
        :param technique_name: The technique_name of this DirectiveNew.
        :param technique_version: The technique_version of this DirectiveNew.
        """
        self.openapi_types = {
            'display_name': str,
            'enabled': bool,
            'id': str,
            'long_description': str,
            'parameters': object,
            'priority': int,
            'short_description': str,
            'source': str,
            'system': bool,
            'tags': List[DirectiveTagsInner],
            'technique_name': str,
            'technique_version': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'enabled': 'enabled',
            'id': 'id',
            'long_description': 'longDescription',
            'parameters': 'parameters',
            'priority': 'priority',
            'short_description': 'shortDescription',
            'source': 'source',
            'system': 'system',
            'tags': 'tags',
            'technique_name': 'techniqueName',
            'technique_version': 'techniqueVersion'
        }

        self._display_name = display_name
        self._enabled = enabled
        self._id = id
        self._long_description = long_description
        self._parameters = parameters
        self._priority = priority
        self._short_description = short_description
        self._source = source
        self._system = system
        self._tags = tags
        self._technique_name = technique_name
        self._technique_version = technique_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DirectiveNew':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The directive-new of this DirectiveNew.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this DirectiveNew.

        Human readable name of the directive

        :return: The display_name of this DirectiveNew.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DirectiveNew.

        Human readable name of the directive

        :param display_name: The display_name of this DirectiveNew.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enabled(self):
        """Gets the enabled of this DirectiveNew.

        Is the directive enabled

        :return: The enabled of this DirectiveNew.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DirectiveNew.

        Is the directive enabled

        :param enabled: The enabled of this DirectiveNew.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this DirectiveNew.

        Directive id

        :return: The id of this DirectiveNew.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DirectiveNew.

        Directive id

        :param id: The id of this DirectiveNew.
        :type id: str
        """

        self._id = id

    @property
    def long_description(self):
        """Gets the long_description of this DirectiveNew.

        Description of the technique (rendered as markdown)

        :return: The long_description of this DirectiveNew.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this DirectiveNew.

        Description of the technique (rendered as markdown)

        :param long_description: The long_description of this DirectiveNew.
        :type long_description: str
        """

        self._long_description = long_description

    @property
    def parameters(self):
        """Gets the parameters of this DirectiveNew.

        Directive parameters (depends on the source technique)

        :return: The parameters of this DirectiveNew.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DirectiveNew.

        Directive parameters (depends on the source technique)

        :param parameters: The parameters of this DirectiveNew.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def priority(self):
        """Gets the priority of this DirectiveNew.

        Directive priority. `0` has highest priority.

        :return: The priority of this DirectiveNew.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this DirectiveNew.

        Directive priority. `0` has highest priority.

        :param priority: The priority of this DirectiveNew.
        :type priority: int
        """
        if priority is not None and priority > 10:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `10`")
        if priority is not None and priority < 0:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")

        self._priority = priority

    @property
    def short_description(self):
        """Gets the short_description of this DirectiveNew.

        One line directive description

        :return: The short_description of this DirectiveNew.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this DirectiveNew.

        One line directive description

        :param short_description: The short_description of this DirectiveNew.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def source(self):
        """Gets the source of this DirectiveNew.

        The id of the directive the clone will be based onto. If this parameter if provided,  the new directive will be a clone of this source. Other value will override values from the source.

        :return: The source of this DirectiveNew.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DirectiveNew.

        The id of the directive the clone will be based onto. If this parameter if provided,  the new directive will be a clone of this source. Other value will override values from the source.

        :param source: The source of this DirectiveNew.
        :type source: str
        """

        self._source = source

    @property
    def system(self):
        """Gets the system of this DirectiveNew.

        If true it is an internal Rudder directive

        :return: The system of this DirectiveNew.
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this DirectiveNew.

        If true it is an internal Rudder directive

        :param system: The system of this DirectiveNew.
        :type system: bool
        """

        self._system = system

    @property
    def tags(self):
        """Gets the tags of this DirectiveNew.


        :return: The tags of this DirectiveNew.
        :rtype: List[DirectiveTagsInner]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DirectiveNew.


        :param tags: The tags of this DirectiveNew.
        :type tags: List[DirectiveTagsInner]
        """

        self._tags = tags

    @property
    def technique_name(self):
        """Gets the technique_name of this DirectiveNew.

        Directive id

        :return: The technique_name of this DirectiveNew.
        :rtype: str
        """
        return self._technique_name

    @technique_name.setter
    def technique_name(self, technique_name):
        """Sets the technique_name of this DirectiveNew.

        Directive id

        :param technique_name: The technique_name of this DirectiveNew.
        :type technique_name: str
        """

        self._technique_name = technique_name

    @property
    def technique_version(self):
        """Gets the technique_version of this DirectiveNew.

        Directive id

        :return: The technique_version of this DirectiveNew.
        :rtype: str
        """
        return self._technique_version

    @technique_version.setter
    def technique_version(self, technique_version):
        """Sets the technique_version of this DirectiveNew.

        Directive id

        :param technique_version: The technique_version of this DirectiveNew.
        :type technique_version: str
        """

        self._technique_version = technique_version
