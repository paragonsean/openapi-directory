# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_request_changes import ChangeRequestChanges
from openapi_server import util


class ChangeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acceptable: bool=None, changes: ChangeRequestChanges=None, created_by: str=None, description: str=None, id: int=None, name: str=None, status: str=None):
        """ChangeRequest - a model defined in OpenAPI

        :param acceptable: The acceptable of this ChangeRequest.
        :param changes: The changes of this ChangeRequest.
        :param created_by: The created_by of this ChangeRequest.
        :param description: The description of this ChangeRequest.
        :param id: The id of this ChangeRequest.
        :param name: The name of this ChangeRequest.
        :param status: The status of this ChangeRequest.
        """
        self.openapi_types = {
            'acceptable': bool,
            'changes': ChangeRequestChanges,
            'created_by': str,
            'description': str,
            'id': int,
            'name': str,
            'status': str
        }

        self.attribute_map = {
            'acceptable': 'acceptable',
            'changes': 'changes',
            'created_by': 'created by',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'status': 'status'
        }

        self._acceptable = acceptable
        self._changes = changes
        self._created_by = created_by
        self._description = description
        self._id = id
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The change-request of this ChangeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acceptable(self):
        """Gets the acceptable of this ChangeRequest.


        :return: The acceptable of this ChangeRequest.
        :rtype: bool
        """
        return self._acceptable

    @acceptable.setter
    def acceptable(self, acceptable):
        """Sets the acceptable of this ChangeRequest.


        :param acceptable: The acceptable of this ChangeRequest.
        :type acceptable: bool
        """

        self._acceptable = acceptable

    @property
    def changes(self):
        """Gets the changes of this ChangeRequest.


        :return: The changes of this ChangeRequest.
        :rtype: ChangeRequestChanges
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this ChangeRequest.


        :param changes: The changes of this ChangeRequest.
        :type changes: ChangeRequestChanges
        """

        self._changes = changes

    @property
    def created_by(self):
        """Gets the created_by of this ChangeRequest.


        :return: The created_by of this ChangeRequest.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ChangeRequest.


        :param created_by: The created_by of this ChangeRequest.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this ChangeRequest.


        :return: The description of this ChangeRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChangeRequest.


        :param description: The description of this ChangeRequest.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ChangeRequest.


        :return: The id of this ChangeRequest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChangeRequest.


        :param id: The id of this ChangeRequest.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ChangeRequest.


        :return: The name of this ChangeRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChangeRequest.


        :param name: The name of this ChangeRequest.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this ChangeRequest.


        :return: The status of this ChangeRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChangeRequest.


        :param status: The status of this ChangeRequest.
        :type status: str
        """
        allowed_values = ["Deployed", "Pending deployment", "Cancelled", "Pending validation", "Open"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
