# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_new_query import GroupNewQuery
from openapi_server.models.group_properties_inner import GroupPropertiesInner
from openapi_server import util


class GroupNew(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, description: str=None, display_name: str=None, dynamic: bool=True, enabled: bool=True, id: str=None, properties: List[GroupPropertiesInner]=None, query: GroupNewQuery=None, source: str=None):
        """GroupNew - a model defined in OpenAPI

        :param category: The category of this GroupNew.
        :param description: The description of this GroupNew.
        :param display_name: The display_name of this GroupNew.
        :param dynamic: The dynamic of this GroupNew.
        :param enabled: The enabled of this GroupNew.
        :param id: The id of this GroupNew.
        :param properties: The properties of this GroupNew.
        :param query: The query of this GroupNew.
        :param source: The source of this GroupNew.
        """
        self.openapi_types = {
            'category': str,
            'description': str,
            'display_name': str,
            'dynamic': bool,
            'enabled': bool,
            'id': str,
            'properties': List[GroupPropertiesInner],
            'query': GroupNewQuery,
            'source': str
        }

        self.attribute_map = {
            'category': 'category',
            'description': 'description',
            'display_name': 'displayName',
            'dynamic': 'dynamic',
            'enabled': 'enabled',
            'id': 'id',
            'properties': 'properties',
            'query': 'query',
            'source': 'source'
        }

        self._category = category
        self._description = description
        self._display_name = display_name
        self._dynamic = dynamic
        self._enabled = enabled
        self._id = id
        self._properties = properties
        self._query = query
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupNew':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The group-new of this GroupNew.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this GroupNew.

        Id of the new group's category

        :return: The category of this GroupNew.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this GroupNew.

        Id of the new group's category

        :param category: The category of this GroupNew.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def description(self):
        """Gets the description of this GroupNew.

        Group description

        :return: The description of this GroupNew.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GroupNew.

        Group description

        :param description: The description of this GroupNew.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GroupNew.

        Name of the group

        :return: The display_name of this GroupNew.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GroupNew.

        Name of the group

        :param display_name: The display_name of this GroupNew.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def dynamic(self):
        """Gets the dynamic of this GroupNew.

        Should the group be dynamically refreshed (if not, it is a static group)

        :return: The dynamic of this GroupNew.
        :rtype: bool
        """
        return self._dynamic

    @dynamic.setter
    def dynamic(self, dynamic):
        """Sets the dynamic of this GroupNew.

        Should the group be dynamically refreshed (if not, it is a static group)

        :param dynamic: The dynamic of this GroupNew.
        :type dynamic: bool
        """

        self._dynamic = dynamic

    @property
    def enabled(self):
        """Gets the enabled of this GroupNew.

        Enable or disable the group

        :return: The enabled of this GroupNew.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GroupNew.

        Enable or disable the group

        :param enabled: The enabled of this GroupNew.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this GroupNew.

        Group id, only provide it when needed.

        :return: The id of this GroupNew.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupNew.

        Group id, only provide it when needed.

        :param id: The id of this GroupNew.
        :type id: str
        """

        self._id = id

    @property
    def properties(self):
        """Gets the properties of this GroupNew.

        Group properties

        :return: The properties of this GroupNew.
        :rtype: List[GroupPropertiesInner]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this GroupNew.

        Group properties

        :param properties: The properties of this GroupNew.
        :type properties: List[GroupPropertiesInner]
        """

        self._properties = properties

    @property
    def query(self):
        """Gets the query of this GroupNew.


        :return: The query of this GroupNew.
        :rtype: GroupNewQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this GroupNew.


        :param query: The query of this GroupNew.
        :type query: GroupNewQuery
        """

        self._query = query

    @property
    def source(self):
        """Gets the source of this GroupNew.

        The id of the group the clone will be based onto. If this parameter if provided,  the new group will be a clone of this source. Other value will override values from the source.

        :return: The source of this GroupNew.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this GroupNew.

        The id of the group the clone will be based onto. If this parameter if provided,  the new group will be a clone of this source. Other value will override values from the source.

        :param source: The source of this GroupNew.
        :type source: str
        """

        self._source = source
