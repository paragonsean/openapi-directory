# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Color(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alpha: float=None, blue: float=None, green: float=None, red: float=None):
        """Color - a model defined in OpenAPI

        :param alpha: The alpha of this Color.
        :param blue: The blue of this Color.
        :param green: The green of this Color.
        :param red: The red of this Color.
        """
        self.openapi_types = {
            'alpha': float,
            'blue': float,
            'green': float,
            'red': float
        }

        self.attribute_map = {
            'alpha': 'alpha',
            'blue': 'blue',
            'green': 'green',
            'red': 'red'
        }

        self._alpha = alpha
        self._blue = blue
        self._green = green
        self._red = red

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Color':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The color of this Color.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alpha(self):
        """Gets the alpha of this Color.

        percentage of opacity

        :return: The alpha of this Color.
        :rtype: float
        """
        return self._alpha

    @alpha.setter
    def alpha(self, alpha):
        """Sets the alpha of this Color.

        percentage of opacity

        :param alpha: The alpha of this Color.
        :type alpha: float
        """
        if alpha is None:
            raise ValueError("Invalid value for `alpha`, must not be `None`")
        if alpha is not None and alpha > 1:
            raise ValueError("Invalid value for `alpha`, must be a value less than or equal to `1`")
        if alpha is not None and alpha < 0:
            raise ValueError("Invalid value for `alpha`, must be a value greater than or equal to `0`")

        self._alpha = alpha

    @property
    def blue(self):
        """Gets the blue of this Color.

        percentage of blue component

        :return: The blue of this Color.
        :rtype: float
        """
        return self._blue

    @blue.setter
    def blue(self, blue):
        """Sets the blue of this Color.

        percentage of blue component

        :param blue: The blue of this Color.
        :type blue: float
        """
        if blue is None:
            raise ValueError("Invalid value for `blue`, must not be `None`")
        if blue is not None and blue > 1:
            raise ValueError("Invalid value for `blue`, must be a value less than or equal to `1`")
        if blue is not None and blue < 0:
            raise ValueError("Invalid value for `blue`, must be a value greater than or equal to `0`")

        self._blue = blue

    @property
    def green(self):
        """Gets the green of this Color.

        percentage of green component

        :return: The green of this Color.
        :rtype: float
        """
        return self._green

    @green.setter
    def green(self, green):
        """Sets the green of this Color.

        percentage of green component

        :param green: The green of this Color.
        :type green: float
        """
        if green is None:
            raise ValueError("Invalid value for `green`, must not be `None`")
        if green is not None and green > 1:
            raise ValueError("Invalid value for `green`, must be a value less than or equal to `1`")
        if green is not None and green < 0:
            raise ValueError("Invalid value for `green`, must be a value greater than or equal to `0`")

        self._green = green

    @property
    def red(self):
        """Gets the red of this Color.

        percentage of red component

        :return: The red of this Color.
        :rtype: float
        """
        return self._red

    @red.setter
    def red(self, red):
        """Sets the red of this Color.

        percentage of red component

        :param red: The red of this Color.
        :type red: float
        """
        if red is None:
            raise ValueError("Invalid value for `red`, must not be `None`")
        if red is not None and red > 1:
            raise ValueError("Invalid value for `red`, must be a value less than or equal to `1`")
        if red is not None and red < 0:
            raise ValueError("Invalid value for `red`, must be a value greater than or equal to `0`")

        self._red = red
