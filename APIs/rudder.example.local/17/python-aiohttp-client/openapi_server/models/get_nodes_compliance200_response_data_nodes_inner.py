# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_global_compliance200_response_data_global_compliance_compliance_details import GetGlobalCompliance200ResponseDataGlobalComplianceComplianceDetails
from openapi_server import util


class GetNodesCompliance200ResponseDataNodesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compliance: float=None, compliance_details: GetGlobalCompliance200ResponseDataGlobalComplianceComplianceDetails=None, id: str=None, mode: str=None):
        """GetNodesCompliance200ResponseDataNodesInner - a model defined in OpenAPI

        :param compliance: The compliance of this GetNodesCompliance200ResponseDataNodesInner.
        :param compliance_details: The compliance_details of this GetNodesCompliance200ResponseDataNodesInner.
        :param id: The id of this GetNodesCompliance200ResponseDataNodesInner.
        :param mode: The mode of this GetNodesCompliance200ResponseDataNodesInner.
        """
        self.openapi_types = {
            'compliance': float,
            'compliance_details': GetGlobalCompliance200ResponseDataGlobalComplianceComplianceDetails,
            'id': str,
            'mode': str
        }

        self.attribute_map = {
            'compliance': 'compliance',
            'compliance_details': 'complianceDetails',
            'id': 'id',
            'mode': 'mode'
        }

        self._compliance = compliance
        self._compliance_details = compliance_details
        self._id = id
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNodesCompliance200ResponseDataNodesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNodesCompliance_200_response_data_nodes_inner of this GetNodesCompliance200ResponseDataNodesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compliance(self):
        """Gets the compliance of this GetNodesCompliance200ResponseDataNodesInner.

        Rule compliance level

        :return: The compliance of this GetNodesCompliance200ResponseDataNodesInner.
        :rtype: float
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this GetNodesCompliance200ResponseDataNodesInner.

        Rule compliance level

        :param compliance: The compliance of this GetNodesCompliance200ResponseDataNodesInner.
        :type compliance: float
        """
        if compliance is None:
            raise ValueError("Invalid value for `compliance`, must not be `None`")

        self._compliance = compliance

    @property
    def compliance_details(self):
        """Gets the compliance_details of this GetNodesCompliance200ResponseDataNodesInner.


        :return: The compliance_details of this GetNodesCompliance200ResponseDataNodesInner.
        :rtype: GetGlobalCompliance200ResponseDataGlobalComplianceComplianceDetails
        """
        return self._compliance_details

    @compliance_details.setter
    def compliance_details(self, compliance_details):
        """Sets the compliance_details of this GetNodesCompliance200ResponseDataNodesInner.


        :param compliance_details: The compliance_details of this GetNodesCompliance200ResponseDataNodesInner.
        :type compliance_details: GetGlobalCompliance200ResponseDataGlobalComplianceComplianceDetails
        """
        if compliance_details is None:
            raise ValueError("Invalid value for `compliance_details`, must not be `None`")

        self._compliance_details = compliance_details

    @property
    def id(self):
        """Gets the id of this GetNodesCompliance200ResponseDataNodesInner.

        id of the node

        :return: The id of this GetNodesCompliance200ResponseDataNodesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetNodesCompliance200ResponseDataNodesInner.

        id of the node

        :param id: The id of this GetNodesCompliance200ResponseDataNodesInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def mode(self):
        """Gets the mode of this GetNodesCompliance200ResponseDataNodesInner.


        :return: The mode of this GetNodesCompliance200ResponseDataNodesInner.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GetNodesCompliance200ResponseDataNodesInner.


        :param mode: The mode of this GetNodesCompliance200ResponseDataNodesInner.
        :type mode: str
        """
        allowed_values = ["full-compliance", "changes-only", "reports-disabled"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
