# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_nodes_compliance200_response_data_nodes_inner import GetNodesCompliance200ResponseDataNodesInner
from openapi_server import util


class GetNodesCompliance200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodes: List[GetNodesCompliance200ResponseDataNodesInner]=None):
        """GetNodesCompliance200ResponseData - a model defined in OpenAPI

        :param nodes: The nodes of this GetNodesCompliance200ResponseData.
        """
        self.openapi_types = {
            'nodes': List[GetNodesCompliance200ResponseDataNodesInner]
        }

        self.attribute_map = {
            'nodes': 'nodes'
        }

        self._nodes = nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNodesCompliance200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNodesCompliance_200_response_data of this GetNodesCompliance200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self):
        """Gets the nodes of this GetNodesCompliance200ResponseData.


        :return: The nodes of this GetNodesCompliance200ResponseData.
        :rtype: List[GetNodesCompliance200ResponseDataNodesInner]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this GetNodesCompliance200ResponseData.


        :param nodes: The nodes of this GetNodesCompliance200ResponseData.
        :type nodes: List[GetNodesCompliance200ResponseDataNodesInner]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")

        self._nodes = nodes
