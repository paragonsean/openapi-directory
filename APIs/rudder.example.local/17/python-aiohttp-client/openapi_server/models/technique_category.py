# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TechniqueCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, path: str=None, subcategories: List[TechniqueCategory]=None):
        """TechniqueCategory - a model defined in OpenAPI

        :param id: The id of this TechniqueCategory.
        :param name: The name of this TechniqueCategory.
        :param path: The path of this TechniqueCategory.
        :param subcategories: The subcategories of this TechniqueCategory.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'path': str,
            'subcategories': List[TechniqueCategory]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'path': 'path',
            'subcategories': 'subcategories'
        }

        self._id = id
        self._name = name
        self._path = path
        self._subcategories = subcategories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TechniqueCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The technique-category of this TechniqueCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TechniqueCategory.

        Category ID

        :return: The id of this TechniqueCategory.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TechniqueCategory.

        Category ID

        :param id: The id of this TechniqueCategory.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this TechniqueCategory.

        Category's name

        :return: The name of this TechniqueCategory.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TechniqueCategory.

        Category's name

        :param name: The name of this TechniqueCategory.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this TechniqueCategory.

        Category's path

        :return: The path of this TechniqueCategory.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this TechniqueCategory.

        Category's path

        :param path: The path of this TechniqueCategory.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def subcategories(self):
        """Gets the subcategories of this TechniqueCategory.

        List of sub categories

        :return: The subcategories of this TechniqueCategory.
        :rtype: List[TechniqueCategory]
        """
        return self._subcategories

    @subcategories.setter
    def subcategories(self, subcategories):
        """Sets the subcategories of this TechniqueCategory.

        List of sub categories

        :param subcategories: The subcategories of this TechniqueCategory.
        :type subcategories: List[TechniqueCategory]
        """
        if subcategories is None:
            raise ValueError("Invalid value for `subcategories`, must not be `None`")

        self._subcategories = subcategories
