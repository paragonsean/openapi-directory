# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_add_inner_properties_inner import NodeAddInnerPropertiesInner
from openapi_server.models.node_full_bios import NodeFullBios
from openapi_server.models.node_full_controllers_inner import NodeFullControllersInner
from openapi_server.models.node_full_environment_variables_inner import NodeFullEnvironmentVariablesInner
from openapi_server.models.node_full_file_systems_inner import NodeFullFileSystemsInner
from openapi_server.models.node_full_machine import NodeFullMachine
from openapi_server.models.node_full_management_technology_details import NodeFullManagementTechnologyDetails
from openapi_server.models.node_full_management_technology_inner import NodeFullManagementTechnologyInner
from openapi_server.models.node_full_memories_inner import NodeFullMemoriesInner
from openapi_server.models.node_full_network_interfaces_inner import NodeFullNetworkInterfacesInner
from openapi_server.models.node_full_os import NodeFullOs
from openapi_server.models.node_full_ports_inner import NodeFullPortsInner
from openapi_server.models.node_full_processes_inner import NodeFullProcessesInner
from openapi_server.models.node_full_processors_inner import NodeFullProcessorsInner
from openapi_server.models.node_full_slots_inner import NodeFullSlotsInner
from openapi_server.models.node_full_software_inner import NodeFullSoftwareInner
from openapi_server.models.node_full_software_update_inner import NodeFullSoftwareUpdateInner
from openapi_server.models.node_full_sound_inner import NodeFullSoundInner
from openapi_server.models.node_full_storage_inner import NodeFullStorageInner
from openapi_server.models.node_full_timezone import NodeFullTimezone
from openapi_server.models.node_full_videos_inner import NodeFullVideosInner
from openapi_server.models.node_full_virtual_machines_inner import NodeFullVirtualMachinesInner
from openapi_server import util


class NodeFull(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounts: List[str]=None, architecture_description: str=None, bios: NodeFullBios=None, controllers: List[NodeFullControllersInner]=None, description: str=None, environment_variables: List[NodeFullEnvironmentVariablesInner]=None, file_systems: List[NodeFullFileSystemsInner]=None, hostname: str=None, id: str=None, ip_addresses: List[str]=None, last_inventory_date: date=None, last_run_date: date=None, machine: NodeFullMachine=None, management_technology: List[NodeFullManagementTechnologyInner]=None, management_technology_details: NodeFullManagementTechnologyDetails=None, memories: List[NodeFullMemoriesInner]=None, network_interfaces: List[NodeFullNetworkInterfacesInner]=None, os: NodeFullOs=None, policy_mode: str=None, policy_server_id: str=None, ports: List[NodeFullPortsInner]=None, processes: List[NodeFullProcessesInner]=None, processors: List[NodeFullProcessorsInner]=None, properties: List[NodeAddInnerPropertiesInner]=None, ram: int=None, slots: List[NodeFullSlotsInner]=None, software: List[NodeFullSoftwareInner]=None, software_update: List[NodeFullSoftwareUpdateInner]=None, sound: List[NodeFullSoundInner]=None, status: str=None, storage: List[NodeFullStorageInner]=None, timezone: NodeFullTimezone=None, videos: List[NodeFullVideosInner]=None, virtual_machines: List[NodeFullVirtualMachinesInner]=None):
        """NodeFull - a model defined in OpenAPI

        :param accounts: The accounts of this NodeFull.
        :param architecture_description: The architecture_description of this NodeFull.
        :param bios: The bios of this NodeFull.
        :param controllers: The controllers of this NodeFull.
        :param description: The description of this NodeFull.
        :param environment_variables: The environment_variables of this NodeFull.
        :param file_systems: The file_systems of this NodeFull.
        :param hostname: The hostname of this NodeFull.
        :param id: The id of this NodeFull.
        :param ip_addresses: The ip_addresses of this NodeFull.
        :param last_inventory_date: The last_inventory_date of this NodeFull.
        :param last_run_date: The last_run_date of this NodeFull.
        :param machine: The machine of this NodeFull.
        :param management_technology: The management_technology of this NodeFull.
        :param management_technology_details: The management_technology_details of this NodeFull.
        :param memories: The memories of this NodeFull.
        :param network_interfaces: The network_interfaces of this NodeFull.
        :param os: The os of this NodeFull.
        :param policy_mode: The policy_mode of this NodeFull.
        :param policy_server_id: The policy_server_id of this NodeFull.
        :param ports: The ports of this NodeFull.
        :param processes: The processes of this NodeFull.
        :param processors: The processors of this NodeFull.
        :param properties: The properties of this NodeFull.
        :param ram: The ram of this NodeFull.
        :param slots: The slots of this NodeFull.
        :param software: The software of this NodeFull.
        :param software_update: The software_update of this NodeFull.
        :param sound: The sound of this NodeFull.
        :param status: The status of this NodeFull.
        :param storage: The storage of this NodeFull.
        :param timezone: The timezone of this NodeFull.
        :param videos: The videos of this NodeFull.
        :param virtual_machines: The virtual_machines of this NodeFull.
        """
        self.openapi_types = {
            'accounts': List[str],
            'architecture_description': str,
            'bios': NodeFullBios,
            'controllers': List[NodeFullControllersInner],
            'description': str,
            'environment_variables': List[NodeFullEnvironmentVariablesInner],
            'file_systems': List[NodeFullFileSystemsInner],
            'hostname': str,
            'id': str,
            'ip_addresses': List[str],
            'last_inventory_date': date,
            'last_run_date': date,
            'machine': NodeFullMachine,
            'management_technology': List[NodeFullManagementTechnologyInner],
            'management_technology_details': NodeFullManagementTechnologyDetails,
            'memories': List[NodeFullMemoriesInner],
            'network_interfaces': List[NodeFullNetworkInterfacesInner],
            'os': NodeFullOs,
            'policy_mode': str,
            'policy_server_id': str,
            'ports': List[NodeFullPortsInner],
            'processes': List[NodeFullProcessesInner],
            'processors': List[NodeFullProcessorsInner],
            'properties': List[NodeAddInnerPropertiesInner],
            'ram': int,
            'slots': List[NodeFullSlotsInner],
            'software': List[NodeFullSoftwareInner],
            'software_update': List[NodeFullSoftwareUpdateInner],
            'sound': List[NodeFullSoundInner],
            'status': str,
            'storage': List[NodeFullStorageInner],
            'timezone': NodeFullTimezone,
            'videos': List[NodeFullVideosInner],
            'virtual_machines': List[NodeFullVirtualMachinesInner]
        }

        self.attribute_map = {
            'accounts': 'accounts',
            'architecture_description': 'architectureDescription',
            'bios': 'bios',
            'controllers': 'controllers',
            'description': 'description',
            'environment_variables': 'environmentVariables',
            'file_systems': 'fileSystems',
            'hostname': 'hostname',
            'id': 'id',
            'ip_addresses': 'ipAddresses',
            'last_inventory_date': 'lastInventoryDate',
            'last_run_date': 'lastRunDate',
            'machine': 'machine',
            'management_technology': 'managementTechnology',
            'management_technology_details': 'managementTechnologyDetails',
            'memories': 'memories',
            'network_interfaces': 'networkInterfaces',
            'os': 'os',
            'policy_mode': 'policyMode',
            'policy_server_id': 'policyServerId',
            'ports': 'ports',
            'processes': 'processes',
            'processors': 'processors',
            'properties': 'properties',
            'ram': 'ram',
            'slots': 'slots',
            'software': 'software',
            'software_update': 'softwareUpdate',
            'sound': 'sound',
            'status': 'status',
            'storage': 'storage',
            'timezone': 'timezone',
            'videos': 'videos',
            'virtual_machines': 'virtualMachines'
        }

        self._accounts = accounts
        self._architecture_description = architecture_description
        self._bios = bios
        self._controllers = controllers
        self._description = description
        self._environment_variables = environment_variables
        self._file_systems = file_systems
        self._hostname = hostname
        self._id = id
        self._ip_addresses = ip_addresses
        self._last_inventory_date = last_inventory_date
        self._last_run_date = last_run_date
        self._machine = machine
        self._management_technology = management_technology
        self._management_technology_details = management_technology_details
        self._memories = memories
        self._network_interfaces = network_interfaces
        self._os = os
        self._policy_mode = policy_mode
        self._policy_server_id = policy_server_id
        self._ports = ports
        self._processes = processes
        self._processors = processors
        self._properties = properties
        self._ram = ram
        self._slots = slots
        self._software = software
        self._software_update = software_update
        self._sound = sound
        self._status = status
        self._storage = storage
        self._timezone = timezone
        self._videos = videos
        self._virtual_machines = virtual_machines

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeFull':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node-full of this NodeFull.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounts(self):
        """Gets the accounts of this NodeFull.

        User accounts declared in the node

        :return: The accounts of this NodeFull.
        :rtype: List[str]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this NodeFull.

        User accounts declared in the node

        :param accounts: The accounts of this NodeFull.
        :type accounts: List[str]
        """

        self._accounts = accounts

    @property
    def architecture_description(self):
        """Gets the architecture_description of this NodeFull.

        Information about CPU architecture (32/64 bits)

        :return: The architecture_description of this NodeFull.
        :rtype: str
        """
        return self._architecture_description

    @architecture_description.setter
    def architecture_description(self, architecture_description):
        """Sets the architecture_description of this NodeFull.

        Information about CPU architecture (32/64 bits)

        :param architecture_description: The architecture_description of this NodeFull.
        :type architecture_description: str
        """

        self._architecture_description = architecture_description

    @property
    def bios(self):
        """Gets the bios of this NodeFull.


        :return: The bios of this NodeFull.
        :rtype: NodeFullBios
        """
        return self._bios

    @bios.setter
    def bios(self, bios):
        """Sets the bios of this NodeFull.


        :param bios: The bios of this NodeFull.
        :type bios: NodeFullBios
        """

        self._bios = bios

    @property
    def controllers(self):
        """Gets the controllers of this NodeFull.

        Physical controller information

        :return: The controllers of this NodeFull.
        :rtype: List[NodeFullControllersInner]
        """
        return self._controllers

    @controllers.setter
    def controllers(self, controllers):
        """Sets the controllers of this NodeFull.

        Physical controller information

        :param controllers: The controllers of this NodeFull.
        :type controllers: List[NodeFullControllersInner]
        """

        self._controllers = controllers

    @property
    def description(self):
        """Gets the description of this NodeFull.

        A human intended description of the node (not used)

        :return: The description of this NodeFull.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NodeFull.

        A human intended description of the node (not used)

        :param description: The description of this NodeFull.
        :type description: str
        """

        self._description = description

    @property
    def environment_variables(self):
        """Gets the environment_variables of this NodeFull.

        Environment variables defined on the node in the context of the agent

        :return: The environment_variables of this NodeFull.
        :rtype: List[NodeFullEnvironmentVariablesInner]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this NodeFull.

        Environment variables defined on the node in the context of the agent

        :param environment_variables: The environment_variables of this NodeFull.
        :type environment_variables: List[NodeFullEnvironmentVariablesInner]
        """

        self._environment_variables = environment_variables

    @property
    def file_systems(self):
        """Gets the file_systems of this NodeFull.

        File system declared on the node

        :return: The file_systems of this NodeFull.
        :rtype: List[NodeFullFileSystemsInner]
        """
        return self._file_systems

    @file_systems.setter
    def file_systems(self, file_systems):
        """Sets the file_systems of this NodeFull.

        File system declared on the node

        :param file_systems: The file_systems of this NodeFull.
        :type file_systems: List[NodeFullFileSystemsInner]
        """

        self._file_systems = file_systems

    @property
    def hostname(self):
        """Gets the hostname of this NodeFull.

        Fully qualified name of the node

        :return: The hostname of this NodeFull.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this NodeFull.

        Fully qualified name of the node

        :param hostname: The hostname of this NodeFull.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this NodeFull.

        Unique id of the node

        :return: The id of this NodeFull.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeFull.

        Unique id of the node

        :param id: The id of this NodeFull.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this NodeFull.

        IP addresses of the node (IPv4 and IPv6)

        :return: The ip_addresses of this NodeFull.
        :rtype: List[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this NodeFull.

        IP addresses of the node (IPv4 and IPv6)

        :param ip_addresses: The ip_addresses of this NodeFull.
        :type ip_addresses: List[str]
        """
        if ip_addresses is None:
            raise ValueError("Invalid value for `ip_addresses`, must not be `None`")

        self._ip_addresses = ip_addresses

    @property
    def last_inventory_date(self):
        """Gets the last_inventory_date of this NodeFull.

        Date and time of the latest generated inventory, if one is available (node time). Up to API v11, format was: \"YYYY-MM-dd HH:mm\"

        :return: The last_inventory_date of this NodeFull.
        :rtype: date
        """
        return self._last_inventory_date

    @last_inventory_date.setter
    def last_inventory_date(self, last_inventory_date):
        """Sets the last_inventory_date of this NodeFull.

        Date and time of the latest generated inventory, if one is available (node time). Up to API v11, format was: \"YYYY-MM-dd HH:mm\"

        :param last_inventory_date: The last_inventory_date of this NodeFull.
        :type last_inventory_date: date
        """

        self._last_inventory_date = last_inventory_date

    @property
    def last_run_date(self):
        """Gets the last_run_date of this NodeFull.

        Date and time of the latest run, if one is available (node time). Up to API v11, format was: \"YYYY-MM-dd HH:mm\"

        :return: The last_run_date of this NodeFull.
        :rtype: date
        """
        return self._last_run_date

    @last_run_date.setter
    def last_run_date(self, last_run_date):
        """Sets the last_run_date of this NodeFull.

        Date and time of the latest run, if one is available (node time). Up to API v11, format was: \"YYYY-MM-dd HH:mm\"

        :param last_run_date: The last_run_date of this NodeFull.
        :type last_run_date: date
        """

        self._last_run_date = last_run_date

    @property
    def machine(self):
        """Gets the machine of this NodeFull.


        :return: The machine of this NodeFull.
        :rtype: NodeFullMachine
        """
        return self._machine

    @machine.setter
    def machine(self, machine):
        """Sets the machine of this NodeFull.


        :param machine: The machine of this NodeFull.
        :type machine: NodeFullMachine
        """

        self._machine = machine

    @property
    def management_technology(self):
        """Gets the management_technology of this NodeFull.

        Management agents running on the node

        :return: The management_technology of this NodeFull.
        :rtype: List[NodeFullManagementTechnologyInner]
        """
        return self._management_technology

    @management_technology.setter
    def management_technology(self, management_technology):
        """Sets the management_technology of this NodeFull.

        Management agents running on the node

        :param management_technology: The management_technology of this NodeFull.
        :type management_technology: List[NodeFullManagementTechnologyInner]
        """
        if management_technology is None:
            raise ValueError("Invalid value for `management_technology`, must not be `None`")

        self._management_technology = management_technology

    @property
    def management_technology_details(self):
        """Gets the management_technology_details of this NodeFull.


        :return: The management_technology_details of this NodeFull.
        :rtype: NodeFullManagementTechnologyDetails
        """
        return self._management_technology_details

    @management_technology_details.setter
    def management_technology_details(self, management_technology_details):
        """Sets the management_technology_details of this NodeFull.


        :param management_technology_details: The management_technology_details of this NodeFull.
        :type management_technology_details: NodeFullManagementTechnologyDetails
        """

        self._management_technology_details = management_technology_details

    @property
    def memories(self):
        """Gets the memories of this NodeFull.

        Memory slots

        :return: The memories of this NodeFull.
        :rtype: List[NodeFullMemoriesInner]
        """
        return self._memories

    @memories.setter
    def memories(self, memories):
        """Sets the memories of this NodeFull.

        Memory slots

        :param memories: The memories of this NodeFull.
        :type memories: List[NodeFullMemoriesInner]
        """

        self._memories = memories

    @property
    def network_interfaces(self):
        """Gets the network_interfaces of this NodeFull.

        Detailed information about registered network interfaces on the node

        :return: The network_interfaces of this NodeFull.
        :rtype: List[NodeFullNetworkInterfacesInner]
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """Sets the network_interfaces of this NodeFull.

        Detailed information about registered network interfaces on the node

        :param network_interfaces: The network_interfaces of this NodeFull.
        :type network_interfaces: List[NodeFullNetworkInterfacesInner]
        """

        self._network_interfaces = network_interfaces

    @property
    def os(self):
        """Gets the os of this NodeFull.


        :return: The os of this NodeFull.
        :rtype: NodeFullOs
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this NodeFull.


        :param os: The os of this NodeFull.
        :type os: NodeFullOs
        """

        self._os = os

    @property
    def policy_mode(self):
        """Gets the policy_mode of this NodeFull.

        Rudder policy mode for the node (`default` follows the global configuration)

        :return: The policy_mode of this NodeFull.
        :rtype: str
        """
        return self._policy_mode

    @policy_mode.setter
    def policy_mode(self, policy_mode):
        """Sets the policy_mode of this NodeFull.

        Rudder policy mode for the node (`default` follows the global configuration)

        :param policy_mode: The policy_mode of this NodeFull.
        :type policy_mode: str
        """
        allowed_values = ["enforce", "audit", "default"]  # noqa: E501
        if policy_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_mode` ({0}), must be one of {1}"
                .format(policy_mode, allowed_values)
            )

        self._policy_mode = policy_mode

    @property
    def policy_server_id(self):
        """Gets the policy_server_id of this NodeFull.

        Rudder policy server managing the node

        :return: The policy_server_id of this NodeFull.
        :rtype: str
        """
        return self._policy_server_id

    @policy_server_id.setter
    def policy_server_id(self, policy_server_id):
        """Sets the policy_server_id of this NodeFull.

        Rudder policy server managing the node

        :param policy_server_id: The policy_server_id of this NodeFull.
        :type policy_server_id: str
        """
        if policy_server_id is None:
            raise ValueError("Invalid value for `policy_server_id`, must not be `None`")

        self._policy_server_id = policy_server_id

    @property
    def ports(self):
        """Gets the ports of this NodeFull.

        Physical port information objects

        :return: The ports of this NodeFull.
        :rtype: List[NodeFullPortsInner]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this NodeFull.

        Physical port information objects

        :param ports: The ports of this NodeFull.
        :type ports: List[NodeFullPortsInner]
        """

        self._ports = ports

    @property
    def processes(self):
        """Gets the processes of this NodeFull.

        Process running (at inventory time)

        :return: The processes of this NodeFull.
        :rtype: List[NodeFullProcessesInner]
        """
        return self._processes

    @processes.setter
    def processes(self, processes):
        """Sets the processes of this NodeFull.

        Process running (at inventory time)

        :param processes: The processes of this NodeFull.
        :type processes: List[NodeFullProcessesInner]
        """

        self._processes = processes

    @property
    def processors(self):
        """Gets the processors of this NodeFull.

        CPU information

        :return: The processors of this NodeFull.
        :rtype: List[NodeFullProcessorsInner]
        """
        return self._processors

    @processors.setter
    def processors(self, processors):
        """Sets the processors of this NodeFull.

        CPU information

        :param processors: The processors of this NodeFull.
        :type processors: List[NodeFullProcessorsInner]
        """

        self._processors = processors

    @property
    def properties(self):
        """Gets the properties of this NodeFull.

        Node properties (either set by user or filled by third party sources)

        :return: The properties of this NodeFull.
        :rtype: List[NodeAddInnerPropertiesInner]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this NodeFull.

        Node properties (either set by user or filled by third party sources)

        :param properties: The properties of this NodeFull.
        :type properties: List[NodeAddInnerPropertiesInner]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def ram(self):
        """Gets the ram of this NodeFull.

        Size of RAM in MB

        :return: The ram of this NodeFull.
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this NodeFull.

        Size of RAM in MB

        :param ram: The ram of this NodeFull.
        :type ram: int
        """

        self._ram = ram

    @property
    def slots(self):
        """Gets the slots of this NodeFull.

        Physical extension slot information

        :return: The slots of this NodeFull.
        :rtype: List[NodeFullSlotsInner]
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this NodeFull.

        Physical extension slot information

        :param slots: The slots of this NodeFull.
        :type slots: List[NodeFullSlotsInner]
        """

        self._slots = slots

    @property
    def software(self):
        """Gets the software of this NodeFull.

        Software installed on the node (can have thousands items)

        :return: The software of this NodeFull.
        :rtype: List[NodeFullSoftwareInner]
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this NodeFull.

        Software installed on the node (can have thousands items)

        :param software: The software of this NodeFull.
        :type software: List[NodeFullSoftwareInner]
        """

        self._software = software

    @property
    def software_update(self):
        """Gets the software_update of this NodeFull.

        Software that can be updated on that machine

        :return: The software_update of this NodeFull.
        :rtype: List[NodeFullSoftwareUpdateInner]
        """
        return self._software_update

    @software_update.setter
    def software_update(self, software_update):
        """Sets the software_update of this NodeFull.

        Software that can be updated on that machine

        :param software_update: The software_update of this NodeFull.
        :type software_update: List[NodeFullSoftwareUpdateInner]
        """

        self._software_update = software_update

    @property
    def sound(self):
        """Gets the sound of this NodeFull.

        Sound card information

        :return: The sound of this NodeFull.
        :rtype: List[NodeFullSoundInner]
        """
        return self._sound

    @sound.setter
    def sound(self, sound):
        """Sets the sound of this NodeFull.

        Sound card information

        :param sound: The sound of this NodeFull.
        :type sound: List[NodeFullSoundInner]
        """

        self._sound = sound

    @property
    def status(self):
        """Gets the status of this NodeFull.

        Status of the node

        :return: The status of this NodeFull.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NodeFull.

        Status of the node

        :param status: The status of this NodeFull.
        :type status: str
        """
        allowed_values = ["pending", "accepted", "deleted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def storage(self):
        """Gets the storage of this NodeFull.

        Storage (disks) information objects

        :return: The storage of this NodeFull.
        :rtype: List[NodeFullStorageInner]
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this NodeFull.

        Storage (disks) information objects

        :param storage: The storage of this NodeFull.
        :type storage: List[NodeFullStorageInner]
        """

        self._storage = storage

    @property
    def timezone(self):
        """Gets the timezone of this NodeFull.


        :return: The timezone of this NodeFull.
        :rtype: NodeFullTimezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this NodeFull.


        :param timezone: The timezone of this NodeFull.
        :type timezone: NodeFullTimezone
        """

        self._timezone = timezone

    @property
    def videos(self):
        """Gets the videos of this NodeFull.

        Video card information

        :return: The videos of this NodeFull.
        :rtype: List[NodeFullVideosInner]
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this NodeFull.

        Video card information

        :param videos: The videos of this NodeFull.
        :type videos: List[NodeFullVideosInner]
        """

        self._videos = videos

    @property
    def virtual_machines(self):
        """Gets the virtual_machines of this NodeFull.

        Hosted virtual machine information

        :return: The virtual_machines of this NodeFull.
        :rtype: List[NodeFullVirtualMachinesInner]
        """
        return self._virtual_machines

    @virtual_machines.setter
    def virtual_machines(self, virtual_machines):
        """Sets the virtual_machines of this NodeFull.

        Hosted virtual machine information

        :param virtual_machines: The virtual_machines of this NodeFull.
        :type virtual_machines: List[NodeFullVirtualMachinesInner]
        """

        self._virtual_machines = virtual_machines
