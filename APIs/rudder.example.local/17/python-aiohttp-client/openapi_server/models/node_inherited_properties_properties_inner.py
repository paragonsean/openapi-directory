# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_inherited_properties_properties_inner_hierarchy_inner import NodeInheritedPropertiesPropertiesInnerHierarchyInner
from openapi_server import util


class NodeInheritedPropertiesPropertiesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hierarchy: List[NodeInheritedPropertiesPropertiesInnerHierarchyInner]=None, name: str=None, origval: object=None, provider: str=None, value: object=None):
        """NodeInheritedPropertiesPropertiesInner - a model defined in OpenAPI

        :param hierarchy: The hierarchy of this NodeInheritedPropertiesPropertiesInner.
        :param name: The name of this NodeInheritedPropertiesPropertiesInner.
        :param origval: The origval of this NodeInheritedPropertiesPropertiesInner.
        :param provider: The provider of this NodeInheritedPropertiesPropertiesInner.
        :param value: The value of this NodeInheritedPropertiesPropertiesInner.
        """
        self.openapi_types = {
            'hierarchy': List[NodeInheritedPropertiesPropertiesInnerHierarchyInner],
            'name': str,
            'origval': object,
            'provider': str,
            'value': object
        }

        self.attribute_map = {
            'hierarchy': 'hierarchy',
            'name': 'name',
            'origval': 'origval',
            'provider': 'provider',
            'value': 'value'
        }

        self._hierarchy = hierarchy
        self._name = name
        self._origval = origval
        self._provider = provider
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeInheritedPropertiesPropertiesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node_inherited_properties_properties_inner of this NodeInheritedPropertiesPropertiesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hierarchy(self):
        """Gets the hierarchy of this NodeInheritedPropertiesPropertiesInner.

        A description of the inheritance hierarchy for that property, with most direct parent at head and oldest one at tail

        :return: The hierarchy of this NodeInheritedPropertiesPropertiesInner.
        :rtype: List[NodeInheritedPropertiesPropertiesInnerHierarchyInner]
        """
        return self._hierarchy

    @hierarchy.setter
    def hierarchy(self, hierarchy):
        """Sets the hierarchy of this NodeInheritedPropertiesPropertiesInner.

        A description of the inheritance hierarchy for that property, with most direct parent at head and oldest one at tail

        :param hierarchy: The hierarchy of this NodeInheritedPropertiesPropertiesInner.
        :type hierarchy: List[NodeInheritedPropertiesPropertiesInnerHierarchyInner]
        """

        self._hierarchy = hierarchy

    @property
    def name(self):
        """Gets the name of this NodeInheritedPropertiesPropertiesInner.

        Property name

        :return: The name of this NodeInheritedPropertiesPropertiesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeInheritedPropertiesPropertiesInner.

        Property name

        :param name: The name of this NodeInheritedPropertiesPropertiesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def origval(self):
        """Gets the origval of this NodeInheritedPropertiesPropertiesInner.

        The original value (ie, before overriding and inheritance resolution) for that node

        :return: The origval of this NodeInheritedPropertiesPropertiesInner.
        :rtype: object
        """
        return self._origval

    @origval.setter
    def origval(self, origval):
        """Sets the origval of this NodeInheritedPropertiesPropertiesInner.

        The original value (ie, before overriding and inheritance resolution) for that node

        :param origval: The origval of this NodeInheritedPropertiesPropertiesInner.
        :type origval: object
        """

        self._origval = origval

    @property
    def provider(self):
        """Gets the provider of this NodeInheritedPropertiesPropertiesInner.

        Property provider (if the property is not a simple node property)

        :return: The provider of this NodeInheritedPropertiesPropertiesInner.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this NodeInheritedPropertiesPropertiesInner.

        Property provider (if the property is not a simple node property)

        :param provider: The provider of this NodeInheritedPropertiesPropertiesInner.
        :type provider: str
        """
        allowed_values = ["inherited", "overridden", "plugin name like datasources"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def value(self):
        """Gets the value of this NodeInheritedPropertiesPropertiesInner.

        Resolved (ie, with inheritance and overriding done) property value (can be a string or JSON object)

        :return: The value of this NodeInheritedPropertiesPropertiesInner.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NodeInheritedPropertiesPropertiesInner.

        Resolved (ie, with inheritance and overriding done) property value (can be a string or JSON object)

        :param value: The value of this NodeInheritedPropertiesPropertiesInner.
        :type value: object
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
