# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReloadAll200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, groups: str=None, techniques: str=None):
        """ReloadAll200ResponseData - a model defined in OpenAPI

        :param groups: The groups of this ReloadAll200ResponseData.
        :param techniques: The techniques of this ReloadAll200ResponseData.
        """
        self.openapi_types = {
            'groups': str,
            'techniques': str
        }

        self.attribute_map = {
            'groups': 'groups',
            'techniques': 'techniques'
        }

        self._groups = groups
        self._techniques = techniques

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReloadAll200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reloadAll_200_response_data of this ReloadAll200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def groups(self):
        """Gets the groups of this ReloadAll200ResponseData.


        :return: The groups of this ReloadAll200ResponseData.
        :rtype: str
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ReloadAll200ResponseData.


        :param groups: The groups of this ReloadAll200ResponseData.
        :type groups: str
        """
        allowed_values = ["Started"]  # noqa: E501
        if groups not in allowed_values:
            raise ValueError(
                "Invalid value for `groups` ({0}), must be one of {1}"
                .format(groups, allowed_values)
            )

        self._groups = groups

    @property
    def techniques(self):
        """Gets the techniques of this ReloadAll200ResponseData.


        :return: The techniques of this ReloadAll200ResponseData.
        :rtype: str
        """
        return self._techniques

    @techniques.setter
    def techniques(self, techniques):
        """Sets the techniques of this ReloadAll200ResponseData.


        :param techniques: The techniques of this ReloadAll200ResponseData.
        :type techniques: str
        """
        allowed_values = ["Started"]  # noqa: E501
        if techniques not in allowed_values:
            raise ValueError(
                "Invalid value for `techniques` ({0}), must be one of {1}"
                .format(techniques, allowed_values)
            )

        self._techniques = techniques
