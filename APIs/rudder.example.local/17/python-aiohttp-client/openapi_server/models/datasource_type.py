# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datasource_type_parameters import DatasourceTypeParameters
from openapi_server import util


class DatasourceType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, parameters: DatasourceTypeParameters=None):
        """DatasourceType - a model defined in OpenAPI

        :param name: The name of this DatasourceType.
        :param parameters: The parameters of this DatasourceType.
        """
        self.openapi_types = {
            'name': str,
            'parameters': DatasourceTypeParameters
        }

        self.attribute_map = {
            'name': 'name',
            'parameters': 'parameters'
        }

        self._name = name
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasourceType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The datasource_type of this DatasourceType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DatasourceType.

        Data source type name

        :return: The name of this DatasourceType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatasourceType.

        Data source type name

        :param name: The name of this DatasourceType.
        :type name: str
        """
        allowed_values = ["HTTP"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this DatasourceType.


        :return: The parameters of this DatasourceType.
        :rtype: DatasourceTypeParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DatasourceType.


        :param parameters: The parameters of this DatasourceType.
        :type parameters: DatasourceTypeParameters
        """

        self._parameters = parameters
