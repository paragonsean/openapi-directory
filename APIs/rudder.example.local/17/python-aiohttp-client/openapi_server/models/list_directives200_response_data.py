# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directive import Directive
from openapi_server import util


class ListDirectives200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, directives: List[Directive]=None):
        """ListDirectives200ResponseData - a model defined in OpenAPI

        :param directives: The directives of this ListDirectives200ResponseData.
        """
        self.openapi_types = {
            'directives': List[Directive]
        }

        self.attribute_map = {
            'directives': 'directives'
        }

        self._directives = directives

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListDirectives200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The listDirectives_200_response_data of this ListDirectives200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def directives(self):
        """Gets the directives of this ListDirectives200ResponseData.


        :return: The directives of this ListDirectives200ResponseData.
        :rtype: List[Directive]
        """
        return self._directives

    @directives.setter
    def directives(self, directives):
        """Sets the directives of this ListDirectives200ResponseData.


        :param directives: The directives of this ListDirectives200ResponseData.
        :type directives: List[Directive]
        """
        if directives is None:
            raise ValueError("Invalid value for `directives`, must not be `None`")

        self._directives = directives
