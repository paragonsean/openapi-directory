# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_key import AgentKey
from openapi_server.models.node_add_inner_properties_inner import NodeAddInnerPropertiesInner
from openapi_server.models.os import Os
from openapi_server.models.timezone import Timezone
from openapi_server import util


class NodeAddInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_key: AgentKey=None, hostname: str=None, id: str=None, ip_addresses: List[str]=None, machine_type: str=None, os: Os=None, policy_mode: str=None, policy_server_id: str=None, properties: List[NodeAddInnerPropertiesInner]=None, state: str=None, status: str=None, timezone: Timezone=None):
        """NodeAddInner - a model defined in OpenAPI

        :param agent_key: The agent_key of this NodeAddInner.
        :param hostname: The hostname of this NodeAddInner.
        :param id: The id of this NodeAddInner.
        :param ip_addresses: The ip_addresses of this NodeAddInner.
        :param machine_type: The machine_type of this NodeAddInner.
        :param os: The os of this NodeAddInner.
        :param policy_mode: The policy_mode of this NodeAddInner.
        :param policy_server_id: The policy_server_id of this NodeAddInner.
        :param properties: The properties of this NodeAddInner.
        :param state: The state of this NodeAddInner.
        :param status: The status of this NodeAddInner.
        :param timezone: The timezone of this NodeAddInner.
        """
        self.openapi_types = {
            'agent_key': AgentKey,
            'hostname': str,
            'id': str,
            'ip_addresses': List[str],
            'machine_type': str,
            'os': Os,
            'policy_mode': str,
            'policy_server_id': str,
            'properties': List[NodeAddInnerPropertiesInner],
            'state': str,
            'status': str,
            'timezone': Timezone
        }

        self.attribute_map = {
            'agent_key': 'agentKey',
            'hostname': 'hostname',
            'id': 'id',
            'ip_addresses': 'ipAddresses',
            'machine_type': 'machineType',
            'os': 'os',
            'policy_mode': 'policyMode',
            'policy_server_id': 'policyServerId',
            'properties': 'properties',
            'state': 'state',
            'status': 'status',
            'timezone': 'timezone'
        }

        self._agent_key = agent_key
        self._hostname = hostname
        self._id = id
        self._ip_addresses = ip_addresses
        self._machine_type = machine_type
        self._os = os
        self._policy_mode = policy_mode
        self._policy_server_id = policy_server_id
        self._properties = properties
        self._state = state
        self._status = status
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeAddInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node_add_inner of this NodeAddInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_key(self):
        """Gets the agent_key of this NodeAddInner.


        :return: The agent_key of this NodeAddInner.
        :rtype: AgentKey
        """
        return self._agent_key

    @agent_key.setter
    def agent_key(self, agent_key):
        """Sets the agent_key of this NodeAddInner.


        :param agent_key: The agent_key of this NodeAddInner.
        :type agent_key: AgentKey
        """

        self._agent_key = agent_key

    @property
    def hostname(self):
        """Gets the hostname of this NodeAddInner.

        The fully qualified name of the node

        :return: The hostname of this NodeAddInner.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this NodeAddInner.

        The fully qualified name of the node

        :param hostname: The hostname of this NodeAddInner.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this NodeAddInner.

        The Rudder node unique identifier in /opt/rudder/etc/uuid.hive

        :return: The id of this NodeAddInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeAddInner.

        The Rudder node unique identifier in /opt/rudder/etc/uuid.hive

        :param id: The id of this NodeAddInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this NodeAddInner.

        an array of IPs.

        :return: The ip_addresses of this NodeAddInner.
        :rtype: List[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this NodeAddInner.

        an array of IPs.

        :param ip_addresses: The ip_addresses of this NodeAddInner.
        :type ip_addresses: List[str]
        """
        if ip_addresses is None:
            raise ValueError("Invalid value for `ip_addresses`, must not be `None`")

        self._ip_addresses = ip_addresses

    @property
    def machine_type(self):
        """Gets the machine_type of this NodeAddInner.

        The kind of machine for the node (use vm for a generic VM)

        :return: The machine_type of this NodeAddInner.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this NodeAddInner.

        The kind of machine for the node (use vm for a generic VM)

        :param machine_type: The machine_type of this NodeAddInner.
        :type machine_type: str
        """
        allowed_values = ["vmware", "physical", "vm", "solariszone", "qemu", "xen", "aixlpar", "hyperv", "bsdjail"]  # noqa: E501
        if machine_type not in allowed_values:
            raise ValueError(
                "Invalid value for `machine_type` ({0}), must be one of {1}"
                .format(machine_type, allowed_values)
            )

        self._machine_type = machine_type

    @property
    def os(self):
        """Gets the os of this NodeAddInner.


        :return: The os of this NodeAddInner.
        :rtype: Os
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this NodeAddInner.


        :param os: The os of this NodeAddInner.
        :type os: Os
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")

        self._os = os

    @property
    def policy_mode(self):
        """Gets the policy_mode of this NodeAddInner.

        The policy mode for the node. Can only be specified when status=accepted. If not specified, the default (global) mode will be used

        :return: The policy_mode of this NodeAddInner.
        :rtype: str
        """
        return self._policy_mode

    @policy_mode.setter
    def policy_mode(self, policy_mode):
        """Sets the policy_mode of this NodeAddInner.

        The policy mode for the node. Can only be specified when status=accepted. If not specified, the default (global) mode will be used

        :param policy_mode: The policy_mode of this NodeAddInner.
        :type policy_mode: str
        """
        allowed_values = ["enforce", "audit"]  # noqa: E501
        if policy_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_mode` ({0}), must be one of {1}"
                .format(policy_mode, allowed_values)
            )

        self._policy_mode = policy_mode

    @property
    def policy_server_id(self):
        """Gets the policy_server_id of this NodeAddInner.

        The policy server ID for that node. By default, \"root\"

        :return: The policy_server_id of this NodeAddInner.
        :rtype: str
        """
        return self._policy_server_id

    @policy_server_id.setter
    def policy_server_id(self, policy_server_id):
        """Sets the policy_server_id of this NodeAddInner.

        The policy server ID for that node. By default, \"root\"

        :param policy_server_id: The policy_server_id of this NodeAddInner.
        :type policy_server_id: str
        """

        self._policy_server_id = policy_server_id

    @property
    def properties(self):
        """Gets the properties of this NodeAddInner.

        Node properties (either set by user or filled by third party sources)

        :return: The properties of this NodeAddInner.
        :rtype: List[NodeAddInnerPropertiesInner]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this NodeAddInner.

        Node properties (either set by user or filled by third party sources)

        :param properties: The properties of this NodeAddInner.
        :type properties: List[NodeAddInnerPropertiesInner]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def state(self):
        """Gets the state of this NodeAddInner.

        Node lifecycle state. Can only be specified when status=accepted. If not specified, enable is used

        :return: The state of this NodeAddInner.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NodeAddInner.

        Node lifecycle state. Can only be specified when status=accepted. If not specified, enable is used

        :param state: The state of this NodeAddInner.
        :type state: str
        """
        allowed_values = ["enabled", "ignored", "empty-policies", "initializing", "preparing-eol"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this NodeAddInner.

        Target status of the node

        :return: The status of this NodeAddInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NodeAddInner.

        Target status of the node

        :param status: The status of this NodeAddInner.
        :type status: str
        """
        allowed_values = ["accepted", "pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timezone(self):
        """Gets the timezone of this NodeAddInner.


        :return: The timezone of this NodeAddInner.
        :rtype: Timezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this NodeAddInner.


        :param timezone: The timezone of this NodeAddInner.
        :type timezone: Timezone
        """

        self._timezone = timezone
