# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCVEListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cve_ids: List[str]=None, max_score: str=None, min_score: str=None, only_score: bool=False, published_date: date=None):
        """GetCVEListRequest - a model defined in OpenAPI

        :param cve_ids: The cve_ids of this GetCVEListRequest.
        :param max_score: The max_score of this GetCVEListRequest.
        :param min_score: The min_score of this GetCVEListRequest.
        :param only_score: The only_score of this GetCVEListRequest.
        :param published_date: The published_date of this GetCVEListRequest.
        """
        self.openapi_types = {
            'cve_ids': List[str],
            'max_score': str,
            'min_score': str,
            'only_score': bool,
            'published_date': date
        }

        self.attribute_map = {
            'cve_ids': 'cveIds',
            'max_score': 'maxScore',
            'min_score': 'minScore',
            'only_score': 'onlyScore',
            'published_date': 'publishedDate'
        }

        self._cve_ids = cve_ids
        self._max_score = max_score
        self._min_score = min_score
        self._only_score = only_score
        self._published_date = published_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCVEListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getCVEList_request of this GetCVEListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cve_ids(self):
        """Gets the cve_ids of this GetCVEListRequest.


        :return: The cve_ids of this GetCVEListRequest.
        :rtype: List[str]
        """
        return self._cve_ids

    @cve_ids.setter
    def cve_ids(self, cve_ids):
        """Sets the cve_ids of this GetCVEListRequest.


        :param cve_ids: The cve_ids of this GetCVEListRequest.
        :type cve_ids: List[str]
        """

        self._cve_ids = cve_ids

    @property
    def max_score(self):
        """Gets the max_score of this GetCVEListRequest.

        Only send CVE with a score lower than the value

        :return: The max_score of this GetCVEListRequest.
        :rtype: str
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this GetCVEListRequest.

        Only send CVE with a score lower than the value

        :param max_score: The max_score of this GetCVEListRequest.
        :type max_score: str
        """

        self._max_score = max_score

    @property
    def min_score(self):
        """Gets the min_score of this GetCVEListRequest.

        Only send CVE with a score higher than the value

        :return: The min_score of this GetCVEListRequest.
        :rtype: str
        """
        return self._min_score

    @min_score.setter
    def min_score(self, min_score):
        """Sets the min_score of this GetCVEListRequest.

        Only send CVE with a score higher than the value

        :param min_score: The min_score of this GetCVEListRequest.
        :type min_score: str
        """

        self._min_score = min_score

    @property
    def only_score(self):
        """Gets the only_score of this GetCVEListRequest.

        Only send score of the cve, and not the whole detailed list

        :return: The only_score of this GetCVEListRequest.
        :rtype: bool
        """
        return self._only_score

    @only_score.setter
    def only_score(self, only_score):
        """Sets the only_score of this GetCVEListRequest.

        Only send score of the cve, and not the whole detailed list

        :param only_score: The only_score of this GetCVEListRequest.
        :type only_score: bool
        """

        self._only_score = only_score

    @property
    def published_date(self):
        """Gets the published_date of this GetCVEListRequest.

        Only send CVE with a publication date more recent than the value

        :return: The published_date of this GetCVEListRequest.
        :rtype: date
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """Sets the published_date of this GetCVEListRequest.

        Only send CVE with a publication date more recent than the value

        :param published_date: The published_date of this GetCVEListRequest.
        :type published_date: date
        """

        self._published_date = published_date
