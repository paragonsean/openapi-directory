# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeFullSoftwareUpdateInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arch: str=None, description: str=None, _from: str=None, ids: List[str]=None, kind: str=None, name: str=None, severity: str=None, source: str=None, version: str=None):
        """NodeFullSoftwareUpdateInner - a model defined in OpenAPI

        :param arch: The arch of this NodeFullSoftwareUpdateInner.
        :param description: The description of this NodeFullSoftwareUpdateInner.
        :param _from: The _from of this NodeFullSoftwareUpdateInner.
        :param ids: The ids of this NodeFullSoftwareUpdateInner.
        :param kind: The kind of this NodeFullSoftwareUpdateInner.
        :param name: The name of this NodeFullSoftwareUpdateInner.
        :param severity: The severity of this NodeFullSoftwareUpdateInner.
        :param source: The source of this NodeFullSoftwareUpdateInner.
        :param version: The version of this NodeFullSoftwareUpdateInner.
        """
        self.openapi_types = {
            'arch': str,
            'description': str,
            '_from': str,
            'ids': List[str],
            'kind': str,
            'name': str,
            'severity': str,
            'source': str,
            'version': str
        }

        self.attribute_map = {
            'arch': 'arch',
            'description': 'description',
            '_from': 'from',
            'ids': 'ids',
            'kind': 'kind',
            'name': 'name',
            'severity': 'severity',
            'source': 'source',
            'version': 'version'
        }

        self._arch = arch
        self._description = description
        self.__from = _from
        self._ids = ids
        self._kind = kind
        self._name = name
        self._severity = severity
        self._source = source
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeFullSoftwareUpdateInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node_full_softwareUpdate_inner of this NodeFullSoftwareUpdateInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arch(self):
        """Gets the arch of this NodeFullSoftwareUpdateInner.

        CPU architecture of the update

        :return: The arch of this NodeFullSoftwareUpdateInner.
        :rtype: str
        """
        return self._arch

    @arch.setter
    def arch(self, arch):
        """Sets the arch of this NodeFullSoftwareUpdateInner.

        CPU architecture of the update

        :param arch: The arch of this NodeFullSoftwareUpdateInner.
        :type arch: str
        """

        self._arch = arch

    @property
    def description(self):
        """Gets the description of this NodeFullSoftwareUpdateInner.

        details about the content of the update, if available

        :return: The description of this NodeFullSoftwareUpdateInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NodeFullSoftwareUpdateInner.

        details about the content of the update, if available

        :param description: The description of this NodeFullSoftwareUpdateInner.
        :type description: str
        """

        self._description = description

    @property
    def _from(self):
        """Gets the _from of this NodeFullSoftwareUpdateInner.

        tool that discovered that update

        :return: The _from of this NodeFullSoftwareUpdateInner.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this NodeFullSoftwareUpdateInner.

        tool that discovered that update

        :param _from: The _from of this NodeFullSoftwareUpdateInner.
        :type _from: str
        """

        self.__from = _from

    @property
    def ids(self):
        """Gets the ids of this NodeFullSoftwareUpdateInner.


        :return: The ids of this NodeFullSoftwareUpdateInner.
        :rtype: List[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this NodeFullSoftwareUpdateInner.


        :param ids: The ids of this NodeFullSoftwareUpdateInner.
        :type ids: List[str]
        """

        self._ids = ids

    @property
    def kind(self):
        """Gets the kind of this NodeFullSoftwareUpdateInner.

        if available, kind of patch provided by that update, else none

        :return: The kind of this NodeFullSoftwareUpdateInner.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this NodeFullSoftwareUpdateInner.

        if available, kind of patch provided by that update, else none

        :param kind: The kind of this NodeFullSoftwareUpdateInner.
        :type kind: str
        """
        allowed_values = ["none", "security", "defect", "enhancement", "other"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this NodeFullSoftwareUpdateInner.

        name of software that can be updated

        :return: The name of this NodeFullSoftwareUpdateInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeFullSoftwareUpdateInner.

        name of software that can be updated

        :param name: The name of this NodeFullSoftwareUpdateInner.
        :type name: str
        """

        self._name = name

    @property
    def severity(self):
        """Gets the severity of this NodeFullSoftwareUpdateInner.

        if available, the severity of the update

        :return: The severity of this NodeFullSoftwareUpdateInner.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this NodeFullSoftwareUpdateInner.

        if available, the severity of the update

        :param severity: The severity of this NodeFullSoftwareUpdateInner.
        :type severity: str
        """
        allowed_values = ["critical", "high", "moderate", "low", "other"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def source(self):
        """Gets the source of this NodeFullSoftwareUpdateInner.

        information about the source providing that update

        :return: The source of this NodeFullSoftwareUpdateInner.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this NodeFullSoftwareUpdateInner.

        information about the source providing that update

        :param source: The source of this NodeFullSoftwareUpdateInner.
        :type source: str
        """

        self._source = source

    @property
    def version(self):
        """Gets the version of this NodeFullSoftwareUpdateInner.

        available version for software

        :return: The version of this NodeFullSoftwareUpdateInner.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NodeFullSoftwareUpdateInner.

        available version for software

        :param version: The version of this NodeFullSoftwareUpdateInner.
        :type version: str
        """

        self._version = version
