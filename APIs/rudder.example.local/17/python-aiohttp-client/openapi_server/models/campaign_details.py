# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.campaign_details_details import CampaignDetailsDetails
from openapi_server.models.campaign_details_info import CampaignDetailsInfo
from openapi_server import util


class CampaignDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_type: str=None, details: CampaignDetailsDetails=None, info: CampaignDetailsInfo=None, version: int=None):
        """CampaignDetails - a model defined in OpenAPI

        :param campaign_type: The campaign_type of this CampaignDetails.
        :param details: The details of this CampaignDetails.
        :param info: The info of this CampaignDetails.
        :param version: The version of this CampaignDetails.
        """
        self.openapi_types = {
            'campaign_type': str,
            'details': CampaignDetailsDetails,
            'info': CampaignDetailsInfo,
            'version': int
        }

        self.attribute_map = {
            'campaign_type': 'campaignType',
            'details': 'details',
            'info': 'info',
            'version': 'version'
        }

        self._campaign_type = campaign_type
        self._details = details
        self._info = info
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The campaign-details of this CampaignDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_type(self):
        """Gets the campaign_type of this CampaignDetails.

        Type of campaign (with version determine what kind of campaign you handle and the details object)

        :return: The campaign_type of this CampaignDetails.
        :rtype: str
        """
        return self._campaign_type

    @campaign_type.setter
    def campaign_type(self, campaign_type):
        """Sets the campaign_type of this CampaignDetails.

        Type of campaign (with version determine what kind of campaign you handle and the details object)

        :param campaign_type: The campaign_type of this CampaignDetails.
        :type campaign_type: str
        """

        self._campaign_type = campaign_type

    @property
    def details(self):
        """Gets the details of this CampaignDetails.


        :return: The details of this CampaignDetails.
        :rtype: CampaignDetailsDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this CampaignDetails.


        :param details: The details of this CampaignDetails.
        :type details: CampaignDetailsDetails
        """

        self._details = details

    @property
    def info(self):
        """Gets the info of this CampaignDetails.


        :return: The info of this CampaignDetails.
        :rtype: CampaignDetailsInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this CampaignDetails.


        :param info: The info of this CampaignDetails.
        :type info: CampaignDetailsInfo
        """

        self._info = info

    @property
    def version(self):
        """Gets the version of this CampaignDetails.

        Version of campaign (with type determine what kind of campaign you handle and the details object)

        :return: The version of this CampaignDetails.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CampaignDetails.

        Version of campaign (with type determine what kind of campaign you handle and the details object)

        :param version: The version of this CampaignDetails.
        :type version: int
        """

        self._version = version
