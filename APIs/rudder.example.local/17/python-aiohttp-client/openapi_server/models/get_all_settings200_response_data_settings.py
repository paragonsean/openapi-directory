# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_all_settings200_response_data_settings_allowed_networks_inner import GetAllSettings200ResponseDataSettingsAllowedNetworksInner
from openapi_server import util


class GetAllSettings200ResponseDataSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_networks: List[GetAllSettings200ResponseDataSettingsAllowedNetworksInner]=None, change_message_prompt: str=None, display_recent_changes_graphs: bool=None, enable_change_message: bool=None, enable_change_request: bool=None, enable_javascript_directives: str=None, enable_self_deployment: bool=None, enable_self_validation: bool=None, first_run_hour: int=None, first_run_minute: int=None, global_policy_mode: str=None, global_policy_mode_overridable: bool=None, heartbeat_frequency: int=None, mandatory_change_message: bool=None, modified_file_ttl: int=None, node_accept_duplicated_hostname: bool=False, node_onaccept_default_policy_mode: str=None, node_onaccept_default_state: str=None, output_file_ttl: int=None, relay_server_synchronization_method: str=None, relay_server_synchronize_policies: bool=None, relay_server_synchronize_shared_files: bool=None, reporting_mode: str=None, require_time_synchronization: bool=None, rudder_compute_changes: bool=True, rudder_compute_dyngroups_max_parallelism: str='1', rudder_generation_compute_dyngroups: bool=True, rudder_generation_continue_on_error: bool=False, rudder_generation_delay: str='0 seconds', rudder_generation_js_timeout: int=30, rudder_generation_max_parallelism: str='x0.5', rudder_generation_policy: str='all', rudder_report_protocol_default: str=None, rudder_save_db_compliance_details: bool=False, rudder_save_db_compliance_levels: bool=True, rudder_verify_certificates: bool=False, run_frequency: int=None, send_metrics: str=None, splay_time: int=None, unexpected_unbound_var_values: bool=True):
        """GetAllSettings200ResponseDataSettings - a model defined in OpenAPI

        :param allowed_networks: The allowed_networks of this GetAllSettings200ResponseDataSettings.
        :param change_message_prompt: The change_message_prompt of this GetAllSettings200ResponseDataSettings.
        :param display_recent_changes_graphs: The display_recent_changes_graphs of this GetAllSettings200ResponseDataSettings.
        :param enable_change_message: The enable_change_message of this GetAllSettings200ResponseDataSettings.
        :param enable_change_request: The enable_change_request of this GetAllSettings200ResponseDataSettings.
        :param enable_javascript_directives: The enable_javascript_directives of this GetAllSettings200ResponseDataSettings.
        :param enable_self_deployment: The enable_self_deployment of this GetAllSettings200ResponseDataSettings.
        :param enable_self_validation: The enable_self_validation of this GetAllSettings200ResponseDataSettings.
        :param first_run_hour: The first_run_hour of this GetAllSettings200ResponseDataSettings.
        :param first_run_minute: The first_run_minute of this GetAllSettings200ResponseDataSettings.
        :param global_policy_mode: The global_policy_mode of this GetAllSettings200ResponseDataSettings.
        :param global_policy_mode_overridable: The global_policy_mode_overridable of this GetAllSettings200ResponseDataSettings.
        :param heartbeat_frequency: The heartbeat_frequency of this GetAllSettings200ResponseDataSettings.
        :param mandatory_change_message: The mandatory_change_message of this GetAllSettings200ResponseDataSettings.
        :param modified_file_ttl: The modified_file_ttl of this GetAllSettings200ResponseDataSettings.
        :param node_accept_duplicated_hostname: The node_accept_duplicated_hostname of this GetAllSettings200ResponseDataSettings.
        :param node_onaccept_default_policy_mode: The node_onaccept_default_policy_mode of this GetAllSettings200ResponseDataSettings.
        :param node_onaccept_default_state: The node_onaccept_default_state of this GetAllSettings200ResponseDataSettings.
        :param output_file_ttl: The output_file_ttl of this GetAllSettings200ResponseDataSettings.
        :param relay_server_synchronization_method: The relay_server_synchronization_method of this GetAllSettings200ResponseDataSettings.
        :param relay_server_synchronize_policies: The relay_server_synchronize_policies of this GetAllSettings200ResponseDataSettings.
        :param relay_server_synchronize_shared_files: The relay_server_synchronize_shared_files of this GetAllSettings200ResponseDataSettings.
        :param reporting_mode: The reporting_mode of this GetAllSettings200ResponseDataSettings.
        :param require_time_synchronization: The require_time_synchronization of this GetAllSettings200ResponseDataSettings.
        :param rudder_compute_changes: The rudder_compute_changes of this GetAllSettings200ResponseDataSettings.
        :param rudder_compute_dyngroups_max_parallelism: The rudder_compute_dyngroups_max_parallelism of this GetAllSettings200ResponseDataSettings.
        :param rudder_generation_compute_dyngroups: The rudder_generation_compute_dyngroups of this GetAllSettings200ResponseDataSettings.
        :param rudder_generation_continue_on_error: The rudder_generation_continue_on_error of this GetAllSettings200ResponseDataSettings.
        :param rudder_generation_delay: The rudder_generation_delay of this GetAllSettings200ResponseDataSettings.
        :param rudder_generation_js_timeout: The rudder_generation_js_timeout of this GetAllSettings200ResponseDataSettings.
        :param rudder_generation_max_parallelism: The rudder_generation_max_parallelism of this GetAllSettings200ResponseDataSettings.
        :param rudder_generation_policy: The rudder_generation_policy of this GetAllSettings200ResponseDataSettings.
        :param rudder_report_protocol_default: The rudder_report_protocol_default of this GetAllSettings200ResponseDataSettings.
        :param rudder_save_db_compliance_details: The rudder_save_db_compliance_details of this GetAllSettings200ResponseDataSettings.
        :param rudder_save_db_compliance_levels: The rudder_save_db_compliance_levels of this GetAllSettings200ResponseDataSettings.
        :param rudder_verify_certificates: The rudder_verify_certificates of this GetAllSettings200ResponseDataSettings.
        :param run_frequency: The run_frequency of this GetAllSettings200ResponseDataSettings.
        :param send_metrics: The send_metrics of this GetAllSettings200ResponseDataSettings.
        :param splay_time: The splay_time of this GetAllSettings200ResponseDataSettings.
        :param unexpected_unbound_var_values: The unexpected_unbound_var_values of this GetAllSettings200ResponseDataSettings.
        """
        self.openapi_types = {
            'allowed_networks': List[GetAllSettings200ResponseDataSettingsAllowedNetworksInner],
            'change_message_prompt': str,
            'display_recent_changes_graphs': bool,
            'enable_change_message': bool,
            'enable_change_request': bool,
            'enable_javascript_directives': str,
            'enable_self_deployment': bool,
            'enable_self_validation': bool,
            'first_run_hour': int,
            'first_run_minute': int,
            'global_policy_mode': str,
            'global_policy_mode_overridable': bool,
            'heartbeat_frequency': int,
            'mandatory_change_message': bool,
            'modified_file_ttl': int,
            'node_accept_duplicated_hostname': bool,
            'node_onaccept_default_policy_mode': str,
            'node_onaccept_default_state': str,
            'output_file_ttl': int,
            'relay_server_synchronization_method': str,
            'relay_server_synchronize_policies': bool,
            'relay_server_synchronize_shared_files': bool,
            'reporting_mode': str,
            'require_time_synchronization': bool,
            'rudder_compute_changes': bool,
            'rudder_compute_dyngroups_max_parallelism': str,
            'rudder_generation_compute_dyngroups': bool,
            'rudder_generation_continue_on_error': bool,
            'rudder_generation_delay': str,
            'rudder_generation_js_timeout': int,
            'rudder_generation_max_parallelism': str,
            'rudder_generation_policy': str,
            'rudder_report_protocol_default': str,
            'rudder_save_db_compliance_details': bool,
            'rudder_save_db_compliance_levels': bool,
            'rudder_verify_certificates': bool,
            'run_frequency': int,
            'send_metrics': str,
            'splay_time': int,
            'unexpected_unbound_var_values': bool
        }

        self.attribute_map = {
            'allowed_networks': 'allowed_networks',
            'change_message_prompt': 'change_message_prompt',
            'display_recent_changes_graphs': 'display_recent_changes_graphs',
            'enable_change_message': 'enable_change_message',
            'enable_change_request': 'enable_change_request',
            'enable_javascript_directives': 'enable_javascript_directives',
            'enable_self_deployment': 'enable_self_deployment',
            'enable_self_validation': 'enable_self_validation',
            'first_run_hour': 'first_run_hour',
            'first_run_minute': 'first_run_minute',
            'global_policy_mode': 'global_policy_mode',
            'global_policy_mode_overridable': 'global_policy_mode_overridable',
            'heartbeat_frequency': 'heartbeat_frequency',
            'mandatory_change_message': 'mandatory_change_message',
            'modified_file_ttl': 'modified_file_ttl',
            'node_accept_duplicated_hostname': 'node_accept_duplicated_hostname',
            'node_onaccept_default_policy_mode': 'node_onaccept_default_policyMode',
            'node_onaccept_default_state': 'node_onaccept_default_state',
            'output_file_ttl': 'output_file_ttl',
            'relay_server_synchronization_method': 'relay_server_synchronization_method',
            'relay_server_synchronize_policies': 'relay_server_synchronize_policies',
            'relay_server_synchronize_shared_files': 'relay_server_synchronize_shared_files',
            'reporting_mode': 'reporting_mode',
            'require_time_synchronization': 'require_time_synchronization',
            'rudder_compute_changes': 'rudder_compute_changes',
            'rudder_compute_dyngroups_max_parallelism': 'rudder_compute_dyngroups_max_parallelism',
            'rudder_generation_compute_dyngroups': 'rudder_generation_compute_dyngroups',
            'rudder_generation_continue_on_error': 'rudder_generation_continue_on_error',
            'rudder_generation_delay': 'rudder_generation_delay',
            'rudder_generation_js_timeout': 'rudder_generation_js_timeout',
            'rudder_generation_max_parallelism': 'rudder_generation_max_parallelism',
            'rudder_generation_policy': 'rudder_generation_policy',
            'rudder_report_protocol_default': 'rudder_report_protocol_default',
            'rudder_save_db_compliance_details': 'rudder_save_db_compliance_details',
            'rudder_save_db_compliance_levels': 'rudder_save_db_compliance_levels',
            'rudder_verify_certificates': 'rudder_verify_certificates',
            'run_frequency': 'run_frequency',
            'send_metrics': 'send_metrics',
            'splay_time': 'splay_time',
            'unexpected_unbound_var_values': 'unexpected_unbound_var_values'
        }

        self._allowed_networks = allowed_networks
        self._change_message_prompt = change_message_prompt
        self._display_recent_changes_graphs = display_recent_changes_graphs
        self._enable_change_message = enable_change_message
        self._enable_change_request = enable_change_request
        self._enable_javascript_directives = enable_javascript_directives
        self._enable_self_deployment = enable_self_deployment
        self._enable_self_validation = enable_self_validation
        self._first_run_hour = first_run_hour
        self._first_run_minute = first_run_minute
        self._global_policy_mode = global_policy_mode
        self._global_policy_mode_overridable = global_policy_mode_overridable
        self._heartbeat_frequency = heartbeat_frequency
        self._mandatory_change_message = mandatory_change_message
        self._modified_file_ttl = modified_file_ttl
        self._node_accept_duplicated_hostname = node_accept_duplicated_hostname
        self._node_onaccept_default_policy_mode = node_onaccept_default_policy_mode
        self._node_onaccept_default_state = node_onaccept_default_state
        self._output_file_ttl = output_file_ttl
        self._relay_server_synchronization_method = relay_server_synchronization_method
        self._relay_server_synchronize_policies = relay_server_synchronize_policies
        self._relay_server_synchronize_shared_files = relay_server_synchronize_shared_files
        self._reporting_mode = reporting_mode
        self._require_time_synchronization = require_time_synchronization
        self._rudder_compute_changes = rudder_compute_changes
        self._rudder_compute_dyngroups_max_parallelism = rudder_compute_dyngroups_max_parallelism
        self._rudder_generation_compute_dyngroups = rudder_generation_compute_dyngroups
        self._rudder_generation_continue_on_error = rudder_generation_continue_on_error
        self._rudder_generation_delay = rudder_generation_delay
        self._rudder_generation_js_timeout = rudder_generation_js_timeout
        self._rudder_generation_max_parallelism = rudder_generation_max_parallelism
        self._rudder_generation_policy = rudder_generation_policy
        self._rudder_report_protocol_default = rudder_report_protocol_default
        self._rudder_save_db_compliance_details = rudder_save_db_compliance_details
        self._rudder_save_db_compliance_levels = rudder_save_db_compliance_levels
        self._rudder_verify_certificates = rudder_verify_certificates
        self._run_frequency = run_frequency
        self._send_metrics = send_metrics
        self._splay_time = splay_time
        self._unexpected_unbound_var_values = unexpected_unbound_var_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAllSettings200ResponseDataSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getAllSettings_200_response_data_settings of this GetAllSettings200ResponseDataSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_networks(self):
        """Gets the allowed_networks of this GetAllSettings200ResponseDataSettings.

        List of allowed networks for each policy server (root and relays)

        :return: The allowed_networks of this GetAllSettings200ResponseDataSettings.
        :rtype: List[GetAllSettings200ResponseDataSettingsAllowedNetworksInner]
        """
        return self._allowed_networks

    @allowed_networks.setter
    def allowed_networks(self, allowed_networks):
        """Sets the allowed_networks of this GetAllSettings200ResponseDataSettings.

        List of allowed networks for each policy server (root and relays)

        :param allowed_networks: The allowed_networks of this GetAllSettings200ResponseDataSettings.
        :type allowed_networks: List[GetAllSettings200ResponseDataSettingsAllowedNetworksInner]
        """

        self._allowed_networks = allowed_networks

    @property
    def change_message_prompt(self):
        """Gets the change_message_prompt of this GetAllSettings200ResponseDataSettings.

        Explanation to display

        :return: The change_message_prompt of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._change_message_prompt

    @change_message_prompt.setter
    def change_message_prompt(self, change_message_prompt):
        """Sets the change_message_prompt of this GetAllSettings200ResponseDataSettings.

        Explanation to display

        :param change_message_prompt: The change_message_prompt of this GetAllSettings200ResponseDataSettings.
        :type change_message_prompt: str
        """

        self._change_message_prompt = change_message_prompt

    @property
    def display_recent_changes_graphs(self):
        """Gets the display_recent_changes_graphs of this GetAllSettings200ResponseDataSettings.

        Display changes graphs

        :return: The display_recent_changes_graphs of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._display_recent_changes_graphs

    @display_recent_changes_graphs.setter
    def display_recent_changes_graphs(self, display_recent_changes_graphs):
        """Sets the display_recent_changes_graphs of this GetAllSettings200ResponseDataSettings.

        Display changes graphs

        :param display_recent_changes_graphs: The display_recent_changes_graphs of this GetAllSettings200ResponseDataSettings.
        :type display_recent_changes_graphs: bool
        """

        self._display_recent_changes_graphs = display_recent_changes_graphs

    @property
    def enable_change_message(self):
        """Gets the enable_change_message of this GetAllSettings200ResponseDataSettings.

        Enable change audit logs

        :return: The enable_change_message of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._enable_change_message

    @enable_change_message.setter
    def enable_change_message(self, enable_change_message):
        """Sets the enable_change_message of this GetAllSettings200ResponseDataSettings.

        Enable change audit logs

        :param enable_change_message: The enable_change_message of this GetAllSettings200ResponseDataSettings.
        :type enable_change_message: bool
        """

        self._enable_change_message = enable_change_message

    @property
    def enable_change_request(self):
        """Gets the enable_change_request of this GetAllSettings200ResponseDataSettings.

        Enable Change Requests

        :return: The enable_change_request of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._enable_change_request

    @enable_change_request.setter
    def enable_change_request(self, enable_change_request):
        """Sets the enable_change_request of this GetAllSettings200ResponseDataSettings.

        Enable Change Requests

        :param enable_change_request: The enable_change_request of this GetAllSettings200ResponseDataSettings.
        :type enable_change_request: bool
        """

        self._enable_change_request = enable_change_request

    @property
    def enable_javascript_directives(self):
        """Gets the enable_javascript_directives of this GetAllSettings200ResponseDataSettings.

        Enable script evaluation in Directives

        :return: The enable_javascript_directives of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._enable_javascript_directives

    @enable_javascript_directives.setter
    def enable_javascript_directives(self, enable_javascript_directives):
        """Sets the enable_javascript_directives of this GetAllSettings200ResponseDataSettings.

        Enable script evaluation in Directives

        :param enable_javascript_directives: The enable_javascript_directives of this GetAllSettings200ResponseDataSettings.
        :type enable_javascript_directives: str
        """

        self._enable_javascript_directives = enable_javascript_directives

    @property
    def enable_self_deployment(self):
        """Gets the enable_self_deployment of this GetAllSettings200ResponseDataSettings.

        Allow self deployment

        :return: The enable_self_deployment of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._enable_self_deployment

    @enable_self_deployment.setter
    def enable_self_deployment(self, enable_self_deployment):
        """Sets the enable_self_deployment of this GetAllSettings200ResponseDataSettings.

        Allow self deployment

        :param enable_self_deployment: The enable_self_deployment of this GetAllSettings200ResponseDataSettings.
        :type enable_self_deployment: bool
        """

        self._enable_self_deployment = enable_self_deployment

    @property
    def enable_self_validation(self):
        """Gets the enable_self_validation of this GetAllSettings200ResponseDataSettings.

        Allow self validation

        :return: The enable_self_validation of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._enable_self_validation

    @enable_self_validation.setter
    def enable_self_validation(self, enable_self_validation):
        """Sets the enable_self_validation of this GetAllSettings200ResponseDataSettings.

        Allow self validation

        :param enable_self_validation: The enable_self_validation of this GetAllSettings200ResponseDataSettings.
        :type enable_self_validation: bool
        """

        self._enable_self_validation = enable_self_validation

    @property
    def first_run_hour(self):
        """Gets the first_run_hour of this GetAllSettings200ResponseDataSettings.

        First agent run time - hour

        :return: The first_run_hour of this GetAllSettings200ResponseDataSettings.
        :rtype: int
        """
        return self._first_run_hour

    @first_run_hour.setter
    def first_run_hour(self, first_run_hour):
        """Sets the first_run_hour of this GetAllSettings200ResponseDataSettings.

        First agent run time - hour

        :param first_run_hour: The first_run_hour of this GetAllSettings200ResponseDataSettings.
        :type first_run_hour: int
        """

        self._first_run_hour = first_run_hour

    @property
    def first_run_minute(self):
        """Gets the first_run_minute of this GetAllSettings200ResponseDataSettings.

        First agent run time - minute

        :return: The first_run_minute of this GetAllSettings200ResponseDataSettings.
        :rtype: int
        """
        return self._first_run_minute

    @first_run_minute.setter
    def first_run_minute(self, first_run_minute):
        """Sets the first_run_minute of this GetAllSettings200ResponseDataSettings.

        First agent run time - minute

        :param first_run_minute: The first_run_minute of this GetAllSettings200ResponseDataSettings.
        :type first_run_minute: int
        """

        self._first_run_minute = first_run_minute

    @property
    def global_policy_mode(self):
        """Gets the global_policy_mode of this GetAllSettings200ResponseDataSettings.

        Define the default setting for global policy mode

        :return: The global_policy_mode of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._global_policy_mode

    @global_policy_mode.setter
    def global_policy_mode(self, global_policy_mode):
        """Sets the global_policy_mode of this GetAllSettings200ResponseDataSettings.

        Define the default setting for global policy mode

        :param global_policy_mode: The global_policy_mode of this GetAllSettings200ResponseDataSettings.
        :type global_policy_mode: str
        """
        allowed_values = ["enforce", "audit"]  # noqa: E501
        if global_policy_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `global_policy_mode` ({0}), must be one of {1}"
                .format(global_policy_mode, allowed_values)
            )

        self._global_policy_mode = global_policy_mode

    @property
    def global_policy_mode_overridable(self):
        """Gets the global_policy_mode_overridable of this GetAllSettings200ResponseDataSettings.

        Allow overrides on this default setting

        :return: The global_policy_mode_overridable of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._global_policy_mode_overridable

    @global_policy_mode_overridable.setter
    def global_policy_mode_overridable(self, global_policy_mode_overridable):
        """Sets the global_policy_mode_overridable of this GetAllSettings200ResponseDataSettings.

        Allow overrides on this default setting

        :param global_policy_mode_overridable: The global_policy_mode_overridable of this GetAllSettings200ResponseDataSettings.
        :type global_policy_mode_overridable: bool
        """

        self._global_policy_mode_overridable = global_policy_mode_overridable

    @property
    def heartbeat_frequency(self):
        """Gets the heartbeat_frequency of this GetAllSettings200ResponseDataSettings.

        Send heartbeat every heartbeat_frequency runs (only on **changes-only** compliance mode)

        :return: The heartbeat_frequency of this GetAllSettings200ResponseDataSettings.
        :rtype: int
        """
        return self._heartbeat_frequency

    @heartbeat_frequency.setter
    def heartbeat_frequency(self, heartbeat_frequency):
        """Sets the heartbeat_frequency of this GetAllSettings200ResponseDataSettings.

        Send heartbeat every heartbeat_frequency runs (only on **changes-only** compliance mode)

        :param heartbeat_frequency: The heartbeat_frequency of this GetAllSettings200ResponseDataSettings.
        :type heartbeat_frequency: int
        """

        self._heartbeat_frequency = heartbeat_frequency

    @property
    def mandatory_change_message(self):
        """Gets the mandatory_change_message of this GetAllSettings200ResponseDataSettings.

        Make message mandatory

        :return: The mandatory_change_message of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._mandatory_change_message

    @mandatory_change_message.setter
    def mandatory_change_message(self, mandatory_change_message):
        """Sets the mandatory_change_message of this GetAllSettings200ResponseDataSettings.

        Make message mandatory

        :param mandatory_change_message: The mandatory_change_message of this GetAllSettings200ResponseDataSettings.
        :type mandatory_change_message: bool
        """

        self._mandatory_change_message = mandatory_change_message

    @property
    def modified_file_ttl(self):
        """Gets the modified_file_ttl of this GetAllSettings200ResponseDataSettings.

        Number of days to retain modified files

        :return: The modified_file_ttl of this GetAllSettings200ResponseDataSettings.
        :rtype: int
        """
        return self._modified_file_ttl

    @modified_file_ttl.setter
    def modified_file_ttl(self, modified_file_ttl):
        """Sets the modified_file_ttl of this GetAllSettings200ResponseDataSettings.

        Number of days to retain modified files

        :param modified_file_ttl: The modified_file_ttl of this GetAllSettings200ResponseDataSettings.
        :type modified_file_ttl: int
        """

        self._modified_file_ttl = modified_file_ttl

    @property
    def node_accept_duplicated_hostname(self):
        """Gets the node_accept_duplicated_hostname of this GetAllSettings200ResponseDataSettings.

        Allow acceptation of a pending node when another one with the same hostname is already accepted

        :return: The node_accept_duplicated_hostname of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._node_accept_duplicated_hostname

    @node_accept_duplicated_hostname.setter
    def node_accept_duplicated_hostname(self, node_accept_duplicated_hostname):
        """Sets the node_accept_duplicated_hostname of this GetAllSettings200ResponseDataSettings.

        Allow acceptation of a pending node when another one with the same hostname is already accepted

        :param node_accept_duplicated_hostname: The node_accept_duplicated_hostname of this GetAllSettings200ResponseDataSettings.
        :type node_accept_duplicated_hostname: bool
        """

        self._node_accept_duplicated_hostname = node_accept_duplicated_hostname

    @property
    def node_onaccept_default_policy_mode(self):
        """Gets the node_onaccept_default_policy_mode of this GetAllSettings200ResponseDataSettings.

        Default policy mode for accepted node

        :return: The node_onaccept_default_policy_mode of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._node_onaccept_default_policy_mode

    @node_onaccept_default_policy_mode.setter
    def node_onaccept_default_policy_mode(self, node_onaccept_default_policy_mode):
        """Sets the node_onaccept_default_policy_mode of this GetAllSettings200ResponseDataSettings.

        Default policy mode for accepted node

        :param node_onaccept_default_policy_mode: The node_onaccept_default_policy_mode of this GetAllSettings200ResponseDataSettings.
        :type node_onaccept_default_policy_mode: str
        """
        allowed_values = ["default", "enforce", "audit"]  # noqa: E501
        if node_onaccept_default_policy_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `node_onaccept_default_policy_mode` ({0}), must be one of {1}"
                .format(node_onaccept_default_policy_mode, allowed_values)
            )

        self._node_onaccept_default_policy_mode = node_onaccept_default_policy_mode

    @property
    def node_onaccept_default_state(self):
        """Gets the node_onaccept_default_state of this GetAllSettings200ResponseDataSettings.

        Set default state for node when they are accepted within Rudder

        :return: The node_onaccept_default_state of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._node_onaccept_default_state

    @node_onaccept_default_state.setter
    def node_onaccept_default_state(self, node_onaccept_default_state):
        """Sets the node_onaccept_default_state of this GetAllSettings200ResponseDataSettings.

        Set default state for node when they are accepted within Rudder

        :param node_onaccept_default_state: The node_onaccept_default_state of this GetAllSettings200ResponseDataSettings.
        :type node_onaccept_default_state: str
        """
        allowed_values = ["enabled", "ignored", "empty-policies", "initializing", "preparing-eol"]  # noqa: E501
        if node_onaccept_default_state not in allowed_values:
            raise ValueError(
                "Invalid value for `node_onaccept_default_state` ({0}), must be one of {1}"
                .format(node_onaccept_default_state, allowed_values)
            )

        self._node_onaccept_default_state = node_onaccept_default_state

    @property
    def output_file_ttl(self):
        """Gets the output_file_ttl of this GetAllSettings200ResponseDataSettings.

        Number of days to retain agent output files

        :return: The output_file_ttl of this GetAllSettings200ResponseDataSettings.
        :rtype: int
        """
        return self._output_file_ttl

    @output_file_ttl.setter
    def output_file_ttl(self, output_file_ttl):
        """Sets the output_file_ttl of this GetAllSettings200ResponseDataSettings.

        Number of days to retain agent output files

        :param output_file_ttl: The output_file_ttl of this GetAllSettings200ResponseDataSettings.
        :type output_file_ttl: int
        """

        self._output_file_ttl = output_file_ttl

    @property
    def relay_server_synchronization_method(self):
        """Gets the relay_server_synchronization_method of this GetAllSettings200ResponseDataSettings.

        Method used to synchronize data between server and relays, either \"classic\" (agent protocol, default), \"rsync\" (use rsync to synchronize, that you'll need to be manually set up), or \"disabled\" (use third party system to transmit data)

        :return: The relay_server_synchronization_method of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._relay_server_synchronization_method

    @relay_server_synchronization_method.setter
    def relay_server_synchronization_method(self, relay_server_synchronization_method):
        """Sets the relay_server_synchronization_method of this GetAllSettings200ResponseDataSettings.

        Method used to synchronize data between server and relays, either \"classic\" (agent protocol, default), \"rsync\" (use rsync to synchronize, that you'll need to be manually set up), or \"disabled\" (use third party system to transmit data)

        :param relay_server_synchronization_method: The relay_server_synchronization_method of this GetAllSettings200ResponseDataSettings.
        :type relay_server_synchronization_method: str
        """
        allowed_values = ["classic", "rsync", "disabled"]  # noqa: E501
        if relay_server_synchronization_method not in allowed_values:
            raise ValueError(
                "Invalid value for `relay_server_synchronization_method` ({0}), must be one of {1}"
                .format(relay_server_synchronization_method, allowed_values)
            )

        self._relay_server_synchronization_method = relay_server_synchronization_method

    @property
    def relay_server_synchronize_policies(self):
        """Gets the relay_server_synchronize_policies of this GetAllSettings200ResponseDataSettings.

        If **rsync** is set as a synchronization method, use rsync to synchronize policies between Rudder server and relays. If false, you'll have to synchronize policies yourself.

        :return: The relay_server_synchronize_policies of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._relay_server_synchronize_policies

    @relay_server_synchronize_policies.setter
    def relay_server_synchronize_policies(self, relay_server_synchronize_policies):
        """Sets the relay_server_synchronize_policies of this GetAllSettings200ResponseDataSettings.

        If **rsync** is set as a synchronization method, use rsync to synchronize policies between Rudder server and relays. If false, you'll have to synchronize policies yourself.

        :param relay_server_synchronize_policies: The relay_server_synchronize_policies of this GetAllSettings200ResponseDataSettings.
        :type relay_server_synchronize_policies: bool
        """

        self._relay_server_synchronize_policies = relay_server_synchronize_policies

    @property
    def relay_server_synchronize_shared_files(self):
        """Gets the relay_server_synchronize_shared_files of this GetAllSettings200ResponseDataSettings.

        If **rsync** is set as a synchronization method, use rsync to synchronize shared files between Rudder server and relays. If false, you'll have to synchronize shared files yourself.

        :return: The relay_server_synchronize_shared_files of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._relay_server_synchronize_shared_files

    @relay_server_synchronize_shared_files.setter
    def relay_server_synchronize_shared_files(self, relay_server_synchronize_shared_files):
        """Sets the relay_server_synchronize_shared_files of this GetAllSettings200ResponseDataSettings.

        If **rsync** is set as a synchronization method, use rsync to synchronize shared files between Rudder server and relays. If false, you'll have to synchronize shared files yourself.

        :param relay_server_synchronize_shared_files: The relay_server_synchronize_shared_files of this GetAllSettings200ResponseDataSettings.
        :type relay_server_synchronize_shared_files: bool
        """

        self._relay_server_synchronize_shared_files = relay_server_synchronize_shared_files

    @property
    def reporting_mode(self):
        """Gets the reporting_mode of this GetAllSettings200ResponseDataSettings.

        Compliance reporting mode

        :return: The reporting_mode of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._reporting_mode

    @reporting_mode.setter
    def reporting_mode(self, reporting_mode):
        """Sets the reporting_mode of this GetAllSettings200ResponseDataSettings.

        Compliance reporting mode

        :param reporting_mode: The reporting_mode of this GetAllSettings200ResponseDataSettings.
        :type reporting_mode: str
        """
        allowed_values = ["full-compliance", "changes-only", "reports-disabled"]  # noqa: E501
        if reporting_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `reporting_mode` ({0}), must be one of {1}"
                .format(reporting_mode, allowed_values)
            )

        self._reporting_mode = reporting_mode

    @property
    def require_time_synchronization(self):
        """Gets the require_time_synchronization of this GetAllSettings200ResponseDataSettings.

        Require time synchronization between nodes and policy server

        :return: The require_time_synchronization of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._require_time_synchronization

    @require_time_synchronization.setter
    def require_time_synchronization(self, require_time_synchronization):
        """Sets the require_time_synchronization of this GetAllSettings200ResponseDataSettings.

        Require time synchronization between nodes and policy server

        :param require_time_synchronization: The require_time_synchronization of this GetAllSettings200ResponseDataSettings.
        :type require_time_synchronization: bool
        """

        self._require_time_synchronization = require_time_synchronization

    @property
    def rudder_compute_changes(self):
        """Gets the rudder_compute_changes of this GetAllSettings200ResponseDataSettings.

        Compute list of changes (repaired reports) per rule

        :return: The rudder_compute_changes of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._rudder_compute_changes

    @rudder_compute_changes.setter
    def rudder_compute_changes(self, rudder_compute_changes):
        """Sets the rudder_compute_changes of this GetAllSettings200ResponseDataSettings.

        Compute list of changes (repaired reports) per rule

        :param rudder_compute_changes: The rudder_compute_changes of this GetAllSettings200ResponseDataSettings.
        :type rudder_compute_changes: bool
        """

        self._rudder_compute_changes = rudder_compute_changes

    @property
    def rudder_compute_dyngroups_max_parallelism(self):
        """Gets the rudder_compute_dyngroups_max_parallelism of this GetAllSettings200ResponseDataSettings.

        Set the parallelism to compute dynamic group, as a number of thread (i.e. 4), or a multiplicative of the number of core (x0.5)

        :return: The rudder_compute_dyngroups_max_parallelism of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._rudder_compute_dyngroups_max_parallelism

    @rudder_compute_dyngroups_max_parallelism.setter
    def rudder_compute_dyngroups_max_parallelism(self, rudder_compute_dyngroups_max_parallelism):
        """Sets the rudder_compute_dyngroups_max_parallelism of this GetAllSettings200ResponseDataSettings.

        Set the parallelism to compute dynamic group, as a number of thread (i.e. 4), or a multiplicative of the number of core (x0.5)

        :param rudder_compute_dyngroups_max_parallelism: The rudder_compute_dyngroups_max_parallelism of this GetAllSettings200ResponseDataSettings.
        :type rudder_compute_dyngroups_max_parallelism: str
        """

        self._rudder_compute_dyngroups_max_parallelism = rudder_compute_dyngroups_max_parallelism

    @property
    def rudder_generation_compute_dyngroups(self):
        """Gets the rudder_generation_compute_dyngroups of this GetAllSettings200ResponseDataSettings.

        Recompute all dynamic groups at the start of policy generation

        :return: The rudder_generation_compute_dyngroups of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._rudder_generation_compute_dyngroups

    @rudder_generation_compute_dyngroups.setter
    def rudder_generation_compute_dyngroups(self, rudder_generation_compute_dyngroups):
        """Sets the rudder_generation_compute_dyngroups of this GetAllSettings200ResponseDataSettings.

        Recompute all dynamic groups at the start of policy generation

        :param rudder_generation_compute_dyngroups: The rudder_generation_compute_dyngroups of this GetAllSettings200ResponseDataSettings.
        :type rudder_generation_compute_dyngroups: bool
        """

        self._rudder_generation_compute_dyngroups = rudder_generation_compute_dyngroups

    @property
    def rudder_generation_continue_on_error(self):
        """Gets the rudder_generation_continue_on_error of this GetAllSettings200ResponseDataSettings.

        Policy generation continues on error during NodeConfiguration evaluation

        :return: The rudder_generation_continue_on_error of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._rudder_generation_continue_on_error

    @rudder_generation_continue_on_error.setter
    def rudder_generation_continue_on_error(self, rudder_generation_continue_on_error):
        """Sets the rudder_generation_continue_on_error of this GetAllSettings200ResponseDataSettings.

        Policy generation continues on error during NodeConfiguration evaluation

        :param rudder_generation_continue_on_error: The rudder_generation_continue_on_error of this GetAllSettings200ResponseDataSettings.
        :type rudder_generation_continue_on_error: bool
        """

        self._rudder_generation_continue_on_error = rudder_generation_continue_on_error

    @property
    def rudder_generation_delay(self):
        """Gets the rudder_generation_delay of this GetAllSettings200ResponseDataSettings.

        Set a delay before starting policy generation, this will allow you to accumulate changes before they are deployed to Nodes, and can also lessen webapp resources needs. The value is a number followed by the time unit needed (seconds/s, minutes/m, hours/h ...), ie \"5m\" for 5 minutes

        :return: The rudder_generation_delay of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._rudder_generation_delay

    @rudder_generation_delay.setter
    def rudder_generation_delay(self, rudder_generation_delay):
        """Sets the rudder_generation_delay of this GetAllSettings200ResponseDataSettings.

        Set a delay before starting policy generation, this will allow you to accumulate changes before they are deployed to Nodes, and can also lessen webapp resources needs. The value is a number followed by the time unit needed (seconds/s, minutes/m, hours/h ...), ie \"5m\" for 5 minutes

        :param rudder_generation_delay: The rudder_generation_delay of this GetAllSettings200ResponseDataSettings.
        :type rudder_generation_delay: str
        """

        self._rudder_generation_delay = rudder_generation_delay

    @property
    def rudder_generation_js_timeout(self):
        """Gets the rudder_generation_js_timeout of this GetAllSettings200ResponseDataSettings.

        Policy generation JS evaluation of directive parameter timeout in seconds

        :return: The rudder_generation_js_timeout of this GetAllSettings200ResponseDataSettings.
        :rtype: int
        """
        return self._rudder_generation_js_timeout

    @rudder_generation_js_timeout.setter
    def rudder_generation_js_timeout(self, rudder_generation_js_timeout):
        """Sets the rudder_generation_js_timeout of this GetAllSettings200ResponseDataSettings.

        Policy generation JS evaluation of directive parameter timeout in seconds

        :param rudder_generation_js_timeout: The rudder_generation_js_timeout of this GetAllSettings200ResponseDataSettings.
        :type rudder_generation_js_timeout: int
        """

        self._rudder_generation_js_timeout = rudder_generation_js_timeout

    @property
    def rudder_generation_max_parallelism(self):
        """Gets the rudder_generation_max_parallelism of this GetAllSettings200ResponseDataSettings.

        Set the policy generation parallelism, either as an number of thread (i.e. 4), or a multiplicative of the number of core (x0.5)

        :return: The rudder_generation_max_parallelism of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._rudder_generation_max_parallelism

    @rudder_generation_max_parallelism.setter
    def rudder_generation_max_parallelism(self, rudder_generation_max_parallelism):
        """Sets the rudder_generation_max_parallelism of this GetAllSettings200ResponseDataSettings.

        Set the policy generation parallelism, either as an number of thread (i.e. 4), or a multiplicative of the number of core (x0.5)

        :param rudder_generation_max_parallelism: The rudder_generation_max_parallelism of this GetAllSettings200ResponseDataSettings.
        :type rudder_generation_max_parallelism: str
        """

        self._rudder_generation_max_parallelism = rudder_generation_max_parallelism

    @property
    def rudder_generation_policy(self):
        """Gets the rudder_generation_policy of this GetAllSettings200ResponseDataSettings.

        Should policy generation be triggered automatically after a change (value 'all'), or should we wait until a manual launch (through api or UI, value 'onlyManual') or even no policy generation at all (value \"none\")

        :return: The rudder_generation_policy of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._rudder_generation_policy

    @rudder_generation_policy.setter
    def rudder_generation_policy(self, rudder_generation_policy):
        """Sets the rudder_generation_policy of this GetAllSettings200ResponseDataSettings.

        Should policy generation be triggered automatically after a change (value 'all'), or should we wait until a manual launch (through api or UI, value 'onlyManual') or even no policy generation at all (value \"none\")

        :param rudder_generation_policy: The rudder_generation_policy of this GetAllSettings200ResponseDataSettings.
        :type rudder_generation_policy: str
        """

        self._rudder_generation_policy = rudder_generation_policy

    @property
    def rudder_report_protocol_default(self):
        """Gets the rudder_report_protocol_default of this GetAllSettings200ResponseDataSettings.

        Default reporting protocol used

        :return: The rudder_report_protocol_default of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._rudder_report_protocol_default

    @rudder_report_protocol_default.setter
    def rudder_report_protocol_default(self, rudder_report_protocol_default):
        """Sets the rudder_report_protocol_default of this GetAllSettings200ResponseDataSettings.

        Default reporting protocol used

        :param rudder_report_protocol_default: The rudder_report_protocol_default of this GetAllSettings200ResponseDataSettings.
        :type rudder_report_protocol_default: str
        """
        allowed_values = ["HTTPS", "SYSLOG"]  # noqa: E501
        if rudder_report_protocol_default not in allowed_values:
            raise ValueError(
                "Invalid value for `rudder_report_protocol_default` ({0}), must be one of {1}"
                .format(rudder_report_protocol_default, allowed_values)
            )

        self._rudder_report_protocol_default = rudder_report_protocol_default

    @property
    def rudder_save_db_compliance_details(self):
        """Gets the rudder_save_db_compliance_details of this GetAllSettings200ResponseDataSettings.

        Store all compliance details in database

        :return: The rudder_save_db_compliance_details of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._rudder_save_db_compliance_details

    @rudder_save_db_compliance_details.setter
    def rudder_save_db_compliance_details(self, rudder_save_db_compliance_details):
        """Sets the rudder_save_db_compliance_details of this GetAllSettings200ResponseDataSettings.

        Store all compliance details in database

        :param rudder_save_db_compliance_details: The rudder_save_db_compliance_details of this GetAllSettings200ResponseDataSettings.
        :type rudder_save_db_compliance_details: bool
        """

        self._rudder_save_db_compliance_details = rudder_save_db_compliance_details

    @property
    def rudder_save_db_compliance_levels(self):
        """Gets the rudder_save_db_compliance_levels of this GetAllSettings200ResponseDataSettings.

        Store all compliance levels in database

        :return: The rudder_save_db_compliance_levels of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._rudder_save_db_compliance_levels

    @rudder_save_db_compliance_levels.setter
    def rudder_save_db_compliance_levels(self, rudder_save_db_compliance_levels):
        """Sets the rudder_save_db_compliance_levels of this GetAllSettings200ResponseDataSettings.

        Store all compliance levels in database

        :param rudder_save_db_compliance_levels: The rudder_save_db_compliance_levels of this GetAllSettings200ResponseDataSettings.
        :type rudder_save_db_compliance_levels: bool
        """

        self._rudder_save_db_compliance_levels = rudder_save_db_compliance_levels

    @property
    def rudder_verify_certificates(self):
        """Gets the rudder_verify_certificates of this GetAllSettings200ResponseDataSettings.

        Enforce certificate validation in all HTTPS calls

        :return: The rudder_verify_certificates of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._rudder_verify_certificates

    @rudder_verify_certificates.setter
    def rudder_verify_certificates(self, rudder_verify_certificates):
        """Sets the rudder_verify_certificates of this GetAllSettings200ResponseDataSettings.

        Enforce certificate validation in all HTTPS calls

        :param rudder_verify_certificates: The rudder_verify_certificates of this GetAllSettings200ResponseDataSettings.
        :type rudder_verify_certificates: bool
        """

        self._rudder_verify_certificates = rudder_verify_certificates

    @property
    def run_frequency(self):
        """Gets the run_frequency of this GetAllSettings200ResponseDataSettings.

        Agent run schedule - time between agent runs (in minutes)

        :return: The run_frequency of this GetAllSettings200ResponseDataSettings.
        :rtype: int
        """
        return self._run_frequency

    @run_frequency.setter
    def run_frequency(self, run_frequency):
        """Sets the run_frequency of this GetAllSettings200ResponseDataSettings.

        Agent run schedule - time between agent runs (in minutes)

        :param run_frequency: The run_frequency of this GetAllSettings200ResponseDataSettings.
        :type run_frequency: int
        """

        self._run_frequency = run_frequency

    @property
    def send_metrics(self):
        """Gets the send_metrics of this GetAllSettings200ResponseDataSettings.

        Send anonymous usage statistics

        :return: The send_metrics of this GetAllSettings200ResponseDataSettings.
        :rtype: str
        """
        return self._send_metrics

    @send_metrics.setter
    def send_metrics(self, send_metrics):
        """Sets the send_metrics of this GetAllSettings200ResponseDataSettings.

        Send anonymous usage statistics

        :param send_metrics: The send_metrics of this GetAllSettings200ResponseDataSettings.
        :type send_metrics: str
        """

        self._send_metrics = send_metrics

    @property
    def splay_time(self):
        """Gets the splay_time of this GetAllSettings200ResponseDataSettings.

        Maximum delay after scheduled run time (random interval)

        :return: The splay_time of this GetAllSettings200ResponseDataSettings.
        :rtype: int
        """
        return self._splay_time

    @splay_time.setter
    def splay_time(self, splay_time):
        """Sets the splay_time of this GetAllSettings200ResponseDataSettings.

        Maximum delay after scheduled run time (random interval)

        :param splay_time: The splay_time of this GetAllSettings200ResponseDataSettings.
        :type splay_time: int
        """

        self._splay_time = splay_time

    @property
    def unexpected_unbound_var_values(self):
        """Gets the unexpected_unbound_var_values of this GetAllSettings200ResponseDataSettings.

        Allows multiple reports for configuration based on a multivalued variable

        :return: The unexpected_unbound_var_values of this GetAllSettings200ResponseDataSettings.
        :rtype: bool
        """
        return self._unexpected_unbound_var_values

    @unexpected_unbound_var_values.setter
    def unexpected_unbound_var_values(self, unexpected_unbound_var_values):
        """Sets the unexpected_unbound_var_values of this GetAllSettings200ResponseDataSettings.

        Allows multiple reports for configuration based on a multivalued variable

        :param unexpected_unbound_var_values: The unexpected_unbound_var_values of this GetAllSettings200ResponseDataSettings.
        :type unexpected_unbound_var_values: bool
        """

        self._unexpected_unbound_var_values = unexpected_unbound_var_values
