# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeFullNetworkInterfacesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dhcp_server: str=None, ip_addresses: List[str]=None, mac_address: str=None, mask: List[str]=None, name: str=None, speed: str=None, status: str=None, type: str=None):
        """NodeFullNetworkInterfacesInner - a model defined in OpenAPI

        :param dhcp_server: The dhcp_server of this NodeFullNetworkInterfacesInner.
        :param ip_addresses: The ip_addresses of this NodeFullNetworkInterfacesInner.
        :param mac_address: The mac_address of this NodeFullNetworkInterfacesInner.
        :param mask: The mask of this NodeFullNetworkInterfacesInner.
        :param name: The name of this NodeFullNetworkInterfacesInner.
        :param speed: The speed of this NodeFullNetworkInterfacesInner.
        :param status: The status of this NodeFullNetworkInterfacesInner.
        :param type: The type of this NodeFullNetworkInterfacesInner.
        """
        self.openapi_types = {
            'dhcp_server': str,
            'ip_addresses': List[str],
            'mac_address': str,
            'mask': List[str],
            'name': str,
            'speed': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'dhcp_server': 'dhcpServer',
            'ip_addresses': 'ipAddresses',
            'mac_address': 'macAddress',
            'mask': 'mask',
            'name': 'name',
            'speed': 'speed',
            'status': 'status',
            'type': 'type'
        }

        self._dhcp_server = dhcp_server
        self._ip_addresses = ip_addresses
        self._mac_address = mac_address
        self._mask = mask
        self._name = name
        self._speed = speed
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeFullNetworkInterfacesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node_full_networkInterfaces_inner of this NodeFullNetworkInterfacesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dhcp_server(self):
        """Gets the dhcp_server of this NodeFullNetworkInterfacesInner.

        DHCP server managing that network interface

        :return: The dhcp_server of this NodeFullNetworkInterfacesInner.
        :rtype: str
        """
        return self._dhcp_server

    @dhcp_server.setter
    def dhcp_server(self, dhcp_server):
        """Sets the dhcp_server of this NodeFullNetworkInterfacesInner.

        DHCP server managing that network interface

        :param dhcp_server: The dhcp_server of this NodeFullNetworkInterfacesInner.
        :type dhcp_server: str
        """

        self._dhcp_server = dhcp_server

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this NodeFullNetworkInterfacesInner.

        IP addresses of the network interface

        :return: The ip_addresses of this NodeFullNetworkInterfacesInner.
        :rtype: List[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this NodeFullNetworkInterfacesInner.

        IP addresses of the network interface

        :param ip_addresses: The ip_addresses of this NodeFullNetworkInterfacesInner.
        :type ip_addresses: List[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def mac_address(self):
        """Gets the mac_address of this NodeFullNetworkInterfacesInner.

        MAC address of the network interface

        :return: The mac_address of this NodeFullNetworkInterfacesInner.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this NodeFullNetworkInterfacesInner.

        MAC address of the network interface

        :param mac_address: The mac_address of this NodeFullNetworkInterfacesInner.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def mask(self):
        """Gets the mask of this NodeFullNetworkInterfacesInner.


        :return: The mask of this NodeFullNetworkInterfacesInner.
        :rtype: List[str]
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this NodeFullNetworkInterfacesInner.


        :param mask: The mask of this NodeFullNetworkInterfacesInner.
        :type mask: List[str]
        """

        self._mask = mask

    @property
    def name(self):
        """Gets the name of this NodeFullNetworkInterfacesInner.

        Interface name (for ex \"eth0\")

        :return: The name of this NodeFullNetworkInterfacesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeFullNetworkInterfacesInner.

        Interface name (for ex \"eth0\")

        :param name: The name of this NodeFullNetworkInterfacesInner.
        :type name: str
        """

        self._name = name

    @property
    def speed(self):
        """Gets the speed of this NodeFullNetworkInterfacesInner.

        Information about synchronization speed

        :return: The speed of this NodeFullNetworkInterfacesInner.
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this NodeFullNetworkInterfacesInner.

        Information about synchronization speed

        :param speed: The speed of this NodeFullNetworkInterfacesInner.
        :type speed: str
        """

        self._speed = speed

    @property
    def status(self):
        """Gets the status of this NodeFullNetworkInterfacesInner.

        network interface status (enabled or not, up or down)

        :return: The status of this NodeFullNetworkInterfacesInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NodeFullNetworkInterfacesInner.

        network interface status (enabled or not, up or down)

        :param status: The status of this NodeFullNetworkInterfacesInner.
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this NodeFullNetworkInterfacesInner.

        Information about the type of network interface

        :return: The type of this NodeFullNetworkInterfacesInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NodeFullNetworkInterfacesInner.

        Information about the type of network interface

        :param type: The type of this NodeFullNetworkInterfacesInner.
        :type type: str
        """

        self._type = type
