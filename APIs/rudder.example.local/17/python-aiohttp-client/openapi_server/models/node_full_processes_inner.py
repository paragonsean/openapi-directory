# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeFullProcessesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu_usage: int=None, description: str=None, memory: float=None, name: str=None, pid: int=None, started: date=None, tty: str=None, user: str=None, virtual_memory: int=None):
        """NodeFullProcessesInner - a model defined in OpenAPI

        :param cpu_usage: The cpu_usage of this NodeFullProcessesInner.
        :param description: The description of this NodeFullProcessesInner.
        :param memory: The memory of this NodeFullProcessesInner.
        :param name: The name of this NodeFullProcessesInner.
        :param pid: The pid of this NodeFullProcessesInner.
        :param started: The started of this NodeFullProcessesInner.
        :param tty: The tty of this NodeFullProcessesInner.
        :param user: The user of this NodeFullProcessesInner.
        :param virtual_memory: The virtual_memory of this NodeFullProcessesInner.
        """
        self.openapi_types = {
            'cpu_usage': int,
            'description': str,
            'memory': float,
            'name': str,
            'pid': int,
            'started': date,
            'tty': str,
            'user': str,
            'virtual_memory': int
        }

        self.attribute_map = {
            'cpu_usage': 'cpuUsage',
            'description': 'description',
            'memory': 'memory',
            'name': 'name',
            'pid': 'pid',
            'started': 'started',
            'tty': 'tty',
            'user': 'user',
            'virtual_memory': 'virtualMemory'
        }

        self._cpu_usage = cpu_usage
        self._description = description
        self._memory = memory
        self._name = name
        self._pid = pid
        self._started = started
        self._tty = tty
        self._user = user
        self._virtual_memory = virtual_memory

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeFullProcessesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node_full_processes_inner of this NodeFullProcessesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu_usage(self):
        """Gets the cpu_usage of this NodeFullProcessesInner.

        CPU used by the process (at inventory time)

        :return: The cpu_usage of this NodeFullProcessesInner.
        :rtype: int
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage):
        """Sets the cpu_usage of this NodeFullProcessesInner.

        CPU used by the process (at inventory time)

        :param cpu_usage: The cpu_usage of this NodeFullProcessesInner.
        :type cpu_usage: int
        """

        self._cpu_usage = cpu_usage

    @property
    def description(self):
        """Gets the description of this NodeFullProcessesInner.

        System provided description about the process

        :return: The description of this NodeFullProcessesInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NodeFullProcessesInner.

        System provided description about the process

        :param description: The description of this NodeFullProcessesInner.
        :type description: str
        """

        self._description = description

    @property
    def memory(self):
        """Gets the memory of this NodeFullProcessesInner.

        Memory allocated to the process (at inventory time)

        :return: The memory of this NodeFullProcessesInner.
        :rtype: float
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this NodeFullProcessesInner.

        Memory allocated to the process (at inventory time)

        :param memory: The memory of this NodeFullProcessesInner.
        :type memory: float
        """

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this NodeFullProcessesInner.

        Process name

        :return: The name of this NodeFullProcessesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeFullProcessesInner.

        Process name

        :param name: The name of this NodeFullProcessesInner.
        :type name: str
        """

        self._name = name

    @property
    def pid(self):
        """Gets the pid of this NodeFullProcessesInner.

        PID of the process

        :return: The pid of this NodeFullProcessesInner.
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this NodeFullProcessesInner.

        PID of the process

        :param pid: The pid of this NodeFullProcessesInner.
        :type pid: int
        """

        self._pid = pid

    @property
    def started(self):
        """Gets the started of this NodeFullProcessesInner.

        Started date and time of the process

        :return: The started of this NodeFullProcessesInner.
        :rtype: date
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this NodeFullProcessesInner.

        Started date and time of the process

        :param started: The started of this NodeFullProcessesInner.
        :type started: date
        """

        self._started = started

    @property
    def tty(self):
        """Gets the tty of this NodeFullProcessesInner.

        TTY to which the process is

        :return: The tty of this NodeFullProcessesInner.
        :rtype: str
        """
        return self._tty

    @tty.setter
    def tty(self, tty):
        """Sets the tty of this NodeFullProcessesInner.

        TTY to which the process is

        :param tty: The tty of this NodeFullProcessesInner.
        :type tty: str
        """

        self._tty = tty

    @property
    def user(self):
        """Gets the user of this NodeFullProcessesInner.

        User account who started the process

        :return: The user of this NodeFullProcessesInner.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this NodeFullProcessesInner.

        User account who started the process

        :param user: The user of this NodeFullProcessesInner.
        :type user: str
        """

        self._user = user

    @property
    def virtual_memory(self):
        """Gets the virtual_memory of this NodeFullProcessesInner.

        Virtual memory allocated to the process (at inventory time)

        :return: The virtual_memory of this NodeFullProcessesInner.
        :rtype: int
        """
        return self._virtual_memory

    @virtual_memory.setter
    def virtual_memory(self, virtual_memory):
        """Sets the virtual_memory of this NodeFullProcessesInner.

        Virtual memory allocated to the process (at inventory time)

        :param virtual_memory: The virtual_memory of this NodeFullProcessesInner.
        :type virtual_memory: int
        """

        self._virtual_memory = virtual_memory
