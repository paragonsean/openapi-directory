# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cve_check import CveCheck
from openapi_server import util


class GetLastCVECheck200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cve_checks: List[CveCheck]=None):
        """GetLastCVECheck200ResponseData - a model defined in OpenAPI

        :param cve_checks: The cve_checks of this GetLastCVECheck200ResponseData.
        """
        self.openapi_types = {
            'cve_checks': List[CveCheck]
        }

        self.attribute_map = {
            'cve_checks': 'CVEChecks'
        }

        self._cve_checks = cve_checks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetLastCVECheck200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getLastCVECheck_200_response_data of this GetLastCVECheck200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cve_checks(self):
        """Gets the cve_checks of this GetLastCVECheck200ResponseData.


        :return: The cve_checks of this GetLastCVECheck200ResponseData.
        :rtype: List[CveCheck]
        """
        return self._cve_checks

    @cve_checks.setter
    def cve_checks(self, cve_checks):
        """Sets the cve_checks of this GetLastCVECheck200ResponseData.


        :param cve_checks: The cve_checks of this GetLastCVECheck200ResponseData.
        :type cve_checks: List[CveCheck]
        """
        if cve_checks is None:
            raise ValueError("Invalid value for `cve_checks`, must not be `None`")

        self._cve_checks = cve_checks
