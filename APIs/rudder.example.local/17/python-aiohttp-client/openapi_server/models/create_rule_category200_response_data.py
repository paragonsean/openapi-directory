# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_category import RuleCategory
from openapi_server import util


class CreateRuleCategory200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_categories: List[RuleCategory]=None):
        """CreateRuleCategory200ResponseData - a model defined in OpenAPI

        :param rule_categories: The rule_categories of this CreateRuleCategory200ResponseData.
        """
        self.openapi_types = {
            'rule_categories': List[RuleCategory]
        }

        self.attribute_map = {
            'rule_categories': 'ruleCategories'
        }

        self._rule_categories = rule_categories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRuleCategory200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRuleCategory_200_response_data of this CreateRuleCategory200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_categories(self):
        """Gets the rule_categories of this CreateRuleCategory200ResponseData.


        :return: The rule_categories of this CreateRuleCategory200ResponseData.
        :rtype: List[RuleCategory]
        """
        return self._rule_categories

    @rule_categories.setter
    def rule_categories(self, rule_categories):
        """Sets the rule_categories of this CreateRuleCategory200ResponseData.


        :param rule_categories: The rule_categories of this CreateRuleCategory200ResponseData.
        :type rule_categories: List[RuleCategory]
        """
        if rule_categories is None:
            raise ValueError("Invalid value for `rule_categories`, must not be `None`")

        self._rule_categories = rule_categories
