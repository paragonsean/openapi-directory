# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeFullSoftwareInnerLicense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, expiration_date: date=None, name: str=None, oem: str=None, product_id: str=None, product_key: str=None):
        """NodeFullSoftwareInnerLicense - a model defined in OpenAPI

        :param description: The description of this NodeFullSoftwareInnerLicense.
        :param expiration_date: The expiration_date of this NodeFullSoftwareInnerLicense.
        :param name: The name of this NodeFullSoftwareInnerLicense.
        :param oem: The oem of this NodeFullSoftwareInnerLicense.
        :param product_id: The product_id of this NodeFullSoftwareInnerLicense.
        :param product_key: The product_key of this NodeFullSoftwareInnerLicense.
        """
        self.openapi_types = {
            'description': str,
            'expiration_date': date,
            'name': str,
            'oem': str,
            'product_id': str,
            'product_key': str
        }

        self.attribute_map = {
            'description': 'description',
            'expiration_date': 'expirationDate',
            'name': 'name',
            'oem': 'oem',
            'product_id': 'productId',
            'product_key': 'productKey'
        }

        self._description = description
        self._expiration_date = expiration_date
        self._name = name
        self._oem = oem
        self._product_id = product_id
        self._product_key = product_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeFullSoftwareInnerLicense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The node_full_software_inner_license of this NodeFullSoftwareInnerLicense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this NodeFullSoftwareInnerLicense.

        License description

        :return: The description of this NodeFullSoftwareInnerLicense.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NodeFullSoftwareInnerLicense.

        License description

        :param description: The description of this NodeFullSoftwareInnerLicense.
        :type description: str
        """

        self._description = description

    @property
    def expiration_date(self):
        """Gets the expiration_date of this NodeFullSoftwareInnerLicense.

        License expiration date

        :return: The expiration_date of this NodeFullSoftwareInnerLicense.
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this NodeFullSoftwareInnerLicense.

        License expiration date

        :param expiration_date: The expiration_date of this NodeFullSoftwareInnerLicense.
        :type expiration_date: date
        """

        self._expiration_date = expiration_date

    @property
    def name(self):
        """Gets the name of this NodeFullSoftwareInnerLicense.

        License name

        :return: The name of this NodeFullSoftwareInnerLicense.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeFullSoftwareInnerLicense.

        License name

        :param name: The name of this NodeFullSoftwareInnerLicense.
        :type name: str
        """

        self._name = name

    @property
    def oem(self):
        """Gets the oem of this NodeFullSoftwareInnerLicense.

        Is this an OEM license (and information)

        :return: The oem of this NodeFullSoftwareInnerLicense.
        :rtype: str
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """Sets the oem of this NodeFullSoftwareInnerLicense.

        Is this an OEM license (and information)

        :param oem: The oem of this NodeFullSoftwareInnerLicense.
        :type oem: str
        """

        self._oem = oem

    @property
    def product_id(self):
        """Gets the product_id of this NodeFullSoftwareInnerLicense.

        License product identifier

        :return: The product_id of this NodeFullSoftwareInnerLicense.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this NodeFullSoftwareInnerLicense.

        License product identifier

        :param product_id: The product_id of this NodeFullSoftwareInnerLicense.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def product_key(self):
        """Gets the product_key of this NodeFullSoftwareInnerLicense.

        License key

        :return: The product_key of this NodeFullSoftwareInnerLicense.
        :rtype: str
        """
        return self._product_key

    @product_key.setter
    def product_key(self, product_key):
        """Sets the product_key of this NodeFullSoftwareInnerLicense.

        License key

        :param product_key: The product_key of this NodeFullSoftwareInnerLicense.
        :type product_key: str
        """

        self._product_key = product_key
