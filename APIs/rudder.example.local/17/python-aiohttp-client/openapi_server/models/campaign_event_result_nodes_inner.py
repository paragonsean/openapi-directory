# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CampaignEventResultNodesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: date=None, nb_packages: int=None, node_id: str=None, status: str=None):
        """CampaignEventResultNodesInner - a model defined in OpenAPI

        :param _date: The _date of this CampaignEventResultNodesInner.
        :param nb_packages: The nb_packages of this CampaignEventResultNodesInner.
        :param node_id: The node_id of this CampaignEventResultNodesInner.
        :param status: The status of this CampaignEventResultNodesInner.
        """
        self.openapi_types = {
            '_date': date,
            'nb_packages': int,
            'node_id': str,
            'status': str
        }

        self.attribute_map = {
            '_date': 'date',
            'nb_packages': 'nbPackages',
            'node_id': 'nodeId',
            'status': 'status'
        }

        self.__date = _date
        self._nb_packages = nb_packages
        self._node_id = node_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignEventResultNodesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The campaign_event_result_nodes_inner of this CampaignEventResultNodesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this CampaignEventResultNodesInner.


        :return: The _date of this CampaignEventResultNodesInner.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CampaignEventResultNodesInner.


        :param _date: The _date of this CampaignEventResultNodesInner.
        :type _date: date
        """

        self.__date = _date

    @property
    def nb_packages(self):
        """Gets the nb_packages of this CampaignEventResultNodesInner.

        Number of software updated

        :return: The nb_packages of this CampaignEventResultNodesInner.
        :rtype: int
        """
        return self._nb_packages

    @nb_packages.setter
    def nb_packages(self, nb_packages):
        """Sets the nb_packages of this CampaignEventResultNodesInner.

        Number of software updated

        :param nb_packages: The nb_packages of this CampaignEventResultNodesInner.
        :type nb_packages: int
        """

        self._nb_packages = nb_packages

    @property
    def node_id(self):
        """Gets the node_id of this CampaignEventResultNodesInner.

        Node id

        :return: The node_id of this CampaignEventResultNodesInner.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this CampaignEventResultNodesInner.

        Node id

        :param node_id: The node_id of this CampaignEventResultNodesInner.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def status(self):
        """Gets the status of this CampaignEventResultNodesInner.

        Campaign status

        :return: The status of this CampaignEventResultNodesInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CampaignEventResultNodesInner.

        Campaign status

        :param status: The status of this CampaignEventResultNodesInner.
        :type status: str
        """
        allowed_values = ["success", "error", "scheduled", "missing"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
