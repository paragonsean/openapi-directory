# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.users import Users
from openapi_server import util


class GetUserInfo200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest: str=None, users: List[Users]=None):
        """GetUserInfo200ResponseData - a model defined in OpenAPI

        :param digest: The digest of this GetUserInfo200ResponseData.
        :param users: The users of this GetUserInfo200ResponseData.
        """
        self.openapi_types = {
            'digest': str,
            'users': List[Users]
        }

        self.attribute_map = {
            'digest': 'digest',
            'users': 'users'
        }

        self._digest = digest
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUserInfo200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getUserInfo_200_response_data of this GetUserInfo200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self):
        """Gets the digest of this GetUserInfo200ResponseData.


        :return: The digest of this GetUserInfo200ResponseData.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this GetUserInfo200ResponseData.


        :param digest: The digest of this GetUserInfo200ResponseData.
        :type digest: str
        """
        allowed_values = ["BCRYPT", "SHA512", "SHA256", "SHA1", "MD5"]  # noqa: E501
        if digest not in allowed_values:
            raise ValueError(
                "Invalid value for `digest` ({0}), must be one of {1}"
                .format(digest, allowed_values)
            )

        self._digest = digest

    @property
    def users(self):
        """Gets the users of this GetUserInfo200ResponseData.


        :return: The users of this GetUserInfo200ResponseData.
        :rtype: List[Users]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this GetUserInfo200ResponseData.


        :param users: The users of this GetUserInfo200ResponseData.
        :type users: List[Users]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users
