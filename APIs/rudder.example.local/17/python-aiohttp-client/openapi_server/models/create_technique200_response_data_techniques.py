# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.editor_technique import EditorTechnique
from openapi_server import util


class CreateTechnique200ResponseDataTechniques(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, technique: EditorTechnique=None):
        """CreateTechnique200ResponseDataTechniques - a model defined in OpenAPI

        :param technique: The technique of this CreateTechnique200ResponseDataTechniques.
        """
        self.openapi_types = {
            'technique': EditorTechnique
        }

        self.attribute_map = {
            'technique': 'technique'
        }

        self._technique = technique

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTechnique200ResponseDataTechniques':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTechnique_200_response_data_techniques of this CreateTechnique200ResponseDataTechniques.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def technique(self):
        """Gets the technique of this CreateTechnique200ResponseDataTechniques.


        :return: The technique of this CreateTechnique200ResponseDataTechniques.
        :rtype: EditorTechnique
        """
        return self._technique

    @technique.setter
    def technique(self, technique):
        """Sets the technique of this CreateTechnique200ResponseDataTechniques.


        :param technique: The technique of this CreateTechnique200ResponseDataTechniques.
        :type technique: EditorTechnique
        """
        if technique is None:
            raise ValueError("Invalid value for `technique`, must not be `None`")

        self._technique = technique
