# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.method_parameter import MethodParameter
from openapi_server.models.methods_condition import MethodsCondition
from openapi_server.models.methods_deprecated import MethodsDeprecated
from openapi_server import util


class Methods(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agents: List[str]=None, category: str=None, condition: MethodsCondition=None, deprecated: MethodsDeprecated=None, desc: str=None, documentation: str=None, id: str=None, name: str=None, parameters: List[MethodParameter]=None, version: str=None):
        """Methods - a model defined in OpenAPI

        :param agents: The agents of this Methods.
        :param category: The category of this Methods.
        :param condition: The condition of this Methods.
        :param deprecated: The deprecated of this Methods.
        :param desc: The desc of this Methods.
        :param documentation: The documentation of this Methods.
        :param id: The id of this Methods.
        :param name: The name of this Methods.
        :param parameters: The parameters of this Methods.
        :param version: The version of this Methods.
        """
        self.openapi_types = {
            'agents': List[str],
            'category': str,
            'condition': MethodsCondition,
            'deprecated': MethodsDeprecated,
            'desc': str,
            'documentation': str,
            'id': str,
            'name': str,
            'parameters': List[MethodParameter],
            'version': str
        }

        self.attribute_map = {
            'agents': 'agents',
            'category': 'category',
            'condition': 'condition',
            'deprecated': 'deprecated',
            'desc': 'desc',
            'documentation': 'documentation',
            'id': 'id',
            'name': 'name',
            'parameters': 'parameters',
            'version': 'version'
        }

        self._agents = agents
        self._category = category
        self._condition = condition
        self._deprecated = deprecated
        self._desc = desc
        self._documentation = documentation
        self._id = id
        self._name = name
        self._parameters = parameters
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Methods':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The methods of this Methods.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agents(self):
        """Gets the agents of this Methods.

        List of agents compatible with this method

        :return: The agents of this Methods.
        :rtype: List[str]
        """
        return self._agents

    @agents.setter
    def agents(self, agents):
        """Sets the agents of this Methods.

        List of agents compatible with this method

        :param agents: The agents of this Methods.
        :type agents: List[str]
        """
        if agents is None:
            raise ValueError("Invalid value for `agents`, must not be `None`")

        self._agents = agents

    @property
    def category(self):
        """Gets the category of this Methods.

        Category of this technique

        :return: The category of this Methods.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Methods.

        Category of this technique

        :param category: The category of this Methods.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def condition(self):
        """Gets the condition of this Methods.


        :return: The condition of this Methods.
        :rtype: MethodsCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Methods.


        :param condition: The condition of this Methods.
        :type condition: MethodsCondition
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")

        self._condition = condition

    @property
    def deprecated(self):
        """Gets the deprecated of this Methods.


        :return: The deprecated of this Methods.
        :rtype: MethodsDeprecated
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this Methods.


        :param deprecated: The deprecated of this Methods.
        :type deprecated: MethodsDeprecated
        """
        if deprecated is None:
            raise ValueError("Invalid value for `deprecated`, must not be `None`")

        self._deprecated = deprecated

    @property
    def desc(self):
        """Gets the desc of this Methods.

        Description of this method

        :return: The desc of this Methods.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Methods.

        Description of this method

        :param desc: The desc of this Methods.
        :type desc: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")

        self._desc = desc

    @property
    def documentation(self):
        """Gets the documentation of this Methods.

        Full documentation of this method

        :return: The documentation of this Methods.
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this Methods.

        Full documentation of this method

        :param documentation: The documentation of this Methods.
        :type documentation: str
        """
        if documentation is None:
            raise ValueError("Invalid value for `documentation`, must not be `None`")

        self._documentation = documentation

    @property
    def id(self):
        """Gets the id of this Methods.

        Method id

        :return: The id of this Methods.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Methods.

        Method id

        :param id: The id of this Methods.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Methods.

        Method name

        :return: The name of this Methods.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Methods.

        Method name

        :param name: The name of this Methods.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this Methods.

        Parameters for this technique

        :return: The parameters of this Methods.
        :rtype: List[MethodParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Methods.

        Parameters for this technique

        :param parameters: The parameters of this Methods.
        :type parameters: List[MethodParameter]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def version(self):
        """Gets the version of this Methods.

        Version of this technique

        :return: The version of this Methods.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Methods.

        Version of this technique

        :param version: The version of this Methods.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
