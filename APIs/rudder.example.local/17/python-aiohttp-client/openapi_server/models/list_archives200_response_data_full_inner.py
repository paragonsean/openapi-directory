# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListArchives200ResponseDataFullInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commiter: str=None, git_commit: str=None, id: str=None):
        """ListArchives200ResponseDataFullInner - a model defined in OpenAPI

        :param commiter: The commiter of this ListArchives200ResponseDataFullInner.
        :param git_commit: The git_commit of this ListArchives200ResponseDataFullInner.
        :param id: The id of this ListArchives200ResponseDataFullInner.
        """
        self.openapi_types = {
            'commiter': str,
            'git_commit': str,
            'id': str
        }

        self.attribute_map = {
            'commiter': 'commiter',
            'git_commit': 'gitCommit',
            'id': 'id'
        }

        self._commiter = commiter
        self._git_commit = git_commit
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListArchives200ResponseDataFullInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The listArchives_200_response_data_full_inner of this ListArchives200ResponseDataFullInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commiter(self):
        """Gets the commiter of this ListArchives200ResponseDataFullInner.


        :return: The commiter of this ListArchives200ResponseDataFullInner.
        :rtype: str
        """
        return self._commiter

    @commiter.setter
    def commiter(self, commiter):
        """Sets the commiter of this ListArchives200ResponseDataFullInner.


        :param commiter: The commiter of this ListArchives200ResponseDataFullInner.
        :type commiter: str
        """
        if commiter is None:
            raise ValueError("Invalid value for `commiter`, must not be `None`")

        self._commiter = commiter

    @property
    def git_commit(self):
        """Gets the git_commit of this ListArchives200ResponseDataFullInner.


        :return: The git_commit of this ListArchives200ResponseDataFullInner.
        :rtype: str
        """
        return self._git_commit

    @git_commit.setter
    def git_commit(self, git_commit):
        """Sets the git_commit of this ListArchives200ResponseDataFullInner.


        :param git_commit: The git_commit of this ListArchives200ResponseDataFullInner.
        :type git_commit: str
        """
        if git_commit is None:
            raise ValueError("Invalid value for `git_commit`, must not be `None`")

        self._git_commit = git_commit

    @property
    def id(self):
        """Gets the id of this ListArchives200ResponseDataFullInner.


        :return: The id of this ListArchives200ResponseDataFullInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ListArchives200ResponseDataFullInner.


        :param id: The id of this ListArchives200ResponseDataFullInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
