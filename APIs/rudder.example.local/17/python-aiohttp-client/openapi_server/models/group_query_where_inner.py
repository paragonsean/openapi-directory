# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupQueryWhereInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute: str=None, comparator: str=None, object_type: str=None, value: str=None):
        """GroupQueryWhereInner - a model defined in OpenAPI

        :param attribute: The attribute of this GroupQueryWhereInner.
        :param comparator: The comparator of this GroupQueryWhereInner.
        :param object_type: The object_type of this GroupQueryWhereInner.
        :param value: The value of this GroupQueryWhereInner.
        """
        self.openapi_types = {
            'attribute': str,
            'comparator': str,
            'object_type': str,
            'value': str
        }

        self.attribute_map = {
            'attribute': 'attribute',
            'comparator': 'comparator',
            'object_type': 'objectType',
            'value': 'value'
        }

        self._attribute = attribute
        self._comparator = comparator
        self._object_type = object_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupQueryWhereInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The group_query_where_inner of this GroupQueryWhereInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute(self):
        """Gets the attribute of this GroupQueryWhereInner.

        Attribute to compare

        :return: The attribute of this GroupQueryWhereInner.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this GroupQueryWhereInner.

        Attribute to compare

        :param attribute: The attribute of this GroupQueryWhereInner.
        :type attribute: str
        """

        self._attribute = attribute

    @property
    def comparator(self):
        """Gets the comparator of this GroupQueryWhereInner.

        Comparator to use

        :return: The comparator of this GroupQueryWhereInner.
        :rtype: str
        """
        return self._comparator

    @comparator.setter
    def comparator(self, comparator):
        """Sets the comparator of this GroupQueryWhereInner.

        Comparator to use

        :param comparator: The comparator of this GroupQueryWhereInner.
        :type comparator: str
        """

        self._comparator = comparator

    @property
    def object_type(self):
        """Gets the object_type of this GroupQueryWhereInner.

        Type of the object

        :return: The object_type of this GroupQueryWhereInner.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this GroupQueryWhereInner.

        Type of the object

        :param object_type: The object_type of this GroupQueryWhereInner.
        :type object_type: str
        """

        self._object_type = object_type

    @property
    def value(self):
        """Gets the value of this GroupQueryWhereInner.

        Value to compare against

        :return: The value of this GroupQueryWhereInner.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GroupQueryWhereInner.

        Value to compare against

        :param value: The value of this GroupQueryWhereInner.
        :type value: str
        """

        self._value = value
