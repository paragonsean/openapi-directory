# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_query_where_inner import GroupQueryWhereInner
from openapi_server import util


class GroupNewQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, composition: str='and', select: str='node', where: List[GroupQueryWhereInner]=None):
        """GroupNewQuery - a model defined in OpenAPI

        :param composition: The composition of this GroupNewQuery.
        :param select: The select of this GroupNewQuery.
        :param where: The where of this GroupNewQuery.
        """
        self.openapi_types = {
            'composition': str,
            'select': str,
            'where': List[GroupQueryWhereInner]
        }

        self.attribute_map = {
            'composition': 'composition',
            'select': 'select',
            'where': 'where'
        }

        self._composition = composition
        self._select = select
        self._where = where

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupNewQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The group_new_query of this GroupNewQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def composition(self):
        """Gets the composition of this GroupNewQuery.

        Boolean operator to use between each  `where` criteria.

        :return: The composition of this GroupNewQuery.
        :rtype: str
        """
        return self._composition

    @composition.setter
    def composition(self, composition):
        """Sets the composition of this GroupNewQuery.

        Boolean operator to use between each  `where` criteria.

        :param composition: The composition of this GroupNewQuery.
        :type composition: str
        """
        allowed_values = ["and", "or"]  # noqa: E501
        if composition not in allowed_values:
            raise ValueError(
                "Invalid value for `composition` ({0}), must be one of {1}"
                .format(composition, allowed_values)
            )

        self._composition = composition

    @property
    def select(self):
        """Gets the select of this GroupNewQuery.

        What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.

        :return: The select of this GroupNewQuery.
        :rtype: str
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this GroupNewQuery.

        What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.

        :param select: The select of this GroupNewQuery.
        :type select: str
        """

        self._select = select

    @property
    def where(self):
        """Gets the where of this GroupNewQuery.

        List of criteria

        :return: The where of this GroupNewQuery.
        :rtype: List[GroupQueryWhereInner]
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this GroupNewQuery.

        List of criteria

        :param where: The where of this GroupNewQuery.
        :type where: List[GroupQueryWhereInner]
        """

        self._where = where
