# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateNodes200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: List[str]=None, failed: List[str]=None):
        """CreateNodes200ResponseData - a model defined in OpenAPI

        :param created: The created of this CreateNodes200ResponseData.
        :param failed: The failed of this CreateNodes200ResponseData.
        """
        self.openapi_types = {
            'created': List[str],
            'failed': List[str]
        }

        self.attribute_map = {
            'created': 'created',
            'failed': 'failed'
        }

        self._created = created
        self._failed = failed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNodes200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createNodes_200_response_data of this CreateNodes200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this CreateNodes200ResponseData.


        :return: The created of this CreateNodes200ResponseData.
        :rtype: List[str]
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CreateNodes200ResponseData.


        :param created: The created of this CreateNodes200ResponseData.
        :type created: List[str]
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def failed(self):
        """Gets the failed of this CreateNodes200ResponseData.


        :return: The failed of this CreateNodes200ResponseData.
        :rtype: List[str]
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this CreateNodes200ResponseData.


        :param failed: The failed of this CreateNodes200ResponseData.
        :type failed: List[str]
        """
        if failed is None:
            raise ValueError("Invalid value for `failed`, must not be `None`")

        self._failed = failed
