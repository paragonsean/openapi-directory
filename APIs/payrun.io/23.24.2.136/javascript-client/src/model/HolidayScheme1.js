/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccrualPayCodes from './AccrualPayCodes';

/**
 * The HolidayScheme1 model module.
 * @module model/HolidayScheme1
 * @version 23.24.2.136
 */
class HolidayScheme1 {
    /**
     * Constructs a new <code>HolidayScheme1</code>.
     * @alias module:model/HolidayScheme1
     */
    constructor() { 
        
        HolidayScheme1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HolidayScheme1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HolidayScheme1} obj Optional instance to populate.
     * @return {module:model/HolidayScheme1} The populated <code>HolidayScheme1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HolidayScheme1();

            if (data.hasOwnProperty('AccrualPayCodes')) {
                obj['AccrualPayCodes'] = AccrualPayCodes.constructFromObject(data['AccrualPayCodes']);
            }
            if (data.hasOwnProperty('AllowExceedAnnualEntitlement')) {
                obj['AllowExceedAnnualEntitlement'] = ApiClient.convertToType(data['AllowExceedAnnualEntitlement'], 'Boolean');
            }
            if (data.hasOwnProperty('AllowNegativeBalance')) {
                obj['AllowNegativeBalance'] = ApiClient.convertToType(data['AllowNegativeBalance'], 'Boolean');
            }
            if (data.hasOwnProperty('AnnualEntitlementWeeks')) {
                obj['AnnualEntitlementWeeks'] = ApiClient.convertToType(data['AnnualEntitlementWeeks'], 'Number');
            }
            if (data.hasOwnProperty('BankHolidayInclusive')) {
                obj['BankHolidayInclusive'] = ApiClient.convertToType(data['BankHolidayInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('EffectiveDate')) {
                obj['EffectiveDate'] = ApiClient.convertToType(data['EffectiveDate'], 'Date');
            }
            if (data.hasOwnProperty('MaxCarryOverDays')) {
                obj['MaxCarryOverDays'] = ApiClient.convertToType(data['MaxCarryOverDays'], 'Number');
            }
            if (data.hasOwnProperty('NextRevisionDate')) {
                obj['NextRevisionDate'] = ApiClient.convertToType(data['NextRevisionDate'], 'Date');
            }
            if (data.hasOwnProperty('OffsetPayment')) {
                obj['OffsetPayment'] = ApiClient.convertToType(data['OffsetPayment'], 'Boolean');
            }
            if (data.hasOwnProperty('Revision')) {
                obj['Revision'] = ApiClient.convertToType(data['Revision'], 'Number');
            }
            if (data.hasOwnProperty('SchemeCeasedDate')) {
                obj['SchemeCeasedDate'] = ApiClient.convertToType(data['SchemeCeasedDate'], 'Date');
            }
            if (data.hasOwnProperty('SchemeKey')) {
                obj['SchemeKey'] = ApiClient.convertToType(data['SchemeKey'], 'String');
            }
            if (data.hasOwnProperty('SchemeName')) {
                obj['SchemeName'] = ApiClient.convertToType(data['SchemeName'], 'String');
            }
            if (data.hasOwnProperty('YearStartDay')) {
                obj['YearStartDay'] = ApiClient.convertToType(data['YearStartDay'], 'Number');
            }
            if (data.hasOwnProperty('YearStartMonth')) {
                obj['YearStartMonth'] = ApiClient.convertToType(data['YearStartMonth'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HolidayScheme1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HolidayScheme1</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AccrualPayCodes`
        if (data['AccrualPayCodes']) { // data not null
          AccrualPayCodes.validateJSON(data['AccrualPayCodes']);
        }
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // ensure the json data is a string
        if (data['SchemeKey'] && !(typeof data['SchemeKey'] === 'string' || data['SchemeKey'] instanceof String)) {
            throw new Error("Expected the field `SchemeKey` to be a primitive type in the JSON string but got " + data['SchemeKey']);
        }
        // ensure the json data is a string
        if (data['SchemeName'] && !(typeof data['SchemeName'] === 'string' || data['SchemeName'] instanceof String)) {
            throw new Error("Expected the field `SchemeName` to be a primitive type in the JSON string but got " + data['SchemeName']);
        }

        return true;
    }


}



/**
 * @member {module:model/AccrualPayCodes} AccrualPayCodes
 */
HolidayScheme1.prototype['AccrualPayCodes'] = undefined;

/**
 * The holiday schemes' allow exceed annual entitlement
 * @member {Boolean} AllowExceedAnnualEntitlement
 */
HolidayScheme1.prototype['AllowExceedAnnualEntitlement'] = undefined;

/**
 * The holiday schemes' allow negative balance
 * @member {Boolean} AllowNegativeBalance
 */
HolidayScheme1.prototype['AllowNegativeBalance'] = undefined;

/**
 * The holiday schemes' annual entitlement weeks
 * @member {Number} AnnualEntitlementWeeks
 */
HolidayScheme1.prototype['AnnualEntitlementWeeks'] = undefined;

/**
 * The holiday schemes' bank holiday inclusive
 * @member {Boolean} BankHolidayInclusive
 */
HolidayScheme1.prototype['BankHolidayInclusive'] = undefined;

/**
 * The holiday schemes' code
 * @member {String} Code
 */
HolidayScheme1.prototype['Code'] = undefined;

/**
 * The holiday schemes' effective date
 * @member {Date} EffectiveDate
 */
HolidayScheme1.prototype['EffectiveDate'] = undefined;

/**
 * The holiday schemes' max carry over days
 * @member {Number} MaxCarryOverDays
 */
HolidayScheme1.prototype['MaxCarryOverDays'] = undefined;

/**
 * The holiday schemes' next revision date
 * @member {Date} NextRevisionDate
 */
HolidayScheme1.prototype['NextRevisionDate'] = undefined;

/**
 * The holiday schemes' offset payment
 * @member {Boolean} OffsetPayment
 */
HolidayScheme1.prototype['OffsetPayment'] = undefined;

/**
 * The holiday schemes' revision
 * @member {Number} Revision
 */
HolidayScheme1.prototype['Revision'] = undefined;

/**
 * The holiday schemes' scheme ceased date
 * @member {Date} SchemeCeasedDate
 */
HolidayScheme1.prototype['SchemeCeasedDate'] = undefined;

/**
 * The holiday schemes' scheme key
 * @member {String} SchemeKey
 */
HolidayScheme1.prototype['SchemeKey'] = undefined;

/**
 * The holiday schemes' scheme name
 * @member {String} SchemeName
 */
HolidayScheme1.prototype['SchemeName'] = undefined;

/**
 * The holiday schemes' year start day
 * @member {Number} YearStartDay
 */
HolidayScheme1.prototype['YearStartDay'] = undefined;

/**
 * The holiday schemes' year start month
 * @member {Number} YearStartMonth
 */
HolidayScheme1.prototype['YearStartMonth'] = undefined;






export default HolidayScheme1;

