/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PensionablePayCodes from './PensionablePayCodes';
import QualifyingPayCodes from './QualifyingPayCodes';

/**
 * The Pension2 model module.
 * @module model/Pension2
 * @version 23.24.2.136
 */
class Pension2 {
    /**
     * Constructs a new <code>Pension2</code>.
     * @alias module:model/Pension2
     */
    constructor() { 
        
        Pension2.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Pension2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pension2} obj Optional instance to populate.
     * @return {module:model/Pension2} The populated <code>Pension2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pension2();

            if (data.hasOwnProperty('AECompatible')) {
                obj['AECompatible'] = ApiClient.convertToType(data['AECompatible'], 'Boolean');
            }
            if (data.hasOwnProperty('Certification')) {
                obj['Certification'] = ApiClient.convertToType(data['Certification'], 'String');
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('ContributionDeductionDay')) {
                obj['ContributionDeductionDay'] = ApiClient.convertToType(data['ContributionDeductionDay'], 'Number');
            }
            if (data.hasOwnProperty('EffectiveDate')) {
                obj['EffectiveDate'] = ApiClient.convertToType(data['EffectiveDate'], 'Date');
            }
            if (data.hasOwnProperty('EmployeeContributionCash')) {
                obj['EmployeeContributionCash'] = ApiClient.convertToType(data['EmployeeContributionCash'], 'Number');
            }
            if (data.hasOwnProperty('EmployeeContributionPercent')) {
                obj['EmployeeContributionPercent'] = ApiClient.convertToType(data['EmployeeContributionPercent'], 'Number');
            }
            if (data.hasOwnProperty('EmployerContributionCash')) {
                obj['EmployerContributionCash'] = ApiClient.convertToType(data['EmployerContributionCash'], 'Number');
            }
            if (data.hasOwnProperty('EmployerContributionPercent')) {
                obj['EmployerContributionPercent'] = ApiClient.convertToType(data['EmployerContributionPercent'], 'Number');
            }
            if (data.hasOwnProperty('EmployerNiSaving')) {
                obj['EmployerNiSaving'] = ApiClient.convertToType(data['EmployerNiSaving'], 'Boolean');
            }
            if (data.hasOwnProperty('EmployerNiSavingPercentage')) {
                obj['EmployerNiSavingPercentage'] = ApiClient.convertToType(data['EmployerNiSavingPercentage'], 'Number');
            }
            if (data.hasOwnProperty('Group')) {
                obj['Group'] = ApiClient.convertToType(data['Group'], 'String');
            }
            if (data.hasOwnProperty('LowerThreshold')) {
                obj['LowerThreshold'] = ApiClient.convertToType(data['LowerThreshold'], 'Number');
            }
            if (data.hasOwnProperty('MetaData')) {
                obj['MetaData'] = ApiClient.convertToType(data['MetaData'], Object);
            }
            if (data.hasOwnProperty('NextRevisionDate')) {
                obj['NextRevisionDate'] = ApiClient.convertToType(data['NextRevisionDate'], 'Date');
            }
            if (data.hasOwnProperty('PensionablePayCodes')) {
                obj['PensionablePayCodes'] = PensionablePayCodes.constructFromObject(data['PensionablePayCodes']);
            }
            if (data.hasOwnProperty('ProRataMethod')) {
                obj['ProRataMethod'] = ApiClient.convertToType(data['ProRataMethod'], 'String');
            }
            if (data.hasOwnProperty('ProviderEmployerRef')) {
                obj['ProviderEmployerRef'] = ApiClient.convertToType(data['ProviderEmployerRef'], 'String');
            }
            if (data.hasOwnProperty('ProviderName')) {
                obj['ProviderName'] = ApiClient.convertToType(data['ProviderName'], 'String');
            }
            if (data.hasOwnProperty('QualifyingPayCodes')) {
                obj['QualifyingPayCodes'] = QualifyingPayCodes.constructFromObject(data['QualifyingPayCodes']);
            }
            if (data.hasOwnProperty('RasRoundingOverride')) {
                obj['RasRoundingOverride'] = ApiClient.convertToType(data['RasRoundingOverride'], 'String');
            }
            if (data.hasOwnProperty('Revision')) {
                obj['Revision'] = ApiClient.convertToType(data['Revision'], 'Number');
            }
            if (data.hasOwnProperty('RoundingOption')) {
                obj['RoundingOption'] = ApiClient.convertToType(data['RoundingOption'], 'String');
            }
            if (data.hasOwnProperty('SalarySacrifice')) {
                obj['SalarySacrifice'] = ApiClient.convertToType(data['SalarySacrifice'], 'Boolean');
            }
            if (data.hasOwnProperty('SchemeName')) {
                obj['SchemeName'] = ApiClient.convertToType(data['SchemeName'], 'String');
            }
            if (data.hasOwnProperty('SubGroup')) {
                obj['SubGroup'] = ApiClient.convertToType(data['SubGroup'], 'String');
            }
            if (data.hasOwnProperty('TaxationMethod')) {
                obj['TaxationMethod'] = ApiClient.convertToType(data['TaxationMethod'], 'String');
            }
            if (data.hasOwnProperty('UpperThreshold')) {
                obj['UpperThreshold'] = ApiClient.convertToType(data['UpperThreshold'], 'Number');
            }
            if (data.hasOwnProperty('UseAEThresholds')) {
                obj['UseAEThresholds'] = ApiClient.convertToType(data['UseAEThresholds'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pension2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pension2</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Certification'] && !(typeof data['Certification'] === 'string' || data['Certification'] instanceof String)) {
            throw new Error("Expected the field `Certification` to be a primitive type in the JSON string but got " + data['Certification']);
        }
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // ensure the json data is a string
        if (data['Group'] && !(typeof data['Group'] === 'string' || data['Group'] instanceof String)) {
            throw new Error("Expected the field `Group` to be a primitive type in the JSON string but got " + data['Group']);
        }
        // validate the optional field `PensionablePayCodes`
        if (data['PensionablePayCodes']) { // data not null
          PensionablePayCodes.validateJSON(data['PensionablePayCodes']);
        }
        // ensure the json data is a string
        if (data['ProRataMethod'] && !(typeof data['ProRataMethod'] === 'string' || data['ProRataMethod'] instanceof String)) {
            throw new Error("Expected the field `ProRataMethod` to be a primitive type in the JSON string but got " + data['ProRataMethod']);
        }
        // ensure the json data is a string
        if (data['ProviderEmployerRef'] && !(typeof data['ProviderEmployerRef'] === 'string' || data['ProviderEmployerRef'] instanceof String)) {
            throw new Error("Expected the field `ProviderEmployerRef` to be a primitive type in the JSON string but got " + data['ProviderEmployerRef']);
        }
        // ensure the json data is a string
        if (data['ProviderName'] && !(typeof data['ProviderName'] === 'string' || data['ProviderName'] instanceof String)) {
            throw new Error("Expected the field `ProviderName` to be a primitive type in the JSON string but got " + data['ProviderName']);
        }
        // validate the optional field `QualifyingPayCodes`
        if (data['QualifyingPayCodes']) { // data not null
          QualifyingPayCodes.validateJSON(data['QualifyingPayCodes']);
        }
        // ensure the json data is a string
        if (data['RasRoundingOverride'] && !(typeof data['RasRoundingOverride'] === 'string' || data['RasRoundingOverride'] instanceof String)) {
            throw new Error("Expected the field `RasRoundingOverride` to be a primitive type in the JSON string but got " + data['RasRoundingOverride']);
        }
        // ensure the json data is a string
        if (data['RoundingOption'] && !(typeof data['RoundingOption'] === 'string' || data['RoundingOption'] instanceof String)) {
            throw new Error("Expected the field `RoundingOption` to be a primitive type in the JSON string but got " + data['RoundingOption']);
        }
        // ensure the json data is a string
        if (data['SchemeName'] && !(typeof data['SchemeName'] === 'string' || data['SchemeName'] instanceof String)) {
            throw new Error("Expected the field `SchemeName` to be a primitive type in the JSON string but got " + data['SchemeName']);
        }
        // ensure the json data is a string
        if (data['SubGroup'] && !(typeof data['SubGroup'] === 'string' || data['SubGroup'] instanceof String)) {
            throw new Error("Expected the field `SubGroup` to be a primitive type in the JSON string but got " + data['SubGroup']);
        }
        // ensure the json data is a string
        if (data['TaxationMethod'] && !(typeof data['TaxationMethod'] === 'string' || data['TaxationMethod'] instanceof String)) {
            throw new Error("Expected the field `TaxationMethod` to be a primitive type in the JSON string but got " + data['TaxationMethod']);
        }

        return true;
    }


}



/**
 * The pensions' a e compatible
 * @member {Boolean} AECompatible
 */
Pension2.prototype['AECompatible'] = undefined;

/**
 * The pensions' certification
 * @member {module:model/Pension2.CertificationEnum} Certification
 */
Pension2.prototype['Certification'] = undefined;

/**
 * The pensions' code
 * @member {String} Code
 */
Pension2.prototype['Code'] = undefined;

/**
 * The pensions' contribution deduction day
 * @member {Number} ContributionDeductionDay
 */
Pension2.prototype['ContributionDeductionDay'] = undefined;

/**
 * The pensions' effective date
 * @member {Date} EffectiveDate
 */
Pension2.prototype['EffectiveDate'] = undefined;

/**
 * The pensions' employee contribution cash
 * @member {Number} EmployeeContributionCash
 */
Pension2.prototype['EmployeeContributionCash'] = undefined;

/**
 * The pensions' employee contribution percent
 * @member {Number} EmployeeContributionPercent
 */
Pension2.prototype['EmployeeContributionPercent'] = undefined;

/**
 * The pensions' employer contribution cash
 * @member {Number} EmployerContributionCash
 */
Pension2.prototype['EmployerContributionCash'] = undefined;

/**
 * The pensions' employer contribution percent
 * @member {Number} EmployerContributionPercent
 */
Pension2.prototype['EmployerContributionPercent'] = undefined;

/**
 * The pensions' employer ni saving
 * @member {Boolean} EmployerNiSaving
 */
Pension2.prototype['EmployerNiSaving'] = undefined;

/**
 * The pensions' employer ni saving percentage
 * @member {Number} EmployerNiSavingPercentage
 */
Pension2.prototype['EmployerNiSavingPercentage'] = undefined;

/**
 * The pensions' group
 * @member {String} Group
 */
Pension2.prototype['Group'] = undefined;

/**
 * The pensions' lower threshold
 * @member {Number} LowerThreshold
 */
Pension2.prototype['LowerThreshold'] = undefined;

/**
 * The pensions' meta data
 * @member {Object} MetaData
 */
Pension2.prototype['MetaData'] = undefined;

/**
 * The pensions' next revision date
 * @member {Date} NextRevisionDate
 */
Pension2.prototype['NextRevisionDate'] = undefined;

/**
 * @member {module:model/PensionablePayCodes} PensionablePayCodes
 */
Pension2.prototype['PensionablePayCodes'] = undefined;

/**
 * The pensions' pro rata method
 * @member {module:model/Pension2.ProRataMethodEnum} ProRataMethod
 */
Pension2.prototype['ProRataMethod'] = undefined;

/**
 * The pensions' provider employer ref
 * @member {String} ProviderEmployerRef
 */
Pension2.prototype['ProviderEmployerRef'] = undefined;

/**
 * The pensions' provider name
 * @member {String} ProviderName
 */
Pension2.prototype['ProviderName'] = undefined;

/**
 * @member {module:model/QualifyingPayCodes} QualifyingPayCodes
 */
Pension2.prototype['QualifyingPayCodes'] = undefined;

/**
 * The pensions' ras rounding override
 * @member {module:model/Pension2.RasRoundingOverrideEnum} RasRoundingOverride
 */
Pension2.prototype['RasRoundingOverride'] = undefined;

/**
 * The pensions' revision
 * @member {Number} Revision
 */
Pension2.prototype['Revision'] = undefined;

/**
 * The pensions' rounding option
 * @member {module:model/Pension2.RoundingOptionEnum} RoundingOption
 */
Pension2.prototype['RoundingOption'] = undefined;

/**
 * The pensions' salary sacrifice
 * @member {Boolean} SalarySacrifice
 */
Pension2.prototype['SalarySacrifice'] = undefined;

/**
 * The pensions' scheme name
 * @member {String} SchemeName
 */
Pension2.prototype['SchemeName'] = undefined;

/**
 * The pensions' sub group
 * @member {String} SubGroup
 */
Pension2.prototype['SubGroup'] = undefined;

/**
 * The pensions' taxation method
 * @member {module:model/Pension2.TaxationMethodEnum} TaxationMethod
 */
Pension2.prototype['TaxationMethod'] = undefined;

/**
 * The pensions' upper threshold
 * @member {Number} UpperThreshold
 */
Pension2.prototype['UpperThreshold'] = undefined;

/**
 * The pensions' use a e thresholds
 * @member {Boolean} UseAEThresholds
 */
Pension2.prototype['UseAEThresholds'] = undefined;





/**
 * Allowed values for the <code>Certification</code> property.
 * @enum {String}
 * @readonly
 */
Pension2['CertificationEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "Set1"
     * @const
     */
    "Set1": "Set1",

    /**
     * value: "Set2"
     * @const
     */
    "Set2": "Set2",

    /**
     * value: "Set3"
     * @const
     */
    "Set3": "Set3"
};


/**
 * Allowed values for the <code>ProRataMethod</code> property.
 * @enum {String}
 * @readonly
 */
Pension2['ProRataMethodEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "Annual260Days"
     * @const
     */
    "Annual260Days": "Annual260Days",

    /**
     * value: "Annual365Days"
     * @const
     */
    "Annual365Days": "Annual365Days",

    /**
     * value: "AnnualQualifyingDays"
     * @const
     */
    "AnnualQualifyingDays": "AnnualQualifyingDays",

    /**
     * value: "DaysPerCalendarMonth"
     * @const
     */
    "DaysPerCalendarMonth": "DaysPerCalendarMonth",

    /**
     * value: "DaysPerTaxPeriod"
     * @const
     */
    "DaysPerTaxPeriod": "DaysPerTaxPeriod",

    /**
     * value: "WorkingDaysPerCalendarMonth"
     * @const
     */
    "WorkingDaysPerCalendarMonth": "WorkingDaysPerCalendarMonth",

    /**
     * value: "WeekDaysPerCalendarMonth"
     * @const
     */
    "WeekDaysPerCalendarMonth": "WeekDaysPerCalendarMonth"
};


/**
 * Allowed values for the <code>RasRoundingOverride</code> property.
 * @enum {String}
 * @readonly
 */
Pension2['RasRoundingOverrideEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "PennyUp"
     * @const
     */
    "PennyUp": "PennyUp",

    /**
     * value: "PennyDown"
     * @const
     */
    "PennyDown": "PennyDown",

    /**
     * value: "Bankers"
     * @const
     */
    "Bankers": "Bankers",

    /**
     * value: "FiveUp"
     * @const
     */
    "FiveUp": "FiveUp",

    /**
     * value: "FiveDown"
     * @const
     */
    "FiveDown": "FiveDown",

    /**
     * value: "Floor"
     * @const
     */
    "Floor": "Floor",

    /**
     * value: "Ceiling"
     * @const
     */
    "Ceiling": "Ceiling"
};


/**
 * Allowed values for the <code>RoundingOption</code> property.
 * @enum {String}
 * @readonly
 */
Pension2['RoundingOptionEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "PennyUp"
     * @const
     */
    "PennyUp": "PennyUp",

    /**
     * value: "PennyDown"
     * @const
     */
    "PennyDown": "PennyDown",

    /**
     * value: "Bankers"
     * @const
     */
    "Bankers": "Bankers",

    /**
     * value: "FiveUp"
     * @const
     */
    "FiveUp": "FiveUp",

    /**
     * value: "FiveDown"
     * @const
     */
    "FiveDown": "FiveDown",

    /**
     * value: "Floor"
     * @const
     */
    "Floor": "Floor",

    /**
     * value: "Ceiling"
     * @const
     */
    "Ceiling": "Ceiling"
};


/**
 * Allowed values for the <code>TaxationMethod</code> property.
 * @enum {String}
 * @readonly
 */
Pension2['TaxationMethodEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "NetBased"
     * @const
     */
    "NetBased": "NetBased",

    /**
     * value: "ReliefAtSource"
     * @const
     */
    "ReliefAtSource": "ReliefAtSource",

    /**
     * value: "TaxReliefExcluded"
     * @const
     */
    "TaxReliefExcluded": "TaxReliefExcluded"
};



export default Pension2;

