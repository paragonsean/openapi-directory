/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Group from './Group';
import Variable from './Variable';

/**
 * The Query1 model module.
 * @module model/Query1
 * @version 23.24.2.136
 */
class Query1 {
    /**
     * Constructs a new <code>Query1</code>.
     * @alias module:model/Query1
     */
    constructor() { 
        
        Query1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Query1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Query1} obj Optional instance to populate.
     * @return {module:model/Query1} The populated <code>Query1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Query1();

            if (data.hasOwnProperty('Encoding')) {
                obj['Encoding'] = ApiClient.convertToType(data['Encoding'], 'String');
            }
            if (data.hasOwnProperty('ExcludeNullOrEmptyElements')) {
                obj['ExcludeNullOrEmptyElements'] = ApiClient.convertToType(data['ExcludeNullOrEmptyElements'], 'Boolean');
            }
            if (data.hasOwnProperty('Groups')) {
                obj['Groups'] = Group.constructFromObject(data['Groups']);
            }
            if (data.hasOwnProperty('RootNodeName')) {
                obj['RootNodeName'] = ApiClient.convertToType(data['RootNodeName'], 'String');
            }
            if (data.hasOwnProperty('SuppressMetricAttributes')) {
                obj['SuppressMetricAttributes'] = ApiClient.convertToType(data['SuppressMetricAttributes'], 'Boolean');
            }
            if (data.hasOwnProperty('Variables')) {
                obj['Variables'] = Variable.constructFromObject(data['Variables']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Query1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Query1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Encoding'] && !(typeof data['Encoding'] === 'string' || data['Encoding'] instanceof String)) {
            throw new Error("Expected the field `Encoding` to be a primitive type in the JSON string but got " + data['Encoding']);
        }
        // validate the optional field `Groups`
        if (data['Groups']) { // data not null
          Group.validateJSON(data['Groups']);
        }
        // ensure the json data is a string
        if (data['RootNodeName'] && !(typeof data['RootNodeName'] === 'string' || data['RootNodeName'] instanceof String)) {
            throw new Error("Expected the field `RootNodeName` to be a primitive type in the JSON string but got " + data['RootNodeName']);
        }
        // validate the optional field `Variables`
        if (data['Variables']) { // data not null
          Variable.validateJSON(data['Variables']);
        }

        return true;
    }


}



/**
 * The querys' encoding
 * @member {String} Encoding
 */
Query1.prototype['Encoding'] = undefined;

/**
 * The querys' exclude null or empty elements
 * @member {Boolean} ExcludeNullOrEmptyElements
 */
Query1.prototype['ExcludeNullOrEmptyElements'] = undefined;

/**
 * @member {module:model/Group} Groups
 */
Query1.prototype['Groups'] = undefined;

/**
 * The querys' root node name
 * @member {String} RootNodeName
 */
Query1.prototype['RootNodeName'] = undefined;

/**
 * The querys' suppress metric attributes
 * @member {Boolean} SuppressMetricAttributes
 */
Query1.prototype['SuppressMetricAttributes'] = undefined;

/**
 * @member {module:model/Variable} Variables
 */
Query1.prototype['Variables'] = undefined;






export default Query1;

