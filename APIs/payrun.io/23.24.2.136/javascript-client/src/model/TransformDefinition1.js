/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransformDefinition1 model module.
 * @module model/TransformDefinition1
 * @version 23.24.2.136
 */
class TransformDefinition1 {
    /**
     * Constructs a new <code>TransformDefinition1</code>.
     * @alias module:model/TransformDefinition1
     */
    constructor() { 
        
        TransformDefinition1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransformDefinition1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransformDefinition1} obj Optional instance to populate.
     * @return {module:model/TransformDefinition1} The populated <code>TransformDefinition1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransformDefinition1();

            if (data.hasOwnProperty('Active')) {
                obj['Active'] = ApiClient.convertToType(data['Active'], 'Boolean');
            }
            if (data.hasOwnProperty('ContentType')) {
                obj['ContentType'] = ApiClient.convertToType(data['ContentType'], 'String');
            }
            if (data.hasOwnProperty('Definition')) {
                obj['Definition'] = ApiClient.convertToType(data['Definition'], 'String');
            }
            if (data.hasOwnProperty('DefinitionType')) {
                obj['DefinitionType'] = ApiClient.convertToType(data['DefinitionType'], 'String');
            }
            if (data.hasOwnProperty('Readonly')) {
                obj['Readonly'] = ApiClient.convertToType(data['Readonly'], 'Boolean');
            }
            if (data.hasOwnProperty('SupportedReports')) {
                obj['SupportedReports'] = ApiClient.convertToType(data['SupportedReports'], 'String');
            }
            if (data.hasOwnProperty('TaxYear')) {
                obj['TaxYear'] = ApiClient.convertToType(data['TaxYear'], 'Number');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransformDefinition1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransformDefinition1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ContentType'] && !(typeof data['ContentType'] === 'string' || data['ContentType'] instanceof String)) {
            throw new Error("Expected the field `ContentType` to be a primitive type in the JSON string but got " + data['ContentType']);
        }
        // ensure the json data is a string
        if (data['Definition'] && !(typeof data['Definition'] === 'string' || data['Definition'] instanceof String)) {
            throw new Error("Expected the field `Definition` to be a primitive type in the JSON string but got " + data['Definition']);
        }
        // ensure the json data is a string
        if (data['DefinitionType'] && !(typeof data['DefinitionType'] === 'string' || data['DefinitionType'] instanceof String)) {
            throw new Error("Expected the field `DefinitionType` to be a primitive type in the JSON string but got " + data['DefinitionType']);
        }
        // ensure the json data is a string
        if (data['SupportedReports'] && !(typeof data['SupportedReports'] === 'string' || data['SupportedReports'] instanceof String)) {
            throw new Error("Expected the field `SupportedReports` to be a primitive type in the JSON string but got " + data['SupportedReports']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['Version'] && !(typeof data['Version'] === 'string' || data['Version'] instanceof String)) {
            throw new Error("Expected the field `Version` to be a primitive type in the JSON string but got " + data['Version']);
        }

        return true;
    }


}



/**
 * The transform definitions' active
 * @member {Boolean} Active
 */
TransformDefinition1.prototype['Active'] = undefined;

/**
 * The transform definitions' content type
 * @member {String} ContentType
 */
TransformDefinition1.prototype['ContentType'] = undefined;

/**
 * The transform definitions' definition
 * @member {String} Definition
 */
TransformDefinition1.prototype['Definition'] = undefined;

/**
 * The transform definitions' definition type
 * @member {String} DefinitionType
 */
TransformDefinition1.prototype['DefinitionType'] = undefined;

/**
 * The transform definitions' readonly
 * @member {Boolean} Readonly
 */
TransformDefinition1.prototype['Readonly'] = undefined;

/**
 * The transform definitions' supported reports
 * @member {String} SupportedReports
 */
TransformDefinition1.prototype['SupportedReports'] = undefined;

/**
 * The transform definitions' tax year
 * @member {Number} TaxYear
 */
TransformDefinition1.prototype['TaxYear'] = undefined;

/**
 * The transform definitions' title
 * @member {String} Title
 */
TransformDefinition1.prototype['Title'] = undefined;

/**
 * The transform definitions' version
 * @member {String} Version
 */
TransformDefinition1.prototype['Version'] = undefined;






export default TransformDefinition1;

