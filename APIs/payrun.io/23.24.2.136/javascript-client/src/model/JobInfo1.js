/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Errors1 from './Errors1';

/**
 * The JobInfo1 model module.
 * @module model/JobInfo1
 * @version 23.24.2.136
 */
class JobInfo1 {
    /**
     * Constructs a new <code>JobInfo1</code>.
     * @alias module:model/JobInfo1
     */
    constructor() { 
        
        JobInfo1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobInfo1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobInfo1} obj Optional instance to populate.
     * @return {module:model/JobInfo1} The populated <code>JobInfo1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobInfo1();

            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('EmployerKey')) {
                obj['EmployerKey'] = ApiClient.convertToType(data['EmployerKey'], 'String');
            }
            if (data.hasOwnProperty('Errors')) {
                obj['Errors'] = Errors1.constructFromObject(data['Errors']);
            }
            if (data.hasOwnProperty('HoldingDate')) {
                obj['HoldingDate'] = ApiClient.convertToType(data['HoldingDate'], 'Date');
            }
            if (data.hasOwnProperty('JobId')) {
                obj['JobId'] = ApiClient.convertToType(data['JobId'], 'String');
            }
            if (data.hasOwnProperty('JobStatus')) {
                obj['JobStatus'] = ApiClient.convertToType(data['JobStatus'], 'String');
            }
            if (data.hasOwnProperty('JobType')) {
                obj['JobType'] = ApiClient.convertToType(data['JobType'], 'String');
            }
            if (data.hasOwnProperty('LastUpdated')) {
                obj['LastUpdated'] = ApiClient.convertToType(data['LastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('Progress')) {
                obj['Progress'] = ApiClient.convertToType(data['Progress'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobInfo1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobInfo1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['EmployerKey'] && !(typeof data['EmployerKey'] === 'string' || data['EmployerKey'] instanceof String)) {
            throw new Error("Expected the field `EmployerKey` to be a primitive type in the JSON string but got " + data['EmployerKey']);
        }
        // validate the optional field `Errors`
        if (data['Errors']) { // data not null
          Errors1.validateJSON(data['Errors']);
        }
        // ensure the json data is a string
        if (data['JobId'] && !(typeof data['JobId'] === 'string' || data['JobId'] instanceof String)) {
            throw new Error("Expected the field `JobId` to be a primitive type in the JSON string but got " + data['JobId']);
        }
        // ensure the json data is a string
        if (data['JobStatus'] && !(typeof data['JobStatus'] === 'string' || data['JobStatus'] instanceof String)) {
            throw new Error("Expected the field `JobStatus` to be a primitive type in the JSON string but got " + data['JobStatus']);
        }
        // ensure the json data is a string
        if (data['JobType'] && !(typeof data['JobType'] === 'string' || data['JobType'] instanceof String)) {
            throw new Error("Expected the field `JobType` to be a primitive type in the JSON string but got " + data['JobType']);
        }

        return true;
    }


}



/**
 * The job infos' created
 * @member {Date} Created
 */
JobInfo1.prototype['Created'] = undefined;

/**
 * The job infos' employer key
 * @member {String} EmployerKey
 */
JobInfo1.prototype['EmployerKey'] = undefined;

/**
 * @member {module:model/Errors1} Errors
 */
JobInfo1.prototype['Errors'] = undefined;

/**
 * The job infos' holding date
 * @member {Date} HoldingDate
 */
JobInfo1.prototype['HoldingDate'] = undefined;

/**
 * The job infos' job id
 * @member {String} JobId
 */
JobInfo1.prototype['JobId'] = undefined;

/**
 * The job infos' job status
 * @member {module:model/JobInfo1.JobStatusEnum} JobStatus
 */
JobInfo1.prototype['JobStatus'] = undefined;

/**
 * The job infos' job type
 * @member {String} JobType
 */
JobInfo1.prototype['JobType'] = undefined;

/**
 * The job infos' last updated
 * @member {Date} LastUpdated
 */
JobInfo1.prototype['LastUpdated'] = undefined;

/**
 * The job infos' progress
 * @member {Number} Progress
 */
JobInfo1.prototype['Progress'] = undefined;





/**
 * Allowed values for the <code>JobStatus</code> property.
 * @enum {String}
 * @readonly
 */
JobInfo1['JobStatusEnum'] = {

    /**
     * value: "New"
     * @const
     */
    "New": "New",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "InProgress"
     * @const
     */
    "InProgress": "InProgress",

    /**
     * value: "Success"
     * @const
     */
    "Success": "Success",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "OnHold"
     * @const
     */
    "OnHold": "OnHold"
};



export default JobInfo1;

