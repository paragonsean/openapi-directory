/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Employee3 from './Employee3';
import PayRun2 from './PayRun2';
import SubContractor2 from './SubContractor2';

/**
 * The JournalLine1 model module.
 * @module model/JournalLine1
 * @version 23.24.2.136
 */
class JournalLine1 {
    /**
     * Constructs a new <code>JournalLine1</code>.
     * @alias module:model/JournalLine1
     */
    constructor() { 
        
        JournalLine1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JournalLine1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JournalLine1} obj Optional instance to populate.
     * @return {module:model/JournalLine1} The populated <code>JournalLine1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JournalLine1();

            if (data.hasOwnProperty('Credit')) {
                obj['Credit'] = ApiClient.convertToType(data['Credit'], 'Number');
            }
            if (data.hasOwnProperty('Debit')) {
                obj['Debit'] = ApiClient.convertToType(data['Debit'], 'Number');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Employee')) {
                obj['Employee'] = Employee3.constructFromObject(data['Employee']);
            }
            if (data.hasOwnProperty('Generated')) {
                obj['Generated'] = ApiClient.convertToType(data['Generated'], 'Date');
            }
            if (data.hasOwnProperty('Grouping')) {
                obj['Grouping'] = ApiClient.convertToType(data['Grouping'], 'String');
            }
            if (data.hasOwnProperty('LedgerTarget')) {
                obj['LedgerTarget'] = ApiClient.convertToType(data['LedgerTarget'], 'String');
            }
            if (data.hasOwnProperty('NomCode')) {
                obj['NomCode'] = ApiClient.convertToType(data['NomCode'], 'String');
            }
            if (data.hasOwnProperty('PayFrequency')) {
                obj['PayFrequency'] = ApiClient.convertToType(data['PayFrequency'], 'String');
            }
            if (data.hasOwnProperty('PayRun')) {
                obj['PayRun'] = PayRun2.constructFromObject(data['PayRun']);
            }
            if (data.hasOwnProperty('SubContractor')) {
                obj['SubContractor'] = SubContractor2.constructFromObject(data['SubContractor']);
            }
            if (data.hasOwnProperty('SubNomCode')) {
                obj['SubNomCode'] = ApiClient.convertToType(data['SubNomCode'], 'String');
            }
            if (data.hasOwnProperty('TaxPeriod')) {
                obj['TaxPeriod'] = ApiClient.convertToType(data['TaxPeriod'], 'Number');
            }
            if (data.hasOwnProperty('TaxYear')) {
                obj['TaxYear'] = ApiClient.convertToType(data['TaxYear'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JournalLine1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JournalLine1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // validate the optional field `Employee`
        if (data['Employee']) { // data not null
          Employee3.validateJSON(data['Employee']);
        }
        // ensure the json data is a string
        if (data['Grouping'] && !(typeof data['Grouping'] === 'string' || data['Grouping'] instanceof String)) {
            throw new Error("Expected the field `Grouping` to be a primitive type in the JSON string but got " + data['Grouping']);
        }
        // ensure the json data is a string
        if (data['LedgerTarget'] && !(typeof data['LedgerTarget'] === 'string' || data['LedgerTarget'] instanceof String)) {
            throw new Error("Expected the field `LedgerTarget` to be a primitive type in the JSON string but got " + data['LedgerTarget']);
        }
        // ensure the json data is a string
        if (data['NomCode'] && !(typeof data['NomCode'] === 'string' || data['NomCode'] instanceof String)) {
            throw new Error("Expected the field `NomCode` to be a primitive type in the JSON string but got " + data['NomCode']);
        }
        // ensure the json data is a string
        if (data['PayFrequency'] && !(typeof data['PayFrequency'] === 'string' || data['PayFrequency'] instanceof String)) {
            throw new Error("Expected the field `PayFrequency` to be a primitive type in the JSON string but got " + data['PayFrequency']);
        }
        // validate the optional field `PayRun`
        if (data['PayRun']) { // data not null
          PayRun2.validateJSON(data['PayRun']);
        }
        // validate the optional field `SubContractor`
        if (data['SubContractor']) { // data not null
          SubContractor2.validateJSON(data['SubContractor']);
        }
        // ensure the json data is a string
        if (data['SubNomCode'] && !(typeof data['SubNomCode'] === 'string' || data['SubNomCode'] instanceof String)) {
            throw new Error("Expected the field `SubNomCode` to be a primitive type in the JSON string but got " + data['SubNomCode']);
        }

        return true;
    }


}



/**
 * The journal lines' credit
 * @member {Number} Credit
 */
JournalLine1.prototype['Credit'] = undefined;

/**
 * The journal lines' debit
 * @member {Number} Debit
 */
JournalLine1.prototype['Debit'] = undefined;

/**
 * The journal lines' description
 * @member {String} Description
 */
JournalLine1.prototype['Description'] = undefined;

/**
 * @member {module:model/Employee3} Employee
 */
JournalLine1.prototype['Employee'] = undefined;

/**
 * The journal lines' generated
 * @member {Date} Generated
 */
JournalLine1.prototype['Generated'] = undefined;

/**
 * The journal lines' grouping
 * @member {String} Grouping
 */
JournalLine1.prototype['Grouping'] = undefined;

/**
 * The journal lines' ledger target
 * @member {String} LedgerTarget
 */
JournalLine1.prototype['LedgerTarget'] = undefined;

/**
 * The journal lines' nom code
 * @member {String} NomCode
 */
JournalLine1.prototype['NomCode'] = undefined;

/**
 * The journal lines' pay frequency
 * @member {module:model/JournalLine1.PayFrequencyEnum} PayFrequency
 */
JournalLine1.prototype['PayFrequency'] = undefined;

/**
 * @member {module:model/PayRun2} PayRun
 */
JournalLine1.prototype['PayRun'] = undefined;

/**
 * @member {module:model/SubContractor2} SubContractor
 */
JournalLine1.prototype['SubContractor'] = undefined;

/**
 * The journal lines' sub nom code
 * @member {String} SubNomCode
 */
JournalLine1.prototype['SubNomCode'] = undefined;

/**
 * The journal lines' tax period
 * @member {Number} TaxPeriod
 */
JournalLine1.prototype['TaxPeriod'] = undefined;

/**
 * The journal lines' tax year
 * @member {Number} TaxYear
 */
JournalLine1.prototype['TaxYear'] = undefined;





/**
 * Allowed values for the <code>PayFrequency</code> property.
 * @enum {String}
 * @readonly
 */
JournalLine1['PayFrequencyEnum'] = {

    /**
     * value: "Weekly"
     * @const
     */
    "Weekly": "Weekly",

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "TwoWeekly"
     * @const
     */
    "TwoWeekly": "TwoWeekly",

    /**
     * value: "FourWeekly"
     * @const
     */
    "FourWeekly": "FourWeekly",

    /**
     * value: "Yearly"
     * @const
     */
    "Yearly": "Yearly"
};



export default JournalLine1;

