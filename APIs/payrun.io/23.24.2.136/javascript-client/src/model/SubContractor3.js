/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address2 from './Address2';
import BankAccount2 from './BankAccount2';

/**
 * The SubContractor3 model module.
 * @module model/SubContractor3
 * @version 23.24.2.136
 */
class SubContractor3 {
    /**
     * Constructs a new <code>SubContractor3</code>.
     * @alias module:model/SubContractor3
     */
    constructor() { 
        
        SubContractor3.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubContractor3</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubContractor3} obj Optional instance to populate.
     * @return {module:model/SubContractor3} The populated <code>SubContractor3</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubContractor3();

            if (data.hasOwnProperty('Address')) {
                obj['Address'] = Address2.constructFromObject(data['Address']);
            }
            if (data.hasOwnProperty('BankAccount')) {
                obj['BankAccount'] = BankAccount2.constructFromObject(data['BankAccount']);
            }
            if (data.hasOwnProperty('BusinessType')) {
                obj['BusinessType'] = ApiClient.convertToType(data['BusinessType'], 'String');
            }
            if (data.hasOwnProperty('CompanyName')) {
                obj['CompanyName'] = ApiClient.convertToType(data['CompanyName'], 'String');
            }
            if (data.hasOwnProperty('CompanyRegistrationNumber')) {
                obj['CompanyRegistrationNumber'] = ApiClient.convertToType(data['CompanyRegistrationNumber'], 'String');
            }
            if (data.hasOwnProperty('Deactivated')) {
                obj['Deactivated'] = ApiClient.convertToType(data['Deactivated'], 'Boolean');
            }
            if (data.hasOwnProperty('EffectiveDate')) {
                obj['EffectiveDate'] = ApiClient.convertToType(data['EffectiveDate'], 'Date');
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('Initials')) {
                obj['Initials'] = ApiClient.convertToType(data['Initials'], 'String');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('MetaData')) {
                obj['MetaData'] = ApiClient.convertToType(data['MetaData'], Object);
            }
            if (data.hasOwnProperty('MiddleName')) {
                obj['MiddleName'] = ApiClient.convertToType(data['MiddleName'], 'String');
            }
            if (data.hasOwnProperty('NextRevisionDate')) {
                obj['NextRevisionDate'] = ApiClient.convertToType(data['NextRevisionDate'], 'Date');
            }
            if (data.hasOwnProperty('NiNumber')) {
                obj['NiNumber'] = ApiClient.convertToType(data['NiNumber'], 'String');
            }
            if (data.hasOwnProperty('PartnershipName')) {
                obj['PartnershipName'] = ApiClient.convertToType(data['PartnershipName'], 'String');
            }
            if (data.hasOwnProperty('PartnershipUniqueTaxReference')) {
                obj['PartnershipUniqueTaxReference'] = ApiClient.convertToType(data['PartnershipUniqueTaxReference'], 'String');
            }
            if (data.hasOwnProperty('PayFrequency')) {
                obj['PayFrequency'] = ApiClient.convertToType(data['PayFrequency'], 'String');
            }
            if (data.hasOwnProperty('PaymentMethod')) {
                obj['PaymentMethod'] = ApiClient.convertToType(data['PaymentMethod'], 'String');
            }
            if (data.hasOwnProperty('Region')) {
                obj['Region'] = ApiClient.convertToType(data['Region'], 'String');
            }
            if (data.hasOwnProperty('Revision')) {
                obj['Revision'] = ApiClient.convertToType(data['Revision'], 'Number');
            }
            if (data.hasOwnProperty('TaxationStatus')) {
                obj['TaxationStatus'] = ApiClient.convertToType(data['TaxationStatus'], 'String');
            }
            if (data.hasOwnProperty('Telephone')) {
                obj['Telephone'] = ApiClient.convertToType(data['Telephone'], 'String');
            }
            if (data.hasOwnProperty('Territory')) {
                obj['Territory'] = ApiClient.convertToType(data['Territory'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('TradingName')) {
                obj['TradingName'] = ApiClient.convertToType(data['TradingName'], 'String');
            }
            if (data.hasOwnProperty('UniqueTaxReference')) {
                obj['UniqueTaxReference'] = ApiClient.convertToType(data['UniqueTaxReference'], 'String');
            }
            if (data.hasOwnProperty('VatRegistered')) {
                obj['VatRegistered'] = ApiClient.convertToType(data['VatRegistered'], 'Boolean');
            }
            if (data.hasOwnProperty('VatRegistrationNumber')) {
                obj['VatRegistrationNumber'] = ApiClient.convertToType(data['VatRegistrationNumber'], 'String');
            }
            if (data.hasOwnProperty('VerificationDate')) {
                obj['VerificationDate'] = ApiClient.convertToType(data['VerificationDate'], 'Date');
            }
            if (data.hasOwnProperty('VerificationNumber')) {
                obj['VerificationNumber'] = ApiClient.convertToType(data['VerificationNumber'], 'String');
            }
            if (data.hasOwnProperty('WorksNumber')) {
                obj['WorksNumber'] = ApiClient.convertToType(data['WorksNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubContractor3</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubContractor3</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Address`
        if (data['Address']) { // data not null
          Address2.validateJSON(data['Address']);
        }
        // validate the optional field `BankAccount`
        if (data['BankAccount']) { // data not null
          BankAccount2.validateJSON(data['BankAccount']);
        }
        // ensure the json data is a string
        if (data['BusinessType'] && !(typeof data['BusinessType'] === 'string' || data['BusinessType'] instanceof String)) {
            throw new Error("Expected the field `BusinessType` to be a primitive type in the JSON string but got " + data['BusinessType']);
        }
        // ensure the json data is a string
        if (data['CompanyName'] && !(typeof data['CompanyName'] === 'string' || data['CompanyName'] instanceof String)) {
            throw new Error("Expected the field `CompanyName` to be a primitive type in the JSON string but got " + data['CompanyName']);
        }
        // ensure the json data is a string
        if (data['CompanyRegistrationNumber'] && !(typeof data['CompanyRegistrationNumber'] === 'string' || data['CompanyRegistrationNumber'] instanceof String)) {
            throw new Error("Expected the field `CompanyRegistrationNumber` to be a primitive type in the JSON string but got " + data['CompanyRegistrationNumber']);
        }
        // ensure the json data is a string
        if (data['FirstName'] && !(typeof data['FirstName'] === 'string' || data['FirstName'] instanceof String)) {
            throw new Error("Expected the field `FirstName` to be a primitive type in the JSON string but got " + data['FirstName']);
        }
        // ensure the json data is a string
        if (data['Initials'] && !(typeof data['Initials'] === 'string' || data['Initials'] instanceof String)) {
            throw new Error("Expected the field `Initials` to be a primitive type in the JSON string but got " + data['Initials']);
        }
        // ensure the json data is a string
        if (data['LastName'] && !(typeof data['LastName'] === 'string' || data['LastName'] instanceof String)) {
            throw new Error("Expected the field `LastName` to be a primitive type in the JSON string but got " + data['LastName']);
        }
        // ensure the json data is a string
        if (data['MiddleName'] && !(typeof data['MiddleName'] === 'string' || data['MiddleName'] instanceof String)) {
            throw new Error("Expected the field `MiddleName` to be a primitive type in the JSON string but got " + data['MiddleName']);
        }
        // ensure the json data is a string
        if (data['NiNumber'] && !(typeof data['NiNumber'] === 'string' || data['NiNumber'] instanceof String)) {
            throw new Error("Expected the field `NiNumber` to be a primitive type in the JSON string but got " + data['NiNumber']);
        }
        // ensure the json data is a string
        if (data['PartnershipName'] && !(typeof data['PartnershipName'] === 'string' || data['PartnershipName'] instanceof String)) {
            throw new Error("Expected the field `PartnershipName` to be a primitive type in the JSON string but got " + data['PartnershipName']);
        }
        // ensure the json data is a string
        if (data['PartnershipUniqueTaxReference'] && !(typeof data['PartnershipUniqueTaxReference'] === 'string' || data['PartnershipUniqueTaxReference'] instanceof String)) {
            throw new Error("Expected the field `PartnershipUniqueTaxReference` to be a primitive type in the JSON string but got " + data['PartnershipUniqueTaxReference']);
        }
        // ensure the json data is a string
        if (data['PayFrequency'] && !(typeof data['PayFrequency'] === 'string' || data['PayFrequency'] instanceof String)) {
            throw new Error("Expected the field `PayFrequency` to be a primitive type in the JSON string but got " + data['PayFrequency']);
        }
        // ensure the json data is a string
        if (data['PaymentMethod'] && !(typeof data['PaymentMethod'] === 'string' || data['PaymentMethod'] instanceof String)) {
            throw new Error("Expected the field `PaymentMethod` to be a primitive type in the JSON string but got " + data['PaymentMethod']);
        }
        // ensure the json data is a string
        if (data['Region'] && !(typeof data['Region'] === 'string' || data['Region'] instanceof String)) {
            throw new Error("Expected the field `Region` to be a primitive type in the JSON string but got " + data['Region']);
        }
        // ensure the json data is a string
        if (data['TaxationStatus'] && !(typeof data['TaxationStatus'] === 'string' || data['TaxationStatus'] instanceof String)) {
            throw new Error("Expected the field `TaxationStatus` to be a primitive type in the JSON string but got " + data['TaxationStatus']);
        }
        // ensure the json data is a string
        if (data['Telephone'] && !(typeof data['Telephone'] === 'string' || data['Telephone'] instanceof String)) {
            throw new Error("Expected the field `Telephone` to be a primitive type in the JSON string but got " + data['Telephone']);
        }
        // ensure the json data is a string
        if (data['Territory'] && !(typeof data['Territory'] === 'string' || data['Territory'] instanceof String)) {
            throw new Error("Expected the field `Territory` to be a primitive type in the JSON string but got " + data['Territory']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['TradingName'] && !(typeof data['TradingName'] === 'string' || data['TradingName'] instanceof String)) {
            throw new Error("Expected the field `TradingName` to be a primitive type in the JSON string but got " + data['TradingName']);
        }
        // ensure the json data is a string
        if (data['UniqueTaxReference'] && !(typeof data['UniqueTaxReference'] === 'string' || data['UniqueTaxReference'] instanceof String)) {
            throw new Error("Expected the field `UniqueTaxReference` to be a primitive type in the JSON string but got " + data['UniqueTaxReference']);
        }
        // ensure the json data is a string
        if (data['VatRegistrationNumber'] && !(typeof data['VatRegistrationNumber'] === 'string' || data['VatRegistrationNumber'] instanceof String)) {
            throw new Error("Expected the field `VatRegistrationNumber` to be a primitive type in the JSON string but got " + data['VatRegistrationNumber']);
        }
        // ensure the json data is a string
        if (data['VerificationNumber'] && !(typeof data['VerificationNumber'] === 'string' || data['VerificationNumber'] instanceof String)) {
            throw new Error("Expected the field `VerificationNumber` to be a primitive type in the JSON string but got " + data['VerificationNumber']);
        }
        // ensure the json data is a string
        if (data['WorksNumber'] && !(typeof data['WorksNumber'] === 'string' || data['WorksNumber'] instanceof String)) {
            throw new Error("Expected the field `WorksNumber` to be a primitive type in the JSON string but got " + data['WorksNumber']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address2} Address
 */
SubContractor3.prototype['Address'] = undefined;

/**
 * @member {module:model/BankAccount2} BankAccount
 */
SubContractor3.prototype['BankAccount'] = undefined;

/**
 * The sub contractors' business type
 * @member {module:model/SubContractor3.BusinessTypeEnum} BusinessType
 */
SubContractor3.prototype['BusinessType'] = undefined;

/**
 * The sub contractors' company name
 * @member {String} CompanyName
 */
SubContractor3.prototype['CompanyName'] = undefined;

/**
 * The sub contractors' company registration number
 * @member {String} CompanyRegistrationNumber
 */
SubContractor3.prototype['CompanyRegistrationNumber'] = undefined;

/**
 * The sub contractors' deactivated
 * @member {Boolean} Deactivated
 */
SubContractor3.prototype['Deactivated'] = undefined;

/**
 * The sub contractors' effective date
 * @member {Date} EffectiveDate
 */
SubContractor3.prototype['EffectiveDate'] = undefined;

/**
 * The sub contractors' first name
 * @member {String} FirstName
 */
SubContractor3.prototype['FirstName'] = undefined;

/**
 * The sub contractors' initials
 * @member {String} Initials
 */
SubContractor3.prototype['Initials'] = undefined;

/**
 * The sub contractors' last name
 * @member {String} LastName
 */
SubContractor3.prototype['LastName'] = undefined;

/**
 * The sub contractors' meta data
 * @member {Object} MetaData
 */
SubContractor3.prototype['MetaData'] = undefined;

/**
 * The sub contractors' middle name
 * @member {String} MiddleName
 */
SubContractor3.prototype['MiddleName'] = undefined;

/**
 * The sub contractors' next revision date
 * @member {Date} NextRevisionDate
 */
SubContractor3.prototype['NextRevisionDate'] = undefined;

/**
 * The sub contractors' ni number
 * @member {String} NiNumber
 */
SubContractor3.prototype['NiNumber'] = undefined;

/**
 * The sub contractors' partnership name
 * @member {String} PartnershipName
 */
SubContractor3.prototype['PartnershipName'] = undefined;

/**
 * The sub contractors' partnership unique tax reference
 * @member {String} PartnershipUniqueTaxReference
 */
SubContractor3.prototype['PartnershipUniqueTaxReference'] = undefined;

/**
 * The sub contractors' pay frequency
 * @member {module:model/SubContractor3.PayFrequencyEnum} PayFrequency
 */
SubContractor3.prototype['PayFrequency'] = undefined;

/**
 * The sub contractors' payment method
 * @member {module:model/SubContractor3.PaymentMethodEnum} PaymentMethod
 */
SubContractor3.prototype['PaymentMethod'] = undefined;

/**
 * The sub contractors' region
 * @member {module:model/SubContractor3.RegionEnum} Region
 */
SubContractor3.prototype['Region'] = undefined;

/**
 * The sub contractors' revision
 * @member {Number} Revision
 */
SubContractor3.prototype['Revision'] = undefined;

/**
 * The sub contractors' taxation status
 * @member {module:model/SubContractor3.TaxationStatusEnum} TaxationStatus
 */
SubContractor3.prototype['TaxationStatus'] = undefined;

/**
 * The sub contractors' telephone
 * @member {String} Telephone
 */
SubContractor3.prototype['Telephone'] = undefined;

/**
 * The sub contractors' territory
 * @member {module:model/SubContractor3.TerritoryEnum} Territory
 */
SubContractor3.prototype['Territory'] = undefined;

/**
 * The sub contractors' title
 * @member {String} Title
 */
SubContractor3.prototype['Title'] = undefined;

/**
 * The sub contractors' trading name
 * @member {String} TradingName
 */
SubContractor3.prototype['TradingName'] = undefined;

/**
 * The sub contractors' unique tax reference
 * @member {String} UniqueTaxReference
 */
SubContractor3.prototype['UniqueTaxReference'] = undefined;

/**
 * The sub contractors' vat registered
 * @member {Boolean} VatRegistered
 */
SubContractor3.prototype['VatRegistered'] = undefined;

/**
 * The sub contractors' vat registration number
 * @member {String} VatRegistrationNumber
 */
SubContractor3.prototype['VatRegistrationNumber'] = undefined;

/**
 * The sub contractors' verification date
 * @member {Date} VerificationDate
 */
SubContractor3.prototype['VerificationDate'] = undefined;

/**
 * The sub contractors' verification number
 * @member {String} VerificationNumber
 */
SubContractor3.prototype['VerificationNumber'] = undefined;

/**
 * The sub contractors' works number
 * @member {String} WorksNumber
 */
SubContractor3.prototype['WorksNumber'] = undefined;





/**
 * Allowed values for the <code>BusinessType</code> property.
 * @enum {String}
 * @readonly
 */
SubContractor3['BusinessTypeEnum'] = {

    /**
     * value: "SoleTrader"
     * @const
     */
    "SoleTrader": "SoleTrader",

    /**
     * value: "Company"
     * @const
     */
    "Company": "Company",

    /**
     * value: "Partnership"
     * @const
     */
    "Partnership": "Partnership",

    /**
     * value: "Trust"
     * @const
     */
    "Trust": "Trust"
};


/**
 * Allowed values for the <code>PayFrequency</code> property.
 * @enum {String}
 * @readonly
 */
SubContractor3['PayFrequencyEnum'] = {

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "Weekly"
     * @const
     */
    "Weekly": "Weekly"
};


/**
 * Allowed values for the <code>PaymentMethod</code> property.
 * @enum {String}
 * @readonly
 */
SubContractor3['PaymentMethodEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "Cash"
     * @const
     */
    "Cash": "Cash",

    /**
     * value: "Cheque"
     * @const
     */
    "Cheque": "Cheque",

    /**
     * value: "BACS"
     * @const
     */
    "BACS": "BACS",

    /**
     * value: "FasterPayments"
     * @const
     */
    "FasterPayments": "FasterPayments",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>Region</code> property.
 * @enum {String}
 * @readonly
 */
SubContractor3['RegionEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "England"
     * @const
     */
    "England": "England",

    /**
     * value: "Scotland"
     * @const
     */
    "Scotland": "Scotland",

    /**
     * value: "Wales"
     * @const
     */
    "Wales": "Wales"
};


/**
 * Allowed values for the <code>TaxationStatus</code> property.
 * @enum {String}
 * @readonly
 */
SubContractor3['TaxationStatusEnum'] = {

    /**
     * value: "Unmatched"
     * @const
     */
    "Unmatched": "Unmatched",

    /**
     * value: "Net"
     * @const
     */
    "Net": "Net",

    /**
     * value: "Gross"
     * @const
     */
    "Gross": "Gross"
};


/**
 * Allowed values for the <code>Territory</code> property.
 * @enum {String}
 * @readonly
 */
SubContractor3['TerritoryEnum'] = {

    /**
     * value: "UnitedKingdom"
     * @const
     */
    "UnitedKingdom": "UnitedKingdom"
};



export default SubContractor3;

