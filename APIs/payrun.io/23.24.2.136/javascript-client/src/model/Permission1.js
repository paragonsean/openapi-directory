/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Permission1 model module.
 * @module model/Permission1
 * @version 23.24.2.136
 */
class Permission1 {
    /**
     * Constructs a new <code>Permission1</code>.
     * @alias module:model/Permission1
     */
    constructor() { 
        
        Permission1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Permission1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Permission1} obj Optional instance to populate.
     * @return {module:model/Permission1} The populated <code>Permission1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Permission1();

            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Expression')) {
                obj['Expression'] = ApiClient.convertToType(data['Expression'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Policy')) {
                obj['Policy'] = ApiClient.convertToType(data['Policy'], 'String');
            }
            if (data.hasOwnProperty('Verbs')) {
                obj['Verbs'] = ApiClient.convertToType(data['Verbs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Permission1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Permission1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Expression'] && !(typeof data['Expression'] === 'string' || data['Expression'] instanceof String)) {
            throw new Error("Expected the field `Expression` to be a primitive type in the JSON string but got " + data['Expression']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Policy'] && !(typeof data['Policy'] === 'string' || data['Policy'] instanceof String)) {
            throw new Error("Expected the field `Policy` to be a primitive type in the JSON string but got " + data['Policy']);
        }
        // ensure the json data is a string
        if (data['Verbs'] && !(typeof data['Verbs'] === 'string' || data['Verbs'] instanceof String)) {
            throw new Error("Expected the field `Verbs` to be a primitive type in the JSON string but got " + data['Verbs']);
        }

        return true;
    }


}



/**
 * The permissions' description
 * @member {String} Description
 */
Permission1.prototype['Description'] = undefined;

/**
 * The permissions' expression
 * @member {String} Expression
 */
Permission1.prototype['Expression'] = undefined;

/**
 * The permissions' name
 * @member {String} Name
 */
Permission1.prototype['Name'] = undefined;

/**
 * The permissions' policy
 * @member {module:model/Permission1.PolicyEnum} Policy
 */
Permission1.prototype['Policy'] = undefined;

/**
 * The permissions' verbs
 * @member {module:model/Permission1.VerbsEnum} Verbs
 */
Permission1.prototype['Verbs'] = undefined;





/**
 * Allowed values for the <code>Policy</code> property.
 * @enum {String}
 * @readonly
 */
Permission1['PolicyEnum'] = {

    /**
     * value: "Allow"
     * @const
     */
    "Allow": "Allow",

    /**
     * value: "Deny"
     * @const
     */
    "Deny": "Deny"
};


/**
 * Allowed values for the <code>Verbs</code> property.
 * @enum {String}
 * @readonly
 */
Permission1['VerbsEnum'] = {

    /**
     * value: "Read"
     * @const
     */
    "Read": "Read",

    /**
     * value: "Write"
     * @const
     */
    "Write": "Write",

    /**
     * value: "Delete"
     * @const
     */
    "Delete": "Delete",

    /**
     * value: "All"
     * @const
     */
    "All": "All"
};



export default Permission1;

