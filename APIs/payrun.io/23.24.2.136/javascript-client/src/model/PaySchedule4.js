/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PaySchedule4 model module.
 * @module model/PaySchedule4
 * @version 23.24.2.136
 */
class PaySchedule4 {
    /**
     * Constructs a new <code>PaySchedule4</code>.
     * @alias module:model/PaySchedule4
     */
    constructor() { 
        
        PaySchedule4.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaySchedule4</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaySchedule4} obj Optional instance to populate.
     * @return {module:model/PaySchedule4} The populated <code>PaySchedule4</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaySchedule4();

            if (data.hasOwnProperty('MetaData')) {
                obj['MetaData'] = ApiClient.convertToType(data['MetaData'], Object);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PayFrequency')) {
                obj['PayFrequency'] = ApiClient.convertToType(data['PayFrequency'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaySchedule4</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaySchedule4</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['PayFrequency'] && !(typeof data['PayFrequency'] === 'string' || data['PayFrequency'] instanceof String)) {
            throw new Error("Expected the field `PayFrequency` to be a primitive type in the JSON string but got " + data['PayFrequency']);
        }

        return true;
    }


}



/**
 * The pay schedules' meta data
 * @member {Object} MetaData
 */
PaySchedule4.prototype['MetaData'] = undefined;

/**
 * The pay schedules' name
 * @member {String} Name
 */
PaySchedule4.prototype['Name'] = undefined;

/**
 * The pay schedules' pay frequency
 * @member {module:model/PaySchedule4.PayFrequencyEnum} PayFrequency
 */
PaySchedule4.prototype['PayFrequency'] = undefined;





/**
 * Allowed values for the <code>PayFrequency</code> property.
 * @enum {String}
 * @readonly
 */
PaySchedule4['PayFrequencyEnum'] = {

    /**
     * value: "Weekly"
     * @const
     */
    "Weekly": "Weekly",

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "TwoWeekly"
     * @const
     */
    "TwoWeekly": "TwoWeekly",

    /**
     * value: "FourWeekly"
     * @const
     */
    "FourWeekly": "FourWeekly",

    /**
     * value: "Yearly"
     * @const
     */
    "Yearly": "Yearly"
};



export default PaySchedule4;

