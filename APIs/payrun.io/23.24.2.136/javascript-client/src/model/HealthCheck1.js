/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HealthCheck1 model module.
 * @module model/HealthCheck1
 * @version 23.24.2.136
 */
class HealthCheck1 {
    /**
     * Constructs a new <code>HealthCheck1</code>.
     * @alias module:model/HealthCheck1
     */
    constructor() { 
        
        HealthCheck1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HealthCheck1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HealthCheck1} obj Optional instance to populate.
     * @return {module:model/HealthCheck1} The populated <code>HealthCheck1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HealthCheck1();

            if (data.hasOwnProperty('Info')) {
                obj['Info'] = ApiClient.convertToType(data['Info'], 'String');
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HealthCheck1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HealthCheck1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Info'] && !(typeof data['Info'] === 'string' || data['Info'] instanceof String)) {
            throw new Error("Expected the field `Info` to be a primitive type in the JSON string but got " + data['Info']);
        }
        // ensure the json data is a string
        if (data['Version'] && !(typeof data['Version'] === 'string' || data['Version'] instanceof String)) {
            throw new Error("Expected the field `Version` to be a primitive type in the JSON string but got " + data['Version']);
        }

        return true;
    }


}



/**
 * The health checks' info
 * @member {String} Info
 */
HealthCheck1.prototype['Info'] = undefined;

/**
 * The health checks' version
 * @member {String} Version
 */
HealthCheck1.prototype['Version'] = undefined;






export default HealthCheck1;

