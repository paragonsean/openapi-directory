/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaySchedule2 from './PaySchedule2';
import ProceedingPayRun from './ProceedingPayRun';

/**
 * The PayRun3 model module.
 * @module model/PayRun3
 * @version 23.24.2.136
 */
class PayRun3 {
    /**
     * Constructs a new <code>PayRun3</code>.
     * @alias module:model/PayRun3
     */
    constructor() { 
        
        PayRun3.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PayRun3</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayRun3} obj Optional instance to populate.
     * @return {module:model/PayRun3} The populated <code>PayRun3</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayRun3();

            if (data.hasOwnProperty('Executed')) {
                obj['Executed'] = ApiClient.convertToType(data['Executed'], 'Date');
            }
            if (data.hasOwnProperty('IsSupplementary')) {
                obj['IsSupplementary'] = ApiClient.convertToType(data['IsSupplementary'], 'Boolean');
            }
            if (data.hasOwnProperty('PayFrequency')) {
                obj['PayFrequency'] = ApiClient.convertToType(data['PayFrequency'], 'String');
            }
            if (data.hasOwnProperty('PaySchedule')) {
                obj['PaySchedule'] = PaySchedule2.constructFromObject(data['PaySchedule']);
            }
            if (data.hasOwnProperty('PaymentDate')) {
                obj['PaymentDate'] = ApiClient.convertToType(data['PaymentDate'], 'Date');
            }
            if (data.hasOwnProperty('PeriodEnd')) {
                obj['PeriodEnd'] = ApiClient.convertToType(data['PeriodEnd'], 'Date');
            }
            if (data.hasOwnProperty('PeriodStart')) {
                obj['PeriodStart'] = ApiClient.convertToType(data['PeriodStart'], 'Date');
            }
            if (data.hasOwnProperty('ProceedingPayRun')) {
                obj['ProceedingPayRun'] = ProceedingPayRun.constructFromObject(data['ProceedingPayRun']);
            }
            if (data.hasOwnProperty('Sequence')) {
                obj['Sequence'] = ApiClient.convertToType(data['Sequence'], 'Number');
            }
            if (data.hasOwnProperty('TaxPeriod')) {
                obj['TaxPeriod'] = ApiClient.convertToType(data['TaxPeriod'], 'Number');
            }
            if (data.hasOwnProperty('TaxYear')) {
                obj['TaxYear'] = ApiClient.convertToType(data['TaxYear'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayRun3</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayRun3</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['PayFrequency'] && !(typeof data['PayFrequency'] === 'string' || data['PayFrequency'] instanceof String)) {
            throw new Error("Expected the field `PayFrequency` to be a primitive type in the JSON string but got " + data['PayFrequency']);
        }
        // validate the optional field `PaySchedule`
        if (data['PaySchedule']) { // data not null
          PaySchedule2.validateJSON(data['PaySchedule']);
        }
        // validate the optional field `ProceedingPayRun`
        if (data['ProceedingPayRun']) { // data not null
          ProceedingPayRun.validateJSON(data['ProceedingPayRun']);
        }

        return true;
    }


}



/**
 * The pay runs' executed
 * @member {Date} Executed
 */
PayRun3.prototype['Executed'] = undefined;

/**
 * The pay runs' is supplementary
 * @member {Boolean} IsSupplementary
 */
PayRun3.prototype['IsSupplementary'] = undefined;

/**
 * The pay runs' pay frequency
 * @member {module:model/PayRun3.PayFrequencyEnum} PayFrequency
 */
PayRun3.prototype['PayFrequency'] = undefined;

/**
 * @member {module:model/PaySchedule2} PaySchedule
 */
PayRun3.prototype['PaySchedule'] = undefined;

/**
 * The pay runs' payment date
 * @member {Date} PaymentDate
 */
PayRun3.prototype['PaymentDate'] = undefined;

/**
 * The pay runs' period end
 * @member {Date} PeriodEnd
 */
PayRun3.prototype['PeriodEnd'] = undefined;

/**
 * The pay runs' period start
 * @member {Date} PeriodStart
 */
PayRun3.prototype['PeriodStart'] = undefined;

/**
 * @member {module:model/ProceedingPayRun} ProceedingPayRun
 */
PayRun3.prototype['ProceedingPayRun'] = undefined;

/**
 * The pay runs' sequence
 * @member {Number} Sequence
 */
PayRun3.prototype['Sequence'] = undefined;

/**
 * The pay runs' tax period
 * @member {Number} TaxPeriod
 */
PayRun3.prototype['TaxPeriod'] = undefined;

/**
 * The pay runs' tax year
 * @member {Number} TaxYear
 */
PayRun3.prototype['TaxYear'] = undefined;





/**
 * Allowed values for the <code>PayFrequency</code> property.
 * @enum {String}
 * @readonly
 */
PayRun3['PayFrequencyEnum'] = {

    /**
     * value: "Weekly"
     * @const
     */
    "Weekly": "Weekly",

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "TwoWeekly"
     * @const
     */
    "TwoWeekly": "TwoWeekly",

    /**
     * value: "FourWeekly"
     * @const
     */
    "FourWeekly": "FourWeekly",

    /**
     * value: "Yearly"
     * @const
     */
    "Yearly": "Yearly"
};



export default PayRun3;

