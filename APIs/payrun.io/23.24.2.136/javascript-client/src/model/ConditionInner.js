/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConditionInner model module.
 * @module model/ConditionInner
 * @version 23.24.2.136
 */
class ConditionInner {
    /**
     * Constructs a new <code>ConditionInner</code>.
     * @alias module:model/ConditionInner
     */
    constructor() { 
        
        ConditionInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConditionInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConditionInner} obj Optional instance to populate.
     * @return {module:model/ConditionInner} The populated <code>ConditionInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConditionInner();

            if (data.hasOwnProperty('@ValueA')) {
                obj['@ValueA'] = ApiClient.convertToType(data['@ValueA'], 'String');
            }
            if (data.hasOwnProperty('@ValueB')) {
                obj['@ValueB'] = ApiClient.convertToType(data['@ValueB'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConditionInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConditionInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['@ValueA'] && !(typeof data['@ValueA'] === 'string' || data['@ValueA'] instanceof String)) {
            throw new Error("Expected the field `@ValueA` to be a primitive type in the JSON string but got " + data['@ValueA']);
        }
        // ensure the json data is a string
        if (data['@ValueB'] && !(typeof data['@ValueB'] === 'string' || data['@ValueB'] instanceof String)) {
            throw new Error("Expected the field `@ValueB` to be a primitive type in the JSON string but got " + data['@ValueB']);
        }

        return true;
    }


}



/**
 * The compare condition bases' value a
 * @member {String} @ValueA
 */
ConditionInner.prototype['@ValueA'] = undefined;

/**
 * The compare condition bases' value b
 * @member {String} @ValueB
 */
ConditionInner.prototype['@ValueB'] = undefined;






export default ConditionInner;

