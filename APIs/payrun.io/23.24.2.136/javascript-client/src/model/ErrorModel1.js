/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Errors from './Errors';

/**
 * The ErrorModel1 model module.
 * @module model/ErrorModel1
 * @version 23.24.2.136
 */
class ErrorModel1 {
    /**
     * Constructs a new <code>ErrorModel1</code>.
     * @alias module:model/ErrorModel1
     */
    constructor() { 
        
        ErrorModel1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErrorModel1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorModel1} obj Optional instance to populate.
     * @return {module:model/ErrorModel1} The populated <code>ErrorModel1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorModel1();

            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('ErrorCategory')) {
                obj['ErrorCategory'] = ApiClient.convertToType(data['ErrorCategory'], 'String');
            }
            if (data.hasOwnProperty('Errors')) {
                obj['Errors'] = Errors.constructFromObject(data['Errors']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorModel1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorModel1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['ErrorCategory'] && !(typeof data['ErrorCategory'] === 'string' || data['ErrorCategory'] instanceof String)) {
            throw new Error("Expected the field `ErrorCategory` to be a primitive type in the JSON string but got " + data['ErrorCategory']);
        }
        // validate the optional field `Errors`
        if (data['Errors']) { // data not null
          Errors.validateJSON(data['Errors']);
        }

        return true;
    }


}



/**
 * The error models' description
 * @member {String} Description
 */
ErrorModel1.prototype['Description'] = undefined;

/**
 * The error models' error category
 * @member {module:model/ErrorModel1.ErrorCategoryEnum} ErrorCategory
 */
ErrorModel1.prototype['ErrorCategory'] = undefined;

/**
 * @member {module:model/Errors} Errors
 */
ErrorModel1.prototype['Errors'] = undefined;





/**
 * Allowed values for the <code>ErrorCategory</code> property.
 * @enum {String}
 * @readonly
 */
ErrorModel1['ErrorCategoryEnum'] = {

    /**
     * value: "General"
     * @const
     */
    "General": "General",

    /**
     * value: "NotFound"
     * @const
     */
    "NotFound": "NotFound",

    /**
     * value: "NotAuthorised"
     * @const
     */
    "NotAuthorised": "NotAuthorised",

    /**
     * value: "ValidationFailure"
     * @const
     */
    "ValidationFailure": "ValidationFailure"
};



export default ErrorModel1;

