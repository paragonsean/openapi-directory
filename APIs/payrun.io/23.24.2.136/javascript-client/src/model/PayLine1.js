/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PayLine1 model module.
 * @module model/PayLine1
 * @version 23.24.2.136
 */
class PayLine1 {
    /**
     * Constructs a new <code>PayLine1</code>.
     * @alias module:model/PayLine1
     */
    constructor() { 
        
        PayLine1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PayLine1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayLine1} obj Optional instance to populate.
     * @return {module:model/PayLine1} The populated <code>PayLine1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayLine1();

            if (data.hasOwnProperty('Calculator')) {
                obj['Calculator'] = ApiClient.convertToType(data['Calculator'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Generated')) {
                obj['Generated'] = ApiClient.convertToType(data['Generated'], 'Date');
            }
            if (data.hasOwnProperty('PayCode')) {
                obj['PayCode'] = ApiClient.convertToType(data['PayCode'], 'String');
            }
            if (data.hasOwnProperty('PayCodeType')) {
                obj['PayCodeType'] = ApiClient.convertToType(data['PayCodeType'], 'String');
            }
            if (data.hasOwnProperty('PayRunSequence')) {
                obj['PayRunSequence'] = ApiClient.convertToType(data['PayRunSequence'], 'Number');
            }
            if (data.hasOwnProperty('PaymentDate')) {
                obj['PaymentDate'] = ApiClient.convertToType(data['PaymentDate'], 'Date');
            }
            if (data.hasOwnProperty('TaxPeriod')) {
                obj['TaxPeriod'] = ApiClient.convertToType(data['TaxPeriod'], 'Number');
            }
            if (data.hasOwnProperty('TaxYear')) {
                obj['TaxYear'] = ApiClient.convertToType(data['TaxYear'], 'Number');
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = ApiClient.convertToType(data['Value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayLine1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayLine1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Calculator'] && !(typeof data['Calculator'] === 'string' || data['Calculator'] instanceof String)) {
            throw new Error("Expected the field `Calculator` to be a primitive type in the JSON string but got " + data['Calculator']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['PayCode'] && !(typeof data['PayCode'] === 'string' || data['PayCode'] instanceof String)) {
            throw new Error("Expected the field `PayCode` to be a primitive type in the JSON string but got " + data['PayCode']);
        }
        // ensure the json data is a string
        if (data['PayCodeType'] && !(typeof data['PayCodeType'] === 'string' || data['PayCodeType'] instanceof String)) {
            throw new Error("Expected the field `PayCodeType` to be a primitive type in the JSON string but got " + data['PayCodeType']);
        }

        return true;
    }


}



/**
 * The pay lines' calculator
 * @member {String} Calculator
 */
PayLine1.prototype['Calculator'] = undefined;

/**
 * The pay lines' description
 * @member {String} Description
 */
PayLine1.prototype['Description'] = undefined;

/**
 * The pay lines' generated
 * @member {Date} Generated
 */
PayLine1.prototype['Generated'] = undefined;

/**
 * The pay lines' pay code
 * @member {String} PayCode
 */
PayLine1.prototype['PayCode'] = undefined;

/**
 * The pay lines' pay code type
 * @member {module:model/PayLine1.PayCodeTypeEnum} PayCodeType
 */
PayLine1.prototype['PayCodeType'] = undefined;

/**
 * The pay lines' pay run sequence
 * @member {Number} PayRunSequence
 */
PayLine1.prototype['PayRunSequence'] = undefined;

/**
 * The pay lines' payment date
 * @member {Date} PaymentDate
 */
PayLine1.prototype['PaymentDate'] = undefined;

/**
 * The pay lines' tax period
 * @member {Number} TaxPeriod
 */
PayLine1.prototype['TaxPeriod'] = undefined;

/**
 * The pay lines' tax year
 * @member {Number} TaxYear
 */
PayLine1.prototype['TaxYear'] = undefined;

/**
 * The pay lines' value
 * @member {Number} Value
 */
PayLine1.prototype['Value'] = undefined;





/**
 * Allowed values for the <code>PayCodeType</code> property.
 * @enum {String}
 * @readonly
 */
PayLine1['PayCodeTypeEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "Payment"
     * @const
     */
    "Payment": "Payment",

    /**
     * value: "Deduction"
     * @const
     */
    "Deduction": "Deduction"
};



export default PayLine1;

