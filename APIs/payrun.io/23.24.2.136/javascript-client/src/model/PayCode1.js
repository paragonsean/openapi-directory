/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NominalCode3 from './NominalCode3';

/**
 * The PayCode1 model module.
 * @module model/PayCode1
 * @version 23.24.2.136
 */
class PayCode1 {
    /**
     * Constructs a new <code>PayCode1</code>.
     * @alias module:model/PayCode1
     */
    constructor() { 
        
        PayCode1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PayCode1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayCode1} obj Optional instance to populate.
     * @return {module:model/PayCode1} The populated <code>PayCode1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayCode1();

            if (data.hasOwnProperty('Benefit')) {
                obj['Benefit'] = ApiClient.convertToType(data['Benefit'], 'Boolean');
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('EffectiveDate')) {
                obj['EffectiveDate'] = ApiClient.convertToType(data['EffectiveDate'], 'Date');
            }
            if (data.hasOwnProperty('MetaData')) {
                obj['MetaData'] = ApiClient.convertToType(data['MetaData'], Object);
            }
            if (data.hasOwnProperty('NextRevisionDate')) {
                obj['NextRevisionDate'] = ApiClient.convertToType(data['NextRevisionDate'], 'Date');
            }
            if (data.hasOwnProperty('Niable')) {
                obj['Niable'] = ApiClient.convertToType(data['Niable'], 'Boolean');
            }
            if (data.hasOwnProperty('NominalCode')) {
                obj['NominalCode'] = NominalCode3.constructFromObject(data['NominalCode']);
            }
            if (data.hasOwnProperty('NonArrestable')) {
                obj['NonArrestable'] = ApiClient.convertToType(data['NonArrestable'], 'Boolean');
            }
            if (data.hasOwnProperty('Notional')) {
                obj['Notional'] = ApiClient.convertToType(data['Notional'], 'Boolean');
            }
            if (data.hasOwnProperty('Readonly')) {
                obj['Readonly'] = ApiClient.convertToType(data['Readonly'], 'Boolean');
            }
            if (data.hasOwnProperty('Region')) {
                obj['Region'] = ApiClient.convertToType(data['Region'], 'String');
            }
            if (data.hasOwnProperty('Revision')) {
                obj['Revision'] = ApiClient.convertToType(data['Revision'], 'Number');
            }
            if (data.hasOwnProperty('Taxable')) {
                obj['Taxable'] = ApiClient.convertToType(data['Taxable'], 'Boolean');
            }
            if (data.hasOwnProperty('Territory')) {
                obj['Territory'] = ApiClient.convertToType(data['Territory'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayCode1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayCode1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // validate the optional field `NominalCode`
        if (data['NominalCode']) { // data not null
          NominalCode3.validateJSON(data['NominalCode']);
        }
        // ensure the json data is a string
        if (data['Region'] && !(typeof data['Region'] === 'string' || data['Region'] instanceof String)) {
            throw new Error("Expected the field `Region` to be a primitive type in the JSON string but got " + data['Region']);
        }
        // ensure the json data is a string
        if (data['Territory'] && !(typeof data['Territory'] === 'string' || data['Territory'] instanceof String)) {
            throw new Error("Expected the field `Territory` to be a primitive type in the JSON string but got " + data['Territory']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * The pay codes' benefit
 * @member {Boolean} Benefit
 */
PayCode1.prototype['Benefit'] = undefined;

/**
 * The pay codes' code
 * @member {String} Code
 */
PayCode1.prototype['Code'] = undefined;

/**
 * The pay codes' description
 * @member {String} Description
 */
PayCode1.prototype['Description'] = undefined;

/**
 * The pay codes' effective date
 * @member {Date} EffectiveDate
 */
PayCode1.prototype['EffectiveDate'] = undefined;

/**
 * The pay codes' meta data
 * @member {Object} MetaData
 */
PayCode1.prototype['MetaData'] = undefined;

/**
 * The pay codes' next revision date
 * @member {Date} NextRevisionDate
 */
PayCode1.prototype['NextRevisionDate'] = undefined;

/**
 * The pay codes' niable
 * @member {Boolean} Niable
 */
PayCode1.prototype['Niable'] = undefined;

/**
 * @member {module:model/NominalCode3} NominalCode
 */
PayCode1.prototype['NominalCode'] = undefined;

/**
 * The pay codes' non arrestable
 * @member {Boolean} NonArrestable
 */
PayCode1.prototype['NonArrestable'] = undefined;

/**
 * The pay codes' notional
 * @member {Boolean} Notional
 */
PayCode1.prototype['Notional'] = undefined;

/**
 * The pay codes' readonly
 * @member {Boolean} Readonly
 */
PayCode1.prototype['Readonly'] = undefined;

/**
 * The pay codes' region
 * @member {module:model/PayCode1.RegionEnum} Region
 */
PayCode1.prototype['Region'] = undefined;

/**
 * The pay codes' revision
 * @member {Number} Revision
 */
PayCode1.prototype['Revision'] = undefined;

/**
 * The pay codes' taxable
 * @member {Boolean} Taxable
 */
PayCode1.prototype['Taxable'] = undefined;

/**
 * The pay codes' territory
 * @member {module:model/PayCode1.TerritoryEnum} Territory
 */
PayCode1.prototype['Territory'] = undefined;

/**
 * The pay codes' type
 * @member {module:model/PayCode1.TypeEnum} Type
 */
PayCode1.prototype['Type'] = undefined;





/**
 * Allowed values for the <code>Region</code> property.
 * @enum {String}
 * @readonly
 */
PayCode1['RegionEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "England"
     * @const
     */
    "England": "England",

    /**
     * value: "Scotland"
     * @const
     */
    "Scotland": "Scotland",

    /**
     * value: "Wales"
     * @const
     */
    "Wales": "Wales"
};


/**
 * Allowed values for the <code>Territory</code> property.
 * @enum {String}
 * @readonly
 */
PayCode1['TerritoryEnum'] = {

    /**
     * value: "UnitedKingdom"
     * @const
     */
    "UnitedKingdom": "UnitedKingdom"
};


/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
PayCode1['TypeEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "Payment"
     * @const
     */
    "Payment": "Payment",

    /**
     * value: "Deduction"
     * @const
     */
    "Deduction": "Deduction"
};



export default PayCode1;

