/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Employer4 from './Employer4';
import PaySchedule5 from './PaySchedule5';
import RtiTransaction from './RtiTransaction';

/**
 * The RtiJobInstruction1 model module.
 * @module model/RtiJobInstruction1
 * @version 23.24.2.136
 */
class RtiJobInstruction1 {
    /**
     * Constructs a new <code>RtiJobInstruction1</code>.
     * @alias module:model/RtiJobInstruction1
     */
    constructor() { 
        
        RtiJobInstruction1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RtiJobInstruction1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RtiJobInstruction1} obj Optional instance to populate.
     * @return {module:model/RtiJobInstruction1} The populated <code>RtiJobInstruction1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RtiJobInstruction1();

            if (data.hasOwnProperty('EarlierTaxYear')) {
                obj['EarlierTaxYear'] = ApiClient.convertToType(data['EarlierTaxYear'], 'Number');
            }
            if (data.hasOwnProperty('Employer')) {
                obj['Employer'] = Employer4.constructFromObject(data['Employer']);
            }
            if (data.hasOwnProperty('FinalSubmissionForYear')) {
                obj['FinalSubmissionForYear'] = ApiClient.convertToType(data['FinalSubmissionForYear'], 'Boolean');
            }
            if (data.hasOwnProperty('Generate')) {
                obj['Generate'] = ApiClient.convertToType(data['Generate'], 'Boolean');
            }
            if (data.hasOwnProperty('HoldingDate')) {
                obj['HoldingDate'] = ApiClient.convertToType(data['HoldingDate'], 'Date');
            }
            if (data.hasOwnProperty('LateReason')) {
                obj['LateReason'] = ApiClient.convertToType(data['LateReason'], 'String');
            }
            if (data.hasOwnProperty('NoPaymentForPeriodFrom')) {
                obj['NoPaymentForPeriodFrom'] = ApiClient.convertToType(data['NoPaymentForPeriodFrom'], 'Date');
            }
            if (data.hasOwnProperty('NoPaymentForPeriodTo')) {
                obj['NoPaymentForPeriodTo'] = ApiClient.convertToType(data['NoPaymentForPeriodTo'], 'Date');
            }
            if (data.hasOwnProperty('PaySchedule')) {
                obj['PaySchedule'] = PaySchedule5.constructFromObject(data['PaySchedule']);
            }
            if (data.hasOwnProperty('PaymentDate')) {
                obj['PaymentDate'] = ApiClient.convertToType(data['PaymentDate'], 'Date');
            }
            if (data.hasOwnProperty('PeriodOfInactivityFrom')) {
                obj['PeriodOfInactivityFrom'] = ApiClient.convertToType(data['PeriodOfInactivityFrom'], 'Date');
            }
            if (data.hasOwnProperty('PeriodOfInactivityTo')) {
                obj['PeriodOfInactivityTo'] = ApiClient.convertToType(data['PeriodOfInactivityTo'], 'Date');
            }
            if (data.hasOwnProperty('RtiTransaction')) {
                obj['RtiTransaction'] = RtiTransaction.constructFromObject(data['RtiTransaction']);
            }
            if (data.hasOwnProperty('RtiType')) {
                obj['RtiType'] = ApiClient.convertToType(data['RtiType'], 'String');
            }
            if (data.hasOwnProperty('SchemeCeased')) {
                obj['SchemeCeased'] = ApiClient.convertToType(data['SchemeCeased'], 'Date');
            }
            if (data.hasOwnProperty('TaxMonth')) {
                obj['TaxMonth'] = ApiClient.convertToType(data['TaxMonth'], 'Number');
            }
            if (data.hasOwnProperty('TaxYear')) {
                obj['TaxYear'] = ApiClient.convertToType(data['TaxYear'], 'Number');
            }
            if (data.hasOwnProperty('Timestamp')) {
                obj['Timestamp'] = ApiClient.convertToType(data['Timestamp'], 'Date');
            }
            if (data.hasOwnProperty('Transmit')) {
                obj['Transmit'] = ApiClient.convertToType(data['Transmit'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RtiJobInstruction1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RtiJobInstruction1</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Employer`
        if (data['Employer']) { // data not null
          Employer4.validateJSON(data['Employer']);
        }
        // ensure the json data is a string
        if (data['LateReason'] && !(typeof data['LateReason'] === 'string' || data['LateReason'] instanceof String)) {
            throw new Error("Expected the field `LateReason` to be a primitive type in the JSON string but got " + data['LateReason']);
        }
        // validate the optional field `PaySchedule`
        if (data['PaySchedule']) { // data not null
          PaySchedule5.validateJSON(data['PaySchedule']);
        }
        // validate the optional field `RtiTransaction`
        if (data['RtiTransaction']) { // data not null
          RtiTransaction.validateJSON(data['RtiTransaction']);
        }
        // ensure the json data is a string
        if (data['RtiType'] && !(typeof data['RtiType'] === 'string' || data['RtiType'] instanceof String)) {
            throw new Error("Expected the field `RtiType` to be a primitive type in the JSON string but got " + data['RtiType']);
        }

        return true;
    }


}



/**
 * The rti job instructions' earlier tax year
 * @member {Number} EarlierTaxYear
 */
RtiJobInstruction1.prototype['EarlierTaxYear'] = undefined;

/**
 * @member {module:model/Employer4} Employer
 */
RtiJobInstruction1.prototype['Employer'] = undefined;

/**
 * The rti job instructions' final submission for year
 * @member {Boolean} FinalSubmissionForYear
 */
RtiJobInstruction1.prototype['FinalSubmissionForYear'] = undefined;

/**
 * The rti job instructions' generate
 * @member {Boolean} Generate
 */
RtiJobInstruction1.prototype['Generate'] = undefined;

/**
 * The rti job instructions' holding date
 * @member {Date} HoldingDate
 */
RtiJobInstruction1.prototype['HoldingDate'] = undefined;

/**
 * The rti job instructions' late reason
 * @member {module:model/RtiJobInstruction1.LateReasonEnum} LateReason
 */
RtiJobInstruction1.prototype['LateReason'] = undefined;

/**
 * The rti job instructions' no payment for period from
 * @member {Date} NoPaymentForPeriodFrom
 */
RtiJobInstruction1.prototype['NoPaymentForPeriodFrom'] = undefined;

/**
 * The rti job instructions' no payment for period to
 * @member {Date} NoPaymentForPeriodTo
 */
RtiJobInstruction1.prototype['NoPaymentForPeriodTo'] = undefined;

/**
 * @member {module:model/PaySchedule5} PaySchedule
 */
RtiJobInstruction1.prototype['PaySchedule'] = undefined;

/**
 * The rti job instructions' payment date
 * @member {Date} PaymentDate
 */
RtiJobInstruction1.prototype['PaymentDate'] = undefined;

/**
 * The rti job instructions' period of inactivity from
 * @member {Date} PeriodOfInactivityFrom
 */
RtiJobInstruction1.prototype['PeriodOfInactivityFrom'] = undefined;

/**
 * The rti job instructions' period of inactivity to
 * @member {Date} PeriodOfInactivityTo
 */
RtiJobInstruction1.prototype['PeriodOfInactivityTo'] = undefined;

/**
 * @member {module:model/RtiTransaction} RtiTransaction
 */
RtiJobInstruction1.prototype['RtiTransaction'] = undefined;

/**
 * The rti job instructions' rti type
 * @member {String} RtiType
 */
RtiJobInstruction1.prototype['RtiType'] = undefined;

/**
 * The rti job instructions' scheme ceased
 * @member {Date} SchemeCeased
 */
RtiJobInstruction1.prototype['SchemeCeased'] = undefined;

/**
 * The rti job instructions' tax month
 * @member {Number} TaxMonth
 */
RtiJobInstruction1.prototype['TaxMonth'] = undefined;

/**
 * The rti job instructions' tax year
 * @member {Number} TaxYear
 */
RtiJobInstruction1.prototype['TaxYear'] = undefined;

/**
 * The rti job instructions' timestamp
 * @member {Date} Timestamp
 */
RtiJobInstruction1.prototype['Timestamp'] = undefined;

/**
 * The rti job instructions' transmit
 * @member {Boolean} Transmit
 */
RtiJobInstruction1.prototype['Transmit'] = undefined;





/**
 * Allowed values for the <code>LateReason</code> property.
 * @enum {String}
 * @readonly
 */
RtiJobInstruction1['LateReasonEnum'] = {

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "B"
     * @const
     */
    "B": "B",

    /**
     * value: "C"
     * @const
     */
    "C": "C",

    /**
     * value: "D"
     * @const
     */
    "D": "D",

    /**
     * value: "F"
     * @const
     */
    "F": "F",

    /**
     * value: "G"
     * @const
     */
    "G": "G",

    /**
     * value: "H"
     * @const
     */
    "H": "H"
};



export default RtiJobInstruction1;

