/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmployeeLink from './EmployeeLink';
import EmployerLink from './EmployerLink';
import PayScheduleLink from './PayScheduleLink';

/**
 * The EmployeeSummary1 model module.
 * @module model/EmployeeSummary1
 * @version 23.24.2.136
 */
class EmployeeSummary1 {
    /**
     * Constructs a new <code>EmployeeSummary1</code>.
     * @alias module:model/EmployeeSummary1
     */
    constructor() { 
        
        EmployeeSummary1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EmployeeSummary1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmployeeSummary1} obj Optional instance to populate.
     * @return {module:model/EmployeeSummary1} The populated <code>EmployeeSummary1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmployeeSummary1();

            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('EffectiveDate')) {
                obj['EffectiveDate'] = ApiClient.convertToType(data['EffectiveDate'], 'Date');
            }
            if (data.hasOwnProperty('EmployeeLink')) {
                obj['EmployeeLink'] = EmployeeLink.constructFromObject(data['EmployeeLink']);
            }
            if (data.hasOwnProperty('EmployerLink')) {
                obj['EmployerLink'] = EmployerLink.constructFromObject(data['EmployerLink']);
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('Initials')) {
                obj['Initials'] = ApiClient.convertToType(data['Initials'], 'String');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('LastPayDay')) {
                obj['LastPayDay'] = ApiClient.convertToType(data['LastPayDay'], 'Date');
            }
            if (data.hasOwnProperty('LastPayDaySchedule')) {
                obj['LastPayDaySchedule'] = ApiClient.convertToType(data['LastPayDaySchedule'], 'String');
            }
            if (data.hasOwnProperty('LastPayDayTaxYear')) {
                obj['LastPayDayTaxYear'] = ApiClient.convertToType(data['LastPayDayTaxYear'], 'Number');
            }
            if (data.hasOwnProperty('LeavingDate')) {
                obj['LeavingDate'] = ApiClient.convertToType(data['LeavingDate'], 'Date');
            }
            if (data.hasOwnProperty('MetaData')) {
                obj['MetaData'] = ApiClient.convertToType(data['MetaData'], Object);
            }
            if (data.hasOwnProperty('NextPayDay')) {
                obj['NextPayDay'] = ApiClient.convertToType(data['NextPayDay'], 'Date');
            }
            if (data.hasOwnProperty('NextRevisionDate')) {
                obj['NextRevisionDate'] = ApiClient.convertToType(data['NextRevisionDate'], 'Date');
            }
            if (data.hasOwnProperty('NiLetter')) {
                obj['NiLetter'] = ApiClient.convertToType(data['NiLetter'], 'String');
            }
            if (data.hasOwnProperty('NiNumber')) {
                obj['NiNumber'] = ApiClient.convertToType(data['NiNumber'], 'String');
            }
            if (data.hasOwnProperty('PayScheduleLink')) {
                obj['PayScheduleLink'] = PayScheduleLink.constructFromObject(data['PayScheduleLink']);
            }
            if (data.hasOwnProperty('PayScheduleName')) {
                obj['PayScheduleName'] = ApiClient.convertToType(data['PayScheduleName'], 'String');
            }
            if (data.hasOwnProperty('Revision')) {
                obj['Revision'] = ApiClient.convertToType(data['Revision'], 'Number');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'Date');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('TaxBasis')) {
                obj['TaxBasis'] = ApiClient.convertToType(data['TaxBasis'], 'String');
            }
            if (data.hasOwnProperty('TaxCode')) {
                obj['TaxCode'] = ApiClient.convertToType(data['TaxCode'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('UniqueKey')) {
                obj['UniqueKey'] = ApiClient.convertToType(data['UniqueKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmployeeSummary1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmployeeSummary1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // validate the optional field `EmployeeLink`
        if (data['EmployeeLink']) { // data not null
          EmployeeLink.validateJSON(data['EmployeeLink']);
        }
        // validate the optional field `EmployerLink`
        if (data['EmployerLink']) { // data not null
          EmployerLink.validateJSON(data['EmployerLink']);
        }
        // ensure the json data is a string
        if (data['FirstName'] && !(typeof data['FirstName'] === 'string' || data['FirstName'] instanceof String)) {
            throw new Error("Expected the field `FirstName` to be a primitive type in the JSON string but got " + data['FirstName']);
        }
        // ensure the json data is a string
        if (data['Initials'] && !(typeof data['Initials'] === 'string' || data['Initials'] instanceof String)) {
            throw new Error("Expected the field `Initials` to be a primitive type in the JSON string but got " + data['Initials']);
        }
        // ensure the json data is a string
        if (data['LastName'] && !(typeof data['LastName'] === 'string' || data['LastName'] instanceof String)) {
            throw new Error("Expected the field `LastName` to be a primitive type in the JSON string but got " + data['LastName']);
        }
        // ensure the json data is a string
        if (data['LastPayDaySchedule'] && !(typeof data['LastPayDaySchedule'] === 'string' || data['LastPayDaySchedule'] instanceof String)) {
            throw new Error("Expected the field `LastPayDaySchedule` to be a primitive type in the JSON string but got " + data['LastPayDaySchedule']);
        }
        // ensure the json data is a string
        if (data['NiLetter'] && !(typeof data['NiLetter'] === 'string' || data['NiLetter'] instanceof String)) {
            throw new Error("Expected the field `NiLetter` to be a primitive type in the JSON string but got " + data['NiLetter']);
        }
        // ensure the json data is a string
        if (data['NiNumber'] && !(typeof data['NiNumber'] === 'string' || data['NiNumber'] instanceof String)) {
            throw new Error("Expected the field `NiNumber` to be a primitive type in the JSON string but got " + data['NiNumber']);
        }
        // validate the optional field `PayScheduleLink`
        if (data['PayScheduleLink']) { // data not null
          PayScheduleLink.validateJSON(data['PayScheduleLink']);
        }
        // ensure the json data is a string
        if (data['PayScheduleName'] && !(typeof data['PayScheduleName'] === 'string' || data['PayScheduleName'] instanceof String)) {
            throw new Error("Expected the field `PayScheduleName` to be a primitive type in the JSON string but got " + data['PayScheduleName']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['TaxBasis'] && !(typeof data['TaxBasis'] === 'string' || data['TaxBasis'] instanceof String)) {
            throw new Error("Expected the field `TaxBasis` to be a primitive type in the JSON string but got " + data['TaxBasis']);
        }
        // ensure the json data is a string
        if (data['TaxCode'] && !(typeof data['TaxCode'] === 'string' || data['TaxCode'] instanceof String)) {
            throw new Error("Expected the field `TaxCode` to be a primitive type in the JSON string but got " + data['TaxCode']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['UniqueKey'] && !(typeof data['UniqueKey'] === 'string' || data['UniqueKey'] instanceof String)) {
            throw new Error("Expected the field `UniqueKey` to be a primitive type in the JSON string but got " + data['UniqueKey']);
        }

        return true;
    }


}



/**
 * The employee summarys' code
 * @member {String} Code
 */
EmployeeSummary1.prototype['Code'] = undefined;

/**
 * The employee summarys' effective date
 * @member {Date} EffectiveDate
 */
EmployeeSummary1.prototype['EffectiveDate'] = undefined;

/**
 * @member {module:model/EmployeeLink} EmployeeLink
 */
EmployeeSummary1.prototype['EmployeeLink'] = undefined;

/**
 * @member {module:model/EmployerLink} EmployerLink
 */
EmployeeSummary1.prototype['EmployerLink'] = undefined;

/**
 * The employee summarys' first name
 * @member {String} FirstName
 */
EmployeeSummary1.prototype['FirstName'] = undefined;

/**
 * The employee summarys' initials
 * @member {String} Initials
 */
EmployeeSummary1.prototype['Initials'] = undefined;

/**
 * The employee summarys' last name
 * @member {String} LastName
 */
EmployeeSummary1.prototype['LastName'] = undefined;

/**
 * The employee summarys' last pay day
 * @member {Date} LastPayDay
 */
EmployeeSummary1.prototype['LastPayDay'] = undefined;

/**
 * The employee summarys' last pay day schedule
 * @member {String} LastPayDaySchedule
 */
EmployeeSummary1.prototype['LastPayDaySchedule'] = undefined;

/**
 * The employee summarys' last pay day tax year
 * @member {Number} LastPayDayTaxYear
 */
EmployeeSummary1.prototype['LastPayDayTaxYear'] = undefined;

/**
 * The employee summarys' leaving date
 * @member {Date} LeavingDate
 */
EmployeeSummary1.prototype['LeavingDate'] = undefined;

/**
 * The employee summarys' meta data
 * @member {Object} MetaData
 */
EmployeeSummary1.prototype['MetaData'] = undefined;

/**
 * The employee summarys' next pay day
 * @member {Date} NextPayDay
 */
EmployeeSummary1.prototype['NextPayDay'] = undefined;

/**
 * The employee summarys' next revision date
 * @member {Date} NextRevisionDate
 */
EmployeeSummary1.prototype['NextRevisionDate'] = undefined;

/**
 * The employee summarys' ni letter
 * @member {String} NiLetter
 */
EmployeeSummary1.prototype['NiLetter'] = undefined;

/**
 * The employee summarys' ni number
 * @member {String} NiNumber
 */
EmployeeSummary1.prototype['NiNumber'] = undefined;

/**
 * @member {module:model/PayScheduleLink} PayScheduleLink
 */
EmployeeSummary1.prototype['PayScheduleLink'] = undefined;

/**
 * The employee summarys' pay schedule name
 * @member {String} PayScheduleName
 */
EmployeeSummary1.prototype['PayScheduleName'] = undefined;

/**
 * The employee summarys' revision
 * @member {Number} Revision
 */
EmployeeSummary1.prototype['Revision'] = undefined;

/**
 * The employee summarys' start date
 * @member {Date} StartDate
 */
EmployeeSummary1.prototype['StartDate'] = undefined;

/**
 * The employee summarys' status
 * @member {String} Status
 */
EmployeeSummary1.prototype['Status'] = undefined;

/**
 * The employee summarys' tax basis
 * @member {module:model/EmployeeSummary1.TaxBasisEnum} TaxBasis
 */
EmployeeSummary1.prototype['TaxBasis'] = undefined;

/**
 * The employee summarys' tax code
 * @member {String} TaxCode
 */
EmployeeSummary1.prototype['TaxCode'] = undefined;

/**
 * The employee summarys' title
 * @member {String} Title
 */
EmployeeSummary1.prototype['Title'] = undefined;

/**
 * The employee summarys' unique key
 * @member {String} UniqueKey
 */
EmployeeSummary1.prototype['UniqueKey'] = undefined;





/**
 * Allowed values for the <code>TaxBasis</code> property.
 * @enum {String}
 * @readonly
 */
EmployeeSummary1['TaxBasisEnum'] = {

    /**
     * value: "Cumulative"
     * @const
     */
    "Cumulative": "Cumulative",

    /**
     * value: "Week1Month1"
     * @const
     */
    "Week1Month1": "Week1Month1"
};



export default EmployeeSummary1;

