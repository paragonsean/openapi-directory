/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Permission2 from './Permission2';
import Roles from './Roles';

/**
 * The User1 model module.
 * @module model/User1
 * @version 23.24.2.136
 */
class User1 {
    /**
     * Constructs a new <code>User1</code>.
     * @alias module:model/User1
     */
    constructor() { 
        
        User1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User1} obj Optional instance to populate.
     * @return {module:model/User1} The populated <code>User1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User1();

            if (data.hasOwnProperty('MetaData')) {
                obj['MetaData'] = ApiClient.convertToType(data['MetaData'], Object);
            }
            if (data.hasOwnProperty('Permissions')) {
                obj['Permissions'] = Permission2.constructFromObject(data['Permissions']);
            }
            if (data.hasOwnProperty('Roles')) {
                obj['Roles'] = Roles.constructFromObject(data['Roles']);
            }
            if (data.hasOwnProperty('UserIdentifier')) {
                obj['UserIdentifier'] = ApiClient.convertToType(data['UserIdentifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User1</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Permissions`
        if (data['Permissions']) { // data not null
          Permission2.validateJSON(data['Permissions']);
        }
        // validate the optional field `Roles`
        if (data['Roles']) { // data not null
          Roles.validateJSON(data['Roles']);
        }
        // ensure the json data is a string
        if (data['UserIdentifier'] && !(typeof data['UserIdentifier'] === 'string' || data['UserIdentifier'] instanceof String)) {
            throw new Error("Expected the field `UserIdentifier` to be a primitive type in the JSON string but got " + data['UserIdentifier']);
        }

        return true;
    }


}



/**
 * The users' meta data
 * @member {Object} MetaData
 */
User1.prototype['MetaData'] = undefined;

/**
 * @member {module:model/Permission2} Permissions
 */
User1.prototype['Permissions'] = undefined;

/**
 * @member {module:model/Roles} Roles
 */
User1.prototype['Roles'] = undefined;

/**
 * The users' user identifier
 * @member {String} UserIdentifier
 */
User1.prototype['UserIdentifier'] = undefined;






export default User1;

