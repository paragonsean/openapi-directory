/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConditionInner from './ConditionInner';
import FilterInner from './FilterInner';
import OrderInner from './OrderInner';
import OutputInner from './OutputInner';

/**
 * The GroupGroupInner model module.
 * @module model/GroupGroupInner
 * @version 23.24.2.136
 */
class GroupGroupInner {
    /**
     * Constructs a new <code>GroupGroupInner</code>.
     * @alias module:model/GroupGroupInner
     */
    constructor() { 
        
        GroupGroupInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GroupGroupInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupGroupInner} obj Optional instance to populate.
     * @return {module:model/GroupGroupInner} The populated <code>GroupGroupInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupGroupInner();

            if (data.hasOwnProperty('@GroupName')) {
                obj['@GroupName'] = ApiClient.convertToType(data['@GroupName'], 'String');
            }
            if (data.hasOwnProperty('@ItemName')) {
                obj['@ItemName'] = ApiClient.convertToType(data['@ItemName'], 'String');
            }
            if (data.hasOwnProperty('@LoopExpression')) {
                obj['@LoopExpression'] = ApiClient.convertToType(data['@LoopExpression'], 'String');
            }
            if (data.hasOwnProperty('@Predicate')) {
                obj['@Predicate'] = ApiClient.convertToType(data['@Predicate'], 'String');
            }
            if (data.hasOwnProperty('@Selector')) {
                obj['@Selector'] = ApiClient.convertToType(data['@Selector'], 'String');
            }
            if (data.hasOwnProperty('@UniqueKeyVariable')) {
                obj['@UniqueKeyVariable'] = ApiClient.convertToType(data['@UniqueKeyVariable'], 'String');
            }
            if (data.hasOwnProperty('Condition')) {
                obj['Condition'] = ApiClient.convertToType(data['Condition'], [ConditionInner]);
            }
            if (data.hasOwnProperty('Filter')) {
                obj['Filter'] = ApiClient.convertToType(data['Filter'], [FilterInner]);
            }
            if (data.hasOwnProperty('Order')) {
                obj['Order'] = ApiClient.convertToType(data['Order'], [OrderInner]);
            }
            if (data.hasOwnProperty('Output')) {
                obj['Output'] = ApiClient.convertToType(data['Output'], [OutputInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupGroupInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupGroupInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['@GroupName'] && !(typeof data['@GroupName'] === 'string' || data['@GroupName'] instanceof String)) {
            throw new Error("Expected the field `@GroupName` to be a primitive type in the JSON string but got " + data['@GroupName']);
        }
        // ensure the json data is a string
        if (data['@ItemName'] && !(typeof data['@ItemName'] === 'string' || data['@ItemName'] instanceof String)) {
            throw new Error("Expected the field `@ItemName` to be a primitive type in the JSON string but got " + data['@ItemName']);
        }
        // ensure the json data is a string
        if (data['@LoopExpression'] && !(typeof data['@LoopExpression'] === 'string' || data['@LoopExpression'] instanceof String)) {
            throw new Error("Expected the field `@LoopExpression` to be a primitive type in the JSON string but got " + data['@LoopExpression']);
        }
        // ensure the json data is a string
        if (data['@Predicate'] && !(typeof data['@Predicate'] === 'string' || data['@Predicate'] instanceof String)) {
            throw new Error("Expected the field `@Predicate` to be a primitive type in the JSON string but got " + data['@Predicate']);
        }
        // ensure the json data is a string
        if (data['@Selector'] && !(typeof data['@Selector'] === 'string' || data['@Selector'] instanceof String)) {
            throw new Error("Expected the field `@Selector` to be a primitive type in the JSON string but got " + data['@Selector']);
        }
        // ensure the json data is a string
        if (data['@UniqueKeyVariable'] && !(typeof data['@UniqueKeyVariable'] === 'string' || data['@UniqueKeyVariable'] instanceof String)) {
            throw new Error("Expected the field `@UniqueKeyVariable` to be a primitive type in the JSON string but got " + data['@UniqueKeyVariable']);
        }
        if (data['Condition']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Condition'])) {
                throw new Error("Expected the field `Condition` to be an array in the JSON data but got " + data['Condition']);
            }
            // validate the optional field `Condition` (array)
            for (const item of data['Condition']) {
                ConditionInner.validateJSON(item);
            };
        }
        if (data['Filter']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Filter'])) {
                throw new Error("Expected the field `Filter` to be an array in the JSON data but got " + data['Filter']);
            }
            // validate the optional field `Filter` (array)
            for (const item of data['Filter']) {
                FilterInner.validateJSON(item);
            };
        }
        if (data['Order']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Order'])) {
                throw new Error("Expected the field `Order` to be an array in the JSON data but got " + data['Order']);
            }
            // validate the optional field `Order` (array)
            for (const item of data['Order']) {
                OrderInner.validateJSON(item);
            };
        }
        if (data['Output']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Output'])) {
                throw new Error("Expected the field `Output` to be an array in the JSON data but got " + data['Output']);
            }
            // validate the optional field `Output` (array)
            for (const item of data['Output']) {
                OutputInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The entity groups' group name
 * @member {String} @GroupName
 */
GroupGroupInner.prototype['@GroupName'] = undefined;

/**
 * The entity groups' item name
 * @member {String} @ItemName
 */
GroupGroupInner.prototype['@ItemName'] = undefined;

/**
 * The entity groups' loop expression
 * @member {String} @LoopExpression
 */
GroupGroupInner.prototype['@LoopExpression'] = undefined;

/**
 * The entity groups' predicate
 * @member {String} @Predicate
 */
GroupGroupInner.prototype['@Predicate'] = undefined;

/**
 * The entity groups' selector
 * @member {String} @Selector
 */
GroupGroupInner.prototype['@Selector'] = undefined;

/**
 * The entity groups' unique key variable
 * @member {String} @UniqueKeyVariable
 */
GroupGroupInner.prototype['@UniqueKeyVariable'] = undefined;

/**
 * The entity groups' conditions
 * @member {Array.<module:model/ConditionInner>} Condition
 */
GroupGroupInner.prototype['Condition'] = undefined;

/**
 * The entity groups' filters
 * @member {Array.<module:model/FilterInner>} Filter
 */
GroupGroupInner.prototype['Filter'] = undefined;

/**
 * The entity groups' ordering
 * @member {Array.<module:model/OrderInner>} Order
 */
GroupGroupInner.prototype['Order'] = undefined;

/**
 * The entity groups' outputs
 * @member {Array.<module:model/OutputInner>} Output
 */
GroupGroupInner.prototype['Output'] = undefined;






export default GroupGroupInner;

