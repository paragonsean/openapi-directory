/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NominalCode1 from './NominalCode1';

/**
 * The CisLineType1 model module.
 * @module model/CisLineType1
 * @version 23.24.2.136
 */
class CisLineType1 {
    /**
     * Constructs a new <code>CisLineType1</code>.
     * @alias module:model/CisLineType1
     */
    constructor() { 
        
        CisLineType1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CisLineType1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CisLineType1} obj Optional instance to populate.
     * @return {module:model/CisLineType1} The populated <code>CisLineType1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CisLineType1();

            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('LineType')) {
                obj['LineType'] = ApiClient.convertToType(data['LineType'], 'String');
            }
            if (data.hasOwnProperty('NominalCode')) {
                obj['NominalCode'] = NominalCode1.constructFromObject(data['NominalCode']);
            }
            if (data.hasOwnProperty('TaxTreatment')) {
                obj['TaxTreatment'] = ApiClient.convertToType(data['TaxTreatment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CisLineType1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CisLineType1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['LineType'] && !(typeof data['LineType'] === 'string' || data['LineType'] instanceof String)) {
            throw new Error("Expected the field `LineType` to be a primitive type in the JSON string but got " + data['LineType']);
        }
        // validate the optional field `NominalCode`
        if (data['NominalCode']) { // data not null
          NominalCode1.validateJSON(data['NominalCode']);
        }
        // ensure the json data is a string
        if (data['TaxTreatment'] && !(typeof data['TaxTreatment'] === 'string' || data['TaxTreatment'] instanceof String)) {
            throw new Error("Expected the field `TaxTreatment` to be a primitive type in the JSON string but got " + data['TaxTreatment']);
        }

        return true;
    }


}



/**
 * The cis line types' description
 * @member {String} Description
 */
CisLineType1.prototype['Description'] = undefined;

/**
 * The cis line types' line type
 * @member {String} LineType
 */
CisLineType1.prototype['LineType'] = undefined;

/**
 * @member {module:model/NominalCode1} NominalCode
 */
CisLineType1.prototype['NominalCode'] = undefined;

/**
 * The cis line types' tax treatment
 * @member {module:model/CisLineType1.TaxTreatmentEnum} TaxTreatment
 */
CisLineType1.prototype['TaxTreatment'] = undefined;





/**
 * Allowed values for the <code>TaxTreatment</code> property.
 * @enum {String}
 * @readonly
 */
CisLineType1['TaxTreatmentEnum'] = {

    /**
     * value: "Taxable"
     * @const
     */
    "Taxable": "Taxable",

    /**
     * value: "NonTaxable"
     * @const
     */
    "NonTaxable": "NonTaxable",

    /**
     * value: "Notional"
     * @const
     */
    "Notional": "Notional",

    /**
     * value: "Materials"
     * @const
     */
    "Materials": "Materials"
};



export default CisLineType1;

