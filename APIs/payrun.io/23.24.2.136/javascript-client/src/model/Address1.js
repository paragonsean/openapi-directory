/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Address1 model module.
 * @module model/Address1
 * @version 23.24.2.136
 */
class Address1 {
    /**
     * Constructs a new <code>Address1</code>.
     * The employers&#39; address
     * @alias module:model/Address1
     */
    constructor() { 
        
        Address1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Address1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address1} obj Optional instance to populate.
     * @return {module:model/Address1} The populated <code>Address1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address1();

            if (data.hasOwnProperty('Address1')) {
                obj['Address1'] = ApiClient.convertToType(data['Address1'], 'String');
            }
            if (data.hasOwnProperty('Address2')) {
                obj['Address2'] = ApiClient.convertToType(data['Address2'], 'String');
            }
            if (data.hasOwnProperty('Address3')) {
                obj['Address3'] = ApiClient.convertToType(data['Address3'], 'String');
            }
            if (data.hasOwnProperty('Address4')) {
                obj['Address4'] = ApiClient.convertToType(data['Address4'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('Postcode')) {
                obj['Postcode'] = ApiClient.convertToType(data['Postcode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Address1'] && !(typeof data['Address1'] === 'string' || data['Address1'] instanceof String)) {
            throw new Error("Expected the field `Address1` to be a primitive type in the JSON string but got " + data['Address1']);
        }
        // ensure the json data is a string
        if (data['Address2'] && !(typeof data['Address2'] === 'string' || data['Address2'] instanceof String)) {
            throw new Error("Expected the field `Address2` to be a primitive type in the JSON string but got " + data['Address2']);
        }
        // ensure the json data is a string
        if (data['Address3'] && !(typeof data['Address3'] === 'string' || data['Address3'] instanceof String)) {
            throw new Error("Expected the field `Address3` to be a primitive type in the JSON string but got " + data['Address3']);
        }
        // ensure the json data is a string
        if (data['Address4'] && !(typeof data['Address4'] === 'string' || data['Address4'] instanceof String)) {
            throw new Error("Expected the field `Address4` to be a primitive type in the JSON string but got " + data['Address4']);
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['Postcode'] && !(typeof data['Postcode'] === 'string' || data['Postcode'] instanceof String)) {
            throw new Error("Expected the field `Postcode` to be a primitive type in the JSON string but got " + data['Postcode']);
        }

        return true;
    }


}



/**
 * The addresss' line 1
 * @member {String} Address1
 */
Address1.prototype['Address1'] = undefined;

/**
 * The addresss' line 2
 * @member {String} Address2
 */
Address1.prototype['Address2'] = undefined;

/**
 * The addresss' line 3
 * @member {String} Address3
 */
Address1.prototype['Address3'] = undefined;

/**
 * The addresss' line 4
 * @member {String} Address4
 */
Address1.prototype['Address4'] = undefined;

/**
 * The addresss' country
 * @member {String} Country
 */
Address1.prototype['Country'] = undefined;

/**
 * The addresss' postcode
 * @member {String} Postcode
 */
Address1.prototype['Postcode'] = undefined;






export default Address1;

