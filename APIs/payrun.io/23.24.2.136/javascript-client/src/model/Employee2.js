/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import BankAccount from './BankAccount';
import EmployeePartner from './EmployeePartner';
import PaySchedule1 from './PaySchedule1';

/**
 * The Employee2 model module.
 * @module model/Employee2
 * @version 23.24.2.136
 */
class Employee2 {
    /**
     * Constructs a new <code>Employee2</code>.
     * @alias module:model/Employee2
     */
    constructor() { 
        
        Employee2.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Employee2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Employee2} obj Optional instance to populate.
     * @return {module:model/Employee2} The populated <code>Employee2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Employee2();

            if (data.hasOwnProperty('AEAssessmentOverride')) {
                obj['AEAssessmentOverride'] = ApiClient.convertToType(data['AEAssessmentOverride'], 'String');
            }
            if (data.hasOwnProperty('AEAssessmentOverrideDate')) {
                obj['AEAssessmentOverrideDate'] = ApiClient.convertToType(data['AEAssessmentOverrideDate'], 'Date');
            }
            if (data.hasOwnProperty('AEExclusionReasonCode')) {
                obj['AEExclusionReasonCode'] = ApiClient.convertToType(data['AEExclusionReasonCode'], 'String');
            }
            if (data.hasOwnProperty('AEPostponementDate')) {
                obj['AEPostponementDate'] = ApiClient.convertToType(data['AEPostponementDate'], 'Date');
            }
            if (data.hasOwnProperty('Address')) {
                obj['Address'] = Address.constructFromObject(data['Address']);
            }
            if (data.hasOwnProperty('BankAccount')) {
                obj['BankAccount'] = BankAccount.constructFromObject(data['BankAccount']);
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('DateOfBirth')) {
                obj['DateOfBirth'] = ApiClient.convertToType(data['DateOfBirth'], 'Date');
            }
            if (data.hasOwnProperty('Deactivated')) {
                obj['Deactivated'] = ApiClient.convertToType(data['Deactivated'], 'Boolean');
            }
            if (data.hasOwnProperty('DirectorshipAppointmentDate')) {
                obj['DirectorshipAppointmentDate'] = ApiClient.convertToType(data['DirectorshipAppointmentDate'], 'Date');
            }
            if (data.hasOwnProperty('EEACitizen')) {
                obj['EEACitizen'] = ApiClient.convertToType(data['EEACitizen'], 'Boolean');
            }
            if (data.hasOwnProperty('EPM6')) {
                obj['EPM6'] = ApiClient.convertToType(data['EPM6'], 'Boolean');
            }
            if (data.hasOwnProperty('EffectiveDate')) {
                obj['EffectiveDate'] = ApiClient.convertToType(data['EffectiveDate'], 'Date');
            }
            if (data.hasOwnProperty('EmployeePartner')) {
                obj['EmployeePartner'] = EmployeePartner.constructFromObject(data['EmployeePartner']);
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('Gender')) {
                obj['Gender'] = ApiClient.convertToType(data['Gender'], 'String');
            }
            if (data.hasOwnProperty('HoursPerWeek')) {
                obj['HoursPerWeek'] = ApiClient.convertToType(data['HoursPerWeek'], 'Number');
            }
            if (data.hasOwnProperty('Initials')) {
                obj['Initials'] = ApiClient.convertToType(data['Initials'], 'String');
            }
            if (data.hasOwnProperty('IrregularEmployment')) {
                obj['IrregularEmployment'] = ApiClient.convertToType(data['IrregularEmployment'], 'Boolean');
            }
            if (data.hasOwnProperty('IsAgencyWorker')) {
                obj['IsAgencyWorker'] = ApiClient.convertToType(data['IsAgencyWorker'], 'Boolean');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('LeaverReason')) {
                obj['LeaverReason'] = ApiClient.convertToType(data['LeaverReason'], 'String');
            }
            if (data.hasOwnProperty('LeavingDate')) {
                obj['LeavingDate'] = ApiClient.convertToType(data['LeavingDate'], 'Date');
            }
            if (data.hasOwnProperty('MaritalStatus')) {
                obj['MaritalStatus'] = ApiClient.convertToType(data['MaritalStatus'], 'String');
            }
            if (data.hasOwnProperty('MetaData')) {
                obj['MetaData'] = ApiClient.convertToType(data['MetaData'], Object);
            }
            if (data.hasOwnProperty('MiddleName')) {
                obj['MiddleName'] = ApiClient.convertToType(data['MiddleName'], 'String');
            }
            if (data.hasOwnProperty('NextRevisionDate')) {
                obj['NextRevisionDate'] = ApiClient.convertToType(data['NextRevisionDate'], 'Date');
            }
            if (data.hasOwnProperty('NiNumber')) {
                obj['NiNumber'] = ApiClient.convertToType(data['NiNumber'], 'String');
            }
            if (data.hasOwnProperty('NicLiability')) {
                obj['NicLiability'] = ApiClient.convertToType(data['NicLiability'], 'String');
            }
            if (data.hasOwnProperty('OffPayrollWorker')) {
                obj['OffPayrollWorker'] = ApiClient.convertToType(data['OffPayrollWorker'], 'Boolean');
            }
            if (data.hasOwnProperty('OnStrike')) {
                obj['OnStrike'] = ApiClient.convertToType(data['OnStrike'], 'Boolean');
            }
            if (data.hasOwnProperty('P45IssuedDate')) {
                obj['P45IssuedDate'] = ApiClient.convertToType(data['P45IssuedDate'], 'Date');
            }
            if (data.hasOwnProperty('PassportNumber')) {
                obj['PassportNumber'] = ApiClient.convertToType(data['PassportNumber'], 'String');
            }
            if (data.hasOwnProperty('PaySchedule')) {
                obj['PaySchedule'] = PaySchedule1.constructFromObject(data['PaySchedule']);
            }
            if (data.hasOwnProperty('PaymentMethod')) {
                obj['PaymentMethod'] = ApiClient.convertToType(data['PaymentMethod'], 'String');
            }
            if (data.hasOwnProperty('PaymentToANonIndividual')) {
                obj['PaymentToANonIndividual'] = ApiClient.convertToType(data['PaymentToANonIndividual'], 'Boolean');
            }
            if (data.hasOwnProperty('Region')) {
                obj['Region'] = ApiClient.convertToType(data['Region'], 'String');
            }
            if (data.hasOwnProperty('Revision')) {
                obj['Revision'] = ApiClient.convertToType(data['Revision'], 'Number');
            }
            if (data.hasOwnProperty('RuleExclusions')) {
                obj['RuleExclusions'] = ApiClient.convertToType(data['RuleExclusions'], 'String');
            }
            if (data.hasOwnProperty('Seconded')) {
                obj['Seconded'] = ApiClient.convertToType(data['Seconded'], 'String');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'Date');
            }
            if (data.hasOwnProperty('StarterDeclaration')) {
                obj['StarterDeclaration'] = ApiClient.convertToType(data['StarterDeclaration'], 'String');
            }
            if (data.hasOwnProperty('Territory')) {
                obj['Territory'] = ApiClient.convertToType(data['Territory'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('VeteranPeriodStartDate')) {
                obj['VeteranPeriodStartDate'] = ApiClient.convertToType(data['VeteranPeriodStartDate'], 'Date');
            }
            if (data.hasOwnProperty('WorkingWeek')) {
                obj['WorkingWeek'] = ApiClient.convertToType(data['WorkingWeek'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Employee2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Employee2</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AEAssessmentOverride'] && !(typeof data['AEAssessmentOverride'] === 'string' || data['AEAssessmentOverride'] instanceof String)) {
            throw new Error("Expected the field `AEAssessmentOverride` to be a primitive type in the JSON string but got " + data['AEAssessmentOverride']);
        }
        // ensure the json data is a string
        if (data['AEExclusionReasonCode'] && !(typeof data['AEExclusionReasonCode'] === 'string' || data['AEExclusionReasonCode'] instanceof String)) {
            throw new Error("Expected the field `AEExclusionReasonCode` to be a primitive type in the JSON string but got " + data['AEExclusionReasonCode']);
        }
        // validate the optional field `Address`
        if (data['Address']) { // data not null
          Address.validateJSON(data['Address']);
        }
        // validate the optional field `BankAccount`
        if (data['BankAccount']) { // data not null
          BankAccount.validateJSON(data['BankAccount']);
        }
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // validate the optional field `EmployeePartner`
        if (data['EmployeePartner']) { // data not null
          EmployeePartner.validateJSON(data['EmployeePartner']);
        }
        // ensure the json data is a string
        if (data['FirstName'] && !(typeof data['FirstName'] === 'string' || data['FirstName'] instanceof String)) {
            throw new Error("Expected the field `FirstName` to be a primitive type in the JSON string but got " + data['FirstName']);
        }
        // ensure the json data is a string
        if (data['Gender'] && !(typeof data['Gender'] === 'string' || data['Gender'] instanceof String)) {
            throw new Error("Expected the field `Gender` to be a primitive type in the JSON string but got " + data['Gender']);
        }
        // ensure the json data is a string
        if (data['Initials'] && !(typeof data['Initials'] === 'string' || data['Initials'] instanceof String)) {
            throw new Error("Expected the field `Initials` to be a primitive type in the JSON string but got " + data['Initials']);
        }
        // ensure the json data is a string
        if (data['LastName'] && !(typeof data['LastName'] === 'string' || data['LastName'] instanceof String)) {
            throw new Error("Expected the field `LastName` to be a primitive type in the JSON string but got " + data['LastName']);
        }
        // ensure the json data is a string
        if (data['LeaverReason'] && !(typeof data['LeaverReason'] === 'string' || data['LeaverReason'] instanceof String)) {
            throw new Error("Expected the field `LeaverReason` to be a primitive type in the JSON string but got " + data['LeaverReason']);
        }
        // ensure the json data is a string
        if (data['MaritalStatus'] && !(typeof data['MaritalStatus'] === 'string' || data['MaritalStatus'] instanceof String)) {
            throw new Error("Expected the field `MaritalStatus` to be a primitive type in the JSON string but got " + data['MaritalStatus']);
        }
        // ensure the json data is a string
        if (data['MiddleName'] && !(typeof data['MiddleName'] === 'string' || data['MiddleName'] instanceof String)) {
            throw new Error("Expected the field `MiddleName` to be a primitive type in the JSON string but got " + data['MiddleName']);
        }
        // ensure the json data is a string
        if (data['NiNumber'] && !(typeof data['NiNumber'] === 'string' || data['NiNumber'] instanceof String)) {
            throw new Error("Expected the field `NiNumber` to be a primitive type in the JSON string but got " + data['NiNumber']);
        }
        // ensure the json data is a string
        if (data['NicLiability'] && !(typeof data['NicLiability'] === 'string' || data['NicLiability'] instanceof String)) {
            throw new Error("Expected the field `NicLiability` to be a primitive type in the JSON string but got " + data['NicLiability']);
        }
        // ensure the json data is a string
        if (data['PassportNumber'] && !(typeof data['PassportNumber'] === 'string' || data['PassportNumber'] instanceof String)) {
            throw new Error("Expected the field `PassportNumber` to be a primitive type in the JSON string but got " + data['PassportNumber']);
        }
        // validate the optional field `PaySchedule`
        if (data['PaySchedule']) { // data not null
          PaySchedule1.validateJSON(data['PaySchedule']);
        }
        // ensure the json data is a string
        if (data['PaymentMethod'] && !(typeof data['PaymentMethod'] === 'string' || data['PaymentMethod'] instanceof String)) {
            throw new Error("Expected the field `PaymentMethod` to be a primitive type in the JSON string but got " + data['PaymentMethod']);
        }
        // ensure the json data is a string
        if (data['Region'] && !(typeof data['Region'] === 'string' || data['Region'] instanceof String)) {
            throw new Error("Expected the field `Region` to be a primitive type in the JSON string but got " + data['Region']);
        }
        // ensure the json data is a string
        if (data['RuleExclusions'] && !(typeof data['RuleExclusions'] === 'string' || data['RuleExclusions'] instanceof String)) {
            throw new Error("Expected the field `RuleExclusions` to be a primitive type in the JSON string but got " + data['RuleExclusions']);
        }
        // ensure the json data is a string
        if (data['Seconded'] && !(typeof data['Seconded'] === 'string' || data['Seconded'] instanceof String)) {
            throw new Error("Expected the field `Seconded` to be a primitive type in the JSON string but got " + data['Seconded']);
        }
        // ensure the json data is a string
        if (data['StarterDeclaration'] && !(typeof data['StarterDeclaration'] === 'string' || data['StarterDeclaration'] instanceof String)) {
            throw new Error("Expected the field `StarterDeclaration` to be a primitive type in the JSON string but got " + data['StarterDeclaration']);
        }
        // ensure the json data is a string
        if (data['Territory'] && !(typeof data['Territory'] === 'string' || data['Territory'] instanceof String)) {
            throw new Error("Expected the field `Territory` to be a primitive type in the JSON string but got " + data['Territory']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['WorkingWeek'] && !(typeof data['WorkingWeek'] === 'string' || data['WorkingWeek'] instanceof String)) {
            throw new Error("Expected the field `WorkingWeek` to be a primitive type in the JSON string but got " + data['WorkingWeek']);
        }

        return true;
    }


}



/**
 * The employees' a e assessment override
 * @member {module:model/Employee2.AEAssessmentOverrideEnum} AEAssessmentOverride
 */
Employee2.prototype['AEAssessmentOverride'] = undefined;

/**
 * The employees' a e assessment override date
 * @member {Date} AEAssessmentOverrideDate
 */
Employee2.prototype['AEAssessmentOverrideDate'] = undefined;

/**
 * The employees' a e exclusion reason code
 * @member {module:model/Employee2.AEExclusionReasonCodeEnum} AEExclusionReasonCode
 */
Employee2.prototype['AEExclusionReasonCode'] = undefined;

/**
 * The employees' a e postponement date
 * @member {Date} AEPostponementDate
 */
Employee2.prototype['AEPostponementDate'] = undefined;

/**
 * @member {module:model/Address} Address
 */
Employee2.prototype['Address'] = undefined;

/**
 * @member {module:model/BankAccount} BankAccount
 */
Employee2.prototype['BankAccount'] = undefined;

/**
 * The employees' code
 * @member {String} Code
 */
Employee2.prototype['Code'] = undefined;

/**
 * The employees' date of birth
 * @member {Date} DateOfBirth
 */
Employee2.prototype['DateOfBirth'] = undefined;

/**
 * The employees' deactivated
 * @member {Boolean} Deactivated
 */
Employee2.prototype['Deactivated'] = undefined;

/**
 * The employees' directorship appointment date
 * @member {Date} DirectorshipAppointmentDate
 */
Employee2.prototype['DirectorshipAppointmentDate'] = undefined;

/**
 * The employees' e e a citizen
 * @member {Boolean} EEACitizen
 */
Employee2.prototype['EEACitizen'] = undefined;

/**
 * The employees' e p m6
 * @member {Boolean} EPM6
 */
Employee2.prototype['EPM6'] = undefined;

/**
 * The employees' effective date
 * @member {Date} EffectiveDate
 */
Employee2.prototype['EffectiveDate'] = undefined;

/**
 * @member {module:model/EmployeePartner} EmployeePartner
 */
Employee2.prototype['EmployeePartner'] = undefined;

/**
 * The employees' the first name
 * @member {String} FirstName
 */
Employee2.prototype['FirstName'] = undefined;

/**
 * The employees' gender
 * @member {module:model/Employee2.GenderEnum} Gender
 */
Employee2.prototype['Gender'] = undefined;

/**
 * The employees' hours per week
 * @member {Number} HoursPerWeek
 */
Employee2.prototype['HoursPerWeek'] = undefined;

/**
 * The employees' initials
 * @member {String} Initials
 */
Employee2.prototype['Initials'] = undefined;

/**
 * The employees' irregular employment
 * @member {Boolean} IrregularEmployment
 */
Employee2.prototype['IrregularEmployment'] = undefined;

/**
 * The employees' is agency worker
 * @member {Boolean} IsAgencyWorker
 */
Employee2.prototype['IsAgencyWorker'] = undefined;

/**
 * The employees' last name
 * @member {String} LastName
 */
Employee2.prototype['LastName'] = undefined;

/**
 * The employees' leaver reason
 * @member {module:model/Employee2.LeaverReasonEnum} LeaverReason
 */
Employee2.prototype['LeaverReason'] = undefined;

/**
 * The employees' leaving date
 * @member {Date} LeavingDate
 */
Employee2.prototype['LeavingDate'] = undefined;

/**
 * The employees' marital status
 * @member {module:model/Employee2.MaritalStatusEnum} MaritalStatus
 */
Employee2.prototype['MaritalStatus'] = undefined;

/**
 * The employees' meta data
 * @member {Object} MetaData
 */
Employee2.prototype['MetaData'] = undefined;

/**
 * The employees' middle name
 * @member {String} MiddleName
 */
Employee2.prototype['MiddleName'] = undefined;

/**
 * The employees' next revision date
 * @member {Date} NextRevisionDate
 */
Employee2.prototype['NextRevisionDate'] = undefined;

/**
 * The employees' ni number
 * @member {String} NiNumber
 */
Employee2.prototype['NiNumber'] = undefined;

/**
 * The employees' nic liability
 * @member {module:model/Employee2.NicLiabilityEnum} NicLiability
 */
Employee2.prototype['NicLiability'] = undefined;

/**
 * The employees' off payroll worker
 * @member {Boolean} OffPayrollWorker
 */
Employee2.prototype['OffPayrollWorker'] = undefined;

/**
 * The employees' on strike
 * @member {Boolean} OnStrike
 */
Employee2.prototype['OnStrike'] = undefined;

/**
 * The employees' p45 issued date
 * @member {Date} P45IssuedDate
 */
Employee2.prototype['P45IssuedDate'] = undefined;

/**
 * The employees' passport number
 * @member {String} PassportNumber
 */
Employee2.prototype['PassportNumber'] = undefined;

/**
 * @member {module:model/PaySchedule1} PaySchedule
 */
Employee2.prototype['PaySchedule'] = undefined;

/**
 * The employees' payment method
 * @member {module:model/Employee2.PaymentMethodEnum} PaymentMethod
 */
Employee2.prototype['PaymentMethod'] = undefined;

/**
 * The employees' payment to a non individual
 * @member {Boolean} PaymentToANonIndividual
 */
Employee2.prototype['PaymentToANonIndividual'] = undefined;

/**
 * The employees' region
 * @member {module:model/Employee2.RegionEnum} Region
 */
Employee2.prototype['Region'] = undefined;

/**
 * The employees' revision
 * @member {Number} Revision
 */
Employee2.prototype['Revision'] = undefined;

/**
 * The employees' rule exclusions
 * @member {module:model/Employee2.RuleExclusionsEnum} RuleExclusions
 */
Employee2.prototype['RuleExclusions'] = undefined;

/**
 * The employees' seconded
 * @member {module:model/Employee2.SecondedEnum} Seconded
 */
Employee2.prototype['Seconded'] = undefined;

/**
 * The employees' start date
 * @member {Date} StartDate
 */
Employee2.prototype['StartDate'] = undefined;

/**
 * The employees' starter declaration
 * @member {module:model/Employee2.StarterDeclarationEnum} StarterDeclaration
 */
Employee2.prototype['StarterDeclaration'] = undefined;

/**
 * The employees' territory
 * @member {module:model/Employee2.TerritoryEnum} Territory
 */
Employee2.prototype['Territory'] = undefined;

/**
 * The employees' title
 * @member {String} Title
 */
Employee2.prototype['Title'] = undefined;

/**
 * The employees' veteran period start date
 * @member {Date} VeteranPeriodStartDate
 */
Employee2.prototype['VeteranPeriodStartDate'] = undefined;

/**
 * The employees' working week
 * @member {module:model/Employee2.WorkingWeekEnum} WorkingWeek
 */
Employee2.prototype['WorkingWeek'] = undefined;





/**
 * Allowed values for the <code>AEAssessmentOverride</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['AEAssessmentOverrideEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "OptOut"
     * @const
     */
    "OptOut": "OptOut",

    /**
     * value: "OptIn"
     * @const
     */
    "OptIn": "OptIn",

    /**
     * value: "VoluntaryJoiner"
     * @const
     */
    "VoluntaryJoiner": "VoluntaryJoiner",

    /**
     * value: "ContractualPension"
     * @const
     */
    "ContractualPension": "ContractualPension",

    /**
     * value: "CeasedMembership"
     * @const
     */
    "CeasedMembership": "CeasedMembership",

    /**
     * value: "Leaver"
     * @const
     */
    "Leaver": "Leaver",

    /**
     * value: "Excluded"
     * @const
     */
    "Excluded": "Excluded"
};


/**
 * Allowed values for the <code>AEExclusionReasonCode</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['AEExclusionReasonCodeEnum'] = {

    /**
     * value: "OtherNotKnown"
     * @const
     */
    "OtherNotKnown": "OtherNotKnown",

    /**
     * value: "NotAWorker"
     * @const
     */
    "NotAWorker": "NotAWorker",

    /**
     * value: "NotUKWorker"
     * @const
     */
    "NotUKWorker": "NotUKWorker",

    /**
     * value: "TemporaryUKWorker"
     * @const
     */
    "TemporaryUKWorker": "TemporaryUKWorker",

    /**
     * value: "OutsideAgeRange"
     * @const
     */
    "OutsideAgeRange": "OutsideAgeRange",

    /**
     * value: "SingleEmployeeDirector"
     * @const
     */
    "SingleEmployeeDirector": "SingleEmployeeDirector",

    /**
     * value: "CeasedMembershipWithin12Months"
     * @const
     */
    "CeasedMembershipWithin12Months": "CeasedMembershipWithin12Months",

    /**
     * value: "CeasedMembershipBeyond12Months"
     * @const
     */
    "CeasedMembershipBeyond12Months": "CeasedMembershipBeyond12Months",

    /**
     * value: "WorkerWULSWithin12Month"
     * @const
     */
    "WorkerWULSWithin12Month": "WorkerWULSWithin12Month",

    /**
     * value: "WorkerWULSBeyond12Month"
     * @const
     */
    "WorkerWULSBeyond12Month": "WorkerWULSBeyond12Month",

    /**
     * value: "WorkerInNoticePeriod"
     * @const
     */
    "WorkerInNoticePeriod": "WorkerInNoticePeriod",

    /**
     * value: "WorkerTaxProtection"
     * @const
     */
    "WorkerTaxProtection": "WorkerTaxProtection"
};


/**
 * Allowed values for the <code>Gender</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['GenderEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Male"
     * @const
     */
    "Male": "Male",

    /**
     * value: "Female"
     * @const
     */
    "Female": "Female"
};


/**
 * Allowed values for the <code>LeaverReason</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['LeaverReasonEnum'] = {

    /**
     * value: "Resigned"
     * @const
     */
    "Resigned": "Resigned",

    /**
     * value: "Dismissed"
     * @const
     */
    "Dismissed": "Dismissed",

    /**
     * value: "Redundant"
     * @const
     */
    "Redundant": "Redundant",

    /**
     * value: "Retired"
     * @const
     */
    "Retired": "Retired",

    /**
     * value: "Deceased"
     * @const
     */
    "Deceased": "Deceased",

    /**
     * value: "LegalCustody"
     * @const
     */
    "LegalCustody": "LegalCustody",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>MaritalStatus</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['MaritalStatusEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "Single"
     * @const
     */
    "Single": "Single",

    /**
     * value: "Married"
     * @const
     */
    "Married": "Married",

    /**
     * value: "Divorced"
     * @const
     */
    "Divorced": "Divorced",

    /**
     * value: "Widowed"
     * @const
     */
    "Widowed": "Widowed"
};


/**
 * Allowed values for the <code>NicLiability</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['NicLiabilityEnum'] = {

    /**
     * value: "HasOtherJob"
     * @const
     */
    "HasOtherJob": "HasOtherJob",

    /**
     * value: "IsFemaleEntitledToReducedRate"
     * @const
     */
    "IsFemaleEntitledToReducedRate": "IsFemaleEntitledToReducedRate",

    /**
     * value: "IsNotLiable"
     * @const
     */
    "IsNotLiable": "IsNotLiable",

    /**
     * value: "IsContractedOut"
     * @const
     */
    "IsContractedOut": "IsContractedOut",

    /**
     * value: "IsFullyLiable"
     * @const
     */
    "IsFullyLiable": "IsFullyLiable",

    /**
     * value: "IsApprentice"
     * @const
     */
    "IsApprentice": "IsApprentice",

    /**
     * value: "LeaverBeyond6Weeks"
     * @const
     */
    "LeaverBeyond6Weeks": "LeaverBeyond6Weeks",

    /**
     * value: "PaymentAfterLeavingIrregular"
     * @const
     */
    "PaymentAfterLeavingIrregular": "PaymentAfterLeavingIrregular",

    /**
     * value: "IsFreePortWorker"
     * @const
     */
    "IsFreePortWorker": "IsFreePortWorker",

    /**
     * value: "IsNotLiableForEmployerNi"
     * @const
     */
    "IsNotLiableForEmployerNi": "IsNotLiableForEmployerNi"
};


/**
 * Allowed values for the <code>PaymentMethod</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['PaymentMethodEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "Cash"
     * @const
     */
    "Cash": "Cash",

    /**
     * value: "Cheque"
     * @const
     */
    "Cheque": "Cheque",

    /**
     * value: "BACS"
     * @const
     */
    "BACS": "BACS",

    /**
     * value: "FasterPayments"
     * @const
     */
    "FasterPayments": "FasterPayments",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>Region</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['RegionEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "England"
     * @const
     */
    "England": "England",

    /**
     * value: "Scotland"
     * @const
     */
    "Scotland": "Scotland",

    /**
     * value: "Wales"
     * @const
     */
    "Wales": "Wales"
};


/**
 * Allowed values for the <code>RuleExclusions</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['RuleExclusionsEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "NiMissingPayInstructionRule"
     * @const
     */
    "NiMissingPayInstructionRule": "NiMissingPayInstructionRule",

    /**
     * value: "TaxMissingPayInstructionRule"
     * @const
     */
    "TaxMissingPayInstructionRule": "TaxMissingPayInstructionRule",

    /**
     * value: "TaxCodeUpliftRule"
     * @const
     */
    "TaxCodeUpliftRule": "TaxCodeUpliftRule",

    /**
     * value: "NiSetExpectedLetterRule"
     * @const
     */
    "NiSetExpectedLetterRule": "NiSetExpectedLetterRule",

    /**
     * value: "NiDateOfBirthChangeRetrospectiveCRule"
     * @const
     */
    "NiDateOfBirthChangeRetrospectiveCRule": "NiDateOfBirthChangeRetrospectiveCRule",

    /**
     * value: "NiDefermentStatusChangeRule"
     * @const
     */
    "NiDefermentStatusChangeRule": "NiDefermentStatusChangeRule",

    /**
     * value: "NiEndContractedOutTransferRule"
     * @const
     */
    "NiEndContractedOutTransferRule": "NiEndContractedOutTransferRule",

    /**
     * value: "PaymentAfterLeavingTaxCodeRule"
     * @const
     */
    "PaymentAfterLeavingTaxCodeRule": "PaymentAfterLeavingTaxCodeRule",

    /**
     * value: "LeaverEndInstructionsRule"
     * @const
     */
    "LeaverEndInstructionsRule": "LeaverEndInstructionsRule",

    /**
     * value: "P45StudentLoanInstructionRule"
     * @const
     */
    "P45StudentLoanInstructionRule": "P45StudentLoanInstructionRule",

    /**
     * value: "P45TaxInstructionRule"
     * @const
     */
    "P45TaxInstructionRule": "P45TaxInstructionRule",

    /**
     * value: "P45YtdTaxRule"
     * @const
     */
    "P45YtdTaxRule": "P45YtdTaxRule",

    /**
     * value: "YtdInstructionRule"
     * @const
     */
    "YtdInstructionRule": "YtdInstructionRule",

    /**
     * value: "TaxCodeRegionChangeRule"
     * @const
     */
    "TaxCodeRegionChangeRule": "TaxCodeRegionChangeRule",

    /**
     * value: "AutoEnrolmentStatusChangeRule"
     * @const
     */
    "AutoEnrolmentStatusChangeRule": "AutoEnrolmentStatusChangeRule",

    /**
     * value: "EmployeeDeceasedRule"
     * @const
     */
    "EmployeeDeceasedRule": "EmployeeDeceasedRule",

    /**
     * value: "BenefitInstructionAutoEndRule"
     * @const
     */
    "BenefitInstructionAutoEndRule": "BenefitInstructionAutoEndRule"
};


/**
 * Allowed values for the <code>Seconded</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['SecondedEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "Stay183DaysOrMore"
     * @const
     */
    "Stay183DaysOrMore": "Stay183DaysOrMore",

    /**
     * value: "StayLessThan183Days"
     * @const
     */
    "StayLessThan183Days": "StayLessThan183Days",

    /**
     * value: "InOutUk"
     * @const
     */
    "InOutUk": "InOutUk"
};


/**
 * Allowed values for the <code>StarterDeclaration</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['StarterDeclarationEnum'] = {

    /**
     * value: "PreviouslyReported"
     * @const
     */
    "PreviouslyReported": "PreviouslyReported",

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "B"
     * @const
     */
    "B": "B",

    /**
     * value: "C"
     * @const
     */
    "C": "C"
};


/**
 * Allowed values for the <code>Territory</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['TerritoryEnum'] = {

    /**
     * value: "UnitedKingdom"
     * @const
     */
    "UnitedKingdom": "UnitedKingdom"
};


/**
 * Allowed values for the <code>WorkingWeek</code> property.
 * @enum {String}
 * @readonly
 */
Employee2['WorkingWeekEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Monday"
     * @const
     */
    "Monday": "Monday",

    /**
     * value: "Tuesday"
     * @const
     */
    "Tuesday": "Tuesday",

    /**
     * value: "Wednesday"
     * @const
     */
    "Wednesday": "Wednesday",

    /**
     * value: "Thursday"
     * @const
     */
    "Thursday": "Thursday",

    /**
     * value: "Friday"
     * @const
     */
    "Friday": "Friday",

    /**
     * value: "AllWeekDays"
     * @const
     */
    "AllWeekDays": "AllWeekDays",

    /**
     * value: "Saturday"
     * @const
     */
    "Saturday": "Saturday",

    /**
     * value: "Sunday"
     * @const
     */
    "Sunday": "Sunday",

    /**
     * value: "AllDays"
     * @const
     */
    "AllDays": "AllDays"
};



export default Employee2;

