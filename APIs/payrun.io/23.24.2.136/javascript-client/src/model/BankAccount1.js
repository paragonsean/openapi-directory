/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BankAccount1 model module.
 * @module model/BankAccount1
 * @version 23.24.2.136
 */
class BankAccount1 {
    /**
     * Constructs a new <code>BankAccount1</code>.
     * The employers&#39; bank account
     * @alias module:model/BankAccount1
     */
    constructor() { 
        
        BankAccount1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BankAccount1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankAccount1} obj Optional instance to populate.
     * @return {module:model/BankAccount1} The populated <code>BankAccount1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankAccount1();

            if (data.hasOwnProperty('AccountName')) {
                obj['AccountName'] = ApiClient.convertToType(data['AccountName'], 'String');
            }
            if (data.hasOwnProperty('AccountNumber')) {
                obj['AccountNumber'] = ApiClient.convertToType(data['AccountNumber'], 'String');
            }
            if (data.hasOwnProperty('BranchName')) {
                obj['BranchName'] = ApiClient.convertToType(data['BranchName'], 'String');
            }
            if (data.hasOwnProperty('Reference')) {
                obj['Reference'] = ApiClient.convertToType(data['Reference'], 'String');
            }
            if (data.hasOwnProperty('SortCode')) {
                obj['SortCode'] = ApiClient.convertToType(data['SortCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BankAccount1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BankAccount1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountName'] && !(typeof data['AccountName'] === 'string' || data['AccountName'] instanceof String)) {
            throw new Error("Expected the field `AccountName` to be a primitive type in the JSON string but got " + data['AccountName']);
        }
        // ensure the json data is a string
        if (data['AccountNumber'] && !(typeof data['AccountNumber'] === 'string' || data['AccountNumber'] instanceof String)) {
            throw new Error("Expected the field `AccountNumber` to be a primitive type in the JSON string but got " + data['AccountNumber']);
        }
        // ensure the json data is a string
        if (data['BranchName'] && !(typeof data['BranchName'] === 'string' || data['BranchName'] instanceof String)) {
            throw new Error("Expected the field `BranchName` to be a primitive type in the JSON string but got " + data['BranchName']);
        }
        // ensure the json data is a string
        if (data['Reference'] && !(typeof data['Reference'] === 'string' || data['Reference'] instanceof String)) {
            throw new Error("Expected the field `Reference` to be a primitive type in the JSON string but got " + data['Reference']);
        }
        // ensure the json data is a string
        if (data['SortCode'] && !(typeof data['SortCode'] === 'string' || data['SortCode'] instanceof String)) {
            throw new Error("Expected the field `SortCode` to be a primitive type in the JSON string but got " + data['SortCode']);
        }

        return true;
    }


}



/**
 * The bank accounts' account name
 * @member {String} AccountName
 */
BankAccount1.prototype['AccountName'] = undefined;

/**
 * The bank accounts' account number
 * @member {String} AccountNumber
 */
BankAccount1.prototype['AccountNumber'] = undefined;

/**
 * The bank accounts' branch name
 * @member {String} BranchName
 */
BankAccount1.prototype['BranchName'] = undefined;

/**
 * The bank accounts' reference
 * @member {String} Reference
 */
BankAccount1.prototype['Reference'] = undefined;

/**
 * The bank accounts' sort code
 * @member {String} SortCode
 */
BankAccount1.prototype['SortCode'] = undefined;






export default BankAccount1;

