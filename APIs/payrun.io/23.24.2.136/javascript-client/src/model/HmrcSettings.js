/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HmrcSettings model module.
 * @module model/HmrcSettings
 * @version 23.24.2.136
 */
class HmrcSettings {
    /**
     * Constructs a new <code>HmrcSettings</code>.
     * The employers&#39; hmrc settings
     * @alias module:model/HmrcSettings
     */
    constructor() { 
        
        HmrcSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HmrcSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HmrcSettings} obj Optional instance to populate.
     * @return {module:model/HmrcSettings} The populated <code>HmrcSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HmrcSettings();

            if (data.hasOwnProperty('AccountingOfficeRef')) {
                obj['AccountingOfficeRef'] = ApiClient.convertToType(data['AccountingOfficeRef'], 'String');
            }
            if (data.hasOwnProperty('COTAXRef')) {
                obj['COTAXRef'] = ApiClient.convertToType(data['COTAXRef'], 'String');
            }
            if (data.hasOwnProperty('ContactEmail')) {
                obj['ContactEmail'] = ApiClient.convertToType(data['ContactEmail'], 'String');
            }
            if (data.hasOwnProperty('ContactFax')) {
                obj['ContactFax'] = ApiClient.convertToType(data['ContactFax'], 'String');
            }
            if (data.hasOwnProperty('ContactFirstName')) {
                obj['ContactFirstName'] = ApiClient.convertToType(data['ContactFirstName'], 'String');
            }
            if (data.hasOwnProperty('ContactLastName')) {
                obj['ContactLastName'] = ApiClient.convertToType(data['ContactLastName'], 'String');
            }
            if (data.hasOwnProperty('ContactTelephone')) {
                obj['ContactTelephone'] = ApiClient.convertToType(data['ContactTelephone'], 'String');
            }
            if (data.hasOwnProperty('EmploymentAllowanceOverride')) {
                obj['EmploymentAllowanceOverride'] = ApiClient.convertToType(data['EmploymentAllowanceOverride'], 'Number');
            }
            if (data.hasOwnProperty('Password')) {
                obj['Password'] = ApiClient.convertToType(data['Password'], 'String');
            }
            if (data.hasOwnProperty('SAUTR')) {
                obj['SAUTR'] = ApiClient.convertToType(data['SAUTR'], 'String');
            }
            if (data.hasOwnProperty('Sender')) {
                obj['Sender'] = ApiClient.convertToType(data['Sender'], 'String');
            }
            if (data.hasOwnProperty('SenderId')) {
                obj['SenderId'] = ApiClient.convertToType(data['SenderId'], 'String');
            }
            if (data.hasOwnProperty('StateAidSector')) {
                obj['StateAidSector'] = ApiClient.convertToType(data['StateAidSector'], 'String');
            }
            if (data.hasOwnProperty('TaxOfficeNumber')) {
                obj['TaxOfficeNumber'] = ApiClient.convertToType(data['TaxOfficeNumber'], 'String');
            }
            if (data.hasOwnProperty('TaxOfficeReference')) {
                obj['TaxOfficeReference'] = ApiClient.convertToType(data['TaxOfficeReference'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HmrcSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HmrcSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountingOfficeRef'] && !(typeof data['AccountingOfficeRef'] === 'string' || data['AccountingOfficeRef'] instanceof String)) {
            throw new Error("Expected the field `AccountingOfficeRef` to be a primitive type in the JSON string but got " + data['AccountingOfficeRef']);
        }
        // ensure the json data is a string
        if (data['COTAXRef'] && !(typeof data['COTAXRef'] === 'string' || data['COTAXRef'] instanceof String)) {
            throw new Error("Expected the field `COTAXRef` to be a primitive type in the JSON string but got " + data['COTAXRef']);
        }
        // ensure the json data is a string
        if (data['ContactEmail'] && !(typeof data['ContactEmail'] === 'string' || data['ContactEmail'] instanceof String)) {
            throw new Error("Expected the field `ContactEmail` to be a primitive type in the JSON string but got " + data['ContactEmail']);
        }
        // ensure the json data is a string
        if (data['ContactFax'] && !(typeof data['ContactFax'] === 'string' || data['ContactFax'] instanceof String)) {
            throw new Error("Expected the field `ContactFax` to be a primitive type in the JSON string but got " + data['ContactFax']);
        }
        // ensure the json data is a string
        if (data['ContactFirstName'] && !(typeof data['ContactFirstName'] === 'string' || data['ContactFirstName'] instanceof String)) {
            throw new Error("Expected the field `ContactFirstName` to be a primitive type in the JSON string but got " + data['ContactFirstName']);
        }
        // ensure the json data is a string
        if (data['ContactLastName'] && !(typeof data['ContactLastName'] === 'string' || data['ContactLastName'] instanceof String)) {
            throw new Error("Expected the field `ContactLastName` to be a primitive type in the JSON string but got " + data['ContactLastName']);
        }
        // ensure the json data is a string
        if (data['ContactTelephone'] && !(typeof data['ContactTelephone'] === 'string' || data['ContactTelephone'] instanceof String)) {
            throw new Error("Expected the field `ContactTelephone` to be a primitive type in the JSON string but got " + data['ContactTelephone']);
        }
        // ensure the json data is a string
        if (data['Password'] && !(typeof data['Password'] === 'string' || data['Password'] instanceof String)) {
            throw new Error("Expected the field `Password` to be a primitive type in the JSON string but got " + data['Password']);
        }
        // ensure the json data is a string
        if (data['SAUTR'] && !(typeof data['SAUTR'] === 'string' || data['SAUTR'] instanceof String)) {
            throw new Error("Expected the field `SAUTR` to be a primitive type in the JSON string but got " + data['SAUTR']);
        }
        // ensure the json data is a string
        if (data['Sender'] && !(typeof data['Sender'] === 'string' || data['Sender'] instanceof String)) {
            throw new Error("Expected the field `Sender` to be a primitive type in the JSON string but got " + data['Sender']);
        }
        // ensure the json data is a string
        if (data['SenderId'] && !(typeof data['SenderId'] === 'string' || data['SenderId'] instanceof String)) {
            throw new Error("Expected the field `SenderId` to be a primitive type in the JSON string but got " + data['SenderId']);
        }
        // ensure the json data is a string
        if (data['StateAidSector'] && !(typeof data['StateAidSector'] === 'string' || data['StateAidSector'] instanceof String)) {
            throw new Error("Expected the field `StateAidSector` to be a primitive type in the JSON string but got " + data['StateAidSector']);
        }
        // ensure the json data is a string
        if (data['TaxOfficeNumber'] && !(typeof data['TaxOfficeNumber'] === 'string' || data['TaxOfficeNumber'] instanceof String)) {
            throw new Error("Expected the field `TaxOfficeNumber` to be a primitive type in the JSON string but got " + data['TaxOfficeNumber']);
        }
        // ensure the json data is a string
        if (data['TaxOfficeReference'] && !(typeof data['TaxOfficeReference'] === 'string' || data['TaxOfficeReference'] instanceof String)) {
            throw new Error("Expected the field `TaxOfficeReference` to be a primitive type in the JSON string but got " + data['TaxOfficeReference']);
        }

        return true;
    }


}



/**
 * The hmrc settingss' accounting office ref
 * @member {String} AccountingOfficeRef
 */
HmrcSettings.prototype['AccountingOfficeRef'] = undefined;

/**
 * The hmrc settingss' c o t a x ref
 * @member {String} COTAXRef
 */
HmrcSettings.prototype['COTAXRef'] = undefined;

/**
 * The hmrc settingss' contact email
 * @member {String} ContactEmail
 */
HmrcSettings.prototype['ContactEmail'] = undefined;

/**
 * The hmrc settingss' contact fax
 * @member {String} ContactFax
 */
HmrcSettings.prototype['ContactFax'] = undefined;

/**
 * The hmrc settingss' contact first name
 * @member {String} ContactFirstName
 */
HmrcSettings.prototype['ContactFirstName'] = undefined;

/**
 * The hmrc settingss' contact last name
 * @member {String} ContactLastName
 */
HmrcSettings.prototype['ContactLastName'] = undefined;

/**
 * The hmrc settingss' contact telephone
 * @member {String} ContactTelephone
 */
HmrcSettings.prototype['ContactTelephone'] = undefined;

/**
 * The hmrc settingss' employment allowance override
 * @member {Number} EmploymentAllowanceOverride
 */
HmrcSettings.prototype['EmploymentAllowanceOverride'] = undefined;

/**
 * The hmrc settingss' password
 * @member {String} Password
 */
HmrcSettings.prototype['Password'] = undefined;

/**
 * The hmrc settingss' s a u t r
 * @member {String} SAUTR
 */
HmrcSettings.prototype['SAUTR'] = undefined;

/**
 * The hmrc settingss' sender
 * @member {module:model/HmrcSettings.SenderEnum} Sender
 */
HmrcSettings.prototype['Sender'] = undefined;

/**
 * The hmrc settingss' sender id
 * @member {String} SenderId
 */
HmrcSettings.prototype['SenderId'] = undefined;

/**
 * The hmrc settingss' state aid sector
 * @member {module:model/HmrcSettings.StateAidSectorEnum} StateAidSector
 */
HmrcSettings.prototype['StateAidSector'] = undefined;

/**
 * The hmrc settingss' tax office number
 * @member {String} TaxOfficeNumber
 */
HmrcSettings.prototype['TaxOfficeNumber'] = undefined;

/**
 * The hmrc settingss' tax office reference
 * @member {String} TaxOfficeReference
 */
HmrcSettings.prototype['TaxOfficeReference'] = undefined;





/**
 * Allowed values for the <code>Sender</code> property.
 * @enum {String}
 * @readonly
 */
HmrcSettings['SenderEnum'] = {

    /**
     * value: "Employer"
     * @const
     */
    "Employer": "Employer",

    /**
     * value: "Individual"
     * @const
     */
    "Individual": "Individual",

    /**
     * value: "Company"
     * @const
     */
    "Company": "Company",

    /**
     * value: "Agent"
     * @const
     */
    "Agent": "Agent",

    /**
     * value: "Bureau"
     * @const
     */
    "Bureau": "Bureau",

    /**
     * value: "Partnership"
     * @const
     */
    "Partnership": "Partnership",

    /**
     * value: "Trust"
     * @const
     */
    "Trust": "Trust",

    /**
     * value: "Government"
     * @const
     */
    "Government": "Government",

    /**
     * value: "ActingInCapacity"
     * @const
     */
    "ActingInCapacity": "ActingInCapacity",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>StateAidSector</code> property.
 * @enum {String}
 * @readonly
 */
HmrcSettings['StateAidSectorEnum'] = {

    /**
     * value: "Agriculture"
     * @const
     */
    "Agriculture": "Agriculture",

    /**
     * value: "FisheriesAquaculture"
     * @const
     */
    "FisheriesAquaculture": "FisheriesAquaculture",

    /**
     * value: "RoadTransport"
     * @const
     */
    "RoadTransport": "RoadTransport",

    /**
     * value: "Industrial"
     * @const
     */
    "Industrial": "Industrial",

    /**
     * value: "NotApplicable"
     * @const
     */
    "NotApplicable": "NotApplicable"
};



export default HmrcSettings;

