/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Pension1 from './Pension1';
import PrimaryAddress from './PrimaryAddress';
import SecondaryAddress from './SecondaryAddress';

/**
 * The AutoEnrolment model module.
 * @module model/AutoEnrolment
 * @version 23.24.2.136
 */
class AutoEnrolment {
    /**
     * Constructs a new <code>AutoEnrolment</code>.
     * The employers&#39; auto enrolment
     * @alias module:model/AutoEnrolment
     */
    constructor() { 
        
        AutoEnrolment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AutoEnrolment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutoEnrolment} obj Optional instance to populate.
     * @return {module:model/AutoEnrolment} The populated <code>AutoEnrolment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutoEnrolment();

            if (data.hasOwnProperty('Pension')) {
                obj['Pension'] = Pension1.constructFromObject(data['Pension']);
            }
            if (data.hasOwnProperty('PostponementDate')) {
                obj['PostponementDate'] = ApiClient.convertToType(data['PostponementDate'], 'Date');
            }
            if (data.hasOwnProperty('PrimaryAddress')) {
                obj['PrimaryAddress'] = PrimaryAddress.constructFromObject(data['PrimaryAddress']);
            }
            if (data.hasOwnProperty('PrimaryEmail')) {
                obj['PrimaryEmail'] = ApiClient.convertToType(data['PrimaryEmail'], 'String');
            }
            if (data.hasOwnProperty('PrimaryFirstName')) {
                obj['PrimaryFirstName'] = ApiClient.convertToType(data['PrimaryFirstName'], 'String');
            }
            if (data.hasOwnProperty('PrimaryJobTitle')) {
                obj['PrimaryJobTitle'] = ApiClient.convertToType(data['PrimaryJobTitle'], 'String');
            }
            if (data.hasOwnProperty('PrimaryLastName')) {
                obj['PrimaryLastName'] = ApiClient.convertToType(data['PrimaryLastName'], 'String');
            }
            if (data.hasOwnProperty('PrimaryTelephone')) {
                obj['PrimaryTelephone'] = ApiClient.convertToType(data['PrimaryTelephone'], 'String');
            }
            if (data.hasOwnProperty('ReEnrolmentDayOffset')) {
                obj['ReEnrolmentDayOffset'] = ApiClient.convertToType(data['ReEnrolmentDayOffset'], 'Number');
            }
            if (data.hasOwnProperty('ReEnrolmentMonthOffset')) {
                obj['ReEnrolmentMonthOffset'] = ApiClient.convertToType(data['ReEnrolmentMonthOffset'], 'Number');
            }
            if (data.hasOwnProperty('RecentOptOutReEnrolmentExcluded')) {
                obj['RecentOptOutReEnrolmentExcluded'] = ApiClient.convertToType(data['RecentOptOutReEnrolmentExcluded'], 'Boolean');
            }
            if (data.hasOwnProperty('SecondaryAddress')) {
                obj['SecondaryAddress'] = SecondaryAddress.constructFromObject(data['SecondaryAddress']);
            }
            if (data.hasOwnProperty('SecondaryEmail')) {
                obj['SecondaryEmail'] = ApiClient.convertToType(data['SecondaryEmail'], 'String');
            }
            if (data.hasOwnProperty('SecondaryFirstName')) {
                obj['SecondaryFirstName'] = ApiClient.convertToType(data['SecondaryFirstName'], 'String');
            }
            if (data.hasOwnProperty('SecondaryJobTitle')) {
                obj['SecondaryJobTitle'] = ApiClient.convertToType(data['SecondaryJobTitle'], 'String');
            }
            if (data.hasOwnProperty('SecondaryLastName')) {
                obj['SecondaryLastName'] = ApiClient.convertToType(data['SecondaryLastName'], 'String');
            }
            if (data.hasOwnProperty('SecondaryTelephone')) {
                obj['SecondaryTelephone'] = ApiClient.convertToType(data['SecondaryTelephone'], 'String');
            }
            if (data.hasOwnProperty('StagingDate')) {
                obj['StagingDate'] = ApiClient.convertToType(data['StagingDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutoEnrolment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutoEnrolment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Pension`
        if (data['Pension']) { // data not null
          Pension1.validateJSON(data['Pension']);
        }
        // validate the optional field `PrimaryAddress`
        if (data['PrimaryAddress']) { // data not null
          PrimaryAddress.validateJSON(data['PrimaryAddress']);
        }
        // ensure the json data is a string
        if (data['PrimaryEmail'] && !(typeof data['PrimaryEmail'] === 'string' || data['PrimaryEmail'] instanceof String)) {
            throw new Error("Expected the field `PrimaryEmail` to be a primitive type in the JSON string but got " + data['PrimaryEmail']);
        }
        // ensure the json data is a string
        if (data['PrimaryFirstName'] && !(typeof data['PrimaryFirstName'] === 'string' || data['PrimaryFirstName'] instanceof String)) {
            throw new Error("Expected the field `PrimaryFirstName` to be a primitive type in the JSON string but got " + data['PrimaryFirstName']);
        }
        // ensure the json data is a string
        if (data['PrimaryJobTitle'] && !(typeof data['PrimaryJobTitle'] === 'string' || data['PrimaryJobTitle'] instanceof String)) {
            throw new Error("Expected the field `PrimaryJobTitle` to be a primitive type in the JSON string but got " + data['PrimaryJobTitle']);
        }
        // ensure the json data is a string
        if (data['PrimaryLastName'] && !(typeof data['PrimaryLastName'] === 'string' || data['PrimaryLastName'] instanceof String)) {
            throw new Error("Expected the field `PrimaryLastName` to be a primitive type in the JSON string but got " + data['PrimaryLastName']);
        }
        // ensure the json data is a string
        if (data['PrimaryTelephone'] && !(typeof data['PrimaryTelephone'] === 'string' || data['PrimaryTelephone'] instanceof String)) {
            throw new Error("Expected the field `PrimaryTelephone` to be a primitive type in the JSON string but got " + data['PrimaryTelephone']);
        }
        // validate the optional field `SecondaryAddress`
        if (data['SecondaryAddress']) { // data not null
          SecondaryAddress.validateJSON(data['SecondaryAddress']);
        }
        // ensure the json data is a string
        if (data['SecondaryEmail'] && !(typeof data['SecondaryEmail'] === 'string' || data['SecondaryEmail'] instanceof String)) {
            throw new Error("Expected the field `SecondaryEmail` to be a primitive type in the JSON string but got " + data['SecondaryEmail']);
        }
        // ensure the json data is a string
        if (data['SecondaryFirstName'] && !(typeof data['SecondaryFirstName'] === 'string' || data['SecondaryFirstName'] instanceof String)) {
            throw new Error("Expected the field `SecondaryFirstName` to be a primitive type in the JSON string but got " + data['SecondaryFirstName']);
        }
        // ensure the json data is a string
        if (data['SecondaryJobTitle'] && !(typeof data['SecondaryJobTitle'] === 'string' || data['SecondaryJobTitle'] instanceof String)) {
            throw new Error("Expected the field `SecondaryJobTitle` to be a primitive type in the JSON string but got " + data['SecondaryJobTitle']);
        }
        // ensure the json data is a string
        if (data['SecondaryLastName'] && !(typeof data['SecondaryLastName'] === 'string' || data['SecondaryLastName'] instanceof String)) {
            throw new Error("Expected the field `SecondaryLastName` to be a primitive type in the JSON string but got " + data['SecondaryLastName']);
        }
        // ensure the json data is a string
        if (data['SecondaryTelephone'] && !(typeof data['SecondaryTelephone'] === 'string' || data['SecondaryTelephone'] instanceof String)) {
            throw new Error("Expected the field `SecondaryTelephone` to be a primitive type in the JSON string but got " + data['SecondaryTelephone']);
        }

        return true;
    }


}



/**
 * @member {module:model/Pension1} Pension
 */
AutoEnrolment.prototype['Pension'] = undefined;

/**
 * The employer auto enrolments' postponement date
 * @member {Date} PostponementDate
 */
AutoEnrolment.prototype['PostponementDate'] = undefined;

/**
 * @member {module:model/PrimaryAddress} PrimaryAddress
 */
AutoEnrolment.prototype['PrimaryAddress'] = undefined;

/**
 * The employer auto enrolments' primary email
 * @member {String} PrimaryEmail
 */
AutoEnrolment.prototype['PrimaryEmail'] = undefined;

/**
 * The employer auto enrolments' primary first name
 * @member {String} PrimaryFirstName
 */
AutoEnrolment.prototype['PrimaryFirstName'] = undefined;

/**
 * The employer auto enrolments' primary job title
 * @member {String} PrimaryJobTitle
 */
AutoEnrolment.prototype['PrimaryJobTitle'] = undefined;

/**
 * The employer auto enrolments' primary last name
 * @member {String} PrimaryLastName
 */
AutoEnrolment.prototype['PrimaryLastName'] = undefined;

/**
 * The employer auto enrolments' primary telephone
 * @member {String} PrimaryTelephone
 */
AutoEnrolment.prototype['PrimaryTelephone'] = undefined;

/**
 * The employer auto enrolments' re enrolment day offset
 * @member {Number} ReEnrolmentDayOffset
 */
AutoEnrolment.prototype['ReEnrolmentDayOffset'] = undefined;

/**
 * The employer auto enrolments' re enrolment month offset
 * @member {Number} ReEnrolmentMonthOffset
 */
AutoEnrolment.prototype['ReEnrolmentMonthOffset'] = undefined;

/**
 * The employer auto enrolments' recent opt out re enrolment excluded
 * @member {Boolean} RecentOptOutReEnrolmentExcluded
 */
AutoEnrolment.prototype['RecentOptOutReEnrolmentExcluded'] = undefined;

/**
 * @member {module:model/SecondaryAddress} SecondaryAddress
 */
AutoEnrolment.prototype['SecondaryAddress'] = undefined;

/**
 * The employer auto enrolments' secondary email
 * @member {String} SecondaryEmail
 */
AutoEnrolment.prototype['SecondaryEmail'] = undefined;

/**
 * The employer auto enrolments' secondary first name
 * @member {String} SecondaryFirstName
 */
AutoEnrolment.prototype['SecondaryFirstName'] = undefined;

/**
 * The employer auto enrolments' secondary job title
 * @member {String} SecondaryJobTitle
 */
AutoEnrolment.prototype['SecondaryJobTitle'] = undefined;

/**
 * The employer auto enrolments' secondary last name
 * @member {String} SecondaryLastName
 */
AutoEnrolment.prototype['SecondaryLastName'] = undefined;

/**
 * The employer auto enrolments' secondary telephone
 * @member {String} SecondaryTelephone
 */
AutoEnrolment.prototype['SecondaryTelephone'] = undefined;

/**
 * The employer auto enrolments' staging date
 * @member {Date} StagingDate
 */
AutoEnrolment.prototype['StagingDate'] = undefined;






export default AutoEnrolment;

