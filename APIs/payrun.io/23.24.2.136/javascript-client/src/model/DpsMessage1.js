/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DpsMessage1 model module.
 * @module model/DpsMessage1
 * @version 23.24.2.136
 */
class DpsMessage1 {
    /**
     * Constructs a new <code>DpsMessage1</code>.
     * @alias module:model/DpsMessage1
     */
    constructor() { 
        
        DpsMessage1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DpsMessage1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DpsMessage1} obj Optional instance to populate.
     * @return {module:model/DpsMessage1} The populated <code>DpsMessage1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DpsMessage1();

            if (data.hasOwnProperty('FormType')) {
                obj['FormType'] = ApiClient.convertToType(data['FormType'], 'String');
            }
            if (data.hasOwnProperty('IssueDate')) {
                obj['IssueDate'] = ApiClient.convertToType(data['IssueDate'], 'Date');
            }
            if (data.hasOwnProperty('LastUpdated')) {
                obj['LastUpdated'] = ApiClient.convertToType(data['LastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
            if (data.hasOwnProperty('MessageStatus')) {
                obj['MessageStatus'] = ApiClient.convertToType(data['MessageStatus'], 'String');
            }
            if (data.hasOwnProperty('MessageType')) {
                obj['MessageType'] = ApiClient.convertToType(data['MessageType'], 'String');
            }
            if (data.hasOwnProperty('ProcessingResult')) {
                obj['ProcessingResult'] = ApiClient.convertToType(data['ProcessingResult'], 'String');
            }
            if (data.hasOwnProperty('RetrieveDate')) {
                obj['RetrieveDate'] = ApiClient.convertToType(data['RetrieveDate'], 'Date');
            }
            if (data.hasOwnProperty('SequenceNumber')) {
                obj['SequenceNumber'] = ApiClient.convertToType(data['SequenceNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DpsMessage1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DpsMessage1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['FormType'] && !(typeof data['FormType'] === 'string' || data['FormType'] instanceof String)) {
            throw new Error("Expected the field `FormType` to be a primitive type in the JSON string but got " + data['FormType']);
        }
        // ensure the json data is a string
        if (data['Message'] && !(typeof data['Message'] === 'string' || data['Message'] instanceof String)) {
            throw new Error("Expected the field `Message` to be a primitive type in the JSON string but got " + data['Message']);
        }
        // ensure the json data is a string
        if (data['MessageStatus'] && !(typeof data['MessageStatus'] === 'string' || data['MessageStatus'] instanceof String)) {
            throw new Error("Expected the field `MessageStatus` to be a primitive type in the JSON string but got " + data['MessageStatus']);
        }
        // ensure the json data is a string
        if (data['MessageType'] && !(typeof data['MessageType'] === 'string' || data['MessageType'] instanceof String)) {
            throw new Error("Expected the field `MessageType` to be a primitive type in the JSON string but got " + data['MessageType']);
        }
        // ensure the json data is a string
        if (data['ProcessingResult'] && !(typeof data['ProcessingResult'] === 'string' || data['ProcessingResult'] instanceof String)) {
            throw new Error("Expected the field `ProcessingResult` to be a primitive type in the JSON string but got " + data['ProcessingResult']);
        }

        return true;
    }


}



/**
 * The dps messages' form type
 * @member {String} FormType
 */
DpsMessage1.prototype['FormType'] = undefined;

/**
 * The dps messages' issue date
 * @member {Date} IssueDate
 */
DpsMessage1.prototype['IssueDate'] = undefined;

/**
 * The dps messages' last updated
 * @member {Date} LastUpdated
 */
DpsMessage1.prototype['LastUpdated'] = undefined;

/**
 * The dps messages' message
 * @member {String} Message
 */
DpsMessage1.prototype['Message'] = undefined;

/**
 * The dps messages' message status
 * @member {module:model/DpsMessage1.MessageStatusEnum} MessageStatus
 */
DpsMessage1.prototype['MessageStatus'] = undefined;

/**
 * The dps messages' message type
 * @member {String} MessageType
 */
DpsMessage1.prototype['MessageType'] = undefined;

/**
 * The dps messages' processing result
 * @member {String} ProcessingResult
 */
DpsMessage1.prototype['ProcessingResult'] = undefined;

/**
 * The dps messages' retrieve date
 * @member {Date} RetrieveDate
 */
DpsMessage1.prototype['RetrieveDate'] = undefined;

/**
 * The dps messages' sequence number
 * @member {Number} SequenceNumber
 */
DpsMessage1.prototype['SequenceNumber'] = undefined;





/**
 * Allowed values for the <code>MessageStatus</code> property.
 * @enum {String}
 * @readonly
 */
DpsMessage1['MessageStatusEnum'] = {

    /**
     * value: "Retrieved"
     * @const
     */
    "Retrieved": "Retrieved",

    /**
     * value: "Applied"
     * @const
     */
    "Applied": "Applied",

    /**
     * value: "Unresolved"
     * @const
     */
    "Unresolved": "Unresolved",

    /**
     * value: "Ignored"
     * @const
     */
    "Ignored": "Ignored",

    /**
     * value: "Information"
     * @const
     */
    "Information": "Information"
};



export default DpsMessage1;

