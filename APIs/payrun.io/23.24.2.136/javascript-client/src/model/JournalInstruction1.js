/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JournalInstruction1 model module.
 * @module model/JournalInstruction1
 * @version 23.24.2.136
 */
class JournalInstruction1 {
    /**
     * Constructs a new <code>JournalInstruction1</code>.
     * @alias module:model/JournalInstruction1
     */
    constructor() { 
        
        JournalInstruction1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JournalInstruction1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JournalInstruction1} obj Optional instance to populate.
     * @return {module:model/JournalInstruction1} The populated <code>JournalInstruction1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JournalInstruction1();

            if (data.hasOwnProperty('AccountingType')) {
                obj['AccountingType'] = ApiClient.convertToType(data['AccountingType'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'Date');
            }
            if (data.hasOwnProperty('Expression')) {
                obj['Expression'] = ApiClient.convertToType(data['Expression'], 'String');
            }
            if (data.hasOwnProperty('JournalLineTag')) {
                obj['JournalLineTag'] = ApiClient.convertToType(data['JournalLineTag'], 'String');
            }
            if (data.hasOwnProperty('LedgerTarget')) {
                obj['LedgerTarget'] = ApiClient.convertToType(data['LedgerTarget'], 'String');
            }
            if (data.hasOwnProperty('NomCode')) {
                obj['NomCode'] = ApiClient.convertToType(data['NomCode'], 'String');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'Date');
            }
            if (data.hasOwnProperty('SubNomCode')) {
                obj['SubNomCode'] = ApiClient.convertToType(data['SubNomCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JournalInstruction1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JournalInstruction1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountingType'] && !(typeof data['AccountingType'] === 'string' || data['AccountingType'] instanceof String)) {
            throw new Error("Expected the field `AccountingType` to be a primitive type in the JSON string but got " + data['AccountingType']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Expression'] && !(typeof data['Expression'] === 'string' || data['Expression'] instanceof String)) {
            throw new Error("Expected the field `Expression` to be a primitive type in the JSON string but got " + data['Expression']);
        }
        // ensure the json data is a string
        if (data['JournalLineTag'] && !(typeof data['JournalLineTag'] === 'string' || data['JournalLineTag'] instanceof String)) {
            throw new Error("Expected the field `JournalLineTag` to be a primitive type in the JSON string but got " + data['JournalLineTag']);
        }
        // ensure the json data is a string
        if (data['LedgerTarget'] && !(typeof data['LedgerTarget'] === 'string' || data['LedgerTarget'] instanceof String)) {
            throw new Error("Expected the field `LedgerTarget` to be a primitive type in the JSON string but got " + data['LedgerTarget']);
        }
        // ensure the json data is a string
        if (data['NomCode'] && !(typeof data['NomCode'] === 'string' || data['NomCode'] instanceof String)) {
            throw new Error("Expected the field `NomCode` to be a primitive type in the JSON string but got " + data['NomCode']);
        }
        // ensure the json data is a string
        if (data['SubNomCode'] && !(typeof data['SubNomCode'] === 'string' || data['SubNomCode'] instanceof String)) {
            throw new Error("Expected the field `SubNomCode` to be a primitive type in the JSON string but got " + data['SubNomCode']);
        }

        return true;
    }


}



/**
 * The journal instructions' accounting type
 * @member {module:model/JournalInstruction1.AccountingTypeEnum} AccountingType
 */
JournalInstruction1.prototype['AccountingType'] = undefined;

/**
 * The journal instructions' description
 * @member {String} Description
 */
JournalInstruction1.prototype['Description'] = undefined;

/**
 * The journal instructions' end date
 * @member {Date} EndDate
 */
JournalInstruction1.prototype['EndDate'] = undefined;

/**
 * The journal instructions' expression
 * @member {String} Expression
 */
JournalInstruction1.prototype['Expression'] = undefined;

/**
 * The journal instructions' journal line tag
 * @member {String} JournalLineTag
 */
JournalInstruction1.prototype['JournalLineTag'] = undefined;

/**
 * The journal instructions' ledger target
 * @member {String} LedgerTarget
 */
JournalInstruction1.prototype['LedgerTarget'] = undefined;

/**
 * The journal instructions' nom code
 * @member {String} NomCode
 */
JournalInstruction1.prototype['NomCode'] = undefined;

/**
 * The journal instructions' start date
 * @member {Date} StartDate
 */
JournalInstruction1.prototype['StartDate'] = undefined;

/**
 * The journal instructions' sub nom code
 * @member {String} SubNomCode
 */
JournalInstruction1.prototype['SubNomCode'] = undefined;





/**
 * Allowed values for the <code>AccountingType</code> property.
 * @enum {String}
 * @readonly
 */
JournalInstruction1['AccountingTypeEnum'] = {

    /**
     * value: "Credit"
     * @const
     */
    "Credit": "Credit",

    /**
     * value: "Debit"
     * @const
     */
    "Debit": "Debit"
};



export default JournalInstruction1;

