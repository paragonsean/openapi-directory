/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CisLine1 model module.
 * @module model/CisLine1
 * @version 23.24.2.136
 */
class CisLine1 {
    /**
     * Constructs a new <code>CisLine1</code>.
     * @alias module:model/CisLine1
     */
    constructor() { 
        
        CisLine1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CisLine1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CisLine1} obj Optional instance to populate.
     * @return {module:model/CisLine1} The populated <code>CisLine1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CisLine1();

            if (data.hasOwnProperty('CisDeduction')) {
                obj['CisDeduction'] = ApiClient.convertToType(data['CisDeduction'], 'Number');
            }
            if (data.hasOwnProperty('CisLineType')) {
                obj['CisLineType'] = ApiClient.convertToType(data['CisLineType'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Generated')) {
                obj['Generated'] = ApiClient.convertToType(data['Generated'], 'Date');
            }
            if (data.hasOwnProperty('GrossPay')) {
                obj['GrossPay'] = ApiClient.convertToType(data['GrossPay'], 'Number');
            }
            if (data.hasOwnProperty('NominalCodeKey')) {
                obj['NominalCodeKey'] = ApiClient.convertToType(data['NominalCodeKey'], 'String');
            }
            if (data.hasOwnProperty('PayFrequency')) {
                obj['PayFrequency'] = ApiClient.convertToType(data['PayFrequency'], 'String');
            }
            if (data.hasOwnProperty('TaxMonth')) {
                obj['TaxMonth'] = ApiClient.convertToType(data['TaxMonth'], 'Number');
            }
            if (data.hasOwnProperty('TaxPeriod')) {
                obj['TaxPeriod'] = ApiClient.convertToType(data['TaxPeriod'], 'Number');
            }
            if (data.hasOwnProperty('TaxTreatment')) {
                obj['TaxTreatment'] = ApiClient.convertToType(data['TaxTreatment'], 'String');
            }
            if (data.hasOwnProperty('TaxYear')) {
                obj['TaxYear'] = ApiClient.convertToType(data['TaxYear'], 'Number');
            }
            if (data.hasOwnProperty('UOM')) {
                obj['UOM'] = ApiClient.convertToType(data['UOM'], 'String');
            }
            if (data.hasOwnProperty('UnitRate')) {
                obj['UnitRate'] = ApiClient.convertToType(data['UnitRate'], 'Number');
            }
            if (data.hasOwnProperty('Units')) {
                obj['Units'] = ApiClient.convertToType(data['Units'], 'Number');
            }
            if (data.hasOwnProperty('VAT')) {
                obj['VAT'] = ApiClient.convertToType(data['VAT'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CisLine1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CisLine1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CisLineType'] && !(typeof data['CisLineType'] === 'string' || data['CisLineType'] instanceof String)) {
            throw new Error("Expected the field `CisLineType` to be a primitive type in the JSON string but got " + data['CisLineType']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['NominalCodeKey'] && !(typeof data['NominalCodeKey'] === 'string' || data['NominalCodeKey'] instanceof String)) {
            throw new Error("Expected the field `NominalCodeKey` to be a primitive type in the JSON string but got " + data['NominalCodeKey']);
        }
        // ensure the json data is a string
        if (data['PayFrequency'] && !(typeof data['PayFrequency'] === 'string' || data['PayFrequency'] instanceof String)) {
            throw new Error("Expected the field `PayFrequency` to be a primitive type in the JSON string but got " + data['PayFrequency']);
        }
        // ensure the json data is a string
        if (data['TaxTreatment'] && !(typeof data['TaxTreatment'] === 'string' || data['TaxTreatment'] instanceof String)) {
            throw new Error("Expected the field `TaxTreatment` to be a primitive type in the JSON string but got " + data['TaxTreatment']);
        }
        // ensure the json data is a string
        if (data['UOM'] && !(typeof data['UOM'] === 'string' || data['UOM'] instanceof String)) {
            throw new Error("Expected the field `UOM` to be a primitive type in the JSON string but got " + data['UOM']);
        }

        return true;
    }


}



/**
 * The cis lines' cis deduction
 * @member {Number} CisDeduction
 */
CisLine1.prototype['CisDeduction'] = undefined;

/**
 * The cis lines' cis line type
 * @member {String} CisLineType
 */
CisLine1.prototype['CisLineType'] = undefined;

/**
 * The cis lines' description
 * @member {String} Description
 */
CisLine1.prototype['Description'] = undefined;

/**
 * The cis lines' generated
 * @member {Date} Generated
 */
CisLine1.prototype['Generated'] = undefined;

/**
 * The cis lines' gross pay
 * @member {Number} GrossPay
 */
CisLine1.prototype['GrossPay'] = undefined;

/**
 * The cis lines' nominal code key
 * @member {String} NominalCodeKey
 */
CisLine1.prototype['NominalCodeKey'] = undefined;

/**
 * The cis lines' pay frequency
 * @member {module:model/CisLine1.PayFrequencyEnum} PayFrequency
 */
CisLine1.prototype['PayFrequency'] = undefined;

/**
 * The cis lines' tax month
 * @member {Number} TaxMonth
 */
CisLine1.prototype['TaxMonth'] = undefined;

/**
 * The cis lines' tax period
 * @member {Number} TaxPeriod
 */
CisLine1.prototype['TaxPeriod'] = undefined;

/**
 * The cis lines' tax treatment
 * @member {module:model/CisLine1.TaxTreatmentEnum} TaxTreatment
 */
CisLine1.prototype['TaxTreatment'] = undefined;

/**
 * The cis lines' tax year
 * @member {Number} TaxYear
 */
CisLine1.prototype['TaxYear'] = undefined;

/**
 * The cis lines' u o m
 * @member {module:model/CisLine1.UOMEnum} UOM
 */
CisLine1.prototype['UOM'] = undefined;

/**
 * The cis lines' unit rate
 * @member {Number} UnitRate
 */
CisLine1.prototype['UnitRate'] = undefined;

/**
 * The cis lines' units
 * @member {Number} Units
 */
CisLine1.prototype['Units'] = undefined;

/**
 * The cis lines' v a t
 * @member {Number} VAT
 */
CisLine1.prototype['VAT'] = undefined;





/**
 * Allowed values for the <code>PayFrequency</code> property.
 * @enum {String}
 * @readonly
 */
CisLine1['PayFrequencyEnum'] = {

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "Weekly"
     * @const
     */
    "Weekly": "Weekly"
};


/**
 * Allowed values for the <code>TaxTreatment</code> property.
 * @enum {String}
 * @readonly
 */
CisLine1['TaxTreatmentEnum'] = {

    /**
     * value: "Taxable"
     * @const
     */
    "Taxable": "Taxable",

    /**
     * value: "NonTaxable"
     * @const
     */
    "NonTaxable": "NonTaxable",

    /**
     * value: "Notional"
     * @const
     */
    "Notional": "Notional",

    /**
     * value: "Materials"
     * @const
     */
    "Materials": "Materials"
};


/**
 * Allowed values for the <code>UOM</code> property.
 * @enum {String}
 * @readonly
 */
CisLine1['UOMEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "Minute"
     * @const
     */
    "Minute": "Minute",

    /**
     * value: "Hour"
     * @const
     */
    "Hour": "Hour",

    /**
     * value: "Day"
     * @const
     */
    "Day": "Day",

    /**
     * value: "Week"
     * @const
     */
    "Week": "Week",

    /**
     * value: "Month"
     * @const
     */
    "Month": "Month",

    /**
     * value: "Year"
     * @const
     */
    "Year": "Year",

    /**
     * value: "Unit"
     * @const
     */
    "Unit": "Unit"
};



export default CisLine1;

