/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Employer4 model module.
 * @module model/Employer4
 * @version 23.24.2.136
 */
class Employer4 {
    /**
     * Constructs a new <code>Employer4</code>.
     * The rti job instructions&#39; employer
     * @alias module:model/Employer4
     */
    constructor() { 
        
        Employer4.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Employer4</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Employer4} obj Optional instance to populate.
     * @return {module:model/Employer4} The populated <code>Employer4</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Employer4();

            if (data.hasOwnProperty('@href')) {
                obj['@href'] = ApiClient.convertToType(data['@href'], 'String');
            }
            if (data.hasOwnProperty('@rel')) {
                obj['@rel'] = ApiClient.convertToType(data['@rel'], 'String');
            }
            if (data.hasOwnProperty('@title')) {
                obj['@title'] = ApiClient.convertToType(data['@title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Employer4</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Employer4</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['@href'] && !(typeof data['@href'] === 'string' || data['@href'] instanceof String)) {
            throw new Error("Expected the field `@href` to be a primitive type in the JSON string but got " + data['@href']);
        }
        // ensure the json data is a string
        if (data['@rel'] && !(typeof data['@rel'] === 'string' || data['@rel'] instanceof String)) {
            throw new Error("Expected the field `@rel` to be a primitive type in the JSON string but got " + data['@rel']);
        }
        // ensure the json data is a string
        if (data['@title'] && !(typeof data['@title'] === 'string' || data['@title'] instanceof String)) {
            throw new Error("Expected the field `@title` to be a primitive type in the JSON string but got " + data['@title']);
        }

        return true;
    }


}



/**
 * The links' href
 * @member {String} @href
 */
Employer4.prototype['@href'] = undefined;

/**
 * The links' target type
 * @member {String} @rel
 */
Employer4.prototype['@rel'] = undefined;

/**
 * The links' title
 * @member {String} @title
 */
Employer4.prototype['@title'] = undefined;






export default Employer4;

