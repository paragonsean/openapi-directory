/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AEAssessment1 model module.
 * @module model/AEAssessment1
 * @version 23.24.2.136
 */
class AEAssessment1 {
    /**
     * Constructs a new <code>AEAssessment1</code>.
     * @alias module:model/AEAssessment1
     */
    constructor() { 
        
        AEAssessment1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AEAssessment1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AEAssessment1} obj Optional instance to populate.
     * @return {module:model/AEAssessment1} The populated <code>AEAssessment1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AEAssessment1();

            if (data.hasOwnProperty('Age')) {
                obj['Age'] = ApiClient.convertToType(data['Age'], 'Number');
            }
            if (data.hasOwnProperty('AssessmentCode')) {
                obj['AssessmentCode'] = ApiClient.convertToType(data['AssessmentCode'], 'String');
            }
            if (data.hasOwnProperty('AssessmentDate')) {
                obj['AssessmentDate'] = ApiClient.convertToType(data['AssessmentDate'], 'Date');
            }
            if (data.hasOwnProperty('AssessmentEvent')) {
                obj['AssessmentEvent'] = ApiClient.convertToType(data['AssessmentEvent'], 'String');
            }
            if (data.hasOwnProperty('AssessmentOverride')) {
                obj['AssessmentOverride'] = ApiClient.convertToType(data['AssessmentOverride'], 'String');
            }
            if (data.hasOwnProperty('AssessmentResult')) {
                obj['AssessmentResult'] = ApiClient.convertToType(data['AssessmentResult'], 'String');
            }
            if (data.hasOwnProperty('IsMemberOfAlternativePensionScheme')) {
                obj['IsMemberOfAlternativePensionScheme'] = ApiClient.convertToType(data['IsMemberOfAlternativePensionScheme'], 'Boolean');
            }
            if (data.hasOwnProperty('OptOutWindowEndDate')) {
                obj['OptOutWindowEndDate'] = ApiClient.convertToType(data['OptOutWindowEndDate'], 'Date');
            }
            if (data.hasOwnProperty('QualifyingEarnings')) {
                obj['QualifyingEarnings'] = ApiClient.convertToType(data['QualifyingEarnings'], 'Number');
            }
            if (data.hasOwnProperty('ReenrolmentDate')) {
                obj['ReenrolmentDate'] = ApiClient.convertToType(data['ReenrolmentDate'], 'Date');
            }
            if (data.hasOwnProperty('StatePensionAge')) {
                obj['StatePensionAge'] = ApiClient.convertToType(data['StatePensionAge'], 'Number');
            }
            if (data.hasOwnProperty('StatePensionDate')) {
                obj['StatePensionDate'] = ApiClient.convertToType(data['StatePensionDate'], 'Date');
            }
            if (data.hasOwnProperty('TaxPeriod')) {
                obj['TaxPeriod'] = ApiClient.convertToType(data['TaxPeriod'], 'Number');
            }
            if (data.hasOwnProperty('TaxYear')) {
                obj['TaxYear'] = ApiClient.convertToType(data['TaxYear'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AEAssessment1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AEAssessment1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AssessmentCode'] && !(typeof data['AssessmentCode'] === 'string' || data['AssessmentCode'] instanceof String)) {
            throw new Error("Expected the field `AssessmentCode` to be a primitive type in the JSON string but got " + data['AssessmentCode']);
        }
        // ensure the json data is a string
        if (data['AssessmentEvent'] && !(typeof data['AssessmentEvent'] === 'string' || data['AssessmentEvent'] instanceof String)) {
            throw new Error("Expected the field `AssessmentEvent` to be a primitive type in the JSON string but got " + data['AssessmentEvent']);
        }
        // ensure the json data is a string
        if (data['AssessmentOverride'] && !(typeof data['AssessmentOverride'] === 'string' || data['AssessmentOverride'] instanceof String)) {
            throw new Error("Expected the field `AssessmentOverride` to be a primitive type in the JSON string but got " + data['AssessmentOverride']);
        }
        // ensure the json data is a string
        if (data['AssessmentResult'] && !(typeof data['AssessmentResult'] === 'string' || data['AssessmentResult'] instanceof String)) {
            throw new Error("Expected the field `AssessmentResult` to be a primitive type in the JSON string but got " + data['AssessmentResult']);
        }

        return true;
    }


}



/**
 * The a e assessments' age
 * @member {Number} Age
 */
AEAssessment1.prototype['Age'] = undefined;

/**
 * The a e assessments' assessment code
 * @member {module:model/AEAssessment1.AssessmentCodeEnum} AssessmentCode
 */
AEAssessment1.prototype['AssessmentCode'] = undefined;

/**
 * The a e assessments' assessment date
 * @member {Date} AssessmentDate
 */
AEAssessment1.prototype['AssessmentDate'] = undefined;

/**
 * The a e assessments' assessment event
 * @member {module:model/AEAssessment1.AssessmentEventEnum} AssessmentEvent
 */
AEAssessment1.prototype['AssessmentEvent'] = undefined;

/**
 * The a e assessments' assessment override
 * @member {module:model/AEAssessment1.AssessmentOverrideEnum} AssessmentOverride
 */
AEAssessment1.prototype['AssessmentOverride'] = undefined;

/**
 * The a e assessments' assessment result
 * @member {module:model/AEAssessment1.AssessmentResultEnum} AssessmentResult
 */
AEAssessment1.prototype['AssessmentResult'] = undefined;

/**
 * The a e assessments' is member of alternative pension scheme
 * @member {Boolean} IsMemberOfAlternativePensionScheme
 */
AEAssessment1.prototype['IsMemberOfAlternativePensionScheme'] = undefined;

/**
 * The a e assessments' opt out window end date
 * @member {Date} OptOutWindowEndDate
 */
AEAssessment1.prototype['OptOutWindowEndDate'] = undefined;

/**
 * The a e assessments' qualifying earnings
 * @member {Number} QualifyingEarnings
 */
AEAssessment1.prototype['QualifyingEarnings'] = undefined;

/**
 * The a e assessments' reenrolment date
 * @member {Date} ReenrolmentDate
 */
AEAssessment1.prototype['ReenrolmentDate'] = undefined;

/**
 * The a e assessments' state pension age
 * @member {Number} StatePensionAge
 */
AEAssessment1.prototype['StatePensionAge'] = undefined;

/**
 * The a e assessments' state pension date
 * @member {Date} StatePensionDate
 */
AEAssessment1.prototype['StatePensionDate'] = undefined;

/**
 * The a e assessments' tax period
 * @member {Number} TaxPeriod
 */
AEAssessment1.prototype['TaxPeriod'] = undefined;

/**
 * The a e assessments' tax year
 * @member {Number} TaxYear
 */
AEAssessment1.prototype['TaxYear'] = undefined;





/**
 * Allowed values for the <code>AssessmentCode</code> property.
 * @enum {String}
 * @readonly
 */
AEAssessment1['AssessmentCodeEnum'] = {

    /**
     * value: "Excluded"
     * @const
     */
    "Excluded": "Excluded",

    /**
     * value: "EligibleJobHolder"
     * @const
     */
    "EligibleJobHolder": "EligibleJobHolder",

    /**
     * value: "NonEligibleJobHolder"
     * @const
     */
    "NonEligibleJobHolder": "NonEligibleJobHolder",

    /**
     * value: "EntitledWorker"
     * @const
     */
    "EntitledWorker": "EntitledWorker"
};


/**
 * Allowed values for the <code>AssessmentEvent</code> property.
 * @enum {String}
 * @readonly
 */
AEAssessment1['AssessmentEventEnum'] = {

    /**
     * value: "NonEnrolmentEvent"
     * @const
     */
    "NonEnrolmentEvent": "NonEnrolmentEvent",

    /**
     * value: "AutomaticEnrolment"
     * @const
     */
    "AutomaticEnrolment": "AutomaticEnrolment",

    /**
     * value: "OptIn"
     * @const
     */
    "OptIn": "OptIn",

    /**
     * value: "VoluntaryJoiner"
     * @const
     */
    "VoluntaryJoiner": "VoluntaryJoiner",

    /**
     * value: "ContractualEnrolment"
     * @const
     */
    "ContractualEnrolment": "ContractualEnrolment"
};


/**
 * Allowed values for the <code>AssessmentOverride</code> property.
 * @enum {String}
 * @readonly
 */
AEAssessment1['AssessmentOverrideEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "OptOut"
     * @const
     */
    "OptOut": "OptOut",

    /**
     * value: "OptIn"
     * @const
     */
    "OptIn": "OptIn",

    /**
     * value: "VoluntaryJoiner"
     * @const
     */
    "VoluntaryJoiner": "VoluntaryJoiner",

    /**
     * value: "ContractualPension"
     * @const
     */
    "ContractualPension": "ContractualPension",

    /**
     * value: "CeasedMembership"
     * @const
     */
    "CeasedMembership": "CeasedMembership",

    /**
     * value: "Leaver"
     * @const
     */
    "Leaver": "Leaver",

    /**
     * value: "Excluded"
     * @const
     */
    "Excluded": "Excluded"
};


/**
 * Allowed values for the <code>AssessmentResult</code> property.
 * @enum {String}
 * @readonly
 */
AEAssessment1['AssessmentResultEnum'] = {

    /**
     * value: "Inconclusive"
     * @const
     */
    "Inconclusive": "Inconclusive",

    /**
     * value: "NoChange"
     * @const
     */
    "NoChange": "NoChange",

    /**
     * value: "Enrol"
     * @const
     */
    "Enrol": "Enrol",

    /**
     * value: "Exit"
     * @const
     */
    "Exit": "Exit"
};



export default AEAssessment1;

