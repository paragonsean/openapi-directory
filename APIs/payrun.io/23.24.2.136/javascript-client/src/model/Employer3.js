/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address1 from './Address1';
import AutoEnrolment from './AutoEnrolment';
import BankAccount1 from './BankAccount1';
import HmrcSettings from './HmrcSettings';

/**
 * The Employer3 model module.
 * @module model/Employer3
 * @version 23.24.2.136
 */
class Employer3 {
    /**
     * Constructs a new <code>Employer3</code>.
     * @alias module:model/Employer3
     */
    constructor() { 
        
        Employer3.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Employer3</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Employer3} obj Optional instance to populate.
     * @return {module:model/Employer3} The populated <code>Employer3</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Employer3();

            if (data.hasOwnProperty('Address')) {
                obj['Address'] = Address1.constructFromObject(data['Address']);
            }
            if (data.hasOwnProperty('ApprenticeshipLevyAllowance')) {
                obj['ApprenticeshipLevyAllowance'] = ApiClient.convertToType(data['ApprenticeshipLevyAllowance'], 'Number');
            }
            if (data.hasOwnProperty('AutoEnrolment')) {
                obj['AutoEnrolment'] = AutoEnrolment.constructFromObject(data['AutoEnrolment']);
            }
            if (data.hasOwnProperty('BacsServiceUserNumber')) {
                obj['BacsServiceUserNumber'] = ApiClient.convertToType(data['BacsServiceUserNumber'], 'String');
            }
            if (data.hasOwnProperty('BankAccount')) {
                obj['BankAccount'] = BankAccount1.constructFromObject(data['BankAccount']);
            }
            if (data.hasOwnProperty('CalculateApprenticeshipLevy')) {
                obj['CalculateApprenticeshipLevy'] = ApiClient.convertToType(data['CalculateApprenticeshipLevy'], 'Boolean');
            }
            if (data.hasOwnProperty('ClaimEmploymentAllowance')) {
                obj['ClaimEmploymentAllowance'] = ApiClient.convertToType(data['ClaimEmploymentAllowance'], 'Boolean');
            }
            if (data.hasOwnProperty('ClaimSmallEmployerRelief')) {
                obj['ClaimSmallEmployerRelief'] = ApiClient.convertToType(data['ClaimSmallEmployerRelief'], 'Boolean');
            }
            if (data.hasOwnProperty('EffectiveDate')) {
                obj['EffectiveDate'] = ApiClient.convertToType(data['EffectiveDate'], 'Date');
            }
            if (data.hasOwnProperty('HmrcSettings')) {
                obj['HmrcSettings'] = HmrcSettings.constructFromObject(data['HmrcSettings']);
            }
            if (data.hasOwnProperty('MetaData')) {
                obj['MetaData'] = ApiClient.convertToType(data['MetaData'], Object);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NextRevisionDate')) {
                obj['NextRevisionDate'] = ApiClient.convertToType(data['NextRevisionDate'], 'Date');
            }
            if (data.hasOwnProperty('Region')) {
                obj['Region'] = ApiClient.convertToType(data['Region'], 'String');
            }
            if (data.hasOwnProperty('Revision')) {
                obj['Revision'] = ApiClient.convertToType(data['Revision'], 'Number');
            }
            if (data.hasOwnProperty('RuleExclusions')) {
                obj['RuleExclusions'] = ApiClient.convertToType(data['RuleExclusions'], 'String');
            }
            if (data.hasOwnProperty('Territory')) {
                obj['Territory'] = ApiClient.convertToType(data['Territory'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Employer3</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Employer3</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Address`
        if (data['Address']) { // data not null
          Address1.validateJSON(data['Address']);
        }
        // validate the optional field `AutoEnrolment`
        if (data['AutoEnrolment']) { // data not null
          AutoEnrolment.validateJSON(data['AutoEnrolment']);
        }
        // ensure the json data is a string
        if (data['BacsServiceUserNumber'] && !(typeof data['BacsServiceUserNumber'] === 'string' || data['BacsServiceUserNumber'] instanceof String)) {
            throw new Error("Expected the field `BacsServiceUserNumber` to be a primitive type in the JSON string but got " + data['BacsServiceUserNumber']);
        }
        // validate the optional field `BankAccount`
        if (data['BankAccount']) { // data not null
          BankAccount1.validateJSON(data['BankAccount']);
        }
        // validate the optional field `HmrcSettings`
        if (data['HmrcSettings']) { // data not null
          HmrcSettings.validateJSON(data['HmrcSettings']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Region'] && !(typeof data['Region'] === 'string' || data['Region'] instanceof String)) {
            throw new Error("Expected the field `Region` to be a primitive type in the JSON string but got " + data['Region']);
        }
        // ensure the json data is a string
        if (data['RuleExclusions'] && !(typeof data['RuleExclusions'] === 'string' || data['RuleExclusions'] instanceof String)) {
            throw new Error("Expected the field `RuleExclusions` to be a primitive type in the JSON string but got " + data['RuleExclusions']);
        }
        // ensure the json data is a string
        if (data['Territory'] && !(typeof data['Territory'] === 'string' || data['Territory'] instanceof String)) {
            throw new Error("Expected the field `Territory` to be a primitive type in the JSON string but got " + data['Territory']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address1} Address
 */
Employer3.prototype['Address'] = undefined;

/**
 * The employers' apprenticeship levy allowance
 * @member {Number} ApprenticeshipLevyAllowance
 */
Employer3.prototype['ApprenticeshipLevyAllowance'] = undefined;

/**
 * @member {module:model/AutoEnrolment} AutoEnrolment
 */
Employer3.prototype['AutoEnrolment'] = undefined;

/**
 * The employers' bacs service user number
 * @member {String} BacsServiceUserNumber
 */
Employer3.prototype['BacsServiceUserNumber'] = undefined;

/**
 * @member {module:model/BankAccount1} BankAccount
 */
Employer3.prototype['BankAccount'] = undefined;

/**
 * The employers' calculate apprenticeship levy
 * @member {Boolean} CalculateApprenticeshipLevy
 */
Employer3.prototype['CalculateApprenticeshipLevy'] = undefined;

/**
 * The employers' claim employment allowance
 * @member {Boolean} ClaimEmploymentAllowance
 */
Employer3.prototype['ClaimEmploymentAllowance'] = undefined;

/**
 * The employers' claim small employer relief
 * @member {Boolean} ClaimSmallEmployerRelief
 */
Employer3.prototype['ClaimSmallEmployerRelief'] = undefined;

/**
 * The employers' effective date
 * @member {Date} EffectiveDate
 */
Employer3.prototype['EffectiveDate'] = undefined;

/**
 * @member {module:model/HmrcSettings} HmrcSettings
 */
Employer3.prototype['HmrcSettings'] = undefined;

/**
 * The employers' meta data
 * @member {Object} MetaData
 */
Employer3.prototype['MetaData'] = undefined;

/**
 * The employers' name
 * @member {String} Name
 */
Employer3.prototype['Name'] = undefined;

/**
 * The employers' next revision date
 * @member {Date} NextRevisionDate
 */
Employer3.prototype['NextRevisionDate'] = undefined;

/**
 * The employers' region
 * @member {module:model/Employer3.RegionEnum} Region
 */
Employer3.prototype['Region'] = undefined;

/**
 * The employers' revision
 * @member {Number} Revision
 */
Employer3.prototype['Revision'] = undefined;

/**
 * The employers' rule exclusions
 * @member {module:model/Employer3.RuleExclusionsEnum} RuleExclusions
 */
Employer3.prototype['RuleExclusions'] = undefined;

/**
 * The employers' territory
 * @member {module:model/Employer3.TerritoryEnum} Territory
 */
Employer3.prototype['Territory'] = undefined;





/**
 * Allowed values for the <code>Region</code> property.
 * @enum {String}
 * @readonly
 */
Employer3['RegionEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "England"
     * @const
     */
    "England": "England",

    /**
     * value: "Scotland"
     * @const
     */
    "Scotland": "Scotland",

    /**
     * value: "Wales"
     * @const
     */
    "Wales": "Wales"
};


/**
 * Allowed values for the <code>RuleExclusions</code> property.
 * @enum {String}
 * @readonly
 */
Employer3['RuleExclusionsEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "NiMissingPayInstructionRule"
     * @const
     */
    "NiMissingPayInstructionRule": "NiMissingPayInstructionRule",

    /**
     * value: "TaxMissingPayInstructionRule"
     * @const
     */
    "TaxMissingPayInstructionRule": "TaxMissingPayInstructionRule",

    /**
     * value: "TaxCodeUpliftRule"
     * @const
     */
    "TaxCodeUpliftRule": "TaxCodeUpliftRule",

    /**
     * value: "NiSetExpectedLetterRule"
     * @const
     */
    "NiSetExpectedLetterRule": "NiSetExpectedLetterRule",

    /**
     * value: "NiDateOfBirthChangeRetrospectiveCRule"
     * @const
     */
    "NiDateOfBirthChangeRetrospectiveCRule": "NiDateOfBirthChangeRetrospectiveCRule",

    /**
     * value: "NiDefermentStatusChangeRule"
     * @const
     */
    "NiDefermentStatusChangeRule": "NiDefermentStatusChangeRule",

    /**
     * value: "NiEndContractedOutTransferRule"
     * @const
     */
    "NiEndContractedOutTransferRule": "NiEndContractedOutTransferRule",

    /**
     * value: "PaymentAfterLeavingTaxCodeRule"
     * @const
     */
    "PaymentAfterLeavingTaxCodeRule": "PaymentAfterLeavingTaxCodeRule",

    /**
     * value: "LeaverEndInstructionsRule"
     * @const
     */
    "LeaverEndInstructionsRule": "LeaverEndInstructionsRule",

    /**
     * value: "P45StudentLoanInstructionRule"
     * @const
     */
    "P45StudentLoanInstructionRule": "P45StudentLoanInstructionRule",

    /**
     * value: "P45TaxInstructionRule"
     * @const
     */
    "P45TaxInstructionRule": "P45TaxInstructionRule",

    /**
     * value: "P45YtdTaxRule"
     * @const
     */
    "P45YtdTaxRule": "P45YtdTaxRule",

    /**
     * value: "YtdInstructionRule"
     * @const
     */
    "YtdInstructionRule": "YtdInstructionRule",

    /**
     * value: "TaxCodeRegionChangeRule"
     * @const
     */
    "TaxCodeRegionChangeRule": "TaxCodeRegionChangeRule",

    /**
     * value: "AutoEnrolmentStatusChangeRule"
     * @const
     */
    "AutoEnrolmentStatusChangeRule": "AutoEnrolmentStatusChangeRule",

    /**
     * value: "EmployeeDeceasedRule"
     * @const
     */
    "EmployeeDeceasedRule": "EmployeeDeceasedRule",

    /**
     * value: "BenefitInstructionAutoEndRule"
     * @const
     */
    "BenefitInstructionAutoEndRule": "BenefitInstructionAutoEndRule"
};


/**
 * Allowed values for the <code>Territory</code> property.
 * @enum {String}
 * @readonly
 */
Employer3['TerritoryEnum'] = {

    /**
     * value: "UnitedKingdom"
     * @const
     */
    "UnitedKingdom": "UnitedKingdom"
};



export default Employer3;

