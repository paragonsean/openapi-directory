/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmployerCore2 from './EmployerCore2';

/**
 * The ThirdPartyTransaction1 model module.
 * @module model/ThirdPartyTransaction1
 * @version 23.24.2.136
 */
class ThirdPartyTransaction1 {
    /**
     * Constructs a new <code>ThirdPartyTransaction1</code>.
     * @alias module:model/ThirdPartyTransaction1
     */
    constructor() { 
        
        ThirdPartyTransaction1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ThirdPartyTransaction1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThirdPartyTransaction1} obj Optional instance to populate.
     * @return {module:model/ThirdPartyTransaction1} The populated <code>ThirdPartyTransaction1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThirdPartyTransaction1();

            if (data.hasOwnProperty('EmployerCore')) {
                obj['EmployerCore'] = EmployerCore2.constructFromObject(data['EmployerCore']);
            }
            if (data.hasOwnProperty('JobType')) {
                obj['JobType'] = ApiClient.convertToType(data['JobType'], 'String');
            }
            if (data.hasOwnProperty('Request')) {
                obj['Request'] = ApiClient.convertToType(data['Request'], 'String');
            }
            if (data.hasOwnProperty('Response')) {
                obj['Response'] = ApiClient.convertToType(data['Response'], 'String');
            }
            if (data.hasOwnProperty('TransactionStatus')) {
                obj['TransactionStatus'] = ApiClient.convertToType(data['TransactionStatus'], 'String');
            }
            if (data.hasOwnProperty('TransmissionDate')) {
                obj['TransmissionDate'] = ApiClient.convertToType(data['TransmissionDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThirdPartyTransaction1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThirdPartyTransaction1</code>.
     */
    static validateJSON(data) {
        // validate the optional field `EmployerCore`
        if (data['EmployerCore']) { // data not null
          EmployerCore2.validateJSON(data['EmployerCore']);
        }
        // ensure the json data is a string
        if (data['JobType'] && !(typeof data['JobType'] === 'string' || data['JobType'] instanceof String)) {
            throw new Error("Expected the field `JobType` to be a primitive type in the JSON string but got " + data['JobType']);
        }
        // ensure the json data is a string
        if (data['Request'] && !(typeof data['Request'] === 'string' || data['Request'] instanceof String)) {
            throw new Error("Expected the field `Request` to be a primitive type in the JSON string but got " + data['Request']);
        }
        // ensure the json data is a string
        if (data['Response'] && !(typeof data['Response'] === 'string' || data['Response'] instanceof String)) {
            throw new Error("Expected the field `Response` to be a primitive type in the JSON string but got " + data['Response']);
        }
        // ensure the json data is a string
        if (data['TransactionStatus'] && !(typeof data['TransactionStatus'] === 'string' || data['TransactionStatus'] instanceof String)) {
            throw new Error("Expected the field `TransactionStatus` to be a primitive type in the JSON string but got " + data['TransactionStatus']);
        }

        return true;
    }


}



/**
 * @member {module:model/EmployerCore2} EmployerCore
 */
ThirdPartyTransaction1.prototype['EmployerCore'] = undefined;

/**
 * The third party transactions' job type
 * @member {String} JobType
 */
ThirdPartyTransaction1.prototype['JobType'] = undefined;

/**
 * The third party transactions' request
 * @member {String} Request
 */
ThirdPartyTransaction1.prototype['Request'] = undefined;

/**
 * The third party transactions' response
 * @member {String} Response
 */
ThirdPartyTransaction1.prototype['Response'] = undefined;

/**
 * The third party transactions' transaction status
 * @member {module:model/ThirdPartyTransaction1.TransactionStatusEnum} TransactionStatus
 */
ThirdPartyTransaction1.prototype['TransactionStatus'] = undefined;

/**
 * The third party transactions' transmission date
 * @member {Date} TransmissionDate
 */
ThirdPartyTransaction1.prototype['TransmissionDate'] = undefined;





/**
 * Allowed values for the <code>TransactionStatus</code> property.
 * @enum {String}
 * @readonly
 */
ThirdPartyTransaction1['TransactionStatusEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Success"
     * @const
     */
    "Success": "Success",

    /**
     * value: "Failure"
     * @const
     */
    "Failure": "Failure"
};



export default ThirdPartyTransaction1;

