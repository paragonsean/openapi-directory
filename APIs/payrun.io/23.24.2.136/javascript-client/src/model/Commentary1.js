/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Employee1 from './Employee1';
import PayRun1 from './PayRun1';

/**
 * The Commentary1 model module.
 * @module model/Commentary1
 * @version 23.24.2.136
 */
class Commentary1 {
    /**
     * Constructs a new <code>Commentary1</code>.
     * @alias module:model/Commentary1
     */
    constructor() { 
        
        Commentary1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Commentary1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Commentary1} obj Optional instance to populate.
     * @return {module:model/Commentary1} The populated <code>Commentary1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Commentary1();

            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('Detail')) {
                obj['Detail'] = ApiClient.convertToType(data['Detail'], 'String');
            }
            if (data.hasOwnProperty('Employee')) {
                obj['Employee'] = Employee1.constructFromObject(data['Employee']);
            }
            if (data.hasOwnProperty('PayRun')) {
                obj['PayRun'] = PayRun1.constructFromObject(data['PayRun']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Commentary1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Commentary1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Detail'] && !(typeof data['Detail'] === 'string' || data['Detail'] instanceof String)) {
            throw new Error("Expected the field `Detail` to be a primitive type in the JSON string but got " + data['Detail']);
        }
        // validate the optional field `Employee`
        if (data['Employee']) { // data not null
          Employee1.validateJSON(data['Employee']);
        }
        // validate the optional field `PayRun`
        if (data['PayRun']) { // data not null
          PayRun1.validateJSON(data['PayRun']);
        }

        return true;
    }


}



/**
 * The commentarys' created
 * @member {Date} Created
 */
Commentary1.prototype['Created'] = undefined;

/**
 * The commentarys' detail
 * @member {String} Detail
 */
Commentary1.prototype['Detail'] = undefined;

/**
 * @member {module:model/Employee1} Employee
 */
Commentary1.prototype['Employee'] = undefined;

/**
 * @member {module:model/PayRun1} PayRun
 */
Commentary1.prototype['PayRun'] = undefined;






export default Commentary1;

