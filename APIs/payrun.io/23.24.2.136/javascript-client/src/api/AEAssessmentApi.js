/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AEAssessment from '../model/AEAssessment';
import ErrorModel from '../model/ErrorModel';
import Link from '../model/Link';
import LinkCollection from '../model/LinkCollection';

/**
* AEAssessment service.
* @module api/AEAssessmentApi
* @version 23.24.2.136
*/
export default class AEAssessmentApi {

    /**
    * Constructs a new AEAssessmentApi. 
    * @alias module:api/AEAssessmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAEAssessment operation.
     * @callback module:api/AEAssessmentApi~deleteAEAssessmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete auto enrolment assessment
     * Deletes an existing auto enrolment assessment for the employee. Used to remove historical assessments
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} aEAssessmentId The auto enrolment assessment unique identifier. E.g. AE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/AEAssessmentApi~deleteAEAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAEAssessment(employerId, employeeId, aEAssessmentId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteAEAssessment");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling deleteAEAssessment");
      }
      // verify the required parameter 'aEAssessmentId' is set
      if (aEAssessmentId === undefined || aEAssessmentId === null) {
        throw new Error("Missing the required parameter 'aEAssessmentId' when calling deleteAEAssessment");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteAEAssessment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteAEAssessment");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'AEAssessmentId': aEAssessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessment/{AEAssessmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAEAssessmentFromEmployee operation.
     * @callback module:api/AEAssessmentApi~getAEAssessmentFromEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AEAssessment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the auto enrolment assessment
     * Gets the auto enrolment assessment from the specified employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} aEAssessmentId The auto enrolment assessment unique identifier. E.g. AE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/AEAssessmentApi~getAEAssessmentFromEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AEAssessment}
     */
    getAEAssessmentFromEmployee(employerId, employeeId, aEAssessmentId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAEAssessmentFromEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getAEAssessmentFromEmployee");
      }
      // verify the required parameter 'aEAssessmentId' is set
      if (aEAssessmentId === undefined || aEAssessmentId === null) {
        throw new Error("Missing the required parameter 'aEAssessmentId' when calling getAEAssessmentFromEmployee");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAEAssessmentFromEmployee");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAEAssessmentFromEmployee");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'AEAssessmentId': aEAssessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AEAssessment;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessment/{AEAssessmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAEAssessmentsFromEmployee operation.
     * @callback module:api/AEAssessmentApi~getAEAssessmentsFromEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the auto enrolment assessments
     * Gets all auto enrolment assessments from the specified employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/AEAssessmentApi~getAEAssessmentsFromEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAEAssessmentsFromEmployee(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAEAssessmentsFromEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getAEAssessmentsFromEmployee");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAEAssessmentsFromEmployee");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAEAssessmentsFromEmployee");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAEAssessmentsFromPayRun operation.
     * @callback module:api/AEAssessmentApi~getAEAssessmentsFromPayRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the auto enrolment assessments
     * Gets all auto enrolment assessments from the specified pay run
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/AEAssessmentApi~getAEAssessmentsFromPayRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAEAssessmentsFromPayRun(employerId, payScheduleId, payRunId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAEAssessmentsFromPayRun");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getAEAssessmentsFromPayRun");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling getAEAssessmentsFromPayRun");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAEAssessmentsFromPayRun");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAEAssessmentsFromPayRun");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/AEAssessments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNewAEAssessment operation.
     * @callback module:api/AEAssessmentApi~postNewAEAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert new auto enrolment assessment
     * Creates a new auto enrolment assessment for the employee. Used to insert historical assessments
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/AEAssessment} aEAssessment The auto enrolment assessment object.
     * @param {module:api/AEAssessmentApi~postNewAEAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postNewAEAssessment(employerId, employeeId, authorization, apiVersion, aEAssessment, callback) {
      let postBody = aEAssessment;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postNewAEAssessment");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling postNewAEAssessment");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postNewAEAssessment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postNewAEAssessment");
      }
      // verify the required parameter 'aEAssessment' is set
      if (aEAssessment === undefined || aEAssessment === null) {
        throw new Error("Missing the required parameter 'aEAssessment' when calling postNewAEAssessment");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putNewAEAssessment operation.
     * @callback module:api/AEAssessmentApi~putNewAEAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AEAssessment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert new auto enrolment assessment
     * Creates a new auto enrolment assessment for the employee. Used to insert historical assessments
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} aEAssessmentId The auto enrolment assessment unique identifier. E.g. AE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/AEAssessment} aEAssessment The auto enrolment assessment object.
     * @param {module:api/AEAssessmentApi~putNewAEAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AEAssessment}
     */
    putNewAEAssessment(employerId, employeeId, aEAssessmentId, authorization, apiVersion, aEAssessment, callback) {
      let postBody = aEAssessment;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putNewAEAssessment");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling putNewAEAssessment");
      }
      // verify the required parameter 'aEAssessmentId' is set
      if (aEAssessmentId === undefined || aEAssessmentId === null) {
        throw new Error("Missing the required parameter 'aEAssessmentId' when calling putNewAEAssessment");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putNewAEAssessment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putNewAEAssessment");
      }
      // verify the required parameter 'aEAssessment' is set
      if (aEAssessment === undefined || aEAssessment === null) {
        throw new Error("Missing the required parameter 'aEAssessment' when calling putNewAEAssessment");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'AEAssessmentId': aEAssessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AEAssessment;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessment/{AEAssessmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
