/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import LinkCollection from '../model/LinkCollection';
import ReportLine from '../model/ReportLine';

/**
* ReportLine service.
* @module api/ReportLineApi
* @version 23.24.2.136
*/
export default class ReportLineApi {

    /**
    * Constructs a new ReportLineApi. 
    * @alias module:api/ReportLineApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getReportLineFromEmployer operation.
     * @callback module:api/ReportLineApi~getReportLineFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportLine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified report line from the employer
     * Returns the specified pay line from employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} reportLineId The report line unique identifier. E.g. RTL001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportLineApi~getReportLineFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportLine}
     */
    getReportLineFromEmployer(employerId, reportLineId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getReportLineFromEmployer");
      }
      // verify the required parameter 'reportLineId' is set
      if (reportLineId === undefined || reportLineId === null) {
        throw new Error("Missing the required parameter 'reportLineId' when calling getReportLineFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getReportLineFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getReportLineFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'ReportLineId': reportLineId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportLine;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/ReportLine/{ReportLineId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportLinesFromEmployer operation.
     * @callback module:api/ReportLineApi~getReportLinesFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the report lines from the specified employer
     * Get links to all report lines for the specified employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportLineApi~getReportLinesFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getReportLinesFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getReportLinesFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getReportLinesFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getReportLinesFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/ReportLines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportLinesFromPayRun operation.
     * @callback module:api/ReportLineApi~getReportLinesFromPayRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the report lines from the specified pay run
     * Returns all report lines associated with the specified pay run
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportLineApi~getReportLinesFromPayRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getReportLinesFromPayRun(employerId, payScheduleId, payRunId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getReportLinesFromPayRun");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getReportLinesFromPayRun");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling getReportLinesFromPayRun");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getReportLinesFromPayRun");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getReportLinesFromPayRun");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/ReportLines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
