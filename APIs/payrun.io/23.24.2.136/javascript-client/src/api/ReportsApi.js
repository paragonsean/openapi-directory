/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import Link from '../model/Link';
import LinkCollection from '../model/LinkCollection';
import ReportDefinition from '../model/ReportDefinition';
import TransformDefinition from '../model/TransformDefinition';

/**
* Reports service.
* @module api/ReportsApi
* @version 23.24.2.136
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:api/ReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteReportDefinition operation.
     * @callback module:api/ReportsApi~deleteReportDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a report definition
     * Delete the specified report definition
     * @param {String} reportDefinitionId The report definition unique identifier.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~deleteReportDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReportDefinition(reportDefinitionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'reportDefinitionId' is set
      if (reportDefinitionId === undefined || reportDefinitionId === null) {
        throw new Error("Missing the required parameter 'reportDefinitionId' when calling deleteReportDefinition");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteReportDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteReportDefinition");
      }

      let pathParams = {
        'ReportDefinitionId': reportDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Report/{ReportDefinitionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTransformDefinition operation.
     * @callback module:api/ReportsApi~deleteTransformDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a transform definition
     * Delete the specified transform definition
     * @param {String} transformDefinitionId The transform definition unique identifier.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~deleteTransformDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTransformDefinition(transformDefinitionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'transformDefinitionId' is set
      if (transformDefinitionId === undefined || transformDefinitionId === null) {
        throw new Error("Missing the required parameter 'transformDefinitionId' when calling deleteTransformDefinition");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteTransformDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteTransformDefinition");
      }

      let pathParams = {
        'TransformDefinitionId': transformDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Transform/{TransformDefinitionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivePayInstructionsReportOutput operation.
     * @callback module:api/ReportsApi~getActivePayInstructionsReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the active pay instructions report
     * Returns the result of the executed active pay instructions report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} employeeKey The employee unique key. E.g. EE001
     * @param {Date} fromDate The lower filter date. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {Date} [activeOn] The active date to consider. E.g 2017-04-05
     * @param {Date} [toDate] The upper filter date. E.g 2017-04-05
     * @param {String} [type] the data type to filter on. E.g. TaxPayInstruction
     * @param {module:api/ReportsApi~getActivePayInstructionsReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getActivePayInstructionsReportOutput(employerKey, employeeKey, fromDate, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getActivePayInstructionsReportOutput");
      }
      // verify the required parameter 'employeeKey' is set
      if (employeeKey === undefined || employeeKey === null) {
        throw new Error("Missing the required parameter 'employeeKey' when calling getActivePayInstructionsReportOutput");
      }
      // verify the required parameter 'fromDate' is set
      if (fromDate === undefined || fromDate === null) {
        throw new Error("Missing the required parameter 'fromDate' when calling getActivePayInstructionsReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getActivePayInstructionsReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getActivePayInstructionsReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'EmployeeKey': employeeKey,
        'ActiveOn': opts['activeOn'],
        'FromDate': fromDate,
        'ToDate': opts['toDate'],
        'Type': opts['type']
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/ACTPAYINS/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAoeLiabilityReportOuput operation.
     * @callback module:api/ReportsApi~getAoeLiabilityReportOuputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the AOE liability report
     * Returns the result of the executed AOE liability report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} payScheduleKey The pay schedule unique key. E.g. SCH001
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {Number} [taxPeriod] The tax period number.
     * @param {String} [transformDefinitionKey] The transform definition unique key. E.g. P45-Pdf
     * @param {module:api/ReportsApi~getAoeLiabilityReportOuputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getAoeLiabilityReportOuput(employerKey, payScheduleKey, taxYear, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getAoeLiabilityReportOuput");
      }
      // verify the required parameter 'payScheduleKey' is set
      if (payScheduleKey === undefined || payScheduleKey === null) {
        throw new Error("Missing the required parameter 'payScheduleKey' when calling getAoeLiabilityReportOuput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getAoeLiabilityReportOuput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAoeLiabilityReportOuput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAoeLiabilityReportOuput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'PayScheduleKey': payScheduleKey,
        'TaxYear': taxYear,
        'TaxPeriod': opts['taxPeriod'],
        'TransformDefinitionKey': opts['transformDefinitionKey']
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/AOELIABILITY/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDpsMessageReportOutput operation.
     * @callback module:api/ReportsApi~getDpsMessageReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the DPS message report
     * Returns the result of the executed DPS message report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {Date} fromDate The lower filter date. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {Date} [toDate] The upper filter date. E.g 2017-04-05
     * @param {String} [messageTypes] The DPS message types as a CSV list. E.g. P6,P9,SL1,SL2
     * @param {String} [messageStatuses] The DPS message status as a CSV list. E.g. Retrieved,Processed,Blocked,Ignored
     * @param {String} [startIndex] The element index to begin the report. Used to control paging within large data sets. E.g. 1
     * @param {String} [maxIndex] The highest element index to return from the report. Used to control paging within large data sets. E.g. 100
     * @param {module:api/ReportsApi~getDpsMessageReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getDpsMessageReportOutput(employerKey, fromDate, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getDpsMessageReportOutput");
      }
      // verify the required parameter 'fromDate' is set
      if (fromDate === undefined || fromDate === null) {
        throw new Error("Missing the required parameter 'fromDate' when calling getDpsMessageReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getDpsMessageReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDpsMessageReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'FromDate': fromDate,
        'ToDate': opts['toDate'],
        'MessageTypes': opts['messageTypes'],
        'MessageStatuses': opts['messageStatuses'],
        'StartIndex': opts['startIndex'],
        'MaxIndex': opts['maxIndex']
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/DPSMSG/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployerSummaryReportOuput operation.
     * @callback module:api/ReportsApi~getEmployerSummaryReportOuputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the employer summary report
     * Returns the result of the employer summary report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {Date} contextDate The date context for the report. E.g. 2018-04-30
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~getEmployerSummaryReportOuputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getEmployerSummaryReportOuput(employerKey, contextDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getEmployerSummaryReportOuput");
      }
      // verify the required parameter 'contextDate' is set
      if (contextDate === undefined || contextDate === null) {
        throw new Error("Missing the required parameter 'contextDate' when calling getEmployerSummaryReportOuput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployerSummaryReportOuput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployerSummaryReportOuput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'ContextDate': contextDate
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/EMPSUM/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGrossToNetReportOutput operation.
     * @callback module:api/ReportsApi~getGrossToNetReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the gross to net report
     * Returns the result of the executed gross to net report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} payScheduleKey The pay schedule unique key. E.g. SCH001
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {Number} [taxPeriod] The tax period number.
     * @param {String} [startIndex] The element index to begin the report. Used to control paging within large data sets. E.g. 1
     * @param {String} [maxIndex] The highest element index to return from the report. Used to control paging within large data sets. E.g. 100
     * @param {module:api/ReportsApi~getGrossToNetReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getGrossToNetReportOutput(employerKey, payScheduleKey, taxYear, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getGrossToNetReportOutput");
      }
      // verify the required parameter 'payScheduleKey' is set
      if (payScheduleKey === undefined || payScheduleKey === null) {
        throw new Error("Missing the required parameter 'payScheduleKey' when calling getGrossToNetReportOutput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getGrossToNetReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getGrossToNetReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getGrossToNetReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'PayScheduleKey': payScheduleKey,
        'TaxYear': taxYear,
        'TaxPeriod': opts['taxPeriod'],
        'StartIndex': opts['startIndex'],
        'MaxIndex': opts['maxIndex']
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/GRO2NET/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHolidayBalanceReportOutput operation.
     * @callback module:api/ReportsApi~getHolidayBalanceReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the holiday balance report
     * Returns the result of the executed holiday balance report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {Date} holidayYearEnd The holiday year end for the report. E.g. 2018-12-31
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {String} [employeeCodes] A comma separated list of the employee codes. E.g. EMP001,EMP002
     * @param {String} [startIndex] The element index to begin the report. Used to control paging within large data sets. E.g. 1
     * @param {String} [maxIndex] The highest element index to return from the report. Used to control paging within large data sets. E.g. 100
     * @param {module:api/ReportsApi~getHolidayBalanceReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getHolidayBalanceReportOutput(employerKey, holidayYearEnd, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getHolidayBalanceReportOutput");
      }
      // verify the required parameter 'holidayYearEnd' is set
      if (holidayYearEnd === undefined || holidayYearEnd === null) {
        throw new Error("Missing the required parameter 'holidayYearEnd' when calling getHolidayBalanceReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHolidayBalanceReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getHolidayBalanceReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'HolidayYearEnd': holidayYearEnd,
        'EmployeeCodes': opts['employeeCodes'],
        'StartIndex': opts['startIndex'],
        'MaxIndex': opts['maxIndex']
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/HOLBAL/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalReportOuput operation.
     * @callback module:api/ReportsApi~getJournalReportOuputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the journal report
     * Returns the result of the journal report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} payFrequency The pay frequency option. E.g. Monthly
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {String} ledgerTarget Specific to JOURNAL report, a filter used to select the journal lines for the specified ledger target. E.g. [Default]
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {Number} [taxPeriod] The tax period number.
     * @param {module:api/ReportsApi~getJournalReportOuputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getJournalReportOuput(employerKey, payFrequency, taxYear, ledgerTarget, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getJournalReportOuput");
      }
      // verify the required parameter 'payFrequency' is set
      if (payFrequency === undefined || payFrequency === null) {
        throw new Error("Missing the required parameter 'payFrequency' when calling getJournalReportOuput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getJournalReportOuput");
      }
      // verify the required parameter 'ledgerTarget' is set
      if (ledgerTarget === undefined || ledgerTarget === null) {
        throw new Error("Missing the required parameter 'ledgerTarget' when calling getJournalReportOuput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getJournalReportOuput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getJournalReportOuput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'PayFrequency': payFrequency,
        'TaxYear': taxYear,
        'TaxPeriod': opts['taxPeriod'],
        'LedgerTarget': ledgerTarget
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/JOURNAL/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastPayDateReportOuput operation.
     * @callback module:api/ReportsApi~getLastPayDateReportOuputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the last pay date report
     * Returns the result of the executed last pay date report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} employeeKey The employee unique key. E.g. EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~getLastPayDateReportOuputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getLastPayDateReportOuput(employerKey, employeeKey, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getLastPayDateReportOuput");
      }
      // verify the required parameter 'employeeKey' is set
      if (employeeKey === undefined || employeeKey === null) {
        throw new Error("Missing the required parameter 'employeeKey' when calling getLastPayDateReportOuput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLastPayDateReportOuput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getLastPayDateReportOuput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'EmployeeKey': employeeKey
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/LASTPAYDATE/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetPayReportOutput operation.
     * @callback module:api/ReportsApi~getNetPayReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the net pay report
     * Returns the result of the executed net pay report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} payScheduleKey The pay schedule unique key. E.g. SCH001
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {Number} [taxPeriod] The tax period number.
     * @param {String} [startIndex] The element index to begin the report. Used to control paging within large data sets. E.g. 1
     * @param {String} [maxIndex] The highest element index to return from the report. Used to control paging within large data sets. E.g. 100
     * @param {module:api/ReportsApi~getNetPayReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getNetPayReportOutput(employerKey, payScheduleKey, taxYear, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getNetPayReportOutput");
      }
      // verify the required parameter 'payScheduleKey' is set
      if (payScheduleKey === undefined || payScheduleKey === null) {
        throw new Error("Missing the required parameter 'payScheduleKey' when calling getNetPayReportOutput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getNetPayReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getNetPayReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getNetPayReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'PayScheduleKey': payScheduleKey,
        'TaxYear': taxYear,
        'TaxPeriod': opts['taxPeriod'],
        'StartIndex': opts['startIndex'],
        'MaxIndex': opts['maxIndex']
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/NETPAY/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNextPayPeriodDatesReportOutput operation.
     * @callback module:api/ReportsApi~getNextPayPeriodDatesReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the next pay period report
     * Returns the result of the executed next pay period report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} payScheduleKey The pay schedule unique key. E.g. SCH001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~getNextPayPeriodDatesReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getNextPayPeriodDatesReportOutput(employerKey, payScheduleKey, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getNextPayPeriodDatesReportOutput");
      }
      // verify the required parameter 'payScheduleKey' is set
      if (payScheduleKey === undefined || payScheduleKey === null) {
        throw new Error("Missing the required parameter 'payScheduleKey' when calling getNextPayPeriodDatesReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getNextPayPeriodDatesReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getNextPayPeriodDatesReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'PayScheduleKey': payScheduleKey
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/NEXTPERIOD/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getP11SummaryReportOutput operation.
     * @callback module:api/ReportsApi~getP11SummaryReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the P11 summary report
     * Returns the result of the executed P11 summary report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} payScheduleKey The pay schedule unique key. E.g. SCH001
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {String} [startIndex] The element index to begin the report. Used to control paging within large data sets. E.g. 1
     * @param {String} [maxIndex] The highest element index to return from the report. Used to control paging within large data sets. E.g. 100
     * @param {module:api/ReportsApi~getP11SummaryReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getP11SummaryReportOutput(employerKey, payScheduleKey, taxYear, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getP11SummaryReportOutput");
      }
      // verify the required parameter 'payScheduleKey' is set
      if (payScheduleKey === undefined || payScheduleKey === null) {
        throw new Error("Missing the required parameter 'payScheduleKey' when calling getP11SummaryReportOutput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getP11SummaryReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getP11SummaryReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getP11SummaryReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'PayScheduleKey': payScheduleKey,
        'TaxYear': taxYear,
        'StartIndex': opts['startIndex'],
        'MaxIndex': opts['maxIndex']
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/P11SUM/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getP32NetReportOutput operation.
     * @callback module:api/ReportsApi~getP32NetReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the P32 report
     * Returns the result of the executed P32 report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~getP32NetReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getP32NetReportOutput(employerKey, taxYear, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getP32NetReportOutput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getP32NetReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getP32NetReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getP32NetReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'TaxYear': taxYear
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/P32/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getP32SummaryNetReportOutput operation.
     * @callback module:api/ReportsApi~getP32SummaryNetReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the P32 summary report
     * Returns the result of the executed P32 summary report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~getP32SummaryNetReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getP32SummaryNetReportOutput(employerKey, taxYear, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getP32SummaryNetReportOutput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getP32SummaryNetReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getP32SummaryNetReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getP32SummaryNetReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'TaxYear': taxYear
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/P32SUM/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getP45ReportOutput operation.
     * @callback module:api/ReportsApi~getP45ReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the P45 report
     * Returns the result of the executed P45 report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} employeeKey The employee unique key. E.g. EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {String} [transformDefinitionKey] The transform definition unique key. E.g. P45-Pdf
     * @param {module:api/ReportsApi~getP45ReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getP45ReportOutput(employerKey, employeeKey, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getP45ReportOutput");
      }
      // verify the required parameter 'employeeKey' is set
      if (employeeKey === undefined || employeeKey === null) {
        throw new Error("Missing the required parameter 'employeeKey' when calling getP45ReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getP45ReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getP45ReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'EmployeeKey': employeeKey,
        'TransformDefinitionKey': opts['transformDefinitionKey']
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/P45/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getP60ReportOutput operation.
     * @callback module:api/ReportsApi~getP60ReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the P60 report
     * Returns the result of the executed P60 report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {String} [employeeCodes] A comma separated list of the employee codes. E.g. EMP001,EMP002
     * @param {String} [transformDefinitionKey] The transform definition unique key. E.g. P45-Pdf
     * @param {String} [startIndex] The element index to begin the report. Used to control paging within large data sets. E.g. 1
     * @param {String} [maxIndex] The highest element index to return from the report. Used to control paging within large data sets. E.g. 100
     * @param {module:api/ReportsApi~getP60ReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getP60ReportOutput(employerKey, taxYear, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getP60ReportOutput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getP60ReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getP60ReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getP60ReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'TaxYear': taxYear,
        'EmployeeCodes': opts['employeeCodes'],
        'TransformDefinitionKey': opts['transformDefinitionKey'],
        'StartIndex': opts['startIndex'],
        'MaxIndex': opts['maxIndex']
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/P60/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPapdisReportOuput operation.
     * @callback module:api/ReportsApi~getPapdisReportOuputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the PAPDIS report
     * Returns the result of the executed PAPDIS report. PAPDIS is a free and open data interface standard designed to allow payroll and middleware software developers to create a file that can be used by pension providers to exchange data. http://www.papdis.org/
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} payScheduleKey The pay schedule unique key. E.g. SCH001
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {String} pensionKey The pension scheme unique key. E.g. PENSCH001
     * @param {String} messageFunctionCode Specific to PAPDIS report, specifies the business function that the sender is requesting. If left BLANK it will be assumed to be 0 (Enrol / Receive Contributions).
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {Date} [paymentDate] The payment date context for the report. E.g. 2018-04-30
     * @param {String} [transformDefinitionKey] The transform definition unique key. E.g. P45-Pdf
     * @param {module:api/ReportsApi~getPapdisReportOuputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPapdisReportOuput(employerKey, payScheduleKey, taxYear, pensionKey, messageFunctionCode, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getPapdisReportOuput");
      }
      // verify the required parameter 'payScheduleKey' is set
      if (payScheduleKey === undefined || payScheduleKey === null) {
        throw new Error("Missing the required parameter 'payScheduleKey' when calling getPapdisReportOuput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getPapdisReportOuput");
      }
      // verify the required parameter 'pensionKey' is set
      if (pensionKey === undefined || pensionKey === null) {
        throw new Error("Missing the required parameter 'pensionKey' when calling getPapdisReportOuput");
      }
      // verify the required parameter 'messageFunctionCode' is set
      if (messageFunctionCode === undefined || messageFunctionCode === null) {
        throw new Error("Missing the required parameter 'messageFunctionCode' when calling getPapdisReportOuput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPapdisReportOuput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPapdisReportOuput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'PayScheduleKey': payScheduleKey,
        'TaxYear': taxYear,
        'PaymentDate': opts['paymentDate'],
        'PensionKey': pensionKey,
        'MessageFunctionCode': messageFunctionCode,
        'TransformDefinitionKey': opts['transformDefinitionKey']
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/PAPDIS/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPassReportOuput operation.
     * @callback module:api/ReportsApi~getPassReportOuputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the PASS report
     * Returns the result of the executed PASS report. PASS stands for Payroll and Systemsync. PASS 1.1 is an extension of the PAPDIS V1.1 schema. https://pensionsynckb.systemsyncsolutions.com/display/PKB/PASS+1.1
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} payScheduleKey The pay schedule unique key. E.g. SCH001
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {String} pensionKey The pension scheme unique key. E.g. PENSCH001
     * @param {String} messageFunctionCode Specific to PAPDIS report, specifies the business function that the sender is requesting. If left BLANK it will be assumed to be 0 (Enrol / Receive Contributions).
     * @param {String} intermediaryId Specific to PensionSync PASS report, a unique identifier for the Intermediary who is acting on behalf of the employer.
     * @param {String} documentId Specific to PensionSync PASS report, a document identifier unique for this document within the Intermediary.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {Date} [paymentDate] The payment date context for the report. E.g. 2018-04-30
     * @param {module:api/ReportsApi~getPassReportOuputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPassReportOuput(employerKey, payScheduleKey, taxYear, pensionKey, messageFunctionCode, intermediaryId, documentId, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getPassReportOuput");
      }
      // verify the required parameter 'payScheduleKey' is set
      if (payScheduleKey === undefined || payScheduleKey === null) {
        throw new Error("Missing the required parameter 'payScheduleKey' when calling getPassReportOuput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getPassReportOuput");
      }
      // verify the required parameter 'pensionKey' is set
      if (pensionKey === undefined || pensionKey === null) {
        throw new Error("Missing the required parameter 'pensionKey' when calling getPassReportOuput");
      }
      // verify the required parameter 'messageFunctionCode' is set
      if (messageFunctionCode === undefined || messageFunctionCode === null) {
        throw new Error("Missing the required parameter 'messageFunctionCode' when calling getPassReportOuput");
      }
      // verify the required parameter 'intermediaryId' is set
      if (intermediaryId === undefined || intermediaryId === null) {
        throw new Error("Missing the required parameter 'intermediaryId' when calling getPassReportOuput");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getPassReportOuput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPassReportOuput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPassReportOuput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'PayScheduleKey': payScheduleKey,
        'TaxYear': taxYear,
        'PaymentDate': opts['paymentDate'],
        'PensionKey': pensionKey,
        'MessageFunctionCode': messageFunctionCode,
        'IntermediaryId': intermediaryId,
        'DocumentId': documentId
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/PASS/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayDashboardPayslipReportOuput operation.
     * @callback module:api/ReportsApi~getPayDashboardPayslipReportOuputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the Pay Dashboard payslips report
     * Returns the result of the executed Pay Dashboard payslip report for the given query parameters. See https://api.paydashboard.com for details. For compatability should be returned as JSON with TransformDefinitionKey=Json-Clean.
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} payScheduleKey The pay schedule unique key. E.g. SCH001
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {Date} publicationDate Specific to the Pay Dashboard report, allows the specification of a future payslip publication date. E.g. 2018-12-31
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {String} [employeeCodes] A comma separated list of the employee codes. E.g. EMP001,EMP002
     * @param {String} [transformDefinitionKey] The transform definition unique key. E.g. P45-Pdf
     * @param {String} [startIndex] The element index to begin the report. Used to control paging within large data sets. E.g. 1
     * @param {String} [maxIndex] The highest element index to return from the report. Used to control paging within large data sets. E.g. 100
     * @param {Date} [paymentDate] The payment date context for the report. E.g. 2018-04-30
     * @param {module:api/ReportsApi~getPayDashboardPayslipReportOuputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPayDashboardPayslipReportOuput(employerKey, payScheduleKey, taxYear, publicationDate, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getPayDashboardPayslipReportOuput");
      }
      // verify the required parameter 'payScheduleKey' is set
      if (payScheduleKey === undefined || payScheduleKey === null) {
        throw new Error("Missing the required parameter 'payScheduleKey' when calling getPayDashboardPayslipReportOuput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getPayDashboardPayslipReportOuput");
      }
      // verify the required parameter 'publicationDate' is set
      if (publicationDate === undefined || publicationDate === null) {
        throw new Error("Missing the required parameter 'publicationDate' when calling getPayDashboardPayslipReportOuput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayDashboardPayslipReportOuput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayDashboardPayslipReportOuput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'PayScheduleKey': payScheduleKey,
        'TaxYear': taxYear,
        'EmployeeCodes': opts['employeeCodes'],
        'TransformDefinitionKey': opts['transformDefinitionKey'],
        'StartIndex': opts['startIndex'],
        'MaxIndex': opts['maxIndex'],
        'PaymentDate': opts['paymentDate'],
        'PublicationDate': publicationDate
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/PAYDASHBOARD/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslip3ReportOutput operation.
     * @callback module:api/ReportsApi~getPayslip3ReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the verbose payslip report
     * Returns the result of the executed verbose payslip report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {String} payScheduleKey The pay schedule unique key. E.g. SCH001
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {Object} opts Optional parameters
     * @param {String} [employeeCodes] A comma separated list of the employee codes. E.g. EMP001,EMP002
     * @param {String} [transformDefinitionKey] The transform definition unique key. E.g. P45-Pdf
     * @param {String} [startIndex] The element index to begin the report. Used to control paging within large data sets. E.g. 1
     * @param {String} [maxIndex] The highest element index to return from the report. Used to control paging within large data sets. E.g. 100
     * @param {Date} [paymentDate] The payment date context for the report. E.g. 2018-04-30
     * @param {module:api/ReportsApi~getPayslip3ReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPayslip3ReportOutput(employerKey, payScheduleKey, taxYear, authorization, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getPayslip3ReportOutput");
      }
      // verify the required parameter 'payScheduleKey' is set
      if (payScheduleKey === undefined || payScheduleKey === null) {
        throw new Error("Missing the required parameter 'payScheduleKey' when calling getPayslip3ReportOutput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getPayslip3ReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayslip3ReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayslip3ReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'PayScheduleKey': payScheduleKey,
        'TaxYear': taxYear,
        'EmployeeCodes': opts['employeeCodes'],
        'TransformDefinitionKey': opts['transformDefinitionKey'],
        'StartIndex': opts['startIndex'],
        'MaxIndex': opts['maxIndex'],
        'PaymentDate': opts['paymentDate']
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/PAYSLIP3/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPensionLiabilityReportOutput operation.
     * @callback module:api/ReportsApi~getPensionLiabilityReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the pension liability report
     * Returns the result of the executed pension liability report for the given query parameters
     * @param {String} employerKey The employer unique key. E.g. ER001
     * @param {Number} taxYear The tax year. E.g. 2017 = 2017/18 year.
     * @param {String} pensionKey The pension scheme unique key. E.g. PENSCH001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~getPensionLiabilityReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPensionLiabilityReportOutput(employerKey, taxYear, pensionKey, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerKey' is set
      if (employerKey === undefined || employerKey === null) {
        throw new Error("Missing the required parameter 'employerKey' when calling getPensionLiabilityReportOutput");
      }
      // verify the required parameter 'taxYear' is set
      if (taxYear === undefined || taxYear === null) {
        throw new Error("Missing the required parameter 'taxYear' when calling getPensionLiabilityReportOutput");
      }
      // verify the required parameter 'pensionKey' is set
      if (pensionKey === undefined || pensionKey === null) {
        throw new Error("Missing the required parameter 'pensionKey' when calling getPensionLiabilityReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPensionLiabilityReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPensionLiabilityReportOutput");
      }

      let pathParams = {
      };
      let queryParams = {
        'EmployerKey': employerKey,
        'TaxYear': taxYear,
        'PensionKey': pensionKey
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/PENLIABILITY/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportDefinitionFromApplication operation.
     * @callback module:api/ReportsApi~getReportDefinitionFromApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the report definition
     * Returns the specified report definition from the authroised application
     * @param {String} reportDefinitionId The report definition unique identifier.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~getReportDefinitionFromApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportDefinition}
     */
    getReportDefinitionFromApplication(reportDefinitionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'reportDefinitionId' is set
      if (reportDefinitionId === undefined || reportDefinitionId === null) {
        throw new Error("Missing the required parameter 'reportDefinitionId' when calling getReportDefinitionFromApplication");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getReportDefinitionFromApplication");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getReportDefinitionFromApplication");
      }

      let pathParams = {
        'ReportDefinitionId': reportDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportDefinition;
      return this.apiClient.callApi(
        '/Report/{ReportDefinitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportDefinitionsFromApplication operation.
     * @callback module:api/ReportsApi~getReportDefinitionsFromApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all reports
     * Get links to all saved report definitions under authorised application
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~getReportDefinitionsFromApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getReportDefinitionsFromApplication(authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getReportDefinitionsFromApplication");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getReportDefinitionsFromApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportOutput operation.
     * @callback module:api/ReportsApi~getReportOutputCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the specified report definition
     * Returns the result of the executed report definition
     * @param {String} reportDefinitionId The report definition unique identifier.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~getReportOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getReportOutput(reportDefinitionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'reportDefinitionId' is set
      if (reportDefinitionId === undefined || reportDefinitionId === null) {
        throw new Error("Missing the required parameter 'reportDefinitionId' when calling getReportOutput");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getReportOutput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getReportOutput");
      }

      let pathParams = {
        'ReportDefinitionId': reportDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Report/{ReportDefinitionId}/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransformDefinitionFromApplication operation.
     * @callback module:api/ReportsApi~getTransformDefinitionFromApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransformDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the transform definition
     * Returns the specified transform definition from the authroised application
     * @param {String} transformDefinitionId The transform definition unique identifier.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~getTransformDefinitionFromApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransformDefinition}
     */
    getTransformDefinitionFromApplication(transformDefinitionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'transformDefinitionId' is set
      if (transformDefinitionId === undefined || transformDefinitionId === null) {
        throw new Error("Missing the required parameter 'transformDefinitionId' when calling getTransformDefinitionFromApplication");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTransformDefinitionFromApplication");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTransformDefinitionFromApplication");
      }

      let pathParams = {
        'TransformDefinitionId': transformDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransformDefinition;
      return this.apiClient.callApi(
        '/Transform/{TransformDefinitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransformDefinitionsFromApplication operation.
     * @callback module:api/ReportsApi~getTransformDefinitionsFromApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all transform definitions
     * Get links to all saved transform definitions under authorised application
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportsApi~getTransformDefinitionsFromApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getTransformDefinitionsFromApplication(authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTransformDefinitionsFromApplication");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTransformDefinitionsFromApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Transforms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postReportDefinition operation.
     * @callback module:api/ReportsApi~postReportDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new report definition
     * Creates a new report defintion object
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/ReportDefinition} reportDefinition The report definition object.
     * @param {module:api/ReportsApi~postReportDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postReportDefinition(authorization, apiVersion, reportDefinition, callback) {
      let postBody = reportDefinition;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postReportDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postReportDefinition");
      }
      // verify the required parameter 'reportDefinition' is set
      if (reportDefinition === undefined || reportDefinition === null) {
        throw new Error("Missing the required parameter 'reportDefinition' when calling postReportDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTransformDefinition operation.
     * @callback module:api/ReportsApi~postTransformDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new transform definition
     * Creates a new transform defintion object
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/TransformDefinition} transformDefinition The transform definition object to be executed against the report data.
     * @param {module:api/ReportsApi~postTransformDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postTransformDefinition(authorization, apiVersion, transformDefinition, callback) {
      let postBody = transformDefinition;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postTransformDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postTransformDefinition");
      }
      // verify the required parameter 'transformDefinition' is set
      if (transformDefinition === undefined || transformDefinition === null) {
        throw new Error("Missing the required parameter 'transformDefinition' when calling postTransformDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Transforms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putReportDefinition operation.
     * @callback module:api/ReportsApi~putReportDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a report definition
     * Updates the existing specified report definition object
     * @param {String} reportDefinitionId The report definition unique identifier.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/ReportDefinition} reportDefinition The report definition object.
     * @param {module:api/ReportsApi~putReportDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportDefinition}
     */
    putReportDefinition(reportDefinitionId, authorization, apiVersion, reportDefinition, callback) {
      let postBody = reportDefinition;
      // verify the required parameter 'reportDefinitionId' is set
      if (reportDefinitionId === undefined || reportDefinitionId === null) {
        throw new Error("Missing the required parameter 'reportDefinitionId' when calling putReportDefinition");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putReportDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putReportDefinition");
      }
      // verify the required parameter 'reportDefinition' is set
      if (reportDefinition === undefined || reportDefinition === null) {
        throw new Error("Missing the required parameter 'reportDefinition' when calling putReportDefinition");
      }

      let pathParams = {
        'ReportDefinitionId': reportDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportDefinition;
      return this.apiClient.callApi(
        '/Report/{ReportDefinitionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTransformDefinition operation.
     * @callback module:api/ReportsApi~putTransformDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransformDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a transform definition
     * Updates the existing specified transform definition object
     * @param {String} transformDefinitionId The transform definition unique identifier.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/TransformDefinition} transformDefinition The transform definition object to be executed against the report data.
     * @param {module:api/ReportsApi~putTransformDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransformDefinition}
     */
    putTransformDefinition(transformDefinitionId, authorization, apiVersion, transformDefinition, callback) {
      let postBody = transformDefinition;
      // verify the required parameter 'transformDefinitionId' is set
      if (transformDefinitionId === undefined || transformDefinitionId === null) {
        throw new Error("Missing the required parameter 'transformDefinitionId' when calling putTransformDefinition");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putTransformDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putTransformDefinition");
      }
      // verify the required parameter 'transformDefinition' is set
      if (transformDefinition === undefined || transformDefinition === null) {
        throw new Error("Missing the required parameter 'transformDefinition' when calling putTransformDefinition");
      }

      let pathParams = {
        'TransformDefinitionId': transformDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransformDefinition;
      return this.apiClient.callApi(
        '/Transform/{TransformDefinitionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
