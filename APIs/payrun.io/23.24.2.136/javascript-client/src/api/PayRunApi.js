/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Commentary from '../model/Commentary';
import ErrorModel from '../model/ErrorModel';
import LinkCollection from '../model/LinkCollection';
import PayRun from '../model/PayRun';

/**
* PayRun service.
* @module api/PayRunApi
* @version 23.24.2.136
*/
export default class PayRunApi {

    /**
    * Constructs a new PayRunApi. 
    * @alias module:api/PayRunApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePayRun operation.
     * @callback module:api/PayRunApi~deletePayRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a pay run
     * Delete the specified pay run
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayRunApi~deletePayRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayRun(employerId, payScheduleId, payRunId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deletePayRun");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling deletePayRun");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling deletePayRun");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePayRun");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deletePayRun");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayRunEmployee operation.
     * @callback module:api/PayRunApi~deletePayRunEmployeeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a pay run employee
     * Delete pay run results for a single employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayRunApi~deletePayRunEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayRunEmployee(employerId, payScheduleId, payRunId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deletePayRunEmployee");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling deletePayRunEmployee");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling deletePayRunEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling deletePayRunEmployee");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePayRunEmployee");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deletePayRunEmployee");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Employee/{EmployeeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAEAssessmentsFromPayRun_0 operation.
     * @callback module:api/PayRunApi~getAEAssessmentsFromPayRun_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the auto enrolment assessments
     * Gets all auto enrolment assessments from the specified pay run
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayRunApi~getAEAssessmentsFromPayRun_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAEAssessmentsFromPayRun_0(employerId, payScheduleId, payRunId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAEAssessmentsFromPayRun_0");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getAEAssessmentsFromPayRun_0");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling getAEAssessmentsFromPayRun_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAEAssessmentsFromPayRun_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAEAssessmentsFromPayRun_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/AEAssessments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPayRunTags_0 operation.
     * @callback module:api/PayRunApi~getAllPayRunTags_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all pay run tags
     * Gets all the pay run tags
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayRunApi~getAllPayRunTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAllPayRunTags_0(employerId, payScheduleId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAllPayRunTags_0");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getAllPayRunTags_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllPayRunTags_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAllPayRunTags_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRuns/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentariesFromPayRun operation.
     * @callback module:api/PayRunApi~getCommentariesFromPayRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get links to all commentaries for the specified pay run
     * Get links to all commentaries for the specified pay run.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayRunApi~getCommentariesFromPayRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getCommentariesFromPayRun(employerId, payScheduleId, payRunId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCommentariesFromPayRun");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getCommentariesFromPayRun");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling getCommentariesFromPayRun");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCommentariesFromPayRun");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCommentariesFromPayRun");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Commentaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentaryFromPayRunByEmployee_0 operation.
     * @callback module:api/PayRunApi~getCommentaryFromPayRunByEmployee_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Commentary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get commentary from payrun by specified employee.
     * Get commentary from payrun by specified employee.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayRunApi~getCommentaryFromPayRunByEmployee_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Commentary}
     */
    getCommentaryFromPayRunByEmployee_0(employerId, payScheduleId, payRunId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCommentaryFromPayRunByEmployee_0");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getCommentaryFromPayRunByEmployee_0");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling getCommentaryFromPayRunByEmployee_0");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getCommentaryFromPayRunByEmployee_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCommentaryFromPayRunByEmployee_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCommentaryFromPayRunByEmployee_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Commentary;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Employee/{EmployeeId}/Commentary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeesFromPayRun_0 operation.
     * @callback module:api/PayRunApi~getEmployeesFromPayRun_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employees from the pay run
     * Gets links to all employees included in the specified pay run.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayRunApi~getEmployeesFromPayRun_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getEmployeesFromPayRun_0(employerId, payScheduleId, payRunId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeesFromPayRun_0");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getEmployeesFromPayRun_0");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling getEmployeesFromPayRun_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeesFromPayRun_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeesFromPayRun_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Employees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayRunFromPaySchedule operation.
     * @callback module:api/PayRunApi~getPayRunFromPayScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the pay run from the pay schedule
     * Returns the pay run from the pay schedule
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayRunApi~getPayRunFromPayScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayRun}
     */
    getPayRunFromPaySchedule(employerId, payScheduleId, payRunId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayRunFromPaySchedule");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getPayRunFromPaySchedule");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling getPayRunFromPaySchedule");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayRunFromPaySchedule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayRunFromPaySchedule");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PayRun;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayRunsFromEmployee operation.
     * @callback module:api/PayRunApi~getPayRunsFromEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the pay runs from the employee
     * Get links to all pay runs for the specified employee.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayRunApi~getPayRunsFromEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPayRunsFromEmployee(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayRunsFromEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getPayRunsFromEmployee");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayRunsFromEmployee");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayRunsFromEmployee");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/PayRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayRunsFromPaySchedule operation.
     * @callback module:api/PayRunApi~getPayRunsFromPayScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the pay runs from the pay schedule
     * Get links to all pay runs for the specified pay schedule
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayRunApi~getPayRunsFromPayScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPayRunsFromPaySchedule(employerId, payScheduleId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayRunsFromPaySchedule");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getPayRunsFromPaySchedule");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayRunsFromPaySchedule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayRunsFromPaySchedule");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayRunsWithTag_0 operation.
     * @callback module:api/PayRunApi~getPayRunsWithTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pay runs with tag
     * Gets the pay runs with the tag
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayRunApi~getPayRunsWithTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPayRunsWithTag_0(employerId, payScheduleId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayRunsWithTag_0");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getPayRunsWithTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getPayRunsWithTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayRunsWithTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayRunsWithTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRuns/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportLinesFromPayRun_0 operation.
     * @callback module:api/PayRunApi~getReportLinesFromPayRun_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the report lines from the specified pay run
     * Returns all report lines associated with the specified pay run
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayRunApi~getReportLinesFromPayRun_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getReportLinesFromPayRun_0(employerId, payScheduleId, payRunId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getReportLinesFromPayRun_0");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getReportLinesFromPayRun_0");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling getReportLinesFromPayRun_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getReportLinesFromPayRun_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getReportLinesFromPayRun_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/ReportLines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
