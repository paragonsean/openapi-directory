/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import Link from '../model/Link';
import LinkCollection from '../model/LinkCollection';
import Pension from '../model/Pension';

/**
* Pension service.
* @module api/PensionApi
* @version 23.24.2.136
*/
export default class PensionApi {

    /**
    * Constructs a new PensionApi. 
    * @alias module:api/PensionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePension operation.
     * @callback module:api/PensionApi~deletePensionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Pension
     * Delete the specified ppension
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} pensionId The pensions' unique identifier. E.g PEN001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PensionApi~deletePensionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePension(employerId, pensionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deletePension");
      }
      // verify the required parameter 'pensionId' is set
      if (pensionId === undefined || pensionId === null) {
        throw new Error("Missing the required parameter 'pensionId' when calling deletePension");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePension");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deletePension");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PensionId': pensionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Pension/{PensionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePensionRevision operation.
     * @callback module:api/PensionApi~deletePensionRevisionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Pension revision matching the specified revision date.
     * Deletes the specified pension revision for the matching revision date
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} pensionId The pensions' unique identifier. E.g PEN001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PensionApi~deletePensionRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePensionRevision(employerId, pensionId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deletePensionRevision");
      }
      // verify the required parameter 'pensionId' is set
      if (pensionId === undefined || pensionId === null) {
        throw new Error("Missing the required parameter 'pensionId' when calling deletePensionRevision");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling deletePensionRevision");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePensionRevision");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deletePensionRevision");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PensionId': pensionId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Pension/{PensionId}/{EffectiveDate}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePensionRevisionByNumber operation.
     * @callback module:api/PensionApi~deletePensionRevisionByNumberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Pension revision matching the specified revision number.
     * Deletes the specified pension revision for the matching revision number
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} pensionId The pensions' unique identifier. E.g PEN001
     * @param {String} revisionNumber The revision number. E.g. 1
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PensionApi~deletePensionRevisionByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePensionRevisionByNumber(employerId, pensionId, revisionNumber, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deletePensionRevisionByNumber");
      }
      // verify the required parameter 'pensionId' is set
      if (pensionId === undefined || pensionId === null) {
        throw new Error("Missing the required parameter 'pensionId' when calling deletePensionRevisionByNumber");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling deletePensionRevisionByNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePensionRevisionByNumber");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deletePensionRevisionByNumber");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PensionId': pensionId,
        'RevisionNumber': revisionNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Pension/{PensionId}/Revision/{RevisionNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPensionByEffectiveDate operation.
     * @callback module:api/PensionApi~getPensionByEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pension by effective date.
     * Returns the penion's state at the specified effective date.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} pensionId The pensions' unique identifier. E.g PEN001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PensionApi~getPensionByEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pension}
     */
    getPensionByEffectiveDate(employerId, pensionId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPensionByEffectiveDate");
      }
      // verify the required parameter 'pensionId' is set
      if (pensionId === undefined || pensionId === null) {
        throw new Error("Missing the required parameter 'pensionId' when calling getPensionByEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getPensionByEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPensionByEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPensionByEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PensionId': pensionId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pension;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Pension/{PensionId}/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPensionFromEmployer operation.
     * @callback module:api/PensionApi~getPensionFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pension from employer
     * Gets the specified pension from employer by pension code.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} pensionId The pensions' unique identifier. E.g PEN001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PensionApi~getPensionFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pension}
     */
    getPensionFromEmployer(employerId, pensionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPensionFromEmployer");
      }
      // verify the required parameter 'pensionId' is set
      if (pensionId === undefined || pensionId === null) {
        throw new Error("Missing the required parameter 'pensionId' when calling getPensionFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPensionFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPensionFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PensionId': pensionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pension;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Pension/{PensionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPensionRevisionByNumber operation.
     * @callback module:api/PensionApi~getPensionRevisionByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the pension by revision number
     * Get the pension revision matching the specified revision number
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} pensionId The pensions' unique identifier. E.g PEN001
     * @param {String} revisionNumber The revision number. E.g. 1
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PensionApi~getPensionRevisionByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pension}
     */
    getPensionRevisionByNumber(employerId, pensionId, revisionNumber, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPensionRevisionByNumber");
      }
      // verify the required parameter 'pensionId' is set
      if (pensionId === undefined || pensionId === null) {
        throw new Error("Missing the required parameter 'pensionId' when calling getPensionRevisionByNumber");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling getPensionRevisionByNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPensionRevisionByNumber");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPensionRevisionByNumber");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PensionId': pensionId,
        'RevisionNumber': revisionNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pension;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Pension/{PensionId}/Revision/{RevisionNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPensionRevisions operation.
     * @callback module:api/PensionApi~getPensionRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all pension revisions
     * Returns links to all revisions of the pension
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} pensionId The pensions' unique identifier. E.g PEN001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PensionApi~getPensionRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPensionRevisions(employerId, pensionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPensionRevisions");
      }
      // verify the required parameter 'pensionId' is set
      if (pensionId === undefined || pensionId === null) {
        throw new Error("Missing the required parameter 'pensionId' when calling getPensionRevisions");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPensionRevisions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPensionRevisions");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PensionId': pensionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Pension/{PensionId}/Revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPensionsByEffectiveDate operation.
     * @callback module:api/PensionApi~getPensionsByEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pensions from employer at a given effective date.
     * Get links to all pensions for the employer on specified effective date.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PensionApi~getPensionsByEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPensionsByEffectiveDate(employerId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPensionsByEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getPensionsByEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPensionsByEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPensionsByEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Pensions/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPensionsFromEmployer operation.
     * @callback module:api/PensionApi~getPensionsFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pensions from employer.
     * Get links to all pensions for the specified employer.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PensionApi~getPensionsFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPensionsFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPensionsFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPensionsFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPensionsFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Pensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchPension operation.
     * @callback module:api/PensionApi~patchPensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches the pension
     * Patches the specified pension with the supplied values
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} pensionId The pensions' unique identifier. E.g PEN001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/Pension} pension The pension object.
     * @param {module:api/PensionApi~patchPensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pension}
     */
    patchPension(employerId, pensionId, authorization, apiVersion, pension, callback) {
      let postBody = pension;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling patchPension");
      }
      // verify the required parameter 'pensionId' is set
      if (pensionId === undefined || pensionId === null) {
        throw new Error("Missing the required parameter 'pensionId' when calling patchPension");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling patchPension");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling patchPension");
      }
      // verify the required parameter 'pension' is set
      if (pension === undefined || pension === null) {
        throw new Error("Missing the required parameter 'pension' when calling patchPension");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PensionId': pensionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pension;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Pension/{PensionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPensionIntoEmployer operation.
     * @callback module:api/PensionApi~postPensionIntoEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Pension
     * Create a new pension object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/Pension} pension The pension object.
     * @param {module:api/PensionApi~postPensionIntoEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postPensionIntoEmployer(employerId, authorization, apiVersion, pension, callback) {
      let postBody = pension;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postPensionIntoEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postPensionIntoEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postPensionIntoEmployer");
      }
      // verify the required parameter 'pension' is set
      if (pension === undefined || pension === null) {
        throw new Error("Missing the required parameter 'pension' when calling postPensionIntoEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Pensions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPensionIntoEmployer operation.
     * @callback module:api/PensionApi~putPensionIntoEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Pension
     * Updates existing or inserts the specified pension object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} pensionId The pensions' unique identifier. E.g PEN001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/Pension} pension The pension object.
     * @param {module:api/PensionApi~putPensionIntoEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pension}
     */
    putPensionIntoEmployer(employerId, pensionId, authorization, apiVersion, pension, callback) {
      let postBody = pension;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putPensionIntoEmployer");
      }
      // verify the required parameter 'pensionId' is set
      if (pensionId === undefined || pensionId === null) {
        throw new Error("Missing the required parameter 'pensionId' when calling putPensionIntoEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putPensionIntoEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putPensionIntoEmployer");
      }
      // verify the required parameter 'pension' is set
      if (pension === undefined || pension === null) {
        throw new Error("Missing the required parameter 'pension' when calling putPensionIntoEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PensionId': pensionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pension;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Pension/{PensionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
