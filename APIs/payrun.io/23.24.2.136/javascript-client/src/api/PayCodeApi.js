/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import Link from '../model/Link';
import LinkCollection from '../model/LinkCollection';
import PayCode from '../model/PayCode';

/**
* PayCode service.
* @module api/PayCodeApi
* @version 23.24.2.136
*/
export default class PayCodeApi {

    /**
    * Constructs a new PayCodeApi. 
    * @alias module:api/PayCodeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePayCode operation.
     * @callback module:api/PayCodeApi~deletePayCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a pay code
     * Delete the specified pay code
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payCodeId The pay code unique identifier. E.g. BASIC
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayCodeApi~deletePayCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayCode(employerId, payCodeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deletePayCode");
      }
      // verify the required parameter 'payCodeId' is set
      if (payCodeId === undefined || payCodeId === null) {
        throw new Error("Missing the required parameter 'payCodeId' when calling deletePayCode");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePayCode");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deletePayCode");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayCodeId': payCodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCode/{PayCodeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayCodeRevision operation.
     * @callback module:api/PayCodeApi~deletePayCodeRevisionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a pay code revision
     * Delete the pay code revision for the specified date
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payCodeId The pay code unique identifier. E.g. BASIC
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayCodeApi~deletePayCodeRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayCodeRevision(employerId, payCodeId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deletePayCodeRevision");
      }
      // verify the required parameter 'payCodeId' is set
      if (payCodeId === undefined || payCodeId === null) {
        throw new Error("Missing the required parameter 'payCodeId' when calling deletePayCodeRevision");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling deletePayCodeRevision");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePayCodeRevision");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deletePayCodeRevision");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayCodeId': payCodeId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCode/{PayCodeId}/{EffectiveDate}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayCodeRevisionByNumber operation.
     * @callback module:api/PayCodeApi~deletePayCodeRevisionByNumberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an PayCode revision matching the specified revision number.
     * Deletes the specified pay code revision for the matching revision number
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payCodeId The pay code unique identifier. E.g. BASIC
     * @param {String} revisionNumber The revision number. E.g. 1
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayCodeApi~deletePayCodeRevisionByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayCodeRevisionByNumber(employerId, payCodeId, revisionNumber, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deletePayCodeRevisionByNumber");
      }
      // verify the required parameter 'payCodeId' is set
      if (payCodeId === undefined || payCodeId === null) {
        throw new Error("Missing the required parameter 'payCodeId' when calling deletePayCodeRevisionByNumber");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling deletePayCodeRevisionByNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePayCodeRevisionByNumber");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deletePayCodeRevisionByNumber");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayCodeId': payCodeId,
        'RevisionNumber': revisionNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCode/{PayCodeId}/Revision/{RevisionNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPayCodeTags_0 operation.
     * @callback module:api/PayCodeApi~getAllPayCodeTags_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all pay code tags
     * Gets all the pay code tags
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayCodeApi~getAllPayCodeTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAllPayCodeTags_0(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAllPayCodeTags_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllPayCodeTags_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAllPayCodeTags_0");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCodes/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayCodeByEffectiveDate operation.
     * @callback module:api/PayCodeApi~getPayCodeByEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets pay code for specified date
     * Gets the pay code revision for the specified effective date
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payCodeId The pay code unique identifier. E.g. BASIC
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayCodeApi~getPayCodeByEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayCode}
     */
    getPayCodeByEffectiveDate(employerId, payCodeId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayCodeByEffectiveDate");
      }
      // verify the required parameter 'payCodeId' is set
      if (payCodeId === undefined || payCodeId === null) {
        throw new Error("Missing the required parameter 'payCodeId' when calling getPayCodeByEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getPayCodeByEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayCodeByEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayCodeByEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayCodeId': payCodeId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PayCode;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCode/{PayCodeId}/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayCodeFromEmployer operation.
     * @callback module:api/PayCodeApi~getPayCodeFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified pay code from the employer
     * Returns the specified pay code from the employer
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payCodeId The pay code unique identifier. E.g. BASIC
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayCodeApi~getPayCodeFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayCode}
     */
    getPayCodeFromEmployer(employerId, payCodeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayCodeFromEmployer");
      }
      // verify the required parameter 'payCodeId' is set
      if (payCodeId === undefined || payCodeId === null) {
        throw new Error("Missing the required parameter 'payCodeId' when calling getPayCodeFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayCodeFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayCodeFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayCodeId': payCodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PayCode;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCode/{PayCodeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayCodeRevisionByNumber operation.
     * @callback module:api/PayCodeApi~getPayCodeRevisionByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the pay code by revision number
     * Get the pay code revision matching the specified revision number
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payCodeId The pay code unique identifier. E.g. BASIC
     * @param {String} revisionNumber The revision number. E.g. 1
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayCodeApi~getPayCodeRevisionByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayCode}
     */
    getPayCodeRevisionByNumber(employerId, payCodeId, revisionNumber, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayCodeRevisionByNumber");
      }
      // verify the required parameter 'payCodeId' is set
      if (payCodeId === undefined || payCodeId === null) {
        throw new Error("Missing the required parameter 'payCodeId' when calling getPayCodeRevisionByNumber");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling getPayCodeRevisionByNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayCodeRevisionByNumber");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayCodeRevisionByNumber");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayCodeId': payCodeId,
        'RevisionNumber': revisionNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PayCode;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCode/{PayCodeId}/Revision/{RevisionNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayCodeRevisions operation.
     * @callback module:api/PayCodeApi~getPayCodeRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all revisions of the Pay Code
     * Returns links to all revisions of the pay code
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payCodeId The pay code unique identifier. E.g. BASIC
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayCodeApi~getPayCodeRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPayCodeRevisions(employerId, payCodeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayCodeRevisions");
      }
      // verify the required parameter 'payCodeId' is set
      if (payCodeId === undefined || payCodeId === null) {
        throw new Error("Missing the required parameter 'payCodeId' when calling getPayCodeRevisions");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayCodeRevisions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayCodeRevisions");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayCodeId': payCodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCode/{PayCodeId}/Revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayCodesByEffectiveDate operation.
     * @callback module:api/PayCodeApi~getPayCodesByEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all pay codes for specified date
     * Gets the effective pay code revision for the specified date
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayCodeApi~getPayCodesByEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPayCodesByEffectiveDate(employerId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayCodesByEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getPayCodesByEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayCodesByEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayCodesByEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCodes/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayCodesFromEmployer operation.
     * @callback module:api/PayCodeApi~getPayCodesFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the pay codes from the employer
     * Get links to all the pay codes for the specified employer
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayCodeApi~getPayCodesFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPayCodesFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayCodesFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayCodesFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayCodesFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayCodesFromNominalCode operation.
     * @callback module:api/PayCodeApi~getPayCodesFromNominalCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the pay codes by nominal code
     * Get the pay codes that share the specified nominal code
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} nominalCodeId The nominal code unique identifier. E.g. NOM001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayCodeApi~getPayCodesFromNominalCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPayCodesFromNominalCode(employerId, nominalCodeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayCodesFromNominalCode");
      }
      // verify the required parameter 'nominalCodeId' is set
      if (nominalCodeId === undefined || nominalCodeId === null) {
        throw new Error("Missing the required parameter 'nominalCodeId' when calling getPayCodesFromNominalCode");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayCodesFromNominalCode");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayCodesFromNominalCode");
      }

      let pathParams = {
        'EmployerId': employerId,
        'NominalCodeId': nominalCodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/NominalCode/{NominalCodeId}/PayCodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayCodesWithTag_0 operation.
     * @callback module:api/PayCodeApi~getPayCodesWithTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pay codes with tag
     * Gets the pay codes with the tag
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayCodeApi~getPayCodesWithTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPayCodesWithTag_0(employerId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayCodesWithTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getPayCodesWithTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayCodesWithTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayCodesWithTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCodes/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchPayCode operation.
     * @callback module:api/PayCodeApi~patchPayCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches the pay code
     * Patches the specified pay code object with the supplied values
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payCodeId The pay code unique identifier. E.g. BASIC
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/PayCode} payCode The pay code object.
     * @param {module:api/PayCodeApi~patchPayCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayCode}
     */
    patchPayCode(employerId, payCodeId, authorization, apiVersion, payCode, callback) {
      let postBody = payCode;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling patchPayCode");
      }
      // verify the required parameter 'payCodeId' is set
      if (payCodeId === undefined || payCodeId === null) {
        throw new Error("Missing the required parameter 'payCodeId' when calling patchPayCode");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling patchPayCode");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling patchPayCode");
      }
      // verify the required parameter 'payCode' is set
      if (payCode === undefined || payCode === null) {
        throw new Error("Missing the required parameter 'payCode' when calling patchPayCode");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayCodeId': payCodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayCode;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCode/{PayCodeId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayCode operation.
     * @callback module:api/PayCodeApi~postPayCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new pay code
     * Create a new pay code object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/PayCode} payCode The pay code object.
     * @param {module:api/PayCodeApi~postPayCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postPayCode(employerId, authorization, apiVersion, payCode, callback) {
      let postBody = payCode;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postPayCode");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postPayCode");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postPayCode");
      }
      // verify the required parameter 'payCode' is set
      if (payCode === undefined || payCode === null) {
        throw new Error("Missing the required parameter 'payCode' when calling postPayCode");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPayCode operation.
     * @callback module:api/PayCodeApi~putPayCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a pay code
     * Updates the existing specified pay code object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payCodeId The pay code unique identifier. E.g. BASIC
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/PayCode} payCode The pay code object.
     * @param {module:api/PayCodeApi~putPayCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayCode}
     */
    putPayCode(employerId, payCodeId, authorization, apiVersion, payCode, callback) {
      let postBody = payCode;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putPayCode");
      }
      // verify the required parameter 'payCodeId' is set
      if (payCodeId === undefined || payCodeId === null) {
        throw new Error("Missing the required parameter 'payCodeId' when calling putPayCode");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putPayCode");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putPayCode");
      }
      // verify the required parameter 'payCode' is set
      if (payCode === undefined || payCode === null) {
        throw new Error("Missing the required parameter 'payCode' when calling putPayCode");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayCodeId': payCodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayCode;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PayCode/{PayCodeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
