/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import JournalExpressionDataTable from '../model/JournalExpressionDataTable';

/**
* Reference service.
* @module api/ReferenceApi
* @version 23.24.2.136
*/
export default class ReferenceApi {

    /**
    * Constructs a new ReferenceApi. 
    * @alias module:api/ReferenceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getJournalExpressionSchema operation.
     * @callback module:api/ReferenceApi~getJournalExpressionSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JournalExpressionDataTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the journal expression data schema
     * Gets the data schema for all available journal expression values. Includes table names, column names and data types.
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReferenceApi~getJournalExpressionSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JournalExpressionDataTable}
     */
    getJournalExpressionSchema(authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getJournalExpressionSchema");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getJournalExpressionSchema");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JournalExpressionDataTable;
      return this.apiClient.callApi(
        '/ReferenceData/JournalExpressionDataTable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
