/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import Link from '../model/Link';
import LinkCollection from '../model/LinkCollection';
import ReportingInstruction from '../model/ReportingInstruction';

/**
* ReportLineInstruction service.
* @module api/ReportLineInstructionApi
* @version 23.24.2.136
*/
export default class ReportLineInstructionApi {

    /**
    * Constructs a new ReportLineInstructionApi. 
    * @alias module:api/ReportLineInstructionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteReportingInstruction operation.
     * @callback module:api/ReportLineInstructionApi~deleteReportingInstructionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a reporting instruction
     * Delete the specified reporting instruction
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportLineInstructionApi~deleteReportingInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReportingInstruction(employerId, reportingInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteReportingInstruction");
      }
      // verify the required parameter 'reportingInstructionId' is set
      if (reportingInstructionId === undefined || reportingInstructionId === null) {
        throw new Error("Missing the required parameter 'reportingInstructionId' when calling deleteReportingInstruction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteReportingInstruction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteReportingInstruction");
      }

      let pathParams = {
        'EmployerId': employerId,
        'ReportingInstructionId': reportingInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/ReportingInstruction/{ReportingInstructionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportingInstructionFromEmployer operation.
     * @callback module:api/ReportLineInstructionApi~getReportingInstructionFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportingInstruction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified reporting instruction from the employer
     * Returns the specified pay instruction from employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportLineInstructionApi~getReportingInstructionFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportingInstruction}
     */
    getReportingInstructionFromEmployer(employerId, reportingInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getReportingInstructionFromEmployer");
      }
      // verify the required parameter 'reportingInstructionId' is set
      if (reportingInstructionId === undefined || reportingInstructionId === null) {
        throw new Error("Missing the required parameter 'reportingInstructionId' when calling getReportingInstructionFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getReportingInstructionFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getReportingInstructionFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'ReportingInstructionId': reportingInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportingInstruction;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/ReportingInstruction/{ReportingInstructionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportingInstructionsFromEmployer operation.
     * @callback module:api/ReportLineInstructionApi~getReportingInstructionsFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the reporting instructions from the specified employer
     * Get links to all pay instructions for the specified employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/ReportLineInstructionApi~getReportingInstructionsFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getReportingInstructionsFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getReportingInstructionsFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getReportingInstructionsFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getReportingInstructionsFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/ReportingInstructions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postReportingInstruction operation.
     * @callback module:api/ReportLineInstructionApi~postReportingInstructionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Reporting Instruction
     * Creates a new reporting instruction object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/ReportingInstruction} reportingInstruction The reporting instruction object.
     * @param {module:api/ReportLineInstructionApi~postReportingInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postReportingInstruction(employerId, authorization, apiVersion, reportingInstruction, callback) {
      let postBody = reportingInstruction;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postReportingInstruction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postReportingInstruction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postReportingInstruction");
      }
      // verify the required parameter 'reportingInstruction' is set
      if (reportingInstruction === undefined || reportingInstruction === null) {
        throw new Error("Missing the required parameter 'reportingInstruction' when calling postReportingInstruction");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/ReportingInstructions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putReportingInstruction operation.
     * @callback module:api/ReportLineInstructionApi~putReportingInstructionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportingInstruction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a reporting Instruction
     * Updates the existing specified reporting instruction object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/ReportingInstruction} reportingInstruction The reporting instruction object.
     * @param {module:api/ReportLineInstructionApi~putReportingInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportingInstruction}
     */
    putReportingInstruction(employerId, reportingInstructionId, authorization, apiVersion, reportingInstruction, callback) {
      let postBody = reportingInstruction;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putReportingInstruction");
      }
      // verify the required parameter 'reportingInstructionId' is set
      if (reportingInstructionId === undefined || reportingInstructionId === null) {
        throw new Error("Missing the required parameter 'reportingInstructionId' when calling putReportingInstruction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putReportingInstruction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putReportingInstruction");
      }
      // verify the required parameter 'reportingInstruction' is set
      if (reportingInstruction === undefined || reportingInstruction === null) {
        throw new Error("Missing the required parameter 'reportingInstruction' when calling putReportingInstruction");
      }

      let pathParams = {
        'EmployerId': employerId,
        'ReportingInstructionId': reportingInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportingInstruction;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/ReportingInstruction/{ReportingInstructionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
