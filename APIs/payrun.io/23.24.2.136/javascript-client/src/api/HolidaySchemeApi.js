/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import HolidayScheme from '../model/HolidayScheme';
import Link from '../model/Link';
import LinkCollection from '../model/LinkCollection';
import Tag from '../model/Tag';

/**
* HolidayScheme service.
* @module api/HolidaySchemeApi
* @version 23.24.2.136
*/
export default class HolidaySchemeApi {

    /**
    * Constructs a new HolidaySchemeApi. 
    * @alias module:api/HolidaySchemeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteHolidayScheme operation.
     * @callback module:api/HolidaySchemeApi~deleteHolidaySchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an holiday scheme
     * Delete the specified holiday scheme
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~deleteHolidaySchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHolidayScheme(employerId, holidaySchemeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteHolidayScheme");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling deleteHolidayScheme");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteHolidayScheme");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteHolidayScheme");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHolidaySchemeRevision operation.
     * @callback module:api/HolidaySchemeApi~deleteHolidaySchemeRevisionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an holiday scheme revision matching the specified revision date.
     * Deletes the specified holiday scheme revision for the matching revision date
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~deleteHolidaySchemeRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHolidaySchemeRevision(employerId, holidaySchemeId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteHolidaySchemeRevision");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling deleteHolidaySchemeRevision");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling deleteHolidaySchemeRevision");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteHolidaySchemeRevision");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteHolidaySchemeRevision");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/{EffectiveDate}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHolidaySchemeRevisionByNumber operation.
     * @callback module:api/HolidaySchemeApi~deleteHolidaySchemeRevisionByNumberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an HolidayScheme revision matching the specified revision number.
     * Deletes the specified holiday scheme revision for the matching revision number
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {String} revisionNumber The revision number. E.g. 1
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~deleteHolidaySchemeRevisionByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHolidaySchemeRevisionByNumber(employerId, holidaySchemeId, revisionNumber, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteHolidaySchemeRevisionByNumber");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling deleteHolidaySchemeRevisionByNumber");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling deleteHolidaySchemeRevisionByNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteHolidaySchemeRevisionByNumber");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteHolidaySchemeRevisionByNumber");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId,
        'RevisionNumber': revisionNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revision/{RevisionNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHolidaySchemeTag_0 operation.
     * @callback module:api/HolidaySchemeApi~deleteHolidaySchemeTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete holiday scheme tag
     * Deletes a tag from the holiday scheme
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~deleteHolidaySchemeTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHolidaySchemeTag_0(employerId, holidaySchemeId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteHolidaySchemeTag_0");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling deleteHolidaySchemeTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteHolidaySchemeTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteHolidaySchemeTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteHolidaySchemeTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllHolidaySchemeTags_0 operation.
     * @callback module:api/HolidaySchemeApi~getAllHolidaySchemeTags_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all holiday scheme tags
     * Gets all the holiday scheme tags
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~getAllHolidaySchemeTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAllHolidaySchemeTags_0(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAllHolidaySchemeTags_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllHolidaySchemeTags_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAllHolidaySchemeTags_0");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidaySchemes/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHolidaySchemeByEffectiveDate operation.
     * @callback module:api/HolidaySchemeApi~getHolidaySchemeByEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HolidayScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get holiday scheme by effective date.
     * Returns the holiday scheme's state at the specified effective date.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~getHolidaySchemeByEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HolidayScheme}
     */
    getHolidaySchemeByEffectiveDate(employerId, holidaySchemeId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getHolidaySchemeByEffectiveDate");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling getHolidaySchemeByEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getHolidaySchemeByEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHolidaySchemeByEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getHolidaySchemeByEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HolidayScheme;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHolidaySchemeFromEmployer operation.
     * @callback module:api/HolidaySchemeApi~getHolidaySchemeFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HolidayScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get holiday scheme from employer
     * Gets the specified holiday scheme from employer.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~getHolidaySchemeFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HolidayScheme}
     */
    getHolidaySchemeFromEmployer(employerId, holidaySchemeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getHolidaySchemeFromEmployer");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling getHolidaySchemeFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHolidaySchemeFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getHolidaySchemeFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HolidayScheme;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHolidaySchemeRevisionByNumber operation.
     * @callback module:api/HolidaySchemeApi~getHolidaySchemeRevisionByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HolidayScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the holiday scheme revision by revision number
     * Get the holiday scheme revision matching the specified revision number
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {String} revisionNumber The revision number. E.g. 1
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~getHolidaySchemeRevisionByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HolidayScheme}
     */
    getHolidaySchemeRevisionByNumber(employerId, holidaySchemeId, revisionNumber, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getHolidaySchemeRevisionByNumber");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling getHolidaySchemeRevisionByNumber");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling getHolidaySchemeRevisionByNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHolidaySchemeRevisionByNumber");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getHolidaySchemeRevisionByNumber");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId,
        'RevisionNumber': revisionNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HolidayScheme;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revision/{RevisionNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHolidaySchemeRevisions operation.
     * @callback module:api/HolidaySchemeApi~getHolidaySchemeRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all holiday scheme revisions
     * Gets links to all the holiday scheme revisions
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~getHolidaySchemeRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getHolidaySchemeRevisions(employerId, holidaySchemeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getHolidaySchemeRevisions");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling getHolidaySchemeRevisions");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHolidaySchemeRevisions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getHolidaySchemeRevisions");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHolidaySchemesByEffectiveDate operation.
     * @callback module:api/HolidaySchemeApi~getHolidaySchemesByEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get holiday schemes from employer at a given effective date.
     * Get links to all holiday schemes for the employer on specified effective date.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~getHolidaySchemesByEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getHolidaySchemesByEffectiveDate(employerId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getHolidaySchemesByEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getHolidaySchemesByEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHolidaySchemesByEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getHolidaySchemesByEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidaySchemes/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHolidaySchemesFromEmployer operation.
     * @callback module:api/HolidaySchemeApi~getHolidaySchemesFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get holiday schemes from employer.
     * Get links to all holiday schemes for the specified employer.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~getHolidaySchemesFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getHolidaySchemesFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getHolidaySchemesFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHolidaySchemesFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getHolidaySchemesFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidaySchemes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHolidaySchemesWithTag_0 operation.
     * @callback module:api/HolidaySchemeApi~getHolidaySchemesWithTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get holiday schemes with tag
     * Gets the holiday scheme with the tag
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~getHolidaySchemesWithTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getHolidaySchemesWithTag_0(employerId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getHolidaySchemesWithTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getHolidaySchemesWithTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHolidaySchemesWithTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getHolidaySchemesWithTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidaySchemes/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagFromHolidaySchemeRevision_0 operation.
     * @callback module:api/HolidaySchemeApi~getTagFromHolidaySchemeRevision_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get holiday scheme revision tag
     * Gets the tag from the holiday scheme revision
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~getTagFromHolidaySchemeRevision_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    getTagFromHolidaySchemeRevision_0(employerId, holidaySchemeId, tagId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagFromHolidaySchemeRevision_0");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling getTagFromHolidaySchemeRevision_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTagFromHolidaySchemeRevision_0");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getTagFromHolidaySchemeRevision_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagFromHolidaySchemeRevision_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagFromHolidaySchemeRevision_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId,
        'TagId': tagId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagFromHolidayScheme_0 operation.
     * @callback module:api/HolidaySchemeApi~getTagFromHolidayScheme_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get holiday scheme tag
     * Gets the tag from the holiday scheme
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~getTagFromHolidayScheme_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    getTagFromHolidayScheme_0(employerId, holidaySchemeId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagFromHolidayScheme_0");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling getTagFromHolidayScheme_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTagFromHolidayScheme_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagFromHolidayScheme_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagFromHolidayScheme_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsFromHolidaySchemeRevision_0 operation.
     * @callback module:api/HolidaySchemeApi~getTagsFromHolidaySchemeRevision_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all holiday scheme revision tags
     * Gets all the tags from the holiday scheme revision
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~getTagsFromHolidaySchemeRevision_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getTagsFromHolidaySchemeRevision_0(employerId, holidaySchemeId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagsFromHolidaySchemeRevision_0");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling getTagsFromHolidaySchemeRevision_0");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getTagsFromHolidaySchemeRevision_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagsFromHolidaySchemeRevision_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagsFromHolidaySchemeRevision_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsFromHolidayScheme_0 operation.
     * @callback module:api/HolidaySchemeApi~getTagsFromHolidayScheme_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all tags from the holiday scheme
     * Gets all the tags from the holiday scheme
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~getTagsFromHolidayScheme_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getTagsFromHolidayScheme_0(employerId, holidaySchemeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagsFromHolidayScheme_0");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling getTagsFromHolidayScheme_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagsFromHolidayScheme_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagsFromHolidayScheme_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchHolidayScheme operation.
     * @callback module:api/HolidaySchemeApi~patchHolidaySchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HolidayScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches the holiday scheme
     * Patches the specified holiday scheme with the supplied values
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/HolidayScheme} holidayScheme The holiday scheme object.
     * @param {module:api/HolidaySchemeApi~patchHolidaySchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HolidayScheme}
     */
    patchHolidayScheme(employerId, holidaySchemeId, authorization, apiVersion, holidayScheme, callback) {
      let postBody = holidayScheme;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling patchHolidayScheme");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling patchHolidayScheme");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling patchHolidayScheme");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling patchHolidayScheme");
      }
      // verify the required parameter 'holidayScheme' is set
      if (holidayScheme === undefined || holidayScheme === null) {
        throw new Error("Missing the required parameter 'holidayScheme' when calling patchHolidayScheme");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HolidayScheme;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postHolidaySchemeIntoEmployer operation.
     * @callback module:api/HolidaySchemeApi~postHolidaySchemeIntoEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new holiday scheme
     * Create a new holiday scheme object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/HolidayScheme} holidayScheme The holiday scheme object.
     * @param {module:api/HolidaySchemeApi~postHolidaySchemeIntoEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postHolidaySchemeIntoEmployer(employerId, authorization, apiVersion, holidayScheme, callback) {
      let postBody = holidayScheme;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postHolidaySchemeIntoEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postHolidaySchemeIntoEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postHolidaySchemeIntoEmployer");
      }
      // verify the required parameter 'holidayScheme' is set
      if (holidayScheme === undefined || holidayScheme === null) {
        throw new Error("Missing the required parameter 'holidayScheme' when calling postHolidaySchemeIntoEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidaySchemes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putHolidaySchemeIntoEmployer operation.
     * @callback module:api/HolidaySchemeApi~putHolidaySchemeIntoEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HolidayScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the holiday scheme
     * Updates the existing specified holiday scheme object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/HolidayScheme} holidayScheme The holiday scheme object.
     * @param {module:api/HolidaySchemeApi~putHolidaySchemeIntoEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HolidayScheme}
     */
    putHolidaySchemeIntoEmployer(employerId, holidaySchemeId, authorization, apiVersion, holidayScheme, callback) {
      let postBody = holidayScheme;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putHolidaySchemeIntoEmployer");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling putHolidaySchemeIntoEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putHolidaySchemeIntoEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putHolidaySchemeIntoEmployer");
      }
      // verify the required parameter 'holidayScheme' is set
      if (holidayScheme === undefined || holidayScheme === null) {
        throw new Error("Missing the required parameter 'holidayScheme' when calling putHolidaySchemeIntoEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HolidayScheme;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putHolidaySchemeTag_0 operation.
     * @callback module:api/HolidaySchemeApi~putHolidaySchemeTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert holiday scheme tag
     * Inserts a new tag on the holiday scheme
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} holidaySchemeId The holiday schemes' unique identifier. E.g HOLSCH001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/HolidaySchemeApi~putHolidaySchemeTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    putHolidaySchemeTag_0(employerId, holidaySchemeId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putHolidaySchemeTag_0");
      }
      // verify the required parameter 'holidaySchemeId' is set
      if (holidaySchemeId === undefined || holidaySchemeId === null) {
        throw new Error("Missing the required parameter 'holidaySchemeId' when calling putHolidaySchemeTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling putHolidaySchemeTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putHolidaySchemeTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putHolidaySchemeTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'HolidaySchemeId': holidaySchemeId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
