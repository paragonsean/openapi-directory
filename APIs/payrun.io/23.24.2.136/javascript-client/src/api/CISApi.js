/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CisInstruction from '../model/CisInstruction';
import CisLine from '../model/CisLine';
import CisLineType from '../model/CisLineType';
import CisTransaction from '../model/CisTransaction';
import ErrorModel from '../model/ErrorModel';
import Link from '../model/Link';
import LinkCollection from '../model/LinkCollection';
import Tag from '../model/Tag';

/**
* CIS service.
* @module api/CISApi
* @version 23.24.2.136
*/
export default class CISApi {

    /**
    * Constructs a new CISApi. 
    * @alias module:api/CISApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteCisInstruction operation.
     * @callback module:api/CISApi~deleteCisInstructionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a CIS instruction
     * Delete the specified CIS instruction
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisInstructionId The CIS instruction unique identifier. E.g. CIS001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~deleteCisInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCisInstruction(employerId, subContractorId, cisInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteCisInstruction");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling deleteCisInstruction");
      }
      // verify the required parameter 'cisInstructionId' is set
      if (cisInstructionId === undefined || cisInstructionId === null) {
        throw new Error("Missing the required parameter 'cisInstructionId' when calling deleteCisInstruction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteCisInstruction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteCisInstruction");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisInstructionId': cisInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCisInstructionTag_0 operation.
     * @callback module:api/CISApi~deleteCisInstructionTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete CIS instruction tag
     * Deletes a tag from the CIS instruction
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisInstructionId The CIS instruction unique identifier. E.g. CIS001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~deleteCisInstructionTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCisInstructionTag_0(employerId, subContractorId, cisInstructionId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteCisInstructionTag_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling deleteCisInstructionTag_0");
      }
      // verify the required parameter 'cisInstructionId' is set
      if (cisInstructionId === undefined || cisInstructionId === null) {
        throw new Error("Missing the required parameter 'cisInstructionId' when calling deleteCisInstructionTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteCisInstructionTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteCisInstructionTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteCisInstructionTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisInstructionId': cisInstructionId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCisLine operation.
     * @callback module:api/CISApi~deleteCisLineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a CIS line
     * Delete the specified CIS line
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisLineId The CIS line unique identifier. E.g. CISLN001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~deleteCisLineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCisLine(employerId, subContractorId, cisLineId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteCisLine");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling deleteCisLine");
      }
      // verify the required parameter 'cisLineId' is set
      if (cisLineId === undefined || cisLineId === null) {
        throw new Error("Missing the required parameter 'cisLineId' when calling deleteCisLine");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteCisLine");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteCisLine");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisLineId': cisLineId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCisLineTag_0 operation.
     * @callback module:api/CISApi~deleteCisLineTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete CIS line tag
     * Deletes a tag from the CIS line
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisLineId The CIS line unique identifier. E.g. CISLN001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~deleteCisLineTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCisLineTag_0(employerId, subContractorId, cisLineId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteCisLineTag_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling deleteCisLineTag_0");
      }
      // verify the required parameter 'cisLineId' is set
      if (cisLineId === undefined || cisLineId === null) {
        throw new Error("Missing the required parameter 'cisLineId' when calling deleteCisLineTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteCisLineTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteCisLineTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteCisLineTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisLineId': cisLineId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCisLineType operation.
     * @callback module:api/CISApi~deleteCisLineTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an CIS line type
     * Delete the specified CIS line type
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} cisLineTypeId The CIS line type unique identifier. E.g. TYPEA
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~deleteCisLineTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCisLineType(employerId, cisLineTypeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteCisLineType");
      }
      // verify the required parameter 'cisLineTypeId' is set
      if (cisLineTypeId === undefined || cisLineTypeId === null) {
        throw new Error("Missing the required parameter 'cisLineTypeId' when calling deleteCisLineType");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteCisLineType");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteCisLineType");
      }

      let pathParams = {
        'EmployerId': employerId,
        'CisLineTypeId': cisLineTypeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCisLineTypeTag_0 operation.
     * @callback module:api/CISApi~deleteCisLineTypeTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete CIS line type tag
     * Deletes a tag from the CIS line type
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} cisLineTypeId The CIS line type unique identifier. E.g. TYPEA
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~deleteCisLineTypeTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCisLineTypeTag_0(employerId, cisLineTypeId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteCisLineTypeTag_0");
      }
      // verify the required parameter 'cisLineTypeId' is set
      if (cisLineTypeId === undefined || cisLineTypeId === null) {
        throw new Error("Missing the required parameter 'cisLineTypeId' when calling deleteCisLineTypeTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteCisLineTypeTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteCisLineTypeTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteCisLineTypeTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'CisLineTypeId': cisLineTypeId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCisTransaction operation.
     * @callback module:api/CISApi~deleteCisTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the CIS transaction
     * Deletes the specified CIS transaction
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} cisTransactionId The CIS transaction unique identifier. E.g. CISTRAN001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~deleteCisTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCisTransaction(employerId, cisTransactionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteCisTransaction");
      }
      // verify the required parameter 'cisTransactionId' is set
      if (cisTransactionId === undefined || cisTransactionId === null) {
        throw new Error("Missing the required parameter 'cisTransactionId' when calling deleteCisTransaction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteCisTransaction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteCisTransaction");
      }

      let pathParams = {
        'EmployerId': employerId,
        'CisTransactionId': cisTransactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisTransaction/{CisTransactionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubContractorTag_0 operation.
     * @callback module:api/CISApi~deleteSubContractorTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete sub contractor tag
     * Deletes a tag from the sub contractor
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~deleteSubContractorTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubContractorTag_0(employerId, subContractorId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteSubContractorTag_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling deleteSubContractorTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteSubContractorTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteSubContractorTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteSubContractorTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCisInstructionTags_0 operation.
     * @callback module:api/CISApi~getAllCisInstructionTags_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all CIS instruction tags
     * Gets all the CIS instruction tags
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getAllCisInstructionTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAllCisInstructionTags_0(employerId, subContractorId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAllCisInstructionTags_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getAllCisInstructionTags_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllCisInstructionTags_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAllCisInstructionTags_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCisLineTags_0 operation.
     * @callback module:api/CISApi~getAllCisLineTags_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all CIS line tags
     * Gets all the CIS line tags
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getAllCisLineTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAllCisLineTags_0(employerId, subContractorId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAllCisLineTags_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getAllCisLineTags_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllCisLineTags_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAllCisLineTags_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCisLineTypeTags_0 operation.
     * @callback module:api/CISApi~getAllCisLineTypeTags_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all CIS line type tags
     * Gets all the CIS line type tags
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getAllCisLineTypeTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAllCisLineTypeTags_0(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAllCisLineTypeTags_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllCisLineTypeTags_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAllCisLineTypeTags_0");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisLineTypes/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSubContractorTags_0 operation.
     * @callback module:api/CISApi~getAllSubContractorTags_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all sub contractor tags
     * Gets all the sub contractor tags
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getAllSubContractorTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAllSubContractorTags_0(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAllSubContractorTags_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllSubContractorTags_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAllSubContractorTags_0");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractors/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCisInstructionFromSubContractor operation.
     * @callback module:api/CISApi~getCisInstructionFromSubContractorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CisInstruction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CIS instruction from sub contractor
     * Gets the specified CIS instruction from sub contractor.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisInstructionId The CIS instruction unique identifier. E.g. CIS001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getCisInstructionFromSubContractorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CisInstruction}
     */
    getCisInstructionFromSubContractor(employerId, subContractorId, cisInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCisInstructionFromSubContractor");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getCisInstructionFromSubContractor");
      }
      // verify the required parameter 'cisInstructionId' is set
      if (cisInstructionId === undefined || cisInstructionId === null) {
        throw new Error("Missing the required parameter 'cisInstructionId' when calling getCisInstructionFromSubContractor");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCisInstructionFromSubContractor");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCisInstructionFromSubContractor");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisInstructionId': cisInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CisInstruction;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCisInstructionsFromSubContractor operation.
     * @callback module:api/CISApi~getCisInstructionsFromSubContractorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CIS instructions from sub contractor.
     * Get links to all CIS instructions for the specified sub contractor.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getCisInstructionsFromSubContractorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getCisInstructionsFromSubContractor(employerId, subContractorId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCisInstructionsFromSubContractor");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getCisInstructionsFromSubContractor");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCisInstructionsFromSubContractor");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCisInstructionsFromSubContractor");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCisInstructionsWithTag_0 operation.
     * @callback module:api/CISApi~getCisInstructionsWithTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CIS instructions with tag
     * Gets the CIS instruction with the tag
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getCisInstructionsWithTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getCisInstructionsWithTag_0(employerId, subContractorId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCisInstructionsWithTag_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getCisInstructionsWithTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getCisInstructionsWithTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCisInstructionsWithTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCisInstructionsWithTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCisLineFromSubContractor operation.
     * @callback module:api/CISApi~getCisLineFromSubContractorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CisLine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CIS line from sub contractor
     * Gets the specified CIS line from sub contractor.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisLineId The CIS line unique identifier. E.g. CISLN001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getCisLineFromSubContractorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CisLine}
     */
    getCisLineFromSubContractor(employerId, subContractorId, cisLineId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCisLineFromSubContractor");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getCisLineFromSubContractor");
      }
      // verify the required parameter 'cisLineId' is set
      if (cisLineId === undefined || cisLineId === null) {
        throw new Error("Missing the required parameter 'cisLineId' when calling getCisLineFromSubContractor");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCisLineFromSubContractor");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCisLineFromSubContractor");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisLineId': cisLineId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CisLine;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCisLineTypeFromEmployer operation.
     * @callback module:api/CISApi~getCisLineTypeFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CisLineType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CIS line type from employer
     * Gets the specified CIS line type from employer.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} cisLineTypeId The CIS line type unique identifier. E.g. TYPEA
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getCisLineTypeFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CisLineType}
     */
    getCisLineTypeFromEmployer(employerId, cisLineTypeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCisLineTypeFromEmployer");
      }
      // verify the required parameter 'cisLineTypeId' is set
      if (cisLineTypeId === undefined || cisLineTypeId === null) {
        throw new Error("Missing the required parameter 'cisLineTypeId' when calling getCisLineTypeFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCisLineTypeFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCisLineTypeFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'CisLineTypeId': cisLineTypeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CisLineType;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCisLineTypesFromEmployer operation.
     * @callback module:api/CISApi~getCisLineTypesFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CIS line types from employer.
     * Get links to all CIS line types for the specified employer.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getCisLineTypesFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getCisLineTypesFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCisLineTypesFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCisLineTypesFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCisLineTypesFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisLineTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCisLineTypesWithTag_0 operation.
     * @callback module:api/CISApi~getCisLineTypesWithTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CIS line types with tag
     * Gets the CIS line type with the tag
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getCisLineTypesWithTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getCisLineTypesWithTag_0(employerId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCisLineTypesWithTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getCisLineTypesWithTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCisLineTypesWithTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCisLineTypesWithTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisLineTypes/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCisLinesFromSubContractor operation.
     * @callback module:api/CISApi~getCisLinesFromSubContractorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CIS lines from sub contractor.
     * Get links to all CIS lines for the specified sub contractor.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getCisLinesFromSubContractorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getCisLinesFromSubContractor(employerId, subContractorId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCisLinesFromSubContractor");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getCisLinesFromSubContractor");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCisLinesFromSubContractor");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCisLinesFromSubContractor");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCisLinesWithTag_0 operation.
     * @callback module:api/CISApi~getCisLinesWithTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CIS lines with tag
     * Gets the CIS line with the tag
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getCisLinesWithTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getCisLinesWithTag_0(employerId, subContractorId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCisLinesWithTag_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getCisLinesWithTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getCisLinesWithTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCisLinesWithTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCisLinesWithTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCisTransactionFromEmployer operation.
     * @callback module:api/CISApi~getCisTransactionFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CisTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the CIS transaction
     * Returns the specified CIS transaction
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} cisTransactionId The CIS transaction unique identifier. E.g. CISTRAN001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getCisTransactionFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CisTransaction}
     */
    getCisTransactionFromEmployer(employerId, cisTransactionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCisTransactionFromEmployer");
      }
      // verify the required parameter 'cisTransactionId' is set
      if (cisTransactionId === undefined || cisTransactionId === null) {
        throw new Error("Missing the required parameter 'cisTransactionId' when calling getCisTransactionFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCisTransactionFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCisTransactionFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'CisTransactionId': cisTransactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CisTransaction;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisTransaction/{CisTransactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCisTransactionsFromEmployer operation.
     * @callback module:api/CISApi~getCisTransactionsFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all CIS transactions for the employer
     * Get links for all CIS transactions for the specified employer
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getCisTransactionsFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getCisTransactionsFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCisTransactionsFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCisTransactionsFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCisTransactionsFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisTransactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubContractorsWithTag_0 operation.
     * @callback module:api/CISApi~getSubContractorsWithTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sub contractors with tag
     * Gets the sub contractor with the tag
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getSubContractorsWithTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getSubContractorsWithTag_0(employerId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getSubContractorsWithTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getSubContractorsWithTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSubContractorsWithTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSubContractorsWithTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractors/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagFromCisInstruction_0 operation.
     * @callback module:api/CISApi~getTagFromCisInstruction_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CIS instruction tag
     * Gets the tag from the CIS instruction
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisInstructionId The CIS instruction unique identifier. E.g. CIS001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getTagFromCisInstruction_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    getTagFromCisInstruction_0(employerId, subContractorId, cisInstructionId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagFromCisInstruction_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getTagFromCisInstruction_0");
      }
      // verify the required parameter 'cisInstructionId' is set
      if (cisInstructionId === undefined || cisInstructionId === null) {
        throw new Error("Missing the required parameter 'cisInstructionId' when calling getTagFromCisInstruction_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTagFromCisInstruction_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagFromCisInstruction_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagFromCisInstruction_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisInstructionId': cisInstructionId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagFromCisLineType_0 operation.
     * @callback module:api/CISApi~getTagFromCisLineType_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CIS line type tag
     * Gets the tag from the CIS line type
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} cisLineTypeId The CIS line type unique identifier. E.g. TYPEA
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getTagFromCisLineType_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    getTagFromCisLineType_0(employerId, cisLineTypeId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagFromCisLineType_0");
      }
      // verify the required parameter 'cisLineTypeId' is set
      if (cisLineTypeId === undefined || cisLineTypeId === null) {
        throw new Error("Missing the required parameter 'cisLineTypeId' when calling getTagFromCisLineType_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTagFromCisLineType_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagFromCisLineType_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagFromCisLineType_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'CisLineTypeId': cisLineTypeId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagFromCisLine_0 operation.
     * @callback module:api/CISApi~getTagFromCisLine_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CIS line tag
     * Gets the tag from the CIS line
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisLineId The CIS line unique identifier. E.g. CISLN001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getTagFromCisLine_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    getTagFromCisLine_0(employerId, subContractorId, cisLineId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagFromCisLine_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getTagFromCisLine_0");
      }
      // verify the required parameter 'cisLineId' is set
      if (cisLineId === undefined || cisLineId === null) {
        throw new Error("Missing the required parameter 'cisLineId' when calling getTagFromCisLine_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTagFromCisLine_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagFromCisLine_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagFromCisLine_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisLineId': cisLineId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagFromSubContractorRevision_0 operation.
     * @callback module:api/CISApi~getTagFromSubContractorRevision_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sub contractor revision tag
     * Gets the tag from the sub contractor revision
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getTagFromSubContractorRevision_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    getTagFromSubContractorRevision_0(employerId, subContractorId, tagId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagFromSubContractorRevision_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getTagFromSubContractorRevision_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTagFromSubContractorRevision_0");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getTagFromSubContractorRevision_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagFromSubContractorRevision_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagFromSubContractorRevision_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'TagId': tagId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagFromSubContractor_0 operation.
     * @callback module:api/CISApi~getTagFromSubContractor_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sub contractor tag
     * Gets the tag from the sub contractor
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getTagFromSubContractor_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    getTagFromSubContractor_0(employerId, subContractorId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagFromSubContractor_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getTagFromSubContractor_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTagFromSubContractor_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagFromSubContractor_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagFromSubContractor_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsFromCisInstruction_0 operation.
     * @callback module:api/CISApi~getTagsFromCisInstruction_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all tags from the CIS instruction
     * Gets all the tags from the CIS instruction
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisInstructionId The CIS instruction unique identifier. E.g. CIS001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getTagsFromCisInstruction_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getTagsFromCisInstruction_0(employerId, subContractorId, cisInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagsFromCisInstruction_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getTagsFromCisInstruction_0");
      }
      // verify the required parameter 'cisInstructionId' is set
      if (cisInstructionId === undefined || cisInstructionId === null) {
        throw new Error("Missing the required parameter 'cisInstructionId' when calling getTagsFromCisInstruction_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagsFromCisInstruction_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagsFromCisInstruction_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisInstructionId': cisInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsFromCisLineType_0 operation.
     * @callback module:api/CISApi~getTagsFromCisLineType_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all tags from the CIS line type
     * Gets all the tags from the CIS line type
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} cisLineTypeId The CIS line type unique identifier. E.g. TYPEA
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getTagsFromCisLineType_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getTagsFromCisLineType_0(employerId, cisLineTypeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagsFromCisLineType_0");
      }
      // verify the required parameter 'cisLineTypeId' is set
      if (cisLineTypeId === undefined || cisLineTypeId === null) {
        throw new Error("Missing the required parameter 'cisLineTypeId' when calling getTagsFromCisLineType_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagsFromCisLineType_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagsFromCisLineType_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'CisLineTypeId': cisLineTypeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsFromCisLine_0 operation.
     * @callback module:api/CISApi~getTagsFromCisLine_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all tags from the CIS line
     * Gets all the tags from the CIS line
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisLineId The CIS line unique identifier. E.g. CISLN001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getTagsFromCisLine_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getTagsFromCisLine_0(employerId, subContractorId, cisLineId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagsFromCisLine_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getTagsFromCisLine_0");
      }
      // verify the required parameter 'cisLineId' is set
      if (cisLineId === undefined || cisLineId === null) {
        throw new Error("Missing the required parameter 'cisLineId' when calling getTagsFromCisLine_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagsFromCisLine_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagsFromCisLine_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisLineId': cisLineId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsFromSubContractorRevision_0 operation.
     * @callback module:api/CISApi~getTagsFromSubContractorRevision_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all sub contractor revision tags
     * Gets all the tags from the sub contractor revision
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getTagsFromSubContractorRevision_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getTagsFromSubContractorRevision_0(employerId, subContractorId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagsFromSubContractorRevision_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getTagsFromSubContractorRevision_0");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getTagsFromSubContractorRevision_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagsFromSubContractorRevision_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagsFromSubContractorRevision_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tags/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsFromSubContractor_0 operation.
     * @callback module:api/CISApi~getTagsFromSubContractor_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all tags from the sub contractor
     * Gets all the tags from the sub contractor
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~getTagsFromSubContractor_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getTagsFromSubContractor_0(employerId, subContractorId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getTagsFromSubContractor_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getTagsFromSubContractor_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTagsFromSubContractor_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getTagsFromSubContractor_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCisInstruction operation.
     * @callback module:api/CISApi~patchCisInstructionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CisInstruction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches the CIS instruction
     * Update an existing CIS instruction object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisInstructionId The CIS instruction unique identifier. E.g. CIS001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~patchCisInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CisInstruction}
     */
    patchCisInstruction(employerId, subContractorId, cisInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling patchCisInstruction");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling patchCisInstruction");
      }
      // verify the required parameter 'cisInstructionId' is set
      if (cisInstructionId === undefined || cisInstructionId === null) {
        throw new Error("Missing the required parameter 'cisInstructionId' when calling patchCisInstruction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling patchCisInstruction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling patchCisInstruction");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisInstructionId': cisInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CisInstruction;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCisInstructionIntoSubContractor operation.
     * @callback module:api/CISApi~postCisInstructionIntoSubContractorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new CIS instruction
     * Create a new CIS instruction object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/CisInstruction} cisInstruction The CIS instruction object.
     * @param {module:api/CISApi~postCisInstructionIntoSubContractorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postCisInstructionIntoSubContractor(employerId, subContractorId, authorization, apiVersion, cisInstruction, callback) {
      let postBody = cisInstruction;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postCisInstructionIntoSubContractor");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling postCisInstructionIntoSubContractor");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postCisInstructionIntoSubContractor");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postCisInstructionIntoSubContractor");
      }
      // verify the required parameter 'cisInstruction' is set
      if (cisInstruction === undefined || cisInstruction === null) {
        throw new Error("Missing the required parameter 'cisInstruction' when calling postCisInstructionIntoSubContractor");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCisLineTypeIntoEmployer operation.
     * @callback module:api/CISApi~postCisLineTypeIntoEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new CIS line type
     * Create a new CIS line type object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/CisLineType} cisLineType The CIS line type object.
     * @param {module:api/CISApi~postCisLineTypeIntoEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postCisLineTypeIntoEmployer(employerId, authorization, apiVersion, cisLineType, callback) {
      let postBody = cisLineType;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postCisLineTypeIntoEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postCisLineTypeIntoEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postCisLineTypeIntoEmployer");
      }
      // verify the required parameter 'cisLineType' is set
      if (cisLineType === undefined || cisLineType === null) {
        throw new Error("Missing the required parameter 'cisLineType' when calling postCisLineTypeIntoEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisLineTypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCisInstructionIntoSubContractor operation.
     * @callback module:api/CISApi~putCisInstructionIntoSubContractorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CisInstruction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the CIS instruction
     * Insert or update existing CIS instruction object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisInstructionId The CIS instruction unique identifier. E.g. CIS001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/CisInstruction} cisInstruction The CIS instruction object.
     * @param {module:api/CISApi~putCisInstructionIntoSubContractorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CisInstruction}
     */
    putCisInstructionIntoSubContractor(employerId, subContractorId, cisInstructionId, authorization, apiVersion, cisInstruction, callback) {
      let postBody = cisInstruction;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putCisInstructionIntoSubContractor");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling putCisInstructionIntoSubContractor");
      }
      // verify the required parameter 'cisInstructionId' is set
      if (cisInstructionId === undefined || cisInstructionId === null) {
        throw new Error("Missing the required parameter 'cisInstructionId' when calling putCisInstructionIntoSubContractor");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putCisInstructionIntoSubContractor");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putCisInstructionIntoSubContractor");
      }
      // verify the required parameter 'cisInstruction' is set
      if (cisInstruction === undefined || cisInstruction === null) {
        throw new Error("Missing the required parameter 'cisInstruction' when calling putCisInstructionIntoSubContractor");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisInstructionId': cisInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CisInstruction;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCisInstructionTag_0 operation.
     * @callback module:api/CISApi~putCisInstructionTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert CIS instruction tag
     * Inserts a new tag on the CIS instruction
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisInstructionId The CIS instruction unique identifier. E.g. CIS001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~putCisInstructionTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    putCisInstructionTag_0(employerId, subContractorId, cisInstructionId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putCisInstructionTag_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling putCisInstructionTag_0");
      }
      // verify the required parameter 'cisInstructionId' is set
      if (cisInstructionId === undefined || cisInstructionId === null) {
        throw new Error("Missing the required parameter 'cisInstructionId' when calling putCisInstructionTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling putCisInstructionTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putCisInstructionTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putCisInstructionTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisInstructionId': cisInstructionId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCisLineTag_0 operation.
     * @callback module:api/CISApi~putCisLineTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert CIS line tag
     * Inserts a new tag on the CIS line
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} cisLineId The CIS line unique identifier. E.g. CISLN001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~putCisLineTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    putCisLineTag_0(employerId, subContractorId, cisLineId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putCisLineTag_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling putCisLineTag_0");
      }
      // verify the required parameter 'cisLineId' is set
      if (cisLineId === undefined || cisLineId === null) {
        throw new Error("Missing the required parameter 'cisLineId' when calling putCisLineTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling putCisLineTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putCisLineTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putCisLineTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'CisLineId': cisLineId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCisLineTypeIntoEmployer operation.
     * @callback module:api/CISApi~putCisLineTypeIntoEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CisLineType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the CIS line type
     * Updates the existing specified CIS line type object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} cisLineTypeId The CIS line type unique identifier. E.g. TYPEA
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/CisLineType} cisLineType The CIS line type object.
     * @param {module:api/CISApi~putCisLineTypeIntoEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CisLineType}
     */
    putCisLineTypeIntoEmployer(employerId, cisLineTypeId, authorization, apiVersion, cisLineType, callback) {
      let postBody = cisLineType;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putCisLineTypeIntoEmployer");
      }
      // verify the required parameter 'cisLineTypeId' is set
      if (cisLineTypeId === undefined || cisLineTypeId === null) {
        throw new Error("Missing the required parameter 'cisLineTypeId' when calling putCisLineTypeIntoEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putCisLineTypeIntoEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putCisLineTypeIntoEmployer");
      }
      // verify the required parameter 'cisLineType' is set
      if (cisLineType === undefined || cisLineType === null) {
        throw new Error("Missing the required parameter 'cisLineType' when calling putCisLineTypeIntoEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'CisLineTypeId': cisLineTypeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CisLineType;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCisLineTypeTag_0 operation.
     * @callback module:api/CISApi~putCisLineTypeTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert CIS line type tag
     * Inserts a new tag on the CIS line type
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} cisLineTypeId The CIS line type unique identifier. E.g. TYPEA
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~putCisLineTypeTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    putCisLineTypeTag_0(employerId, cisLineTypeId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putCisLineTypeTag_0");
      }
      // verify the required parameter 'cisLineTypeId' is set
      if (cisLineTypeId === undefined || cisLineTypeId === null) {
        throw new Error("Missing the required parameter 'cisLineTypeId' when calling putCisLineTypeTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling putCisLineTypeTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putCisLineTypeTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putCisLineTypeTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'CisLineTypeId': cisLineTypeId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSubContractorTag_0 operation.
     * @callback module:api/CISApi~putSubContractorTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert sub contractor tag
     * Inserts a new tag on the sub contractor
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/CISApi~putSubContractorTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    putSubContractorTag_0(employerId, subContractorId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putSubContractorTag_0");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling putSubContractorTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling putSubContractorTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putSubContractorTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putSubContractorTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
