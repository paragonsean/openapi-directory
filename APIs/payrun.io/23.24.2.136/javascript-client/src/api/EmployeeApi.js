/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AEAssessment from '../model/AEAssessment';
import Commentary from '../model/Commentary';
import Employee from '../model/Employee';
import EmployeeSecret from '../model/EmployeeSecret';
import EmployeeSummary from '../model/EmployeeSummary';
import ErrorModel from '../model/ErrorModel';
import Link from '../model/Link';
import LinkCollection from '../model/LinkCollection';

/**
* Employee service.
* @module api/EmployeeApi
* @version 23.24.2.136
*/
export default class EmployeeApi {

    /**
    * Constructs a new EmployeeApi. 
    * @alias module:api/EmployeeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteEmployee operation.
     * @callback module:api/EmployeeApi~deleteEmployeeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Employee
     * Delete the specified employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~deleteEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmployee(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling deleteEmployee");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteEmployee");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteEmployee");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmployeeRevision operation.
     * @callback module:api/EmployeeApi~deleteEmployeeRevisionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Employee revision matching the specified revision date.
     * Deletes the specified employee revision for the matching revision date
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~deleteEmployeeRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmployeeRevision(employerId, employeeId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteEmployeeRevision");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling deleteEmployeeRevision");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling deleteEmployeeRevision");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteEmployeeRevision");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteEmployeeRevision");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/{EffectiveDate}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmployeeRevisionByNumber operation.
     * @callback module:api/EmployeeApi~deleteEmployeeRevisionByNumberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Employee revision matching the specified revision number.
     * Deletes the specified employee revision for the matching revision number
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} revisionNumber The revision number. E.g. 1
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~deleteEmployeeRevisionByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmployeeRevisionByNumber(employerId, employeeId, revisionNumber, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteEmployeeRevisionByNumber");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling deleteEmployeeRevisionByNumber");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling deleteEmployeeRevisionByNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteEmployeeRevisionByNumber");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteEmployeeRevisionByNumber");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'RevisionNumber': revisionNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Revision/{RevisionNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmployeeSecret operation.
     * @callback module:api/EmployeeApi~deleteEmployeeSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes employee secret
     * Deletes an employee secret from the given resource location
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} secretId The secret unique identifier. E.g ERSEC001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~deleteEmployeeSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmployeeSecret(employerId, employeeId, secretId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteEmployeeSecret");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling deleteEmployeeSecret");
      }
      // verify the required parameter 'secretId' is set
      if (secretId === undefined || secretId === null) {
        throw new Error("Missing the required parameter 'secretId' when calling deleteEmployeeSecret");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteEmployeeSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteEmployeeSecret");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'SecretId': secretId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Secret/{SecretId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAEAssessmentFromEmployee_0 operation.
     * @callback module:api/EmployeeApi~getAEAssessmentFromEmployee_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AEAssessment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the auto enrolment assessment
     * Gets the auto enrolment assessment from the specified employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} aEAssessmentId The auto enrolment assessment unique identifier. E.g. AE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getAEAssessmentFromEmployee_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AEAssessment}
     */
    getAEAssessmentFromEmployee_0(employerId, employeeId, aEAssessmentId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAEAssessmentFromEmployee_0");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getAEAssessmentFromEmployee_0");
      }
      // verify the required parameter 'aEAssessmentId' is set
      if (aEAssessmentId === undefined || aEAssessmentId === null) {
        throw new Error("Missing the required parameter 'aEAssessmentId' when calling getAEAssessmentFromEmployee_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAEAssessmentFromEmployee_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAEAssessmentFromEmployee_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'AEAssessmentId': aEAssessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AEAssessment;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessment/{AEAssessmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAEAssessmentsFromEmployee_0 operation.
     * @callback module:api/EmployeeApi~getAEAssessmentsFromEmployee_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the auto enrolment assessments
     * Gets all auto enrolment assessments from the specified employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getAEAssessmentsFromEmployee_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAEAssessmentsFromEmployee_0(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAEAssessmentsFromEmployee_0");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getAEAssessmentsFromEmployee_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAEAssessmentsFromEmployee_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAEAssessmentsFromEmployee_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllEmployeeTags_0 operation.
     * @callback module:api/EmployeeApi~getAllEmployeeTags_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all employee tags
     * Gets all the employee tags
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getAllEmployeeTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAllEmployeeTags_0(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAllEmployeeTags_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllEmployeeTags_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAllEmployeeTags_0");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employees/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentariesFromEmployee operation.
     * @callback module:api/EmployeeApi~getCommentariesFromEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get links to all commentaries for the specified employee
     * Get links to all commentaries for the specified employee.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getCommentariesFromEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getCommentariesFromEmployee(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCommentariesFromEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getCommentariesFromEmployee");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCommentariesFromEmployee");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCommentariesFromEmployee");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Commentaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentaryFromEmployee operation.
     * @callback module:api/EmployeeApi~getCommentaryFromEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Commentary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get commentary from employee
     * Gets the specified commentary report from the employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} commentaryId The commentary unique identifier. E.g. C001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getCommentaryFromEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Commentary}
     */
    getCommentaryFromEmployee(employerId, employeeId, commentaryId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCommentaryFromEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getCommentaryFromEmployee");
      }
      // verify the required parameter 'commentaryId' is set
      if (commentaryId === undefined || commentaryId === null) {
        throw new Error("Missing the required parameter 'commentaryId' when calling getCommentaryFromEmployee");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCommentaryFromEmployee");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCommentaryFromEmployee");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'CommentaryId': commentaryId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Commentary;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Commentary/{CommentaryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentaryFromPayRunByEmployee operation.
     * @callback module:api/EmployeeApi~getCommentaryFromPayRunByEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Commentary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get commentary from payrun by specified employee.
     * Get commentary from payrun by specified employee.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getCommentaryFromPayRunByEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Commentary}
     */
    getCommentaryFromPayRunByEmployee(employerId, payScheduleId, payRunId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getCommentaryFromPayRunByEmployee");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getCommentaryFromPayRunByEmployee");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling getCommentaryFromPayRunByEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getCommentaryFromPayRunByEmployee");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCommentaryFromPayRunByEmployee");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCommentaryFromPayRunByEmployee");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Commentary;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Employee/{EmployeeId}/Commentary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeByEffectiveDate operation.
     * @callback module:api/EmployeeApi~getEmployeeByEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employee by effective date.
     * Returns the employee's state at the specified effective date.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeeByEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employee}
     */
    getEmployeeByEffectiveDate(employerId, employeeId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeeByEffectiveDate");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getEmployeeByEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getEmployeeByEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeeByEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeeByEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Employee;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeFromEmployer operation.
     * @callback module:api/EmployeeApi~getEmployeeFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employee from employer
     * Gets the specified employee from employer by employee code.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeeFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employee}
     */
    getEmployeeFromEmployer(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeeFromEmployer");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getEmployeeFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeeFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeeFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Employee;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeRevisionByNumber operation.
     * @callback module:api/EmployeeApi~getEmployeeRevisionByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the employee by revision number
     * Get the employee revision matching the specified revision number
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} revisionNumber The revision number. E.g. 1
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeeRevisionByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employee}
     */
    getEmployeeRevisionByNumber(employerId, employeeId, revisionNumber, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeeRevisionByNumber");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getEmployeeRevisionByNumber");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling getEmployeeRevisionByNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeeRevisionByNumber");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeeRevisionByNumber");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'RevisionNumber': revisionNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Employee;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Revision/{RevisionNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeRevisionSummaries operation.
     * @callback module:api/EmployeeApi~getEmployeeRevisionSummariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all employee revision summaries
     * Gets links to all employee revision summaries
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeeRevisionSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getEmployeeRevisionSummaries(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeeRevisionSummaries");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getEmployeeRevisionSummaries");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeeRevisionSummaries");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeeRevisionSummaries");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Revisions/Summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeRevisionSummaryByNumber operation.
     * @callback module:api/EmployeeApi~getEmployeeRevisionSummaryByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmployeeSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the employee summary by revision number
     * Get the employee revision summary matching the specified revision number
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} revisionNumber The revision number. E.g. 1
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeeRevisionSummaryByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmployeeSummary}
     */
    getEmployeeRevisionSummaryByNumber(employerId, employeeId, revisionNumber, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeeRevisionSummaryByNumber");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getEmployeeRevisionSummaryByNumber");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling getEmployeeRevisionSummaryByNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeeRevisionSummaryByNumber");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeeRevisionSummaryByNumber");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'RevisionNumber': revisionNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmployeeSummary;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Revision/{RevisionNumber}/Summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeRevisions operation.
     * @callback module:api/EmployeeApi~getEmployeeRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all employee revisions
     * Gets links to all employee revisions
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeeRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getEmployeeRevisions(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeeRevisions");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getEmployeeRevisions");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeeRevisions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeeRevisions");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeSecret operation.
     * @callback module:api/EmployeeApi~getEmployeeSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmployeeSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employee secret
     * Get the public visible employee secret object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} secretId The secret unique identifier. E.g ERSEC001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeeSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmployeeSecret}
     */
    getEmployeeSecret(employerId, employeeId, secretId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeeSecret");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getEmployeeSecret");
      }
      // verify the required parameter 'secretId' is set
      if (secretId === undefined || secretId === null) {
        throw new Error("Missing the required parameter 'secretId' when calling getEmployeeSecret");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeeSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeeSecret");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'SecretId': secretId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmployeeSecret;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Secret/{SecretId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeSecrets operation.
     * @callback module:api/EmployeeApi~getEmployeeSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all employee secret links
     * Get all the employee secret links
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeeSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getEmployeeSecrets(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeeSecrets");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getEmployeeSecrets");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeeSecrets");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeeSecrets");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeSummariesByEffectiveDate operation.
     * @callback module:api/EmployeeApi~getEmployeeSummariesByEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employee summaries from employer at a given effective date.
     * Get links to all employee summaries for the employer on specified effective date.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeeSummariesByEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getEmployeeSummariesByEffectiveDate(employerId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeeSummariesByEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getEmployeeSummariesByEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeeSummariesByEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeeSummariesByEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employees/{EffectiveDate}/Summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeSummariesFromEmployer operation.
     * @callback module:api/EmployeeApi~getEmployeeSummariesFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employee summaries from employer.
     * Get links to all employee summaries for the specified employer.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeeSummariesFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getEmployeeSummariesFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeeSummariesFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeeSummariesFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeeSummariesFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employees/Summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeSummaryByEffectiveDate operation.
     * @callback module:api/EmployeeApi~getEmployeeSummaryByEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmployeeSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employee summary by effective date.
     * Gets the employee summary for the specified effective date.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeeSummaryByEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmployeeSummary}
     */
    getEmployeeSummaryByEffectiveDate(employerId, employeeId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeeSummaryByEffectiveDate");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getEmployeeSummaryByEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getEmployeeSummaryByEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeeSummaryByEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeeSummaryByEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmployeeSummary;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/{EffectiveDate}/Summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeSummaryFromEmployer operation.
     * @callback module:api/EmployeeApi~getEmployeeSummaryFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmployeeSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employee summary from employer
     * Gets the specified employee summary data from employer by employee code.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeeSummaryFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmployeeSummary}
     */
    getEmployeeSummaryFromEmployer(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeeSummaryFromEmployer");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getEmployeeSummaryFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeeSummaryFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeeSummaryFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmployeeSummary;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeesByEffectiveDate operation.
     * @callback module:api/EmployeeApi~getEmployeesByEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employees from employer at a given effective date.
     * Get links to all employees for the employer on specified effective date.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeesByEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getEmployeesByEffectiveDate(employerId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeesByEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getEmployeesByEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeesByEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeesByEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employees/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeesFromEmployer operation.
     * @callback module:api/EmployeeApi~getEmployeesFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employees from employer.
     * Get links to all employees for the specified employer.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeesFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getEmployeesFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeesFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeesFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeesFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeesFromPayRun operation.
     * @callback module:api/EmployeeApi~getEmployeesFromPayRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employees from the pay run
     * Gets links to all employees included in the specified pay run.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeesFromPayRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getEmployeesFromPayRun(employerId, payScheduleId, payRunId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeesFromPayRun");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getEmployeesFromPayRun");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling getEmployeesFromPayRun");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeesFromPayRun");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeesFromPayRun");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Employees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeesFromPaySchedule operation.
     * @callback module:api/EmployeeApi~getEmployeesFromPayScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all employees revisions from a pay schedule.
     * Gets links to all employee revisions that have ever existed in the specified pay schedule.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeesFromPayScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getEmployeesFromPaySchedule(employerId, payScheduleId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeesFromPaySchedule");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getEmployeesFromPaySchedule");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeesFromPaySchedule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeesFromPaySchedule");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Employees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeesFromPayScheduleOnEffectiveDate operation.
     * @callback module:api/EmployeeApi~getEmployeesFromPayScheduleOnEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employees from a pay schedule on effective date.
     * Gets links to all employee revisions in the specified pay schedule for the given effective date.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeesFromPayScheduleOnEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getEmployeesFromPayScheduleOnEffectiveDate(employerId, payScheduleId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeesFromPayScheduleOnEffectiveDate");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getEmployeesFromPayScheduleOnEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getEmployeesFromPayScheduleOnEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeesFromPayScheduleOnEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeesFromPayScheduleOnEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Employees/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeesWithTag_0 operation.
     * @callback module:api/EmployeeApi~getEmployeesWithTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get employees with tag
     * Gets the employees with the tag
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getEmployeesWithTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getEmployeesWithTag_0(employerId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getEmployeesWithTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getEmployeesWithTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEmployeesWithTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getEmployeesWithTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employees/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayRunsFromEmployee_0 operation.
     * @callback module:api/EmployeeApi~getPayRunsFromEmployee_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the pay runs from the employee
     * Get links to all pay runs for the specified employee.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~getPayRunsFromEmployee_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPayRunsFromEmployee_0(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayRunsFromEmployee_0");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getPayRunsFromEmployee_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayRunsFromEmployee_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayRunsFromEmployee_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/PayRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchEmployee operation.
     * @callback module:api/EmployeeApi~patchEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches the employee
     * Patches the specified employee with the supplied values
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/Employee} employee The employee object.
     * @param {module:api/EmployeeApi~patchEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employee}
     */
    patchEmployee(employerId, employeeId, authorization, apiVersion, employee, callback) {
      let postBody = employee;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling patchEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling patchEmployee");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling patchEmployee");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling patchEmployee");
      }
      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling patchEmployee");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Employee;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmployeeIntoEmployer operation.
     * @callback module:api/EmployeeApi~postEmployeeIntoEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Employee
     * Create a new employee object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/Employee} employee The employee object.
     * @param {module:api/EmployeeApi~postEmployeeIntoEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postEmployeeIntoEmployer(employerId, authorization, apiVersion, employee, callback) {
      let postBody = employee;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postEmployeeIntoEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postEmployeeIntoEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postEmployeeIntoEmployer");
      }
      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling postEmployeeIntoEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmployeeSecret operation.
     * @callback module:api/EmployeeApi~postEmployeeSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new employee secret
     * Create new employee secret using auto generated resource location key
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~postEmployeeSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postEmployeeSecret(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postEmployeeSecret");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling postEmployeeSecret");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postEmployeeSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postEmployeeSecret");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Secrets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmployeeIntoEmployer operation.
     * @callback module:api/EmployeeApi~putEmployeeIntoEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Employee
     * Updates the existing specified employee object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/Employee} employee The employee object.
     * @param {module:api/EmployeeApi~putEmployeeIntoEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employee}
     */
    putEmployeeIntoEmployer(employerId, employeeId, authorization, apiVersion, employee, callback) {
      let postBody = employee;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putEmployeeIntoEmployer");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling putEmployeeIntoEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putEmployeeIntoEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putEmployeeIntoEmployer");
      }
      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling putEmployeeIntoEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Employee;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmployeeSecret operation.
     * @callback module:api/EmployeeApi~putEmployeeSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmployeeSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new employee secret
     * Create / update an employee secret at the given resource location
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} secretId The secret unique identifier. E.g ERSEC001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/EmployeeApi~putEmployeeSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmployeeSecret}
     */
    putEmployeeSecret(employerId, employeeId, secretId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putEmployeeSecret");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling putEmployeeSecret");
      }
      // verify the required parameter 'secretId' is set
      if (secretId === undefined || secretId === null) {
        throw new Error("Missing the required parameter 'secretId' when calling putEmployeeSecret");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putEmployeeSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putEmployeeSecret");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'SecretId': secretId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmployeeSecret;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/Secret/{SecretId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
