/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import JournalInstruction from '../model/JournalInstruction';
import JournalLine from '../model/JournalLine';
import Link from '../model/Link';
import LinkCollection from '../model/LinkCollection';

/**
* Journals service.
* @module api/JournalsApi
* @version 23.24.2.136
*/
export default class JournalsApi {

    /**
    * Constructs a new JournalsApi. 
    * @alias module:api/JournalsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteJournalInstruction operation.
     * @callback module:api/JournalsApi~deleteJournalInstructionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Journal instruction
     * Delete the specified Journal instruction
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} journalInstructionId The journal instruction unique identifier. E.g JI001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~deleteJournalInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteJournalInstruction(employerId, journalInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteJournalInstruction");
      }
      // verify the required parameter 'journalInstructionId' is set
      if (journalInstructionId === undefined || journalInstructionId === null) {
        throw new Error("Missing the required parameter 'journalInstructionId' when calling deleteJournalInstruction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteJournalInstruction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteJournalInstruction");
      }

      let pathParams = {
        'EmployerId': employerId,
        'JournalInstructionId': journalInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/JournalInstruction/{JournalInstructionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJournalInstructionTemplate operation.
     * @callback module:api/JournalsApi~deleteJournalInstructionTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Journal instruction template
     * Delete the specified Journal instruction template object
     * @param {String} journalInstructionId The journal instruction unique identifier. E.g JI001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~deleteJournalInstructionTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteJournalInstructionTemplate(journalInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'journalInstructionId' is set
      if (journalInstructionId === undefined || journalInstructionId === null) {
        throw new Error("Missing the required parameter 'journalInstructionId' when calling deleteJournalInstructionTemplate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteJournalInstructionTemplate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteJournalInstructionTemplate");
      }

      let pathParams = {
        'JournalInstructionId': journalInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/JournalInstruction/{JournalInstructionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalInstructionFromEmployer operation.
     * @callback module:api/JournalsApi~getJournalInstructionFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JournalInstruction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified journal instruction from the employer
     * Returns the specified journal instruction from employer
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} journalInstructionId The journal instruction unique identifier. E.g JI001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~getJournalInstructionFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JournalInstruction}
     */
    getJournalInstructionFromEmployer(employerId, journalInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getJournalInstructionFromEmployer");
      }
      // verify the required parameter 'journalInstructionId' is set
      if (journalInstructionId === undefined || journalInstructionId === null) {
        throw new Error("Missing the required parameter 'journalInstructionId' when calling getJournalInstructionFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getJournalInstructionFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getJournalInstructionFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'JournalInstructionId': journalInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JournalInstruction;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/JournalInstruction/{JournalInstructionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalInstructionTemplate operation.
     * @callback module:api/JournalsApi~getJournalInstructionTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JournalInstruction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Journal instructions template for the application
     * Retrurns the specified journal instruction from the application
     * @param {String} journalInstructionId The journal instruction unique identifier. E.g JI001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~getJournalInstructionTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JournalInstruction}
     */
    getJournalInstructionTemplate(journalInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'journalInstructionId' is set
      if (journalInstructionId === undefined || journalInstructionId === null) {
        throw new Error("Missing the required parameter 'journalInstructionId' when calling getJournalInstructionTemplate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getJournalInstructionTemplate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getJournalInstructionTemplate");
      }

      let pathParams = {
        'JournalInstructionId': journalInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JournalInstruction;
      return this.apiClient.callApi(
        '/JournalInstruction/{JournalInstructionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalInstructionTemplates operation.
     * @callback module:api/JournalsApi~getJournalInstructionTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Journal instructions templates for the application
     * Get links to all journal instruction templates for the application
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~getJournalInstructionTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getJournalInstructionTemplates(authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getJournalInstructionTemplates");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getJournalInstructionTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/JournalInstructions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalInstructionsFromEmployer operation.
     * @callback module:api/JournalsApi~getJournalInstructionsFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Journal instructions from the specified employer
     * Get links to all journal instructions for the specified employer
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~getJournalInstructionsFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getJournalInstructionsFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getJournalInstructionsFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getJournalInstructionsFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getJournalInstructionsFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/JournalInstructions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalLineFromEmployer operation.
     * @callback module:api/JournalsApi~getJournalLineFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JournalLine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified journal Line from the employer
     * Returns the specified journal Line from employer
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} journalLineId The journal line unique identifier. E.g JL001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~getJournalLineFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JournalLine}
     */
    getJournalLineFromEmployer(employerId, journalLineId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getJournalLineFromEmployer");
      }
      // verify the required parameter 'journalLineId' is set
      if (journalLineId === undefined || journalLineId === null) {
        throw new Error("Missing the required parameter 'journalLineId' when calling getJournalLineFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getJournalLineFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getJournalLineFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'JournalLineId': journalLineId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JournalLine;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/JournalLine/{JournalLineId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalLinesFromEmployee operation.
     * @callback module:api/JournalsApi~getJournalLinesFromEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the journal Lines from the specified employee
     * Get links to all journal lines for the specified employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~getJournalLinesFromEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getJournalLinesFromEmployee(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getJournalLinesFromEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getJournalLinesFromEmployee");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getJournalLinesFromEmployee");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getJournalLinesFromEmployee");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/JournalLines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalLinesFromEmployer operation.
     * @callback module:api/JournalsApi~getJournalLinesFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Journal Lines from the specified employer
     * Get links to all journal Lines for the specified employer
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~getJournalLinesFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getJournalLinesFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getJournalLinesFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getJournalLinesFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getJournalLinesFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/JournalLines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalLinesFromPayRun operation.
     * @callback module:api/JournalsApi~getJournalLinesFromPayRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the journal Lines from the specified pay run
     * Get links to all journal lines for the specified pay run
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} payScheduleId The pay schedules' unique identifier. E.g SCH001
     * @param {String} payRunId The pay runs' unique identifier. E.g. PR001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~getJournalLinesFromPayRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getJournalLinesFromPayRun(employerId, payScheduleId, payRunId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getJournalLinesFromPayRun");
      }
      // verify the required parameter 'payScheduleId' is set
      if (payScheduleId === undefined || payScheduleId === null) {
        throw new Error("Missing the required parameter 'payScheduleId' when calling getJournalLinesFromPayRun");
      }
      // verify the required parameter 'payRunId' is set
      if (payRunId === undefined || payRunId === null) {
        throw new Error("Missing the required parameter 'payRunId' when calling getJournalLinesFromPayRun");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getJournalLinesFromPayRun");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getJournalLinesFromPayRun");
      }

      let pathParams = {
        'EmployerId': employerId,
        'PayScheduleId': payScheduleId,
        'PayRunId': payRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/JournalLines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalLinesFromSubContractor operation.
     * @callback module:api/JournalsApi~getJournalLinesFromSubContractorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the journal Lines from the specified sub contractor
     * Get links to all journal lines for the specified sub contractor
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~getJournalLinesFromSubContractorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getJournalLinesFromSubContractor(employerId, subContractorId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getJournalLinesFromSubContractor");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getJournalLinesFromSubContractor");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getJournalLinesFromSubContractor");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getJournalLinesFromSubContractor");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/JournalLines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJournalInstruction operation.
     * @callback module:api/JournalsApi~postJournalInstructionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Journal Instruction
     * Creates a new Journal instruction object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~postJournalInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postJournalInstruction(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postJournalInstruction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postJournalInstruction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postJournalInstruction");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/JournalInstructions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJournalInstructionTemplate operation.
     * @callback module:api/JournalsApi~postJournalInstructionTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Journal Instruction template
     * Creates a new Journal instruction teamplte object
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~postJournalInstructionTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postJournalInstructionTemplate(authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postJournalInstructionTemplate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postJournalInstructionTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/JournalInstructions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putJournalInstruction operation.
     * @callback module:api/JournalsApi~putJournalInstructionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JournalInstruction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Journal Instruction
     * Updates the existing specified Journal instruction object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} journalInstructionId The journal instruction unique identifier. E.g JI001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~putJournalInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JournalInstruction}
     */
    putJournalInstruction(employerId, journalInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putJournalInstruction");
      }
      // verify the required parameter 'journalInstructionId' is set
      if (journalInstructionId === undefined || journalInstructionId === null) {
        throw new Error("Missing the required parameter 'journalInstructionId' when calling putJournalInstruction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putJournalInstruction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putJournalInstruction");
      }

      let pathParams = {
        'EmployerId': employerId,
        'JournalInstructionId': journalInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JournalInstruction;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/JournalInstruction/{JournalInstructionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putJournalInstructionTemplate operation.
     * @callback module:api/JournalsApi~putJournalInstructionTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JournalInstruction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Journal Instruction template
     * Updates the existing specified Journal instruction template object
     * @param {String} journalInstructionId The journal instruction unique identifier. E.g JI001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/JournalsApi~putJournalInstructionTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JournalInstruction}
     */
    putJournalInstructionTemplate(journalInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'journalInstructionId' is set
      if (journalInstructionId === undefined || journalInstructionId === null) {
        throw new Error("Missing the required parameter 'journalInstructionId' when calling putJournalInstructionTemplate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putJournalInstructionTemplate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putJournalInstructionTemplate");
      }

      let pathParams = {
        'JournalInstructionId': journalInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JournalInstruction;
      return this.apiClient.callApi(
        '/JournalInstruction/{JournalInstructionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
