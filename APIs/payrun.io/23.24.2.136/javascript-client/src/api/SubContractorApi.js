/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import Link from '../model/Link';
import LinkCollection from '../model/LinkCollection';
import SubContractor from '../model/SubContractor';

/**
* SubContractor service.
* @module api/SubContractorApi
* @version 23.24.2.136
*/
export default class SubContractorApi {

    /**
    * Constructs a new SubContractorApi. 
    * @alias module:api/SubContractorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSubContractor operation.
     * @callback module:api/SubContractorApi~deleteSubContractorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an sub contractor
     * Delete the specified sub contractor
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/SubContractorApi~deleteSubContractorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubContractor(employerId, subContractorId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteSubContractor");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling deleteSubContractor");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteSubContractor");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteSubContractor");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubContractorRevision operation.
     * @callback module:api/SubContractorApi~deleteSubContractorRevisionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an sub contractor revision matching the specified revision date.
     * Deletes the specified sub contractor revision for the matching revision date
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/SubContractorApi~deleteSubContractorRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubContractorRevision(employerId, subContractorId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteSubContractorRevision");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling deleteSubContractorRevision");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling deleteSubContractorRevision");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteSubContractorRevision");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteSubContractorRevision");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/{EffectiveDate}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubContractorRevisionByNumber operation.
     * @callback module:api/SubContractorApi~deleteSubContractorRevisionByNumberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an SubContractor revision matching the specified revision number.
     * Deletes the specified sub contractor revision for the matching revision number
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} revisionNumber The revision number. E.g. 1
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/SubContractorApi~deleteSubContractorRevisionByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubContractorRevisionByNumber(employerId, subContractorId, revisionNumber, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteSubContractorRevisionByNumber");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling deleteSubContractorRevisionByNumber");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling deleteSubContractorRevisionByNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteSubContractorRevisionByNumber");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteSubContractorRevisionByNumber");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'RevisionNumber': revisionNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Revision/{RevisionNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubContractorByEffectiveDate operation.
     * @callback module:api/SubContractorApi~getSubContractorByEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubContractor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sub contractor by effective date.
     * Returns the sub contractor's state at the specified effective date.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/SubContractorApi~getSubContractorByEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubContractor}
     */
    getSubContractorByEffectiveDate(employerId, subContractorId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getSubContractorByEffectiveDate");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getSubContractorByEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getSubContractorByEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSubContractorByEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSubContractorByEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubContractor;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubContractorFromEmployer operation.
     * @callback module:api/SubContractorApi~getSubContractorFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubContractor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sub contractor from employer
     * Gets the specified sub contractor from employer.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/SubContractorApi~getSubContractorFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubContractor}
     */
    getSubContractorFromEmployer(employerId, subContractorId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getSubContractorFromEmployer");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getSubContractorFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSubContractorFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSubContractorFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubContractor;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubContractorRevisionByNumber operation.
     * @callback module:api/SubContractorApi~getSubContractorRevisionByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubContractor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the sub contractor by revision number
     * Get the sub contractor revision matching the specified revision number
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} revisionNumber The revision number. E.g. 1
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/SubContractorApi~getSubContractorRevisionByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubContractor}
     */
    getSubContractorRevisionByNumber(employerId, subContractorId, revisionNumber, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getSubContractorRevisionByNumber");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getSubContractorRevisionByNumber");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling getSubContractorRevisionByNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSubContractorRevisionByNumber");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSubContractorRevisionByNumber");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId,
        'RevisionNumber': revisionNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubContractor;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Revision/{RevisionNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubContractorRevisions operation.
     * @callback module:api/SubContractorApi~getSubContractorRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all sub contractor revisions
     * Gets links to all the sub contractor revisions
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/SubContractorApi~getSubContractorRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getSubContractorRevisions(employerId, subContractorId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getSubContractorRevisions");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling getSubContractorRevisions");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSubContractorRevisions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSubContractorRevisions");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubContractorsByEffectiveDate operation.
     * @callback module:api/SubContractorApi~getSubContractorsByEffectiveDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sub contractors from employer at a given effective date.
     * Get links to all sub contractors for the employer on specified effective date.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {Date} effectiveDate The effective date to be applied. E.g 2016-04-06
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/SubContractorApi~getSubContractorsByEffectiveDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getSubContractorsByEffectiveDate(employerId, effectiveDate, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getSubContractorsByEffectiveDate");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getSubContractorsByEffectiveDate");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSubContractorsByEffectiveDate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSubContractorsByEffectiveDate");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EffectiveDate': effectiveDate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractors/{EffectiveDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubContractorsFromEmployer operation.
     * @callback module:api/SubContractorApi~getSubContractorsFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sub contractors from employer.
     * Get links to all sub contractors for the specified employer.
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/SubContractorApi~getSubContractorsFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getSubContractorsFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getSubContractorsFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSubContractorsFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSubContractorsFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchSubContractor operation.
     * @callback module:api/SubContractorApi~patchSubContractorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubContractor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches the sub contractor
     * Patches the specified sub contractor with the supplied values
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/SubContractor} subContractor The sub contractor object.
     * @param {module:api/SubContractorApi~patchSubContractorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubContractor}
     */
    patchSubContractor(employerId, subContractorId, authorization, apiVersion, subContractor, callback) {
      let postBody = subContractor;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling patchSubContractor");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling patchSubContractor");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling patchSubContractor");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling patchSubContractor");
      }
      // verify the required parameter 'subContractor' is set
      if (subContractor === undefined || subContractor === null) {
        throw new Error("Missing the required parameter 'subContractor' when calling patchSubContractor");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubContractor;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSubContractorIntoEmployer operation.
     * @callback module:api/SubContractorApi~postSubContractorIntoEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new sub contractor
     * Create a new sub contractor object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/SubContractor} subContractor The sub contractor object.
     * @param {module:api/SubContractorApi~postSubContractorIntoEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postSubContractorIntoEmployer(employerId, authorization, apiVersion, subContractor, callback) {
      let postBody = subContractor;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postSubContractorIntoEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postSubContractorIntoEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postSubContractorIntoEmployer");
      }
      // verify the required parameter 'subContractor' is set
      if (subContractor === undefined || subContractor === null) {
        throw new Error("Missing the required parameter 'subContractor' when calling postSubContractorIntoEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSubContractorIntoEmployer operation.
     * @callback module:api/SubContractorApi~putSubContractorIntoEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubContractor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the sub contractor
     * Updates the existing specified sub contractor object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} subContractorId The sub contractors' unique identifier. E.g SUB001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/SubContractor} subContractor The sub contractor object.
     * @param {module:api/SubContractorApi~putSubContractorIntoEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubContractor}
     */
    putSubContractorIntoEmployer(employerId, subContractorId, authorization, apiVersion, subContractor, callback) {
      let postBody = subContractor;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putSubContractorIntoEmployer");
      }
      // verify the required parameter 'subContractorId' is set
      if (subContractorId === undefined || subContractorId === null) {
        throw new Error("Missing the required parameter 'subContractorId' when calling putSubContractorIntoEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putSubContractorIntoEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putSubContractorIntoEmployer");
      }
      // verify the required parameter 'subContractor' is set
      if (subContractor === undefined || subContractor === null) {
        throw new Error("Missing the required parameter 'subContractor' when calling putSubContractorIntoEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'SubContractorId': subContractorId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubContractor;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/SubContractor/{SubContractorId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
