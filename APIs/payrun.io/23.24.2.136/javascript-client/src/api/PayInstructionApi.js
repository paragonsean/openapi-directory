/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import Link from '../model/Link';
import LinkCollection from '../model/LinkCollection';
import PayInstruction from '../model/PayInstruction';

/**
* PayInstruction service.
* @module api/PayInstructionApi
* @version 23.24.2.136
*/
export default class PayInstructionApi {

    /**
    * Constructs a new PayInstructionApi. 
    * @alias module:api/PayInstructionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePayInstruction operation.
     * @callback module:api/PayInstructionApi~deletePayInstructionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a pay instruction
     * Delete the specified pay instruction
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} payInstructionId The pay instruction unique identifier. E.g. SAL001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayInstructionApi~deletePayInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayInstruction(employerId, employeeId, payInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deletePayInstruction");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling deletePayInstruction");
      }
      // verify the required parameter 'payInstructionId' is set
      if (payInstructionId === undefined || payInstructionId === null) {
        throw new Error("Missing the required parameter 'payInstructionId' when calling deletePayInstruction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePayInstruction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deletePayInstruction");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'PayInstructionId': payInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPayInstructionTags_0 operation.
     * @callback module:api/PayInstructionApi~getAllPayInstructionTags_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all pay instruction tags
     * Gets all the pay instruction tags
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayInstructionApi~getAllPayInstructionTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getAllPayInstructionTags_0(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getAllPayInstructionTags_0");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getAllPayInstructionTags_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllPayInstructionTags_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAllPayInstructionTags_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions/Tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayInstructionFromEmployee operation.
     * @callback module:api/PayInstructionApi~getPayInstructionFromEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayInstruction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified pay instruction from the employee
     * Returns the specified pay instruction from employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} payInstructionId The pay instruction unique identifier. E.g. SAL001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayInstructionApi~getPayInstructionFromEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayInstruction}
     */
    getPayInstructionFromEmployee(employerId, employeeId, payInstructionId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayInstructionFromEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getPayInstructionFromEmployee");
      }
      // verify the required parameter 'payInstructionId' is set
      if (payInstructionId === undefined || payInstructionId === null) {
        throw new Error("Missing the required parameter 'payInstructionId' when calling getPayInstructionFromEmployee");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayInstructionFromEmployee");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayInstructionFromEmployee");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'PayInstructionId': payInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PayInstruction;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayInstructionsFromEmployee operation.
     * @callback module:api/PayInstructionApi~getPayInstructionsFromEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the pay instructions from the specified employee
     * Get links to all pay instructions for the specified employee
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayInstructionApi~getPayInstructionsFromEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPayInstructionsFromEmployee(employerId, employeeId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayInstructionsFromEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getPayInstructionsFromEmployee");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayInstructionsFromEmployee");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayInstructionsFromEmployee");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayInstructionsWithTag_0 operation.
     * @callback module:api/PayInstructionApi~getPayInstructionsWithTag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pay instructions with tag
     * Gets the pay instructions with the tag
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} tagId The tag unique identifier. E.g. MyTag
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/PayInstructionApi~getPayInstructionsWithTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getPayInstructionsWithTag_0(employerId, employeeId, tagId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getPayInstructionsWithTag_0");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getPayInstructionsWithTag_0");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getPayInstructionsWithTag_0");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPayInstructionsWithTag_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPayInstructionsWithTag_0");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'TagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions/Tag/{TagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchPayInstruction operation.
     * @callback module:api/PayInstructionApi~patchPayInstructionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayInstruction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sparse Update of a Pay Instruction
     * Patches the specified pay instruction with the supplied values
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} payInstructionId The pay instruction unique identifier. E.g. SAL001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/PayInstruction} payInstruction The pay instruction object.
     * @param {module:api/PayInstructionApi~patchPayInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayInstruction}
     */
    patchPayInstruction(employerId, employeeId, payInstructionId, authorization, apiVersion, payInstruction, callback) {
      let postBody = payInstruction;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling patchPayInstruction");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling patchPayInstruction");
      }
      // verify the required parameter 'payInstructionId' is set
      if (payInstructionId === undefined || payInstructionId === null) {
        throw new Error("Missing the required parameter 'payInstructionId' when calling patchPayInstruction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling patchPayInstruction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling patchPayInstruction");
      }
      // verify the required parameter 'payInstruction' is set
      if (payInstruction === undefined || payInstruction === null) {
        throw new Error("Missing the required parameter 'payInstruction' when calling patchPayInstruction");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'PayInstructionId': payInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayInstruction;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayInstruction operation.
     * @callback module:api/PayInstructionApi~postPayInstructionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Pay Instruction
     * Creates a new pay instruction object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/PayInstruction} payInstruction The pay instruction object.
     * @param {module:api/PayInstructionApi~postPayInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postPayInstruction(employerId, employeeId, authorization, apiVersion, payInstruction, callback) {
      let postBody = payInstruction;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postPayInstruction");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling postPayInstruction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postPayInstruction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postPayInstruction");
      }
      // verify the required parameter 'payInstruction' is set
      if (payInstruction === undefined || payInstruction === null) {
        throw new Error("Missing the required parameter 'payInstruction' when calling postPayInstruction");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPayInstruction operation.
     * @callback module:api/PayInstructionApi~putPayInstructionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayInstruction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Pay Instruction
     * Updates the existing specified pay instruction object
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} employeeId The employees' unique identifier. E.g EE001
     * @param {String} payInstructionId The pay instruction unique identifier. E.g. SAL001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:model/PayInstruction} payInstruction The pay instruction object.
     * @param {module:api/PayInstructionApi~putPayInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayInstruction}
     */
    putPayInstruction(employerId, employeeId, payInstructionId, authorization, apiVersion, payInstruction, callback) {
      let postBody = payInstruction;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putPayInstruction");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling putPayInstruction");
      }
      // verify the required parameter 'payInstructionId' is set
      if (payInstructionId === undefined || payInstructionId === null) {
        throw new Error("Missing the required parameter 'payInstructionId' when calling putPayInstruction");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putPayInstruction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putPayInstruction");
      }
      // verify the required parameter 'payInstruction' is set
      if (payInstruction === undefined || payInstruction === null) {
        throw new Error("Missing the required parameter 'payInstruction' when calling putPayInstruction");
      }

      let pathParams = {
        'EmployerId': employerId,
        'EmployeeId': employeeId,
        'PayInstructionId': payInstructionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayInstruction;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
