/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DpsMessage from '../model/DpsMessage';
import ErrorModel from '../model/ErrorModel';
import Link from '../model/Link';
import LinkCollection from '../model/LinkCollection';

/**
* DpsMessage service.
* @module api/DpsMessageApi
* @version 23.24.2.136
*/
export default class DpsMessageApi {

    /**
    * Constructs a new DpsMessageApi. 
    * @alias module:api/DpsMessageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteDpsMessage operation.
     * @callback module:api/DpsMessageApi~deleteDpsMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the DPS message
     * Deletes the DPS message
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} dpsMessageId The DPS message unique identifier. E.g. DPS001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/DpsMessageApi~deleteDpsMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDpsMessage(employerId, dpsMessageId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling deleteDpsMessage");
      }
      // verify the required parameter 'dpsMessageId' is set
      if (dpsMessageId === undefined || dpsMessageId === null) {
        throw new Error("Missing the required parameter 'dpsMessageId' when calling deleteDpsMessage");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteDpsMessage");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteDpsMessage");
      }

      let pathParams = {
        'EmployerId': employerId,
        'DpsMessageId': dpsMessageId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/DpsMessage/{DpsMessageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDpsMessageFromEmployer operation.
     * @callback module:api/DpsMessageApi~getDpsMessageFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DpsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the DPS message
     * Gets the DPS message
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} dpsMessageId The DPS message unique identifier. E.g. DPS001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/DpsMessageApi~getDpsMessageFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DpsMessage}
     */
    getDpsMessageFromEmployer(employerId, dpsMessageId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getDpsMessageFromEmployer");
      }
      // verify the required parameter 'dpsMessageId' is set
      if (dpsMessageId === undefined || dpsMessageId === null) {
        throw new Error("Missing the required parameter 'dpsMessageId' when calling getDpsMessageFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getDpsMessageFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDpsMessageFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId,
        'DpsMessageId': dpsMessageId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DpsMessage;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/DpsMessage/{DpsMessageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDpsMessagesFromEmployer operation.
     * @callback module:api/DpsMessageApi~getDpsMessagesFromEmployerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the DPS messages
     * Gets the DPS message links
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/DpsMessageApi~getDpsMessagesFromEmployerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCollection}
     */
    getDpsMessagesFromEmployer(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling getDpsMessagesFromEmployer");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getDpsMessagesFromEmployer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDpsMessagesFromEmployer");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkCollection;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/DpsMessages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchDpsMessage operation.
     * @callback module:api/DpsMessageApi~patchDpsMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DpsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches the DPS message
     * Patches the specified DPS message with the supplied values
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} dpsMessageId The DPS message unique identifier. E.g. DPS001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/DpsMessageApi~patchDpsMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DpsMessage}
     */
    patchDpsMessage(employerId, dpsMessageId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling patchDpsMessage");
      }
      // verify the required parameter 'dpsMessageId' is set
      if (dpsMessageId === undefined || dpsMessageId === null) {
        throw new Error("Missing the required parameter 'dpsMessageId' when calling patchDpsMessage");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling patchDpsMessage");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling patchDpsMessage");
      }

      let pathParams = {
        'EmployerId': employerId,
        'DpsMessageId': dpsMessageId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DpsMessage;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/DpsMessage/{DpsMessageId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDpsMessage operation.
     * @callback module:api/DpsMessageApi~postDpsMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Link} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Posta the DPS message
     * Insert new DPS message
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/DpsMessageApi~postDpsMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Link}
     */
    postDpsMessage(employerId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling postDpsMessage");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postDpsMessage");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postDpsMessage");
      }

      let pathParams = {
        'EmployerId': employerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/DpsMessages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDpsMessage operation.
     * @callback module:api/DpsMessageApi~putDpsMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DpsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Puts the DPS message
     * Puts the DPS message
     * @param {String} employerId The employers' unique identifier. E.g ER001
     * @param {String} dpsMessageId The DPS message unique identifier. E.g. DPS001
     * @param {String} authorization The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.
     * @param {String} apiVersion The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.
     * @param {module:api/DpsMessageApi~putDpsMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DpsMessage}
     */
    putDpsMessage(employerId, dpsMessageId, authorization, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'employerId' is set
      if (employerId === undefined || employerId === null) {
        throw new Error("Missing the required parameter 'employerId' when calling putDpsMessage");
      }
      // verify the required parameter 'dpsMessageId' is set
      if (dpsMessageId === undefined || dpsMessageId === null) {
        throw new Error("Missing the required parameter 'dpsMessageId' when calling putDpsMessage");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putDpsMessage");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putDpsMessage");
      }

      let pathParams = {
        'EmployerId': employerId,
        'DpsMessageId': dpsMessageId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Api-Version': apiVersion
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DpsMessage;
      return this.apiClient.callApi(
        '/Employer/{EmployerId}/DpsMessage/{DpsMessageId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
