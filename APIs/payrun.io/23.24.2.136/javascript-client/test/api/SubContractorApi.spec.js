/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PayRunIo);
  }
}(this, function(expect, PayRunIo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PayRunIo.SubContractorApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SubContractorApi', function() {
    describe('deleteSubContractor', function() {
      it('should call deleteSubContractor successfully', function(done) {
        //uncomment below and update the code to test deleteSubContractor
        //instance.deleteSubContractor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSubContractorRevision', function() {
      it('should call deleteSubContractorRevision successfully', function(done) {
        //uncomment below and update the code to test deleteSubContractorRevision
        //instance.deleteSubContractorRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSubContractorRevisionByNumber', function() {
      it('should call deleteSubContractorRevisionByNumber successfully', function(done) {
        //uncomment below and update the code to test deleteSubContractorRevisionByNumber
        //instance.deleteSubContractorRevisionByNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubContractorByEffectiveDate', function() {
      it('should call getSubContractorByEffectiveDate successfully', function(done) {
        //uncomment below and update the code to test getSubContractorByEffectiveDate
        //instance.getSubContractorByEffectiveDate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubContractorFromEmployer', function() {
      it('should call getSubContractorFromEmployer successfully', function(done) {
        //uncomment below and update the code to test getSubContractorFromEmployer
        //instance.getSubContractorFromEmployer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubContractorRevisionByNumber', function() {
      it('should call getSubContractorRevisionByNumber successfully', function(done) {
        //uncomment below and update the code to test getSubContractorRevisionByNumber
        //instance.getSubContractorRevisionByNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubContractorRevisions', function() {
      it('should call getSubContractorRevisions successfully', function(done) {
        //uncomment below and update the code to test getSubContractorRevisions
        //instance.getSubContractorRevisions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubContractorsByEffectiveDate', function() {
      it('should call getSubContractorsByEffectiveDate successfully', function(done) {
        //uncomment below and update the code to test getSubContractorsByEffectiveDate
        //instance.getSubContractorsByEffectiveDate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubContractorsFromEmployer', function() {
      it('should call getSubContractorsFromEmployer successfully', function(done) {
        //uncomment below and update the code to test getSubContractorsFromEmployer
        //instance.getSubContractorsFromEmployer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchSubContractor', function() {
      it('should call patchSubContractor successfully', function(done) {
        //uncomment below and update the code to test patchSubContractor
        //instance.patchSubContractor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postSubContractorIntoEmployer', function() {
      it('should call postSubContractorIntoEmployer successfully', function(done) {
        //uncomment below and update the code to test postSubContractorIntoEmployer
        //instance.postSubContractorIntoEmployer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSubContractorIntoEmployer', function() {
      it('should call putSubContractorIntoEmployer successfully', function(done) {
        //uncomment below and update the code to test putSubContractorIntoEmployer
        //instance.putSubContractorIntoEmployer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
