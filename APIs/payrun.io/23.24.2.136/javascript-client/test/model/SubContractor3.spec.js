/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PayRunIo);
  }
}(this, function(expect, PayRunIo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PayRunIo.SubContractor3();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SubContractor3', function() {
    it('should create an instance of SubContractor3', function() {
      // uncomment below and update the code to test SubContractor3
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be.a(PayRunIo.SubContractor3);
    });

    it('should have the property address (base name: "Address")', function() {
      // uncomment below and update the code to test the property address
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property bankAccount (base name: "BankAccount")', function() {
      // uncomment below and update the code to test the property bankAccount
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property businessType (base name: "BusinessType")', function() {
      // uncomment below and update the code to test the property businessType
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property companyName (base name: "CompanyName")', function() {
      // uncomment below and update the code to test the property companyName
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property companyRegistrationNumber (base name: "CompanyRegistrationNumber")', function() {
      // uncomment below and update the code to test the property companyRegistrationNumber
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property deactivated (base name: "Deactivated")', function() {
      // uncomment below and update the code to test the property deactivated
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property effectiveDate (base name: "EffectiveDate")', function() {
      // uncomment below and update the code to test the property effectiveDate
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "FirstName")', function() {
      // uncomment below and update the code to test the property firstName
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property initials (base name: "Initials")', function() {
      // uncomment below and update the code to test the property initials
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "LastName")', function() {
      // uncomment below and update the code to test the property lastName
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property metaData (base name: "MetaData")', function() {
      // uncomment below and update the code to test the property metaData
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property middleName (base name: "MiddleName")', function() {
      // uncomment below and update the code to test the property middleName
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property nextRevisionDate (base name: "NextRevisionDate")', function() {
      // uncomment below and update the code to test the property nextRevisionDate
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property niNumber (base name: "NiNumber")', function() {
      // uncomment below and update the code to test the property niNumber
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property partnershipName (base name: "PartnershipName")', function() {
      // uncomment below and update the code to test the property partnershipName
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property partnershipUniqueTaxReference (base name: "PartnershipUniqueTaxReference")', function() {
      // uncomment below and update the code to test the property partnershipUniqueTaxReference
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property payFrequency (base name: "PayFrequency")', function() {
      // uncomment below and update the code to test the property payFrequency
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property paymentMethod (base name: "PaymentMethod")', function() {
      // uncomment below and update the code to test the property paymentMethod
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "Region")', function() {
      // uncomment below and update the code to test the property region
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property revision (base name: "Revision")', function() {
      // uncomment below and update the code to test the property revision
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property taxationStatus (base name: "TaxationStatus")', function() {
      // uncomment below and update the code to test the property taxationStatus
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property telephone (base name: "Telephone")', function() {
      // uncomment below and update the code to test the property telephone
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property territory (base name: "Territory")', function() {
      // uncomment below and update the code to test the property territory
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "Title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property tradingName (base name: "TradingName")', function() {
      // uncomment below and update the code to test the property tradingName
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property uniqueTaxReference (base name: "UniqueTaxReference")', function() {
      // uncomment below and update the code to test the property uniqueTaxReference
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property vatRegistered (base name: "VatRegistered")', function() {
      // uncomment below and update the code to test the property vatRegistered
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property vatRegistrationNumber (base name: "VatRegistrationNumber")', function() {
      // uncomment below and update the code to test the property vatRegistrationNumber
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property verificationDate (base name: "VerificationDate")', function() {
      // uncomment below and update the code to test the property verificationDate
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property verificationNumber (base name: "VerificationNumber")', function() {
      // uncomment below and update the code to test the property verificationNumber
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

    it('should have the property worksNumber (base name: "WorksNumber")', function() {
      // uncomment below and update the code to test the property worksNumber
      //var instance = new PayRunIo.SubContractor3();
      //expect(instance).to.be();
    });

  });

}));
