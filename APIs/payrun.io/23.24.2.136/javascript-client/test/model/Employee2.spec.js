/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PayRunIo);
  }
}(this, function(expect, PayRunIo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PayRunIo.Employee2();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Employee2', function() {
    it('should create an instance of Employee2', function() {
      // uncomment below and update the code to test Employee2
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be.a(PayRunIo.Employee2);
    });

    it('should have the property aEAssessmentOverride (base name: "AEAssessmentOverride")', function() {
      // uncomment below and update the code to test the property aEAssessmentOverride
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property aEAssessmentOverrideDate (base name: "AEAssessmentOverrideDate")', function() {
      // uncomment below and update the code to test the property aEAssessmentOverrideDate
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property aEExclusionReasonCode (base name: "AEExclusionReasonCode")', function() {
      // uncomment below and update the code to test the property aEExclusionReasonCode
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property aEPostponementDate (base name: "AEPostponementDate")', function() {
      // uncomment below and update the code to test the property aEPostponementDate
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property address (base name: "Address")', function() {
      // uncomment below and update the code to test the property address
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property bankAccount (base name: "BankAccount")', function() {
      // uncomment below and update the code to test the property bankAccount
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "Code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property dateOfBirth (base name: "DateOfBirth")', function() {
      // uncomment below and update the code to test the property dateOfBirth
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property deactivated (base name: "Deactivated")', function() {
      // uncomment below and update the code to test the property deactivated
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property directorshipAppointmentDate (base name: "DirectorshipAppointmentDate")', function() {
      // uncomment below and update the code to test the property directorshipAppointmentDate
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property eEACitizen (base name: "EEACitizen")', function() {
      // uncomment below and update the code to test the property eEACitizen
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property ePM6 (base name: "EPM6")', function() {
      // uncomment below and update the code to test the property ePM6
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property effectiveDate (base name: "EffectiveDate")', function() {
      // uncomment below and update the code to test the property effectiveDate
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property employeePartner (base name: "EmployeePartner")', function() {
      // uncomment below and update the code to test the property employeePartner
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "FirstName")', function() {
      // uncomment below and update the code to test the property firstName
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property gender (base name: "Gender")', function() {
      // uncomment below and update the code to test the property gender
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property hoursPerWeek (base name: "HoursPerWeek")', function() {
      // uncomment below and update the code to test the property hoursPerWeek
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property initials (base name: "Initials")', function() {
      // uncomment below and update the code to test the property initials
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property irregularEmployment (base name: "IrregularEmployment")', function() {
      // uncomment below and update the code to test the property irregularEmployment
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property isAgencyWorker (base name: "IsAgencyWorker")', function() {
      // uncomment below and update the code to test the property isAgencyWorker
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "LastName")', function() {
      // uncomment below and update the code to test the property lastName
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property leaverReason (base name: "LeaverReason")', function() {
      // uncomment below and update the code to test the property leaverReason
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property leavingDate (base name: "LeavingDate")', function() {
      // uncomment below and update the code to test the property leavingDate
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property maritalStatus (base name: "MaritalStatus")', function() {
      // uncomment below and update the code to test the property maritalStatus
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property metaData (base name: "MetaData")', function() {
      // uncomment below and update the code to test the property metaData
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property middleName (base name: "MiddleName")', function() {
      // uncomment below and update the code to test the property middleName
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property nextRevisionDate (base name: "NextRevisionDate")', function() {
      // uncomment below and update the code to test the property nextRevisionDate
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property niNumber (base name: "NiNumber")', function() {
      // uncomment below and update the code to test the property niNumber
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property nicLiability (base name: "NicLiability")', function() {
      // uncomment below and update the code to test the property nicLiability
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property offPayrollWorker (base name: "OffPayrollWorker")', function() {
      // uncomment below and update the code to test the property offPayrollWorker
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property onStrike (base name: "OnStrike")', function() {
      // uncomment below and update the code to test the property onStrike
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property p45IssuedDate (base name: "P45IssuedDate")', function() {
      // uncomment below and update the code to test the property p45IssuedDate
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property passportNumber (base name: "PassportNumber")', function() {
      // uncomment below and update the code to test the property passportNumber
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property paySchedule (base name: "PaySchedule")', function() {
      // uncomment below and update the code to test the property paySchedule
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property paymentMethod (base name: "PaymentMethod")', function() {
      // uncomment below and update the code to test the property paymentMethod
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property paymentToANonIndividual (base name: "PaymentToANonIndividual")', function() {
      // uncomment below and update the code to test the property paymentToANonIndividual
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "Region")', function() {
      // uncomment below and update the code to test the property region
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property revision (base name: "Revision")', function() {
      // uncomment below and update the code to test the property revision
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property ruleExclusions (base name: "RuleExclusions")', function() {
      // uncomment below and update the code to test the property ruleExclusions
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property seconded (base name: "Seconded")', function() {
      // uncomment below and update the code to test the property seconded
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "StartDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property starterDeclaration (base name: "StarterDeclaration")', function() {
      // uncomment below and update the code to test the property starterDeclaration
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property territory (base name: "Territory")', function() {
      // uncomment below and update the code to test the property territory
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "Title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property veteranPeriodStartDate (base name: "VeteranPeriodStartDate")', function() {
      // uncomment below and update the code to test the property veteranPeriodStartDate
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

    it('should have the property workingWeek (base name: "WorkingWeek")', function() {
      // uncomment below and update the code to test the property workingWeek
      //var instance = new PayRunIo.Employee2();
      //expect(instance).to.be();
    });

  });

}));
