/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGroup_Group_inner.h
 *
 * 
 */

#ifndef OAIGroup_Group_inner_H
#define OAIGroup_Group_inner_H

#include <QJsonObject>

#include "OAICondition_inner.h"
#include "OAIFilter_inner.h"
#include "OAIOrder_inner.h"
#include "OAIOutput_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICondition_inner;
class OAIFilter_inner;
class OAIOrder_inner;
class OAIOutput_inner;

class OAIGroup_Group_inner : public OAIObject {
public:
    OAIGroup_Group_inner();
    OAIGroup_Group_inner(QString json);
    ~OAIGroup_Group_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getGroupName() const;
    void setGroupName(const QString &group_name);
    bool is_group_name_Set() const;
    bool is_group_name_Valid() const;

    QString getItemName() const;
    void setItemName(const QString &item_name);
    bool is_item_name_Set() const;
    bool is_item_name_Valid() const;

    QString getLoopExpression() const;
    void setLoopExpression(const QString &loop_expression);
    bool is_loop_expression_Set() const;
    bool is_loop_expression_Valid() const;

    QString getPredicate() const;
    void setPredicate(const QString &predicate);
    bool is_predicate_Set() const;
    bool is_predicate_Valid() const;

    QString getSelector() const;
    void setSelector(const QString &selector);
    bool is_selector_Set() const;
    bool is_selector_Valid() const;

    QString getUniqueKeyVariable() const;
    void setUniqueKeyVariable(const QString &unique_key_variable);
    bool is_unique_key_variable_Set() const;
    bool is_unique_key_variable_Valid() const;

    QList<OAICondition_inner> getCondition() const;
    void setCondition(const QList<OAICondition_inner> &condition);
    bool is_condition_Set() const;
    bool is_condition_Valid() const;

    QList<OAIFilter_inner> getFilter() const;
    void setFilter(const QList<OAIFilter_inner> &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    QList<OAIOrder_inner> getOrder() const;
    void setOrder(const QList<OAIOrder_inner> &order);
    bool is_order_Set() const;
    bool is_order_Valid() const;

    QList<OAIOutput_inner> getOutput() const;
    void setOutput(const QList<OAIOutput_inner> &output);
    bool is_output_Set() const;
    bool is_output_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_group_name;
    bool m_group_name_isSet;
    bool m_group_name_isValid;

    QString m_item_name;
    bool m_item_name_isSet;
    bool m_item_name_isValid;

    QString m_loop_expression;
    bool m_loop_expression_isSet;
    bool m_loop_expression_isValid;

    QString m_predicate;
    bool m_predicate_isSet;
    bool m_predicate_isValid;

    QString m_selector;
    bool m_selector_isSet;
    bool m_selector_isValid;

    QString m_unique_key_variable;
    bool m_unique_key_variable_isSet;
    bool m_unique_key_variable_isValid;

    QList<OAICondition_inner> m_condition;
    bool m_condition_isSet;
    bool m_condition_isValid;

    QList<OAIFilter_inner> m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    QList<OAIOrder_inner> m_order;
    bool m_order_isSet;
    bool m_order_isValid;

    QList<OAIOutput_inner> m_output;
    bool m_output_isSet;
    bool m_output_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGroup_Group_inner)

#endif // OAIGroup_Group_inner_H
