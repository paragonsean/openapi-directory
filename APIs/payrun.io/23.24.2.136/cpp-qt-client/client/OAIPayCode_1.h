/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPayCode_1.h
 *
 * 
 */

#ifndef OAIPayCode_1_H
#define OAIPayCode_1_H

#include <QJsonObject>

#include "OAINominalCode_3.h"
#include "OAIObject.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINominalCode_3;

class OAIPayCode_1 : public OAIObject {
public:
    OAIPayCode_1();
    OAIPayCode_1(QString json);
    ~OAIPayCode_1() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBenefit() const;
    void setBenefit(const bool &benefit);
    bool is_benefit_Set() const;
    bool is_benefit_Valid() const;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDate getEffectiveDate() const;
    void setEffectiveDate(const QDate &effective_date);
    bool is_effective_date_Set() const;
    bool is_effective_date_Valid() const;

    OAIObject getMetaData() const;
    void setMetaData(const OAIObject &meta_data);
    bool is_meta_data_Set() const;
    bool is_meta_data_Valid() const;

    QDate getNextRevisionDate() const;
    void setNextRevisionDate(const QDate &next_revision_date);
    bool is_next_revision_date_Set() const;
    bool is_next_revision_date_Valid() const;

    bool isNiable() const;
    void setNiable(const bool &niable);
    bool is_niable_Set() const;
    bool is_niable_Valid() const;

    OAINominalCode_3 getNominalCode() const;
    void setNominalCode(const OAINominalCode_3 &nominal_code);
    bool is_nominal_code_Set() const;
    bool is_nominal_code_Valid() const;

    bool isNonArrestable() const;
    void setNonArrestable(const bool &non_arrestable);
    bool is_non_arrestable_Set() const;
    bool is_non_arrestable_Valid() const;

    bool isNotional() const;
    void setNotional(const bool &notional);
    bool is_notional_Set() const;
    bool is_notional_Valid() const;

    bool isReadonly() const;
    void setReadonly(const bool &readonly);
    bool is_readonly_Set() const;
    bool is_readonly_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    qint32 getRevision() const;
    void setRevision(const qint32 &revision);
    bool is_revision_Set() const;
    bool is_revision_Valid() const;

    bool isTaxable() const;
    void setTaxable(const bool &taxable);
    bool is_taxable_Set() const;
    bool is_taxable_Valid() const;

    QString getTerritory() const;
    void setTerritory(const QString &territory);
    bool is_territory_Set() const;
    bool is_territory_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_benefit;
    bool m_benefit_isSet;
    bool m_benefit_isValid;

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDate m_effective_date;
    bool m_effective_date_isSet;
    bool m_effective_date_isValid;

    OAIObject m_meta_data;
    bool m_meta_data_isSet;
    bool m_meta_data_isValid;

    QDate m_next_revision_date;
    bool m_next_revision_date_isSet;
    bool m_next_revision_date_isValid;

    bool m_niable;
    bool m_niable_isSet;
    bool m_niable_isValid;

    OAINominalCode_3 m_nominal_code;
    bool m_nominal_code_isSet;
    bool m_nominal_code_isValid;

    bool m_non_arrestable;
    bool m_non_arrestable_isSet;
    bool m_non_arrestable_isValid;

    bool m_notional;
    bool m_notional_isSet;
    bool m_notional_isValid;

    bool m_readonly;
    bool m_readonly_isSet;
    bool m_readonly_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    qint32 m_revision;
    bool m_revision_isSet;
    bool m_revision_isValid;

    bool m_taxable;
    bool m_taxable_isSet;
    bool m_taxable_isValid;

    QString m_territory;
    bool m_territory_isSet;
    bool m_territory_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPayCode_1)

#endif // OAIPayCode_1_H
