/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayRun_3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayRun_3::OAIPayRun_3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayRun_3::OAIPayRun_3() {
    this->initializeModel();
}

OAIPayRun_3::~OAIPayRun_3() {}

void OAIPayRun_3::initializeModel() {

    m_executed_isSet = false;
    m_executed_isValid = false;

    m_is_supplementary_isSet = false;
    m_is_supplementary_isValid = false;

    m_pay_frequency_isSet = false;
    m_pay_frequency_isValid = false;

    m_pay_schedule_isSet = false;
    m_pay_schedule_isValid = false;

    m_payment_date_isSet = false;
    m_payment_date_isValid = false;

    m_period_end_isSet = false;
    m_period_end_isValid = false;

    m_period_start_isSet = false;
    m_period_start_isValid = false;

    m_proceeding_pay_run_isSet = false;
    m_proceeding_pay_run_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_tax_period_isSet = false;
    m_tax_period_isValid = false;

    m_tax_year_isSet = false;
    m_tax_year_isValid = false;
}

void OAIPayRun_3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayRun_3::fromJsonObject(QJsonObject json) {

    m_executed_isValid = ::OpenAPI::fromJsonValue(m_executed, json[QString("Executed")]);
    m_executed_isSet = !json[QString("Executed")].isNull() && m_executed_isValid;

    m_is_supplementary_isValid = ::OpenAPI::fromJsonValue(m_is_supplementary, json[QString("IsSupplementary")]);
    m_is_supplementary_isSet = !json[QString("IsSupplementary")].isNull() && m_is_supplementary_isValid;

    m_pay_frequency_isValid = ::OpenAPI::fromJsonValue(m_pay_frequency, json[QString("PayFrequency")]);
    m_pay_frequency_isSet = !json[QString("PayFrequency")].isNull() && m_pay_frequency_isValid;

    m_pay_schedule_isValid = ::OpenAPI::fromJsonValue(m_pay_schedule, json[QString("PaySchedule")]);
    m_pay_schedule_isSet = !json[QString("PaySchedule")].isNull() && m_pay_schedule_isValid;

    m_payment_date_isValid = ::OpenAPI::fromJsonValue(m_payment_date, json[QString("PaymentDate")]);
    m_payment_date_isSet = !json[QString("PaymentDate")].isNull() && m_payment_date_isValid;

    m_period_end_isValid = ::OpenAPI::fromJsonValue(m_period_end, json[QString("PeriodEnd")]);
    m_period_end_isSet = !json[QString("PeriodEnd")].isNull() && m_period_end_isValid;

    m_period_start_isValid = ::OpenAPI::fromJsonValue(m_period_start, json[QString("PeriodStart")]);
    m_period_start_isSet = !json[QString("PeriodStart")].isNull() && m_period_start_isValid;

    m_proceeding_pay_run_isValid = ::OpenAPI::fromJsonValue(m_proceeding_pay_run, json[QString("ProceedingPayRun")]);
    m_proceeding_pay_run_isSet = !json[QString("ProceedingPayRun")].isNull() && m_proceeding_pay_run_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("Sequence")]);
    m_sequence_isSet = !json[QString("Sequence")].isNull() && m_sequence_isValid;

    m_tax_period_isValid = ::OpenAPI::fromJsonValue(m_tax_period, json[QString("TaxPeriod")]);
    m_tax_period_isSet = !json[QString("TaxPeriod")].isNull() && m_tax_period_isValid;

    m_tax_year_isValid = ::OpenAPI::fromJsonValue(m_tax_year, json[QString("TaxYear")]);
    m_tax_year_isSet = !json[QString("TaxYear")].isNull() && m_tax_year_isValid;
}

QString OAIPayRun_3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayRun_3::asJsonObject() const {
    QJsonObject obj;
    if (m_executed_isSet) {
        obj.insert(QString("Executed"), ::OpenAPI::toJsonValue(m_executed));
    }
    if (m_is_supplementary_isSet) {
        obj.insert(QString("IsSupplementary"), ::OpenAPI::toJsonValue(m_is_supplementary));
    }
    if (m_pay_frequency_isSet) {
        obj.insert(QString("PayFrequency"), ::OpenAPI::toJsonValue(m_pay_frequency));
    }
    if (m_pay_schedule.isSet()) {
        obj.insert(QString("PaySchedule"), ::OpenAPI::toJsonValue(m_pay_schedule));
    }
    if (m_payment_date_isSet) {
        obj.insert(QString("PaymentDate"), ::OpenAPI::toJsonValue(m_payment_date));
    }
    if (m_period_end_isSet) {
        obj.insert(QString("PeriodEnd"), ::OpenAPI::toJsonValue(m_period_end));
    }
    if (m_period_start_isSet) {
        obj.insert(QString("PeriodStart"), ::OpenAPI::toJsonValue(m_period_start));
    }
    if (m_proceeding_pay_run.isSet()) {
        obj.insert(QString("ProceedingPayRun"), ::OpenAPI::toJsonValue(m_proceeding_pay_run));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("Sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_tax_period_isSet) {
        obj.insert(QString("TaxPeriod"), ::OpenAPI::toJsonValue(m_tax_period));
    }
    if (m_tax_year_isSet) {
        obj.insert(QString("TaxYear"), ::OpenAPI::toJsonValue(m_tax_year));
    }
    return obj;
}

QDateTime OAIPayRun_3::getExecuted() const {
    return m_executed;
}
void OAIPayRun_3::setExecuted(const QDateTime &executed) {
    m_executed = executed;
    m_executed_isSet = true;
}

bool OAIPayRun_3::is_executed_Set() const{
    return m_executed_isSet;
}

bool OAIPayRun_3::is_executed_Valid() const{
    return m_executed_isValid;
}

bool OAIPayRun_3::isIsSupplementary() const {
    return m_is_supplementary;
}
void OAIPayRun_3::setIsSupplementary(const bool &is_supplementary) {
    m_is_supplementary = is_supplementary;
    m_is_supplementary_isSet = true;
}

bool OAIPayRun_3::is_is_supplementary_Set() const{
    return m_is_supplementary_isSet;
}

bool OAIPayRun_3::is_is_supplementary_Valid() const{
    return m_is_supplementary_isValid;
}

QString OAIPayRun_3::getPayFrequency() const {
    return m_pay_frequency;
}
void OAIPayRun_3::setPayFrequency(const QString &pay_frequency) {
    m_pay_frequency = pay_frequency;
    m_pay_frequency_isSet = true;
}

bool OAIPayRun_3::is_pay_frequency_Set() const{
    return m_pay_frequency_isSet;
}

bool OAIPayRun_3::is_pay_frequency_Valid() const{
    return m_pay_frequency_isValid;
}

OAIPaySchedule_2 OAIPayRun_3::getPaySchedule() const {
    return m_pay_schedule;
}
void OAIPayRun_3::setPaySchedule(const OAIPaySchedule_2 &pay_schedule) {
    m_pay_schedule = pay_schedule;
    m_pay_schedule_isSet = true;
}

bool OAIPayRun_3::is_pay_schedule_Set() const{
    return m_pay_schedule_isSet;
}

bool OAIPayRun_3::is_pay_schedule_Valid() const{
    return m_pay_schedule_isValid;
}

QDate OAIPayRun_3::getPaymentDate() const {
    return m_payment_date;
}
void OAIPayRun_3::setPaymentDate(const QDate &payment_date) {
    m_payment_date = payment_date;
    m_payment_date_isSet = true;
}

bool OAIPayRun_3::is_payment_date_Set() const{
    return m_payment_date_isSet;
}

bool OAIPayRun_3::is_payment_date_Valid() const{
    return m_payment_date_isValid;
}

QDate OAIPayRun_3::getPeriodEnd() const {
    return m_period_end;
}
void OAIPayRun_3::setPeriodEnd(const QDate &period_end) {
    m_period_end = period_end;
    m_period_end_isSet = true;
}

bool OAIPayRun_3::is_period_end_Set() const{
    return m_period_end_isSet;
}

bool OAIPayRun_3::is_period_end_Valid() const{
    return m_period_end_isValid;
}

QDate OAIPayRun_3::getPeriodStart() const {
    return m_period_start;
}
void OAIPayRun_3::setPeriodStart(const QDate &period_start) {
    m_period_start = period_start;
    m_period_start_isSet = true;
}

bool OAIPayRun_3::is_period_start_Set() const{
    return m_period_start_isSet;
}

bool OAIPayRun_3::is_period_start_Valid() const{
    return m_period_start_isValid;
}

OAIProceedingPayRun OAIPayRun_3::getProceedingPayRun() const {
    return m_proceeding_pay_run;
}
void OAIPayRun_3::setProceedingPayRun(const OAIProceedingPayRun &proceeding_pay_run) {
    m_proceeding_pay_run = proceeding_pay_run;
    m_proceeding_pay_run_isSet = true;
}

bool OAIPayRun_3::is_proceeding_pay_run_Set() const{
    return m_proceeding_pay_run_isSet;
}

bool OAIPayRun_3::is_proceeding_pay_run_Valid() const{
    return m_proceeding_pay_run_isValid;
}

qint32 OAIPayRun_3::getSequence() const {
    return m_sequence;
}
void OAIPayRun_3::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIPayRun_3::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIPayRun_3::is_sequence_Valid() const{
    return m_sequence_isValid;
}

qint32 OAIPayRun_3::getTaxPeriod() const {
    return m_tax_period;
}
void OAIPayRun_3::setTaxPeriod(const qint32 &tax_period) {
    m_tax_period = tax_period;
    m_tax_period_isSet = true;
}

bool OAIPayRun_3::is_tax_period_Set() const{
    return m_tax_period_isSet;
}

bool OAIPayRun_3::is_tax_period_Valid() const{
    return m_tax_period_isValid;
}

qint32 OAIPayRun_3::getTaxYear() const {
    return m_tax_year;
}
void OAIPayRun_3::setTaxYear(const qint32 &tax_year) {
    m_tax_year = tax_year;
    m_tax_year_isSet = true;
}

bool OAIPayRun_3::is_tax_year_Set() const{
    return m_tax_year_isSet;
}

bool OAIPayRun_3::is_tax_year_Valid() const{
    return m_tax_year_isValid;
}

bool OAIPayRun_3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_executed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_supplementary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proceeding_pay_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayRun_3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
