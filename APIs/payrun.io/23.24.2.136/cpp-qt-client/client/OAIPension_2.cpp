/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPension_2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPension_2::OAIPension_2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPension_2::OAIPension_2() {
    this->initializeModel();
}

OAIPension_2::~OAIPension_2() {}

void OAIPension_2::initializeModel() {

    m_ae_compatible_isSet = false;
    m_ae_compatible_isValid = false;

    m_certification_isSet = false;
    m_certification_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_contribution_deduction_day_isSet = false;
    m_contribution_deduction_day_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_employee_contribution_cash_isSet = false;
    m_employee_contribution_cash_isValid = false;

    m_employee_contribution_percent_isSet = false;
    m_employee_contribution_percent_isValid = false;

    m_employer_contribution_cash_isSet = false;
    m_employer_contribution_cash_isValid = false;

    m_employer_contribution_percent_isSet = false;
    m_employer_contribution_percent_isValid = false;

    m_employer_ni_saving_isSet = false;
    m_employer_ni_saving_isValid = false;

    m_employer_ni_saving_percentage_isSet = false;
    m_employer_ni_saving_percentage_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_lower_threshold_isSet = false;
    m_lower_threshold_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_next_revision_date_isSet = false;
    m_next_revision_date_isValid = false;

    m_pensionable_pay_codes_isSet = false;
    m_pensionable_pay_codes_isValid = false;

    m_pro_rata_method_isSet = false;
    m_pro_rata_method_isValid = false;

    m_provider_employer_ref_isSet = false;
    m_provider_employer_ref_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;

    m_qualifying_pay_codes_isSet = false;
    m_qualifying_pay_codes_isValid = false;

    m_ras_rounding_override_isSet = false;
    m_ras_rounding_override_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_rounding_option_isSet = false;
    m_rounding_option_isValid = false;

    m_salary_sacrifice_isSet = false;
    m_salary_sacrifice_isValid = false;

    m_scheme_name_isSet = false;
    m_scheme_name_isValid = false;

    m_sub_group_isSet = false;
    m_sub_group_isValid = false;

    m_taxation_method_isSet = false;
    m_taxation_method_isValid = false;

    m_upper_threshold_isSet = false;
    m_upper_threshold_isValid = false;

    m_use_ae_thresholds_isSet = false;
    m_use_ae_thresholds_isValid = false;
}

void OAIPension_2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPension_2::fromJsonObject(QJsonObject json) {

    m_ae_compatible_isValid = ::OpenAPI::fromJsonValue(m_ae_compatible, json[QString("AECompatible")]);
    m_ae_compatible_isSet = !json[QString("AECompatible")].isNull() && m_ae_compatible_isValid;

    m_certification_isValid = ::OpenAPI::fromJsonValue(m_certification, json[QString("Certification")]);
    m_certification_isSet = !json[QString("Certification")].isNull() && m_certification_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_contribution_deduction_day_isValid = ::OpenAPI::fromJsonValue(m_contribution_deduction_day, json[QString("ContributionDeductionDay")]);
    m_contribution_deduction_day_isSet = !json[QString("ContributionDeductionDay")].isNull() && m_contribution_deduction_day_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("EffectiveDate")]);
    m_effective_date_isSet = !json[QString("EffectiveDate")].isNull() && m_effective_date_isValid;

    m_employee_contribution_cash_isValid = ::OpenAPI::fromJsonValue(m_employee_contribution_cash, json[QString("EmployeeContributionCash")]);
    m_employee_contribution_cash_isSet = !json[QString("EmployeeContributionCash")].isNull() && m_employee_contribution_cash_isValid;

    m_employee_contribution_percent_isValid = ::OpenAPI::fromJsonValue(m_employee_contribution_percent, json[QString("EmployeeContributionPercent")]);
    m_employee_contribution_percent_isSet = !json[QString("EmployeeContributionPercent")].isNull() && m_employee_contribution_percent_isValid;

    m_employer_contribution_cash_isValid = ::OpenAPI::fromJsonValue(m_employer_contribution_cash, json[QString("EmployerContributionCash")]);
    m_employer_contribution_cash_isSet = !json[QString("EmployerContributionCash")].isNull() && m_employer_contribution_cash_isValid;

    m_employer_contribution_percent_isValid = ::OpenAPI::fromJsonValue(m_employer_contribution_percent, json[QString("EmployerContributionPercent")]);
    m_employer_contribution_percent_isSet = !json[QString("EmployerContributionPercent")].isNull() && m_employer_contribution_percent_isValid;

    m_employer_ni_saving_isValid = ::OpenAPI::fromJsonValue(m_employer_ni_saving, json[QString("EmployerNiSaving")]);
    m_employer_ni_saving_isSet = !json[QString("EmployerNiSaving")].isNull() && m_employer_ni_saving_isValid;

    m_employer_ni_saving_percentage_isValid = ::OpenAPI::fromJsonValue(m_employer_ni_saving_percentage, json[QString("EmployerNiSavingPercentage")]);
    m_employer_ni_saving_percentage_isSet = !json[QString("EmployerNiSavingPercentage")].isNull() && m_employer_ni_saving_percentage_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("Group")]);
    m_group_isSet = !json[QString("Group")].isNull() && m_group_isValid;

    m_lower_threshold_isValid = ::OpenAPI::fromJsonValue(m_lower_threshold, json[QString("LowerThreshold")]);
    m_lower_threshold_isSet = !json[QString("LowerThreshold")].isNull() && m_lower_threshold_isValid;

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("MetaData")]);
    m_meta_data_isSet = !json[QString("MetaData")].isNull() && m_meta_data_isValid;

    m_next_revision_date_isValid = ::OpenAPI::fromJsonValue(m_next_revision_date, json[QString("NextRevisionDate")]);
    m_next_revision_date_isSet = !json[QString("NextRevisionDate")].isNull() && m_next_revision_date_isValid;

    m_pensionable_pay_codes_isValid = ::OpenAPI::fromJsonValue(m_pensionable_pay_codes, json[QString("PensionablePayCodes")]);
    m_pensionable_pay_codes_isSet = !json[QString("PensionablePayCodes")].isNull() && m_pensionable_pay_codes_isValid;

    m_pro_rata_method_isValid = ::OpenAPI::fromJsonValue(m_pro_rata_method, json[QString("ProRataMethod")]);
    m_pro_rata_method_isSet = !json[QString("ProRataMethod")].isNull() && m_pro_rata_method_isValid;

    m_provider_employer_ref_isValid = ::OpenAPI::fromJsonValue(m_provider_employer_ref, json[QString("ProviderEmployerRef")]);
    m_provider_employer_ref_isSet = !json[QString("ProviderEmployerRef")].isNull() && m_provider_employer_ref_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("ProviderName")]);
    m_provider_name_isSet = !json[QString("ProviderName")].isNull() && m_provider_name_isValid;

    m_qualifying_pay_codes_isValid = ::OpenAPI::fromJsonValue(m_qualifying_pay_codes, json[QString("QualifyingPayCodes")]);
    m_qualifying_pay_codes_isSet = !json[QString("QualifyingPayCodes")].isNull() && m_qualifying_pay_codes_isValid;

    m_ras_rounding_override_isValid = ::OpenAPI::fromJsonValue(m_ras_rounding_override, json[QString("RasRoundingOverride")]);
    m_ras_rounding_override_isSet = !json[QString("RasRoundingOverride")].isNull() && m_ras_rounding_override_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("Revision")]);
    m_revision_isSet = !json[QString("Revision")].isNull() && m_revision_isValid;

    m_rounding_option_isValid = ::OpenAPI::fromJsonValue(m_rounding_option, json[QString("RoundingOption")]);
    m_rounding_option_isSet = !json[QString("RoundingOption")].isNull() && m_rounding_option_isValid;

    m_salary_sacrifice_isValid = ::OpenAPI::fromJsonValue(m_salary_sacrifice, json[QString("SalarySacrifice")]);
    m_salary_sacrifice_isSet = !json[QString("SalarySacrifice")].isNull() && m_salary_sacrifice_isValid;

    m_scheme_name_isValid = ::OpenAPI::fromJsonValue(m_scheme_name, json[QString("SchemeName")]);
    m_scheme_name_isSet = !json[QString("SchemeName")].isNull() && m_scheme_name_isValid;

    m_sub_group_isValid = ::OpenAPI::fromJsonValue(m_sub_group, json[QString("SubGroup")]);
    m_sub_group_isSet = !json[QString("SubGroup")].isNull() && m_sub_group_isValid;

    m_taxation_method_isValid = ::OpenAPI::fromJsonValue(m_taxation_method, json[QString("TaxationMethod")]);
    m_taxation_method_isSet = !json[QString("TaxationMethod")].isNull() && m_taxation_method_isValid;

    m_upper_threshold_isValid = ::OpenAPI::fromJsonValue(m_upper_threshold, json[QString("UpperThreshold")]);
    m_upper_threshold_isSet = !json[QString("UpperThreshold")].isNull() && m_upper_threshold_isValid;

    m_use_ae_thresholds_isValid = ::OpenAPI::fromJsonValue(m_use_ae_thresholds, json[QString("UseAEThresholds")]);
    m_use_ae_thresholds_isSet = !json[QString("UseAEThresholds")].isNull() && m_use_ae_thresholds_isValid;
}

QString OAIPension_2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPension_2::asJsonObject() const {
    QJsonObject obj;
    if (m_ae_compatible_isSet) {
        obj.insert(QString("AECompatible"), ::OpenAPI::toJsonValue(m_ae_compatible));
    }
    if (m_certification_isSet) {
        obj.insert(QString("Certification"), ::OpenAPI::toJsonValue(m_certification));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_contribution_deduction_day_isSet) {
        obj.insert(QString("ContributionDeductionDay"), ::OpenAPI::toJsonValue(m_contribution_deduction_day));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("EffectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_employee_contribution_cash_isSet) {
        obj.insert(QString("EmployeeContributionCash"), ::OpenAPI::toJsonValue(m_employee_contribution_cash));
    }
    if (m_employee_contribution_percent_isSet) {
        obj.insert(QString("EmployeeContributionPercent"), ::OpenAPI::toJsonValue(m_employee_contribution_percent));
    }
    if (m_employer_contribution_cash_isSet) {
        obj.insert(QString("EmployerContributionCash"), ::OpenAPI::toJsonValue(m_employer_contribution_cash));
    }
    if (m_employer_contribution_percent_isSet) {
        obj.insert(QString("EmployerContributionPercent"), ::OpenAPI::toJsonValue(m_employer_contribution_percent));
    }
    if (m_employer_ni_saving_isSet) {
        obj.insert(QString("EmployerNiSaving"), ::OpenAPI::toJsonValue(m_employer_ni_saving));
    }
    if (m_employer_ni_saving_percentage_isSet) {
        obj.insert(QString("EmployerNiSavingPercentage"), ::OpenAPI::toJsonValue(m_employer_ni_saving_percentage));
    }
    if (m_group_isSet) {
        obj.insert(QString("Group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_lower_threshold_isSet) {
        obj.insert(QString("LowerThreshold"), ::OpenAPI::toJsonValue(m_lower_threshold));
    }
    if (m_meta_data_isSet) {
        obj.insert(QString("MetaData"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_next_revision_date_isSet) {
        obj.insert(QString("NextRevisionDate"), ::OpenAPI::toJsonValue(m_next_revision_date));
    }
    if (m_pensionable_pay_codes.isSet()) {
        obj.insert(QString("PensionablePayCodes"), ::OpenAPI::toJsonValue(m_pensionable_pay_codes));
    }
    if (m_pro_rata_method_isSet) {
        obj.insert(QString("ProRataMethod"), ::OpenAPI::toJsonValue(m_pro_rata_method));
    }
    if (m_provider_employer_ref_isSet) {
        obj.insert(QString("ProviderEmployerRef"), ::OpenAPI::toJsonValue(m_provider_employer_ref));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("ProviderName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    if (m_qualifying_pay_codes.isSet()) {
        obj.insert(QString("QualifyingPayCodes"), ::OpenAPI::toJsonValue(m_qualifying_pay_codes));
    }
    if (m_ras_rounding_override_isSet) {
        obj.insert(QString("RasRoundingOverride"), ::OpenAPI::toJsonValue(m_ras_rounding_override));
    }
    if (m_revision_isSet) {
        obj.insert(QString("Revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_rounding_option_isSet) {
        obj.insert(QString("RoundingOption"), ::OpenAPI::toJsonValue(m_rounding_option));
    }
    if (m_salary_sacrifice_isSet) {
        obj.insert(QString("SalarySacrifice"), ::OpenAPI::toJsonValue(m_salary_sacrifice));
    }
    if (m_scheme_name_isSet) {
        obj.insert(QString("SchemeName"), ::OpenAPI::toJsonValue(m_scheme_name));
    }
    if (m_sub_group_isSet) {
        obj.insert(QString("SubGroup"), ::OpenAPI::toJsonValue(m_sub_group));
    }
    if (m_taxation_method_isSet) {
        obj.insert(QString("TaxationMethod"), ::OpenAPI::toJsonValue(m_taxation_method));
    }
    if (m_upper_threshold_isSet) {
        obj.insert(QString("UpperThreshold"), ::OpenAPI::toJsonValue(m_upper_threshold));
    }
    if (m_use_ae_thresholds_isSet) {
        obj.insert(QString("UseAEThresholds"), ::OpenAPI::toJsonValue(m_use_ae_thresholds));
    }
    return obj;
}

bool OAIPension_2::isAeCompatible() const {
    return m_ae_compatible;
}
void OAIPension_2::setAeCompatible(const bool &ae_compatible) {
    m_ae_compatible = ae_compatible;
    m_ae_compatible_isSet = true;
}

bool OAIPension_2::is_ae_compatible_Set() const{
    return m_ae_compatible_isSet;
}

bool OAIPension_2::is_ae_compatible_Valid() const{
    return m_ae_compatible_isValid;
}

QString OAIPension_2::getCertification() const {
    return m_certification;
}
void OAIPension_2::setCertification(const QString &certification) {
    m_certification = certification;
    m_certification_isSet = true;
}

bool OAIPension_2::is_certification_Set() const{
    return m_certification_isSet;
}

bool OAIPension_2::is_certification_Valid() const{
    return m_certification_isValid;
}

QString OAIPension_2::getCode() const {
    return m_code;
}
void OAIPension_2::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIPension_2::is_code_Set() const{
    return m_code_isSet;
}

bool OAIPension_2::is_code_Valid() const{
    return m_code_isValid;
}

qint32 OAIPension_2::getContributionDeductionDay() const {
    return m_contribution_deduction_day;
}
void OAIPension_2::setContributionDeductionDay(const qint32 &contribution_deduction_day) {
    m_contribution_deduction_day = contribution_deduction_day;
    m_contribution_deduction_day_isSet = true;
}

bool OAIPension_2::is_contribution_deduction_day_Set() const{
    return m_contribution_deduction_day_isSet;
}

bool OAIPension_2::is_contribution_deduction_day_Valid() const{
    return m_contribution_deduction_day_isValid;
}

QDate OAIPension_2::getEffectiveDate() const {
    return m_effective_date;
}
void OAIPension_2::setEffectiveDate(const QDate &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIPension_2::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIPension_2::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

double OAIPension_2::getEmployeeContributionCash() const {
    return m_employee_contribution_cash;
}
void OAIPension_2::setEmployeeContributionCash(const double &employee_contribution_cash) {
    m_employee_contribution_cash = employee_contribution_cash;
    m_employee_contribution_cash_isSet = true;
}

bool OAIPension_2::is_employee_contribution_cash_Set() const{
    return m_employee_contribution_cash_isSet;
}

bool OAIPension_2::is_employee_contribution_cash_Valid() const{
    return m_employee_contribution_cash_isValid;
}

double OAIPension_2::getEmployeeContributionPercent() const {
    return m_employee_contribution_percent;
}
void OAIPension_2::setEmployeeContributionPercent(const double &employee_contribution_percent) {
    m_employee_contribution_percent = employee_contribution_percent;
    m_employee_contribution_percent_isSet = true;
}

bool OAIPension_2::is_employee_contribution_percent_Set() const{
    return m_employee_contribution_percent_isSet;
}

bool OAIPension_2::is_employee_contribution_percent_Valid() const{
    return m_employee_contribution_percent_isValid;
}

double OAIPension_2::getEmployerContributionCash() const {
    return m_employer_contribution_cash;
}
void OAIPension_2::setEmployerContributionCash(const double &employer_contribution_cash) {
    m_employer_contribution_cash = employer_contribution_cash;
    m_employer_contribution_cash_isSet = true;
}

bool OAIPension_2::is_employer_contribution_cash_Set() const{
    return m_employer_contribution_cash_isSet;
}

bool OAIPension_2::is_employer_contribution_cash_Valid() const{
    return m_employer_contribution_cash_isValid;
}

double OAIPension_2::getEmployerContributionPercent() const {
    return m_employer_contribution_percent;
}
void OAIPension_2::setEmployerContributionPercent(const double &employer_contribution_percent) {
    m_employer_contribution_percent = employer_contribution_percent;
    m_employer_contribution_percent_isSet = true;
}

bool OAIPension_2::is_employer_contribution_percent_Set() const{
    return m_employer_contribution_percent_isSet;
}

bool OAIPension_2::is_employer_contribution_percent_Valid() const{
    return m_employer_contribution_percent_isValid;
}

bool OAIPension_2::isEmployerNiSaving() const {
    return m_employer_ni_saving;
}
void OAIPension_2::setEmployerNiSaving(const bool &employer_ni_saving) {
    m_employer_ni_saving = employer_ni_saving;
    m_employer_ni_saving_isSet = true;
}

bool OAIPension_2::is_employer_ni_saving_Set() const{
    return m_employer_ni_saving_isSet;
}

bool OAIPension_2::is_employer_ni_saving_Valid() const{
    return m_employer_ni_saving_isValid;
}

double OAIPension_2::getEmployerNiSavingPercentage() const {
    return m_employer_ni_saving_percentage;
}
void OAIPension_2::setEmployerNiSavingPercentage(const double &employer_ni_saving_percentage) {
    m_employer_ni_saving_percentage = employer_ni_saving_percentage;
    m_employer_ni_saving_percentage_isSet = true;
}

bool OAIPension_2::is_employer_ni_saving_percentage_Set() const{
    return m_employer_ni_saving_percentage_isSet;
}

bool OAIPension_2::is_employer_ni_saving_percentage_Valid() const{
    return m_employer_ni_saving_percentage_isValid;
}

QString OAIPension_2::getGroup() const {
    return m_group;
}
void OAIPension_2::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIPension_2::is_group_Set() const{
    return m_group_isSet;
}

bool OAIPension_2::is_group_Valid() const{
    return m_group_isValid;
}

double OAIPension_2::getLowerThreshold() const {
    return m_lower_threshold;
}
void OAIPension_2::setLowerThreshold(const double &lower_threshold) {
    m_lower_threshold = lower_threshold;
    m_lower_threshold_isSet = true;
}

bool OAIPension_2::is_lower_threshold_Set() const{
    return m_lower_threshold_isSet;
}

bool OAIPension_2::is_lower_threshold_Valid() const{
    return m_lower_threshold_isValid;
}

OAIObject OAIPension_2::getMetaData() const {
    return m_meta_data;
}
void OAIPension_2::setMetaData(const OAIObject &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIPension_2::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIPension_2::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

QDate OAIPension_2::getNextRevisionDate() const {
    return m_next_revision_date;
}
void OAIPension_2::setNextRevisionDate(const QDate &next_revision_date) {
    m_next_revision_date = next_revision_date;
    m_next_revision_date_isSet = true;
}

bool OAIPension_2::is_next_revision_date_Set() const{
    return m_next_revision_date_isSet;
}

bool OAIPension_2::is_next_revision_date_Valid() const{
    return m_next_revision_date_isValid;
}

OAIPensionablePayCodes OAIPension_2::getPensionablePayCodes() const {
    return m_pensionable_pay_codes;
}
void OAIPension_2::setPensionablePayCodes(const OAIPensionablePayCodes &pensionable_pay_codes) {
    m_pensionable_pay_codes = pensionable_pay_codes;
    m_pensionable_pay_codes_isSet = true;
}

bool OAIPension_2::is_pensionable_pay_codes_Set() const{
    return m_pensionable_pay_codes_isSet;
}

bool OAIPension_2::is_pensionable_pay_codes_Valid() const{
    return m_pensionable_pay_codes_isValid;
}

QString OAIPension_2::getProRataMethod() const {
    return m_pro_rata_method;
}
void OAIPension_2::setProRataMethod(const QString &pro_rata_method) {
    m_pro_rata_method = pro_rata_method;
    m_pro_rata_method_isSet = true;
}

bool OAIPension_2::is_pro_rata_method_Set() const{
    return m_pro_rata_method_isSet;
}

bool OAIPension_2::is_pro_rata_method_Valid() const{
    return m_pro_rata_method_isValid;
}

QString OAIPension_2::getProviderEmployerRef() const {
    return m_provider_employer_ref;
}
void OAIPension_2::setProviderEmployerRef(const QString &provider_employer_ref) {
    m_provider_employer_ref = provider_employer_ref;
    m_provider_employer_ref_isSet = true;
}

bool OAIPension_2::is_provider_employer_ref_Set() const{
    return m_provider_employer_ref_isSet;
}

bool OAIPension_2::is_provider_employer_ref_Valid() const{
    return m_provider_employer_ref_isValid;
}

QString OAIPension_2::getProviderName() const {
    return m_provider_name;
}
void OAIPension_2::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIPension_2::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIPension_2::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

OAIQualifyingPayCodes OAIPension_2::getQualifyingPayCodes() const {
    return m_qualifying_pay_codes;
}
void OAIPension_2::setQualifyingPayCodes(const OAIQualifyingPayCodes &qualifying_pay_codes) {
    m_qualifying_pay_codes = qualifying_pay_codes;
    m_qualifying_pay_codes_isSet = true;
}

bool OAIPension_2::is_qualifying_pay_codes_Set() const{
    return m_qualifying_pay_codes_isSet;
}

bool OAIPension_2::is_qualifying_pay_codes_Valid() const{
    return m_qualifying_pay_codes_isValid;
}

QString OAIPension_2::getRasRoundingOverride() const {
    return m_ras_rounding_override;
}
void OAIPension_2::setRasRoundingOverride(const QString &ras_rounding_override) {
    m_ras_rounding_override = ras_rounding_override;
    m_ras_rounding_override_isSet = true;
}

bool OAIPension_2::is_ras_rounding_override_Set() const{
    return m_ras_rounding_override_isSet;
}

bool OAIPension_2::is_ras_rounding_override_Valid() const{
    return m_ras_rounding_override_isValid;
}

qint32 OAIPension_2::getRevision() const {
    return m_revision;
}
void OAIPension_2::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIPension_2::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIPension_2::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIPension_2::getRoundingOption() const {
    return m_rounding_option;
}
void OAIPension_2::setRoundingOption(const QString &rounding_option) {
    m_rounding_option = rounding_option;
    m_rounding_option_isSet = true;
}

bool OAIPension_2::is_rounding_option_Set() const{
    return m_rounding_option_isSet;
}

bool OAIPension_2::is_rounding_option_Valid() const{
    return m_rounding_option_isValid;
}

bool OAIPension_2::isSalarySacrifice() const {
    return m_salary_sacrifice;
}
void OAIPension_2::setSalarySacrifice(const bool &salary_sacrifice) {
    m_salary_sacrifice = salary_sacrifice;
    m_salary_sacrifice_isSet = true;
}

bool OAIPension_2::is_salary_sacrifice_Set() const{
    return m_salary_sacrifice_isSet;
}

bool OAIPension_2::is_salary_sacrifice_Valid() const{
    return m_salary_sacrifice_isValid;
}

QString OAIPension_2::getSchemeName() const {
    return m_scheme_name;
}
void OAIPension_2::setSchemeName(const QString &scheme_name) {
    m_scheme_name = scheme_name;
    m_scheme_name_isSet = true;
}

bool OAIPension_2::is_scheme_name_Set() const{
    return m_scheme_name_isSet;
}

bool OAIPension_2::is_scheme_name_Valid() const{
    return m_scheme_name_isValid;
}

QString OAIPension_2::getSubGroup() const {
    return m_sub_group;
}
void OAIPension_2::setSubGroup(const QString &sub_group) {
    m_sub_group = sub_group;
    m_sub_group_isSet = true;
}

bool OAIPension_2::is_sub_group_Set() const{
    return m_sub_group_isSet;
}

bool OAIPension_2::is_sub_group_Valid() const{
    return m_sub_group_isValid;
}

QString OAIPension_2::getTaxationMethod() const {
    return m_taxation_method;
}
void OAIPension_2::setTaxationMethod(const QString &taxation_method) {
    m_taxation_method = taxation_method;
    m_taxation_method_isSet = true;
}

bool OAIPension_2::is_taxation_method_Set() const{
    return m_taxation_method_isSet;
}

bool OAIPension_2::is_taxation_method_Valid() const{
    return m_taxation_method_isValid;
}

double OAIPension_2::getUpperThreshold() const {
    return m_upper_threshold;
}
void OAIPension_2::setUpperThreshold(const double &upper_threshold) {
    m_upper_threshold = upper_threshold;
    m_upper_threshold_isSet = true;
}

bool OAIPension_2::is_upper_threshold_Set() const{
    return m_upper_threshold_isSet;
}

bool OAIPension_2::is_upper_threshold_Valid() const{
    return m_upper_threshold_isValid;
}

bool OAIPension_2::isUseAeThresholds() const {
    return m_use_ae_thresholds;
}
void OAIPension_2::setUseAeThresholds(const bool &use_ae_thresholds) {
    m_use_ae_thresholds = use_ae_thresholds;
    m_use_ae_thresholds_isSet = true;
}

bool OAIPension_2::is_use_ae_thresholds_Set() const{
    return m_use_ae_thresholds_isSet;
}

bool OAIPension_2::is_use_ae_thresholds_Valid() const{
    return m_use_ae_thresholds_isValid;
}

bool OAIPension_2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ae_compatible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_deduction_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_contribution_cash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_contribution_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_contribution_cash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_contribution_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_ni_saving_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_ni_saving_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_revision_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pensionable_pay_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pro_rata_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_employer_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualifying_pay_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ras_rounding_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounding_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salary_sacrifice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxation_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_ae_thresholds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPension_2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
