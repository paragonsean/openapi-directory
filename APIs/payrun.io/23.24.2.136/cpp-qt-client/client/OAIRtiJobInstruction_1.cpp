/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRtiJobInstruction_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRtiJobInstruction_1::OAIRtiJobInstruction_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRtiJobInstruction_1::OAIRtiJobInstruction_1() {
    this->initializeModel();
}

OAIRtiJobInstruction_1::~OAIRtiJobInstruction_1() {}

void OAIRtiJobInstruction_1::initializeModel() {

    m_earlier_tax_year_isSet = false;
    m_earlier_tax_year_isValid = false;

    m_employer_isSet = false;
    m_employer_isValid = false;

    m_final_submission_for_year_isSet = false;
    m_final_submission_for_year_isValid = false;

    m_generate_isSet = false;
    m_generate_isValid = false;

    m_holding_date_isSet = false;
    m_holding_date_isValid = false;

    m_late_reason_isSet = false;
    m_late_reason_isValid = false;

    m_no_payment_for_period_from_isSet = false;
    m_no_payment_for_period_from_isValid = false;

    m_no_payment_for_period_to_isSet = false;
    m_no_payment_for_period_to_isValid = false;

    m_pay_schedule_isSet = false;
    m_pay_schedule_isValid = false;

    m_payment_date_isSet = false;
    m_payment_date_isValid = false;

    m_period_of_inactivity_from_isSet = false;
    m_period_of_inactivity_from_isValid = false;

    m_period_of_inactivity_to_isSet = false;
    m_period_of_inactivity_to_isValid = false;

    m_rti_transaction_isSet = false;
    m_rti_transaction_isValid = false;

    m_rti_type_isSet = false;
    m_rti_type_isValid = false;

    m_scheme_ceased_isSet = false;
    m_scheme_ceased_isValid = false;

    m_tax_month_isSet = false;
    m_tax_month_isValid = false;

    m_tax_year_isSet = false;
    m_tax_year_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_transmit_isSet = false;
    m_transmit_isValid = false;
}

void OAIRtiJobInstruction_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRtiJobInstruction_1::fromJsonObject(QJsonObject json) {

    m_earlier_tax_year_isValid = ::OpenAPI::fromJsonValue(m_earlier_tax_year, json[QString("EarlierTaxYear")]);
    m_earlier_tax_year_isSet = !json[QString("EarlierTaxYear")].isNull() && m_earlier_tax_year_isValid;

    m_employer_isValid = ::OpenAPI::fromJsonValue(m_employer, json[QString("Employer")]);
    m_employer_isSet = !json[QString("Employer")].isNull() && m_employer_isValid;

    m_final_submission_for_year_isValid = ::OpenAPI::fromJsonValue(m_final_submission_for_year, json[QString("FinalSubmissionForYear")]);
    m_final_submission_for_year_isSet = !json[QString("FinalSubmissionForYear")].isNull() && m_final_submission_for_year_isValid;

    m_generate_isValid = ::OpenAPI::fromJsonValue(m_generate, json[QString("Generate")]);
    m_generate_isSet = !json[QString("Generate")].isNull() && m_generate_isValid;

    m_holding_date_isValid = ::OpenAPI::fromJsonValue(m_holding_date, json[QString("HoldingDate")]);
    m_holding_date_isSet = !json[QString("HoldingDate")].isNull() && m_holding_date_isValid;

    m_late_reason_isValid = ::OpenAPI::fromJsonValue(m_late_reason, json[QString("LateReason")]);
    m_late_reason_isSet = !json[QString("LateReason")].isNull() && m_late_reason_isValid;

    m_no_payment_for_period_from_isValid = ::OpenAPI::fromJsonValue(m_no_payment_for_period_from, json[QString("NoPaymentForPeriodFrom")]);
    m_no_payment_for_period_from_isSet = !json[QString("NoPaymentForPeriodFrom")].isNull() && m_no_payment_for_period_from_isValid;

    m_no_payment_for_period_to_isValid = ::OpenAPI::fromJsonValue(m_no_payment_for_period_to, json[QString("NoPaymentForPeriodTo")]);
    m_no_payment_for_period_to_isSet = !json[QString("NoPaymentForPeriodTo")].isNull() && m_no_payment_for_period_to_isValid;

    m_pay_schedule_isValid = ::OpenAPI::fromJsonValue(m_pay_schedule, json[QString("PaySchedule")]);
    m_pay_schedule_isSet = !json[QString("PaySchedule")].isNull() && m_pay_schedule_isValid;

    m_payment_date_isValid = ::OpenAPI::fromJsonValue(m_payment_date, json[QString("PaymentDate")]);
    m_payment_date_isSet = !json[QString("PaymentDate")].isNull() && m_payment_date_isValid;

    m_period_of_inactivity_from_isValid = ::OpenAPI::fromJsonValue(m_period_of_inactivity_from, json[QString("PeriodOfInactivityFrom")]);
    m_period_of_inactivity_from_isSet = !json[QString("PeriodOfInactivityFrom")].isNull() && m_period_of_inactivity_from_isValid;

    m_period_of_inactivity_to_isValid = ::OpenAPI::fromJsonValue(m_period_of_inactivity_to, json[QString("PeriodOfInactivityTo")]);
    m_period_of_inactivity_to_isSet = !json[QString("PeriodOfInactivityTo")].isNull() && m_period_of_inactivity_to_isValid;

    m_rti_transaction_isValid = ::OpenAPI::fromJsonValue(m_rti_transaction, json[QString("RtiTransaction")]);
    m_rti_transaction_isSet = !json[QString("RtiTransaction")].isNull() && m_rti_transaction_isValid;

    m_rti_type_isValid = ::OpenAPI::fromJsonValue(m_rti_type, json[QString("RtiType")]);
    m_rti_type_isSet = !json[QString("RtiType")].isNull() && m_rti_type_isValid;

    m_scheme_ceased_isValid = ::OpenAPI::fromJsonValue(m_scheme_ceased, json[QString("SchemeCeased")]);
    m_scheme_ceased_isSet = !json[QString("SchemeCeased")].isNull() && m_scheme_ceased_isValid;

    m_tax_month_isValid = ::OpenAPI::fromJsonValue(m_tax_month, json[QString("TaxMonth")]);
    m_tax_month_isSet = !json[QString("TaxMonth")].isNull() && m_tax_month_isValid;

    m_tax_year_isValid = ::OpenAPI::fromJsonValue(m_tax_year, json[QString("TaxYear")]);
    m_tax_year_isSet = !json[QString("TaxYear")].isNull() && m_tax_year_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_transmit_isValid = ::OpenAPI::fromJsonValue(m_transmit, json[QString("Transmit")]);
    m_transmit_isSet = !json[QString("Transmit")].isNull() && m_transmit_isValid;
}

QString OAIRtiJobInstruction_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRtiJobInstruction_1::asJsonObject() const {
    QJsonObject obj;
    if (m_earlier_tax_year_isSet) {
        obj.insert(QString("EarlierTaxYear"), ::OpenAPI::toJsonValue(m_earlier_tax_year));
    }
    if (m_employer.isSet()) {
        obj.insert(QString("Employer"), ::OpenAPI::toJsonValue(m_employer));
    }
    if (m_final_submission_for_year_isSet) {
        obj.insert(QString("FinalSubmissionForYear"), ::OpenAPI::toJsonValue(m_final_submission_for_year));
    }
    if (m_generate_isSet) {
        obj.insert(QString("Generate"), ::OpenAPI::toJsonValue(m_generate));
    }
    if (m_holding_date_isSet) {
        obj.insert(QString("HoldingDate"), ::OpenAPI::toJsonValue(m_holding_date));
    }
    if (m_late_reason_isSet) {
        obj.insert(QString("LateReason"), ::OpenAPI::toJsonValue(m_late_reason));
    }
    if (m_no_payment_for_period_from_isSet) {
        obj.insert(QString("NoPaymentForPeriodFrom"), ::OpenAPI::toJsonValue(m_no_payment_for_period_from));
    }
    if (m_no_payment_for_period_to_isSet) {
        obj.insert(QString("NoPaymentForPeriodTo"), ::OpenAPI::toJsonValue(m_no_payment_for_period_to));
    }
    if (m_pay_schedule.isSet()) {
        obj.insert(QString("PaySchedule"), ::OpenAPI::toJsonValue(m_pay_schedule));
    }
    if (m_payment_date_isSet) {
        obj.insert(QString("PaymentDate"), ::OpenAPI::toJsonValue(m_payment_date));
    }
    if (m_period_of_inactivity_from_isSet) {
        obj.insert(QString("PeriodOfInactivityFrom"), ::OpenAPI::toJsonValue(m_period_of_inactivity_from));
    }
    if (m_period_of_inactivity_to_isSet) {
        obj.insert(QString("PeriodOfInactivityTo"), ::OpenAPI::toJsonValue(m_period_of_inactivity_to));
    }
    if (m_rti_transaction.isSet()) {
        obj.insert(QString("RtiTransaction"), ::OpenAPI::toJsonValue(m_rti_transaction));
    }
    if (m_rti_type_isSet) {
        obj.insert(QString("RtiType"), ::OpenAPI::toJsonValue(m_rti_type));
    }
    if (m_scheme_ceased_isSet) {
        obj.insert(QString("SchemeCeased"), ::OpenAPI::toJsonValue(m_scheme_ceased));
    }
    if (m_tax_month_isSet) {
        obj.insert(QString("TaxMonth"), ::OpenAPI::toJsonValue(m_tax_month));
    }
    if (m_tax_year_isSet) {
        obj.insert(QString("TaxYear"), ::OpenAPI::toJsonValue(m_tax_year));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_transmit_isSet) {
        obj.insert(QString("Transmit"), ::OpenAPI::toJsonValue(m_transmit));
    }
    return obj;
}

qint32 OAIRtiJobInstruction_1::getEarlierTaxYear() const {
    return m_earlier_tax_year;
}
void OAIRtiJobInstruction_1::setEarlierTaxYear(const qint32 &earlier_tax_year) {
    m_earlier_tax_year = earlier_tax_year;
    m_earlier_tax_year_isSet = true;
}

bool OAIRtiJobInstruction_1::is_earlier_tax_year_Set() const{
    return m_earlier_tax_year_isSet;
}

bool OAIRtiJobInstruction_1::is_earlier_tax_year_Valid() const{
    return m_earlier_tax_year_isValid;
}

OAIEmployer_4 OAIRtiJobInstruction_1::getEmployer() const {
    return m_employer;
}
void OAIRtiJobInstruction_1::setEmployer(const OAIEmployer_4 &employer) {
    m_employer = employer;
    m_employer_isSet = true;
}

bool OAIRtiJobInstruction_1::is_employer_Set() const{
    return m_employer_isSet;
}

bool OAIRtiJobInstruction_1::is_employer_Valid() const{
    return m_employer_isValid;
}

bool OAIRtiJobInstruction_1::isFinalSubmissionForYear() const {
    return m_final_submission_for_year;
}
void OAIRtiJobInstruction_1::setFinalSubmissionForYear(const bool &final_submission_for_year) {
    m_final_submission_for_year = final_submission_for_year;
    m_final_submission_for_year_isSet = true;
}

bool OAIRtiJobInstruction_1::is_final_submission_for_year_Set() const{
    return m_final_submission_for_year_isSet;
}

bool OAIRtiJobInstruction_1::is_final_submission_for_year_Valid() const{
    return m_final_submission_for_year_isValid;
}

bool OAIRtiJobInstruction_1::isGenerate() const {
    return m_generate;
}
void OAIRtiJobInstruction_1::setGenerate(const bool &generate) {
    m_generate = generate;
    m_generate_isSet = true;
}

bool OAIRtiJobInstruction_1::is_generate_Set() const{
    return m_generate_isSet;
}

bool OAIRtiJobInstruction_1::is_generate_Valid() const{
    return m_generate_isValid;
}

QDateTime OAIRtiJobInstruction_1::getHoldingDate() const {
    return m_holding_date;
}
void OAIRtiJobInstruction_1::setHoldingDate(const QDateTime &holding_date) {
    m_holding_date = holding_date;
    m_holding_date_isSet = true;
}

bool OAIRtiJobInstruction_1::is_holding_date_Set() const{
    return m_holding_date_isSet;
}

bool OAIRtiJobInstruction_1::is_holding_date_Valid() const{
    return m_holding_date_isValid;
}

QString OAIRtiJobInstruction_1::getLateReason() const {
    return m_late_reason;
}
void OAIRtiJobInstruction_1::setLateReason(const QString &late_reason) {
    m_late_reason = late_reason;
    m_late_reason_isSet = true;
}

bool OAIRtiJobInstruction_1::is_late_reason_Set() const{
    return m_late_reason_isSet;
}

bool OAIRtiJobInstruction_1::is_late_reason_Valid() const{
    return m_late_reason_isValid;
}

QDate OAIRtiJobInstruction_1::getNoPaymentForPeriodFrom() const {
    return m_no_payment_for_period_from;
}
void OAIRtiJobInstruction_1::setNoPaymentForPeriodFrom(const QDate &no_payment_for_period_from) {
    m_no_payment_for_period_from = no_payment_for_period_from;
    m_no_payment_for_period_from_isSet = true;
}

bool OAIRtiJobInstruction_1::is_no_payment_for_period_from_Set() const{
    return m_no_payment_for_period_from_isSet;
}

bool OAIRtiJobInstruction_1::is_no_payment_for_period_from_Valid() const{
    return m_no_payment_for_period_from_isValid;
}

QDate OAIRtiJobInstruction_1::getNoPaymentForPeriodTo() const {
    return m_no_payment_for_period_to;
}
void OAIRtiJobInstruction_1::setNoPaymentForPeriodTo(const QDate &no_payment_for_period_to) {
    m_no_payment_for_period_to = no_payment_for_period_to;
    m_no_payment_for_period_to_isSet = true;
}

bool OAIRtiJobInstruction_1::is_no_payment_for_period_to_Set() const{
    return m_no_payment_for_period_to_isSet;
}

bool OAIRtiJobInstruction_1::is_no_payment_for_period_to_Valid() const{
    return m_no_payment_for_period_to_isValid;
}

OAIPaySchedule_5 OAIRtiJobInstruction_1::getPaySchedule() const {
    return m_pay_schedule;
}
void OAIRtiJobInstruction_1::setPaySchedule(const OAIPaySchedule_5 &pay_schedule) {
    m_pay_schedule = pay_schedule;
    m_pay_schedule_isSet = true;
}

bool OAIRtiJobInstruction_1::is_pay_schedule_Set() const{
    return m_pay_schedule_isSet;
}

bool OAIRtiJobInstruction_1::is_pay_schedule_Valid() const{
    return m_pay_schedule_isValid;
}

QDate OAIRtiJobInstruction_1::getPaymentDate() const {
    return m_payment_date;
}
void OAIRtiJobInstruction_1::setPaymentDate(const QDate &payment_date) {
    m_payment_date = payment_date;
    m_payment_date_isSet = true;
}

bool OAIRtiJobInstruction_1::is_payment_date_Set() const{
    return m_payment_date_isSet;
}

bool OAIRtiJobInstruction_1::is_payment_date_Valid() const{
    return m_payment_date_isValid;
}

QDate OAIRtiJobInstruction_1::getPeriodOfInactivityFrom() const {
    return m_period_of_inactivity_from;
}
void OAIRtiJobInstruction_1::setPeriodOfInactivityFrom(const QDate &period_of_inactivity_from) {
    m_period_of_inactivity_from = period_of_inactivity_from;
    m_period_of_inactivity_from_isSet = true;
}

bool OAIRtiJobInstruction_1::is_period_of_inactivity_from_Set() const{
    return m_period_of_inactivity_from_isSet;
}

bool OAIRtiJobInstruction_1::is_period_of_inactivity_from_Valid() const{
    return m_period_of_inactivity_from_isValid;
}

QDate OAIRtiJobInstruction_1::getPeriodOfInactivityTo() const {
    return m_period_of_inactivity_to;
}
void OAIRtiJobInstruction_1::setPeriodOfInactivityTo(const QDate &period_of_inactivity_to) {
    m_period_of_inactivity_to = period_of_inactivity_to;
    m_period_of_inactivity_to_isSet = true;
}

bool OAIRtiJobInstruction_1::is_period_of_inactivity_to_Set() const{
    return m_period_of_inactivity_to_isSet;
}

bool OAIRtiJobInstruction_1::is_period_of_inactivity_to_Valid() const{
    return m_period_of_inactivity_to_isValid;
}

OAIRtiTransaction OAIRtiJobInstruction_1::getRtiTransaction() const {
    return m_rti_transaction;
}
void OAIRtiJobInstruction_1::setRtiTransaction(const OAIRtiTransaction &rti_transaction) {
    m_rti_transaction = rti_transaction;
    m_rti_transaction_isSet = true;
}

bool OAIRtiJobInstruction_1::is_rti_transaction_Set() const{
    return m_rti_transaction_isSet;
}

bool OAIRtiJobInstruction_1::is_rti_transaction_Valid() const{
    return m_rti_transaction_isValid;
}

QString OAIRtiJobInstruction_1::getRtiType() const {
    return m_rti_type;
}
void OAIRtiJobInstruction_1::setRtiType(const QString &rti_type) {
    m_rti_type = rti_type;
    m_rti_type_isSet = true;
}

bool OAIRtiJobInstruction_1::is_rti_type_Set() const{
    return m_rti_type_isSet;
}

bool OAIRtiJobInstruction_1::is_rti_type_Valid() const{
    return m_rti_type_isValid;
}

QDate OAIRtiJobInstruction_1::getSchemeCeased() const {
    return m_scheme_ceased;
}
void OAIRtiJobInstruction_1::setSchemeCeased(const QDate &scheme_ceased) {
    m_scheme_ceased = scheme_ceased;
    m_scheme_ceased_isSet = true;
}

bool OAIRtiJobInstruction_1::is_scheme_ceased_Set() const{
    return m_scheme_ceased_isSet;
}

bool OAIRtiJobInstruction_1::is_scheme_ceased_Valid() const{
    return m_scheme_ceased_isValid;
}

qint32 OAIRtiJobInstruction_1::getTaxMonth() const {
    return m_tax_month;
}
void OAIRtiJobInstruction_1::setTaxMonth(const qint32 &tax_month) {
    m_tax_month = tax_month;
    m_tax_month_isSet = true;
}

bool OAIRtiJobInstruction_1::is_tax_month_Set() const{
    return m_tax_month_isSet;
}

bool OAIRtiJobInstruction_1::is_tax_month_Valid() const{
    return m_tax_month_isValid;
}

qint32 OAIRtiJobInstruction_1::getTaxYear() const {
    return m_tax_year;
}
void OAIRtiJobInstruction_1::setTaxYear(const qint32 &tax_year) {
    m_tax_year = tax_year;
    m_tax_year_isSet = true;
}

bool OAIRtiJobInstruction_1::is_tax_year_Set() const{
    return m_tax_year_isSet;
}

bool OAIRtiJobInstruction_1::is_tax_year_Valid() const{
    return m_tax_year_isValid;
}

QDateTime OAIRtiJobInstruction_1::getTimestamp() const {
    return m_timestamp;
}
void OAIRtiJobInstruction_1::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIRtiJobInstruction_1::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIRtiJobInstruction_1::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIRtiJobInstruction_1::isTransmit() const {
    return m_transmit;
}
void OAIRtiJobInstruction_1::setTransmit(const bool &transmit) {
    m_transmit = transmit;
    m_transmit_isSet = true;
}

bool OAIRtiJobInstruction_1::is_transmit_Set() const{
    return m_transmit_isSet;
}

bool OAIRtiJobInstruction_1::is_transmit_Valid() const{
    return m_transmit_isValid;
}

bool OAIRtiJobInstruction_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_earlier_tax_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_submission_for_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holding_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_late_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_payment_for_period_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_payment_for_period_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_of_inactivity_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_of_inactivity_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rti_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rti_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_ceased_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRtiJobInstruction_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
