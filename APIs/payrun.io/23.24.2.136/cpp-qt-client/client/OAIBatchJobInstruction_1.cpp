/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchJobInstruction_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchJobInstruction_1::OAIBatchJobInstruction_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchJobInstruction_1::OAIBatchJobInstruction_1() {
    this->initializeModel();
}

OAIBatchJobInstruction_1::~OAIBatchJobInstruction_1() {}

void OAIBatchJobInstruction_1::initializeModel() {

    m_holding_date_isSet = false;
    m_holding_date_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIBatchJobInstruction_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchJobInstruction_1::fromJsonObject(QJsonObject json) {

    m_holding_date_isValid = ::OpenAPI::fromJsonValue(m_holding_date, json[QString("HoldingDate")]);
    m_holding_date_isSet = !json[QString("HoldingDate")].isNull() && m_holding_date_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("Instructions")]);
    m_instructions_isSet = !json[QString("Instructions")].isNull() && m_instructions_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("ValidateOnly")]);
    m_validate_only_isSet = !json[QString("ValidateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIBatchJobInstruction_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchJobInstruction_1::asJsonObject() const {
    QJsonObject obj;
    if (m_holding_date_isSet) {
        obj.insert(QString("HoldingDate"), ::OpenAPI::toJsonValue(m_holding_date));
    }
    if (m_instructions.isSet()) {
        obj.insert(QString("Instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("ValidateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

QDateTime OAIBatchJobInstruction_1::getHoldingDate() const {
    return m_holding_date;
}
void OAIBatchJobInstruction_1::setHoldingDate(const QDateTime &holding_date) {
    m_holding_date = holding_date;
    m_holding_date_isSet = true;
}

bool OAIBatchJobInstruction_1::is_holding_date_Set() const{
    return m_holding_date_isSet;
}

bool OAIBatchJobInstruction_1::is_holding_date_Valid() const{
    return m_holding_date_isValid;
}

OAIDELETE OAIBatchJobInstruction_1::getInstructions() const {
    return m_instructions;
}
void OAIBatchJobInstruction_1::setInstructions(const OAIDELETE &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIBatchJobInstruction_1::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIBatchJobInstruction_1::is_instructions_Valid() const{
    return m_instructions_isValid;
}

bool OAIBatchJobInstruction_1::isValidateOnly() const {
    return m_validate_only;
}
void OAIBatchJobInstruction_1::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIBatchJobInstruction_1::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIBatchJobInstruction_1::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIBatchJobInstruction_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_holding_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchJobInstruction_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
