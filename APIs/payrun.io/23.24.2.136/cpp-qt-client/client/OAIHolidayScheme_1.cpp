/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHolidayScheme_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHolidayScheme_1::OAIHolidayScheme_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHolidayScheme_1::OAIHolidayScheme_1() {
    this->initializeModel();
}

OAIHolidayScheme_1::~OAIHolidayScheme_1() {}

void OAIHolidayScheme_1::initializeModel() {

    m_accrual_pay_codes_isSet = false;
    m_accrual_pay_codes_isValid = false;

    m_allow_exceed_annual_entitlement_isSet = false;
    m_allow_exceed_annual_entitlement_isValid = false;

    m_allow_negative_balance_isSet = false;
    m_allow_negative_balance_isValid = false;

    m_annual_entitlement_weeks_isSet = false;
    m_annual_entitlement_weeks_isValid = false;

    m_bank_holiday_inclusive_isSet = false;
    m_bank_holiday_inclusive_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_max_carry_over_days_isSet = false;
    m_max_carry_over_days_isValid = false;

    m_next_revision_date_isSet = false;
    m_next_revision_date_isValid = false;

    m_offset_payment_isSet = false;
    m_offset_payment_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_scheme_ceased_date_isSet = false;
    m_scheme_ceased_date_isValid = false;

    m_scheme_key_isSet = false;
    m_scheme_key_isValid = false;

    m_scheme_name_isSet = false;
    m_scheme_name_isValid = false;

    m_year_start_day_isSet = false;
    m_year_start_day_isValid = false;

    m_year_start_month_isSet = false;
    m_year_start_month_isValid = false;
}

void OAIHolidayScheme_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHolidayScheme_1::fromJsonObject(QJsonObject json) {

    m_accrual_pay_codes_isValid = ::OpenAPI::fromJsonValue(m_accrual_pay_codes, json[QString("AccrualPayCodes")]);
    m_accrual_pay_codes_isSet = !json[QString("AccrualPayCodes")].isNull() && m_accrual_pay_codes_isValid;

    m_allow_exceed_annual_entitlement_isValid = ::OpenAPI::fromJsonValue(m_allow_exceed_annual_entitlement, json[QString("AllowExceedAnnualEntitlement")]);
    m_allow_exceed_annual_entitlement_isSet = !json[QString("AllowExceedAnnualEntitlement")].isNull() && m_allow_exceed_annual_entitlement_isValid;

    m_allow_negative_balance_isValid = ::OpenAPI::fromJsonValue(m_allow_negative_balance, json[QString("AllowNegativeBalance")]);
    m_allow_negative_balance_isSet = !json[QString("AllowNegativeBalance")].isNull() && m_allow_negative_balance_isValid;

    m_annual_entitlement_weeks_isValid = ::OpenAPI::fromJsonValue(m_annual_entitlement_weeks, json[QString("AnnualEntitlementWeeks")]);
    m_annual_entitlement_weeks_isSet = !json[QString("AnnualEntitlementWeeks")].isNull() && m_annual_entitlement_weeks_isValid;

    m_bank_holiday_inclusive_isValid = ::OpenAPI::fromJsonValue(m_bank_holiday_inclusive, json[QString("BankHolidayInclusive")]);
    m_bank_holiday_inclusive_isSet = !json[QString("BankHolidayInclusive")].isNull() && m_bank_holiday_inclusive_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("EffectiveDate")]);
    m_effective_date_isSet = !json[QString("EffectiveDate")].isNull() && m_effective_date_isValid;

    m_max_carry_over_days_isValid = ::OpenAPI::fromJsonValue(m_max_carry_over_days, json[QString("MaxCarryOverDays")]);
    m_max_carry_over_days_isSet = !json[QString("MaxCarryOverDays")].isNull() && m_max_carry_over_days_isValid;

    m_next_revision_date_isValid = ::OpenAPI::fromJsonValue(m_next_revision_date, json[QString("NextRevisionDate")]);
    m_next_revision_date_isSet = !json[QString("NextRevisionDate")].isNull() && m_next_revision_date_isValid;

    m_offset_payment_isValid = ::OpenAPI::fromJsonValue(m_offset_payment, json[QString("OffsetPayment")]);
    m_offset_payment_isSet = !json[QString("OffsetPayment")].isNull() && m_offset_payment_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("Revision")]);
    m_revision_isSet = !json[QString("Revision")].isNull() && m_revision_isValid;

    m_scheme_ceased_date_isValid = ::OpenAPI::fromJsonValue(m_scheme_ceased_date, json[QString("SchemeCeasedDate")]);
    m_scheme_ceased_date_isSet = !json[QString("SchemeCeasedDate")].isNull() && m_scheme_ceased_date_isValid;

    m_scheme_key_isValid = ::OpenAPI::fromJsonValue(m_scheme_key, json[QString("SchemeKey")]);
    m_scheme_key_isSet = !json[QString("SchemeKey")].isNull() && m_scheme_key_isValid;

    m_scheme_name_isValid = ::OpenAPI::fromJsonValue(m_scheme_name, json[QString("SchemeName")]);
    m_scheme_name_isSet = !json[QString("SchemeName")].isNull() && m_scheme_name_isValid;

    m_year_start_day_isValid = ::OpenAPI::fromJsonValue(m_year_start_day, json[QString("YearStartDay")]);
    m_year_start_day_isSet = !json[QString("YearStartDay")].isNull() && m_year_start_day_isValid;

    m_year_start_month_isValid = ::OpenAPI::fromJsonValue(m_year_start_month, json[QString("YearStartMonth")]);
    m_year_start_month_isSet = !json[QString("YearStartMonth")].isNull() && m_year_start_month_isValid;
}

QString OAIHolidayScheme_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHolidayScheme_1::asJsonObject() const {
    QJsonObject obj;
    if (m_accrual_pay_codes.isSet()) {
        obj.insert(QString("AccrualPayCodes"), ::OpenAPI::toJsonValue(m_accrual_pay_codes));
    }
    if (m_allow_exceed_annual_entitlement_isSet) {
        obj.insert(QString("AllowExceedAnnualEntitlement"), ::OpenAPI::toJsonValue(m_allow_exceed_annual_entitlement));
    }
    if (m_allow_negative_balance_isSet) {
        obj.insert(QString("AllowNegativeBalance"), ::OpenAPI::toJsonValue(m_allow_negative_balance));
    }
    if (m_annual_entitlement_weeks_isSet) {
        obj.insert(QString("AnnualEntitlementWeeks"), ::OpenAPI::toJsonValue(m_annual_entitlement_weeks));
    }
    if (m_bank_holiday_inclusive_isSet) {
        obj.insert(QString("BankHolidayInclusive"), ::OpenAPI::toJsonValue(m_bank_holiday_inclusive));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("EffectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_max_carry_over_days_isSet) {
        obj.insert(QString("MaxCarryOverDays"), ::OpenAPI::toJsonValue(m_max_carry_over_days));
    }
    if (m_next_revision_date_isSet) {
        obj.insert(QString("NextRevisionDate"), ::OpenAPI::toJsonValue(m_next_revision_date));
    }
    if (m_offset_payment_isSet) {
        obj.insert(QString("OffsetPayment"), ::OpenAPI::toJsonValue(m_offset_payment));
    }
    if (m_revision_isSet) {
        obj.insert(QString("Revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_scheme_ceased_date_isSet) {
        obj.insert(QString("SchemeCeasedDate"), ::OpenAPI::toJsonValue(m_scheme_ceased_date));
    }
    if (m_scheme_key_isSet) {
        obj.insert(QString("SchemeKey"), ::OpenAPI::toJsonValue(m_scheme_key));
    }
    if (m_scheme_name_isSet) {
        obj.insert(QString("SchemeName"), ::OpenAPI::toJsonValue(m_scheme_name));
    }
    if (m_year_start_day_isSet) {
        obj.insert(QString("YearStartDay"), ::OpenAPI::toJsonValue(m_year_start_day));
    }
    if (m_year_start_month_isSet) {
        obj.insert(QString("YearStartMonth"), ::OpenAPI::toJsonValue(m_year_start_month));
    }
    return obj;
}

OAIAccrualPayCodes OAIHolidayScheme_1::getAccrualPayCodes() const {
    return m_accrual_pay_codes;
}
void OAIHolidayScheme_1::setAccrualPayCodes(const OAIAccrualPayCodes &accrual_pay_codes) {
    m_accrual_pay_codes = accrual_pay_codes;
    m_accrual_pay_codes_isSet = true;
}

bool OAIHolidayScheme_1::is_accrual_pay_codes_Set() const{
    return m_accrual_pay_codes_isSet;
}

bool OAIHolidayScheme_1::is_accrual_pay_codes_Valid() const{
    return m_accrual_pay_codes_isValid;
}

bool OAIHolidayScheme_1::isAllowExceedAnnualEntitlement() const {
    return m_allow_exceed_annual_entitlement;
}
void OAIHolidayScheme_1::setAllowExceedAnnualEntitlement(const bool &allow_exceed_annual_entitlement) {
    m_allow_exceed_annual_entitlement = allow_exceed_annual_entitlement;
    m_allow_exceed_annual_entitlement_isSet = true;
}

bool OAIHolidayScheme_1::is_allow_exceed_annual_entitlement_Set() const{
    return m_allow_exceed_annual_entitlement_isSet;
}

bool OAIHolidayScheme_1::is_allow_exceed_annual_entitlement_Valid() const{
    return m_allow_exceed_annual_entitlement_isValid;
}

bool OAIHolidayScheme_1::isAllowNegativeBalance() const {
    return m_allow_negative_balance;
}
void OAIHolidayScheme_1::setAllowNegativeBalance(const bool &allow_negative_balance) {
    m_allow_negative_balance = allow_negative_balance;
    m_allow_negative_balance_isSet = true;
}

bool OAIHolidayScheme_1::is_allow_negative_balance_Set() const{
    return m_allow_negative_balance_isSet;
}

bool OAIHolidayScheme_1::is_allow_negative_balance_Valid() const{
    return m_allow_negative_balance_isValid;
}

double OAIHolidayScheme_1::getAnnualEntitlementWeeks() const {
    return m_annual_entitlement_weeks;
}
void OAIHolidayScheme_1::setAnnualEntitlementWeeks(const double &annual_entitlement_weeks) {
    m_annual_entitlement_weeks = annual_entitlement_weeks;
    m_annual_entitlement_weeks_isSet = true;
}

bool OAIHolidayScheme_1::is_annual_entitlement_weeks_Set() const{
    return m_annual_entitlement_weeks_isSet;
}

bool OAIHolidayScheme_1::is_annual_entitlement_weeks_Valid() const{
    return m_annual_entitlement_weeks_isValid;
}

bool OAIHolidayScheme_1::isBankHolidayInclusive() const {
    return m_bank_holiday_inclusive;
}
void OAIHolidayScheme_1::setBankHolidayInclusive(const bool &bank_holiday_inclusive) {
    m_bank_holiday_inclusive = bank_holiday_inclusive;
    m_bank_holiday_inclusive_isSet = true;
}

bool OAIHolidayScheme_1::is_bank_holiday_inclusive_Set() const{
    return m_bank_holiday_inclusive_isSet;
}

bool OAIHolidayScheme_1::is_bank_holiday_inclusive_Valid() const{
    return m_bank_holiday_inclusive_isValid;
}

QString OAIHolidayScheme_1::getCode() const {
    return m_code;
}
void OAIHolidayScheme_1::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIHolidayScheme_1::is_code_Set() const{
    return m_code_isSet;
}

bool OAIHolidayScheme_1::is_code_Valid() const{
    return m_code_isValid;
}

QDate OAIHolidayScheme_1::getEffectiveDate() const {
    return m_effective_date;
}
void OAIHolidayScheme_1::setEffectiveDate(const QDate &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIHolidayScheme_1::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIHolidayScheme_1::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

double OAIHolidayScheme_1::getMaxCarryOverDays() const {
    return m_max_carry_over_days;
}
void OAIHolidayScheme_1::setMaxCarryOverDays(const double &max_carry_over_days) {
    m_max_carry_over_days = max_carry_over_days;
    m_max_carry_over_days_isSet = true;
}

bool OAIHolidayScheme_1::is_max_carry_over_days_Set() const{
    return m_max_carry_over_days_isSet;
}

bool OAIHolidayScheme_1::is_max_carry_over_days_Valid() const{
    return m_max_carry_over_days_isValid;
}

QDate OAIHolidayScheme_1::getNextRevisionDate() const {
    return m_next_revision_date;
}
void OAIHolidayScheme_1::setNextRevisionDate(const QDate &next_revision_date) {
    m_next_revision_date = next_revision_date;
    m_next_revision_date_isSet = true;
}

bool OAIHolidayScheme_1::is_next_revision_date_Set() const{
    return m_next_revision_date_isSet;
}

bool OAIHolidayScheme_1::is_next_revision_date_Valid() const{
    return m_next_revision_date_isValid;
}

bool OAIHolidayScheme_1::isOffsetPayment() const {
    return m_offset_payment;
}
void OAIHolidayScheme_1::setOffsetPayment(const bool &offset_payment) {
    m_offset_payment = offset_payment;
    m_offset_payment_isSet = true;
}

bool OAIHolidayScheme_1::is_offset_payment_Set() const{
    return m_offset_payment_isSet;
}

bool OAIHolidayScheme_1::is_offset_payment_Valid() const{
    return m_offset_payment_isValid;
}

qint32 OAIHolidayScheme_1::getRevision() const {
    return m_revision;
}
void OAIHolidayScheme_1::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIHolidayScheme_1::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIHolidayScheme_1::is_revision_Valid() const{
    return m_revision_isValid;
}

QDate OAIHolidayScheme_1::getSchemeCeasedDate() const {
    return m_scheme_ceased_date;
}
void OAIHolidayScheme_1::setSchemeCeasedDate(const QDate &scheme_ceased_date) {
    m_scheme_ceased_date = scheme_ceased_date;
    m_scheme_ceased_date_isSet = true;
}

bool OAIHolidayScheme_1::is_scheme_ceased_date_Set() const{
    return m_scheme_ceased_date_isSet;
}

bool OAIHolidayScheme_1::is_scheme_ceased_date_Valid() const{
    return m_scheme_ceased_date_isValid;
}

QString OAIHolidayScheme_1::getSchemeKey() const {
    return m_scheme_key;
}
void OAIHolidayScheme_1::setSchemeKey(const QString &scheme_key) {
    m_scheme_key = scheme_key;
    m_scheme_key_isSet = true;
}

bool OAIHolidayScheme_1::is_scheme_key_Set() const{
    return m_scheme_key_isSet;
}

bool OAIHolidayScheme_1::is_scheme_key_Valid() const{
    return m_scheme_key_isValid;
}

QString OAIHolidayScheme_1::getSchemeName() const {
    return m_scheme_name;
}
void OAIHolidayScheme_1::setSchemeName(const QString &scheme_name) {
    m_scheme_name = scheme_name;
    m_scheme_name_isSet = true;
}

bool OAIHolidayScheme_1::is_scheme_name_Set() const{
    return m_scheme_name_isSet;
}

bool OAIHolidayScheme_1::is_scheme_name_Valid() const{
    return m_scheme_name_isValid;
}

qint32 OAIHolidayScheme_1::getYearStartDay() const {
    return m_year_start_day;
}
void OAIHolidayScheme_1::setYearStartDay(const qint32 &year_start_day) {
    m_year_start_day = year_start_day;
    m_year_start_day_isSet = true;
}

bool OAIHolidayScheme_1::is_year_start_day_Set() const{
    return m_year_start_day_isSet;
}

bool OAIHolidayScheme_1::is_year_start_day_Valid() const{
    return m_year_start_day_isValid;
}

qint32 OAIHolidayScheme_1::getYearStartMonth() const {
    return m_year_start_month;
}
void OAIHolidayScheme_1::setYearStartMonth(const qint32 &year_start_month) {
    m_year_start_month = year_start_month;
    m_year_start_month_isSet = true;
}

bool OAIHolidayScheme_1::is_year_start_month_Set() const{
    return m_year_start_month_isSet;
}

bool OAIHolidayScheme_1::is_year_start_month_Valid() const{
    return m_year_start_month_isValid;
}

bool OAIHolidayScheme_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accrual_pay_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_exceed_annual_entitlement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_negative_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annual_entitlement_weeks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_holiday_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_carry_over_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_revision_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_ceased_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_start_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_start_month_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHolidayScheme_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
