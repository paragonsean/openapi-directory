/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEmployerApi_H
#define OAI_OAIEmployerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEmployer.h"
#include "OAIEmployerSecret.h"
#include "OAIEmployerSummary.h"
#include "OAIErrorModel.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEmployerApi : public QObject {
    Q_OBJECT

public:
    OAIEmployerApi(const int timeOut = 0);
    ~OAIEmployerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteEmployerRevision(const QString &employer_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteEmployerRevisionByNumber(const QString &employer_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  secret_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteEmployerSecret(const QString &employer_id, const QString &secret_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllEmployerTags(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerByEffectiveDate(const QString &employer_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerRevisionByNumber(const QString &employer_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerRevisionSummaries(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerRevisionSummaryByNumber(const QString &employer_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerRevisions(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  secret_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerSecret(const QString &employer_id, const QString &secret_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerSecrets(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerSummaries(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerSummariesByEffectiveDate(const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerSummary(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerSummaryByEffectiveDate(const QString &employer_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployers(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployersByEffectiveDate(const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployersWithTag(const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_employer OAIEmployer [required]
    */
    virtual void patchEmployer(const QString &employer_id, const QString &authorization, const QString &api_version, const OAIEmployer &oai_employer);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_employer OAIEmployer [required]
    */
    virtual void postEmployer(const QString &authorization, const QString &api_version, const OAIEmployer &oai_employer);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void postEmployerSecret(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_employer OAIEmployer [required]
    */
    virtual void putEmployer(const QString &employer_id, const QString &authorization, const QString &api_version, const OAIEmployer &oai_employer);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  secret_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void putEmployerSecret(const QString &employer_id, const QString &secret_id, const QString &authorization, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteEmployerCallback(OAIHttpRequestWorker *worker);
    void deleteEmployerRevisionCallback(OAIHttpRequestWorker *worker);
    void deleteEmployerRevisionByNumberCallback(OAIHttpRequestWorker *worker);
    void deleteEmployerSecretCallback(OAIHttpRequestWorker *worker);
    void getAllEmployerTagsCallback(OAIHttpRequestWorker *worker);
    void getEmployerCallback(OAIHttpRequestWorker *worker);
    void getEmployerByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getEmployerRevisionByNumberCallback(OAIHttpRequestWorker *worker);
    void getEmployerRevisionSummariesCallback(OAIHttpRequestWorker *worker);
    void getEmployerRevisionSummaryByNumberCallback(OAIHttpRequestWorker *worker);
    void getEmployerRevisionsCallback(OAIHttpRequestWorker *worker);
    void getEmployerSecretCallback(OAIHttpRequestWorker *worker);
    void getEmployerSecretsCallback(OAIHttpRequestWorker *worker);
    void getEmployerSummariesCallback(OAIHttpRequestWorker *worker);
    void getEmployerSummariesByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getEmployerSummaryCallback(OAIHttpRequestWorker *worker);
    void getEmployerSummaryByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getEmployersCallback(OAIHttpRequestWorker *worker);
    void getEmployersByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getEmployersWithTagCallback(OAIHttpRequestWorker *worker);
    void patchEmployerCallback(OAIHttpRequestWorker *worker);
    void postEmployerCallback(OAIHttpRequestWorker *worker);
    void postEmployerSecretCallback(OAIHttpRequestWorker *worker);
    void putEmployerCallback(OAIHttpRequestWorker *worker);
    void putEmployerSecretCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteEmployerSignal();
    void deleteEmployerRevisionSignal();
    void deleteEmployerRevisionByNumberSignal();
    void deleteEmployerSecretSignal();
    void getAllEmployerTagsSignal(OAILinkCollection summary);
    void getEmployerSignal(OAIEmployer summary);
    void getEmployerByEffectiveDateSignal(OAIEmployer summary);
    void getEmployerRevisionByNumberSignal(OAIEmployer summary);
    void getEmployerRevisionSummariesSignal(OAILinkCollection summary);
    void getEmployerRevisionSummaryByNumberSignal(OAIEmployerSummary summary);
    void getEmployerRevisionsSignal(OAILinkCollection summary);
    void getEmployerSecretSignal(OAIEmployerSecret summary);
    void getEmployerSecretsSignal(OAILinkCollection summary);
    void getEmployerSummariesSignal(OAILinkCollection summary);
    void getEmployerSummariesByEffectiveDateSignal(OAILinkCollection summary);
    void getEmployerSummarySignal(OAIEmployerSummary summary);
    void getEmployerSummaryByEffectiveDateSignal(OAIEmployerSummary summary);
    void getEmployersSignal(OAILinkCollection summary);
    void getEmployersByEffectiveDateSignal(OAILinkCollection summary);
    void getEmployersWithTagSignal(OAILinkCollection summary);
    void patchEmployerSignal(OAIEmployer summary);
    void postEmployerSignal(OAILink summary);
    void postEmployerSecretSignal(OAILink summary);
    void putEmployerSignal(OAIEmployer summary);
    void putEmployerSecretSignal(OAIEmployerSecret summary);


    void deleteEmployerSignalFull(OAIHttpRequestWorker *worker);
    void deleteEmployerRevisionSignalFull(OAIHttpRequestWorker *worker);
    void deleteEmployerRevisionByNumberSignalFull(OAIHttpRequestWorker *worker);
    void deleteEmployerSecretSignalFull(OAIHttpRequestWorker *worker);
    void getAllEmployerTagsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployerSignalFull(OAIHttpRequestWorker *worker, OAIEmployer summary);
    void getEmployerByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAIEmployer summary);
    void getEmployerRevisionByNumberSignalFull(OAIHttpRequestWorker *worker, OAIEmployer summary);
    void getEmployerRevisionSummariesSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployerRevisionSummaryByNumberSignalFull(OAIHttpRequestWorker *worker, OAIEmployerSummary summary);
    void getEmployerRevisionsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployerSecretSignalFull(OAIHttpRequestWorker *worker, OAIEmployerSecret summary);
    void getEmployerSecretsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployerSummariesSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployerSummariesByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployerSummarySignalFull(OAIHttpRequestWorker *worker, OAIEmployerSummary summary);
    void getEmployerSummaryByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAIEmployerSummary summary);
    void getEmployersSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployersByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployersWithTagSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void patchEmployerSignalFull(OAIHttpRequestWorker *worker, OAIEmployer summary);
    void postEmployerSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void postEmployerSecretSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putEmployerSignalFull(OAIHttpRequestWorker *worker, OAIEmployer summary);
    void putEmployerSecretSignalFull(OAIHttpRequestWorker *worker, OAIEmployerSecret summary);

    Q_DECL_DEPRECATED_X("Use deleteEmployerSignalError() instead")
    void deleteEmployerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmployerRevisionSignalError() instead")
    void deleteEmployerRevisionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployerRevisionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmployerRevisionByNumberSignalError() instead")
    void deleteEmployerRevisionByNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployerRevisionByNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmployerSecretSignalError() instead")
    void deleteEmployerSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployerSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllEmployerTagsSignalError() instead")
    void getAllEmployerTagsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllEmployerTagsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSignalError() instead")
    void getEmployerSignalE(OAIEmployer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSignalError(OAIEmployer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerByEffectiveDateSignalError() instead")
    void getEmployerByEffectiveDateSignalE(OAIEmployer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerByEffectiveDateSignalError(OAIEmployer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerRevisionByNumberSignalError() instead")
    void getEmployerRevisionByNumberSignalE(OAIEmployer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerRevisionByNumberSignalError(OAIEmployer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerRevisionSummariesSignalError() instead")
    void getEmployerRevisionSummariesSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerRevisionSummariesSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerRevisionSummaryByNumberSignalError() instead")
    void getEmployerRevisionSummaryByNumberSignalE(OAIEmployerSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerRevisionSummaryByNumberSignalError(OAIEmployerSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerRevisionsSignalError() instead")
    void getEmployerRevisionsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerRevisionsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSecretSignalError() instead")
    void getEmployerSecretSignalE(OAIEmployerSecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSecretSignalError(OAIEmployerSecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSecretsSignalError() instead")
    void getEmployerSecretsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSecretsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSummariesSignalError() instead")
    void getEmployerSummariesSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSummariesSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSummariesByEffectiveDateSignalError() instead")
    void getEmployerSummariesByEffectiveDateSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSummariesByEffectiveDateSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSummarySignalError() instead")
    void getEmployerSummarySignalE(OAIEmployerSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSummarySignalError(OAIEmployerSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSummaryByEffectiveDateSignalError() instead")
    void getEmployerSummaryByEffectiveDateSignalE(OAIEmployerSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSummaryByEffectiveDateSignalError(OAIEmployerSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployersSignalError() instead")
    void getEmployersSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployersSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployersByEffectiveDateSignalError() instead")
    void getEmployersByEffectiveDateSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployersByEffectiveDateSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployersWithTagSignalError() instead")
    void getEmployersWithTagSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployersWithTagSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchEmployerSignalError() instead")
    void patchEmployerSignalE(OAIEmployer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchEmployerSignalError(OAIEmployer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEmployerSignalError() instead")
    void postEmployerSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postEmployerSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEmployerSecretSignalError() instead")
    void postEmployerSecretSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postEmployerSecretSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEmployerSignalError() instead")
    void putEmployerSignalE(OAIEmployer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putEmployerSignalError(OAIEmployer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEmployerSecretSignalError() instead")
    void putEmployerSecretSignalE(OAIEmployerSecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putEmployerSecretSignalError(OAIEmployerSecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteEmployerSignalErrorFull() instead")
    void deleteEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmployerRevisionSignalErrorFull() instead")
    void deleteEmployerRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployerRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmployerRevisionByNumberSignalErrorFull() instead")
    void deleteEmployerRevisionByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployerRevisionByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmployerSecretSignalErrorFull() instead")
    void deleteEmployerSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployerSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllEmployerTagsSignalErrorFull() instead")
    void getAllEmployerTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllEmployerTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSignalErrorFull() instead")
    void getEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerByEffectiveDateSignalErrorFull() instead")
    void getEmployerByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerRevisionByNumberSignalErrorFull() instead")
    void getEmployerRevisionByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerRevisionByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerRevisionSummariesSignalErrorFull() instead")
    void getEmployerRevisionSummariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerRevisionSummariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerRevisionSummaryByNumberSignalErrorFull() instead")
    void getEmployerRevisionSummaryByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerRevisionSummaryByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerRevisionsSignalErrorFull() instead")
    void getEmployerRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSecretSignalErrorFull() instead")
    void getEmployerSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSecretsSignalErrorFull() instead")
    void getEmployerSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSummariesSignalErrorFull() instead")
    void getEmployerSummariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSummariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSummariesByEffectiveDateSignalErrorFull() instead")
    void getEmployerSummariesByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSummariesByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSummarySignalErrorFull() instead")
    void getEmployerSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSummaryByEffectiveDateSignalErrorFull() instead")
    void getEmployerSummaryByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSummaryByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployersSignalErrorFull() instead")
    void getEmployersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployersByEffectiveDateSignalErrorFull() instead")
    void getEmployersByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployersByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployersWithTagSignalErrorFull() instead")
    void getEmployersWithTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployersWithTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchEmployerSignalErrorFull() instead")
    void patchEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEmployerSignalErrorFull() instead")
    void postEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEmployerSecretSignalErrorFull() instead")
    void postEmployerSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postEmployerSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEmployerSignalErrorFull() instead")
    void putEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEmployerSecretSignalErrorFull() instead")
    void putEmployerSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putEmployerSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
