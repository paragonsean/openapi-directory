/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJournalInstruction_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJournalInstruction_1::OAIJournalInstruction_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJournalInstruction_1::OAIJournalInstruction_1() {
    this->initializeModel();
}

OAIJournalInstruction_1::~OAIJournalInstruction_1() {}

void OAIJournalInstruction_1::initializeModel() {

    m_accounting_type_isSet = false;
    m_accounting_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_journal_line_tag_isSet = false;
    m_journal_line_tag_isValid = false;

    m_ledger_target_isSet = false;
    m_ledger_target_isValid = false;

    m_nom_code_isSet = false;
    m_nom_code_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_sub_nom_code_isSet = false;
    m_sub_nom_code_isValid = false;
}

void OAIJournalInstruction_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJournalInstruction_1::fromJsonObject(QJsonObject json) {

    m_accounting_type_isValid = ::OpenAPI::fromJsonValue(m_accounting_type, json[QString("AccountingType")]);
    m_accounting_type_isSet = !json[QString("AccountingType")].isNull() && m_accounting_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;

    m_journal_line_tag_isValid = ::OpenAPI::fromJsonValue(m_journal_line_tag, json[QString("JournalLineTag")]);
    m_journal_line_tag_isSet = !json[QString("JournalLineTag")].isNull() && m_journal_line_tag_isValid;

    m_ledger_target_isValid = ::OpenAPI::fromJsonValue(m_ledger_target, json[QString("LedgerTarget")]);
    m_ledger_target_isSet = !json[QString("LedgerTarget")].isNull() && m_ledger_target_isValid;

    m_nom_code_isValid = ::OpenAPI::fromJsonValue(m_nom_code, json[QString("NomCode")]);
    m_nom_code_isSet = !json[QString("NomCode")].isNull() && m_nom_code_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_sub_nom_code_isValid = ::OpenAPI::fromJsonValue(m_sub_nom_code, json[QString("SubNomCode")]);
    m_sub_nom_code_isSet = !json[QString("SubNomCode")].isNull() && m_sub_nom_code_isValid;
}

QString OAIJournalInstruction_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJournalInstruction_1::asJsonObject() const {
    QJsonObject obj;
    if (m_accounting_type_isSet) {
        obj.insert(QString("AccountingType"), ::OpenAPI::toJsonValue(m_accounting_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_journal_line_tag_isSet) {
        obj.insert(QString("JournalLineTag"), ::OpenAPI::toJsonValue(m_journal_line_tag));
    }
    if (m_ledger_target_isSet) {
        obj.insert(QString("LedgerTarget"), ::OpenAPI::toJsonValue(m_ledger_target));
    }
    if (m_nom_code_isSet) {
        obj.insert(QString("NomCode"), ::OpenAPI::toJsonValue(m_nom_code));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_sub_nom_code_isSet) {
        obj.insert(QString("SubNomCode"), ::OpenAPI::toJsonValue(m_sub_nom_code));
    }
    return obj;
}

QString OAIJournalInstruction_1::getAccountingType() const {
    return m_accounting_type;
}
void OAIJournalInstruction_1::setAccountingType(const QString &accounting_type) {
    m_accounting_type = accounting_type;
    m_accounting_type_isSet = true;
}

bool OAIJournalInstruction_1::is_accounting_type_Set() const{
    return m_accounting_type_isSet;
}

bool OAIJournalInstruction_1::is_accounting_type_Valid() const{
    return m_accounting_type_isValid;
}

QString OAIJournalInstruction_1::getDescription() const {
    return m_description;
}
void OAIJournalInstruction_1::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIJournalInstruction_1::is_description_Set() const{
    return m_description_isSet;
}

bool OAIJournalInstruction_1::is_description_Valid() const{
    return m_description_isValid;
}

QDate OAIJournalInstruction_1::getEndDate() const {
    return m_end_date;
}
void OAIJournalInstruction_1::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIJournalInstruction_1::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIJournalInstruction_1::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIJournalInstruction_1::getExpression() const {
    return m_expression;
}
void OAIJournalInstruction_1::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIJournalInstruction_1::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIJournalInstruction_1::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIJournalInstruction_1::getJournalLineTag() const {
    return m_journal_line_tag;
}
void OAIJournalInstruction_1::setJournalLineTag(const QString &journal_line_tag) {
    m_journal_line_tag = journal_line_tag;
    m_journal_line_tag_isSet = true;
}

bool OAIJournalInstruction_1::is_journal_line_tag_Set() const{
    return m_journal_line_tag_isSet;
}

bool OAIJournalInstruction_1::is_journal_line_tag_Valid() const{
    return m_journal_line_tag_isValid;
}

QString OAIJournalInstruction_1::getLedgerTarget() const {
    return m_ledger_target;
}
void OAIJournalInstruction_1::setLedgerTarget(const QString &ledger_target) {
    m_ledger_target = ledger_target;
    m_ledger_target_isSet = true;
}

bool OAIJournalInstruction_1::is_ledger_target_Set() const{
    return m_ledger_target_isSet;
}

bool OAIJournalInstruction_1::is_ledger_target_Valid() const{
    return m_ledger_target_isValid;
}

QString OAIJournalInstruction_1::getNomCode() const {
    return m_nom_code;
}
void OAIJournalInstruction_1::setNomCode(const QString &nom_code) {
    m_nom_code = nom_code;
    m_nom_code_isSet = true;
}

bool OAIJournalInstruction_1::is_nom_code_Set() const{
    return m_nom_code_isSet;
}

bool OAIJournalInstruction_1::is_nom_code_Valid() const{
    return m_nom_code_isValid;
}

QDate OAIJournalInstruction_1::getStartDate() const {
    return m_start_date;
}
void OAIJournalInstruction_1::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIJournalInstruction_1::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIJournalInstruction_1::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIJournalInstruction_1::getSubNomCode() const {
    return m_sub_nom_code;
}
void OAIJournalInstruction_1::setSubNomCode(const QString &sub_nom_code) {
    m_sub_nom_code = sub_nom_code;
    m_sub_nom_code_isSet = true;
}

bool OAIJournalInstruction_1::is_sub_nom_code_Set() const{
    return m_sub_nom_code_isSet;
}

bool OAIJournalInstruction_1::is_sub_nom_code_Valid() const{
    return m_sub_nom_code_isValid;
}

bool OAIJournalInstruction_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounting_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journal_line_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ledger_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nom_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_nom_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJournalInstruction_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
