/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayLine_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayLine_1::OAIPayLine_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayLine_1::OAIPayLine_1() {
    this->initializeModel();
}

OAIPayLine_1::~OAIPayLine_1() {}

void OAIPayLine_1::initializeModel() {

    m_calculator_isSet = false;
    m_calculator_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_generated_isSet = false;
    m_generated_isValid = false;

    m_pay_code_isSet = false;
    m_pay_code_isValid = false;

    m_pay_code_type_isSet = false;
    m_pay_code_type_isValid = false;

    m_pay_run_sequence_isSet = false;
    m_pay_run_sequence_isValid = false;

    m_payment_date_isSet = false;
    m_payment_date_isValid = false;

    m_tax_period_isSet = false;
    m_tax_period_isValid = false;

    m_tax_year_isSet = false;
    m_tax_year_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPayLine_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayLine_1::fromJsonObject(QJsonObject json) {

    m_calculator_isValid = ::OpenAPI::fromJsonValue(m_calculator, json[QString("Calculator")]);
    m_calculator_isSet = !json[QString("Calculator")].isNull() && m_calculator_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_generated_isValid = ::OpenAPI::fromJsonValue(m_generated, json[QString("Generated")]);
    m_generated_isSet = !json[QString("Generated")].isNull() && m_generated_isValid;

    m_pay_code_isValid = ::OpenAPI::fromJsonValue(m_pay_code, json[QString("PayCode")]);
    m_pay_code_isSet = !json[QString("PayCode")].isNull() && m_pay_code_isValid;

    m_pay_code_type_isValid = ::OpenAPI::fromJsonValue(m_pay_code_type, json[QString("PayCodeType")]);
    m_pay_code_type_isSet = !json[QString("PayCodeType")].isNull() && m_pay_code_type_isValid;

    m_pay_run_sequence_isValid = ::OpenAPI::fromJsonValue(m_pay_run_sequence, json[QString("PayRunSequence")]);
    m_pay_run_sequence_isSet = !json[QString("PayRunSequence")].isNull() && m_pay_run_sequence_isValid;

    m_payment_date_isValid = ::OpenAPI::fromJsonValue(m_payment_date, json[QString("PaymentDate")]);
    m_payment_date_isSet = !json[QString("PaymentDate")].isNull() && m_payment_date_isValid;

    m_tax_period_isValid = ::OpenAPI::fromJsonValue(m_tax_period, json[QString("TaxPeriod")]);
    m_tax_period_isSet = !json[QString("TaxPeriod")].isNull() && m_tax_period_isValid;

    m_tax_year_isValid = ::OpenAPI::fromJsonValue(m_tax_year, json[QString("TaxYear")]);
    m_tax_year_isSet = !json[QString("TaxYear")].isNull() && m_tax_year_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIPayLine_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayLine_1::asJsonObject() const {
    QJsonObject obj;
    if (m_calculator_isSet) {
        obj.insert(QString("Calculator"), ::OpenAPI::toJsonValue(m_calculator));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_generated_isSet) {
        obj.insert(QString("Generated"), ::OpenAPI::toJsonValue(m_generated));
    }
    if (m_pay_code_isSet) {
        obj.insert(QString("PayCode"), ::OpenAPI::toJsonValue(m_pay_code));
    }
    if (m_pay_code_type_isSet) {
        obj.insert(QString("PayCodeType"), ::OpenAPI::toJsonValue(m_pay_code_type));
    }
    if (m_pay_run_sequence_isSet) {
        obj.insert(QString("PayRunSequence"), ::OpenAPI::toJsonValue(m_pay_run_sequence));
    }
    if (m_payment_date_isSet) {
        obj.insert(QString("PaymentDate"), ::OpenAPI::toJsonValue(m_payment_date));
    }
    if (m_tax_period_isSet) {
        obj.insert(QString("TaxPeriod"), ::OpenAPI::toJsonValue(m_tax_period));
    }
    if (m_tax_year_isSet) {
        obj.insert(QString("TaxYear"), ::OpenAPI::toJsonValue(m_tax_year));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPayLine_1::getCalculator() const {
    return m_calculator;
}
void OAIPayLine_1::setCalculator(const QString &calculator) {
    m_calculator = calculator;
    m_calculator_isSet = true;
}

bool OAIPayLine_1::is_calculator_Set() const{
    return m_calculator_isSet;
}

bool OAIPayLine_1::is_calculator_Valid() const{
    return m_calculator_isValid;
}

QString OAIPayLine_1::getDescription() const {
    return m_description;
}
void OAIPayLine_1::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPayLine_1::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPayLine_1::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIPayLine_1::getGenerated() const {
    return m_generated;
}
void OAIPayLine_1::setGenerated(const QDateTime &generated) {
    m_generated = generated;
    m_generated_isSet = true;
}

bool OAIPayLine_1::is_generated_Set() const{
    return m_generated_isSet;
}

bool OAIPayLine_1::is_generated_Valid() const{
    return m_generated_isValid;
}

QString OAIPayLine_1::getPayCode() const {
    return m_pay_code;
}
void OAIPayLine_1::setPayCode(const QString &pay_code) {
    m_pay_code = pay_code;
    m_pay_code_isSet = true;
}

bool OAIPayLine_1::is_pay_code_Set() const{
    return m_pay_code_isSet;
}

bool OAIPayLine_1::is_pay_code_Valid() const{
    return m_pay_code_isValid;
}

QString OAIPayLine_1::getPayCodeType() const {
    return m_pay_code_type;
}
void OAIPayLine_1::setPayCodeType(const QString &pay_code_type) {
    m_pay_code_type = pay_code_type;
    m_pay_code_type_isSet = true;
}

bool OAIPayLine_1::is_pay_code_type_Set() const{
    return m_pay_code_type_isSet;
}

bool OAIPayLine_1::is_pay_code_type_Valid() const{
    return m_pay_code_type_isValid;
}

qint32 OAIPayLine_1::getPayRunSequence() const {
    return m_pay_run_sequence;
}
void OAIPayLine_1::setPayRunSequence(const qint32 &pay_run_sequence) {
    m_pay_run_sequence = pay_run_sequence;
    m_pay_run_sequence_isSet = true;
}

bool OAIPayLine_1::is_pay_run_sequence_Set() const{
    return m_pay_run_sequence_isSet;
}

bool OAIPayLine_1::is_pay_run_sequence_Valid() const{
    return m_pay_run_sequence_isValid;
}

QDate OAIPayLine_1::getPaymentDate() const {
    return m_payment_date;
}
void OAIPayLine_1::setPaymentDate(const QDate &payment_date) {
    m_payment_date = payment_date;
    m_payment_date_isSet = true;
}

bool OAIPayLine_1::is_payment_date_Set() const{
    return m_payment_date_isSet;
}

bool OAIPayLine_1::is_payment_date_Valid() const{
    return m_payment_date_isValid;
}

qint32 OAIPayLine_1::getTaxPeriod() const {
    return m_tax_period;
}
void OAIPayLine_1::setTaxPeriod(const qint32 &tax_period) {
    m_tax_period = tax_period;
    m_tax_period_isSet = true;
}

bool OAIPayLine_1::is_tax_period_Set() const{
    return m_tax_period_isSet;
}

bool OAIPayLine_1::is_tax_period_Valid() const{
    return m_tax_period_isValid;
}

qint32 OAIPayLine_1::getTaxYear() const {
    return m_tax_year;
}
void OAIPayLine_1::setTaxYear(const qint32 &tax_year) {
    m_tax_year = tax_year;
    m_tax_year_isSet = true;
}

bool OAIPayLine_1::is_tax_year_Set() const{
    return m_tax_year_isSet;
}

bool OAIPayLine_1::is_tax_year_Valid() const{
    return m_tax_year_isValid;
}

double OAIPayLine_1::getValue() const {
    return m_value;
}
void OAIPayLine_1::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPayLine_1::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPayLine_1::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPayLine_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_code_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_run_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayLine_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
