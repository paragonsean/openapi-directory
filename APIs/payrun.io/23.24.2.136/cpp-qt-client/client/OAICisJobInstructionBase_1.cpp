/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICisJobInstructionBase_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICisJobInstructionBase_1::OAICisJobInstructionBase_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICisJobInstructionBase_1::OAICisJobInstructionBase_1() {
    this->initializeModel();
}

OAICisJobInstructionBase_1::~OAICisJobInstructionBase_1() {}

void OAICisJobInstructionBase_1::initializeModel() {

    m_employer_isSet = false;
    m_employer_isValid = false;

    m_holding_date_isSet = false;
    m_holding_date_isValid = false;

    m_sub_contractors_isSet = false;
    m_sub_contractors_isValid = false;
}

void OAICisJobInstructionBase_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICisJobInstructionBase_1::fromJsonObject(QJsonObject json) {

    m_employer_isValid = ::OpenAPI::fromJsonValue(m_employer, json[QString("Employer")]);
    m_employer_isSet = !json[QString("Employer")].isNull() && m_employer_isValid;

    m_holding_date_isValid = ::OpenAPI::fromJsonValue(m_holding_date, json[QString("HoldingDate")]);
    m_holding_date_isSet = !json[QString("HoldingDate")].isNull() && m_holding_date_isValid;

    m_sub_contractors_isValid = ::OpenAPI::fromJsonValue(m_sub_contractors, json[QString("SubContractors")]);
    m_sub_contractors_isSet = !json[QString("SubContractors")].isNull() && m_sub_contractors_isValid;
}

QString OAICisJobInstructionBase_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICisJobInstructionBase_1::asJsonObject() const {
    QJsonObject obj;
    if (m_employer.isSet()) {
        obj.insert(QString("Employer"), ::OpenAPI::toJsonValue(m_employer));
    }
    if (m_holding_date_isSet) {
        obj.insert(QString("HoldingDate"), ::OpenAPI::toJsonValue(m_holding_date));
    }
    if (m_sub_contractors.isSet()) {
        obj.insert(QString("SubContractors"), ::OpenAPI::toJsonValue(m_sub_contractors));
    }
    return obj;
}

OAIEmployer_1 OAICisJobInstructionBase_1::getEmployer() const {
    return m_employer;
}
void OAICisJobInstructionBase_1::setEmployer(const OAIEmployer_1 &employer) {
    m_employer = employer;
    m_employer_isSet = true;
}

bool OAICisJobInstructionBase_1::is_employer_Set() const{
    return m_employer_isSet;
}

bool OAICisJobInstructionBase_1::is_employer_Valid() const{
    return m_employer_isValid;
}

QDateTime OAICisJobInstructionBase_1::getHoldingDate() const {
    return m_holding_date;
}
void OAICisJobInstructionBase_1::setHoldingDate(const QDateTime &holding_date) {
    m_holding_date = holding_date;
    m_holding_date_isSet = true;
}

bool OAICisJobInstructionBase_1::is_holding_date_Set() const{
    return m_holding_date_isSet;
}

bool OAICisJobInstructionBase_1::is_holding_date_Valid() const{
    return m_holding_date_isValid;
}

OAISubContractor_1 OAICisJobInstructionBase_1::getSubContractors() const {
    return m_sub_contractors;
}
void OAICisJobInstructionBase_1::setSubContractors(const OAISubContractor_1 &sub_contractors) {
    m_sub_contractors = sub_contractors;
    m_sub_contractors_isSet = true;
}

bool OAICisJobInstructionBase_1::is_sub_contractors_Set() const{
    return m_sub_contractors_isSet;
}

bool OAICisJobInstructionBase_1::is_sub_contractors_Valid() const{
    return m_sub_contractors_isValid;
}

bool OAICisJobInstructionBase_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_employer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_holding_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_contractors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICisJobInstructionBase_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
