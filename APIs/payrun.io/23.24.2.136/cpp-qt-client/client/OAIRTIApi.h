/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRTIApi_H
#define OAI_OAIRTIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAILinkCollection.h"
#include "OAIRtiTransactionBase.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRTIApi : public QObject {
    Q_OBJECT

public:
    OAIRTIApi(const int timeOut = 0);
    ~OAIRTIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  rti_transaction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteRtiTransaction(const QString &employer_id, const QString &rti_transaction_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllRtiTransactionTags(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  rti_transaction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getRtiTransactionFromEmployer(const QString &employer_id, const QString &rti_transaction_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getRtiTransactionSummariesFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  rti_transaction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getRtiTransactionSummaryFromEmployer(const QString &employer_id, const QString &rti_transaction_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getRtiTransactionsFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getRtiTransactionsWithTag(const QString &employer_id, const QString &tag_id, const QString &authorization, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteRtiTransactionCallback(OAIHttpRequestWorker *worker);
    void getAllRtiTransactionTagsCallback(OAIHttpRequestWorker *worker);
    void getRtiTransactionFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getRtiTransactionSummariesFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getRtiTransactionSummaryFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getRtiTransactionsFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getRtiTransactionsWithTagCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteRtiTransactionSignal();
    void getAllRtiTransactionTagsSignal(OAILinkCollection summary);
    void getRtiTransactionFromEmployerSignal(OAIRtiTransactionBase summary);
    void getRtiTransactionSummariesFromEmployerSignal(OAILinkCollection summary);
    void getRtiTransactionSummaryFromEmployerSignal(OAIRtiTransactionBase summary);
    void getRtiTransactionsFromEmployerSignal(OAILinkCollection summary);
    void getRtiTransactionsWithTagSignal(OAILinkCollection summary);


    void deleteRtiTransactionSignalFull(OAIHttpRequestWorker *worker);
    void getAllRtiTransactionTagsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getRtiTransactionFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAIRtiTransactionBase summary);
    void getRtiTransactionSummariesFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getRtiTransactionSummaryFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAIRtiTransactionBase summary);
    void getRtiTransactionsFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getRtiTransactionsWithTagSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);

    Q_DECL_DEPRECATED_X("Use deleteRtiTransactionSignalError() instead")
    void deleteRtiTransactionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRtiTransactionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllRtiTransactionTagsSignalError() instead")
    void getAllRtiTransactionTagsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllRtiTransactionTagsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiTransactionFromEmployerSignalError() instead")
    void getRtiTransactionFromEmployerSignalE(OAIRtiTransactionBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiTransactionFromEmployerSignalError(OAIRtiTransactionBase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiTransactionSummariesFromEmployerSignalError() instead")
    void getRtiTransactionSummariesFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiTransactionSummariesFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiTransactionSummaryFromEmployerSignalError() instead")
    void getRtiTransactionSummaryFromEmployerSignalE(OAIRtiTransactionBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiTransactionSummaryFromEmployerSignalError(OAIRtiTransactionBase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiTransactionsFromEmployerSignalError() instead")
    void getRtiTransactionsFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiTransactionsFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiTransactionsWithTagSignalError() instead")
    void getRtiTransactionsWithTagSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiTransactionsWithTagSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteRtiTransactionSignalErrorFull() instead")
    void deleteRtiTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRtiTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllRtiTransactionTagsSignalErrorFull() instead")
    void getAllRtiTransactionTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllRtiTransactionTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiTransactionFromEmployerSignalErrorFull() instead")
    void getRtiTransactionFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiTransactionFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiTransactionSummariesFromEmployerSignalErrorFull() instead")
    void getRtiTransactionSummariesFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiTransactionSummariesFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiTransactionSummaryFromEmployerSignalErrorFull() instead")
    void getRtiTransactionSummaryFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiTransactionSummaryFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiTransactionsFromEmployerSignalErrorFull() instead")
    void getRtiTransactionsFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiTransactionsFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiTransactionsWithTagSignalErrorFull() instead")
    void getRtiTransactionsWithTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiTransactionsWithTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
