/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAEAssessmentApi_H
#define OAI_OAIAEAssessmentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAEAssessment.h"
#include "OAIErrorModel.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAEAssessmentApi : public QObject {
    Q_OBJECT

public:
    OAIAEAssessmentApi(const int timeOut = 0);
    ~OAIAEAssessmentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  ae_assessment_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteAEAssessment(const QString &employer_id, const QString &employee_id, const QString &ae_assessment_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  ae_assessment_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAEAssessmentFromEmployee(const QString &employer_id, const QString &employee_id, const QString &ae_assessment_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAEAssessmentsFromEmployee(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAEAssessmentsFromPayRun(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oaiae_assessment OAIAEAssessment [required]
    */
    virtual void postNewAEAssessment(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version, const OAIAEAssessment &oaiae_assessment);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  ae_assessment_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oaiae_assessment OAIAEAssessment [required]
    */
    virtual void putNewAEAssessment(const QString &employer_id, const QString &employee_id, const QString &ae_assessment_id, const QString &authorization, const QString &api_version, const OAIAEAssessment &oaiae_assessment);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAEAssessmentCallback(OAIHttpRequestWorker *worker);
    void getAEAssessmentFromEmployeeCallback(OAIHttpRequestWorker *worker);
    void getAEAssessmentsFromEmployeeCallback(OAIHttpRequestWorker *worker);
    void getAEAssessmentsFromPayRunCallback(OAIHttpRequestWorker *worker);
    void postNewAEAssessmentCallback(OAIHttpRequestWorker *worker);
    void putNewAEAssessmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAEAssessmentSignal();
    void getAEAssessmentFromEmployeeSignal(OAIAEAssessment summary);
    void getAEAssessmentsFromEmployeeSignal(OAILinkCollection summary);
    void getAEAssessmentsFromPayRunSignal(OAILinkCollection summary);
    void postNewAEAssessmentSignal(OAILink summary);
    void putNewAEAssessmentSignal(OAIAEAssessment summary);


    void deleteAEAssessmentSignalFull(OAIHttpRequestWorker *worker);
    void getAEAssessmentFromEmployeeSignalFull(OAIHttpRequestWorker *worker, OAIAEAssessment summary);
    void getAEAssessmentsFromEmployeeSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getAEAssessmentsFromPayRunSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void postNewAEAssessmentSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putNewAEAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIAEAssessment summary);

    Q_DECL_DEPRECATED_X("Use deleteAEAssessmentSignalError() instead")
    void deleteAEAssessmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAEAssessmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAEAssessmentFromEmployeeSignalError() instead")
    void getAEAssessmentFromEmployeeSignalE(OAIAEAssessment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAEAssessmentFromEmployeeSignalError(OAIAEAssessment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAEAssessmentsFromEmployeeSignalError() instead")
    void getAEAssessmentsFromEmployeeSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAEAssessmentsFromEmployeeSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAEAssessmentsFromPayRunSignalError() instead")
    void getAEAssessmentsFromPayRunSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAEAssessmentsFromPayRunSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewAEAssessmentSignalError() instead")
    void postNewAEAssessmentSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewAEAssessmentSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putNewAEAssessmentSignalError() instead")
    void putNewAEAssessmentSignalE(OAIAEAssessment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putNewAEAssessmentSignalError(OAIAEAssessment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAEAssessmentSignalErrorFull() instead")
    void deleteAEAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAEAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAEAssessmentFromEmployeeSignalErrorFull() instead")
    void getAEAssessmentFromEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAEAssessmentFromEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAEAssessmentsFromEmployeeSignalErrorFull() instead")
    void getAEAssessmentsFromEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAEAssessmentsFromEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAEAssessmentsFromPayRunSignalErrorFull() instead")
    void getAEAssessmentsFromPayRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAEAssessmentsFromPayRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewAEAssessmentSignalErrorFull() instead")
    void postNewAEAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewAEAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putNewAEAssessmentSignalErrorFull() instead")
    void putNewAEAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putNewAEAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
