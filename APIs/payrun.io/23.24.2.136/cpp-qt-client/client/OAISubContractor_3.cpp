/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubContractor_3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubContractor_3::OAISubContractor_3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubContractor_3::OAISubContractor_3() {
    this->initializeModel();
}

OAISubContractor_3::~OAISubContractor_3() {}

void OAISubContractor_3::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_bank_account_isSet = false;
    m_bank_account_isValid = false;

    m_business_type_isSet = false;
    m_business_type_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_company_registration_number_isSet = false;
    m_company_registration_number_isValid = false;

    m_deactivated_isSet = false;
    m_deactivated_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_initials_isSet = false;
    m_initials_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_middle_name_isSet = false;
    m_middle_name_isValid = false;

    m_next_revision_date_isSet = false;
    m_next_revision_date_isValid = false;

    m_ni_number_isSet = false;
    m_ni_number_isValid = false;

    m_partnership_name_isSet = false;
    m_partnership_name_isValid = false;

    m_partnership_unique_tax_reference_isSet = false;
    m_partnership_unique_tax_reference_isValid = false;

    m_pay_frequency_isSet = false;
    m_pay_frequency_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_taxation_status_isSet = false;
    m_taxation_status_isValid = false;

    m_telephone_isSet = false;
    m_telephone_isValid = false;

    m_territory_isSet = false;
    m_territory_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_trading_name_isSet = false;
    m_trading_name_isValid = false;

    m_unique_tax_reference_isSet = false;
    m_unique_tax_reference_isValid = false;

    m_vat_registered_isSet = false;
    m_vat_registered_isValid = false;

    m_vat_registration_number_isSet = false;
    m_vat_registration_number_isValid = false;

    m_verification_date_isSet = false;
    m_verification_date_isValid = false;

    m_verification_number_isSet = false;
    m_verification_number_isValid = false;

    m_works_number_isSet = false;
    m_works_number_isValid = false;
}

void OAISubContractor_3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubContractor_3::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_bank_account_isValid = ::OpenAPI::fromJsonValue(m_bank_account, json[QString("BankAccount")]);
    m_bank_account_isSet = !json[QString("BankAccount")].isNull() && m_bank_account_isValid;

    m_business_type_isValid = ::OpenAPI::fromJsonValue(m_business_type, json[QString("BusinessType")]);
    m_business_type_isSet = !json[QString("BusinessType")].isNull() && m_business_type_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("CompanyName")]);
    m_company_name_isSet = !json[QString("CompanyName")].isNull() && m_company_name_isValid;

    m_company_registration_number_isValid = ::OpenAPI::fromJsonValue(m_company_registration_number, json[QString("CompanyRegistrationNumber")]);
    m_company_registration_number_isSet = !json[QString("CompanyRegistrationNumber")].isNull() && m_company_registration_number_isValid;

    m_deactivated_isValid = ::OpenAPI::fromJsonValue(m_deactivated, json[QString("Deactivated")]);
    m_deactivated_isSet = !json[QString("Deactivated")].isNull() && m_deactivated_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("EffectiveDate")]);
    m_effective_date_isSet = !json[QString("EffectiveDate")].isNull() && m_effective_date_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_initials_isValid = ::OpenAPI::fromJsonValue(m_initials, json[QString("Initials")]);
    m_initials_isSet = !json[QString("Initials")].isNull() && m_initials_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("MetaData")]);
    m_meta_data_isSet = !json[QString("MetaData")].isNull() && m_meta_data_isValid;

    m_middle_name_isValid = ::OpenAPI::fromJsonValue(m_middle_name, json[QString("MiddleName")]);
    m_middle_name_isSet = !json[QString("MiddleName")].isNull() && m_middle_name_isValid;

    m_next_revision_date_isValid = ::OpenAPI::fromJsonValue(m_next_revision_date, json[QString("NextRevisionDate")]);
    m_next_revision_date_isSet = !json[QString("NextRevisionDate")].isNull() && m_next_revision_date_isValid;

    m_ni_number_isValid = ::OpenAPI::fromJsonValue(m_ni_number, json[QString("NiNumber")]);
    m_ni_number_isSet = !json[QString("NiNumber")].isNull() && m_ni_number_isValid;

    m_partnership_name_isValid = ::OpenAPI::fromJsonValue(m_partnership_name, json[QString("PartnershipName")]);
    m_partnership_name_isSet = !json[QString("PartnershipName")].isNull() && m_partnership_name_isValid;

    m_partnership_unique_tax_reference_isValid = ::OpenAPI::fromJsonValue(m_partnership_unique_tax_reference, json[QString("PartnershipUniqueTaxReference")]);
    m_partnership_unique_tax_reference_isSet = !json[QString("PartnershipUniqueTaxReference")].isNull() && m_partnership_unique_tax_reference_isValid;

    m_pay_frequency_isValid = ::OpenAPI::fromJsonValue(m_pay_frequency, json[QString("PayFrequency")]);
    m_pay_frequency_isSet = !json[QString("PayFrequency")].isNull() && m_pay_frequency_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("PaymentMethod")]);
    m_payment_method_isSet = !json[QString("PaymentMethod")].isNull() && m_payment_method_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("Revision")]);
    m_revision_isSet = !json[QString("Revision")].isNull() && m_revision_isValid;

    m_taxation_status_isValid = ::OpenAPI::fromJsonValue(m_taxation_status, json[QString("TaxationStatus")]);
    m_taxation_status_isSet = !json[QString("TaxationStatus")].isNull() && m_taxation_status_isValid;

    m_telephone_isValid = ::OpenAPI::fromJsonValue(m_telephone, json[QString("Telephone")]);
    m_telephone_isSet = !json[QString("Telephone")].isNull() && m_telephone_isValid;

    m_territory_isValid = ::OpenAPI::fromJsonValue(m_territory, json[QString("Territory")]);
    m_territory_isSet = !json[QString("Territory")].isNull() && m_territory_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_trading_name_isValid = ::OpenAPI::fromJsonValue(m_trading_name, json[QString("TradingName")]);
    m_trading_name_isSet = !json[QString("TradingName")].isNull() && m_trading_name_isValid;

    m_unique_tax_reference_isValid = ::OpenAPI::fromJsonValue(m_unique_tax_reference, json[QString("UniqueTaxReference")]);
    m_unique_tax_reference_isSet = !json[QString("UniqueTaxReference")].isNull() && m_unique_tax_reference_isValid;

    m_vat_registered_isValid = ::OpenAPI::fromJsonValue(m_vat_registered, json[QString("VatRegistered")]);
    m_vat_registered_isSet = !json[QString("VatRegistered")].isNull() && m_vat_registered_isValid;

    m_vat_registration_number_isValid = ::OpenAPI::fromJsonValue(m_vat_registration_number, json[QString("VatRegistrationNumber")]);
    m_vat_registration_number_isSet = !json[QString("VatRegistrationNumber")].isNull() && m_vat_registration_number_isValid;

    m_verification_date_isValid = ::OpenAPI::fromJsonValue(m_verification_date, json[QString("VerificationDate")]);
    m_verification_date_isSet = !json[QString("VerificationDate")].isNull() && m_verification_date_isValid;

    m_verification_number_isValid = ::OpenAPI::fromJsonValue(m_verification_number, json[QString("VerificationNumber")]);
    m_verification_number_isSet = !json[QString("VerificationNumber")].isNull() && m_verification_number_isValid;

    m_works_number_isValid = ::OpenAPI::fromJsonValue(m_works_number, json[QString("WorksNumber")]);
    m_works_number_isSet = !json[QString("WorksNumber")].isNull() && m_works_number_isValid;
}

QString OAISubContractor_3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubContractor_3::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_bank_account.isSet()) {
        obj.insert(QString("BankAccount"), ::OpenAPI::toJsonValue(m_bank_account));
    }
    if (m_business_type_isSet) {
        obj.insert(QString("BusinessType"), ::OpenAPI::toJsonValue(m_business_type));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("CompanyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_company_registration_number_isSet) {
        obj.insert(QString("CompanyRegistrationNumber"), ::OpenAPI::toJsonValue(m_company_registration_number));
    }
    if (m_deactivated_isSet) {
        obj.insert(QString("Deactivated"), ::OpenAPI::toJsonValue(m_deactivated));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("EffectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_initials_isSet) {
        obj.insert(QString("Initials"), ::OpenAPI::toJsonValue(m_initials));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_meta_data_isSet) {
        obj.insert(QString("MetaData"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_middle_name_isSet) {
        obj.insert(QString("MiddleName"), ::OpenAPI::toJsonValue(m_middle_name));
    }
    if (m_next_revision_date_isSet) {
        obj.insert(QString("NextRevisionDate"), ::OpenAPI::toJsonValue(m_next_revision_date));
    }
    if (m_ni_number_isSet) {
        obj.insert(QString("NiNumber"), ::OpenAPI::toJsonValue(m_ni_number));
    }
    if (m_partnership_name_isSet) {
        obj.insert(QString("PartnershipName"), ::OpenAPI::toJsonValue(m_partnership_name));
    }
    if (m_partnership_unique_tax_reference_isSet) {
        obj.insert(QString("PartnershipUniqueTaxReference"), ::OpenAPI::toJsonValue(m_partnership_unique_tax_reference));
    }
    if (m_pay_frequency_isSet) {
        obj.insert(QString("PayFrequency"), ::OpenAPI::toJsonValue(m_pay_frequency));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("PaymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_revision_isSet) {
        obj.insert(QString("Revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_taxation_status_isSet) {
        obj.insert(QString("TaxationStatus"), ::OpenAPI::toJsonValue(m_taxation_status));
    }
    if (m_telephone_isSet) {
        obj.insert(QString("Telephone"), ::OpenAPI::toJsonValue(m_telephone));
    }
    if (m_territory_isSet) {
        obj.insert(QString("Territory"), ::OpenAPI::toJsonValue(m_territory));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_trading_name_isSet) {
        obj.insert(QString("TradingName"), ::OpenAPI::toJsonValue(m_trading_name));
    }
    if (m_unique_tax_reference_isSet) {
        obj.insert(QString("UniqueTaxReference"), ::OpenAPI::toJsonValue(m_unique_tax_reference));
    }
    if (m_vat_registered_isSet) {
        obj.insert(QString("VatRegistered"), ::OpenAPI::toJsonValue(m_vat_registered));
    }
    if (m_vat_registration_number_isSet) {
        obj.insert(QString("VatRegistrationNumber"), ::OpenAPI::toJsonValue(m_vat_registration_number));
    }
    if (m_verification_date_isSet) {
        obj.insert(QString("VerificationDate"), ::OpenAPI::toJsonValue(m_verification_date));
    }
    if (m_verification_number_isSet) {
        obj.insert(QString("VerificationNumber"), ::OpenAPI::toJsonValue(m_verification_number));
    }
    if (m_works_number_isSet) {
        obj.insert(QString("WorksNumber"), ::OpenAPI::toJsonValue(m_works_number));
    }
    return obj;
}

OAIAddress_2 OAISubContractor_3::getAddress() const {
    return m_address;
}
void OAISubContractor_3::setAddress(const OAIAddress_2 &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAISubContractor_3::is_address_Set() const{
    return m_address_isSet;
}

bool OAISubContractor_3::is_address_Valid() const{
    return m_address_isValid;
}

OAIBankAccount_2 OAISubContractor_3::getBankAccount() const {
    return m_bank_account;
}
void OAISubContractor_3::setBankAccount(const OAIBankAccount_2 &bank_account) {
    m_bank_account = bank_account;
    m_bank_account_isSet = true;
}

bool OAISubContractor_3::is_bank_account_Set() const{
    return m_bank_account_isSet;
}

bool OAISubContractor_3::is_bank_account_Valid() const{
    return m_bank_account_isValid;
}

QString OAISubContractor_3::getBusinessType() const {
    return m_business_type;
}
void OAISubContractor_3::setBusinessType(const QString &business_type) {
    m_business_type = business_type;
    m_business_type_isSet = true;
}

bool OAISubContractor_3::is_business_type_Set() const{
    return m_business_type_isSet;
}

bool OAISubContractor_3::is_business_type_Valid() const{
    return m_business_type_isValid;
}

QString OAISubContractor_3::getCompanyName() const {
    return m_company_name;
}
void OAISubContractor_3::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAISubContractor_3::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAISubContractor_3::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAISubContractor_3::getCompanyRegistrationNumber() const {
    return m_company_registration_number;
}
void OAISubContractor_3::setCompanyRegistrationNumber(const QString &company_registration_number) {
    m_company_registration_number = company_registration_number;
    m_company_registration_number_isSet = true;
}

bool OAISubContractor_3::is_company_registration_number_Set() const{
    return m_company_registration_number_isSet;
}

bool OAISubContractor_3::is_company_registration_number_Valid() const{
    return m_company_registration_number_isValid;
}

bool OAISubContractor_3::isDeactivated() const {
    return m_deactivated;
}
void OAISubContractor_3::setDeactivated(const bool &deactivated) {
    m_deactivated = deactivated;
    m_deactivated_isSet = true;
}

bool OAISubContractor_3::is_deactivated_Set() const{
    return m_deactivated_isSet;
}

bool OAISubContractor_3::is_deactivated_Valid() const{
    return m_deactivated_isValid;
}

QDate OAISubContractor_3::getEffectiveDate() const {
    return m_effective_date;
}
void OAISubContractor_3::setEffectiveDate(const QDate &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAISubContractor_3::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAISubContractor_3::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

QString OAISubContractor_3::getFirstName() const {
    return m_first_name;
}
void OAISubContractor_3::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAISubContractor_3::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAISubContractor_3::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAISubContractor_3::getInitials() const {
    return m_initials;
}
void OAISubContractor_3::setInitials(const QString &initials) {
    m_initials = initials;
    m_initials_isSet = true;
}

bool OAISubContractor_3::is_initials_Set() const{
    return m_initials_isSet;
}

bool OAISubContractor_3::is_initials_Valid() const{
    return m_initials_isValid;
}

QString OAISubContractor_3::getLastName() const {
    return m_last_name;
}
void OAISubContractor_3::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAISubContractor_3::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAISubContractor_3::is_last_name_Valid() const{
    return m_last_name_isValid;
}

OAIObject OAISubContractor_3::getMetaData() const {
    return m_meta_data;
}
void OAISubContractor_3::setMetaData(const OAIObject &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAISubContractor_3::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAISubContractor_3::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

QString OAISubContractor_3::getMiddleName() const {
    return m_middle_name;
}
void OAISubContractor_3::setMiddleName(const QString &middle_name) {
    m_middle_name = middle_name;
    m_middle_name_isSet = true;
}

bool OAISubContractor_3::is_middle_name_Set() const{
    return m_middle_name_isSet;
}

bool OAISubContractor_3::is_middle_name_Valid() const{
    return m_middle_name_isValid;
}

QDate OAISubContractor_3::getNextRevisionDate() const {
    return m_next_revision_date;
}
void OAISubContractor_3::setNextRevisionDate(const QDate &next_revision_date) {
    m_next_revision_date = next_revision_date;
    m_next_revision_date_isSet = true;
}

bool OAISubContractor_3::is_next_revision_date_Set() const{
    return m_next_revision_date_isSet;
}

bool OAISubContractor_3::is_next_revision_date_Valid() const{
    return m_next_revision_date_isValid;
}

QString OAISubContractor_3::getNiNumber() const {
    return m_ni_number;
}
void OAISubContractor_3::setNiNumber(const QString &ni_number) {
    m_ni_number = ni_number;
    m_ni_number_isSet = true;
}

bool OAISubContractor_3::is_ni_number_Set() const{
    return m_ni_number_isSet;
}

bool OAISubContractor_3::is_ni_number_Valid() const{
    return m_ni_number_isValid;
}

QString OAISubContractor_3::getPartnershipName() const {
    return m_partnership_name;
}
void OAISubContractor_3::setPartnershipName(const QString &partnership_name) {
    m_partnership_name = partnership_name;
    m_partnership_name_isSet = true;
}

bool OAISubContractor_3::is_partnership_name_Set() const{
    return m_partnership_name_isSet;
}

bool OAISubContractor_3::is_partnership_name_Valid() const{
    return m_partnership_name_isValid;
}

QString OAISubContractor_3::getPartnershipUniqueTaxReference() const {
    return m_partnership_unique_tax_reference;
}
void OAISubContractor_3::setPartnershipUniqueTaxReference(const QString &partnership_unique_tax_reference) {
    m_partnership_unique_tax_reference = partnership_unique_tax_reference;
    m_partnership_unique_tax_reference_isSet = true;
}

bool OAISubContractor_3::is_partnership_unique_tax_reference_Set() const{
    return m_partnership_unique_tax_reference_isSet;
}

bool OAISubContractor_3::is_partnership_unique_tax_reference_Valid() const{
    return m_partnership_unique_tax_reference_isValid;
}

QString OAISubContractor_3::getPayFrequency() const {
    return m_pay_frequency;
}
void OAISubContractor_3::setPayFrequency(const QString &pay_frequency) {
    m_pay_frequency = pay_frequency;
    m_pay_frequency_isSet = true;
}

bool OAISubContractor_3::is_pay_frequency_Set() const{
    return m_pay_frequency_isSet;
}

bool OAISubContractor_3::is_pay_frequency_Valid() const{
    return m_pay_frequency_isValid;
}

QString OAISubContractor_3::getPaymentMethod() const {
    return m_payment_method;
}
void OAISubContractor_3::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAISubContractor_3::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAISubContractor_3::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAISubContractor_3::getRegion() const {
    return m_region;
}
void OAISubContractor_3::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAISubContractor_3::is_region_Set() const{
    return m_region_isSet;
}

bool OAISubContractor_3::is_region_Valid() const{
    return m_region_isValid;
}

qint32 OAISubContractor_3::getRevision() const {
    return m_revision;
}
void OAISubContractor_3::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAISubContractor_3::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAISubContractor_3::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAISubContractor_3::getTaxationStatus() const {
    return m_taxation_status;
}
void OAISubContractor_3::setTaxationStatus(const QString &taxation_status) {
    m_taxation_status = taxation_status;
    m_taxation_status_isSet = true;
}

bool OAISubContractor_3::is_taxation_status_Set() const{
    return m_taxation_status_isSet;
}

bool OAISubContractor_3::is_taxation_status_Valid() const{
    return m_taxation_status_isValid;
}

QString OAISubContractor_3::getTelephone() const {
    return m_telephone;
}
void OAISubContractor_3::setTelephone(const QString &telephone) {
    m_telephone = telephone;
    m_telephone_isSet = true;
}

bool OAISubContractor_3::is_telephone_Set() const{
    return m_telephone_isSet;
}

bool OAISubContractor_3::is_telephone_Valid() const{
    return m_telephone_isValid;
}

QString OAISubContractor_3::getTerritory() const {
    return m_territory;
}
void OAISubContractor_3::setTerritory(const QString &territory) {
    m_territory = territory;
    m_territory_isSet = true;
}

bool OAISubContractor_3::is_territory_Set() const{
    return m_territory_isSet;
}

bool OAISubContractor_3::is_territory_Valid() const{
    return m_territory_isValid;
}

QString OAISubContractor_3::getTitle() const {
    return m_title;
}
void OAISubContractor_3::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISubContractor_3::is_title_Set() const{
    return m_title_isSet;
}

bool OAISubContractor_3::is_title_Valid() const{
    return m_title_isValid;
}

QString OAISubContractor_3::getTradingName() const {
    return m_trading_name;
}
void OAISubContractor_3::setTradingName(const QString &trading_name) {
    m_trading_name = trading_name;
    m_trading_name_isSet = true;
}

bool OAISubContractor_3::is_trading_name_Set() const{
    return m_trading_name_isSet;
}

bool OAISubContractor_3::is_trading_name_Valid() const{
    return m_trading_name_isValid;
}

QString OAISubContractor_3::getUniqueTaxReference() const {
    return m_unique_tax_reference;
}
void OAISubContractor_3::setUniqueTaxReference(const QString &unique_tax_reference) {
    m_unique_tax_reference = unique_tax_reference;
    m_unique_tax_reference_isSet = true;
}

bool OAISubContractor_3::is_unique_tax_reference_Set() const{
    return m_unique_tax_reference_isSet;
}

bool OAISubContractor_3::is_unique_tax_reference_Valid() const{
    return m_unique_tax_reference_isValid;
}

bool OAISubContractor_3::isVatRegistered() const {
    return m_vat_registered;
}
void OAISubContractor_3::setVatRegistered(const bool &vat_registered) {
    m_vat_registered = vat_registered;
    m_vat_registered_isSet = true;
}

bool OAISubContractor_3::is_vat_registered_Set() const{
    return m_vat_registered_isSet;
}

bool OAISubContractor_3::is_vat_registered_Valid() const{
    return m_vat_registered_isValid;
}

QString OAISubContractor_3::getVatRegistrationNumber() const {
    return m_vat_registration_number;
}
void OAISubContractor_3::setVatRegistrationNumber(const QString &vat_registration_number) {
    m_vat_registration_number = vat_registration_number;
    m_vat_registration_number_isSet = true;
}

bool OAISubContractor_3::is_vat_registration_number_Set() const{
    return m_vat_registration_number_isSet;
}

bool OAISubContractor_3::is_vat_registration_number_Valid() const{
    return m_vat_registration_number_isValid;
}

QDateTime OAISubContractor_3::getVerificationDate() const {
    return m_verification_date;
}
void OAISubContractor_3::setVerificationDate(const QDateTime &verification_date) {
    m_verification_date = verification_date;
    m_verification_date_isSet = true;
}

bool OAISubContractor_3::is_verification_date_Set() const{
    return m_verification_date_isSet;
}

bool OAISubContractor_3::is_verification_date_Valid() const{
    return m_verification_date_isValid;
}

QString OAISubContractor_3::getVerificationNumber() const {
    return m_verification_number;
}
void OAISubContractor_3::setVerificationNumber(const QString &verification_number) {
    m_verification_number = verification_number;
    m_verification_number_isSet = true;
}

bool OAISubContractor_3::is_verification_number_Set() const{
    return m_verification_number_isSet;
}

bool OAISubContractor_3::is_verification_number_Valid() const{
    return m_verification_number_isValid;
}

QString OAISubContractor_3::getWorksNumber() const {
    return m_works_number;
}
void OAISubContractor_3::setWorksNumber(const QString &works_number) {
    m_works_number = works_number;
    m_works_number_isSet = true;
}

bool OAISubContractor_3::is_works_number_Set() const{
    return m_works_number_isSet;
}

bool OAISubContractor_3::is_works_number_Valid() const{
    return m_works_number_isValid;
}

bool OAISubContractor_3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deactivated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_revision_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ni_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partnership_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partnership_unique_tax_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_territory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trading_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_tax_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_registered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_works_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubContractor_3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
