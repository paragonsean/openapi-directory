/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_1::OAIUser_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_1::OAIUser_1() {
    this->initializeModel();
}

OAIUser_1::~OAIUser_1() {}

void OAIUser_1::initializeModel() {

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_user_identifier_isSet = false;
    m_user_identifier_isValid = false;
}

void OAIUser_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_1::fromJsonObject(QJsonObject json) {

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("MetaData")]);
    m_meta_data_isSet = !json[QString("MetaData")].isNull() && m_meta_data_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("Roles")]);
    m_roles_isSet = !json[QString("Roles")].isNull() && m_roles_isValid;

    m_user_identifier_isValid = ::OpenAPI::fromJsonValue(m_user_identifier, json[QString("UserIdentifier")]);
    m_user_identifier_isSet = !json[QString("UserIdentifier")].isNull() && m_user_identifier_isValid;
}

QString OAIUser_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_1::asJsonObject() const {
    QJsonObject obj;
    if (m_meta_data_isSet) {
        obj.insert(QString("MetaData"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_roles.isSet()) {
        obj.insert(QString("Roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_user_identifier_isSet) {
        obj.insert(QString("UserIdentifier"), ::OpenAPI::toJsonValue(m_user_identifier));
    }
    return obj;
}

OAIObject OAIUser_1::getMetaData() const {
    return m_meta_data;
}
void OAIUser_1::setMetaData(const OAIObject &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIUser_1::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIUser_1::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

OAIPermission_2 OAIUser_1::getPermissions() const {
    return m_permissions;
}
void OAIUser_1::setPermissions(const OAIPermission_2 &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIUser_1::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIUser_1::is_permissions_Valid() const{
    return m_permissions_isValid;
}

OAIRoles OAIUser_1::getRoles() const {
    return m_roles;
}
void OAIUser_1::setRoles(const OAIRoles &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIUser_1::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIUser_1::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIUser_1::getUserIdentifier() const {
    return m_user_identifier;
}
void OAIUser_1::setUserIdentifier(const QString &user_identifier) {
    m_user_identifier = user_identifier;
    m_user_identifier_isSet = true;
}

bool OAIUser_1::is_user_identifier_Set() const{
    return m_user_identifier_isSet;
}

bool OAIUser_1::is_user_identifier_Valid() const{
    return m_user_identifier_isValid;
}

bool OAIUser_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_meta_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
