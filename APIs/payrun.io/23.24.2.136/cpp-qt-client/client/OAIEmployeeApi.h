/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEmployeeApi_H
#define OAI_OAIEmployeeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAEAssessment.h"
#include "OAICommentary.h"
#include "OAIEmployee.h"
#include "OAIEmployeeSecret.h"
#include "OAIEmployeeSummary.h"
#include "OAIErrorModel.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEmployeeApi : public QObject {
    Q_OBJECT

public:
    OAIEmployeeApi(const int timeOut = 0);
    ~OAIEmployeeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteEmployee(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteEmployeeRevision(const QString &employer_id, const QString &employee_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteEmployeeRevisionByNumber(const QString &employer_id, const QString &employee_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  secret_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteEmployeeSecret(const QString &employer_id, const QString &employee_id, const QString &secret_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  ae_assessment_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAEAssessmentFromEmployee(const QString &employer_id, const QString &employee_id, const QString &ae_assessment_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAEAssessmentsFromEmployee(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllEmployeeTags(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCommentariesFromEmployee(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  commentary_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCommentaryFromEmployee(const QString &employer_id, const QString &employee_id, const QString &commentary_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCommentaryFromPayRunByEmployee(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeeByEffectiveDate(const QString &employer_id, const QString &employee_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeeFromEmployer(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeeRevisionByNumber(const QString &employer_id, const QString &employee_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeeRevisionSummaries(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeeRevisionSummaryByNumber(const QString &employer_id, const QString &employee_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeeRevisions(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  secret_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeeSecret(const QString &employer_id, const QString &employee_id, const QString &secret_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeeSecrets(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeeSummariesByEffectiveDate(const QString &employer_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeeSummariesFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeeSummaryByEffectiveDate(const QString &employer_id, const QString &employee_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeeSummaryFromEmployer(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeesByEffectiveDate(const QString &employer_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeesFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeesFromPayRun(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeesFromPaySchedule(const QString &employer_id, const QString &pay_schedule_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeesFromPayScheduleOnEffectiveDate(const QString &employer_id, const QString &pay_schedule_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeesWithTag(const QString &employer_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayRunsFromEmployee(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_employee OAIEmployee [required]
    */
    virtual void patchEmployee(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version, const OAIEmployee &oai_employee);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_employee OAIEmployee [required]
    */
    virtual void postEmployeeIntoEmployer(const QString &employer_id, const QString &authorization, const QString &api_version, const OAIEmployee &oai_employee);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void postEmployeeSecret(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_employee OAIEmployee [required]
    */
    virtual void putEmployeeIntoEmployer(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version, const OAIEmployee &oai_employee);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  secret_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void putEmployeeSecret(const QString &employer_id, const QString &employee_id, const QString &secret_id, const QString &authorization, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteEmployeeCallback(OAIHttpRequestWorker *worker);
    void deleteEmployeeRevisionCallback(OAIHttpRequestWorker *worker);
    void deleteEmployeeRevisionByNumberCallback(OAIHttpRequestWorker *worker);
    void deleteEmployeeSecretCallback(OAIHttpRequestWorker *worker);
    void getAEAssessmentFromEmployeeCallback(OAIHttpRequestWorker *worker);
    void getAEAssessmentsFromEmployeeCallback(OAIHttpRequestWorker *worker);
    void getAllEmployeeTagsCallback(OAIHttpRequestWorker *worker);
    void getCommentariesFromEmployeeCallback(OAIHttpRequestWorker *worker);
    void getCommentaryFromEmployeeCallback(OAIHttpRequestWorker *worker);
    void getCommentaryFromPayRunByEmployeeCallback(OAIHttpRequestWorker *worker);
    void getEmployeeByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getEmployeeFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getEmployeeRevisionByNumberCallback(OAIHttpRequestWorker *worker);
    void getEmployeeRevisionSummariesCallback(OAIHttpRequestWorker *worker);
    void getEmployeeRevisionSummaryByNumberCallback(OAIHttpRequestWorker *worker);
    void getEmployeeRevisionsCallback(OAIHttpRequestWorker *worker);
    void getEmployeeSecretCallback(OAIHttpRequestWorker *worker);
    void getEmployeeSecretsCallback(OAIHttpRequestWorker *worker);
    void getEmployeeSummariesByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getEmployeeSummariesFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getEmployeeSummaryByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getEmployeeSummaryFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getEmployeesByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getEmployeesFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getEmployeesFromPayRunCallback(OAIHttpRequestWorker *worker);
    void getEmployeesFromPayScheduleCallback(OAIHttpRequestWorker *worker);
    void getEmployeesFromPayScheduleOnEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getEmployeesWithTagCallback(OAIHttpRequestWorker *worker);
    void getPayRunsFromEmployeeCallback(OAIHttpRequestWorker *worker);
    void patchEmployeeCallback(OAIHttpRequestWorker *worker);
    void postEmployeeIntoEmployerCallback(OAIHttpRequestWorker *worker);
    void postEmployeeSecretCallback(OAIHttpRequestWorker *worker);
    void putEmployeeIntoEmployerCallback(OAIHttpRequestWorker *worker);
    void putEmployeeSecretCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteEmployeeSignal();
    void deleteEmployeeRevisionSignal();
    void deleteEmployeeRevisionByNumberSignal();
    void deleteEmployeeSecretSignal();
    void getAEAssessmentFromEmployeeSignal(OAIAEAssessment summary);
    void getAEAssessmentsFromEmployeeSignal(OAILinkCollection summary);
    void getAllEmployeeTagsSignal(OAILinkCollection summary);
    void getCommentariesFromEmployeeSignal(OAILinkCollection summary);
    void getCommentaryFromEmployeeSignal(OAICommentary summary);
    void getCommentaryFromPayRunByEmployeeSignal(OAICommentary summary);
    void getEmployeeByEffectiveDateSignal(OAIEmployee summary);
    void getEmployeeFromEmployerSignal(OAIEmployee summary);
    void getEmployeeRevisionByNumberSignal(OAIEmployee summary);
    void getEmployeeRevisionSummariesSignal(OAILinkCollection summary);
    void getEmployeeRevisionSummaryByNumberSignal(OAIEmployeeSummary summary);
    void getEmployeeRevisionsSignal(OAILinkCollection summary);
    void getEmployeeSecretSignal(OAIEmployeeSecret summary);
    void getEmployeeSecretsSignal(OAILinkCollection summary);
    void getEmployeeSummariesByEffectiveDateSignal(OAILinkCollection summary);
    void getEmployeeSummariesFromEmployerSignal(OAILinkCollection summary);
    void getEmployeeSummaryByEffectiveDateSignal(OAIEmployeeSummary summary);
    void getEmployeeSummaryFromEmployerSignal(OAIEmployeeSummary summary);
    void getEmployeesByEffectiveDateSignal(OAILinkCollection summary);
    void getEmployeesFromEmployerSignal(OAILinkCollection summary);
    void getEmployeesFromPayRunSignal(OAILinkCollection summary);
    void getEmployeesFromPayScheduleSignal(OAILinkCollection summary);
    void getEmployeesFromPayScheduleOnEffectiveDateSignal(OAILinkCollection summary);
    void getEmployeesWithTagSignal(OAILinkCollection summary);
    void getPayRunsFromEmployeeSignal(OAILinkCollection summary);
    void patchEmployeeSignal(OAIEmployee summary);
    void postEmployeeIntoEmployerSignal(OAILink summary);
    void postEmployeeSecretSignal(OAILink summary);
    void putEmployeeIntoEmployerSignal(OAIEmployee summary);
    void putEmployeeSecretSignal(OAIEmployeeSecret summary);


    void deleteEmployeeSignalFull(OAIHttpRequestWorker *worker);
    void deleteEmployeeRevisionSignalFull(OAIHttpRequestWorker *worker);
    void deleteEmployeeRevisionByNumberSignalFull(OAIHttpRequestWorker *worker);
    void deleteEmployeeSecretSignalFull(OAIHttpRequestWorker *worker);
    void getAEAssessmentFromEmployeeSignalFull(OAIHttpRequestWorker *worker, OAIAEAssessment summary);
    void getAEAssessmentsFromEmployeeSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getAllEmployeeTagsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getCommentariesFromEmployeeSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getCommentaryFromEmployeeSignalFull(OAIHttpRequestWorker *worker, OAICommentary summary);
    void getCommentaryFromPayRunByEmployeeSignalFull(OAIHttpRequestWorker *worker, OAICommentary summary);
    void getEmployeeByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAIEmployee summary);
    void getEmployeeFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAIEmployee summary);
    void getEmployeeRevisionByNumberSignalFull(OAIHttpRequestWorker *worker, OAIEmployee summary);
    void getEmployeeRevisionSummariesSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployeeRevisionSummaryByNumberSignalFull(OAIHttpRequestWorker *worker, OAIEmployeeSummary summary);
    void getEmployeeRevisionsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployeeSecretSignalFull(OAIHttpRequestWorker *worker, OAIEmployeeSecret summary);
    void getEmployeeSecretsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployeeSummariesByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployeeSummariesFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployeeSummaryByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAIEmployeeSummary summary);
    void getEmployeeSummaryFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAIEmployeeSummary summary);
    void getEmployeesByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployeesFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployeesFromPayRunSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployeesFromPayScheduleSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployeesFromPayScheduleOnEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployeesWithTagSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayRunsFromEmployeeSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void patchEmployeeSignalFull(OAIHttpRequestWorker *worker, OAIEmployee summary);
    void postEmployeeIntoEmployerSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void postEmployeeSecretSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putEmployeeIntoEmployerSignalFull(OAIHttpRequestWorker *worker, OAIEmployee summary);
    void putEmployeeSecretSignalFull(OAIHttpRequestWorker *worker, OAIEmployeeSecret summary);

    Q_DECL_DEPRECATED_X("Use deleteEmployeeSignalError() instead")
    void deleteEmployeeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployeeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmployeeRevisionSignalError() instead")
    void deleteEmployeeRevisionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployeeRevisionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmployeeRevisionByNumberSignalError() instead")
    void deleteEmployeeRevisionByNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployeeRevisionByNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmployeeSecretSignalError() instead")
    void deleteEmployeeSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployeeSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAEAssessmentFromEmployeeSignalError() instead")
    void getAEAssessmentFromEmployeeSignalE(OAIAEAssessment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAEAssessmentFromEmployeeSignalError(OAIAEAssessment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAEAssessmentsFromEmployeeSignalError() instead")
    void getAEAssessmentsFromEmployeeSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAEAssessmentsFromEmployeeSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllEmployeeTagsSignalError() instead")
    void getAllEmployeeTagsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllEmployeeTagsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentariesFromEmployeeSignalError() instead")
    void getCommentariesFromEmployeeSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentariesFromEmployeeSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentaryFromEmployeeSignalError() instead")
    void getCommentaryFromEmployeeSignalE(OAICommentary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentaryFromEmployeeSignalError(OAICommentary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentaryFromPayRunByEmployeeSignalError() instead")
    void getCommentaryFromPayRunByEmployeeSignalE(OAICommentary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentaryFromPayRunByEmployeeSignalError(OAICommentary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeByEffectiveDateSignalError() instead")
    void getEmployeeByEffectiveDateSignalE(OAIEmployee summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeByEffectiveDateSignalError(OAIEmployee summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeFromEmployerSignalError() instead")
    void getEmployeeFromEmployerSignalE(OAIEmployee summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeFromEmployerSignalError(OAIEmployee summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeRevisionByNumberSignalError() instead")
    void getEmployeeRevisionByNumberSignalE(OAIEmployee summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeRevisionByNumberSignalError(OAIEmployee summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeRevisionSummariesSignalError() instead")
    void getEmployeeRevisionSummariesSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeRevisionSummariesSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeRevisionSummaryByNumberSignalError() instead")
    void getEmployeeRevisionSummaryByNumberSignalE(OAIEmployeeSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeRevisionSummaryByNumberSignalError(OAIEmployeeSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeRevisionsSignalError() instead")
    void getEmployeeRevisionsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeRevisionsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSecretSignalError() instead")
    void getEmployeeSecretSignalE(OAIEmployeeSecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSecretSignalError(OAIEmployeeSecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSecretsSignalError() instead")
    void getEmployeeSecretsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSecretsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSummariesByEffectiveDateSignalError() instead")
    void getEmployeeSummariesByEffectiveDateSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSummariesByEffectiveDateSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSummariesFromEmployerSignalError() instead")
    void getEmployeeSummariesFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSummariesFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSummaryByEffectiveDateSignalError() instead")
    void getEmployeeSummaryByEffectiveDateSignalE(OAIEmployeeSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSummaryByEffectiveDateSignalError(OAIEmployeeSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSummaryFromEmployerSignalError() instead")
    void getEmployeeSummaryFromEmployerSignalE(OAIEmployeeSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSummaryFromEmployerSignalError(OAIEmployeeSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesByEffectiveDateSignalError() instead")
    void getEmployeesByEffectiveDateSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesByEffectiveDateSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromEmployerSignalError() instead")
    void getEmployeesFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromPayRunSignalError() instead")
    void getEmployeesFromPayRunSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromPayRunSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromPayScheduleSignalError() instead")
    void getEmployeesFromPayScheduleSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromPayScheduleSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromPayScheduleOnEffectiveDateSignalError() instead")
    void getEmployeesFromPayScheduleOnEffectiveDateSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromPayScheduleOnEffectiveDateSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesWithTagSignalError() instead")
    void getEmployeesWithTagSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesWithTagSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunsFromEmployeeSignalError() instead")
    void getPayRunsFromEmployeeSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunsFromEmployeeSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchEmployeeSignalError() instead")
    void patchEmployeeSignalE(OAIEmployee summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchEmployeeSignalError(OAIEmployee summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEmployeeIntoEmployerSignalError() instead")
    void postEmployeeIntoEmployerSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postEmployeeIntoEmployerSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEmployeeSecretSignalError() instead")
    void postEmployeeSecretSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postEmployeeSecretSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEmployeeIntoEmployerSignalError() instead")
    void putEmployeeIntoEmployerSignalE(OAIEmployee summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putEmployeeIntoEmployerSignalError(OAIEmployee summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEmployeeSecretSignalError() instead")
    void putEmployeeSecretSignalE(OAIEmployeeSecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putEmployeeSecretSignalError(OAIEmployeeSecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteEmployeeSignalErrorFull() instead")
    void deleteEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmployeeRevisionSignalErrorFull() instead")
    void deleteEmployeeRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployeeRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmployeeRevisionByNumberSignalErrorFull() instead")
    void deleteEmployeeRevisionByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployeeRevisionByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmployeeSecretSignalErrorFull() instead")
    void deleteEmployeeSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmployeeSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAEAssessmentFromEmployeeSignalErrorFull() instead")
    void getAEAssessmentFromEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAEAssessmentFromEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAEAssessmentsFromEmployeeSignalErrorFull() instead")
    void getAEAssessmentsFromEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAEAssessmentsFromEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllEmployeeTagsSignalErrorFull() instead")
    void getAllEmployeeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllEmployeeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentariesFromEmployeeSignalErrorFull() instead")
    void getCommentariesFromEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentariesFromEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentaryFromEmployeeSignalErrorFull() instead")
    void getCommentaryFromEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentaryFromEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentaryFromPayRunByEmployeeSignalErrorFull() instead")
    void getCommentaryFromPayRunByEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentaryFromPayRunByEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeByEffectiveDateSignalErrorFull() instead")
    void getEmployeeByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeFromEmployerSignalErrorFull() instead")
    void getEmployeeFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeRevisionByNumberSignalErrorFull() instead")
    void getEmployeeRevisionByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeRevisionByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeRevisionSummariesSignalErrorFull() instead")
    void getEmployeeRevisionSummariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeRevisionSummariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeRevisionSummaryByNumberSignalErrorFull() instead")
    void getEmployeeRevisionSummaryByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeRevisionSummaryByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeRevisionsSignalErrorFull() instead")
    void getEmployeeRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSecretSignalErrorFull() instead")
    void getEmployeeSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSecretsSignalErrorFull() instead")
    void getEmployeeSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSummariesByEffectiveDateSignalErrorFull() instead")
    void getEmployeeSummariesByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSummariesByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSummariesFromEmployerSignalErrorFull() instead")
    void getEmployeeSummariesFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSummariesFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSummaryByEffectiveDateSignalErrorFull() instead")
    void getEmployeeSummaryByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSummaryByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSummaryFromEmployerSignalErrorFull() instead")
    void getEmployeeSummaryFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSummaryFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesByEffectiveDateSignalErrorFull() instead")
    void getEmployeesByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromEmployerSignalErrorFull() instead")
    void getEmployeesFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromPayRunSignalErrorFull() instead")
    void getEmployeesFromPayRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromPayRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromPayScheduleSignalErrorFull() instead")
    void getEmployeesFromPayScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromPayScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromPayScheduleOnEffectiveDateSignalErrorFull() instead")
    void getEmployeesFromPayScheduleOnEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromPayScheduleOnEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesWithTagSignalErrorFull() instead")
    void getEmployeesWithTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesWithTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunsFromEmployeeSignalErrorFull() instead")
    void getPayRunsFromEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunsFromEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchEmployeeSignalErrorFull() instead")
    void patchEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEmployeeIntoEmployerSignalErrorFull() instead")
    void postEmployeeIntoEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postEmployeeIntoEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEmployeeSecretSignalErrorFull() instead")
    void postEmployeeSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postEmployeeSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEmployeeIntoEmployerSignalErrorFull() instead")
    void putEmployeeIntoEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putEmployeeIntoEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEmployeeSecretSignalErrorFull() instead")
    void putEmployeeSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putEmployeeSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
