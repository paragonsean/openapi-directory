/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICisLine_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICisLine_1::OAICisLine_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICisLine_1::OAICisLine_1() {
    this->initializeModel();
}

OAICisLine_1::~OAICisLine_1() {}

void OAICisLine_1::initializeModel() {

    m_cis_deduction_isSet = false;
    m_cis_deduction_isValid = false;

    m_cis_line_type_isSet = false;
    m_cis_line_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_generated_isSet = false;
    m_generated_isValid = false;

    m_gross_pay_isSet = false;
    m_gross_pay_isValid = false;

    m_nominal_code_key_isSet = false;
    m_nominal_code_key_isValid = false;

    m_pay_frequency_isSet = false;
    m_pay_frequency_isValid = false;

    m_tax_month_isSet = false;
    m_tax_month_isValid = false;

    m_tax_period_isSet = false;
    m_tax_period_isValid = false;

    m_tax_treatment_isSet = false;
    m_tax_treatment_isValid = false;

    m_tax_year_isSet = false;
    m_tax_year_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_unit_rate_isSet = false;
    m_unit_rate_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;
}

void OAICisLine_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICisLine_1::fromJsonObject(QJsonObject json) {

    m_cis_deduction_isValid = ::OpenAPI::fromJsonValue(m_cis_deduction, json[QString("CisDeduction")]);
    m_cis_deduction_isSet = !json[QString("CisDeduction")].isNull() && m_cis_deduction_isValid;

    m_cis_line_type_isValid = ::OpenAPI::fromJsonValue(m_cis_line_type, json[QString("CisLineType")]);
    m_cis_line_type_isSet = !json[QString("CisLineType")].isNull() && m_cis_line_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_generated_isValid = ::OpenAPI::fromJsonValue(m_generated, json[QString("Generated")]);
    m_generated_isSet = !json[QString("Generated")].isNull() && m_generated_isValid;

    m_gross_pay_isValid = ::OpenAPI::fromJsonValue(m_gross_pay, json[QString("GrossPay")]);
    m_gross_pay_isSet = !json[QString("GrossPay")].isNull() && m_gross_pay_isValid;

    m_nominal_code_key_isValid = ::OpenAPI::fromJsonValue(m_nominal_code_key, json[QString("NominalCodeKey")]);
    m_nominal_code_key_isSet = !json[QString("NominalCodeKey")].isNull() && m_nominal_code_key_isValid;

    m_pay_frequency_isValid = ::OpenAPI::fromJsonValue(m_pay_frequency, json[QString("PayFrequency")]);
    m_pay_frequency_isSet = !json[QString("PayFrequency")].isNull() && m_pay_frequency_isValid;

    m_tax_month_isValid = ::OpenAPI::fromJsonValue(m_tax_month, json[QString("TaxMonth")]);
    m_tax_month_isSet = !json[QString("TaxMonth")].isNull() && m_tax_month_isValid;

    m_tax_period_isValid = ::OpenAPI::fromJsonValue(m_tax_period, json[QString("TaxPeriod")]);
    m_tax_period_isSet = !json[QString("TaxPeriod")].isNull() && m_tax_period_isValid;

    m_tax_treatment_isValid = ::OpenAPI::fromJsonValue(m_tax_treatment, json[QString("TaxTreatment")]);
    m_tax_treatment_isSet = !json[QString("TaxTreatment")].isNull() && m_tax_treatment_isValid;

    m_tax_year_isValid = ::OpenAPI::fromJsonValue(m_tax_year, json[QString("TaxYear")]);
    m_tax_year_isSet = !json[QString("TaxYear")].isNull() && m_tax_year_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("UOM")]);
    m_uom_isSet = !json[QString("UOM")].isNull() && m_uom_isValid;

    m_unit_rate_isValid = ::OpenAPI::fromJsonValue(m_unit_rate, json[QString("UnitRate")]);
    m_unit_rate_isSet = !json[QString("UnitRate")].isNull() && m_unit_rate_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("Units")]);
    m_units_isSet = !json[QString("Units")].isNull() && m_units_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("VAT")]);
    m_vat_isSet = !json[QString("VAT")].isNull() && m_vat_isValid;
}

QString OAICisLine_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICisLine_1::asJsonObject() const {
    QJsonObject obj;
    if (m_cis_deduction_isSet) {
        obj.insert(QString("CisDeduction"), ::OpenAPI::toJsonValue(m_cis_deduction));
    }
    if (m_cis_line_type_isSet) {
        obj.insert(QString("CisLineType"), ::OpenAPI::toJsonValue(m_cis_line_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_generated_isSet) {
        obj.insert(QString("Generated"), ::OpenAPI::toJsonValue(m_generated));
    }
    if (m_gross_pay_isSet) {
        obj.insert(QString("GrossPay"), ::OpenAPI::toJsonValue(m_gross_pay));
    }
    if (m_nominal_code_key_isSet) {
        obj.insert(QString("NominalCodeKey"), ::OpenAPI::toJsonValue(m_nominal_code_key));
    }
    if (m_pay_frequency_isSet) {
        obj.insert(QString("PayFrequency"), ::OpenAPI::toJsonValue(m_pay_frequency));
    }
    if (m_tax_month_isSet) {
        obj.insert(QString("TaxMonth"), ::OpenAPI::toJsonValue(m_tax_month));
    }
    if (m_tax_period_isSet) {
        obj.insert(QString("TaxPeriod"), ::OpenAPI::toJsonValue(m_tax_period));
    }
    if (m_tax_treatment_isSet) {
        obj.insert(QString("TaxTreatment"), ::OpenAPI::toJsonValue(m_tax_treatment));
    }
    if (m_tax_year_isSet) {
        obj.insert(QString("TaxYear"), ::OpenAPI::toJsonValue(m_tax_year));
    }
    if (m_uom_isSet) {
        obj.insert(QString("UOM"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_unit_rate_isSet) {
        obj.insert(QString("UnitRate"), ::OpenAPI::toJsonValue(m_unit_rate));
    }
    if (m_units_isSet) {
        obj.insert(QString("Units"), ::OpenAPI::toJsonValue(m_units));
    }
    if (m_vat_isSet) {
        obj.insert(QString("VAT"), ::OpenAPI::toJsonValue(m_vat));
    }
    return obj;
}

double OAICisLine_1::getCisDeduction() const {
    return m_cis_deduction;
}
void OAICisLine_1::setCisDeduction(const double &cis_deduction) {
    m_cis_deduction = cis_deduction;
    m_cis_deduction_isSet = true;
}

bool OAICisLine_1::is_cis_deduction_Set() const{
    return m_cis_deduction_isSet;
}

bool OAICisLine_1::is_cis_deduction_Valid() const{
    return m_cis_deduction_isValid;
}

QString OAICisLine_1::getCisLineType() const {
    return m_cis_line_type;
}
void OAICisLine_1::setCisLineType(const QString &cis_line_type) {
    m_cis_line_type = cis_line_type;
    m_cis_line_type_isSet = true;
}

bool OAICisLine_1::is_cis_line_type_Set() const{
    return m_cis_line_type_isSet;
}

bool OAICisLine_1::is_cis_line_type_Valid() const{
    return m_cis_line_type_isValid;
}

QString OAICisLine_1::getDescription() const {
    return m_description;
}
void OAICisLine_1::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICisLine_1::is_description_Set() const{
    return m_description_isSet;
}

bool OAICisLine_1::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAICisLine_1::getGenerated() const {
    return m_generated;
}
void OAICisLine_1::setGenerated(const QDateTime &generated) {
    m_generated = generated;
    m_generated_isSet = true;
}

bool OAICisLine_1::is_generated_Set() const{
    return m_generated_isSet;
}

bool OAICisLine_1::is_generated_Valid() const{
    return m_generated_isValid;
}

double OAICisLine_1::getGrossPay() const {
    return m_gross_pay;
}
void OAICisLine_1::setGrossPay(const double &gross_pay) {
    m_gross_pay = gross_pay;
    m_gross_pay_isSet = true;
}

bool OAICisLine_1::is_gross_pay_Set() const{
    return m_gross_pay_isSet;
}

bool OAICisLine_1::is_gross_pay_Valid() const{
    return m_gross_pay_isValid;
}

QString OAICisLine_1::getNominalCodeKey() const {
    return m_nominal_code_key;
}
void OAICisLine_1::setNominalCodeKey(const QString &nominal_code_key) {
    m_nominal_code_key = nominal_code_key;
    m_nominal_code_key_isSet = true;
}

bool OAICisLine_1::is_nominal_code_key_Set() const{
    return m_nominal_code_key_isSet;
}

bool OAICisLine_1::is_nominal_code_key_Valid() const{
    return m_nominal_code_key_isValid;
}

QString OAICisLine_1::getPayFrequency() const {
    return m_pay_frequency;
}
void OAICisLine_1::setPayFrequency(const QString &pay_frequency) {
    m_pay_frequency = pay_frequency;
    m_pay_frequency_isSet = true;
}

bool OAICisLine_1::is_pay_frequency_Set() const{
    return m_pay_frequency_isSet;
}

bool OAICisLine_1::is_pay_frequency_Valid() const{
    return m_pay_frequency_isValid;
}

qint32 OAICisLine_1::getTaxMonth() const {
    return m_tax_month;
}
void OAICisLine_1::setTaxMonth(const qint32 &tax_month) {
    m_tax_month = tax_month;
    m_tax_month_isSet = true;
}

bool OAICisLine_1::is_tax_month_Set() const{
    return m_tax_month_isSet;
}

bool OAICisLine_1::is_tax_month_Valid() const{
    return m_tax_month_isValid;
}

qint32 OAICisLine_1::getTaxPeriod() const {
    return m_tax_period;
}
void OAICisLine_1::setTaxPeriod(const qint32 &tax_period) {
    m_tax_period = tax_period;
    m_tax_period_isSet = true;
}

bool OAICisLine_1::is_tax_period_Set() const{
    return m_tax_period_isSet;
}

bool OAICisLine_1::is_tax_period_Valid() const{
    return m_tax_period_isValid;
}

QString OAICisLine_1::getTaxTreatment() const {
    return m_tax_treatment;
}
void OAICisLine_1::setTaxTreatment(const QString &tax_treatment) {
    m_tax_treatment = tax_treatment;
    m_tax_treatment_isSet = true;
}

bool OAICisLine_1::is_tax_treatment_Set() const{
    return m_tax_treatment_isSet;
}

bool OAICisLine_1::is_tax_treatment_Valid() const{
    return m_tax_treatment_isValid;
}

qint32 OAICisLine_1::getTaxYear() const {
    return m_tax_year;
}
void OAICisLine_1::setTaxYear(const qint32 &tax_year) {
    m_tax_year = tax_year;
    m_tax_year_isSet = true;
}

bool OAICisLine_1::is_tax_year_Set() const{
    return m_tax_year_isSet;
}

bool OAICisLine_1::is_tax_year_Valid() const{
    return m_tax_year_isValid;
}

QString OAICisLine_1::getUom() const {
    return m_uom;
}
void OAICisLine_1::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAICisLine_1::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAICisLine_1::is_uom_Valid() const{
    return m_uom_isValid;
}

double OAICisLine_1::getUnitRate() const {
    return m_unit_rate;
}
void OAICisLine_1::setUnitRate(const double &unit_rate) {
    m_unit_rate = unit_rate;
    m_unit_rate_isSet = true;
}

bool OAICisLine_1::is_unit_rate_Set() const{
    return m_unit_rate_isSet;
}

bool OAICisLine_1::is_unit_rate_Valid() const{
    return m_unit_rate_isValid;
}

double OAICisLine_1::getUnits() const {
    return m_units;
}
void OAICisLine_1::setUnits(const double &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAICisLine_1::is_units_Set() const{
    return m_units_isSet;
}

bool OAICisLine_1::is_units_Valid() const{
    return m_units_isValid;
}

double OAICisLine_1::getVat() const {
    return m_vat;
}
void OAICisLine_1::setVat(const double &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAICisLine_1::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAICisLine_1::is_vat_Valid() const{
    return m_vat_isValid;
}

bool OAICisLine_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cis_deduction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cis_line_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gross_pay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nominal_code_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_treatment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICisLine_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
