/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayCodeApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPayCodeApi::OAIPayCodeApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIPayCodeApi::~OAIPayCodeApi() {
}

void OAIPayCodeApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.test.payrun.io"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deletePayCode", defaultConf);
    _serverIndices.insert("deletePayCode", 0);
    _serverConfigs.insert("deletePayCodeRevision", defaultConf);
    _serverIndices.insert("deletePayCodeRevision", 0);
    _serverConfigs.insert("deletePayCodeRevisionByNumber", defaultConf);
    _serverIndices.insert("deletePayCodeRevisionByNumber", 0);
    _serverConfigs.insert("getAllPayCodeTags", defaultConf);
    _serverIndices.insert("getAllPayCodeTags", 0);
    _serverConfigs.insert("getPayCodeByEffectiveDate", defaultConf);
    _serverIndices.insert("getPayCodeByEffectiveDate", 0);
    _serverConfigs.insert("getPayCodeFromEmployer", defaultConf);
    _serverIndices.insert("getPayCodeFromEmployer", 0);
    _serverConfigs.insert("getPayCodeRevisionByNumber", defaultConf);
    _serverIndices.insert("getPayCodeRevisionByNumber", 0);
    _serverConfigs.insert("getPayCodeRevisions", defaultConf);
    _serverIndices.insert("getPayCodeRevisions", 0);
    _serverConfigs.insert("getPayCodesByEffectiveDate", defaultConf);
    _serverIndices.insert("getPayCodesByEffectiveDate", 0);
    _serverConfigs.insert("getPayCodesFromEmployer", defaultConf);
    _serverIndices.insert("getPayCodesFromEmployer", 0);
    _serverConfigs.insert("getPayCodesFromNominalCode", defaultConf);
    _serverIndices.insert("getPayCodesFromNominalCode", 0);
    _serverConfigs.insert("getPayCodesWithTag", defaultConf);
    _serverIndices.insert("getPayCodesWithTag", 0);
    _serverConfigs.insert("patchPayCode", defaultConf);
    _serverIndices.insert("patchPayCode", 0);
    _serverConfigs.insert("postPayCode", defaultConf);
    _serverIndices.insert("postPayCode", 0);
    _serverConfigs.insert("putPayCode", defaultConf);
    _serverIndices.insert("putPayCode", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIPayCodeApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIPayCodeApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIPayCodeApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIPayCodeApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIPayCodeApi::setUsername(const QString &username) {
    _username = username;
}

void OAIPayCodeApi::setPassword(const QString &password) {
    _password = password;
}


void OAIPayCodeApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIPayCodeApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIPayCodeApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIPayCodeApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPayCodeApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPayCodeApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIPayCodeApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIPayCodeApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIPayCodeApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIPayCodeApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIPayCodeApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIPayCodeApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIPayCodeApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIPayCodeApi::deletePayCode(const QString &employer_id, const QString &pay_code_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["deletePayCode"][_serverIndices.value("deletePayCode")].URL()+"/Employer/{EmployerId}/PayCode/{PayCodeId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString pay_code_idPathParam("{");
        pay_code_idPathParam.append("PayCodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "PayCodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"PayCodeId"+pathSuffix : pathPrefix;
        fullPath.replace(pay_code_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pay_code_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::deletePayCodeCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::deletePayCodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deletePayCodeSignal();
        Q_EMIT deletePayCodeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deletePayCodeSignalE(error_type, error_str);
        Q_EMIT deletePayCodeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deletePayCodeSignalError(error_type, error_str);
        Q_EMIT deletePayCodeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::deletePayCodeRevision(const QString &employer_id, const QString &pay_code_id, const QDate &effective_date, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["deletePayCodeRevision"][_serverIndices.value("deletePayCodeRevision")].URL()+"/Employer/{EmployerId}/PayCode/{PayCodeId}/{EffectiveDate}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString pay_code_idPathParam("{");
        pay_code_idPathParam.append("PayCodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "PayCodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"PayCodeId"+pathSuffix : pathPrefix;
        fullPath.replace(pay_code_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pay_code_id)));
    }
    
    {
        QString effective_datePathParam("{");
        effective_datePathParam.append("EffectiveDate").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EffectiveDate", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EffectiveDate"+pathSuffix : pathPrefix;
        fullPath.replace(effective_datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(effective_date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::deletePayCodeRevisionCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::deletePayCodeRevisionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deletePayCodeRevisionSignal();
        Q_EMIT deletePayCodeRevisionSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deletePayCodeRevisionSignalE(error_type, error_str);
        Q_EMIT deletePayCodeRevisionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deletePayCodeRevisionSignalError(error_type, error_str);
        Q_EMIT deletePayCodeRevisionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::deletePayCodeRevisionByNumber(const QString &employer_id, const QString &pay_code_id, const QString &revision_number, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["deletePayCodeRevisionByNumber"][_serverIndices.value("deletePayCodeRevisionByNumber")].URL()+"/Employer/{EmployerId}/PayCode/{PayCodeId}/Revision/{RevisionNumber}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString pay_code_idPathParam("{");
        pay_code_idPathParam.append("PayCodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "PayCodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"PayCodeId"+pathSuffix : pathPrefix;
        fullPath.replace(pay_code_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pay_code_id)));
    }
    
    {
        QString revision_numberPathParam("{");
        revision_numberPathParam.append("RevisionNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "RevisionNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"RevisionNumber"+pathSuffix : pathPrefix;
        fullPath.replace(revision_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(revision_number)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::deletePayCodeRevisionByNumberCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::deletePayCodeRevisionByNumberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deletePayCodeRevisionByNumberSignal();
        Q_EMIT deletePayCodeRevisionByNumberSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deletePayCodeRevisionByNumberSignalE(error_type, error_str);
        Q_EMIT deletePayCodeRevisionByNumberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deletePayCodeRevisionByNumberSignalError(error_type, error_str);
        Q_EMIT deletePayCodeRevisionByNumberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::getAllPayCodeTags(const QString &employer_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getAllPayCodeTags"][_serverIndices.value("getAllPayCodeTags")].URL()+"/Employer/{EmployerId}/PayCodes/Tags");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::getAllPayCodeTagsCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::getAllPayCodeTagsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAllPayCodeTagsSignal(output);
        Q_EMIT getAllPayCodeTagsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAllPayCodeTagsSignalE(output, error_type, error_str);
        Q_EMIT getAllPayCodeTagsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAllPayCodeTagsSignalError(output, error_type, error_str);
        Q_EMIT getAllPayCodeTagsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::getPayCodeByEffectiveDate(const QString &employer_id, const QString &pay_code_id, const QDate &effective_date, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getPayCodeByEffectiveDate"][_serverIndices.value("getPayCodeByEffectiveDate")].URL()+"/Employer/{EmployerId}/PayCode/{PayCodeId}/{EffectiveDate}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString pay_code_idPathParam("{");
        pay_code_idPathParam.append("PayCodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "PayCodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"PayCodeId"+pathSuffix : pathPrefix;
        fullPath.replace(pay_code_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pay_code_id)));
    }
    
    {
        QString effective_datePathParam("{");
        effective_datePathParam.append("EffectiveDate").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EffectiveDate", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EffectiveDate"+pathSuffix : pathPrefix;
        fullPath.replace(effective_datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(effective_date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::getPayCodeByEffectiveDateCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::getPayCodeByEffectiveDateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPayCode output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPayCodeByEffectiveDateSignal(output);
        Q_EMIT getPayCodeByEffectiveDateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPayCodeByEffectiveDateSignalE(output, error_type, error_str);
        Q_EMIT getPayCodeByEffectiveDateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPayCodeByEffectiveDateSignalError(output, error_type, error_str);
        Q_EMIT getPayCodeByEffectiveDateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::getPayCodeFromEmployer(const QString &employer_id, const QString &pay_code_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getPayCodeFromEmployer"][_serverIndices.value("getPayCodeFromEmployer")].URL()+"/Employer/{EmployerId}/PayCode/{PayCodeId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString pay_code_idPathParam("{");
        pay_code_idPathParam.append("PayCodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "PayCodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"PayCodeId"+pathSuffix : pathPrefix;
        fullPath.replace(pay_code_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pay_code_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::getPayCodeFromEmployerCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::getPayCodeFromEmployerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPayCode output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPayCodeFromEmployerSignal(output);
        Q_EMIT getPayCodeFromEmployerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPayCodeFromEmployerSignalE(output, error_type, error_str);
        Q_EMIT getPayCodeFromEmployerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPayCodeFromEmployerSignalError(output, error_type, error_str);
        Q_EMIT getPayCodeFromEmployerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::getPayCodeRevisionByNumber(const QString &employer_id, const QString &pay_code_id, const QString &revision_number, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getPayCodeRevisionByNumber"][_serverIndices.value("getPayCodeRevisionByNumber")].URL()+"/Employer/{EmployerId}/PayCode/{PayCodeId}/Revision/{RevisionNumber}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString pay_code_idPathParam("{");
        pay_code_idPathParam.append("PayCodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "PayCodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"PayCodeId"+pathSuffix : pathPrefix;
        fullPath.replace(pay_code_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pay_code_id)));
    }
    
    {
        QString revision_numberPathParam("{");
        revision_numberPathParam.append("RevisionNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "RevisionNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"RevisionNumber"+pathSuffix : pathPrefix;
        fullPath.replace(revision_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(revision_number)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::getPayCodeRevisionByNumberCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::getPayCodeRevisionByNumberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPayCode output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPayCodeRevisionByNumberSignal(output);
        Q_EMIT getPayCodeRevisionByNumberSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPayCodeRevisionByNumberSignalE(output, error_type, error_str);
        Q_EMIT getPayCodeRevisionByNumberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPayCodeRevisionByNumberSignalError(output, error_type, error_str);
        Q_EMIT getPayCodeRevisionByNumberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::getPayCodeRevisions(const QString &employer_id, const QString &pay_code_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getPayCodeRevisions"][_serverIndices.value("getPayCodeRevisions")].URL()+"/Employer/{EmployerId}/PayCode/{PayCodeId}/Revisions");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString pay_code_idPathParam("{");
        pay_code_idPathParam.append("PayCodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "PayCodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"PayCodeId"+pathSuffix : pathPrefix;
        fullPath.replace(pay_code_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pay_code_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::getPayCodeRevisionsCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::getPayCodeRevisionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPayCodeRevisionsSignal(output);
        Q_EMIT getPayCodeRevisionsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPayCodeRevisionsSignalE(output, error_type, error_str);
        Q_EMIT getPayCodeRevisionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPayCodeRevisionsSignalError(output, error_type, error_str);
        Q_EMIT getPayCodeRevisionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::getPayCodesByEffectiveDate(const QString &employer_id, const QDate &effective_date, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getPayCodesByEffectiveDate"][_serverIndices.value("getPayCodesByEffectiveDate")].URL()+"/Employer/{EmployerId}/PayCodes/{EffectiveDate}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString effective_datePathParam("{");
        effective_datePathParam.append("EffectiveDate").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EffectiveDate", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EffectiveDate"+pathSuffix : pathPrefix;
        fullPath.replace(effective_datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(effective_date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::getPayCodesByEffectiveDateCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::getPayCodesByEffectiveDateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPayCodesByEffectiveDateSignal(output);
        Q_EMIT getPayCodesByEffectiveDateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPayCodesByEffectiveDateSignalE(output, error_type, error_str);
        Q_EMIT getPayCodesByEffectiveDateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPayCodesByEffectiveDateSignalError(output, error_type, error_str);
        Q_EMIT getPayCodesByEffectiveDateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::getPayCodesFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getPayCodesFromEmployer"][_serverIndices.value("getPayCodesFromEmployer")].URL()+"/Employer/{EmployerId}/PayCodes");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::getPayCodesFromEmployerCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::getPayCodesFromEmployerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPayCodesFromEmployerSignal(output);
        Q_EMIT getPayCodesFromEmployerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPayCodesFromEmployerSignalE(output, error_type, error_str);
        Q_EMIT getPayCodesFromEmployerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPayCodesFromEmployerSignalError(output, error_type, error_str);
        Q_EMIT getPayCodesFromEmployerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::getPayCodesFromNominalCode(const QString &employer_id, const QString &nominal_code_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getPayCodesFromNominalCode"][_serverIndices.value("getPayCodesFromNominalCode")].URL()+"/Employer/{EmployerId}/NominalCode/{NominalCodeId}/PayCodes");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString nominal_code_idPathParam("{");
        nominal_code_idPathParam.append("NominalCodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "NominalCodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"NominalCodeId"+pathSuffix : pathPrefix;
        fullPath.replace(nominal_code_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(nominal_code_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::getPayCodesFromNominalCodeCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::getPayCodesFromNominalCodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPayCodesFromNominalCodeSignal(output);
        Q_EMIT getPayCodesFromNominalCodeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPayCodesFromNominalCodeSignalE(output, error_type, error_str);
        Q_EMIT getPayCodesFromNominalCodeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPayCodesFromNominalCodeSignalError(output, error_type, error_str);
        Q_EMIT getPayCodesFromNominalCodeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::getPayCodesWithTag(const QString &employer_id, const QString &tag_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getPayCodesWithTag"][_serverIndices.value("getPayCodesWithTag")].URL()+"/Employer/{EmployerId}/PayCodes/Tag/{TagId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString tag_idPathParam("{");
        tag_idPathParam.append("TagId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TagId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TagId"+pathSuffix : pathPrefix;
        fullPath.replace(tag_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tag_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::getPayCodesWithTagCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::getPayCodesWithTagCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPayCodesWithTagSignal(output);
        Q_EMIT getPayCodesWithTagSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPayCodesWithTagSignalE(output, error_type, error_str);
        Q_EMIT getPayCodesWithTagSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPayCodesWithTagSignalError(output, error_type, error_str);
        Q_EMIT getPayCodesWithTagSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::patchPayCode(const QString &employer_id, const QString &pay_code_id, const QString &authorization, const QString &api_version, const OAIPayCode &oai_pay_code) {
    QString fullPath = QString(_serverConfigs["patchPayCode"][_serverIndices.value("patchPayCode")].URL()+"/Employer/{EmployerId}/PayCode/{PayCodeId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString pay_code_idPathParam("{");
        pay_code_idPathParam.append("PayCodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "PayCodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"PayCodeId"+pathSuffix : pathPrefix;
        fullPath.replace(pay_code_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pay_code_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_pay_code.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::patchPayCodeCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::patchPayCodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPayCode output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT patchPayCodeSignal(output);
        Q_EMIT patchPayCodeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT patchPayCodeSignalE(output, error_type, error_str);
        Q_EMIT patchPayCodeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT patchPayCodeSignalError(output, error_type, error_str);
        Q_EMIT patchPayCodeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::postPayCode(const QString &employer_id, const QString &authorization, const QString &api_version, const OAIPayCode &oai_pay_code) {
    QString fullPath = QString(_serverConfigs["postPayCode"][_serverIndices.value("postPayCode")].URL()+"/Employer/{EmployerId}/PayCodes");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_pay_code.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::postPayCodeCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::postPayCodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILink output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postPayCodeSignal(output);
        Q_EMIT postPayCodeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postPayCodeSignalE(output, error_type, error_str);
        Q_EMIT postPayCodeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postPayCodeSignalError(output, error_type, error_str);
        Q_EMIT postPayCodeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::putPayCode(const QString &employer_id, const QString &pay_code_id, const QString &authorization, const QString &api_version, const OAIPayCode &oai_pay_code) {
    QString fullPath = QString(_serverConfigs["putPayCode"][_serverIndices.value("putPayCode")].URL()+"/Employer/{EmployerId}/PayCode/{PayCodeId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString pay_code_idPathParam("{");
        pay_code_idPathParam.append("PayCodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "PayCodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"PayCodeId"+pathSuffix : pathPrefix;
        fullPath.replace(pay_code_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pay_code_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_pay_code.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPayCodeApi::putPayCodeCallback);
    connect(this, &OAIPayCodeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPayCodeApi::putPayCodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPayCode output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT putPayCodeSignal(output);
        Q_EMIT putPayCodeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT putPayCodeSignalE(output, error_type, error_str);
        Q_EMIT putPayCodeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT putPayCodeSignalError(output, error_type, error_str);
        Q_EMIT putPayCodeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPayCodeApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
