/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPayInstructionApi_H
#define OAI_OAIPayInstructionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include "OAIPayInstruction.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPayInstructionApi : public QObject {
    Q_OBJECT

public:
    OAIPayInstructionApi(const int timeOut = 0);
    ~OAIPayInstructionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  pay_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePayInstruction(const QString &employer_id, const QString &employee_id, const QString &pay_instruction_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllPayInstructionTags(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  pay_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayInstructionFromEmployee(const QString &employer_id, const QString &employee_id, const QString &pay_instruction_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayInstructionsFromEmployee(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayInstructionsWithTag(const QString &employer_id, const QString &employee_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  pay_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_pay_instruction OAIPayInstruction [required]
    */
    virtual void patchPayInstruction(const QString &employer_id, const QString &employee_id, const QString &pay_instruction_id, const QString &authorization, const QString &api_version, const OAIPayInstruction &oai_pay_instruction);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_pay_instruction OAIPayInstruction [required]
    */
    virtual void postPayInstruction(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version, const OAIPayInstruction &oai_pay_instruction);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  pay_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_pay_instruction OAIPayInstruction [required]
    */
    virtual void putPayInstruction(const QString &employer_id, const QString &employee_id, const QString &pay_instruction_id, const QString &authorization, const QString &api_version, const OAIPayInstruction &oai_pay_instruction);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePayInstructionCallback(OAIHttpRequestWorker *worker);
    void getAllPayInstructionTagsCallback(OAIHttpRequestWorker *worker);
    void getPayInstructionFromEmployeeCallback(OAIHttpRequestWorker *worker);
    void getPayInstructionsFromEmployeeCallback(OAIHttpRequestWorker *worker);
    void getPayInstructionsWithTagCallback(OAIHttpRequestWorker *worker);
    void patchPayInstructionCallback(OAIHttpRequestWorker *worker);
    void postPayInstructionCallback(OAIHttpRequestWorker *worker);
    void putPayInstructionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePayInstructionSignal();
    void getAllPayInstructionTagsSignal(OAILinkCollection summary);
    void getPayInstructionFromEmployeeSignal(OAIPayInstruction summary);
    void getPayInstructionsFromEmployeeSignal(OAILinkCollection summary);
    void getPayInstructionsWithTagSignal(OAILinkCollection summary);
    void patchPayInstructionSignal(OAIPayInstruction summary);
    void postPayInstructionSignal(OAILink summary);
    void putPayInstructionSignal(OAIPayInstruction summary);


    void deletePayInstructionSignalFull(OAIHttpRequestWorker *worker);
    void getAllPayInstructionTagsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayInstructionFromEmployeeSignalFull(OAIHttpRequestWorker *worker, OAIPayInstruction summary);
    void getPayInstructionsFromEmployeeSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayInstructionsWithTagSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void patchPayInstructionSignalFull(OAIHttpRequestWorker *worker, OAIPayInstruction summary);
    void postPayInstructionSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putPayInstructionSignalFull(OAIHttpRequestWorker *worker, OAIPayInstruction summary);

    Q_DECL_DEPRECATED_X("Use deletePayInstructionSignalError() instead")
    void deletePayInstructionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayInstructionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPayInstructionTagsSignalError() instead")
    void getAllPayInstructionTagsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPayInstructionTagsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayInstructionFromEmployeeSignalError() instead")
    void getPayInstructionFromEmployeeSignalE(OAIPayInstruction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayInstructionFromEmployeeSignalError(OAIPayInstruction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayInstructionsFromEmployeeSignalError() instead")
    void getPayInstructionsFromEmployeeSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayInstructionsFromEmployeeSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayInstructionsWithTagSignalError() instead")
    void getPayInstructionsWithTagSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayInstructionsWithTagSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPayInstructionSignalError() instead")
    void patchPayInstructionSignalE(OAIPayInstruction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPayInstructionSignalError(OAIPayInstruction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPayInstructionSignalError() instead")
    void postPayInstructionSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPayInstructionSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPayInstructionSignalError() instead")
    void putPayInstructionSignalE(OAIPayInstruction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPayInstructionSignalError(OAIPayInstruction summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePayInstructionSignalErrorFull() instead")
    void deletePayInstructionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayInstructionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPayInstructionTagsSignalErrorFull() instead")
    void getAllPayInstructionTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPayInstructionTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayInstructionFromEmployeeSignalErrorFull() instead")
    void getPayInstructionFromEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayInstructionFromEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayInstructionsFromEmployeeSignalErrorFull() instead")
    void getPayInstructionsFromEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayInstructionsFromEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayInstructionsWithTagSignalErrorFull() instead")
    void getPayInstructionsWithTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayInstructionsWithTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPayInstructionSignalErrorFull() instead")
    void patchPayInstructionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPayInstructionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPayInstructionSignalErrorFull() instead")
    void postPayInstructionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPayInstructionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPayInstructionSignalErrorFull() instead")
    void putPayInstructionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPayInstructionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
