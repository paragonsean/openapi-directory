/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobsApi_H
#define OAI_OAIJobsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchJobInstruction.h"
#include "OAICisJobInstructionBase.h"
#include "OAIDpsJobInstruction.h"
#include "OAIErrorModel.h"
#include "OAIHttpFileElement.h"
#include "OAIJobInfo.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include "OAIPayRunJobInstruction.h"
#include "OAIRtiJobInstruction.h"
#include "OAIThirdPartyJobInstruction.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobsApi : public QObject {
    Q_OBJECT

public:
    OAIJobsApi(const int timeOut = 0);
    ~OAIJobsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteBatchJob(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteCisJob(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteDpsJob(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePayRunJob(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteRtiJob(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteThirdPartyJob(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getBatchJobInfo(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getBatchJobProgress(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getBatchJobStatus(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getBatchJobs(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCisJobInfo(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCisJobProgress(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCisJobStatus(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCisJobs(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getDpsJobInfo(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getDpsJobProgress(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getDpsJobStatus(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getDpsJobs(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerJobs(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayRunJobInfo(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayRunJobProgress(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayRunJobStatus(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayRunJobs(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getRtiJobInfo(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getRtiJobProgress(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getRtiJobStatus(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getRtiJobs(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getThirdPartyJobInfo(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getThirdPartyJobProgress(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getThirdPartyJobStatus(const QString &job_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getThirdPartyJobs(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_batch_job_instruction OAIBatchJobInstruction [required]
    */
    virtual void postNewBatchJob(const QString &authorization, const QString &api_version, const OAIBatchJobInstruction &oai_batch_job_instruction);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_cis_job_instruction_base OAICisJobInstructionBase [required]
    */
    virtual void postNewCisJob(const QString &authorization, const QString &api_version, const OAICisJobInstructionBase &oai_cis_job_instruction_base);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_dps_job_instruction OAIDpsJobInstruction [required]
    */
    virtual void postNewDpsJob(const QString &authorization, const QString &api_version, const OAIDpsJobInstruction &oai_dps_job_instruction);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_pay_run_job_instruction OAIPayRunJobInstruction [required]
    */
    virtual void postNewPayRunJob(const QString &authorization, const QString &api_version, const OAIPayRunJobInstruction &oai_pay_run_job_instruction);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_rti_job_instruction OAIRtiJobInstruction [required]
    */
    virtual void postNewRtiJob(const QString &authorization, const QString &api_version, const OAIRtiJobInstruction &oai_rti_job_instruction);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_third_party_job_instruction OAIThirdPartyJobInstruction [required]
    */
    virtual void postNewThirdPartyJob(const QString &authorization, const QString &api_version, const OAIThirdPartyJobInstruction &oai_third_party_job_instruction);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteBatchJobCallback(OAIHttpRequestWorker *worker);
    void deleteCisJobCallback(OAIHttpRequestWorker *worker);
    void deleteDpsJobCallback(OAIHttpRequestWorker *worker);
    void deletePayRunJobCallback(OAIHttpRequestWorker *worker);
    void deleteRtiJobCallback(OAIHttpRequestWorker *worker);
    void deleteThirdPartyJobCallback(OAIHttpRequestWorker *worker);
    void getBatchJobInfoCallback(OAIHttpRequestWorker *worker);
    void getBatchJobProgressCallback(OAIHttpRequestWorker *worker);
    void getBatchJobStatusCallback(OAIHttpRequestWorker *worker);
    void getBatchJobsCallback(OAIHttpRequestWorker *worker);
    void getCisJobInfoCallback(OAIHttpRequestWorker *worker);
    void getCisJobProgressCallback(OAIHttpRequestWorker *worker);
    void getCisJobStatusCallback(OAIHttpRequestWorker *worker);
    void getCisJobsCallback(OAIHttpRequestWorker *worker);
    void getDpsJobInfoCallback(OAIHttpRequestWorker *worker);
    void getDpsJobProgressCallback(OAIHttpRequestWorker *worker);
    void getDpsJobStatusCallback(OAIHttpRequestWorker *worker);
    void getDpsJobsCallback(OAIHttpRequestWorker *worker);
    void getEmployerJobsCallback(OAIHttpRequestWorker *worker);
    void getPayRunJobInfoCallback(OAIHttpRequestWorker *worker);
    void getPayRunJobProgressCallback(OAIHttpRequestWorker *worker);
    void getPayRunJobStatusCallback(OAIHttpRequestWorker *worker);
    void getPayRunJobsCallback(OAIHttpRequestWorker *worker);
    void getRtiJobInfoCallback(OAIHttpRequestWorker *worker);
    void getRtiJobProgressCallback(OAIHttpRequestWorker *worker);
    void getRtiJobStatusCallback(OAIHttpRequestWorker *worker);
    void getRtiJobsCallback(OAIHttpRequestWorker *worker);
    void getThirdPartyJobInfoCallback(OAIHttpRequestWorker *worker);
    void getThirdPartyJobProgressCallback(OAIHttpRequestWorker *worker);
    void getThirdPartyJobStatusCallback(OAIHttpRequestWorker *worker);
    void getThirdPartyJobsCallback(OAIHttpRequestWorker *worker);
    void postNewBatchJobCallback(OAIHttpRequestWorker *worker);
    void postNewCisJobCallback(OAIHttpRequestWorker *worker);
    void postNewDpsJobCallback(OAIHttpRequestWorker *worker);
    void postNewPayRunJobCallback(OAIHttpRequestWorker *worker);
    void postNewRtiJobCallback(OAIHttpRequestWorker *worker);
    void postNewThirdPartyJobCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteBatchJobSignal();
    void deleteCisJobSignal();
    void deleteDpsJobSignal();
    void deletePayRunJobSignal();
    void deleteRtiJobSignal();
    void deleteThirdPartyJobSignal();
    void getBatchJobInfoSignal(OAIJobInfo summary);
    void getBatchJobProgressSignal();
    void getBatchJobStatusSignal();
    void getBatchJobsSignal(OAILinkCollection summary);
    void getCisJobInfoSignal(OAIJobInfo summary);
    void getCisJobProgressSignal();
    void getCisJobStatusSignal();
    void getCisJobsSignal(OAILinkCollection summary);
    void getDpsJobInfoSignal(OAIJobInfo summary);
    void getDpsJobProgressSignal();
    void getDpsJobStatusSignal();
    void getDpsJobsSignal(OAILinkCollection summary);
    void getEmployerJobsSignal(OAIHttpFileElement summary);
    void getPayRunJobInfoSignal(OAIJobInfo summary);
    void getPayRunJobProgressSignal();
    void getPayRunJobStatusSignal();
    void getPayRunJobsSignal(OAILinkCollection summary);
    void getRtiJobInfoSignal(OAIJobInfo summary);
    void getRtiJobProgressSignal();
    void getRtiJobStatusSignal();
    void getRtiJobsSignal(OAILinkCollection summary);
    void getThirdPartyJobInfoSignal(OAIJobInfo summary);
    void getThirdPartyJobProgressSignal();
    void getThirdPartyJobStatusSignal();
    void getThirdPartyJobsSignal(OAILinkCollection summary);
    void postNewBatchJobSignal(OAILink summary);
    void postNewCisJobSignal(OAILink summary);
    void postNewDpsJobSignal(OAILink summary);
    void postNewPayRunJobSignal(OAILink summary);
    void postNewRtiJobSignal(OAILink summary);
    void postNewThirdPartyJobSignal(OAILink summary);


    void deleteBatchJobSignalFull(OAIHttpRequestWorker *worker);
    void deleteCisJobSignalFull(OAIHttpRequestWorker *worker);
    void deleteDpsJobSignalFull(OAIHttpRequestWorker *worker);
    void deletePayRunJobSignalFull(OAIHttpRequestWorker *worker);
    void deleteRtiJobSignalFull(OAIHttpRequestWorker *worker);
    void deleteThirdPartyJobSignalFull(OAIHttpRequestWorker *worker);
    void getBatchJobInfoSignalFull(OAIHttpRequestWorker *worker, OAIJobInfo summary);
    void getBatchJobProgressSignalFull(OAIHttpRequestWorker *worker);
    void getBatchJobStatusSignalFull(OAIHttpRequestWorker *worker);
    void getBatchJobsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getCisJobInfoSignalFull(OAIHttpRequestWorker *worker, OAIJobInfo summary);
    void getCisJobProgressSignalFull(OAIHttpRequestWorker *worker);
    void getCisJobStatusSignalFull(OAIHttpRequestWorker *worker);
    void getCisJobsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getDpsJobInfoSignalFull(OAIHttpRequestWorker *worker, OAIJobInfo summary);
    void getDpsJobProgressSignalFull(OAIHttpRequestWorker *worker);
    void getDpsJobStatusSignalFull(OAIHttpRequestWorker *worker);
    void getDpsJobsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployerJobsSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPayRunJobInfoSignalFull(OAIHttpRequestWorker *worker, OAIJobInfo summary);
    void getPayRunJobProgressSignalFull(OAIHttpRequestWorker *worker);
    void getPayRunJobStatusSignalFull(OAIHttpRequestWorker *worker);
    void getPayRunJobsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getRtiJobInfoSignalFull(OAIHttpRequestWorker *worker, OAIJobInfo summary);
    void getRtiJobProgressSignalFull(OAIHttpRequestWorker *worker);
    void getRtiJobStatusSignalFull(OAIHttpRequestWorker *worker);
    void getRtiJobsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getThirdPartyJobInfoSignalFull(OAIHttpRequestWorker *worker, OAIJobInfo summary);
    void getThirdPartyJobProgressSignalFull(OAIHttpRequestWorker *worker);
    void getThirdPartyJobStatusSignalFull(OAIHttpRequestWorker *worker);
    void getThirdPartyJobsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void postNewBatchJobSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void postNewCisJobSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void postNewDpsJobSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void postNewPayRunJobSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void postNewRtiJobSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void postNewThirdPartyJobSignalFull(OAIHttpRequestWorker *worker, OAILink summary);

    Q_DECL_DEPRECATED_X("Use deleteBatchJobSignalError() instead")
    void deleteBatchJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBatchJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCisJobSignalError() instead")
    void deleteCisJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCisJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDpsJobSignalError() instead")
    void deleteDpsJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDpsJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayRunJobSignalError() instead")
    void deletePayRunJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayRunJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRtiJobSignalError() instead")
    void deleteRtiJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRtiJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteThirdPartyJobSignalError() instead")
    void deleteThirdPartyJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteThirdPartyJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchJobInfoSignalError() instead")
    void getBatchJobInfoSignalE(OAIJobInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchJobInfoSignalError(OAIJobInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchJobProgressSignalError() instead")
    void getBatchJobProgressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchJobProgressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchJobStatusSignalError() instead")
    void getBatchJobStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchJobStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchJobsSignalError() instead")
    void getBatchJobsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchJobsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCisJobInfoSignalError() instead")
    void getCisJobInfoSignalE(OAIJobInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCisJobInfoSignalError(OAIJobInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCisJobProgressSignalError() instead")
    void getCisJobProgressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCisJobProgressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCisJobStatusSignalError() instead")
    void getCisJobStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCisJobStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCisJobsSignalError() instead")
    void getCisJobsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCisJobsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsJobInfoSignalError() instead")
    void getDpsJobInfoSignalE(OAIJobInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsJobInfoSignalError(OAIJobInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsJobProgressSignalError() instead")
    void getDpsJobProgressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsJobProgressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsJobStatusSignalError() instead")
    void getDpsJobStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsJobStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsJobsSignalError() instead")
    void getDpsJobsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsJobsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerJobsSignalError() instead")
    void getEmployerJobsSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerJobsSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunJobInfoSignalError() instead")
    void getPayRunJobInfoSignalE(OAIJobInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunJobInfoSignalError(OAIJobInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunJobProgressSignalError() instead")
    void getPayRunJobProgressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunJobProgressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunJobStatusSignalError() instead")
    void getPayRunJobStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunJobStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunJobsSignalError() instead")
    void getPayRunJobsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunJobsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiJobInfoSignalError() instead")
    void getRtiJobInfoSignalE(OAIJobInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiJobInfoSignalError(OAIJobInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiJobProgressSignalError() instead")
    void getRtiJobProgressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiJobProgressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiJobStatusSignalError() instead")
    void getRtiJobStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiJobStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiJobsSignalError() instead")
    void getRtiJobsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiJobsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThirdPartyJobInfoSignalError() instead")
    void getThirdPartyJobInfoSignalE(OAIJobInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getThirdPartyJobInfoSignalError(OAIJobInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThirdPartyJobProgressSignalError() instead")
    void getThirdPartyJobProgressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getThirdPartyJobProgressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThirdPartyJobStatusSignalError() instead")
    void getThirdPartyJobStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getThirdPartyJobStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThirdPartyJobsSignalError() instead")
    void getThirdPartyJobsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getThirdPartyJobsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewBatchJobSignalError() instead")
    void postNewBatchJobSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewBatchJobSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewCisJobSignalError() instead")
    void postNewCisJobSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewCisJobSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewDpsJobSignalError() instead")
    void postNewDpsJobSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewDpsJobSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewPayRunJobSignalError() instead")
    void postNewPayRunJobSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewPayRunJobSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewRtiJobSignalError() instead")
    void postNewRtiJobSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewRtiJobSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewThirdPartyJobSignalError() instead")
    void postNewThirdPartyJobSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewThirdPartyJobSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteBatchJobSignalErrorFull() instead")
    void deleteBatchJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBatchJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCisJobSignalErrorFull() instead")
    void deleteCisJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCisJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDpsJobSignalErrorFull() instead")
    void deleteDpsJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDpsJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayRunJobSignalErrorFull() instead")
    void deletePayRunJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayRunJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRtiJobSignalErrorFull() instead")
    void deleteRtiJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRtiJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteThirdPartyJobSignalErrorFull() instead")
    void deleteThirdPartyJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteThirdPartyJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchJobInfoSignalErrorFull() instead")
    void getBatchJobInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchJobInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchJobProgressSignalErrorFull() instead")
    void getBatchJobProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchJobProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchJobStatusSignalErrorFull() instead")
    void getBatchJobStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchJobStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchJobsSignalErrorFull() instead")
    void getBatchJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCisJobInfoSignalErrorFull() instead")
    void getCisJobInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCisJobInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCisJobProgressSignalErrorFull() instead")
    void getCisJobProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCisJobProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCisJobStatusSignalErrorFull() instead")
    void getCisJobStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCisJobStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCisJobsSignalErrorFull() instead")
    void getCisJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCisJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsJobInfoSignalErrorFull() instead")
    void getDpsJobInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsJobInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsJobProgressSignalErrorFull() instead")
    void getDpsJobProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsJobProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsJobStatusSignalErrorFull() instead")
    void getDpsJobStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsJobStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsJobsSignalErrorFull() instead")
    void getDpsJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerJobsSignalErrorFull() instead")
    void getEmployerJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunJobInfoSignalErrorFull() instead")
    void getPayRunJobInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunJobInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunJobProgressSignalErrorFull() instead")
    void getPayRunJobProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunJobProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunJobStatusSignalErrorFull() instead")
    void getPayRunJobStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunJobStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunJobsSignalErrorFull() instead")
    void getPayRunJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiJobInfoSignalErrorFull() instead")
    void getRtiJobInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiJobInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiJobProgressSignalErrorFull() instead")
    void getRtiJobProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiJobProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiJobStatusSignalErrorFull() instead")
    void getRtiJobStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiJobStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRtiJobsSignalErrorFull() instead")
    void getRtiJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRtiJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThirdPartyJobInfoSignalErrorFull() instead")
    void getThirdPartyJobInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getThirdPartyJobInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThirdPartyJobProgressSignalErrorFull() instead")
    void getThirdPartyJobProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getThirdPartyJobProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThirdPartyJobStatusSignalErrorFull() instead")
    void getThirdPartyJobStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getThirdPartyJobStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThirdPartyJobsSignalErrorFull() instead")
    void getThirdPartyJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getThirdPartyJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewBatchJobSignalErrorFull() instead")
    void postNewBatchJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewBatchJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewCisJobSignalErrorFull() instead")
    void postNewCisJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewCisJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewDpsJobSignalErrorFull() instead")
    void postNewDpsJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewDpsJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewPayRunJobSignalErrorFull() instead")
    void postNewPayRunJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewPayRunJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewRtiJobSignalErrorFull() instead")
    void postNewRtiJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewRtiJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNewThirdPartyJobSignalErrorFull() instead")
    void postNewThirdPartyJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNewThirdPartyJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
