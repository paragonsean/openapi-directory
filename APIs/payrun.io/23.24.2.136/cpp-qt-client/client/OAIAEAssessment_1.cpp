/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAEAssessment_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAEAssessment_1::OAIAEAssessment_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAEAssessment_1::OAIAEAssessment_1() {
    this->initializeModel();
}

OAIAEAssessment_1::~OAIAEAssessment_1() {}

void OAIAEAssessment_1::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_assessment_code_isSet = false;
    m_assessment_code_isValid = false;

    m_assessment_date_isSet = false;
    m_assessment_date_isValid = false;

    m_assessment_event_isSet = false;
    m_assessment_event_isValid = false;

    m_assessment_override_isSet = false;
    m_assessment_override_isValid = false;

    m_assessment_result_isSet = false;
    m_assessment_result_isValid = false;

    m_is_member_of_alternative_pension_scheme_isSet = false;
    m_is_member_of_alternative_pension_scheme_isValid = false;

    m_opt_out_window_end_date_isSet = false;
    m_opt_out_window_end_date_isValid = false;

    m_qualifying_earnings_isSet = false;
    m_qualifying_earnings_isValid = false;

    m_reenrolment_date_isSet = false;
    m_reenrolment_date_isValid = false;

    m_state_pension_age_isSet = false;
    m_state_pension_age_isValid = false;

    m_state_pension_date_isSet = false;
    m_state_pension_date_isValid = false;

    m_tax_period_isSet = false;
    m_tax_period_isValid = false;

    m_tax_year_isSet = false;
    m_tax_year_isValid = false;
}

void OAIAEAssessment_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAEAssessment_1::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("Age")]);
    m_age_isSet = !json[QString("Age")].isNull() && m_age_isValid;

    m_assessment_code_isValid = ::OpenAPI::fromJsonValue(m_assessment_code, json[QString("AssessmentCode")]);
    m_assessment_code_isSet = !json[QString("AssessmentCode")].isNull() && m_assessment_code_isValid;

    m_assessment_date_isValid = ::OpenAPI::fromJsonValue(m_assessment_date, json[QString("AssessmentDate")]);
    m_assessment_date_isSet = !json[QString("AssessmentDate")].isNull() && m_assessment_date_isValid;

    m_assessment_event_isValid = ::OpenAPI::fromJsonValue(m_assessment_event, json[QString("AssessmentEvent")]);
    m_assessment_event_isSet = !json[QString("AssessmentEvent")].isNull() && m_assessment_event_isValid;

    m_assessment_override_isValid = ::OpenAPI::fromJsonValue(m_assessment_override, json[QString("AssessmentOverride")]);
    m_assessment_override_isSet = !json[QString("AssessmentOverride")].isNull() && m_assessment_override_isValid;

    m_assessment_result_isValid = ::OpenAPI::fromJsonValue(m_assessment_result, json[QString("AssessmentResult")]);
    m_assessment_result_isSet = !json[QString("AssessmentResult")].isNull() && m_assessment_result_isValid;

    m_is_member_of_alternative_pension_scheme_isValid = ::OpenAPI::fromJsonValue(m_is_member_of_alternative_pension_scheme, json[QString("IsMemberOfAlternativePensionScheme")]);
    m_is_member_of_alternative_pension_scheme_isSet = !json[QString("IsMemberOfAlternativePensionScheme")].isNull() && m_is_member_of_alternative_pension_scheme_isValid;

    m_opt_out_window_end_date_isValid = ::OpenAPI::fromJsonValue(m_opt_out_window_end_date, json[QString("OptOutWindowEndDate")]);
    m_opt_out_window_end_date_isSet = !json[QString("OptOutWindowEndDate")].isNull() && m_opt_out_window_end_date_isValid;

    m_qualifying_earnings_isValid = ::OpenAPI::fromJsonValue(m_qualifying_earnings, json[QString("QualifyingEarnings")]);
    m_qualifying_earnings_isSet = !json[QString("QualifyingEarnings")].isNull() && m_qualifying_earnings_isValid;

    m_reenrolment_date_isValid = ::OpenAPI::fromJsonValue(m_reenrolment_date, json[QString("ReenrolmentDate")]);
    m_reenrolment_date_isSet = !json[QString("ReenrolmentDate")].isNull() && m_reenrolment_date_isValid;

    m_state_pension_age_isValid = ::OpenAPI::fromJsonValue(m_state_pension_age, json[QString("StatePensionAge")]);
    m_state_pension_age_isSet = !json[QString("StatePensionAge")].isNull() && m_state_pension_age_isValid;

    m_state_pension_date_isValid = ::OpenAPI::fromJsonValue(m_state_pension_date, json[QString("StatePensionDate")]);
    m_state_pension_date_isSet = !json[QString("StatePensionDate")].isNull() && m_state_pension_date_isValid;

    m_tax_period_isValid = ::OpenAPI::fromJsonValue(m_tax_period, json[QString("TaxPeriod")]);
    m_tax_period_isSet = !json[QString("TaxPeriod")].isNull() && m_tax_period_isValid;

    m_tax_year_isValid = ::OpenAPI::fromJsonValue(m_tax_year, json[QString("TaxYear")]);
    m_tax_year_isSet = !json[QString("TaxYear")].isNull() && m_tax_year_isValid;
}

QString OAIAEAssessment_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAEAssessment_1::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("Age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_assessment_code_isSet) {
        obj.insert(QString("AssessmentCode"), ::OpenAPI::toJsonValue(m_assessment_code));
    }
    if (m_assessment_date_isSet) {
        obj.insert(QString("AssessmentDate"), ::OpenAPI::toJsonValue(m_assessment_date));
    }
    if (m_assessment_event_isSet) {
        obj.insert(QString("AssessmentEvent"), ::OpenAPI::toJsonValue(m_assessment_event));
    }
    if (m_assessment_override_isSet) {
        obj.insert(QString("AssessmentOverride"), ::OpenAPI::toJsonValue(m_assessment_override));
    }
    if (m_assessment_result_isSet) {
        obj.insert(QString("AssessmentResult"), ::OpenAPI::toJsonValue(m_assessment_result));
    }
    if (m_is_member_of_alternative_pension_scheme_isSet) {
        obj.insert(QString("IsMemberOfAlternativePensionScheme"), ::OpenAPI::toJsonValue(m_is_member_of_alternative_pension_scheme));
    }
    if (m_opt_out_window_end_date_isSet) {
        obj.insert(QString("OptOutWindowEndDate"), ::OpenAPI::toJsonValue(m_opt_out_window_end_date));
    }
    if (m_qualifying_earnings_isSet) {
        obj.insert(QString("QualifyingEarnings"), ::OpenAPI::toJsonValue(m_qualifying_earnings));
    }
    if (m_reenrolment_date_isSet) {
        obj.insert(QString("ReenrolmentDate"), ::OpenAPI::toJsonValue(m_reenrolment_date));
    }
    if (m_state_pension_age_isSet) {
        obj.insert(QString("StatePensionAge"), ::OpenAPI::toJsonValue(m_state_pension_age));
    }
    if (m_state_pension_date_isSet) {
        obj.insert(QString("StatePensionDate"), ::OpenAPI::toJsonValue(m_state_pension_date));
    }
    if (m_tax_period_isSet) {
        obj.insert(QString("TaxPeriod"), ::OpenAPI::toJsonValue(m_tax_period));
    }
    if (m_tax_year_isSet) {
        obj.insert(QString("TaxYear"), ::OpenAPI::toJsonValue(m_tax_year));
    }
    return obj;
}

qint32 OAIAEAssessment_1::getAge() const {
    return m_age;
}
void OAIAEAssessment_1::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIAEAssessment_1::is_age_Set() const{
    return m_age_isSet;
}

bool OAIAEAssessment_1::is_age_Valid() const{
    return m_age_isValid;
}

QString OAIAEAssessment_1::getAssessmentCode() const {
    return m_assessment_code;
}
void OAIAEAssessment_1::setAssessmentCode(const QString &assessment_code) {
    m_assessment_code = assessment_code;
    m_assessment_code_isSet = true;
}

bool OAIAEAssessment_1::is_assessment_code_Set() const{
    return m_assessment_code_isSet;
}

bool OAIAEAssessment_1::is_assessment_code_Valid() const{
    return m_assessment_code_isValid;
}

QDate OAIAEAssessment_1::getAssessmentDate() const {
    return m_assessment_date;
}
void OAIAEAssessment_1::setAssessmentDate(const QDate &assessment_date) {
    m_assessment_date = assessment_date;
    m_assessment_date_isSet = true;
}

bool OAIAEAssessment_1::is_assessment_date_Set() const{
    return m_assessment_date_isSet;
}

bool OAIAEAssessment_1::is_assessment_date_Valid() const{
    return m_assessment_date_isValid;
}

QString OAIAEAssessment_1::getAssessmentEvent() const {
    return m_assessment_event;
}
void OAIAEAssessment_1::setAssessmentEvent(const QString &assessment_event) {
    m_assessment_event = assessment_event;
    m_assessment_event_isSet = true;
}

bool OAIAEAssessment_1::is_assessment_event_Set() const{
    return m_assessment_event_isSet;
}

bool OAIAEAssessment_1::is_assessment_event_Valid() const{
    return m_assessment_event_isValid;
}

QString OAIAEAssessment_1::getAssessmentOverride() const {
    return m_assessment_override;
}
void OAIAEAssessment_1::setAssessmentOverride(const QString &assessment_override) {
    m_assessment_override = assessment_override;
    m_assessment_override_isSet = true;
}

bool OAIAEAssessment_1::is_assessment_override_Set() const{
    return m_assessment_override_isSet;
}

bool OAIAEAssessment_1::is_assessment_override_Valid() const{
    return m_assessment_override_isValid;
}

QString OAIAEAssessment_1::getAssessmentResult() const {
    return m_assessment_result;
}
void OAIAEAssessment_1::setAssessmentResult(const QString &assessment_result) {
    m_assessment_result = assessment_result;
    m_assessment_result_isSet = true;
}

bool OAIAEAssessment_1::is_assessment_result_Set() const{
    return m_assessment_result_isSet;
}

bool OAIAEAssessment_1::is_assessment_result_Valid() const{
    return m_assessment_result_isValid;
}

bool OAIAEAssessment_1::isIsMemberOfAlternativePensionScheme() const {
    return m_is_member_of_alternative_pension_scheme;
}
void OAIAEAssessment_1::setIsMemberOfAlternativePensionScheme(const bool &is_member_of_alternative_pension_scheme) {
    m_is_member_of_alternative_pension_scheme = is_member_of_alternative_pension_scheme;
    m_is_member_of_alternative_pension_scheme_isSet = true;
}

bool OAIAEAssessment_1::is_is_member_of_alternative_pension_scheme_Set() const{
    return m_is_member_of_alternative_pension_scheme_isSet;
}

bool OAIAEAssessment_1::is_is_member_of_alternative_pension_scheme_Valid() const{
    return m_is_member_of_alternative_pension_scheme_isValid;
}

QDate OAIAEAssessment_1::getOptOutWindowEndDate() const {
    return m_opt_out_window_end_date;
}
void OAIAEAssessment_1::setOptOutWindowEndDate(const QDate &opt_out_window_end_date) {
    m_opt_out_window_end_date = opt_out_window_end_date;
    m_opt_out_window_end_date_isSet = true;
}

bool OAIAEAssessment_1::is_opt_out_window_end_date_Set() const{
    return m_opt_out_window_end_date_isSet;
}

bool OAIAEAssessment_1::is_opt_out_window_end_date_Valid() const{
    return m_opt_out_window_end_date_isValid;
}

double OAIAEAssessment_1::getQualifyingEarnings() const {
    return m_qualifying_earnings;
}
void OAIAEAssessment_1::setQualifyingEarnings(const double &qualifying_earnings) {
    m_qualifying_earnings = qualifying_earnings;
    m_qualifying_earnings_isSet = true;
}

bool OAIAEAssessment_1::is_qualifying_earnings_Set() const{
    return m_qualifying_earnings_isSet;
}

bool OAIAEAssessment_1::is_qualifying_earnings_Valid() const{
    return m_qualifying_earnings_isValid;
}

QDate OAIAEAssessment_1::getReenrolmentDate() const {
    return m_reenrolment_date;
}
void OAIAEAssessment_1::setReenrolmentDate(const QDate &reenrolment_date) {
    m_reenrolment_date = reenrolment_date;
    m_reenrolment_date_isSet = true;
}

bool OAIAEAssessment_1::is_reenrolment_date_Set() const{
    return m_reenrolment_date_isSet;
}

bool OAIAEAssessment_1::is_reenrolment_date_Valid() const{
    return m_reenrolment_date_isValid;
}

qint32 OAIAEAssessment_1::getStatePensionAge() const {
    return m_state_pension_age;
}
void OAIAEAssessment_1::setStatePensionAge(const qint32 &state_pension_age) {
    m_state_pension_age = state_pension_age;
    m_state_pension_age_isSet = true;
}

bool OAIAEAssessment_1::is_state_pension_age_Set() const{
    return m_state_pension_age_isSet;
}

bool OAIAEAssessment_1::is_state_pension_age_Valid() const{
    return m_state_pension_age_isValid;
}

QDate OAIAEAssessment_1::getStatePensionDate() const {
    return m_state_pension_date;
}
void OAIAEAssessment_1::setStatePensionDate(const QDate &state_pension_date) {
    m_state_pension_date = state_pension_date;
    m_state_pension_date_isSet = true;
}

bool OAIAEAssessment_1::is_state_pension_date_Set() const{
    return m_state_pension_date_isSet;
}

bool OAIAEAssessment_1::is_state_pension_date_Valid() const{
    return m_state_pension_date_isValid;
}

qint32 OAIAEAssessment_1::getTaxPeriod() const {
    return m_tax_period;
}
void OAIAEAssessment_1::setTaxPeriod(const qint32 &tax_period) {
    m_tax_period = tax_period;
    m_tax_period_isSet = true;
}

bool OAIAEAssessment_1::is_tax_period_Set() const{
    return m_tax_period_isSet;
}

bool OAIAEAssessment_1::is_tax_period_Valid() const{
    return m_tax_period_isValid;
}

qint32 OAIAEAssessment_1::getTaxYear() const {
    return m_tax_year;
}
void OAIAEAssessment_1::setTaxYear(const qint32 &tax_year) {
    m_tax_year = tax_year;
    m_tax_year_isSet = true;
}

bool OAIAEAssessment_1::is_tax_year_Set() const{
    return m_tax_year_isSet;
}

bool OAIAEAssessment_1::is_tax_year_Valid() const{
    return m_tax_year_isValid;
}

bool OAIAEAssessment_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_member_of_alternative_pension_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_window_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualifying_earnings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reenrolment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_pension_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_pension_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAEAssessment_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
