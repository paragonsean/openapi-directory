/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmployee_2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmployee_2::OAIEmployee_2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmployee_2::OAIEmployee_2() {
    this->initializeModel();
}

OAIEmployee_2::~OAIEmployee_2() {}

void OAIEmployee_2::initializeModel() {

    m_ae_assessment_override_isSet = false;
    m_ae_assessment_override_isValid = false;

    m_ae_assessment_override_date_isSet = false;
    m_ae_assessment_override_date_isValid = false;

    m_ae_exclusion_reason_code_isSet = false;
    m_ae_exclusion_reason_code_isValid = false;

    m_ae_postponement_date_isSet = false;
    m_ae_postponement_date_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_bank_account_isSet = false;
    m_bank_account_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_deactivated_isSet = false;
    m_deactivated_isValid = false;

    m_directorship_appointment_date_isSet = false;
    m_directorship_appointment_date_isValid = false;

    m_eea_citizen_isSet = false;
    m_eea_citizen_isValid = false;

    m_epm6_isSet = false;
    m_epm6_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_employee_partner_isSet = false;
    m_employee_partner_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_hours_per_week_isSet = false;
    m_hours_per_week_isValid = false;

    m_initials_isSet = false;
    m_initials_isValid = false;

    m_irregular_employment_isSet = false;
    m_irregular_employment_isValid = false;

    m_is_agency_worker_isSet = false;
    m_is_agency_worker_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_leaver_reason_isSet = false;
    m_leaver_reason_isValid = false;

    m_leaving_date_isSet = false;
    m_leaving_date_isValid = false;

    m_marital_status_isSet = false;
    m_marital_status_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_middle_name_isSet = false;
    m_middle_name_isValid = false;

    m_next_revision_date_isSet = false;
    m_next_revision_date_isValid = false;

    m_ni_number_isSet = false;
    m_ni_number_isValid = false;

    m_nic_liability_isSet = false;
    m_nic_liability_isValid = false;

    m_off_payroll_worker_isSet = false;
    m_off_payroll_worker_isValid = false;

    m_on_strike_isSet = false;
    m_on_strike_isValid = false;

    m_p45_issued_date_isSet = false;
    m_p45_issued_date_isValid = false;

    m_passport_number_isSet = false;
    m_passport_number_isValid = false;

    m_pay_schedule_isSet = false;
    m_pay_schedule_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_to_a_non_individual_isSet = false;
    m_payment_to_a_non_individual_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_rule_exclusions_isSet = false;
    m_rule_exclusions_isValid = false;

    m_seconded_isSet = false;
    m_seconded_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_starter_declaration_isSet = false;
    m_starter_declaration_isValid = false;

    m_territory_isSet = false;
    m_territory_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_veteran_period_start_date_isSet = false;
    m_veteran_period_start_date_isValid = false;

    m_working_week_isSet = false;
    m_working_week_isValid = false;
}

void OAIEmployee_2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmployee_2::fromJsonObject(QJsonObject json) {

    m_ae_assessment_override_isValid = ::OpenAPI::fromJsonValue(m_ae_assessment_override, json[QString("AEAssessmentOverride")]);
    m_ae_assessment_override_isSet = !json[QString("AEAssessmentOverride")].isNull() && m_ae_assessment_override_isValid;

    m_ae_assessment_override_date_isValid = ::OpenAPI::fromJsonValue(m_ae_assessment_override_date, json[QString("AEAssessmentOverrideDate")]);
    m_ae_assessment_override_date_isSet = !json[QString("AEAssessmentOverrideDate")].isNull() && m_ae_assessment_override_date_isValid;

    m_ae_exclusion_reason_code_isValid = ::OpenAPI::fromJsonValue(m_ae_exclusion_reason_code, json[QString("AEExclusionReasonCode")]);
    m_ae_exclusion_reason_code_isSet = !json[QString("AEExclusionReasonCode")].isNull() && m_ae_exclusion_reason_code_isValid;

    m_ae_postponement_date_isValid = ::OpenAPI::fromJsonValue(m_ae_postponement_date, json[QString("AEPostponementDate")]);
    m_ae_postponement_date_isSet = !json[QString("AEPostponementDate")].isNull() && m_ae_postponement_date_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_bank_account_isValid = ::OpenAPI::fromJsonValue(m_bank_account, json[QString("BankAccount")]);
    m_bank_account_isSet = !json[QString("BankAccount")].isNull() && m_bank_account_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("DateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("DateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_deactivated_isValid = ::OpenAPI::fromJsonValue(m_deactivated, json[QString("Deactivated")]);
    m_deactivated_isSet = !json[QString("Deactivated")].isNull() && m_deactivated_isValid;

    m_directorship_appointment_date_isValid = ::OpenAPI::fromJsonValue(m_directorship_appointment_date, json[QString("DirectorshipAppointmentDate")]);
    m_directorship_appointment_date_isSet = !json[QString("DirectorshipAppointmentDate")].isNull() && m_directorship_appointment_date_isValid;

    m_eea_citizen_isValid = ::OpenAPI::fromJsonValue(m_eea_citizen, json[QString("EEACitizen")]);
    m_eea_citizen_isSet = !json[QString("EEACitizen")].isNull() && m_eea_citizen_isValid;

    m_epm6_isValid = ::OpenAPI::fromJsonValue(m_epm6, json[QString("EPM6")]);
    m_epm6_isSet = !json[QString("EPM6")].isNull() && m_epm6_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("EffectiveDate")]);
    m_effective_date_isSet = !json[QString("EffectiveDate")].isNull() && m_effective_date_isValid;

    m_employee_partner_isValid = ::OpenAPI::fromJsonValue(m_employee_partner, json[QString("EmployeePartner")]);
    m_employee_partner_isSet = !json[QString("EmployeePartner")].isNull() && m_employee_partner_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("Gender")]);
    m_gender_isSet = !json[QString("Gender")].isNull() && m_gender_isValid;

    m_hours_per_week_isValid = ::OpenAPI::fromJsonValue(m_hours_per_week, json[QString("HoursPerWeek")]);
    m_hours_per_week_isSet = !json[QString("HoursPerWeek")].isNull() && m_hours_per_week_isValid;

    m_initials_isValid = ::OpenAPI::fromJsonValue(m_initials, json[QString("Initials")]);
    m_initials_isSet = !json[QString("Initials")].isNull() && m_initials_isValid;

    m_irregular_employment_isValid = ::OpenAPI::fromJsonValue(m_irregular_employment, json[QString("IrregularEmployment")]);
    m_irregular_employment_isSet = !json[QString("IrregularEmployment")].isNull() && m_irregular_employment_isValid;

    m_is_agency_worker_isValid = ::OpenAPI::fromJsonValue(m_is_agency_worker, json[QString("IsAgencyWorker")]);
    m_is_agency_worker_isSet = !json[QString("IsAgencyWorker")].isNull() && m_is_agency_worker_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_leaver_reason_isValid = ::OpenAPI::fromJsonValue(m_leaver_reason, json[QString("LeaverReason")]);
    m_leaver_reason_isSet = !json[QString("LeaverReason")].isNull() && m_leaver_reason_isValid;

    m_leaving_date_isValid = ::OpenAPI::fromJsonValue(m_leaving_date, json[QString("LeavingDate")]);
    m_leaving_date_isSet = !json[QString("LeavingDate")].isNull() && m_leaving_date_isValid;

    m_marital_status_isValid = ::OpenAPI::fromJsonValue(m_marital_status, json[QString("MaritalStatus")]);
    m_marital_status_isSet = !json[QString("MaritalStatus")].isNull() && m_marital_status_isValid;

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("MetaData")]);
    m_meta_data_isSet = !json[QString("MetaData")].isNull() && m_meta_data_isValid;

    m_middle_name_isValid = ::OpenAPI::fromJsonValue(m_middle_name, json[QString("MiddleName")]);
    m_middle_name_isSet = !json[QString("MiddleName")].isNull() && m_middle_name_isValid;

    m_next_revision_date_isValid = ::OpenAPI::fromJsonValue(m_next_revision_date, json[QString("NextRevisionDate")]);
    m_next_revision_date_isSet = !json[QString("NextRevisionDate")].isNull() && m_next_revision_date_isValid;

    m_ni_number_isValid = ::OpenAPI::fromJsonValue(m_ni_number, json[QString("NiNumber")]);
    m_ni_number_isSet = !json[QString("NiNumber")].isNull() && m_ni_number_isValid;

    m_nic_liability_isValid = ::OpenAPI::fromJsonValue(m_nic_liability, json[QString("NicLiability")]);
    m_nic_liability_isSet = !json[QString("NicLiability")].isNull() && m_nic_liability_isValid;

    m_off_payroll_worker_isValid = ::OpenAPI::fromJsonValue(m_off_payroll_worker, json[QString("OffPayrollWorker")]);
    m_off_payroll_worker_isSet = !json[QString("OffPayrollWorker")].isNull() && m_off_payroll_worker_isValid;

    m_on_strike_isValid = ::OpenAPI::fromJsonValue(m_on_strike, json[QString("OnStrike")]);
    m_on_strike_isSet = !json[QString("OnStrike")].isNull() && m_on_strike_isValid;

    m_p45_issued_date_isValid = ::OpenAPI::fromJsonValue(m_p45_issued_date, json[QString("P45IssuedDate")]);
    m_p45_issued_date_isSet = !json[QString("P45IssuedDate")].isNull() && m_p45_issued_date_isValid;

    m_passport_number_isValid = ::OpenAPI::fromJsonValue(m_passport_number, json[QString("PassportNumber")]);
    m_passport_number_isSet = !json[QString("PassportNumber")].isNull() && m_passport_number_isValid;

    m_pay_schedule_isValid = ::OpenAPI::fromJsonValue(m_pay_schedule, json[QString("PaySchedule")]);
    m_pay_schedule_isSet = !json[QString("PaySchedule")].isNull() && m_pay_schedule_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("PaymentMethod")]);
    m_payment_method_isSet = !json[QString("PaymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_to_a_non_individual_isValid = ::OpenAPI::fromJsonValue(m_payment_to_a_non_individual, json[QString("PaymentToANonIndividual")]);
    m_payment_to_a_non_individual_isSet = !json[QString("PaymentToANonIndividual")].isNull() && m_payment_to_a_non_individual_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("Revision")]);
    m_revision_isSet = !json[QString("Revision")].isNull() && m_revision_isValid;

    m_rule_exclusions_isValid = ::OpenAPI::fromJsonValue(m_rule_exclusions, json[QString("RuleExclusions")]);
    m_rule_exclusions_isSet = !json[QString("RuleExclusions")].isNull() && m_rule_exclusions_isValid;

    m_seconded_isValid = ::OpenAPI::fromJsonValue(m_seconded, json[QString("Seconded")]);
    m_seconded_isSet = !json[QString("Seconded")].isNull() && m_seconded_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_starter_declaration_isValid = ::OpenAPI::fromJsonValue(m_starter_declaration, json[QString("StarterDeclaration")]);
    m_starter_declaration_isSet = !json[QString("StarterDeclaration")].isNull() && m_starter_declaration_isValid;

    m_territory_isValid = ::OpenAPI::fromJsonValue(m_territory, json[QString("Territory")]);
    m_territory_isSet = !json[QString("Territory")].isNull() && m_territory_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_veteran_period_start_date_isValid = ::OpenAPI::fromJsonValue(m_veteran_period_start_date, json[QString("VeteranPeriodStartDate")]);
    m_veteran_period_start_date_isSet = !json[QString("VeteranPeriodStartDate")].isNull() && m_veteran_period_start_date_isValid;

    m_working_week_isValid = ::OpenAPI::fromJsonValue(m_working_week, json[QString("WorkingWeek")]);
    m_working_week_isSet = !json[QString("WorkingWeek")].isNull() && m_working_week_isValid;
}

QString OAIEmployee_2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmployee_2::asJsonObject() const {
    QJsonObject obj;
    if (m_ae_assessment_override_isSet) {
        obj.insert(QString("AEAssessmentOverride"), ::OpenAPI::toJsonValue(m_ae_assessment_override));
    }
    if (m_ae_assessment_override_date_isSet) {
        obj.insert(QString("AEAssessmentOverrideDate"), ::OpenAPI::toJsonValue(m_ae_assessment_override_date));
    }
    if (m_ae_exclusion_reason_code_isSet) {
        obj.insert(QString("AEExclusionReasonCode"), ::OpenAPI::toJsonValue(m_ae_exclusion_reason_code));
    }
    if (m_ae_postponement_date_isSet) {
        obj.insert(QString("AEPostponementDate"), ::OpenAPI::toJsonValue(m_ae_postponement_date));
    }
    if (m_address.isSet()) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_bank_account.isSet()) {
        obj.insert(QString("BankAccount"), ::OpenAPI::toJsonValue(m_bank_account));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("DateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_deactivated_isSet) {
        obj.insert(QString("Deactivated"), ::OpenAPI::toJsonValue(m_deactivated));
    }
    if (m_directorship_appointment_date_isSet) {
        obj.insert(QString("DirectorshipAppointmentDate"), ::OpenAPI::toJsonValue(m_directorship_appointment_date));
    }
    if (m_eea_citizen_isSet) {
        obj.insert(QString("EEACitizen"), ::OpenAPI::toJsonValue(m_eea_citizen));
    }
    if (m_epm6_isSet) {
        obj.insert(QString("EPM6"), ::OpenAPI::toJsonValue(m_epm6));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("EffectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_employee_partner.isSet()) {
        obj.insert(QString("EmployeePartner"), ::OpenAPI::toJsonValue(m_employee_partner));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("Gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_hours_per_week_isSet) {
        obj.insert(QString("HoursPerWeek"), ::OpenAPI::toJsonValue(m_hours_per_week));
    }
    if (m_initials_isSet) {
        obj.insert(QString("Initials"), ::OpenAPI::toJsonValue(m_initials));
    }
    if (m_irregular_employment_isSet) {
        obj.insert(QString("IrregularEmployment"), ::OpenAPI::toJsonValue(m_irregular_employment));
    }
    if (m_is_agency_worker_isSet) {
        obj.insert(QString("IsAgencyWorker"), ::OpenAPI::toJsonValue(m_is_agency_worker));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_leaver_reason_isSet) {
        obj.insert(QString("LeaverReason"), ::OpenAPI::toJsonValue(m_leaver_reason));
    }
    if (m_leaving_date_isSet) {
        obj.insert(QString("LeavingDate"), ::OpenAPI::toJsonValue(m_leaving_date));
    }
    if (m_marital_status_isSet) {
        obj.insert(QString("MaritalStatus"), ::OpenAPI::toJsonValue(m_marital_status));
    }
    if (m_meta_data_isSet) {
        obj.insert(QString("MetaData"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_middle_name_isSet) {
        obj.insert(QString("MiddleName"), ::OpenAPI::toJsonValue(m_middle_name));
    }
    if (m_next_revision_date_isSet) {
        obj.insert(QString("NextRevisionDate"), ::OpenAPI::toJsonValue(m_next_revision_date));
    }
    if (m_ni_number_isSet) {
        obj.insert(QString("NiNumber"), ::OpenAPI::toJsonValue(m_ni_number));
    }
    if (m_nic_liability_isSet) {
        obj.insert(QString("NicLiability"), ::OpenAPI::toJsonValue(m_nic_liability));
    }
    if (m_off_payroll_worker_isSet) {
        obj.insert(QString("OffPayrollWorker"), ::OpenAPI::toJsonValue(m_off_payroll_worker));
    }
    if (m_on_strike_isSet) {
        obj.insert(QString("OnStrike"), ::OpenAPI::toJsonValue(m_on_strike));
    }
    if (m_p45_issued_date_isSet) {
        obj.insert(QString("P45IssuedDate"), ::OpenAPI::toJsonValue(m_p45_issued_date));
    }
    if (m_passport_number_isSet) {
        obj.insert(QString("PassportNumber"), ::OpenAPI::toJsonValue(m_passport_number));
    }
    if (m_pay_schedule.isSet()) {
        obj.insert(QString("PaySchedule"), ::OpenAPI::toJsonValue(m_pay_schedule));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("PaymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_to_a_non_individual_isSet) {
        obj.insert(QString("PaymentToANonIndividual"), ::OpenAPI::toJsonValue(m_payment_to_a_non_individual));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_revision_isSet) {
        obj.insert(QString("Revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_rule_exclusions_isSet) {
        obj.insert(QString("RuleExclusions"), ::OpenAPI::toJsonValue(m_rule_exclusions));
    }
    if (m_seconded_isSet) {
        obj.insert(QString("Seconded"), ::OpenAPI::toJsonValue(m_seconded));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_starter_declaration_isSet) {
        obj.insert(QString("StarterDeclaration"), ::OpenAPI::toJsonValue(m_starter_declaration));
    }
    if (m_territory_isSet) {
        obj.insert(QString("Territory"), ::OpenAPI::toJsonValue(m_territory));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_veteran_period_start_date_isSet) {
        obj.insert(QString("VeteranPeriodStartDate"), ::OpenAPI::toJsonValue(m_veteran_period_start_date));
    }
    if (m_working_week_isSet) {
        obj.insert(QString("WorkingWeek"), ::OpenAPI::toJsonValue(m_working_week));
    }
    return obj;
}

QString OAIEmployee_2::getAeAssessmentOverride() const {
    return m_ae_assessment_override;
}
void OAIEmployee_2::setAeAssessmentOverride(const QString &ae_assessment_override) {
    m_ae_assessment_override = ae_assessment_override;
    m_ae_assessment_override_isSet = true;
}

bool OAIEmployee_2::is_ae_assessment_override_Set() const{
    return m_ae_assessment_override_isSet;
}

bool OAIEmployee_2::is_ae_assessment_override_Valid() const{
    return m_ae_assessment_override_isValid;
}

QDate OAIEmployee_2::getAeAssessmentOverrideDate() const {
    return m_ae_assessment_override_date;
}
void OAIEmployee_2::setAeAssessmentOverrideDate(const QDate &ae_assessment_override_date) {
    m_ae_assessment_override_date = ae_assessment_override_date;
    m_ae_assessment_override_date_isSet = true;
}

bool OAIEmployee_2::is_ae_assessment_override_date_Set() const{
    return m_ae_assessment_override_date_isSet;
}

bool OAIEmployee_2::is_ae_assessment_override_date_Valid() const{
    return m_ae_assessment_override_date_isValid;
}

QString OAIEmployee_2::getAeExclusionReasonCode() const {
    return m_ae_exclusion_reason_code;
}
void OAIEmployee_2::setAeExclusionReasonCode(const QString &ae_exclusion_reason_code) {
    m_ae_exclusion_reason_code = ae_exclusion_reason_code;
    m_ae_exclusion_reason_code_isSet = true;
}

bool OAIEmployee_2::is_ae_exclusion_reason_code_Set() const{
    return m_ae_exclusion_reason_code_isSet;
}

bool OAIEmployee_2::is_ae_exclusion_reason_code_Valid() const{
    return m_ae_exclusion_reason_code_isValid;
}

QDate OAIEmployee_2::getAePostponementDate() const {
    return m_ae_postponement_date;
}
void OAIEmployee_2::setAePostponementDate(const QDate &ae_postponement_date) {
    m_ae_postponement_date = ae_postponement_date;
    m_ae_postponement_date_isSet = true;
}

bool OAIEmployee_2::is_ae_postponement_date_Set() const{
    return m_ae_postponement_date_isSet;
}

bool OAIEmployee_2::is_ae_postponement_date_Valid() const{
    return m_ae_postponement_date_isValid;
}

OAIAddress OAIEmployee_2::getAddress() const {
    return m_address;
}
void OAIEmployee_2::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIEmployee_2::is_address_Set() const{
    return m_address_isSet;
}

bool OAIEmployee_2::is_address_Valid() const{
    return m_address_isValid;
}

OAIBankAccount OAIEmployee_2::getBankAccount() const {
    return m_bank_account;
}
void OAIEmployee_2::setBankAccount(const OAIBankAccount &bank_account) {
    m_bank_account = bank_account;
    m_bank_account_isSet = true;
}

bool OAIEmployee_2::is_bank_account_Set() const{
    return m_bank_account_isSet;
}

bool OAIEmployee_2::is_bank_account_Valid() const{
    return m_bank_account_isValid;
}

QString OAIEmployee_2::getCode() const {
    return m_code;
}
void OAIEmployee_2::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIEmployee_2::is_code_Set() const{
    return m_code_isSet;
}

bool OAIEmployee_2::is_code_Valid() const{
    return m_code_isValid;
}

QDate OAIEmployee_2::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIEmployee_2::setDateOfBirth(const QDate &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIEmployee_2::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIEmployee_2::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

bool OAIEmployee_2::isDeactivated() const {
    return m_deactivated;
}
void OAIEmployee_2::setDeactivated(const bool &deactivated) {
    m_deactivated = deactivated;
    m_deactivated_isSet = true;
}

bool OAIEmployee_2::is_deactivated_Set() const{
    return m_deactivated_isSet;
}

bool OAIEmployee_2::is_deactivated_Valid() const{
    return m_deactivated_isValid;
}

QDate OAIEmployee_2::getDirectorshipAppointmentDate() const {
    return m_directorship_appointment_date;
}
void OAIEmployee_2::setDirectorshipAppointmentDate(const QDate &directorship_appointment_date) {
    m_directorship_appointment_date = directorship_appointment_date;
    m_directorship_appointment_date_isSet = true;
}

bool OAIEmployee_2::is_directorship_appointment_date_Set() const{
    return m_directorship_appointment_date_isSet;
}

bool OAIEmployee_2::is_directorship_appointment_date_Valid() const{
    return m_directorship_appointment_date_isValid;
}

bool OAIEmployee_2::isEeaCitizen() const {
    return m_eea_citizen;
}
void OAIEmployee_2::setEeaCitizen(const bool &eea_citizen) {
    m_eea_citizen = eea_citizen;
    m_eea_citizen_isSet = true;
}

bool OAIEmployee_2::is_eea_citizen_Set() const{
    return m_eea_citizen_isSet;
}

bool OAIEmployee_2::is_eea_citizen_Valid() const{
    return m_eea_citizen_isValid;
}

bool OAIEmployee_2::isEpm6() const {
    return m_epm6;
}
void OAIEmployee_2::setEpm6(const bool &epm6) {
    m_epm6 = epm6;
    m_epm6_isSet = true;
}

bool OAIEmployee_2::is_epm6_Set() const{
    return m_epm6_isSet;
}

bool OAIEmployee_2::is_epm6_Valid() const{
    return m_epm6_isValid;
}

QDate OAIEmployee_2::getEffectiveDate() const {
    return m_effective_date;
}
void OAIEmployee_2::setEffectiveDate(const QDate &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIEmployee_2::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIEmployee_2::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

OAIEmployeePartner OAIEmployee_2::getEmployeePartner() const {
    return m_employee_partner;
}
void OAIEmployee_2::setEmployeePartner(const OAIEmployeePartner &employee_partner) {
    m_employee_partner = employee_partner;
    m_employee_partner_isSet = true;
}

bool OAIEmployee_2::is_employee_partner_Set() const{
    return m_employee_partner_isSet;
}

bool OAIEmployee_2::is_employee_partner_Valid() const{
    return m_employee_partner_isValid;
}

QString OAIEmployee_2::getFirstName() const {
    return m_first_name;
}
void OAIEmployee_2::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIEmployee_2::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIEmployee_2::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIEmployee_2::getGender() const {
    return m_gender;
}
void OAIEmployee_2::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIEmployee_2::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIEmployee_2::is_gender_Valid() const{
    return m_gender_isValid;
}

double OAIEmployee_2::getHoursPerWeek() const {
    return m_hours_per_week;
}
void OAIEmployee_2::setHoursPerWeek(const double &hours_per_week) {
    m_hours_per_week = hours_per_week;
    m_hours_per_week_isSet = true;
}

bool OAIEmployee_2::is_hours_per_week_Set() const{
    return m_hours_per_week_isSet;
}

bool OAIEmployee_2::is_hours_per_week_Valid() const{
    return m_hours_per_week_isValid;
}

QString OAIEmployee_2::getInitials() const {
    return m_initials;
}
void OAIEmployee_2::setInitials(const QString &initials) {
    m_initials = initials;
    m_initials_isSet = true;
}

bool OAIEmployee_2::is_initials_Set() const{
    return m_initials_isSet;
}

bool OAIEmployee_2::is_initials_Valid() const{
    return m_initials_isValid;
}

bool OAIEmployee_2::isIrregularEmployment() const {
    return m_irregular_employment;
}
void OAIEmployee_2::setIrregularEmployment(const bool &irregular_employment) {
    m_irregular_employment = irregular_employment;
    m_irregular_employment_isSet = true;
}

bool OAIEmployee_2::is_irregular_employment_Set() const{
    return m_irregular_employment_isSet;
}

bool OAIEmployee_2::is_irregular_employment_Valid() const{
    return m_irregular_employment_isValid;
}

bool OAIEmployee_2::isIsAgencyWorker() const {
    return m_is_agency_worker;
}
void OAIEmployee_2::setIsAgencyWorker(const bool &is_agency_worker) {
    m_is_agency_worker = is_agency_worker;
    m_is_agency_worker_isSet = true;
}

bool OAIEmployee_2::is_is_agency_worker_Set() const{
    return m_is_agency_worker_isSet;
}

bool OAIEmployee_2::is_is_agency_worker_Valid() const{
    return m_is_agency_worker_isValid;
}

QString OAIEmployee_2::getLastName() const {
    return m_last_name;
}
void OAIEmployee_2::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIEmployee_2::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIEmployee_2::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIEmployee_2::getLeaverReason() const {
    return m_leaver_reason;
}
void OAIEmployee_2::setLeaverReason(const QString &leaver_reason) {
    m_leaver_reason = leaver_reason;
    m_leaver_reason_isSet = true;
}

bool OAIEmployee_2::is_leaver_reason_Set() const{
    return m_leaver_reason_isSet;
}

bool OAIEmployee_2::is_leaver_reason_Valid() const{
    return m_leaver_reason_isValid;
}

QDate OAIEmployee_2::getLeavingDate() const {
    return m_leaving_date;
}
void OAIEmployee_2::setLeavingDate(const QDate &leaving_date) {
    m_leaving_date = leaving_date;
    m_leaving_date_isSet = true;
}

bool OAIEmployee_2::is_leaving_date_Set() const{
    return m_leaving_date_isSet;
}

bool OAIEmployee_2::is_leaving_date_Valid() const{
    return m_leaving_date_isValid;
}

QString OAIEmployee_2::getMaritalStatus() const {
    return m_marital_status;
}
void OAIEmployee_2::setMaritalStatus(const QString &marital_status) {
    m_marital_status = marital_status;
    m_marital_status_isSet = true;
}

bool OAIEmployee_2::is_marital_status_Set() const{
    return m_marital_status_isSet;
}

bool OAIEmployee_2::is_marital_status_Valid() const{
    return m_marital_status_isValid;
}

OAIObject OAIEmployee_2::getMetaData() const {
    return m_meta_data;
}
void OAIEmployee_2::setMetaData(const OAIObject &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIEmployee_2::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIEmployee_2::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

QString OAIEmployee_2::getMiddleName() const {
    return m_middle_name;
}
void OAIEmployee_2::setMiddleName(const QString &middle_name) {
    m_middle_name = middle_name;
    m_middle_name_isSet = true;
}

bool OAIEmployee_2::is_middle_name_Set() const{
    return m_middle_name_isSet;
}

bool OAIEmployee_2::is_middle_name_Valid() const{
    return m_middle_name_isValid;
}

QDate OAIEmployee_2::getNextRevisionDate() const {
    return m_next_revision_date;
}
void OAIEmployee_2::setNextRevisionDate(const QDate &next_revision_date) {
    m_next_revision_date = next_revision_date;
    m_next_revision_date_isSet = true;
}

bool OAIEmployee_2::is_next_revision_date_Set() const{
    return m_next_revision_date_isSet;
}

bool OAIEmployee_2::is_next_revision_date_Valid() const{
    return m_next_revision_date_isValid;
}

QString OAIEmployee_2::getNiNumber() const {
    return m_ni_number;
}
void OAIEmployee_2::setNiNumber(const QString &ni_number) {
    m_ni_number = ni_number;
    m_ni_number_isSet = true;
}

bool OAIEmployee_2::is_ni_number_Set() const{
    return m_ni_number_isSet;
}

bool OAIEmployee_2::is_ni_number_Valid() const{
    return m_ni_number_isValid;
}

QString OAIEmployee_2::getNicLiability() const {
    return m_nic_liability;
}
void OAIEmployee_2::setNicLiability(const QString &nic_liability) {
    m_nic_liability = nic_liability;
    m_nic_liability_isSet = true;
}

bool OAIEmployee_2::is_nic_liability_Set() const{
    return m_nic_liability_isSet;
}

bool OAIEmployee_2::is_nic_liability_Valid() const{
    return m_nic_liability_isValid;
}

bool OAIEmployee_2::isOffPayrollWorker() const {
    return m_off_payroll_worker;
}
void OAIEmployee_2::setOffPayrollWorker(const bool &off_payroll_worker) {
    m_off_payroll_worker = off_payroll_worker;
    m_off_payroll_worker_isSet = true;
}

bool OAIEmployee_2::is_off_payroll_worker_Set() const{
    return m_off_payroll_worker_isSet;
}

bool OAIEmployee_2::is_off_payroll_worker_Valid() const{
    return m_off_payroll_worker_isValid;
}

bool OAIEmployee_2::isOnStrike() const {
    return m_on_strike;
}
void OAIEmployee_2::setOnStrike(const bool &on_strike) {
    m_on_strike = on_strike;
    m_on_strike_isSet = true;
}

bool OAIEmployee_2::is_on_strike_Set() const{
    return m_on_strike_isSet;
}

bool OAIEmployee_2::is_on_strike_Valid() const{
    return m_on_strike_isValid;
}

QDate OAIEmployee_2::getP45IssuedDate() const {
    return m_p45_issued_date;
}
void OAIEmployee_2::setP45IssuedDate(const QDate &p45_issued_date) {
    m_p45_issued_date = p45_issued_date;
    m_p45_issued_date_isSet = true;
}

bool OAIEmployee_2::is_p45_issued_date_Set() const{
    return m_p45_issued_date_isSet;
}

bool OAIEmployee_2::is_p45_issued_date_Valid() const{
    return m_p45_issued_date_isValid;
}

QString OAIEmployee_2::getPassportNumber() const {
    return m_passport_number;
}
void OAIEmployee_2::setPassportNumber(const QString &passport_number) {
    m_passport_number = passport_number;
    m_passport_number_isSet = true;
}

bool OAIEmployee_2::is_passport_number_Set() const{
    return m_passport_number_isSet;
}

bool OAIEmployee_2::is_passport_number_Valid() const{
    return m_passport_number_isValid;
}

OAIPaySchedule_1 OAIEmployee_2::getPaySchedule() const {
    return m_pay_schedule;
}
void OAIEmployee_2::setPaySchedule(const OAIPaySchedule_1 &pay_schedule) {
    m_pay_schedule = pay_schedule;
    m_pay_schedule_isSet = true;
}

bool OAIEmployee_2::is_pay_schedule_Set() const{
    return m_pay_schedule_isSet;
}

bool OAIEmployee_2::is_pay_schedule_Valid() const{
    return m_pay_schedule_isValid;
}

QString OAIEmployee_2::getPaymentMethod() const {
    return m_payment_method;
}
void OAIEmployee_2::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIEmployee_2::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIEmployee_2::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

bool OAIEmployee_2::isPaymentToANonIndividual() const {
    return m_payment_to_a_non_individual;
}
void OAIEmployee_2::setPaymentToANonIndividual(const bool &payment_to_a_non_individual) {
    m_payment_to_a_non_individual = payment_to_a_non_individual;
    m_payment_to_a_non_individual_isSet = true;
}

bool OAIEmployee_2::is_payment_to_a_non_individual_Set() const{
    return m_payment_to_a_non_individual_isSet;
}

bool OAIEmployee_2::is_payment_to_a_non_individual_Valid() const{
    return m_payment_to_a_non_individual_isValid;
}

QString OAIEmployee_2::getRegion() const {
    return m_region;
}
void OAIEmployee_2::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIEmployee_2::is_region_Set() const{
    return m_region_isSet;
}

bool OAIEmployee_2::is_region_Valid() const{
    return m_region_isValid;
}

qint32 OAIEmployee_2::getRevision() const {
    return m_revision;
}
void OAIEmployee_2::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIEmployee_2::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIEmployee_2::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIEmployee_2::getRuleExclusions() const {
    return m_rule_exclusions;
}
void OAIEmployee_2::setRuleExclusions(const QString &rule_exclusions) {
    m_rule_exclusions = rule_exclusions;
    m_rule_exclusions_isSet = true;
}

bool OAIEmployee_2::is_rule_exclusions_Set() const{
    return m_rule_exclusions_isSet;
}

bool OAIEmployee_2::is_rule_exclusions_Valid() const{
    return m_rule_exclusions_isValid;
}

QString OAIEmployee_2::getSeconded() const {
    return m_seconded;
}
void OAIEmployee_2::setSeconded(const QString &seconded) {
    m_seconded = seconded;
    m_seconded_isSet = true;
}

bool OAIEmployee_2::is_seconded_Set() const{
    return m_seconded_isSet;
}

bool OAIEmployee_2::is_seconded_Valid() const{
    return m_seconded_isValid;
}

QDate OAIEmployee_2::getStartDate() const {
    return m_start_date;
}
void OAIEmployee_2::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEmployee_2::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEmployee_2::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIEmployee_2::getStarterDeclaration() const {
    return m_starter_declaration;
}
void OAIEmployee_2::setStarterDeclaration(const QString &starter_declaration) {
    m_starter_declaration = starter_declaration;
    m_starter_declaration_isSet = true;
}

bool OAIEmployee_2::is_starter_declaration_Set() const{
    return m_starter_declaration_isSet;
}

bool OAIEmployee_2::is_starter_declaration_Valid() const{
    return m_starter_declaration_isValid;
}

QString OAIEmployee_2::getTerritory() const {
    return m_territory;
}
void OAIEmployee_2::setTerritory(const QString &territory) {
    m_territory = territory;
    m_territory_isSet = true;
}

bool OAIEmployee_2::is_territory_Set() const{
    return m_territory_isSet;
}

bool OAIEmployee_2::is_territory_Valid() const{
    return m_territory_isValid;
}

QString OAIEmployee_2::getTitle() const {
    return m_title;
}
void OAIEmployee_2::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEmployee_2::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEmployee_2::is_title_Valid() const{
    return m_title_isValid;
}

QDate OAIEmployee_2::getVeteranPeriodStartDate() const {
    return m_veteran_period_start_date;
}
void OAIEmployee_2::setVeteranPeriodStartDate(const QDate &veteran_period_start_date) {
    m_veteran_period_start_date = veteran_period_start_date;
    m_veteran_period_start_date_isSet = true;
}

bool OAIEmployee_2::is_veteran_period_start_date_Set() const{
    return m_veteran_period_start_date_isSet;
}

bool OAIEmployee_2::is_veteran_period_start_date_Valid() const{
    return m_veteran_period_start_date_isValid;
}

QString OAIEmployee_2::getWorkingWeek() const {
    return m_working_week;
}
void OAIEmployee_2::setWorkingWeek(const QString &working_week) {
    m_working_week = working_week;
    m_working_week_isSet = true;
}

bool OAIEmployee_2::is_working_week_Set() const{
    return m_working_week_isSet;
}

bool OAIEmployee_2::is_working_week_Valid() const{
    return m_working_week_isValid;
}

bool OAIEmployee_2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ae_assessment_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ae_assessment_override_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ae_exclusion_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ae_postponement_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deactivated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directorship_appointment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eea_citizen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epm6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_partner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours_per_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_irregular_employment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_agency_worker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leaver_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leaving_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marital_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_revision_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ni_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nic_liability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_off_payroll_worker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_strike_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p45_issued_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passport_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_to_a_non_individual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_exclusions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seconded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starter_declaration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_territory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_veteran_period_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmployee_2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
