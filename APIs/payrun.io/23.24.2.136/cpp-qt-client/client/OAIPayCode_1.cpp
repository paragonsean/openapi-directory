/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayCode_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayCode_1::OAIPayCode_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayCode_1::OAIPayCode_1() {
    this->initializeModel();
}

OAIPayCode_1::~OAIPayCode_1() {}

void OAIPayCode_1::initializeModel() {

    m_benefit_isSet = false;
    m_benefit_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_next_revision_date_isSet = false;
    m_next_revision_date_isValid = false;

    m_niable_isSet = false;
    m_niable_isValid = false;

    m_nominal_code_isSet = false;
    m_nominal_code_isValid = false;

    m_non_arrestable_isSet = false;
    m_non_arrestable_isValid = false;

    m_notional_isSet = false;
    m_notional_isValid = false;

    m_readonly_isSet = false;
    m_readonly_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_taxable_isSet = false;
    m_taxable_isValid = false;

    m_territory_isSet = false;
    m_territory_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPayCode_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayCode_1::fromJsonObject(QJsonObject json) {

    m_benefit_isValid = ::OpenAPI::fromJsonValue(m_benefit, json[QString("Benefit")]);
    m_benefit_isSet = !json[QString("Benefit")].isNull() && m_benefit_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("EffectiveDate")]);
    m_effective_date_isSet = !json[QString("EffectiveDate")].isNull() && m_effective_date_isValid;

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("MetaData")]);
    m_meta_data_isSet = !json[QString("MetaData")].isNull() && m_meta_data_isValid;

    m_next_revision_date_isValid = ::OpenAPI::fromJsonValue(m_next_revision_date, json[QString("NextRevisionDate")]);
    m_next_revision_date_isSet = !json[QString("NextRevisionDate")].isNull() && m_next_revision_date_isValid;

    m_niable_isValid = ::OpenAPI::fromJsonValue(m_niable, json[QString("Niable")]);
    m_niable_isSet = !json[QString("Niable")].isNull() && m_niable_isValid;

    m_nominal_code_isValid = ::OpenAPI::fromJsonValue(m_nominal_code, json[QString("NominalCode")]);
    m_nominal_code_isSet = !json[QString("NominalCode")].isNull() && m_nominal_code_isValid;

    m_non_arrestable_isValid = ::OpenAPI::fromJsonValue(m_non_arrestable, json[QString("NonArrestable")]);
    m_non_arrestable_isSet = !json[QString("NonArrestable")].isNull() && m_non_arrestable_isValid;

    m_notional_isValid = ::OpenAPI::fromJsonValue(m_notional, json[QString("Notional")]);
    m_notional_isSet = !json[QString("Notional")].isNull() && m_notional_isValid;

    m_readonly_isValid = ::OpenAPI::fromJsonValue(m_readonly, json[QString("Readonly")]);
    m_readonly_isSet = !json[QString("Readonly")].isNull() && m_readonly_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("Revision")]);
    m_revision_isSet = !json[QString("Revision")].isNull() && m_revision_isValid;

    m_taxable_isValid = ::OpenAPI::fromJsonValue(m_taxable, json[QString("Taxable")]);
    m_taxable_isSet = !json[QString("Taxable")].isNull() && m_taxable_isValid;

    m_territory_isValid = ::OpenAPI::fromJsonValue(m_territory, json[QString("Territory")]);
    m_territory_isSet = !json[QString("Territory")].isNull() && m_territory_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIPayCode_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayCode_1::asJsonObject() const {
    QJsonObject obj;
    if (m_benefit_isSet) {
        obj.insert(QString("Benefit"), ::OpenAPI::toJsonValue(m_benefit));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("EffectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_meta_data_isSet) {
        obj.insert(QString("MetaData"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_next_revision_date_isSet) {
        obj.insert(QString("NextRevisionDate"), ::OpenAPI::toJsonValue(m_next_revision_date));
    }
    if (m_niable_isSet) {
        obj.insert(QString("Niable"), ::OpenAPI::toJsonValue(m_niable));
    }
    if (m_nominal_code.isSet()) {
        obj.insert(QString("NominalCode"), ::OpenAPI::toJsonValue(m_nominal_code));
    }
    if (m_non_arrestable_isSet) {
        obj.insert(QString("NonArrestable"), ::OpenAPI::toJsonValue(m_non_arrestable));
    }
    if (m_notional_isSet) {
        obj.insert(QString("Notional"), ::OpenAPI::toJsonValue(m_notional));
    }
    if (m_readonly_isSet) {
        obj.insert(QString("Readonly"), ::OpenAPI::toJsonValue(m_readonly));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_revision_isSet) {
        obj.insert(QString("Revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_taxable_isSet) {
        obj.insert(QString("Taxable"), ::OpenAPI::toJsonValue(m_taxable));
    }
    if (m_territory_isSet) {
        obj.insert(QString("Territory"), ::OpenAPI::toJsonValue(m_territory));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIPayCode_1::isBenefit() const {
    return m_benefit;
}
void OAIPayCode_1::setBenefit(const bool &benefit) {
    m_benefit = benefit;
    m_benefit_isSet = true;
}

bool OAIPayCode_1::is_benefit_Set() const{
    return m_benefit_isSet;
}

bool OAIPayCode_1::is_benefit_Valid() const{
    return m_benefit_isValid;
}

QString OAIPayCode_1::getCode() const {
    return m_code;
}
void OAIPayCode_1::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIPayCode_1::is_code_Set() const{
    return m_code_isSet;
}

bool OAIPayCode_1::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIPayCode_1::getDescription() const {
    return m_description;
}
void OAIPayCode_1::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPayCode_1::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPayCode_1::is_description_Valid() const{
    return m_description_isValid;
}

QDate OAIPayCode_1::getEffectiveDate() const {
    return m_effective_date;
}
void OAIPayCode_1::setEffectiveDate(const QDate &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIPayCode_1::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIPayCode_1::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

OAIObject OAIPayCode_1::getMetaData() const {
    return m_meta_data;
}
void OAIPayCode_1::setMetaData(const OAIObject &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIPayCode_1::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIPayCode_1::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

QDate OAIPayCode_1::getNextRevisionDate() const {
    return m_next_revision_date;
}
void OAIPayCode_1::setNextRevisionDate(const QDate &next_revision_date) {
    m_next_revision_date = next_revision_date;
    m_next_revision_date_isSet = true;
}

bool OAIPayCode_1::is_next_revision_date_Set() const{
    return m_next_revision_date_isSet;
}

bool OAIPayCode_1::is_next_revision_date_Valid() const{
    return m_next_revision_date_isValid;
}

bool OAIPayCode_1::isNiable() const {
    return m_niable;
}
void OAIPayCode_1::setNiable(const bool &niable) {
    m_niable = niable;
    m_niable_isSet = true;
}

bool OAIPayCode_1::is_niable_Set() const{
    return m_niable_isSet;
}

bool OAIPayCode_1::is_niable_Valid() const{
    return m_niable_isValid;
}

OAINominalCode_3 OAIPayCode_1::getNominalCode() const {
    return m_nominal_code;
}
void OAIPayCode_1::setNominalCode(const OAINominalCode_3 &nominal_code) {
    m_nominal_code = nominal_code;
    m_nominal_code_isSet = true;
}

bool OAIPayCode_1::is_nominal_code_Set() const{
    return m_nominal_code_isSet;
}

bool OAIPayCode_1::is_nominal_code_Valid() const{
    return m_nominal_code_isValid;
}

bool OAIPayCode_1::isNonArrestable() const {
    return m_non_arrestable;
}
void OAIPayCode_1::setNonArrestable(const bool &non_arrestable) {
    m_non_arrestable = non_arrestable;
    m_non_arrestable_isSet = true;
}

bool OAIPayCode_1::is_non_arrestable_Set() const{
    return m_non_arrestable_isSet;
}

bool OAIPayCode_1::is_non_arrestable_Valid() const{
    return m_non_arrestable_isValid;
}

bool OAIPayCode_1::isNotional() const {
    return m_notional;
}
void OAIPayCode_1::setNotional(const bool &notional) {
    m_notional = notional;
    m_notional_isSet = true;
}

bool OAIPayCode_1::is_notional_Set() const{
    return m_notional_isSet;
}

bool OAIPayCode_1::is_notional_Valid() const{
    return m_notional_isValid;
}

bool OAIPayCode_1::isReadonly() const {
    return m_readonly;
}
void OAIPayCode_1::setReadonly(const bool &readonly) {
    m_readonly = readonly;
    m_readonly_isSet = true;
}

bool OAIPayCode_1::is_readonly_Set() const{
    return m_readonly_isSet;
}

bool OAIPayCode_1::is_readonly_Valid() const{
    return m_readonly_isValid;
}

QString OAIPayCode_1::getRegion() const {
    return m_region;
}
void OAIPayCode_1::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIPayCode_1::is_region_Set() const{
    return m_region_isSet;
}

bool OAIPayCode_1::is_region_Valid() const{
    return m_region_isValid;
}

qint32 OAIPayCode_1::getRevision() const {
    return m_revision;
}
void OAIPayCode_1::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIPayCode_1::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIPayCode_1::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAIPayCode_1::isTaxable() const {
    return m_taxable;
}
void OAIPayCode_1::setTaxable(const bool &taxable) {
    m_taxable = taxable;
    m_taxable_isSet = true;
}

bool OAIPayCode_1::is_taxable_Set() const{
    return m_taxable_isSet;
}

bool OAIPayCode_1::is_taxable_Valid() const{
    return m_taxable_isValid;
}

QString OAIPayCode_1::getTerritory() const {
    return m_territory;
}
void OAIPayCode_1::setTerritory(const QString &territory) {
    m_territory = territory;
    m_territory_isSet = true;
}

bool OAIPayCode_1::is_territory_Set() const{
    return m_territory_isSet;
}

bool OAIPayCode_1::is_territory_Valid() const{
    return m_territory_isValid;
}

QString OAIPayCode_1::getType() const {
    return m_type;
}
void OAIPayCode_1::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPayCode_1::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPayCode_1::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPayCode_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_benefit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_revision_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_niable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nominal_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_arrestable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readonly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_territory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayCode_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
