/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICisTransaction_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICisTransaction_1::OAICisTransaction_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICisTransaction_1::OAICisTransaction_1() {
    this->initializeModel();
}

OAICisTransaction_1::~OAICisTransaction_1() {}

void OAICisTransaction_1::initializeModel() {

    m_cis_message_type_isSet = false;
    m_cis_message_type_isValid = false;

    m_employer_core_isSet = false;
    m_employer_core_isValid = false;

    m_request_data_isSet = false;
    m_request_data_isValid = false;

    m_response_data_isSet = false;
    m_response_data_isValid = false;

    m_tax_year_isSet = false;
    m_tax_year_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_transaction_status_isSet = false;
    m_transaction_status_isValid = false;

    m_transmission_date_isSet = false;
    m_transmission_date_isValid = false;
}

void OAICisTransaction_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICisTransaction_1::fromJsonObject(QJsonObject json) {

    m_cis_message_type_isValid = ::OpenAPI::fromJsonValue(m_cis_message_type, json[QString("CisMessageType")]);
    m_cis_message_type_isSet = !json[QString("CisMessageType")].isNull() && m_cis_message_type_isValid;

    m_employer_core_isValid = ::OpenAPI::fromJsonValue(m_employer_core, json[QString("EmployerCore")]);
    m_employer_core_isSet = !json[QString("EmployerCore")].isNull() && m_employer_core_isValid;

    m_request_data_isValid = ::OpenAPI::fromJsonValue(m_request_data, json[QString("RequestData")]);
    m_request_data_isSet = !json[QString("RequestData")].isNull() && m_request_data_isValid;

    m_response_data_isValid = ::OpenAPI::fromJsonValue(m_response_data, json[QString("ResponseData")]);
    m_response_data_isSet = !json[QString("ResponseData")].isNull() && m_response_data_isValid;

    m_tax_year_isValid = ::OpenAPI::fromJsonValue(m_tax_year, json[QString("TaxYear")]);
    m_tax_year_isSet = !json[QString("TaxYear")].isNull() && m_tax_year_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_transaction_status_isValid = ::OpenAPI::fromJsonValue(m_transaction_status, json[QString("TransactionStatus")]);
    m_transaction_status_isSet = !json[QString("TransactionStatus")].isNull() && m_transaction_status_isValid;

    m_transmission_date_isValid = ::OpenAPI::fromJsonValue(m_transmission_date, json[QString("TransmissionDate")]);
    m_transmission_date_isSet = !json[QString("TransmissionDate")].isNull() && m_transmission_date_isValid;
}

QString OAICisTransaction_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICisTransaction_1::asJsonObject() const {
    QJsonObject obj;
    if (m_cis_message_type_isSet) {
        obj.insert(QString("CisMessageType"), ::OpenAPI::toJsonValue(m_cis_message_type));
    }
    if (m_employer_core.isSet()) {
        obj.insert(QString("EmployerCore"), ::OpenAPI::toJsonValue(m_employer_core));
    }
    if (m_request_data_isSet) {
        obj.insert(QString("RequestData"), ::OpenAPI::toJsonValue(m_request_data));
    }
    if (m_response_data_isSet) {
        obj.insert(QString("ResponseData"), ::OpenAPI::toJsonValue(m_response_data));
    }
    if (m_tax_year_isSet) {
        obj.insert(QString("TaxYear"), ::OpenAPI::toJsonValue(m_tax_year));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_transaction_status_isSet) {
        obj.insert(QString("TransactionStatus"), ::OpenAPI::toJsonValue(m_transaction_status));
    }
    if (m_transmission_date_isSet) {
        obj.insert(QString("TransmissionDate"), ::OpenAPI::toJsonValue(m_transmission_date));
    }
    return obj;
}

QString OAICisTransaction_1::getCisMessageType() const {
    return m_cis_message_type;
}
void OAICisTransaction_1::setCisMessageType(const QString &cis_message_type) {
    m_cis_message_type = cis_message_type;
    m_cis_message_type_isSet = true;
}

bool OAICisTransaction_1::is_cis_message_type_Set() const{
    return m_cis_message_type_isSet;
}

bool OAICisTransaction_1::is_cis_message_type_Valid() const{
    return m_cis_message_type_isValid;
}

OAIEmployerCore OAICisTransaction_1::getEmployerCore() const {
    return m_employer_core;
}
void OAICisTransaction_1::setEmployerCore(const OAIEmployerCore &employer_core) {
    m_employer_core = employer_core;
    m_employer_core_isSet = true;
}

bool OAICisTransaction_1::is_employer_core_Set() const{
    return m_employer_core_isSet;
}

bool OAICisTransaction_1::is_employer_core_Valid() const{
    return m_employer_core_isValid;
}

QString OAICisTransaction_1::getRequestData() const {
    return m_request_data;
}
void OAICisTransaction_1::setRequestData(const QString &request_data) {
    m_request_data = request_data;
    m_request_data_isSet = true;
}

bool OAICisTransaction_1::is_request_data_Set() const{
    return m_request_data_isSet;
}

bool OAICisTransaction_1::is_request_data_Valid() const{
    return m_request_data_isValid;
}

QString OAICisTransaction_1::getResponseData() const {
    return m_response_data;
}
void OAICisTransaction_1::setResponseData(const QString &response_data) {
    m_response_data = response_data;
    m_response_data_isSet = true;
}

bool OAICisTransaction_1::is_response_data_Set() const{
    return m_response_data_isSet;
}

bool OAICisTransaction_1::is_response_data_Valid() const{
    return m_response_data_isValid;
}

qint32 OAICisTransaction_1::getTaxYear() const {
    return m_tax_year;
}
void OAICisTransaction_1::setTaxYear(const qint32 &tax_year) {
    m_tax_year = tax_year;
    m_tax_year_isSet = true;
}

bool OAICisTransaction_1::is_tax_year_Set() const{
    return m_tax_year_isSet;
}

bool OAICisTransaction_1::is_tax_year_Valid() const{
    return m_tax_year_isValid;
}

QDateTime OAICisTransaction_1::getTimestamp() const {
    return m_timestamp;
}
void OAICisTransaction_1::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAICisTransaction_1::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAICisTransaction_1::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAICisTransaction_1::getTransactionStatus() const {
    return m_transaction_status;
}
void OAICisTransaction_1::setTransactionStatus(const QString &transaction_status) {
    m_transaction_status = transaction_status;
    m_transaction_status_isSet = true;
}

bool OAICisTransaction_1::is_transaction_status_Set() const{
    return m_transaction_status_isSet;
}

bool OAICisTransaction_1::is_transaction_status_Valid() const{
    return m_transaction_status_isValid;
}

QDateTime OAICisTransaction_1::getTransmissionDate() const {
    return m_transmission_date;
}
void OAICisTransaction_1::setTransmissionDate(const QDateTime &transmission_date) {
    m_transmission_date = transmission_date;
    m_transmission_date_isSet = true;
}

bool OAICisTransaction_1::is_transmission_date_Set() const{
    return m_transmission_date_isSet;
}

bool OAICisTransaction_1::is_transmission_date_Valid() const{
    return m_transmission_date_isValid;
}

bool OAICisTransaction_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cis_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_core.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICisTransaction_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
