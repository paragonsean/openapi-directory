/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportLineInstructionApi_H
#define OAI_OAIReportLineInstructionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include "OAIReportingInstruction.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportLineInstructionApi : public QObject {
    Q_OBJECT

public:
    OAIReportLineInstructionApi(const int timeOut = 0);
    ~OAIReportLineInstructionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  reporting_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteReportingInstruction(const QString &employer_id, const QString &reporting_instruction_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  reporting_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getReportingInstructionFromEmployer(const QString &employer_id, const QString &reporting_instruction_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getReportingInstructionsFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_reporting_instruction OAIReportingInstruction [required]
    */
    virtual void postReportingInstruction(const QString &employer_id, const QString &authorization, const QString &api_version, const OAIReportingInstruction &oai_reporting_instruction);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  reporting_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_reporting_instruction OAIReportingInstruction [required]
    */
    virtual void putReportingInstruction(const QString &employer_id, const QString &reporting_instruction_id, const QString &authorization, const QString &api_version, const OAIReportingInstruction &oai_reporting_instruction);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteReportingInstructionCallback(OAIHttpRequestWorker *worker);
    void getReportingInstructionFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getReportingInstructionsFromEmployerCallback(OAIHttpRequestWorker *worker);
    void postReportingInstructionCallback(OAIHttpRequestWorker *worker);
    void putReportingInstructionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteReportingInstructionSignal();
    void getReportingInstructionFromEmployerSignal(OAIReportingInstruction summary);
    void getReportingInstructionsFromEmployerSignal(OAILinkCollection summary);
    void postReportingInstructionSignal(OAILink summary);
    void putReportingInstructionSignal(OAIReportingInstruction summary);


    void deleteReportingInstructionSignalFull(OAIHttpRequestWorker *worker);
    void getReportingInstructionFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAIReportingInstruction summary);
    void getReportingInstructionsFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void postReportingInstructionSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putReportingInstructionSignalFull(OAIHttpRequestWorker *worker, OAIReportingInstruction summary);

    Q_DECL_DEPRECATED_X("Use deleteReportingInstructionSignalError() instead")
    void deleteReportingInstructionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReportingInstructionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportingInstructionFromEmployerSignalError() instead")
    void getReportingInstructionFromEmployerSignalE(OAIReportingInstruction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportingInstructionFromEmployerSignalError(OAIReportingInstruction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportingInstructionsFromEmployerSignalError() instead")
    void getReportingInstructionsFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportingInstructionsFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postReportingInstructionSignalError() instead")
    void postReportingInstructionSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postReportingInstructionSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putReportingInstructionSignalError() instead")
    void putReportingInstructionSignalE(OAIReportingInstruction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putReportingInstructionSignalError(OAIReportingInstruction summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteReportingInstructionSignalErrorFull() instead")
    void deleteReportingInstructionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReportingInstructionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportingInstructionFromEmployerSignalErrorFull() instead")
    void getReportingInstructionFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportingInstructionFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportingInstructionsFromEmployerSignalErrorFull() instead")
    void getReportingInstructionsFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportingInstructionsFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postReportingInstructionSignalErrorFull() instead")
    void postReportingInstructionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postReportingInstructionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putReportingInstructionSignalErrorFull() instead")
    void putReportingInstructionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putReportingInstructionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
