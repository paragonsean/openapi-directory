/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPayScheduleApi_H
#define OAI_OAIPayScheduleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include "OAIPayRun.h"
#include "OAIPaySchedule.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPayScheduleApi : public QObject {
    Q_OBJECT

public:
    OAIPayScheduleApi(const int timeOut = 0);
    ~OAIPayScheduleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePaySchedule(const QString &employer_id, const QString &pay_schedule_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllPayScheduleTags(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeesFromPayScheduleOnEffectiveDate(const QString &employer_id, const QString &pay_schedule_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeesFromPaySchedule(const QString &employer_id, const QString &pay_schedule_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayRunFromPaySchedule(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayRunsFromPaySchedule(const QString &employer_id, const QString &pay_schedule_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayScheduleFromEmployer(const QString &employer_id, const QString &pay_schedule_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPaySchedulesFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPaySchedulesWithTag(const QString &employer_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_pay_schedule OAIPaySchedule [required]
    */
    virtual void postPaySchedule(const QString &employer_id, const QString &authorization, const QString &api_version, const OAIPaySchedule &oai_pay_schedule);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_pay_schedule OAIPaySchedule [required]
    */
    virtual void putPaySchedule(const QString &employer_id, const QString &pay_schedule_id, const QString &authorization, const QString &api_version, const OAIPaySchedule &oai_pay_schedule);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePayScheduleCallback(OAIHttpRequestWorker *worker);
    void getAllPayScheduleTagsCallback(OAIHttpRequestWorker *worker);
    void getEmployeesFromPayScheduleOnEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getEmployeesFromPayScheduleCallback(OAIHttpRequestWorker *worker);
    void getPayRunFromPayScheduleCallback(OAIHttpRequestWorker *worker);
    void getPayRunsFromPayScheduleCallback(OAIHttpRequestWorker *worker);
    void getPayScheduleFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getPaySchedulesFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getPaySchedulesWithTagCallback(OAIHttpRequestWorker *worker);
    void postPayScheduleCallback(OAIHttpRequestWorker *worker);
    void putPayScheduleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePayScheduleSignal();
    void getAllPayScheduleTagsSignal(OAILinkCollection summary);
    void getEmployeesFromPayScheduleOnEffectiveDateSignal(OAILinkCollection summary);
    void getEmployeesFromPayScheduleSignal(OAILinkCollection summary);
    void getPayRunFromPayScheduleSignal(OAIPayRun summary);
    void getPayRunsFromPayScheduleSignal(OAILinkCollection summary);
    void getPayScheduleFromEmployerSignal(OAIPaySchedule summary);
    void getPaySchedulesFromEmployerSignal(OAILinkCollection summary);
    void getPaySchedulesWithTagSignal(OAILinkCollection summary);
    void postPayScheduleSignal(OAILink summary);
    void putPayScheduleSignal(OAIPaySchedule summary);


    void deletePayScheduleSignalFull(OAIHttpRequestWorker *worker);
    void getAllPayScheduleTagsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployeesFromPayScheduleOnEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getEmployeesFromPayScheduleSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayRunFromPayScheduleSignalFull(OAIHttpRequestWorker *worker, OAIPayRun summary);
    void getPayRunsFromPayScheduleSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayScheduleFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAIPaySchedule summary);
    void getPaySchedulesFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPaySchedulesWithTagSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void postPayScheduleSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putPayScheduleSignalFull(OAIHttpRequestWorker *worker, OAIPaySchedule summary);

    Q_DECL_DEPRECATED_X("Use deletePayScheduleSignalError() instead")
    void deletePayScheduleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayScheduleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPayScheduleTagsSignalError() instead")
    void getAllPayScheduleTagsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPayScheduleTagsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromPayScheduleOnEffectiveDateSignalError() instead")
    void getEmployeesFromPayScheduleOnEffectiveDateSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromPayScheduleOnEffectiveDateSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromPayScheduleSignalError() instead")
    void getEmployeesFromPayScheduleSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromPayScheduleSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunFromPayScheduleSignalError() instead")
    void getPayRunFromPayScheduleSignalE(OAIPayRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunFromPayScheduleSignalError(OAIPayRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunsFromPayScheduleSignalError() instead")
    void getPayRunsFromPayScheduleSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunsFromPayScheduleSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayScheduleFromEmployerSignalError() instead")
    void getPayScheduleFromEmployerSignalE(OAIPaySchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayScheduleFromEmployerSignalError(OAIPaySchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaySchedulesFromEmployerSignalError() instead")
    void getPaySchedulesFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaySchedulesFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaySchedulesWithTagSignalError() instead")
    void getPaySchedulesWithTagSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaySchedulesWithTagSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPayScheduleSignalError() instead")
    void postPayScheduleSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPayScheduleSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPayScheduleSignalError() instead")
    void putPayScheduleSignalE(OAIPaySchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPayScheduleSignalError(OAIPaySchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePayScheduleSignalErrorFull() instead")
    void deletePayScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPayScheduleTagsSignalErrorFull() instead")
    void getAllPayScheduleTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPayScheduleTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromPayScheduleOnEffectiveDateSignalErrorFull() instead")
    void getEmployeesFromPayScheduleOnEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromPayScheduleOnEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromPayScheduleSignalErrorFull() instead")
    void getEmployeesFromPayScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromPayScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunFromPayScheduleSignalErrorFull() instead")
    void getPayRunFromPayScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunFromPayScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunsFromPayScheduleSignalErrorFull() instead")
    void getPayRunsFromPayScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunsFromPayScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayScheduleFromEmployerSignalErrorFull() instead")
    void getPayScheduleFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayScheduleFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaySchedulesFromEmployerSignalErrorFull() instead")
    void getPaySchedulesFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaySchedulesFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaySchedulesWithTagSignalErrorFull() instead")
    void getPaySchedulesWithTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaySchedulesWithTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPayScheduleSignalErrorFull() instead")
    void postPayScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPayScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPayScheduleSignalErrorFull() instead")
    void putPayScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPayScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
