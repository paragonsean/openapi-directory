/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubContractorApi_H
#define OAI_OAISubContractorApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include "OAISubContractor.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubContractorApi : public QObject {
    Q_OBJECT

public:
    OAISubContractorApi(const int timeOut = 0);
    ~OAISubContractorApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  sub_contractor_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteSubContractor(const QString &employer_id, const QString &sub_contractor_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  sub_contractor_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteSubContractorRevision(const QString &employer_id, const QString &sub_contractor_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  sub_contractor_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteSubContractorRevisionByNumber(const QString &employer_id, const QString &sub_contractor_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  sub_contractor_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getSubContractorByEffectiveDate(const QString &employer_id, const QString &sub_contractor_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  sub_contractor_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getSubContractorFromEmployer(const QString &employer_id, const QString &sub_contractor_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  sub_contractor_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getSubContractorRevisionByNumber(const QString &employer_id, const QString &sub_contractor_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  sub_contractor_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getSubContractorRevisions(const QString &employer_id, const QString &sub_contractor_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getSubContractorsByEffectiveDate(const QString &employer_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getSubContractorsFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  sub_contractor_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_sub_contractor OAISubContractor [required]
    */
    virtual void patchSubContractor(const QString &employer_id, const QString &sub_contractor_id, const QString &authorization, const QString &api_version, const OAISubContractor &oai_sub_contractor);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_sub_contractor OAISubContractor [required]
    */
    virtual void postSubContractorIntoEmployer(const QString &employer_id, const QString &authorization, const QString &api_version, const OAISubContractor &oai_sub_contractor);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  sub_contractor_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_sub_contractor OAISubContractor [required]
    */
    virtual void putSubContractorIntoEmployer(const QString &employer_id, const QString &sub_contractor_id, const QString &authorization, const QString &api_version, const OAISubContractor &oai_sub_contractor);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteSubContractorCallback(OAIHttpRequestWorker *worker);
    void deleteSubContractorRevisionCallback(OAIHttpRequestWorker *worker);
    void deleteSubContractorRevisionByNumberCallback(OAIHttpRequestWorker *worker);
    void getSubContractorByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getSubContractorFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getSubContractorRevisionByNumberCallback(OAIHttpRequestWorker *worker);
    void getSubContractorRevisionsCallback(OAIHttpRequestWorker *worker);
    void getSubContractorsByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getSubContractorsFromEmployerCallback(OAIHttpRequestWorker *worker);
    void patchSubContractorCallback(OAIHttpRequestWorker *worker);
    void postSubContractorIntoEmployerCallback(OAIHttpRequestWorker *worker);
    void putSubContractorIntoEmployerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteSubContractorSignal();
    void deleteSubContractorRevisionSignal();
    void deleteSubContractorRevisionByNumberSignal();
    void getSubContractorByEffectiveDateSignal(OAISubContractor summary);
    void getSubContractorFromEmployerSignal(OAISubContractor summary);
    void getSubContractorRevisionByNumberSignal(OAISubContractor summary);
    void getSubContractorRevisionsSignal(OAILinkCollection summary);
    void getSubContractorsByEffectiveDateSignal(OAILinkCollection summary);
    void getSubContractorsFromEmployerSignal(OAILinkCollection summary);
    void patchSubContractorSignal(OAISubContractor summary);
    void postSubContractorIntoEmployerSignal(OAILink summary);
    void putSubContractorIntoEmployerSignal(OAISubContractor summary);


    void deleteSubContractorSignalFull(OAIHttpRequestWorker *worker);
    void deleteSubContractorRevisionSignalFull(OAIHttpRequestWorker *worker);
    void deleteSubContractorRevisionByNumberSignalFull(OAIHttpRequestWorker *worker);
    void getSubContractorByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAISubContractor summary);
    void getSubContractorFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAISubContractor summary);
    void getSubContractorRevisionByNumberSignalFull(OAIHttpRequestWorker *worker, OAISubContractor summary);
    void getSubContractorRevisionsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getSubContractorsByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getSubContractorsFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void patchSubContractorSignalFull(OAIHttpRequestWorker *worker, OAISubContractor summary);
    void postSubContractorIntoEmployerSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putSubContractorIntoEmployerSignalFull(OAIHttpRequestWorker *worker, OAISubContractor summary);

    Q_DECL_DEPRECATED_X("Use deleteSubContractorSignalError() instead")
    void deleteSubContractorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubContractorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubContractorRevisionSignalError() instead")
    void deleteSubContractorRevisionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubContractorRevisionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubContractorRevisionByNumberSignalError() instead")
    void deleteSubContractorRevisionByNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubContractorRevisionByNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubContractorByEffectiveDateSignalError() instead")
    void getSubContractorByEffectiveDateSignalE(OAISubContractor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubContractorByEffectiveDateSignalError(OAISubContractor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubContractorFromEmployerSignalError() instead")
    void getSubContractorFromEmployerSignalE(OAISubContractor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubContractorFromEmployerSignalError(OAISubContractor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubContractorRevisionByNumberSignalError() instead")
    void getSubContractorRevisionByNumberSignalE(OAISubContractor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubContractorRevisionByNumberSignalError(OAISubContractor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubContractorRevisionsSignalError() instead")
    void getSubContractorRevisionsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubContractorRevisionsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubContractorsByEffectiveDateSignalError() instead")
    void getSubContractorsByEffectiveDateSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubContractorsByEffectiveDateSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubContractorsFromEmployerSignalError() instead")
    void getSubContractorsFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubContractorsFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSubContractorSignalError() instead")
    void patchSubContractorSignalE(OAISubContractor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSubContractorSignalError(OAISubContractor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSubContractorIntoEmployerSignalError() instead")
    void postSubContractorIntoEmployerSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSubContractorIntoEmployerSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSubContractorIntoEmployerSignalError() instead")
    void putSubContractorIntoEmployerSignalE(OAISubContractor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putSubContractorIntoEmployerSignalError(OAISubContractor summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteSubContractorSignalErrorFull() instead")
    void deleteSubContractorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubContractorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubContractorRevisionSignalErrorFull() instead")
    void deleteSubContractorRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubContractorRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubContractorRevisionByNumberSignalErrorFull() instead")
    void deleteSubContractorRevisionByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubContractorRevisionByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubContractorByEffectiveDateSignalErrorFull() instead")
    void getSubContractorByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubContractorByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubContractorFromEmployerSignalErrorFull() instead")
    void getSubContractorFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubContractorFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubContractorRevisionByNumberSignalErrorFull() instead")
    void getSubContractorRevisionByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubContractorRevisionByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubContractorRevisionsSignalErrorFull() instead")
    void getSubContractorRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubContractorRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubContractorsByEffectiveDateSignalErrorFull() instead")
    void getSubContractorsByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubContractorsByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubContractorsFromEmployerSignalErrorFull() instead")
    void getSubContractorsFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubContractorsFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSubContractorSignalErrorFull() instead")
    void patchSubContractorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSubContractorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSubContractorIntoEmployerSignalErrorFull() instead")
    void postSubContractorIntoEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSubContractorIntoEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSubContractorIntoEmployerSignalErrorFull() instead")
    void putSubContractorIntoEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSubContractorIntoEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
