/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission_1::OAIPermission_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission_1::OAIPermission_1() {
    this->initializeModel();
}

OAIPermission_1::~OAIPermission_1() {}

void OAIPermission_1::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_verbs_isSet = false;
    m_verbs_isValid = false;
}

void OAIPermission_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission_1::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;

    m_verbs_isValid = ::OpenAPI::fromJsonValue(m_verbs, json[QString("Verbs")]);
    m_verbs_isSet = !json[QString("Verbs")].isNull() && m_verbs_isValid;
}

QString OAIPermission_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission_1::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_verbs_isSet) {
        obj.insert(QString("Verbs"), ::OpenAPI::toJsonValue(m_verbs));
    }
    return obj;
}

QString OAIPermission_1::getDescription() const {
    return m_description;
}
void OAIPermission_1::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPermission_1::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPermission_1::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPermission_1::getExpression() const {
    return m_expression;
}
void OAIPermission_1::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIPermission_1::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIPermission_1::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIPermission_1::getName() const {
    return m_name;
}
void OAIPermission_1::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPermission_1::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPermission_1::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPermission_1::getPolicy() const {
    return m_policy;
}
void OAIPermission_1::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPermission_1::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPermission_1::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIPermission_1::getVerbs() const {
    return m_verbs;
}
void OAIPermission_1::setVerbs(const QString &verbs) {
    m_verbs = verbs;
    m_verbs_isSet = true;
}

bool OAIPermission_1::is_verbs_Set() const{
    return m_verbs_isSet;
}

bool OAIPermission_1::is_verbs_Valid() const{
    return m_verbs_isValid;
}

bool OAIPermission_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verbs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
