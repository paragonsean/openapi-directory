/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThirdPartyTransaction_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThirdPartyTransaction_1::OAIThirdPartyTransaction_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThirdPartyTransaction_1::OAIThirdPartyTransaction_1() {
    this->initializeModel();
}

OAIThirdPartyTransaction_1::~OAIThirdPartyTransaction_1() {}

void OAIThirdPartyTransaction_1::initializeModel() {

    m_employer_core_isSet = false;
    m_employer_core_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_transaction_status_isSet = false;
    m_transaction_status_isValid = false;

    m_transmission_date_isSet = false;
    m_transmission_date_isValid = false;
}

void OAIThirdPartyTransaction_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThirdPartyTransaction_1::fromJsonObject(QJsonObject json) {

    m_employer_core_isValid = ::OpenAPI::fromJsonValue(m_employer_core, json[QString("EmployerCore")]);
    m_employer_core_isSet = !json[QString("EmployerCore")].isNull() && m_employer_core_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("Request")]);
    m_request_isSet = !json[QString("Request")].isNull() && m_request_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("Response")]);
    m_response_isSet = !json[QString("Response")].isNull() && m_response_isValid;

    m_transaction_status_isValid = ::OpenAPI::fromJsonValue(m_transaction_status, json[QString("TransactionStatus")]);
    m_transaction_status_isSet = !json[QString("TransactionStatus")].isNull() && m_transaction_status_isValid;

    m_transmission_date_isValid = ::OpenAPI::fromJsonValue(m_transmission_date, json[QString("TransmissionDate")]);
    m_transmission_date_isSet = !json[QString("TransmissionDate")].isNull() && m_transmission_date_isValid;
}

QString OAIThirdPartyTransaction_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThirdPartyTransaction_1::asJsonObject() const {
    QJsonObject obj;
    if (m_employer_core.isSet()) {
        obj.insert(QString("EmployerCore"), ::OpenAPI::toJsonValue(m_employer_core));
    }
    if (m_job_type_isSet) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_request_isSet) {
        obj.insert(QString("Request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_response_isSet) {
        obj.insert(QString("Response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_transaction_status_isSet) {
        obj.insert(QString("TransactionStatus"), ::OpenAPI::toJsonValue(m_transaction_status));
    }
    if (m_transmission_date_isSet) {
        obj.insert(QString("TransmissionDate"), ::OpenAPI::toJsonValue(m_transmission_date));
    }
    return obj;
}

OAIEmployerCore_2 OAIThirdPartyTransaction_1::getEmployerCore() const {
    return m_employer_core;
}
void OAIThirdPartyTransaction_1::setEmployerCore(const OAIEmployerCore_2 &employer_core) {
    m_employer_core = employer_core;
    m_employer_core_isSet = true;
}

bool OAIThirdPartyTransaction_1::is_employer_core_Set() const{
    return m_employer_core_isSet;
}

bool OAIThirdPartyTransaction_1::is_employer_core_Valid() const{
    return m_employer_core_isValid;
}

QString OAIThirdPartyTransaction_1::getJobType() const {
    return m_job_type;
}
void OAIThirdPartyTransaction_1::setJobType(const QString &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIThirdPartyTransaction_1::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIThirdPartyTransaction_1::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QString OAIThirdPartyTransaction_1::getRequest() const {
    return m_request;
}
void OAIThirdPartyTransaction_1::setRequest(const QString &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIThirdPartyTransaction_1::is_request_Set() const{
    return m_request_isSet;
}

bool OAIThirdPartyTransaction_1::is_request_Valid() const{
    return m_request_isValid;
}

QString OAIThirdPartyTransaction_1::getResponse() const {
    return m_response;
}
void OAIThirdPartyTransaction_1::setResponse(const QString &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIThirdPartyTransaction_1::is_response_Set() const{
    return m_response_isSet;
}

bool OAIThirdPartyTransaction_1::is_response_Valid() const{
    return m_response_isValid;
}

QString OAIThirdPartyTransaction_1::getTransactionStatus() const {
    return m_transaction_status;
}
void OAIThirdPartyTransaction_1::setTransactionStatus(const QString &transaction_status) {
    m_transaction_status = transaction_status;
    m_transaction_status_isSet = true;
}

bool OAIThirdPartyTransaction_1::is_transaction_status_Set() const{
    return m_transaction_status_isSet;
}

bool OAIThirdPartyTransaction_1::is_transaction_status_Valid() const{
    return m_transaction_status_isValid;
}

QDateTime OAIThirdPartyTransaction_1::getTransmissionDate() const {
    return m_transmission_date;
}
void OAIThirdPartyTransaction_1::setTransmissionDate(const QDateTime &transmission_date) {
    m_transmission_date = transmission_date;
    m_transmission_date_isSet = true;
}

bool OAIThirdPartyTransaction_1::is_transmission_date_Set() const{
    return m_transmission_date_isSet;
}

bool OAIThirdPartyTransaction_1::is_transmission_date_Valid() const{
    return m_transmission_date_isValid;
}

bool OAIThirdPartyTransaction_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_employer_core.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThirdPartyTransaction_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
