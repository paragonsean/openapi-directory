/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDpsMessage_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDpsMessage_1::OAIDpsMessage_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDpsMessage_1::OAIDpsMessage_1() {
    this->initializeModel();
}

OAIDpsMessage_1::~OAIDpsMessage_1() {}

void OAIDpsMessage_1::initializeModel() {

    m_form_type_isSet = false;
    m_form_type_isValid = false;

    m_issue_date_isSet = false;
    m_issue_date_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_message_status_isSet = false;
    m_message_status_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_processing_result_isSet = false;
    m_processing_result_isValid = false;

    m_retrieve_date_isSet = false;
    m_retrieve_date_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;
}

void OAIDpsMessage_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDpsMessage_1::fromJsonObject(QJsonObject json) {

    m_form_type_isValid = ::OpenAPI::fromJsonValue(m_form_type, json[QString("FormType")]);
    m_form_type_isSet = !json[QString("FormType")].isNull() && m_form_type_isValid;

    m_issue_date_isValid = ::OpenAPI::fromJsonValue(m_issue_date, json[QString("IssueDate")]);
    m_issue_date_isSet = !json[QString("IssueDate")].isNull() && m_issue_date_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_message_status_isValid = ::OpenAPI::fromJsonValue(m_message_status, json[QString("MessageStatus")]);
    m_message_status_isSet = !json[QString("MessageStatus")].isNull() && m_message_status_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("MessageType")]);
    m_message_type_isSet = !json[QString("MessageType")].isNull() && m_message_type_isValid;

    m_processing_result_isValid = ::OpenAPI::fromJsonValue(m_processing_result, json[QString("ProcessingResult")]);
    m_processing_result_isSet = !json[QString("ProcessingResult")].isNull() && m_processing_result_isValid;

    m_retrieve_date_isValid = ::OpenAPI::fromJsonValue(m_retrieve_date, json[QString("RetrieveDate")]);
    m_retrieve_date_isSet = !json[QString("RetrieveDate")].isNull() && m_retrieve_date_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("SequenceNumber")]);
    m_sequence_number_isSet = !json[QString("SequenceNumber")].isNull() && m_sequence_number_isValid;
}

QString OAIDpsMessage_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDpsMessage_1::asJsonObject() const {
    QJsonObject obj;
    if (m_form_type_isSet) {
        obj.insert(QString("FormType"), ::OpenAPI::toJsonValue(m_form_type));
    }
    if (m_issue_date_isSet) {
        obj.insert(QString("IssueDate"), ::OpenAPI::toJsonValue(m_issue_date));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_message_status_isSet) {
        obj.insert(QString("MessageStatus"), ::OpenAPI::toJsonValue(m_message_status));
    }
    if (m_message_type_isSet) {
        obj.insert(QString("MessageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_processing_result_isSet) {
        obj.insert(QString("ProcessingResult"), ::OpenAPI::toJsonValue(m_processing_result));
    }
    if (m_retrieve_date_isSet) {
        obj.insert(QString("RetrieveDate"), ::OpenAPI::toJsonValue(m_retrieve_date));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("SequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    return obj;
}

QString OAIDpsMessage_1::getFormType() const {
    return m_form_type;
}
void OAIDpsMessage_1::setFormType(const QString &form_type) {
    m_form_type = form_type;
    m_form_type_isSet = true;
}

bool OAIDpsMessage_1::is_form_type_Set() const{
    return m_form_type_isSet;
}

bool OAIDpsMessage_1::is_form_type_Valid() const{
    return m_form_type_isValid;
}

QDate OAIDpsMessage_1::getIssueDate() const {
    return m_issue_date;
}
void OAIDpsMessage_1::setIssueDate(const QDate &issue_date) {
    m_issue_date = issue_date;
    m_issue_date_isSet = true;
}

bool OAIDpsMessage_1::is_issue_date_Set() const{
    return m_issue_date_isSet;
}

bool OAIDpsMessage_1::is_issue_date_Valid() const{
    return m_issue_date_isValid;
}

QDateTime OAIDpsMessage_1::getLastUpdated() const {
    return m_last_updated;
}
void OAIDpsMessage_1::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDpsMessage_1::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDpsMessage_1::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIDpsMessage_1::getMessage() const {
    return m_message;
}
void OAIDpsMessage_1::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDpsMessage_1::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDpsMessage_1::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIDpsMessage_1::getMessageStatus() const {
    return m_message_status;
}
void OAIDpsMessage_1::setMessageStatus(const QString &message_status) {
    m_message_status = message_status;
    m_message_status_isSet = true;
}

bool OAIDpsMessage_1::is_message_status_Set() const{
    return m_message_status_isSet;
}

bool OAIDpsMessage_1::is_message_status_Valid() const{
    return m_message_status_isValid;
}

QString OAIDpsMessage_1::getMessageType() const {
    return m_message_type;
}
void OAIDpsMessage_1::setMessageType(const QString &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIDpsMessage_1::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIDpsMessage_1::is_message_type_Valid() const{
    return m_message_type_isValid;
}

QString OAIDpsMessage_1::getProcessingResult() const {
    return m_processing_result;
}
void OAIDpsMessage_1::setProcessingResult(const QString &processing_result) {
    m_processing_result = processing_result;
    m_processing_result_isSet = true;
}

bool OAIDpsMessage_1::is_processing_result_Set() const{
    return m_processing_result_isSet;
}

bool OAIDpsMessage_1::is_processing_result_Valid() const{
    return m_processing_result_isValid;
}

QDateTime OAIDpsMessage_1::getRetrieveDate() const {
    return m_retrieve_date;
}
void OAIDpsMessage_1::setRetrieveDate(const QDateTime &retrieve_date) {
    m_retrieve_date = retrieve_date;
    m_retrieve_date_isSet = true;
}

bool OAIDpsMessage_1::is_retrieve_date_Set() const{
    return m_retrieve_date_isSet;
}

bool OAIDpsMessage_1::is_retrieve_date_Valid() const{
    return m_retrieve_date_isValid;
}

qint32 OAIDpsMessage_1::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIDpsMessage_1::setSequenceNumber(const qint32 &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIDpsMessage_1::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIDpsMessage_1::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

bool OAIDpsMessage_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_form_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retrieve_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDpsMessage_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
