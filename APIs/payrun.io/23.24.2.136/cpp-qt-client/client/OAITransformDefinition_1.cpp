/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformDefinition_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformDefinition_1::OAITransformDefinition_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformDefinition_1::OAITransformDefinition_1() {
    this->initializeModel();
}

OAITransformDefinition_1::~OAITransformDefinition_1() {}

void OAITransformDefinition_1::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_definition_type_isSet = false;
    m_definition_type_isValid = false;

    m_readonly_isSet = false;
    m_readonly_isValid = false;

    m_supported_reports_isSet = false;
    m_supported_reports_isValid = false;

    m_tax_year_isSet = false;
    m_tax_year_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAITransformDefinition_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformDefinition_1::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;

    m_definition_type_isValid = ::OpenAPI::fromJsonValue(m_definition_type, json[QString("DefinitionType")]);
    m_definition_type_isSet = !json[QString("DefinitionType")].isNull() && m_definition_type_isValid;

    m_readonly_isValid = ::OpenAPI::fromJsonValue(m_readonly, json[QString("Readonly")]);
    m_readonly_isSet = !json[QString("Readonly")].isNull() && m_readonly_isValid;

    m_supported_reports_isValid = ::OpenAPI::fromJsonValue(m_supported_reports, json[QString("SupportedReports")]);
    m_supported_reports_isSet = !json[QString("SupportedReports")].isNull() && m_supported_reports_isValid;

    m_tax_year_isValid = ::OpenAPI::fromJsonValue(m_tax_year, json[QString("TaxYear")]);
    m_tax_year_isSet = !json[QString("TaxYear")].isNull() && m_tax_year_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAITransformDefinition_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformDefinition_1::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_definition_isSet) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_definition_type_isSet) {
        obj.insert(QString("DefinitionType"), ::OpenAPI::toJsonValue(m_definition_type));
    }
    if (m_readonly_isSet) {
        obj.insert(QString("Readonly"), ::OpenAPI::toJsonValue(m_readonly));
    }
    if (m_supported_reports_isSet) {
        obj.insert(QString("SupportedReports"), ::OpenAPI::toJsonValue(m_supported_reports));
    }
    if (m_tax_year_isSet) {
        obj.insert(QString("TaxYear"), ::OpenAPI::toJsonValue(m_tax_year));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAITransformDefinition_1::isActive() const {
    return m_active;
}
void OAITransformDefinition_1::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAITransformDefinition_1::is_active_Set() const{
    return m_active_isSet;
}

bool OAITransformDefinition_1::is_active_Valid() const{
    return m_active_isValid;
}

QString OAITransformDefinition_1::getContentType() const {
    return m_content_type;
}
void OAITransformDefinition_1::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAITransformDefinition_1::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAITransformDefinition_1::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAITransformDefinition_1::getDefinition() const {
    return m_definition;
}
void OAITransformDefinition_1::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAITransformDefinition_1::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAITransformDefinition_1::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAITransformDefinition_1::getDefinitionType() const {
    return m_definition_type;
}
void OAITransformDefinition_1::setDefinitionType(const QString &definition_type) {
    m_definition_type = definition_type;
    m_definition_type_isSet = true;
}

bool OAITransformDefinition_1::is_definition_type_Set() const{
    return m_definition_type_isSet;
}

bool OAITransformDefinition_1::is_definition_type_Valid() const{
    return m_definition_type_isValid;
}

bool OAITransformDefinition_1::isReadonly() const {
    return m_readonly;
}
void OAITransformDefinition_1::setReadonly(const bool &readonly) {
    m_readonly = readonly;
    m_readonly_isSet = true;
}

bool OAITransformDefinition_1::is_readonly_Set() const{
    return m_readonly_isSet;
}

bool OAITransformDefinition_1::is_readonly_Valid() const{
    return m_readonly_isValid;
}

QString OAITransformDefinition_1::getSupportedReports() const {
    return m_supported_reports;
}
void OAITransformDefinition_1::setSupportedReports(const QString &supported_reports) {
    m_supported_reports = supported_reports;
    m_supported_reports_isSet = true;
}

bool OAITransformDefinition_1::is_supported_reports_Set() const{
    return m_supported_reports_isSet;
}

bool OAITransformDefinition_1::is_supported_reports_Valid() const{
    return m_supported_reports_isValid;
}

qint32 OAITransformDefinition_1::getTaxYear() const {
    return m_tax_year;
}
void OAITransformDefinition_1::setTaxYear(const qint32 &tax_year) {
    m_tax_year = tax_year;
    m_tax_year_isSet = true;
}

bool OAITransformDefinition_1::is_tax_year_Set() const{
    return m_tax_year_isSet;
}

bool OAITransformDefinition_1::is_tax_year_Valid() const{
    return m_tax_year_isValid;
}

QString OAITransformDefinition_1::getTitle() const {
    return m_title;
}
void OAITransformDefinition_1::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITransformDefinition_1::is_title_Set() const{
    return m_title_isSet;
}

bool OAITransformDefinition_1::is_title_Valid() const{
    return m_title_isValid;
}

QString OAITransformDefinition_1::getVersion() const {
    return m_version;
}
void OAITransformDefinition_1::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAITransformDefinition_1::is_version_Set() const{
    return m_version_isSet;
}

bool OAITransformDefinition_1::is_version_Valid() const{
    return m_version_isValid;
}

bool OAITransformDefinition_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readonly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_reports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformDefinition_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
