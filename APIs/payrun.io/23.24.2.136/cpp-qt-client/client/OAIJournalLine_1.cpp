/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJournalLine_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJournalLine_1::OAIJournalLine_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJournalLine_1::OAIJournalLine_1() {
    this->initializeModel();
}

OAIJournalLine_1::~OAIJournalLine_1() {}

void OAIJournalLine_1::initializeModel() {

    m_credit_isSet = false;
    m_credit_isValid = false;

    m_debit_isSet = false;
    m_debit_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_employee_isSet = false;
    m_employee_isValid = false;

    m_generated_isSet = false;
    m_generated_isValid = false;

    m_grouping_isSet = false;
    m_grouping_isValid = false;

    m_ledger_target_isSet = false;
    m_ledger_target_isValid = false;

    m_nom_code_isSet = false;
    m_nom_code_isValid = false;

    m_pay_frequency_isSet = false;
    m_pay_frequency_isValid = false;

    m_pay_run_isSet = false;
    m_pay_run_isValid = false;

    m_sub_contractor_isSet = false;
    m_sub_contractor_isValid = false;

    m_sub_nom_code_isSet = false;
    m_sub_nom_code_isValid = false;

    m_tax_period_isSet = false;
    m_tax_period_isValid = false;

    m_tax_year_isSet = false;
    m_tax_year_isValid = false;
}

void OAIJournalLine_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJournalLine_1::fromJsonObject(QJsonObject json) {

    m_credit_isValid = ::OpenAPI::fromJsonValue(m_credit, json[QString("Credit")]);
    m_credit_isSet = !json[QString("Credit")].isNull() && m_credit_isValid;

    m_debit_isValid = ::OpenAPI::fromJsonValue(m_debit, json[QString("Debit")]);
    m_debit_isSet = !json[QString("Debit")].isNull() && m_debit_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_employee_isValid = ::OpenAPI::fromJsonValue(m_employee, json[QString("Employee")]);
    m_employee_isSet = !json[QString("Employee")].isNull() && m_employee_isValid;

    m_generated_isValid = ::OpenAPI::fromJsonValue(m_generated, json[QString("Generated")]);
    m_generated_isSet = !json[QString("Generated")].isNull() && m_generated_isValid;

    m_grouping_isValid = ::OpenAPI::fromJsonValue(m_grouping, json[QString("Grouping")]);
    m_grouping_isSet = !json[QString("Grouping")].isNull() && m_grouping_isValid;

    m_ledger_target_isValid = ::OpenAPI::fromJsonValue(m_ledger_target, json[QString("LedgerTarget")]);
    m_ledger_target_isSet = !json[QString("LedgerTarget")].isNull() && m_ledger_target_isValid;

    m_nom_code_isValid = ::OpenAPI::fromJsonValue(m_nom_code, json[QString("NomCode")]);
    m_nom_code_isSet = !json[QString("NomCode")].isNull() && m_nom_code_isValid;

    m_pay_frequency_isValid = ::OpenAPI::fromJsonValue(m_pay_frequency, json[QString("PayFrequency")]);
    m_pay_frequency_isSet = !json[QString("PayFrequency")].isNull() && m_pay_frequency_isValid;

    m_pay_run_isValid = ::OpenAPI::fromJsonValue(m_pay_run, json[QString("PayRun")]);
    m_pay_run_isSet = !json[QString("PayRun")].isNull() && m_pay_run_isValid;

    m_sub_contractor_isValid = ::OpenAPI::fromJsonValue(m_sub_contractor, json[QString("SubContractor")]);
    m_sub_contractor_isSet = !json[QString("SubContractor")].isNull() && m_sub_contractor_isValid;

    m_sub_nom_code_isValid = ::OpenAPI::fromJsonValue(m_sub_nom_code, json[QString("SubNomCode")]);
    m_sub_nom_code_isSet = !json[QString("SubNomCode")].isNull() && m_sub_nom_code_isValid;

    m_tax_period_isValid = ::OpenAPI::fromJsonValue(m_tax_period, json[QString("TaxPeriod")]);
    m_tax_period_isSet = !json[QString("TaxPeriod")].isNull() && m_tax_period_isValid;

    m_tax_year_isValid = ::OpenAPI::fromJsonValue(m_tax_year, json[QString("TaxYear")]);
    m_tax_year_isSet = !json[QString("TaxYear")].isNull() && m_tax_year_isValid;
}

QString OAIJournalLine_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJournalLine_1::asJsonObject() const {
    QJsonObject obj;
    if (m_credit_isSet) {
        obj.insert(QString("Credit"), ::OpenAPI::toJsonValue(m_credit));
    }
    if (m_debit_isSet) {
        obj.insert(QString("Debit"), ::OpenAPI::toJsonValue(m_debit));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employee.isSet()) {
        obj.insert(QString("Employee"), ::OpenAPI::toJsonValue(m_employee));
    }
    if (m_generated_isSet) {
        obj.insert(QString("Generated"), ::OpenAPI::toJsonValue(m_generated));
    }
    if (m_grouping_isSet) {
        obj.insert(QString("Grouping"), ::OpenAPI::toJsonValue(m_grouping));
    }
    if (m_ledger_target_isSet) {
        obj.insert(QString("LedgerTarget"), ::OpenAPI::toJsonValue(m_ledger_target));
    }
    if (m_nom_code_isSet) {
        obj.insert(QString("NomCode"), ::OpenAPI::toJsonValue(m_nom_code));
    }
    if (m_pay_frequency_isSet) {
        obj.insert(QString("PayFrequency"), ::OpenAPI::toJsonValue(m_pay_frequency));
    }
    if (m_pay_run.isSet()) {
        obj.insert(QString("PayRun"), ::OpenAPI::toJsonValue(m_pay_run));
    }
    if (m_sub_contractor.isSet()) {
        obj.insert(QString("SubContractor"), ::OpenAPI::toJsonValue(m_sub_contractor));
    }
    if (m_sub_nom_code_isSet) {
        obj.insert(QString("SubNomCode"), ::OpenAPI::toJsonValue(m_sub_nom_code));
    }
    if (m_tax_period_isSet) {
        obj.insert(QString("TaxPeriod"), ::OpenAPI::toJsonValue(m_tax_period));
    }
    if (m_tax_year_isSet) {
        obj.insert(QString("TaxYear"), ::OpenAPI::toJsonValue(m_tax_year));
    }
    return obj;
}

double OAIJournalLine_1::getCredit() const {
    return m_credit;
}
void OAIJournalLine_1::setCredit(const double &credit) {
    m_credit = credit;
    m_credit_isSet = true;
}

bool OAIJournalLine_1::is_credit_Set() const{
    return m_credit_isSet;
}

bool OAIJournalLine_1::is_credit_Valid() const{
    return m_credit_isValid;
}

double OAIJournalLine_1::getDebit() const {
    return m_debit;
}
void OAIJournalLine_1::setDebit(const double &debit) {
    m_debit = debit;
    m_debit_isSet = true;
}

bool OAIJournalLine_1::is_debit_Set() const{
    return m_debit_isSet;
}

bool OAIJournalLine_1::is_debit_Valid() const{
    return m_debit_isValid;
}

QString OAIJournalLine_1::getDescription() const {
    return m_description;
}
void OAIJournalLine_1::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIJournalLine_1::is_description_Set() const{
    return m_description_isSet;
}

bool OAIJournalLine_1::is_description_Valid() const{
    return m_description_isValid;
}

OAIEmployee_3 OAIJournalLine_1::getEmployee() const {
    return m_employee;
}
void OAIJournalLine_1::setEmployee(const OAIEmployee_3 &employee) {
    m_employee = employee;
    m_employee_isSet = true;
}

bool OAIJournalLine_1::is_employee_Set() const{
    return m_employee_isSet;
}

bool OAIJournalLine_1::is_employee_Valid() const{
    return m_employee_isValid;
}

QDateTime OAIJournalLine_1::getGenerated() const {
    return m_generated;
}
void OAIJournalLine_1::setGenerated(const QDateTime &generated) {
    m_generated = generated;
    m_generated_isSet = true;
}

bool OAIJournalLine_1::is_generated_Set() const{
    return m_generated_isSet;
}

bool OAIJournalLine_1::is_generated_Valid() const{
    return m_generated_isValid;
}

QString OAIJournalLine_1::getGrouping() const {
    return m_grouping;
}
void OAIJournalLine_1::setGrouping(const QString &grouping) {
    m_grouping = grouping;
    m_grouping_isSet = true;
}

bool OAIJournalLine_1::is_grouping_Set() const{
    return m_grouping_isSet;
}

bool OAIJournalLine_1::is_grouping_Valid() const{
    return m_grouping_isValid;
}

QString OAIJournalLine_1::getLedgerTarget() const {
    return m_ledger_target;
}
void OAIJournalLine_1::setLedgerTarget(const QString &ledger_target) {
    m_ledger_target = ledger_target;
    m_ledger_target_isSet = true;
}

bool OAIJournalLine_1::is_ledger_target_Set() const{
    return m_ledger_target_isSet;
}

bool OAIJournalLine_1::is_ledger_target_Valid() const{
    return m_ledger_target_isValid;
}

QString OAIJournalLine_1::getNomCode() const {
    return m_nom_code;
}
void OAIJournalLine_1::setNomCode(const QString &nom_code) {
    m_nom_code = nom_code;
    m_nom_code_isSet = true;
}

bool OAIJournalLine_1::is_nom_code_Set() const{
    return m_nom_code_isSet;
}

bool OAIJournalLine_1::is_nom_code_Valid() const{
    return m_nom_code_isValid;
}

QString OAIJournalLine_1::getPayFrequency() const {
    return m_pay_frequency;
}
void OAIJournalLine_1::setPayFrequency(const QString &pay_frequency) {
    m_pay_frequency = pay_frequency;
    m_pay_frequency_isSet = true;
}

bool OAIJournalLine_1::is_pay_frequency_Set() const{
    return m_pay_frequency_isSet;
}

bool OAIJournalLine_1::is_pay_frequency_Valid() const{
    return m_pay_frequency_isValid;
}

OAIPayRun_2 OAIJournalLine_1::getPayRun() const {
    return m_pay_run;
}
void OAIJournalLine_1::setPayRun(const OAIPayRun_2 &pay_run) {
    m_pay_run = pay_run;
    m_pay_run_isSet = true;
}

bool OAIJournalLine_1::is_pay_run_Set() const{
    return m_pay_run_isSet;
}

bool OAIJournalLine_1::is_pay_run_Valid() const{
    return m_pay_run_isValid;
}

OAISubContractor_2 OAIJournalLine_1::getSubContractor() const {
    return m_sub_contractor;
}
void OAIJournalLine_1::setSubContractor(const OAISubContractor_2 &sub_contractor) {
    m_sub_contractor = sub_contractor;
    m_sub_contractor_isSet = true;
}

bool OAIJournalLine_1::is_sub_contractor_Set() const{
    return m_sub_contractor_isSet;
}

bool OAIJournalLine_1::is_sub_contractor_Valid() const{
    return m_sub_contractor_isValid;
}

QString OAIJournalLine_1::getSubNomCode() const {
    return m_sub_nom_code;
}
void OAIJournalLine_1::setSubNomCode(const QString &sub_nom_code) {
    m_sub_nom_code = sub_nom_code;
    m_sub_nom_code_isSet = true;
}

bool OAIJournalLine_1::is_sub_nom_code_Set() const{
    return m_sub_nom_code_isSet;
}

bool OAIJournalLine_1::is_sub_nom_code_Valid() const{
    return m_sub_nom_code_isValid;
}

qint32 OAIJournalLine_1::getTaxPeriod() const {
    return m_tax_period;
}
void OAIJournalLine_1::setTaxPeriod(const qint32 &tax_period) {
    m_tax_period = tax_period;
    m_tax_period_isSet = true;
}

bool OAIJournalLine_1::is_tax_period_Set() const{
    return m_tax_period_isSet;
}

bool OAIJournalLine_1::is_tax_period_Valid() const{
    return m_tax_period_isValid;
}

qint32 OAIJournalLine_1::getTaxYear() const {
    return m_tax_year;
}
void OAIJournalLine_1::setTaxYear(const qint32 &tax_year) {
    m_tax_year = tax_year;
    m_tax_year_isSet = true;
}

bool OAIJournalLine_1::is_tax_year_Set() const{
    return m_tax_year_isSet;
}

bool OAIJournalLine_1::is_tax_year_Valid() const{
    return m_tax_year_isValid;
}

bool OAIJournalLine_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grouping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ledger_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nom_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_contractor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_nom_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJournalLine_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
