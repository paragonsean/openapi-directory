/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHolidaySchemeApi_H
#define OAI_OAIHolidaySchemeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAIHolidayScheme.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include "OAITag.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHolidaySchemeApi : public QObject {
    Q_OBJECT

public:
    OAIHolidaySchemeApi(const int timeOut = 0);
    ~OAIHolidaySchemeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteHolidayScheme(const QString &employer_id, const QString &holiday_scheme_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteHolidaySchemeRevision(const QString &employer_id, const QString &holiday_scheme_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteHolidaySchemeRevisionByNumber(const QString &employer_id, const QString &holiday_scheme_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteHolidaySchemeTag(const QString &employer_id, const QString &holiday_scheme_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllHolidaySchemeTags(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getHolidaySchemeByEffectiveDate(const QString &employer_id, const QString &holiday_scheme_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getHolidaySchemeFromEmployer(const QString &employer_id, const QString &holiday_scheme_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getHolidaySchemeRevisionByNumber(const QString &employer_id, const QString &holiday_scheme_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getHolidaySchemeRevisions(const QString &employer_id, const QString &holiday_scheme_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getHolidaySchemesByEffectiveDate(const QString &employer_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getHolidaySchemesFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getHolidaySchemesWithTag(const QString &employer_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getTagFromHolidaySchemeRevision(const QString &employer_id, const QString &holiday_scheme_id, const QString &tag_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getTagFromHolidayScheme(const QString &employer_id, const QString &holiday_scheme_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getTagsFromHolidaySchemeRevision(const QString &employer_id, const QString &holiday_scheme_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getTagsFromHolidayScheme(const QString &employer_id, const QString &holiday_scheme_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_holiday_scheme OAIHolidayScheme [required]
    */
    virtual void patchHolidayScheme(const QString &employer_id, const QString &holiday_scheme_id, const QString &authorization, const QString &api_version, const OAIHolidayScheme &oai_holiday_scheme);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_holiday_scheme OAIHolidayScheme [required]
    */
    virtual void postHolidaySchemeIntoEmployer(const QString &employer_id, const QString &authorization, const QString &api_version, const OAIHolidayScheme &oai_holiday_scheme);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_holiday_scheme OAIHolidayScheme [required]
    */
    virtual void putHolidaySchemeIntoEmployer(const QString &employer_id, const QString &holiday_scheme_id, const QString &authorization, const QString &api_version, const OAIHolidayScheme &oai_holiday_scheme);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  holiday_scheme_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void putHolidaySchemeTag(const QString &employer_id, const QString &holiday_scheme_id, const QString &tag_id, const QString &authorization, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteHolidaySchemeCallback(OAIHttpRequestWorker *worker);
    void deleteHolidaySchemeRevisionCallback(OAIHttpRequestWorker *worker);
    void deleteHolidaySchemeRevisionByNumberCallback(OAIHttpRequestWorker *worker);
    void deleteHolidaySchemeTagCallback(OAIHttpRequestWorker *worker);
    void getAllHolidaySchemeTagsCallback(OAIHttpRequestWorker *worker);
    void getHolidaySchemeByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getHolidaySchemeFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getHolidaySchemeRevisionByNumberCallback(OAIHttpRequestWorker *worker);
    void getHolidaySchemeRevisionsCallback(OAIHttpRequestWorker *worker);
    void getHolidaySchemesByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getHolidaySchemesFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getHolidaySchemesWithTagCallback(OAIHttpRequestWorker *worker);
    void getTagFromHolidaySchemeRevisionCallback(OAIHttpRequestWorker *worker);
    void getTagFromHolidaySchemeCallback(OAIHttpRequestWorker *worker);
    void getTagsFromHolidaySchemeRevisionCallback(OAIHttpRequestWorker *worker);
    void getTagsFromHolidaySchemeCallback(OAIHttpRequestWorker *worker);
    void patchHolidaySchemeCallback(OAIHttpRequestWorker *worker);
    void postHolidaySchemeIntoEmployerCallback(OAIHttpRequestWorker *worker);
    void putHolidaySchemeIntoEmployerCallback(OAIHttpRequestWorker *worker);
    void putHolidaySchemeTagCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteHolidaySchemeSignal();
    void deleteHolidaySchemeRevisionSignal();
    void deleteHolidaySchemeRevisionByNumberSignal();
    void deleteHolidaySchemeTagSignal();
    void getAllHolidaySchemeTagsSignal(OAILinkCollection summary);
    void getHolidaySchemeByEffectiveDateSignal(OAIHolidayScheme summary);
    void getHolidaySchemeFromEmployerSignal(OAIHolidayScheme summary);
    void getHolidaySchemeRevisionByNumberSignal(OAIHolidayScheme summary);
    void getHolidaySchemeRevisionsSignal(OAILinkCollection summary);
    void getHolidaySchemesByEffectiveDateSignal(OAILinkCollection summary);
    void getHolidaySchemesFromEmployerSignal(OAILinkCollection summary);
    void getHolidaySchemesWithTagSignal(OAILinkCollection summary);
    void getTagFromHolidaySchemeRevisionSignal(OAITag summary);
    void getTagFromHolidaySchemeSignal(OAITag summary);
    void getTagsFromHolidaySchemeRevisionSignal(OAILinkCollection summary);
    void getTagsFromHolidaySchemeSignal(OAILinkCollection summary);
    void patchHolidaySchemeSignal(OAIHolidayScheme summary);
    void postHolidaySchemeIntoEmployerSignal(OAILink summary);
    void putHolidaySchemeIntoEmployerSignal(OAIHolidayScheme summary);
    void putHolidaySchemeTagSignal(OAITag summary);


    void deleteHolidaySchemeSignalFull(OAIHttpRequestWorker *worker);
    void deleteHolidaySchemeRevisionSignalFull(OAIHttpRequestWorker *worker);
    void deleteHolidaySchemeRevisionByNumberSignalFull(OAIHttpRequestWorker *worker);
    void deleteHolidaySchemeTagSignalFull(OAIHttpRequestWorker *worker);
    void getAllHolidaySchemeTagsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getHolidaySchemeByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAIHolidayScheme summary);
    void getHolidaySchemeFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAIHolidayScheme summary);
    void getHolidaySchemeRevisionByNumberSignalFull(OAIHttpRequestWorker *worker, OAIHolidayScheme summary);
    void getHolidaySchemeRevisionsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getHolidaySchemesByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getHolidaySchemesFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getHolidaySchemesWithTagSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getTagFromHolidaySchemeRevisionSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void getTagFromHolidaySchemeSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void getTagsFromHolidaySchemeRevisionSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getTagsFromHolidaySchemeSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void patchHolidaySchemeSignalFull(OAIHttpRequestWorker *worker, OAIHolidayScheme summary);
    void postHolidaySchemeIntoEmployerSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putHolidaySchemeIntoEmployerSignalFull(OAIHttpRequestWorker *worker, OAIHolidayScheme summary);
    void putHolidaySchemeTagSignalFull(OAIHttpRequestWorker *worker, OAITag summary);

    Q_DECL_DEPRECATED_X("Use deleteHolidaySchemeSignalError() instead")
    void deleteHolidaySchemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHolidaySchemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHolidaySchemeRevisionSignalError() instead")
    void deleteHolidaySchemeRevisionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHolidaySchemeRevisionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHolidaySchemeRevisionByNumberSignalError() instead")
    void deleteHolidaySchemeRevisionByNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHolidaySchemeRevisionByNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHolidaySchemeTagSignalError() instead")
    void deleteHolidaySchemeTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHolidaySchemeTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllHolidaySchemeTagsSignalError() instead")
    void getAllHolidaySchemeTagsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllHolidaySchemeTagsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemeByEffectiveDateSignalError() instead")
    void getHolidaySchemeByEffectiveDateSignalE(OAIHolidayScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemeByEffectiveDateSignalError(OAIHolidayScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemeFromEmployerSignalError() instead")
    void getHolidaySchemeFromEmployerSignalE(OAIHolidayScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemeFromEmployerSignalError(OAIHolidayScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemeRevisionByNumberSignalError() instead")
    void getHolidaySchemeRevisionByNumberSignalE(OAIHolidayScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemeRevisionByNumberSignalError(OAIHolidayScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemeRevisionsSignalError() instead")
    void getHolidaySchemeRevisionsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemeRevisionsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemesByEffectiveDateSignalError() instead")
    void getHolidaySchemesByEffectiveDateSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemesByEffectiveDateSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemesFromEmployerSignalError() instead")
    void getHolidaySchemesFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemesFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemesWithTagSignalError() instead")
    void getHolidaySchemesWithTagSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemesWithTagSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagFromHolidaySchemeRevisionSignalError() instead")
    void getTagFromHolidaySchemeRevisionSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagFromHolidaySchemeRevisionSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagFromHolidaySchemeSignalError() instead")
    void getTagFromHolidaySchemeSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagFromHolidaySchemeSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagsFromHolidaySchemeRevisionSignalError() instead")
    void getTagsFromHolidaySchemeRevisionSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagsFromHolidaySchemeRevisionSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagsFromHolidaySchemeSignalError() instead")
    void getTagsFromHolidaySchemeSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagsFromHolidaySchemeSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchHolidaySchemeSignalError() instead")
    void patchHolidaySchemeSignalE(OAIHolidayScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchHolidaySchemeSignalError(OAIHolidayScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postHolidaySchemeIntoEmployerSignalError() instead")
    void postHolidaySchemeIntoEmployerSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postHolidaySchemeIntoEmployerSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putHolidaySchemeIntoEmployerSignalError() instead")
    void putHolidaySchemeIntoEmployerSignalE(OAIHolidayScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putHolidaySchemeIntoEmployerSignalError(OAIHolidayScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putHolidaySchemeTagSignalError() instead")
    void putHolidaySchemeTagSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putHolidaySchemeTagSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteHolidaySchemeSignalErrorFull() instead")
    void deleteHolidaySchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHolidaySchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHolidaySchemeRevisionSignalErrorFull() instead")
    void deleteHolidaySchemeRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHolidaySchemeRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHolidaySchemeRevisionByNumberSignalErrorFull() instead")
    void deleteHolidaySchemeRevisionByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHolidaySchemeRevisionByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHolidaySchemeTagSignalErrorFull() instead")
    void deleteHolidaySchemeTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHolidaySchemeTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllHolidaySchemeTagsSignalErrorFull() instead")
    void getAllHolidaySchemeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllHolidaySchemeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemeByEffectiveDateSignalErrorFull() instead")
    void getHolidaySchemeByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemeByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemeFromEmployerSignalErrorFull() instead")
    void getHolidaySchemeFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemeFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemeRevisionByNumberSignalErrorFull() instead")
    void getHolidaySchemeRevisionByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemeRevisionByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemeRevisionsSignalErrorFull() instead")
    void getHolidaySchemeRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemeRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemesByEffectiveDateSignalErrorFull() instead")
    void getHolidaySchemesByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemesByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemesFromEmployerSignalErrorFull() instead")
    void getHolidaySchemesFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemesFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidaySchemesWithTagSignalErrorFull() instead")
    void getHolidaySchemesWithTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidaySchemesWithTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagFromHolidaySchemeRevisionSignalErrorFull() instead")
    void getTagFromHolidaySchemeRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagFromHolidaySchemeRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagFromHolidaySchemeSignalErrorFull() instead")
    void getTagFromHolidaySchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagFromHolidaySchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagsFromHolidaySchemeRevisionSignalErrorFull() instead")
    void getTagsFromHolidaySchemeRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagsFromHolidaySchemeRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagsFromHolidaySchemeSignalErrorFull() instead")
    void getTagsFromHolidaySchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagsFromHolidaySchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchHolidaySchemeSignalErrorFull() instead")
    void patchHolidaySchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchHolidaySchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postHolidaySchemeIntoEmployerSignalErrorFull() instead")
    void postHolidaySchemeIntoEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postHolidaySchemeIntoEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putHolidaySchemeIntoEmployerSignalErrorFull() instead")
    void putHolidaySchemeIntoEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putHolidaySchemeIntoEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putHolidaySchemeTagSignalErrorFull() instead")
    void putHolidaySchemeTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putHolidaySchemeTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
