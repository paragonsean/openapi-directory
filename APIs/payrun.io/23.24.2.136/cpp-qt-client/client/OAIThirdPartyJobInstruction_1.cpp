/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThirdPartyJobInstruction_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThirdPartyJobInstruction_1::OAIThirdPartyJobInstruction_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThirdPartyJobInstruction_1::OAIThirdPartyJobInstruction_1() {
    this->initializeModel();
}

OAIThirdPartyJobInstruction_1::~OAIThirdPartyJobInstruction_1() {}

void OAIThirdPartyJobInstruction_1::initializeModel() {

    m_employer_href_isSet = false;
    m_employer_href_isValid = false;

    m_holding_date_isSet = false;
    m_holding_date_isValid = false;

    m_instruction_type_isSet = false;
    m_instruction_type_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_pay_load_isSet = false;
    m_pay_load_isValid = false;
}

void OAIThirdPartyJobInstruction_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThirdPartyJobInstruction_1::fromJsonObject(QJsonObject json) {

    m_employer_href_isValid = ::OpenAPI::fromJsonValue(m_employer_href, json[QString("EmployerHref")]);
    m_employer_href_isSet = !json[QString("EmployerHref")].isNull() && m_employer_href_isValid;

    m_holding_date_isValid = ::OpenAPI::fromJsonValue(m_holding_date, json[QString("HoldingDate")]);
    m_holding_date_isSet = !json[QString("HoldingDate")].isNull() && m_holding_date_isValid;

    m_instruction_type_isValid = ::OpenAPI::fromJsonValue(m_instruction_type, json[QString("InstructionType")]);
    m_instruction_type_isSet = !json[QString("InstructionType")].isNull() && m_instruction_type_isValid;

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("MetaData")]);
    m_meta_data_isSet = !json[QString("MetaData")].isNull() && m_meta_data_isValid;

    m_pay_load_isValid = ::OpenAPI::fromJsonValue(m_pay_load, json[QString("PayLoad")]);
    m_pay_load_isSet = !json[QString("PayLoad")].isNull() && m_pay_load_isValid;
}

QString OAIThirdPartyJobInstruction_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThirdPartyJobInstruction_1::asJsonObject() const {
    QJsonObject obj;
    if (m_employer_href_isSet) {
        obj.insert(QString("EmployerHref"), ::OpenAPI::toJsonValue(m_employer_href));
    }
    if (m_holding_date_isSet) {
        obj.insert(QString("HoldingDate"), ::OpenAPI::toJsonValue(m_holding_date));
    }
    if (m_instruction_type_isSet) {
        obj.insert(QString("InstructionType"), ::OpenAPI::toJsonValue(m_instruction_type));
    }
    if (m_meta_data_isSet) {
        obj.insert(QString("MetaData"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_pay_load_isSet) {
        obj.insert(QString("PayLoad"), ::OpenAPI::toJsonValue(m_pay_load));
    }
    return obj;
}

QString OAIThirdPartyJobInstruction_1::getEmployerHref() const {
    return m_employer_href;
}
void OAIThirdPartyJobInstruction_1::setEmployerHref(const QString &employer_href) {
    m_employer_href = employer_href;
    m_employer_href_isSet = true;
}

bool OAIThirdPartyJobInstruction_1::is_employer_href_Set() const{
    return m_employer_href_isSet;
}

bool OAIThirdPartyJobInstruction_1::is_employer_href_Valid() const{
    return m_employer_href_isValid;
}

QDateTime OAIThirdPartyJobInstruction_1::getHoldingDate() const {
    return m_holding_date;
}
void OAIThirdPartyJobInstruction_1::setHoldingDate(const QDateTime &holding_date) {
    m_holding_date = holding_date;
    m_holding_date_isSet = true;
}

bool OAIThirdPartyJobInstruction_1::is_holding_date_Set() const{
    return m_holding_date_isSet;
}

bool OAIThirdPartyJobInstruction_1::is_holding_date_Valid() const{
    return m_holding_date_isValid;
}

QString OAIThirdPartyJobInstruction_1::getInstructionType() const {
    return m_instruction_type;
}
void OAIThirdPartyJobInstruction_1::setInstructionType(const QString &instruction_type) {
    m_instruction_type = instruction_type;
    m_instruction_type_isSet = true;
}

bool OAIThirdPartyJobInstruction_1::is_instruction_type_Set() const{
    return m_instruction_type_isSet;
}

bool OAIThirdPartyJobInstruction_1::is_instruction_type_Valid() const{
    return m_instruction_type_isValid;
}

OAIObject OAIThirdPartyJobInstruction_1::getMetaData() const {
    return m_meta_data;
}
void OAIThirdPartyJobInstruction_1::setMetaData(const OAIObject &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIThirdPartyJobInstruction_1::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIThirdPartyJobInstruction_1::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

QString OAIThirdPartyJobInstruction_1::getPayLoad() const {
    return m_pay_load;
}
void OAIThirdPartyJobInstruction_1::setPayLoad(const QString &pay_load) {
    m_pay_load = pay_load;
    m_pay_load_isSet = true;
}

bool OAIThirdPartyJobInstruction_1::is_pay_load_Set() const{
    return m_pay_load_isSet;
}

bool OAIThirdPartyJobInstruction_1::is_pay_load_Valid() const{
    return m_pay_load_isValid;
}

bool OAIThirdPartyJobInstruction_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_employer_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holding_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instruction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_load_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThirdPartyJobInstruction_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
