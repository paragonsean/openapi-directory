/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDpsJobInstruction_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDpsJobInstruction_1::OAIDpsJobInstruction_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDpsJobInstruction_1::OAIDpsJobInstruction_1() {
    this->initializeModel();
}

OAIDpsJobInstruction_1::~OAIDpsJobInstruction_1() {}

void OAIDpsJobInstruction_1::initializeModel() {

    m_apply_isSet = false;
    m_apply_isValid = false;

    m_employer_isSet = false;
    m_employer_isValid = false;

    m_from_date_isSet = false;
    m_from_date_isValid = false;

    m_holding_date_isSet = false;
    m_holding_date_isValid = false;

    m_message_types_isSet = false;
    m_message_types_isValid = false;

    m_messages_to_process_isSet = false;
    m_messages_to_process_isValid = false;

    m_retrieve_isSet = false;
    m_retrieve_isValid = false;
}

void OAIDpsJobInstruction_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDpsJobInstruction_1::fromJsonObject(QJsonObject json) {

    m_apply_isValid = ::OpenAPI::fromJsonValue(m_apply, json[QString("Apply")]);
    m_apply_isSet = !json[QString("Apply")].isNull() && m_apply_isValid;

    m_employer_isValid = ::OpenAPI::fromJsonValue(m_employer, json[QString("Employer")]);
    m_employer_isSet = !json[QString("Employer")].isNull() && m_employer_isValid;

    m_from_date_isValid = ::OpenAPI::fromJsonValue(m_from_date, json[QString("FromDate")]);
    m_from_date_isSet = !json[QString("FromDate")].isNull() && m_from_date_isValid;

    m_holding_date_isValid = ::OpenAPI::fromJsonValue(m_holding_date, json[QString("HoldingDate")]);
    m_holding_date_isSet = !json[QString("HoldingDate")].isNull() && m_holding_date_isValid;

    m_message_types_isValid = ::OpenAPI::fromJsonValue(m_message_types, json[QString("MessageTypes")]);
    m_message_types_isSet = !json[QString("MessageTypes")].isNull() && m_message_types_isValid;

    m_messages_to_process_isValid = ::OpenAPI::fromJsonValue(m_messages_to_process, json[QString("MessagesToProcess")]);
    m_messages_to_process_isSet = !json[QString("MessagesToProcess")].isNull() && m_messages_to_process_isValid;

    m_retrieve_isValid = ::OpenAPI::fromJsonValue(m_retrieve, json[QString("Retrieve")]);
    m_retrieve_isSet = !json[QString("Retrieve")].isNull() && m_retrieve_isValid;
}

QString OAIDpsJobInstruction_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDpsJobInstruction_1::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_isSet) {
        obj.insert(QString("Apply"), ::OpenAPI::toJsonValue(m_apply));
    }
    if (m_employer.isSet()) {
        obj.insert(QString("Employer"), ::OpenAPI::toJsonValue(m_employer));
    }
    if (m_from_date_isSet) {
        obj.insert(QString("FromDate"), ::OpenAPI::toJsonValue(m_from_date));
    }
    if (m_holding_date_isSet) {
        obj.insert(QString("HoldingDate"), ::OpenAPI::toJsonValue(m_holding_date));
    }
    if (m_message_types.isSet()) {
        obj.insert(QString("MessageTypes"), ::OpenAPI::toJsonValue(m_message_types));
    }
    if (m_messages_to_process.isSet()) {
        obj.insert(QString("MessagesToProcess"), ::OpenAPI::toJsonValue(m_messages_to_process));
    }
    if (m_retrieve_isSet) {
        obj.insert(QString("Retrieve"), ::OpenAPI::toJsonValue(m_retrieve));
    }
    return obj;
}

bool OAIDpsJobInstruction_1::isApply() const {
    return m_apply;
}
void OAIDpsJobInstruction_1::setApply(const bool &apply) {
    m_apply = apply;
    m_apply_isSet = true;
}

bool OAIDpsJobInstruction_1::is_apply_Set() const{
    return m_apply_isSet;
}

bool OAIDpsJobInstruction_1::is_apply_Valid() const{
    return m_apply_isValid;
}

OAIEmployer_2 OAIDpsJobInstruction_1::getEmployer() const {
    return m_employer;
}
void OAIDpsJobInstruction_1::setEmployer(const OAIEmployer_2 &employer) {
    m_employer = employer;
    m_employer_isSet = true;
}

bool OAIDpsJobInstruction_1::is_employer_Set() const{
    return m_employer_isSet;
}

bool OAIDpsJobInstruction_1::is_employer_Valid() const{
    return m_employer_isValid;
}

QDate OAIDpsJobInstruction_1::getFromDate() const {
    return m_from_date;
}
void OAIDpsJobInstruction_1::setFromDate(const QDate &from_date) {
    m_from_date = from_date;
    m_from_date_isSet = true;
}

bool OAIDpsJobInstruction_1::is_from_date_Set() const{
    return m_from_date_isSet;
}

bool OAIDpsJobInstruction_1::is_from_date_Valid() const{
    return m_from_date_isValid;
}

QDateTime OAIDpsJobInstruction_1::getHoldingDate() const {
    return m_holding_date;
}
void OAIDpsJobInstruction_1::setHoldingDate(const QDateTime &holding_date) {
    m_holding_date = holding_date;
    m_holding_date_isSet = true;
}

bool OAIDpsJobInstruction_1::is_holding_date_Set() const{
    return m_holding_date_isSet;
}

bool OAIDpsJobInstruction_1::is_holding_date_Valid() const{
    return m_holding_date_isValid;
}

OAIType OAIDpsJobInstruction_1::getMessageTypes() const {
    return m_message_types;
}
void OAIDpsJobInstruction_1::setMessageTypes(const OAIType &message_types) {
    m_message_types = message_types;
    m_message_types_isSet = true;
}

bool OAIDpsJobInstruction_1::is_message_types_Set() const{
    return m_message_types_isSet;
}

bool OAIDpsJobInstruction_1::is_message_types_Valid() const{
    return m_message_types_isValid;
}

OAIMessage OAIDpsJobInstruction_1::getMessagesToProcess() const {
    return m_messages_to_process;
}
void OAIDpsJobInstruction_1::setMessagesToProcess(const OAIMessage &messages_to_process) {
    m_messages_to_process = messages_to_process;
    m_messages_to_process_isSet = true;
}

bool OAIDpsJobInstruction_1::is_messages_to_process_Set() const{
    return m_messages_to_process_isSet;
}

bool OAIDpsJobInstruction_1::is_messages_to_process_Valid() const{
    return m_messages_to_process_isValid;
}

bool OAIDpsJobInstruction_1::isRetrieve() const {
    return m_retrieve;
}
void OAIDpsJobInstruction_1::setRetrieve(const bool &retrieve) {
    m_retrieve = retrieve;
    m_retrieve_isSet = true;
}

bool OAIDpsJobInstruction_1::is_retrieve_Set() const{
    return m_retrieve_isSet;
}

bool OAIDpsJobInstruction_1::is_retrieve_Valid() const{
    return m_retrieve_isValid;
}

bool OAIDpsJobInstruction_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holding_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_to_process.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retrieve_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDpsJobInstruction_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
